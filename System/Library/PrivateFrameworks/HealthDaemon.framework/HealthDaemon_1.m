uint64_t _HDAddCategoryColumnToUserDomainConceptPropertyTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;

  v5 = [a2 protectedDatabase];
  v6 = [v5 executeSQLStatements:&unk_1F17E9F60 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddDisplayNameAndRenameAuthorizationsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17E9F78 error:a4] ^ 1;

  return v6;
}

uint64_t _HDRenameSignedClinicalDataToVerifiableClinicalRecordsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  int v7 = [v6 deleteDataEntitySubclassTablesIfExist:&unk_1F17E9F90 intermediateTables:&unk_1F17E9FA8 error:a4];

  if (v7)
  {
    v8 = [v5 protectedDatabase];
    uint64_t v9 = [v8 executeSQLStatements:&unk_1F17E9FC0 error:a4] ^ 1;
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

uint64_t _HDAddUniquenessChecksumToOriginalSignedClinicalDataTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17E9FD8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDUpdateRecordSamplesAddReferenceColumn(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17E9FF0 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddInvitationUUIDToSummarySharingEntryTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA008 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddRelevantDateAndDataValueToSignedClinicalDataTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA020 error:a4] ^ 1;

  return v6;
}

uint64_t _HDRemoveInvitationNotNullConstraintFromSummarySharingEntryTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA038 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddOwnerParticipantToSummarySharingEntryTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA050 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddNotificationStatusToSummarySharingEntryTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA068 error:a4] ^ 1;

  return v6;
}

uint64_t _HDResetProtectedCKRecordCache(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA098 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddDeletedAndLastModifiedDateColumnsToOriginalSignedClinicalDataTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA080 error:a4] ^ 1;

  return v6;
}

uint64_t _HDMigrateCycleTrackingOnboarding(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v37 = 0;
  v38 = &v37;
  uint64_t v39 = 0x3032000000;
  v40 = __Block_byref_object_copy__106;
  v41 = __Block_byref_object_dispose__106;
  id v42 = 0;
  v8 = [v7 protectedDatabase];
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = ___HDMigrateCycleTrackingOnboarding_block_invoke;
  v36[3] = &unk_1E62F3640;
  v36[4] = &v37;
  char v9 = [v8 executeUncachedSQL:@"SELECT value FROM key_value_secure WHERE domain=\"com.apple.private.health.menstrual-cycles\" AND key=\"OnboardingCompleted\"" error:a4 bindingHandler:0 enumerationHandler:v36];

  if (v9)
  {
    if (v38[5])
    {
      uint64_t v30 = 0;
      v31 = &v30;
      uint64_t v32 = 0x3032000000;
      v33 = __Block_byref_object_copy__106;
      v34 = __Block_byref_object_dispose__106;
      id v35 = 0;
      v10 = [v7 protectedDatabase];
      v29[0] = MEMORY[0x1E4F143A8];
      v29[1] = 3221225472;
      v29[2] = ___HDMigrateCycleTrackingOnboarding_block_invoke_2;
      v29[3] = &unk_1E62F3640;
      v29[4] = &v30;
      char v11 = [v10 executeUncachedSQL:@"SELECT value FROM key_value_secure WHERE domain=\"com.apple.private.health.menstrual-cycles\" AND key=\"OnboardingFirstCompletedDate\"" error:a4 bindingHandler:0 enumerationHandler:v29];

      if ((v11 & 1) == 0)
      {
        uint64_t v19 = 1;
LABEL_17:
        _Block_object_dispose(&v30, 8);

        goto LABEL_18;
      }
      if (!v31[5])
      {
        uint64_t v12 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:581274000.0];
        v13 = (void *)v31[5];
        v31[5] = v12;

        _HKInitializeLogging();
        v14 = *MEMORY[0x1E4F29F18];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BCB7D000, v14, OS_LOG_TYPE_DEFAULT, "Found a Cycle Tracking onboarding version without a date, assuming WWDC 2019!", buf, 2u);
        }
      }
      v15 = [MEMORY[0x1E4F1CA80] set];
      v16 = [v7 unprotectedDatabase];
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v26[2] = ___HDMigrateCycleTrackingOnboarding_block_invoke_951;
      v26[3] = &unk_1E62F3D38;
      id v17 = v15;
      id v27 = v17;
      char v18 = [v16 executeUncachedSQL:@"SELECT completion_date FROM onboarding_completions WHERE feature_identifier=\"MenstrualCycles\" AND version=2 AND deleted=0" error:a4 bindingHandler:0 enumerationHandler:v26];

      if (v18)
      {
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 3221225472;
        v25[2] = ___HDMigrateCycleTrackingOnboarding_block_invoke_2_952;
        v25[3] = &unk_1E6301BC0;
        v25[4] = &v30;
        if (objc_msgSend(v17, "hk_containsObjectPassingTest:", v25))
        {
          uint64_t v19 = 0;
LABEL_16:

          goto LABEL_17;
        }
        uint64_t v20 = [v6 fetchLegacySyncIdentity:v7 error:a4];
        if (v20 != -1)
        {
          v21 = [v7 unprotectedDatabase];
          v24[0] = MEMORY[0x1E4F143A8];
          v24[1] = 3221225472;
          v24[2] = ___HDMigrateCycleTrackingOnboarding_block_invoke_3;
          v24[3] = &unk_1E62FB758;
          v24[4] = &v30;
          v24[5] = v20;
          int v22 = [v21 executeUncachedSQL:@"INSERT OR REPLACE INTO onboarding_completions (uuid, feature_identifier, version, completion_date, mod_date, deleted, sync_provenance, sync_identity) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", a4, v24, 0 error bindingHandler enumerationHandler];

          uint64_t v19 = v22 ^ 1u;
          goto LABEL_16;
        }
      }
      uint64_t v19 = 1;
      goto LABEL_16;
    }
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 1;
  }
LABEL_18:
  _Block_object_dispose(&v37, 8);

  return v19;
}

void sub_1BCE971DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDDeleteMedicalRecordsDiagnosticResultTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  id v6 = [v5 protectedDatabase];
  int v7 = [v6 deleteRowsFromDataEntitySubclassTable:@"diagnostic_test_result_samples" intermediateTables:&unk_1F17EA0B0 error:a4];

  if (v7)
  {
    v8 = [v5 protectedDatabase];
    int v9 = [v8 executeUncachedSQL:@"UPDATE clinical_accounts SET last_extracted_rowid = NULL" error:a4];

    uint64_t v10 = v9 ^ 1u;
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

uint64_t _HDAddForeignKeyReferenceFromConceptIndexToObjects(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA0C8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDClearResumableQueryCache(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA0F8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddToBeDeletedColumnToSharingAuthorizationsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA110 error:a4] ^ 1;

  return v6;
}

uint64_t _HDMakeOriginalRecordsRawContentNullable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA0E0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddUserWheelchairModeColumnToSummarySharingEntryTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA128 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddDeletedColumnToClinicalCredentials(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA140 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddWorkoutActivitiesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA158 error:a4] ^ 1;

  return v6;
}

uint64_t _HDRenameWorkoutActivityForeignKey(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA188 error:a4] ^ 1;

  return v6;
}

uint64_t _HDFixWorkoutActivityForeignKey(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA1A0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDSourceTypeToSignedClinicalDataTables(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA1D0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddAttachmentAndReferencesEntities(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA170 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddVisionPrescriptionEntityTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA1B8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddLotNumberToVaccinationRecordSamplesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA1E8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDResetProtectedInconsistentCloudCache(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA200 error:a4] ^ 1;

  return v6;
}

uint64_t __Block_byref_object_copy__106(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__106(uint64_t a1)
{
}

double HDDemoData_timeFromDateComponents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((double)a2 * 60.0 + (double)a1 * 3600.0 + (double)a3) * 0.0000115740741;
}

double HDDemoData_localTimeFromCurrentTime(double a1)
{
  return a1 - (double)(uint64_t)a1;
}

uint64_t HDDemoData_currentDayFromCurrentTime(double a1)
{
  return (uint64_t)a1;
}

uint64_t HDDemoData_currentDayOfWeekFromCurrentTime(double a1)
{
  return (uint64_t)a1 % 7;
}

double HDDemoData_timeFromTimeInterval(double a1)
{
  return a1 * 0.0000115740741;
}

double HDDemoData_timeIntervalFromTime(double a1)
{
  return a1 * 86400.0;
}

uint64_t HDDemoData_currentHourFromCurrentTime(double a1)
{
  return (uint64_t)((a1 - (double)(uint64_t)a1) * 24.0);
}

double HDDemoData_timeFromNSDateComponents(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 hour];
  uint64_t v3 = [v1 minute];
  uint64_t v4 = [v1 second];

  return ((double)v3 * 60.0 + (double)v2 * 3600.0 + (double)v4) * 0.0000115740741;
}

uint64_t HDDemoData_ageBetweenNSDateComponentsAndDate(void *a1, void *a2)
{
  uint64_t v3 = (objc_class *)MEMORY[0x1E4F1C9A8];
  id v4 = a2;
  id v5 = a1;
  id v6 = [v3 alloc];
  int v7 = (void *)[v6 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
  v8 = [v7 dateFromComponents:v5];

  int v9 = [v7 components:4 fromDate:v8 toDate:v4 options:0];

  uint64_t v10 = [v9 year];
  return v10;
}

uint64_t HDDemoData_currentDayOfYearFromNSDateComponents(void *a1)
{
  id v1 = (objc_class *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  id v3 = [v1 alloc];
  id v4 = (void *)[v3 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
  id v5 = [v4 dateFromComponents:v2];

  uint64_t v6 = [v4 ordinalityOfUnit:16 inUnit:4 forDate:v5];
  return v6;
}

double HDDemoDataBloodPressureMake(uint64_t a1)
{
  return (double)a1;
}

double HDDemoData_roundDoubleWithDecimalPositions(uint64_t a1, double a2)
{
  double v3 = __exp10((double)a1);
  return (double)(uint64_t)(v3 * a2) / v3;
}

uint64_t HDDemoData_randomBiologicalSex()
{
  return arc4random_uniform(2u) + 1;
}

uint64_t HDDemoData_randomBloodType()
{
  return arc4random_uniform(7u) + 1;
}

uint64_t HDDemoData_randomFitzpatrickSkinType()
{
  return arc4random_uniform(5u) + 1;
}

void sub_1BCE98404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id HDFitnessFriendActivitySnapshotEntityPredicateForFriendUUID()
{
  v0 = (void *)MEMORY[0x1E4F65D00];
  id v1 = _HDSQLiteValueForUUID();
  id v2 = [v0 predicateWithProperty:@"friend_uuid" equalToValue:v1];

  return v2;
}

uint64_t HDFitnessFriendActivitySnapshotEntityPredicateForSnapshotIndex(uint64_t a1)
{
  return [MEMORY[0x1E4F65D00] predicateWithProperty:@"snapshot_index" equalToValue:a1];
}

uint64_t __Block_byref_object_copy__107(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__107(uint64_t a1)
{
}

void sub_1BCE987B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDFitnessFriendActivitySnapshotEntityPredicateThroughAnchor(uint64_t a1)
{
  return [MEMORY[0x1E4F65D00] predicateWithProperty:*MEMORY[0x1E4F65C70] lessThanOrEqualToValue:a1];
}

uint64_t __HDFilterSharesBySharingType_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = [v3 recordID];
    int v7 = [v6 zoneID];
    uint64_t v17 = 0;
    char v8 = objc_msgSend(v7, "hd_isUnifiedSyncZoneIDForSyncCircleIdentifier:", &v17);

    if (v8) {
      goto LABEL_6;
    }
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if ((v5 & 2) == 0) {
    goto LABEL_7;
  }
  int v9 = [v4 recordID];
  uint64_t v10 = [v9 zoneID];
  uint64_t v15 = 0;
  id v16 = 0;
  char v11 = objc_msgSend(v10, "hd_isSharedSummaryZoneIDForUserIdentifier:syncCircleIdentifier:", &v16, &v15);
  id v12 = v16;

  if ((v11 & 1) == 0)
  {
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v13 = 1;
LABEL_8:

  return v13;
}

void sub_1BCE9DAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    id v12 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = [v11 reason];
    objc_msgSend(v12, "hk_assignError:code:format:", v10, 100, @"%@: Failed to create cloud sync container: %@");

    objc_end_catch();
    JUMPOUT(0x1BCE9DA88);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BCE9E42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCE9FF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t __Block_byref_object_copy__108(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__108(uint64_t a1)
{
}

void sub_1BCEA2B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEA3578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__109(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__109(uint64_t a1)
{
  id v1 = (void **)(a1 + 48);
  std::vector<std::tuple<long long,HKSample * {__strong}>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

__n128 __Block_byref_object_copy__295(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__296(uint64_t a1)
{
  id v1 = (void **)(a1 + 48);
  std::vector<std::tuple<long long,HKSample * {__strong}>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t __Block_byref_object_copy__298(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__299(uint64_t a1)
{
}

void sub_1BCEA3BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEA45FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEA4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__110(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__110(uint64_t a1)
{
}

void sub_1BCEA5030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEA5AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEA5D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodableEntityIdentifierReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_33:
        *(void *)(a1 + 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCEA8E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HDMedicationDoseEventEntityPredicateForLogOrigin(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  id v3 = (void *)MEMORY[0x1E4F65D00];
  id v4 = [NSNumber numberWithInteger:a1];
  uint64_t v5 = [v3 predicateWithProperty:@"log_origin" value:v4 comparisonType:v2];

  return v5;
}

uint64_t HDMedicationDoseEventEntityPredicateForMedicationIdentifier(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  return [MEMORY[0x1E4F65D00] predicateWithProperty:@"medication_identifier" value:a1 comparisonType:v2];
}

uint64_t HDMedicationDoseEventEntityPredicateForMedicationIdentifiers(uint64_t a1)
{
  return [MEMORY[0x1E4F65D10] containsPredicateWithProperty:@"medication_identifier" values:a1];
}

uint64_t HDMedicationDoseEventEntityPredicateForStatus(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  return [MEMORY[0x1E4F65D00] predicateWithProperty:@"status" value:a1 comparisonType:v2];
}

uint64_t HDMedicationDoseEventEntityPredicateForStatuses(uint64_t a1)
{
  return [MEMORY[0x1E4F65D10] containsPredicateWithProperty:@"status" values:a1];
}

uint64_t HDMedicationDoseEventEntityPredicateForScheduleItemIdentifier(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  return [MEMORY[0x1E4F65D00] predicateWithProperty:@"schedule_item_identifier" value:a1 comparisonType:v2];
}

uint64_t HDMedicationDoseEventEntityPredicateForScheduleItemIdentifiers(uint64_t a1)
{
  return [MEMORY[0x1E4F65D10] containsPredicateWithProperty:@"schedule_item_identifier" values:a1];
}

uint64_t HDMedicationDoseEventEntityPredicateForMedicationUUID(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  return [MEMORY[0x1E4F65D00] predicateWithProperty:@"medication_uuid" value:a1 comparisonType:v2];
}

id HDMedicationDoseEventEntityPredicateForHashedMedicationIdentifier(void *a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  id v3 = (void *)MEMORY[0x1E4F65D00];
  id v4 = [a1 underlyingIdentifier];
  uint64_t v5 = [v3 predicateWithProperty:@"hashed_medication_identifier" value:v4 comparisonType:v2];

  return v5;
}

id HDMedicationDoseEventEntityPredicateForHashedMedicationIdentifiers(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "underlyingIdentifier", (void)v11);
        [v2 addObject:v8];
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  unsigned int v9 = [MEMORY[0x1E4F65D10] containsPredicateWithProperty:@"hashed_medication_identifier" values:v2];

  return v9;
}

id HDMedicationDoseEventEntityPredicateForScheduledDate(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1E4F65D00];
  id v3 = _HDSQLiteValueForDate();
  uint64_t v4 = [v2 predicateWithProperty:@"scheduled_date" value:v3 comparisonType:a1];

  return v4;
}

void sub_1BCEACC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__111(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__111(uint64_t a1)
{
}

void sub_1BCEAD93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1BCEAEA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1BCEAF110(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__112(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__112(uint64_t a1)
{
}

uint64_t HDCodableDeviceReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  char v8 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  unsigned int v9 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  unint64_t v10 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v10) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      if (v12++ >= 9)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = v7[542];
        goto LABEL_30;
      case 2u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = v8[543];
        goto LABEL_30;
      case 3u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = v9[544];
        goto LABEL_30;
      case 4u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 32;
        goto LABEL_30;
      case 5u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 24;
        goto LABEL_30;
      case 6u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 72;
        goto LABEL_30;
      case 7u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 40;
        goto LABEL_30;
      case 8u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 16;
        goto LABEL_30;
      case 9u:
        uint64_t v21 = PBReaderReadData();
        uint64_t v22 = 88;
LABEL_30:
        char v24 = *(void **)(a1 + v22);
        *(void *)(a1 + v22) = v21;

        goto LABEL_31;
      case 0xAu:
        *(unsigned char *)(a1 + 96) |= 1u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v27 = *(void *)(*(void *)(a2 + *v10) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v27 = 0;
        }
        *(void *)(a1 + 8) = v27;
        goto LABEL_31;
      case 0xBu:
        v28 = v9;
        v29 = v8;
        uint64_t v30 = v7;
        v31 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 80), v31);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v31, a2))
        {
          PBReaderRecallMark();

          uint64_t v7 = v30;
          char v8 = v29;
          unsigned int v9 = v28;
LABEL_31:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_31;
    }
  }
}

id HDAssetFileHandleForFileURL(void *a1, void *a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  _HKInitializeLogging();
  uint64_t v7 = (os_log_t *)MEMORY[0x1E4F29FA8];
  char v8 = (void *)*MEMORY[0x1E4F29FA8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FA8], OS_LOG_TYPE_DEBUG))
  {
    v31 = v8;
    uint64_t v32 = [v5 path];
    *(_DWORD *)buf = 138543362;
    v48 = v32;
    _os_log_debug_impl(&dword_1BCB7D000, v31, OS_LOG_TYPE_DEBUG, "Creating new asset file %{public}@", buf, 0xCu);
  }
  unsigned int v9 = [v5 path];
  char v10 = [v6 createFileAtPath:v9 contents:0 attributes:0];

  if (v10)
  {
    id v44 = 0;
    char v11 = [MEMORY[0x1E4F28CB0] fileHandleForUpdatingURL:v5 error:&v44];
    id v12 = v44;
    if (v11)
    {
      if (fcntl([v11 fileDescriptor], 48, 1))
      {
        _HKInitializeLogging();
        os_log_t v13 = *v7;
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          v33 = v13;
          v34 = [v5 path];
          int v35 = *__error();
          v36 = __error();
          uint64_t v37 = strerror(*v36);
          *(_DWORD *)buf = 138543874;
          v48 = v34;
          __int16 v49 = 1024;
          int v50 = v35;
          __int16 v51 = 2082;
          v52 = v37;
          _os_log_error_impl(&dword_1BCB7D000, v33, OS_LOG_TYPE_ERROR, "Error setting F_NOCACHE on file at %{public}@ failed (%d): %{public}s", buf, 0x1Cu);
        }
      }
      uint64_t v14 = *MEMORY[0x1E4F28348];
      uint64_t v15 = *MEMORY[0x1E4F28330];
      v45[0] = *MEMORY[0x1E4F28370];
      v45[1] = v15;
      v46[0] = v14;
      v46[1] = &unk_1F17EDD70;
      unint64_t v16 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v46 forKeys:v45 count:2];
      char v17 = v16;
      if (_HDIsUnitTesting)
      {

        char v17 = (void *)MEMORY[0x1E4F1CC08];
      }
      char v18 = [v5 path];
      id v43 = 0;
      char v19 = [v6 setAttributes:v17 ofItemAtPath:v18 error:&v43];
      id v20 = v43;

      if (v19)
      {
        id v21 = v5;
        if (unlink((const char *)[v21 fileSystemRepresentation]))
        {
          _HKInitializeLogging();
          os_log_t v22 = *v7;
          if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
          {
            v38 = v22;
            uint64_t v39 = [v21 path];
            int v40 = *__error();
            v41 = __error();
            id v42 = strerror(*v41);
            *(_DWORD *)buf = 138543874;
            v48 = v39;
            __int16 v49 = 1024;
            int v50 = v40;
            __int16 v51 = 2082;
            v52 = v42;
            _os_log_error_impl(&dword_1BCB7D000, v38, OS_LOG_TYPE_ERROR, "Error unlinking file at %{public}@ failed (%d): %{public}s", buf, 0x1Cu);
          }
        }
        id v23 = v11;
      }
      else
      {
        uint64_t v27 = NSString;
        v28 = [v5 path];
        v29 = [v27 stringWithFormat:@"Error setting protection class for %@", v28];

        objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:description:underlyingError:", a3, 102, v29, v20);
        id v23 = 0;
      }
    }
    else
    {
      [v6 removeItemAtURL:v5 error:0];
      uint64_t v25 = NSString;
      unint64_t v26 = [v5 path];
      char v17 = [v25 stringWithFormat:@"Failed to create fileHandle at %@", v26];

      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:description:underlyingError:", a3, 102, v17, v12);
      id v23 = 0;
    }
  }
  else
  {
    char v24 = (void *)MEMORY[0x1E4F28C58];
    id v12 = [v5 path];
    objc_msgSend(v24, "hk_assignError:code:format:", a3, 102, @"Error creating file at %@", v12);
    id v23 = 0;
  }

  return v23;
}

void setUnderlyingDeviceContext(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v4 syncIdentity];
  id v6 = [v5 codableSyncIdentity];
  [v3 setSyncIdentity:v6];

  objc_msgSend(v3, "setType:", objc_msgSend(v4, "type"));
  uint64_t v7 = [v4 productTypeName];
  [v3 setProductTypeName:v7];

  char v8 = [v4 currentOSName];
  [v3 setCurrentOSName:v8];

  if (v4) {
    [v4 currentOSVersion];
  }
  unsigned int v9 = HKNSOperatingSystemVersionString();
  [v3 setCurrentOSVersion:v9];

  char v10 = [v4 modificationDate];
  [v10 timeIntervalSinceReferenceDate];
  objc_msgSend(v3, "setModificationDate:");
}

__CFString *HDCloudSyncTargetPurposeToString(uint64_t a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      id v2 = @"Pull";
    }
    else
    {
      objc_msgSend(NSString, "stringWithFormat:", @"Unknown(%ld)", a1);
      id v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    id v2 = @"Push";
  }
  return v2;
}

__CFString *HDCloudSyncTargetOptionsToString(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    id v6 = @"()";
    goto LABEL_16;
  }
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v3 = v2;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    [v3 addObject:@"seize"];
    if ((a1 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  [v2 addObject:@"rebase"];
  if ((a1 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((a1 & 4) != 0) {
LABEL_5:
  }
    [v3 addObject:@"obsolete"];
LABEL_6:
  if ([v3 count])
  {
    id v4 = NSString;
    id v5 = [v3 componentsJoinedByString:@", "];
    id v6 = [v4 stringWithFormat:@"(%@)", v5];
  }
  else
  {
    _HKInitializeLogging();
    uint64_t v7 = *MEMORY[0x1E4F29FA8];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FA8], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v10 = a1;
      _os_log_fault_impl(&dword_1BCB7D000, v7, OS_LOG_TYPE_FAULT, "Cloud sync target options %ld did not produce any option strings", buf, 0xCu);
    }
    id v6 = @"()";
  }

LABEL_16:

  return v6;
}

void sub_1BCEB4764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a71, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__113(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__113(uint64_t a1)
{
}

void sub_1BCEB4A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BCEB546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__114(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__114(uint64_t a1)
{
}

uint64_t HDCodableNotificationInstructionMessageReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  char v8 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  uint64_t v9 = (int *)MEMORY[0x1E4F940B8];
  uint64_t v10 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v18 = v12++ >= 9;
      if (v18)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + v7[577]) |= 4u;
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
            break;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v9) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            goto LABEL_56;
          }
          v21 += 7;
          BOOL v18 = v22++ >= 9;
          if (v18)
          {
            uint64_t v23 = 0;
            goto LABEL_58;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_58:
        uint64_t v53 = v8[578];
        goto LABEL_67;
      case 2u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + v7[577]) |= 0x10u;
        while (2)
        {
          uint64_t v31 = *v3;
          uint64_t v32 = *(void *)(a2 + v31);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v9) + v32);
            *(void *)(a2 + v31) = v33;
            v23 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              BOOL v18 = v30++ >= 9;
              if (v18)
              {
                uint64_t v23 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_62:
        uint64_t v53 = v10[579];
        goto LABEL_67;
      case 3u:
        *(unsigned char *)(a1 + v7[577]) |= 2u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v37 = *(void *)(*(void *)(a2 + *v9) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v37 = 0;
        }
        uint64_t v54 = 16;
        goto LABEL_72;
      case 4u:
        uint64_t v38 = PBReaderReadString();
        uint64_t v39 = 72;
        goto LABEL_48;
      case 5u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + v7[577]) |= 1u;
        while (2)
        {
          uint64_t v42 = *v3;
          uint64_t v43 = *(void *)(a2 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
            *(void *)(a2 + v42) = v44;
            v23 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v18 = v41++ >= 9;
              if (v18)
              {
                uint64_t v23 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_66:
        uint64_t v53 = 8;
LABEL_67:
        *(void *)(a1 + v53) = v23;
        goto LABEL_73;
      case 6u:
        uint64_t v38 = PBReaderReadString();
        uint64_t v39 = 56;
        goto LABEL_48;
      case 7u:
        uint64_t v38 = PBReaderReadString();
        uint64_t v39 = 48;
LABEL_48:
        v46 = *(void **)(a1 + v39);
        *(void *)(a1 + v39) = v38;

        goto LABEL_73;
      case 8u:
        *(unsigned char *)(a1 + v7[577]) |= 8u;
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v37 = *(void *)(*(void *)(a2 + *v9) + v48);
          *(void *)(a2 + v47) = v48 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v37 = 0;
        }
        uint64_t v54 = 32;
LABEL_72:
        *(void *)(a1 + v54) = v37;
        goto LABEL_73;
      case 9u:
        __int16 v49 = v7;
        int v50 = v10;
        __int16 v51 = v8;
        v52 = objc_alloc_init(HDCodableNotificationInstructionCriteria);
        objc_storeStrong((id *)(a1 + 64), v52);
        if (PBReaderPlaceMark()
          && (HDCodableNotificationInstructionCriteriaReadFrom((uint64_t)v52, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          char v8 = v51;
          uint64_t v10 = v50;
          uint64_t v7 = v49;
LABEL_73:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_73;
    }
  }
}

void sub_1BCEBB918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BCEBD1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEBD54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __HDStringForIndexTriggerReasons_block_invoke(uint64_t a1, void *a2)
{
  id v2 = NSString;
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v2 stringWithFormat:@"(%@, %ld)", v4, objc_msgSend(v3, "countForObject:", v4)];

  return v5;
}

__CFString *HDDatabaseMigrationForeignKeyStatusToString(uint64_t a1)
{
  uint64_t v1 = @"<UNKNOWN>";
  if (a1 == 1) {
    uint64_t v1 = @"disabled";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"enabled";
  }
}

id HDCreateMigrationStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[HDDatabaseMigrationStep migrationStepFrom:a1 to:a2 handler:a3];
}

__CFString *HDDatabaseMigrationStatusToString(unint64_t a1)
{
  if (a1 > 4) {
    return @"<UNKNOWN>";
  }
  else {
    return off_1E6303060[a1];
  }
}

uint64_t HDCloudSyncCodableAttachmentReferenceReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((int)(v10 >> 3) > 99)
      {
        switch(v18)
        {
          case 'd':
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 88;
            break;
          case 'e':
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 72;
            break;
          case 'f':
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 48;
            break;
          default:
LABEL_55:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
        }
LABEL_54:
        uint64_t v43 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;
      }
      else
      {
        switch((int)v18)
        {
          case 1:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 64;
            goto LABEL_54;
          case 2:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 80;
            goto LABEL_54;
          case 3:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 40;
            goto LABEL_54;
          case 4:
            char v21 = 0;
            unsigned int v22 = 0;
            uint64_t v23 = 0;
            *(unsigned char *)(a1 + 96) |= 8u;
            while (2)
            {
              uint64_t v24 = *v3;
              uint64_t v25 = *(void *)(a2 + v24);
              unint64_t v26 = v25 + 1;
              if (v25 == -1 || v26 > *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
                *(void *)(a2 + v24) = v26;
                v23 |= (unint64_t)(v27 & 0x7F) << v21;
                if (v27 < 0)
                {
                  v21 += 7;
                  BOOL v15 = v22++ >= 9;
                  if (v15)
                  {
                    uint64_t v23 = 0;
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v23 = 0;
            }
LABEL_60:
            uint64_t v45 = 32;
            goto LABEL_69;
          case 5:
            *(unsigned char *)(a1 + 96) |= 1u;
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
            {
              uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v28) = v29 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              uint64_t v30 = 0;
            }
            *(void *)(a1 + 8) = v30;
            continue;
          case 6:
            char v31 = 0;
            unsigned int v32 = 0;
            uint64_t v23 = 0;
            *(unsigned char *)(a1 + 96) |= 2u;
            while (2)
            {
              uint64_t v33 = *v3;
              uint64_t v34 = *(void *)(a2 + v33);
              unint64_t v35 = v34 + 1;
              if (v34 == -1 || v35 > *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
                *(void *)(a2 + v33) = v35;
                v23 |= (unint64_t)(v36 & 0x7F) << v31;
                if (v36 < 0)
                {
                  v31 += 7;
                  BOOL v15 = v32++ >= 9;
                  if (v15)
                  {
                    uint64_t v23 = 0;
                    goto LABEL_64;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v23 = 0;
            }
LABEL_64:
            uint64_t v45 = 16;
            goto LABEL_69;
          case 7:
            uint64_t v19 = PBReaderReadData();
            uint64_t v20 = 56;
            goto LABEL_54;
          case 8:
            char v37 = 0;
            unsigned int v38 = 0;
            uint64_t v23 = 0;
            *(unsigned char *)(a1 + 96) |= 4u;
            break;
          default:
            goto LABEL_55;
        }
        while (1)
        {
          uint64_t v39 = *v3;
          uint64_t v40 = *(void *)(a2 + v39);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(a2 + *v4)) {
            break;
          }
          char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
          *(void *)(a2 + v39) = v41;
          v23 |= (unint64_t)(v42 & 0x7F) << v37;
          if ((v42 & 0x80) == 0) {
            goto LABEL_66;
          }
          v37 += 7;
          BOOL v15 = v38++ >= 9;
          if (v15)
          {
            uint64_t v23 = 0;
            goto LABEL_68;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_66:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_68:
        uint64_t v45 = 24;
LABEL_69:
        *(void *)(a1 + v45) = v23;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL HDCodableQuantitySeriesDatumReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 2u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v21 = 0;
        }
        unint64_t v26 = &OBJC_IVAR___HDCodableQuantitySeriesDatum__startDate;
        goto LABEL_38;
      }
      if (v18 == 2) {
        break;
      }
      if (v18 == 1)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v19 = *v3;
        unint64_t v20 = *(void *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
          *(void *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v21 = 0;
        }
        unint64_t v26 = &OBJC_IVAR___HDCodableQuantitySeriesDatum__endDate;
LABEL_38:
        *(void *)(a1 + *v26) = v21;
        goto LABEL_39;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_39:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    *(unsigned char *)(a1 + 32) |= 4u;
    uint64_t v24 = *v3;
    unint64_t v25 = *(void *)(a2 + v24);
    if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(void *)(a2 + *v4))
    {
      uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v25);
      *(void *)(a2 + v24) = v25 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + *v5) = 1;
      uint64_t v21 = 0;
    }
    unint64_t v26 = &OBJC_IVAR___HDCodableQuantitySeriesDatum__value;
    goto LABEL_38;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__115(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__115(uint64_t a1)
{
}

void sub_1BCEC9BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1BCECA3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HDUserDomainMedicalCodingEntityPredicateForCoding(void *a1)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)MEMORY[0x1E4F65D08];
  id v2 = (void *)MEMORY[0x1E4F65D00];
  id v3 = a1;
  id v4 = [v3 codingSystem];
  id v5 = [v4 identifier];
  id v6 = [v2 predicateWithProperty:@"medical_coding_system.string" equalToValue:v5];
  v13[0] = v6;
  uint64_t v7 = (void *)MEMORY[0x1E4F65D00];
  char v8 = [v3 code];

  uint64_t v9 = [v7 predicateWithProperty:@"medical_coding_code.string" equalToValue:v8];
  v13[1] = v9;
  unint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:2];
  uint64_t v11 = [v1 predicateMatchingAllPredicates:v10];

  return v11;
}

double health::FormatOptions::FormatOptions(health::FormatOptions *this)
{
  *(void *)this = 2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 5) = 0;
  *(void *)&double result = 0x2B0000002B00;
  *((_DWORD *)this + 12) = 11008;
  *((_WORD *)this + 26) = 32;
  return result;
}

{
  double result;

  *(void *)this = 2;
  *((void *)this + 1) = 0;
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 5) = 0;
  *(void *)&double result = 0x2B0000002B00;
  *((_DWORD *)this + 12) = 11008;
  *((_WORD *)this + 26) = 32;
  return result;
}

uint64_t health::FormatOptions::FormatOptions(uint64_t this, const char **a2)
{
  *(void *)this = 2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 11008;
  *(_WORD *)(this + 52) = 32;
  id v2 = *a2;
  id v3 = *a2 + 1;
  *a2 = v3;
  if (*v2 != 123)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format options string (must begin with '{').");
    goto LABEL_45;
  }
  int v4 = *(unsigned __int8 *)v3;
  if ((v4 - 48) > 9)
  {
LABEL_52:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    goto LABEL_45;
  }
  uint64_t v5 = 0;
  id v6 = v2 + 2;
  do
  {
    *a2 = v6;
    uint64_t v5 = (v4 - 48) + 10 * v5;
    int v7 = *(unsigned __int8 *)v6++;
    int v4 = v7;
  }
  while ((v7 - 58) >= 0xFFFFFFF6);
  *(void *)(this + 8) = v5;
  int v10 = *((unsigned __int8 *)v6 - 1);
  uint64_t v9 = v6 - 1;
  int v8 = v10;
  if (v10 == 58)
  {
    while (1)
    {
      uint64_t v11 = v9++;
      *a2 = v9;
      int v12 = *((unsigned __int8 *)v11 + 1);
      if (v12 == 125) {
        goto LABEL_8;
      }
      if (!v11[1]) {
        goto LABEL_44;
      }
      if ((char)v12 <= 97)
      {
        if ((char)v12 <= 75)
        {
          switch((char)v12)
          {
            case '&':
              *(unsigned char *)(this + 53) = 1;
              continue;
            case '\'':
            case '(':
            case ')':
            case '*':
            case '-':
            case '/':
              goto LABEL_51;
            case '+':
              *(unsigned char *)(this + 48) = 1;
              uint64_t v9 = v11 + 2;
              *a2 = v11 + 2;
              int v18 = *((unsigned __int8 *)v11 + 2);
              *(unsigned char *)(this + 49) = v18;
              if (v18) {
                continue;
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (no positive number indicator character after +)");
              goto LABEL_45;
            case ',':
              continue;
            case '.':
              *(unsigned char *)(this + 32) = 1;
              *a2 = v11 + 2;
              int v19 = *((unsigned __int8 *)v11 + 2);
              if ((v19 - 48) > 9) {
                goto LABEL_52;
              }
              uint64_t v20 = 0;
              int v16 = v11 + 3;
              do
              {
                *a2 = v16;
                uint64_t v20 = (v19 - 48) + 10 * v20;
                int v21 = *(unsigned __int8 *)v16++;
                int v19 = v21;
              }
              while ((v21 - 58) >= 0xFFFFFFF6);
              *(void *)(this + 40) = v20;
              goto LABEL_38;
            case '0':
              *(unsigned char *)(this + 50) = 1;
              continue;
            default:
              if ((char)v12 == 67) {
                goto LABEL_29;
              }
              goto LABEL_51;
          }
        }
        switch((char)v12)
        {
          case 'P':
            goto LABEL_18;
          case 'Q':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
            goto LABEL_51;
          case 'R':
            goto LABEL_23;
          case 'W':
            goto LABEL_24;
          case 'X':
            *(unsigned char *)(this + 51) = 1;
            goto LABEL_43;
          default:
            if ((char)v12 == 76) {
              goto LABEL_31;
            }
            goto LABEL_51;
        }
      }
      switch((char)v12)
      {
        case 'b':
          *(_DWORD *)(this + 4) = 3;
          continue;
        case 'c':
LABEL_29:
          *(_DWORD *)this = 1;
          continue;
        case 'd':
          *(_DWORD *)(this + 4) = 0;
          continue;
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'q':
          goto LABEL_51;
        case 'l':
LABEL_31:
          *(_DWORD *)this = 0;
          continue;
        case 'o':
          *(_DWORD *)(this + 4) = 1;
          continue;
        case 'p':
LABEL_18:
          uint64_t v9 = v11 + 2;
          *a2 = v11 + 2;
          int v13 = *((unsigned __int8 *)v11 + 2);
          *(unsigned char *)(this + 52) = v13;
          if (v13) {
            continue;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid format string (no padding character after p)");
          goto LABEL_45;
        case 'r':
LABEL_23:
          *(_DWORD *)this = 2;
          continue;
        default:
          if ((char)v12 == 119)
          {
LABEL_24:
            *(unsigned char *)(this + 16) = 1;
            *a2 = v11 + 2;
            int v14 = *((unsigned __int8 *)v11 + 2);
            if ((v14 - 48) > 9) {
              goto LABEL_52;
            }
            uint64_t v15 = 0;
            int v16 = v11 + 3;
            do
            {
              *a2 = v16;
              uint64_t v15 = (v14 - 48) + 10 * v15;
              int v17 = *(unsigned __int8 *)v16++;
              int v14 = v17;
            }
            while ((v17 - 58) >= 0xFFFFFFF6);
            *(void *)(this + 24) = v15;
LABEL_38:
            uint64_t v9 = v16 - 2;
            *a2 = v16 - 2;
          }
          else
          {
            if ((char)v12 != 120)
            {
LABEL_51:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (unexpected formatting specifier)");
              goto LABEL_45;
            }
LABEL_43:
            *(_DWORD *)(this + 4) = 2;
          }
          break;
      }
    }
  }
  if (v8 != 125)
  {
    if (v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no : separator after index).");
    }
    else
    {
LABEL_44:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no terminating } found).");
    }
LABEL_45:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = v9 - 1;
LABEL_8:
  *a2 = v11 + 2;
  return this;
}

{
  unsigned char *v2;
  const char *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  std::runtime_error *exception;

  *(void *)this = 2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 11008;
  *(_WORD *)(this + 52) = 32;
  id v2 = *a2;
  id v3 = *a2 + 1;
  *a2 = v3;
  if (*v2 != 123)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format options string (must begin with '{').");
    goto LABEL_45;
  }
  int v4 = *(unsigned __int8 *)v3;
  if ((v4 - 48) > 9)
  {
LABEL_52:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    goto LABEL_45;
  }
  uint64_t v5 = 0;
  id v6 = v2 + 2;
  do
  {
    *a2 = v6;
    uint64_t v5 = (v4 - 48) + 10 * v5;
    int v7 = *(unsigned __int8 *)v6++;
    int v4 = v7;
  }
  while ((v7 - 58) >= 0xFFFFFFF6);
  *(void *)(this + 8) = v5;
  int v10 = *((unsigned __int8 *)v6 - 1);
  uint64_t v9 = v6 - 1;
  int v8 = v10;
  if (v10 == 58)
  {
    while (1)
    {
      uint64_t v11 = v9++;
      *a2 = v9;
      int v12 = *((unsigned __int8 *)v11 + 1);
      if (v12 == 125) {
        goto LABEL_8;
      }
      if (!v11[1]) {
        goto LABEL_44;
      }
      if ((char)v12 <= 97)
      {
        if ((char)v12 <= 75)
        {
          switch((char)v12)
          {
            case '&':
              *(unsigned char *)(this + 53) = 1;
              continue;
            case '\'':
            case '(':
            case ')':
            case '*':
            case '-':
            case '/':
              goto LABEL_51;
            case '+':
              *(unsigned char *)(this + 48) = 1;
              uint64_t v9 = v11 + 2;
              *a2 = v11 + 2;
              int v18 = *((unsigned __int8 *)v11 + 2);
              *(unsigned char *)(this + 49) = v18;
              if (v18) {
                continue;
              }
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (no positive number indicator character after +)");
              goto LABEL_45;
            case ',':
              continue;
            case '.':
              *(unsigned char *)(this + 32) = 1;
              *a2 = v11 + 2;
              int v19 = *((unsigned __int8 *)v11 + 2);
              if ((v19 - 48) > 9) {
                goto LABEL_52;
              }
              uint64_t v20 = 0;
              int v16 = v11 + 3;
              do
              {
                *a2 = v16;
                uint64_t v20 = (v19 - 48) + 10 * v20;
                int v21 = *(unsigned __int8 *)v16++;
                int v19 = v21;
              }
              while ((v21 - 58) >= 0xFFFFFFF6);
              *(void *)(this + 40) = v20;
              goto LABEL_38;
            case '0':
              *(unsigned char *)(this + 50) = 1;
              continue;
            default:
              if ((char)v12 == 67) {
                goto LABEL_29;
              }
              goto LABEL_51;
          }
        }
        switch((char)v12)
        {
          case 'P':
            goto LABEL_18;
          case 'Q':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
            goto LABEL_51;
          case 'R':
            goto LABEL_23;
          case 'W':
            goto LABEL_24;
          case 'X':
            *(unsigned char *)(this + 51) = 1;
            goto LABEL_43;
          default:
            if ((char)v12 == 76) {
              goto LABEL_31;
            }
            goto LABEL_51;
        }
      }
      switch((char)v12)
      {
        case 'b':
          *(_DWORD *)(this + 4) = 3;
          continue;
        case 'c':
LABEL_29:
          *(_DWORD *)this = 1;
          continue;
        case 'd':
          *(_DWORD *)(this + 4) = 0;
          continue;
        case 'e':
        case 'f':
        case 'g':
        case 'h':
        case 'i':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'q':
          goto LABEL_51;
        case 'l':
LABEL_31:
          *(_DWORD *)this = 0;
          continue;
        case 'o':
          *(_DWORD *)(this + 4) = 1;
          continue;
        case 'p':
LABEL_18:
          uint64_t v9 = v11 + 2;
          *a2 = v11 + 2;
          int v13 = *((unsigned __int8 *)v11 + 2);
          *(unsigned char *)(this + 52) = v13;
          if (v13) {
            continue;
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Invalid format string (no padding character after p)");
          goto LABEL_45;
        case 'r':
LABEL_23:
          *(_DWORD *)this = 2;
          continue;
        default:
          if ((char)v12 == 119)
          {
LABEL_24:
            *(unsigned char *)(this + 16) = 1;
            *a2 = v11 + 2;
            int v14 = *((unsigned __int8 *)v11 + 2);
            if ((v14 - 48) > 9) {
              goto LABEL_52;
            }
            uint64_t v15 = 0;
            int v16 = v11 + 3;
            do
            {
              *a2 = v16;
              uint64_t v15 = (v14 - 48) + 10 * v15;
              int v17 = *(unsigned __int8 *)v16++;
              int v14 = v17;
            }
            while ((v17 - 58) >= 0xFFFFFFF6);
            *(void *)(this + 24) = v15;
LABEL_38:
            uint64_t v9 = v16 - 2;
            *a2 = v16 - 2;
          }
          else
          {
            if ((char)v12 != 120)
            {
LABEL_51:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Invalid format string (unexpected formatting specifier)");
              goto LABEL_45;
            }
LABEL_43:
            *(_DWORD *)(this + 4) = 2;
          }
          break;
      }
    }
  }
  if (v8 != 125)
  {
    if (v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no : separator after index).");
    }
    else
    {
LABEL_44:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options string (no terminating } found).");
    }
LABEL_45:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = v9 - 1;
LABEL_8:
  *a2 = v11 + 2;
  return this;
}

void sub_1BCECBB80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1BCECC044(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *health::CopyFormatSectionToResult(std::string *__s, std::string *this, std::string::size_type __pos, std::string::size_type __n1, int a5)
{
  id v6 = __s;
  if (a5)
  {
    while (1)
    {
      int v7 = v6->__r_.__value_.__s.__data_[0];
      if (v7 == 123)
      {
        int v8 = v6->__r_.__value_.__s.__data_[1];
        id v6 = (std::string *)((char *)v6 + 1);
        if (v8 != 123) {
          return __s;
        }
      }
      else if (!v6->__r_.__value_.__s.__data_[0])
      {
        return __s;
      }
      uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v9 = this;
      }
      v9->__r_.__value_.__s.__data_[__pos++] = v7;
      id v6 = (std::string *)((char *)v6 + 1);
    }
  }
  return std::string::replace(this, __pos, __n1, (const std::string::value_type *)__s, __n1);
}

void health::FormatPointerImplementation(const char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  health::HDDemangleSymbol(a1, &__p);
  uint64_t v5 = a2;
  v7[0] = &v5;
  v7[1] = &__p;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  health::FormatImplementation<std::string,unsigned long>((std::string *)"<{0}: {1:x}>", a3, 0, (uint64_t)v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BCECC1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void health::FormatImplementation<std::string,unsigned long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = a1; i->__r_.__value_.__s.__data_[0] != 123; uint64_t i = (std::string *)((char *)i + 1))
  {
    if (!i->__r_.__value_.__s.__data_[0])
    {
      std::string::resize(a2, a3 - v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    --v8;
  }
  int v11 = i->__r_.__value_.__s.__data_[1];
  if (v11 == 123)
  {
    char v9 = 1;
    uint64_t i = (std::string *)((char *)i + 1);
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v33 = &i->__r_.__value_.__s.__data_[2];
    int v22 = i->__r_.__value_.__s.__data_[2];
    if ((v22 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = &i->__r_.__value_.__s.__data_[3];
      do
      {
        uint64_t v33 = v24;
        uint64_t v23 = (v22 - 48) + 10 * v23;
        int v25 = *v24++;
        int v22 = v25;
      }
      while ((v25 - 58) >= 0xFFFFFFF6);
      uint64_t v33 = v24;
      if (*(v24 - 1) == 125) {
        health::FormatterParameters<0ul,std::string,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(v23);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v33 = (char *)i;
  health::FormatOptions::FormatOptions((uint64_t)&v28, (const char **)&v33);
  int v12 = v33;
  if (v29)
  {
    if (v29 != 1)
    {
      char v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Parameter index out of bounds.");
      __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    health::TypeFormatter<unsigned long,void>::TypeFormatter((uint64_t)&v34, **(void **)a4, (uint64_t)&v28);
    if (v40 && !*(unsigned char *)(v34 + 48)) {
      uint64_t v13 = 64;
    }
    else {
      uint64_t v13 = 65;
    }
    unint64_t v18 = v13 - v39;
    if (*(unsigned char *)(v34 + 50) && v18 <= *(void *)(v34 + 24)) {
      unint64_t v18 = *(void *)(v34 + 24);
    }
    unint64_t v19 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1) <= v18) {
      unint64_t v19 = v18;
    }
    if ((_BYTE)v30) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = v18;
    }
    health::FormatImplementation<std::string,unsigned long>(v12, a2, v20 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v21 = (char *)a2;
    }
    else {
      int v21 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long>((char *)&v28, &v21[a3 - v8], &v34);
  }
  else
  {
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v34 = v14;
    long long v35 = v28;
    long long v36 = v30;
    long long v37 = v31;
    uint64_t v38 = v32;
    if (*(char *)(v14 + 23) < 0) {
      unint64_t v15 = *(void *)(v14 + 8);
    }
    else {
      unint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    }
    unint64_t v16 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1) <= v15) {
      unint64_t v16 = v15;
    }
    if ((_BYTE)v30) {
      unint64_t v15 = v16;
    }
    health::FormatImplementation<std::string,unsigned long>(v33, a2, v15 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v17 = (char *)a2;
    }
    else {
      int v17 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,std::string>(&v28, &v17[a3 - v8], (uint64_t)&v34);
  }
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
  }
}

void sub_1BCECC5A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,std::string,unsigned long>::formatOptionsAtIndex<std::string,unsigned long>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCECC654(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1BCECE144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCECE390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1BCECE4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *HDCKDatabaseScopeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"UnknownScope(%ld)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E63033F0[a1 - 1];
  }

  return v1;
}

__CFString *HDCloudSyncZoneTypeToString(unint64_t a1)
{
  if (a1 >= 8)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"unknown(%ld)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E6303408[a1];
  }

  return v1;
}

__CFString *HDCloudSyncZonePurposeToString(unint64_t a1)
{
  if (a1 >= 4)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"unknown(%ld)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E6303448[a1];
  }

  return v1;
}

void sub_1BCED6100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t health::BlockAccessFile::BlockAccessFile(uint64_t a1, long long *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  return health::BlockAccessFile::BlockAccessFile(a1, a2, v3, 0);
}

{
  void v3[2];

  v3[0] = 0;
  v3[1] = 0;
  return health::BlockAccessFile::BlockAccessFile(a1, a2, v3, 0);
}

uint64_t health::BlockAccessFile::BlockAccessFile(uint64_t a1, long long *a2, void *a3, int a4)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  id v6 = (std::__shared_weak_count *)a3[1];
  v9[0] = *a3;
  v9[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  health::TransactionalFile::TransactionalFile(a1, a2, v9);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(a1 + 792) = 0x348424146;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_DWORD *)(a1 + 800) = 68;
  *(void *)(a1 + 808) = 68;
  health::TransactionalFile::open((uint64_t *)a1, a4);
  char v8 = 0;
  v11[0] = &unk_1F171F550;
  v11[1] = &v8;
  v11[2] = a1;
  v11[3] = v11;
  health::TransactionalFile::readTransactionWithLambda(a1, (uint64_t)v11);
  std::__function::__value_func<void ()(health::TransactionalFile::ReadTransaction const&)>::~__value_func[abi:ne180100](v11);
  if (v8)
  {
    v10[0] = &unk_1F171F5E0;
    v10[1] = a1;
    v10[3] = v10;
    health::TransactionalFile::writeTransactionWithLambda(a1, (uint64_t)v10);
    std::__function::__value_func<BOOL ()(health::TransactionalFile::WriteTransaction &)>::~__value_func[abi:ne180100](v10);
  }
  return a1;
}

void sub_1BCED8224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(health::TransactionalFile::WriteTransaction &)>::~__value_func[abi:ne180100](va);
  health::TransactionalFile::~TransactionalFile(v4);
  _Unwind_Resume(a1);
}

void sub_1BCED8258()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1BCED8250);
}

void *health::BlockAccessFile::performReadTransactionWithLambda(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F171F670;
  v3[1] = a1;
  void v3[2] = a2;
  v3[3] = v3;
  health::TransactionalFile::readTransactionWithLambda(a1, (uint64_t)v3);
  return std::__function::__value_func<void ()(health::TransactionalFile::ReadTransaction const&)>::~__value_func[abi:ne180100](v3);
}

void sub_1BCED8328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(health::TransactionalFile::ReadTransaction const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *health::BlockAccessFile::checkIntegrity(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1F171F770;
  v3[1] = a2;
  v3[3] = v3;
  health::BlockAccessFile::performReadTransactionWithLambda(a1, (uint64_t)v3);
  return std::__function::__value_func<void ()(health::BlockAccessFile::ReadTransaction const&)>::~__value_func[abi:ne180100](v3);
}

void sub_1BCED83C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(health::BlockAccessFile::ReadTransaction const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t health::BlockAccessFile::isBlockUsingFreeSpace(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  unsigned __int8 v4 = 0;
  v5[0] = &unk_1F171F800;
  v5[1] = a2;
  v5[2] = &v4;
  v5[3] = v5;
  health::BlockAccessFile::ReadTransaction::_enumerateFreeSpaceBlocks(a3, (uint64_t)v5);
  std::__function::__value_func<void ()(health::FileExtent const&)>::~__value_func[abi:ne180100](v5);
  return v4;
}

void sub_1BCED8468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(health::FileExtent const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t health::BlockAccessFile::ReadTransaction::_enumerateFreeSpaceBlocks(uint64_t *a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = a1;
  v5[0] = *(void *)(a1[1] + 24);
  v5[1] = (uint64_t)v6;
  v4[0] = a2;
  v4[1] = (uint64_t)a1;
  bzero(v7, 0x6F2uLL);
  health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17>>(*a1, (uint64_t)v7, v5[0]);
  return health::BTree<health::BlockAccessFile::ReadTransaction::FreeSpaceMapReadConfiguration>::_enumerateAllValues<health::BlockAccessFile::ReadTransaction::_enumerateFreeSpaceBlocks(std::function<void ()(health::FileExtent const&)>)::$_0>((uint64_t)v5, (uint64_t)v7, 0, v4);
}

void *health::BlockAccessFile::ReadTransaction::ReadTransaction(void *result, uint64_t a2, uint64_t a3)
{
  *double result = a2;
  result[1] = a3;
  return result;
}

{
  *double result = a2;
  result[1] = a3;
  return result;
}

void health::BlockAccessFile::ReadTransaction::retrieveBlock(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  if (*(_DWORD *)(a1[1] + 4) < 2u)
  {
    if (a3 != *(void *)(a4 + 8))
    {
      uint64_t v15 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v24, "pointer.length == destination.size()");
      std::string::basic_string[abi:ne180100]<0>(v23, "retrieveBlock");
      std::string::basic_string[abi:ne180100]<0>(v22, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      v43[0] = *(void *)(a4 + 8);
      health::FormatString<unsigned long long &,unsigned long>(&v21, (std::string *)"Attempt to retrieve a block of length {0} into a buffer of size {1}.", (uint64_t)&v42, (uint64_t)v43);
      health::_HDAssertImplementation<health::file_access_error>(v15, (uint64_t)v24, (uint64_t)v23, (uint64_t)v22, 151, (uint64_t)&v21);
    }
    uint64_t v16 = *a1;
    health::RawBuffer::RawBuffer(v20, *(unsigned __int8 **)a4, *(void *)(a4 + 8));
    uint64_t v19 = v16 + 8;
    unint64_t v18 = *(void *)(v16 + 8);
    uint64_t v17 = *(void *)(v19 + 8);
    health::RawBuffer::RawBuffer(v43, v20[0], (uint64_t)v20[1]);
    health::TransactionalFile::_readBufferAtOffset(v17, v18, (health::RawBuffer *)v43, a2);
  }
  else
  {
    uint64_t v39 = 0;
    int v40 = 0;
    health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::BlockHeader>(*a1, (uint64_t)&v39, a2);
    if (v39 != *(void *)(a4 + 8))
    {
      uint64_t v7 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v38, "blockHeader.blockLength == destination.size()");
      std::string::basic_string[abi:ne180100]<0>(v37, "retrieveBlock");
      std::string::basic_string[abi:ne180100]<0>(v36, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      v43[0] = *(void *)(a4 + 8);
      health::FormatString<unsigned long long &,unsigned long>(&v35, (std::string *)"blockHeader.blockLength {0} differs from destination.size() {1}", (uint64_t)&v39, (uint64_t)v43);
      health::_HDAssertImplementation<health::file_access_error>(v7, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36, 146, (uint64_t)&v35);
    }
    if (v39 != v42)
    {
      uint64_t v8 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v34, "blockHeader.blockLength == pointer.length");
      std::string::basic_string[abi:ne180100]<0>(v33, "retrieveBlock");
      std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      health::FormatString<unsigned long long &,unsigned long long &>(&__p, (uint64_t)&v39, (uint64_t)&v42);
      health::_HDAssertImplementation<health::file_access_error>(v8, (uint64_t)v34, (uint64_t)v33, (uint64_t)v32, 147, (uint64_t)&__p);
    }
    uint64_t v9 = *a1;
    health::RawBuffer::RawBuffer(v30, *(unsigned __int8 **)a4, *(void *)(a4 + 8));
    uint64_t v10 = v41 + 12;
    uint64_t v13 = v9 + 8;
    unint64_t v12 = *(void *)(v9 + 8);
    uint64_t v11 = *(void *)(v13 + 8);
    health::RawBuffer::RawBuffer(v43, v30[0], (uint64_t)v30[1]);
    health::TransactionalFile::_readBufferAtOffset(v11, v12, (health::RawBuffer *)v43, v10);
    LODWORD(v10) = v40;
    if (v10 != health::FletcherChecksum(*(health **)a4, *(char **)(a4 + 8)))
    {
      uint64_t v14 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v29, "blockHeader.checksum == destination.checksum()");
      std::string::basic_string[abi:ne180100]<0>(v28, "retrieveBlock");
      std::string::basic_string[abi:ne180100]<0>(v27, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      int v25 = health::FletcherChecksum(*(health **)a4, *(char **)(a4 + 8));
      v43[0] = &v25;
      v43[1] = &v40;
      memset(&v26, 0, sizeof(v26));
      health::FormatImplementation<unsigned int &,unsigned int>((std::string *)"Block checksum {0} does not match retrieved buffer checksum {1}", &v26, 0, (uint64_t)v43);
      health::_HDAssertImplementation<health::data_corruption_error>(v14, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27, 149, (uint64_t)&v26);
    }
  }
}

void sub_1BCED891C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  _Unwind_Resume(a1);
}

uint64_t health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::BlockHeader>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = 12;
  v11[0] = v13;
  v11[1] = v13;
  v11[2] = 12;
  health::RawBuffer::RawBuffer(v10, v13, 12);
  uint64_t v8 = a1 + 8;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v8 + 8);
  health::RawBuffer::RawBuffer(v12, v10[0], (uint64_t)v10[1]);
  health::TransactionalFile::_readBufferAtOffset(v7, v6, (health::RawBuffer *)v12, a3);
  v12[0] = 0;
  health::DeserializationBuffer::extractRaw<unsigned long long>((uint64_t)v11, v12);
  *(void *)a2 = v12[0];
  LODWORD(v12[0]) = 0;
  health::DeserializationBuffer::extractRaw<unsigned int>((uint64_t)v11, v12);
  *(_DWORD *)(a2 + 8) = v12[0];
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCED8B9C(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x438];
  STACK[0x438] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

void health::FormatString<unsigned long long &,unsigned long>(std::string *a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a4;
  v4[1] = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  health::FormatImplementation<unsigned long long &,unsigned long>(a2, a1, 0, (uint64_t)v4);
}

void sub_1BCED8C10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void health::FormatString<unsigned long long &,unsigned long long &>(std::string *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a3;
  v3[1] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  health::FormatImplementation<unsigned long long &,unsigned long long &>((std::string *)"blockHeader.blockLength {0} does not match pointer.length {1}.", a1, 0, v3);
}

void sub_1BCED8C78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t health::BlockAccessFile::ReadTransaction::rootUserPointer(health::BlockAccessFile::ReadTransaction *this)
{
  uint64_t v2 = 0x348424146;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  int v3 = 68;
  uint64_t v4 = 68;
  health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::BlockAccessFileHeader>(*(void *)this, (uint64_t)&v2, 0);
  return v6;
}

uint64_t health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::BlockAccessFileHeader>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = 68;
  v11[0] = v13;
  v11[1] = v13;
  v11[2] = 68;
  health::RawBuffer::RawBuffer(v10, v13, 68);
  uint64_t v8 = a1 + 8;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v8 + 8);
  health::RawBuffer::RawBuffer(v12, v10[0], (uint64_t)v10[1]);
  health::TransactionalFile::_readBufferAtOffset(v7, v6, (health::RawBuffer *)v12, a3);
  health::BlockAccessFile::BlockAccessFileHeader::deserialize(a2, (uint64_t)v11);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCED8DCC(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x438];
  STACK[0x438] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

void health::BlockAccessFile::ReadTransaction::_checkIntegrity(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = 0x348424146;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  int v8 = 68;
  uint64_t v9 = 68;
  health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::BlockAccessFileHeader>(*a1, (uint64_t)&v7, 0);
  if (v7 != 1212301638)
  {
    LODWORD(v13[0]) = v7;
    unsigned int v5 = 1212301638;
    health::FormatString<unsigned int,unsigned int>(&__p, (std::string *)"Header has invalid magic word {0} (expected {1})", (unsigned int *)v13, &v5);
    std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>::operator()(*(void *)(a2 + 24), 0, 72, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((HIDWORD(v7) - 4) <= 0xFFFFFFFC)
  {
    LODWORD(v13[0]) = HIDWORD(v7);
    unsigned int v5 = 3;
    health::FormatString<unsigned int,unsigned int>(&__p, (std::string *)"Header has invalid version {0} (expected {1})", (unsigned int *)v13, &v5);
    std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>::operator()(*(void *)(a2 + 24), 0, 72, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unsigned int v5 = 68;
  if (v8 != 68)
  {
    v13[0] = (uint64_t)&v5;
    v13[1] = (uint64_t)&v8;
    memset(&__p, 0, sizeof(__p));
    health::FormatImplementation<unsigned int &,unsigned int &>((std::string *)"Header's internal reported length {0} does not match expected header length {1}", &__p, 0, v13);
    std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>::operator()(*(void *)(a2 + 24), 0, 72, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents((health::BlockAccessFile::ReadTransaction *)a1, (uint64_t *)v4);
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
}

void sub_1BCED8F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = 0;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t *, uint64_t))(*(void *)a1 + 48))(a1, &v7, &v6, &v5, a4);
}

void health::FormatString<unsigned int,unsigned int>(std::string *a1, std::string *a2, unsigned int *a3, unsigned int *a4)
{
  v4[0] = a4;
  v4[1] = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  health::FormatImplementation<unsigned int,unsigned int>(a2, a1, 0, v4);
}

void sub_1BCED90FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents@<X0>(health::BlockAccessFile::ReadTransaction *this@<X0>, uint64_t *a2@<X8>)
{
  void v26[4] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v26[0] = &unk_1F171F890;
  v26[1] = a2;
  v26[3] = v26;
  health::BlockAccessFile::ReadTransaction::_enumerateFreeSpaceBlocks((uint64_t *)this, (uint64_t)v26);
  uint64_t result = std::__function::__value_func<void ()(health::FileExtent const&)>::~__value_func[abi:ne180100](v26);
  uint64_t v4 = *a2;
  if ((unint64_t)(a2[1] - *a2) >= 0x11)
  {
    uint64_t v5 = 1;
    int v6 = 1;
    do
    {
      uint64_t v7 = v6 - 1;
      int v8 = (unint64_t *)(v4 + 16 * v7);
      uint64_t v9 = (unint64_t *)(v4 + 16 * v5);
      unint64_t v10 = *v8;
      unint64_t v11 = *v9;
      if ((uint64_t)*v8 <= (uint64_t)*v9 && v8[1] + v10 > v11
        || (uint64_t)v11 <= (uint64_t)v10 && *(void *)(v4 + 16 * v5 + 8) + v11 > v10)
      {
        uint64_t v12 = *MEMORY[0x1E4F29F18];
        std::string::basic_string[abi:ne180100]<0>(v24, "!left.overlaps(right)");
        std::string::basic_string[abi:ne180100]<0>(v23, "_computeFreeSpaceExtents");
        std::string::basic_string[abi:ne180100]<0>(v22, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
        v25[0] = v4 + 16 * v5;
        v25[1] = v4 + 16 * v7;
        memset(&__p, 0, sizeof(__p));
        health::FormatImplementation<health::FileExtent &,health::FileExtent &>((std::string *)"Found overlapping free space extents {0} and {1}", &__p, 0, v25);
        health::_HDAssertImplementation<health::data_corruption_error>(v12, (uint64_t)v24, (uint64_t)v23, (uint64_t)v22, 205, (uint64_t)&__p);
      }
      uint64_t v13 = v4 + 16 * v7;
      uint64_t v16 = *(void *)(v13 + 8);
      uint64_t v14 = (void *)(v13 + 8);
      uint64_t v15 = v16;
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
      if (v16 + *v8 == *v9)
      {
        void *v14 = *(void *)(v4 + 16 * v5 + 8) + v15;
        uint64_t v19 = v17 + 16 * v5;
        uint64_t v20 = v18 - (v19 + 16);
        if (v18 != v19 + 16)
        {
          uint64_t result = memmove((void *)(v17 + 16 * v5), (const void *)(v19 + 16), v18 - (v19 + 16));
          uint64_t v17 = *a2;
        }
        uint64_t v18 = v19 + v20;
        a2[1] = v19 + v20;
        --v6;
      }
      uint64_t v5 = ++v6;
      uint64_t v4 = v17;
    }
    while (v6 < (unint64_t)((v18 - v17) >> 4));
  }
  return result;
}

void sub_1BCED9364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::__function::__value_func<void ()(health::FileExtent const&)>::~__value_func[abi:ne180100](&a35);
  long long v37 = *(void **)v35;
  if (*(void *)v35)
  {
    *(void *)(v35 + 8) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(a1);
}

double health::BlockAccessFile::WriteTransaction::WriteTransaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1;
  *(unsigned char *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a1;
  *(unsigned char *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t health::BlockAccessFile::WriteTransaction::storeBlock(health::BlockAccessFile::WriteTransaction *this, uint64_t a2, const void *a3)
{
  v7[0] = a3;
  v7[1] = a2;
  uint64_t v4 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(this, a2);
  health::BlockAccessFile::WriteTransaction::updateObject<health::ByteRange<void const,unsigned long long>>((uint64_t)this, v4, v5, (uint64_t)v7);
  return v4;
}

void health::BlockAccessFile::WriteTransaction::updateBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  if (*(_DWORD *)(*(void *)(a1 + 24) + 4) < 2u)
  {
    if (a3 != *(void *)(a4 + 8))
    {
      uint64_t v10 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v14, "pointer.length == updatedData.size()");
      std::string::basic_string[abi:ne180100]<0>(v13, "updateBlock");
      std::string::basic_string[abi:ne180100]<0>(v12, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      uint64_t v24 = *(void *)(a4 + 8);
      health::FormatString<unsigned long long &,unsigned long>(&v11, (std::string *)"Attempt to update a block of length {0} from a buffer of size {1}.", (uint64_t)&v27, (uint64_t)&v24);
      health::_HDAssertImplementation<health::file_access_error>(v10, (uint64_t)v14, (uint64_t)v13, (uint64_t)v12, 273, (uint64_t)&v11);
    }
    int v8 = *(health::TransactionalFile::WriteTransaction **)(a1 + 16);
    uint64_t v9 = v26;
  }
  else
  {
    uint64_t v24 = 0;
    int v25 = 0;
    health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::BlockHeader>(*(void *)(a1 + 16), (uint64_t)&v24, a2);
    if (v24 != *(void *)(a4 + 8))
    {
      uint64_t v6 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v23, "blockHeader.blockLength == updatedData.size()");
      std::string::basic_string[abi:ne180100]<0>(v22, "updateBlock");
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      uint64_t v19 = *(void *)(a4 + 8);
      health::FormatString<unsigned long long &,unsigned long>(&v20, (std::string *)"blockHeader.blockLength {0} differs from updatedData.size() {1}", (uint64_t)&v24, (uint64_t)&v19);
      health::_HDAssertImplementation<health::file_access_error>(v6, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21, 266, (uint64_t)&v20);
    }
    if (v24 != v27)
    {
      uint64_t v7 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v18, "blockHeader.blockLength == pointer.length");
      std::string::basic_string[abi:ne180100]<0>(v17, "updateBlock");
      std::string::basic_string[abi:ne180100]<0>(v16, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      health::FormatString<unsigned long long &,unsigned long long &>(&__p, (uint64_t)&v24, (uint64_t)&v27);
      health::_HDAssertImplementation<health::file_access_error>(v7, (uint64_t)v18, (uint64_t)v17, (uint64_t)v16, 267, (uint64_t)&__p);
    }
    int v25 = health::FletcherChecksum(*(health **)a4, *(char **)(a4 + 8));
    health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BlockAccessFile::BlockHeader &>(*(health::TransactionalFile::WriteTransaction **)(a1 + 16), (uint64_t)&v24, v26);
    int v8 = *(health::TransactionalFile::WriteTransaction **)(a1 + 16);
    uint64_t v9 = v26 + 12;
  }
  health::TransactionalFile::WriteTransaction::writeBufferAtOffset(v8, (const health::RawBuffer *)a4, v9);
}

void sub_1BCED9784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BlockAccessFile::BlockHeader &>(health::TransactionalFile::WriteTransaction *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  std::string v11 = 0;
  unint64_t v12 = 12;
  v9[0] = v10;
  v9[1] = v10;
  void v9[2] = 12;
  v8[0] = *(void *)a2;
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v9, v8);
  LODWORD(v8[0]) = *(_DWORD *)(a2 + 8);
  health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v9, v8);
  if (v12 <= 0x3FF) {
    uint64_t v6 = v10;
  }
  else {
    uint64_t v6 = v11;
  }
  health::RawBuffer::RawBuffer(v8, v6, v12);
  health::TransactionalFile::WriteTransaction::writeBufferAtOffset(a1, (const health::RawBuffer *)v8, a3);
  uint64_t result = (uint64_t)v11;
  std::string v11 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCED9994(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x428];
  STACK[0x428] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t health::BlockAccessFile::WriteTransaction::freeBlock(uint64_t a1, unint64_t a2, unint64_t a3)
{
  v5.n128_u64[0] = a2;
  v5.n128_u64[1] = a3;
  if (*(_DWORD *)(*(void *)(a1 + 24) + 4) >= 2u) {
    v5.n128_u64[1] = a3 + 12;
  }
  std::deque<health::BlockPointer>::push_back((void *)(a1 + 56), &v5);
  return health::BlockAccessFile::WriteTransaction::_flushFreedBlockQueue(a1);
}

uint64_t health::BlockAccessFile::WriteTransaction::_flushFreedBlockQueue(uint64_t this)
{
  if (!*(unsigned char *)(this + 48))
  {
    uint64_t v1 = this;
    *(unsigned char *)(this + 48) = 1;
    for (uint64_t i = *(void *)(this + 96); i; uint64_t i = *(void *)(v1 + 96))
    {
      ++*(void *)(v1 + 88);
      *(void *)(v1 + 96) = i - 1;
      this = std::deque<health::BlockPointer>::__maybe_remove_front_spare[abi:ne180100](v1 + 56, 1);
    }
    *(unsigned char *)(v1 + 48) = 0;
  }
  return this;
}

uint64_t health::BlockAccessFile::WriteTransaction::setRootUserPointer(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)(*(void *)(a1 + 24) + 40) = *a2;
  return health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BlockAccessFile::BlockAccessFileHeader &>(*(health::TransactionalFile::WriteTransaction **)(a1 + 16), *(void *)(a1 + 24), 0);
}

uint64_t health::BlockAccessFile::WriteTransaction::_findFreeBlockOfLength(health::BlockAccessFile::WriteTransaction *this)
{
  return 0;
}

void health::TransactionalFile::~TransactionalFile(health::TransactionalFile *this)
{
  std::__tree<std::__value_type<std::__thread_id,health::TransactionalFile::ReadTransaction *>,std::__map_value_compare<std::__thread_id,std::__value_type<std::__thread_id,health::TransactionalFile::ReadTransaction *>,std::less<std::__thread_id>,true>,std::allocator<std::__value_type<std::__thread_id,health::TransactionalFile::ReadTransaction *>>>::destroy((uint64_t)this + 768, *((void **)this + 97));
  std::deque<std::__thread_id>::~deque[abi:ne180100]((void *)this + 90);
  std::__tree<std::__value_type<std::__thread_id,health::TransactionalFile::ReadTransaction *>,std::__map_value_compare<std::__thread_id,std::__value_type<std::__thread_id,health::TransactionalFile::ReadTransaction *>,std::less<std::__thread_id>,true>,std::allocator<std::__value_type<std::__thread_id,health::TransactionalFile::ReadTransaction *>>>::destroy((uint64_t)this + 696, *((void **)this + 88));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 648));
  std::mutex::~mutex((std::mutex *)((char *)this + 584));
  std::__function::__value_func<BOOL ()(unsigned long long,unsigned long long const&,health::FilePage const&)>::~__value_func[abi:ne180100]((void *)this + 69);
  std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::~__hash_table((uint64_t)this + 496);
  std::mutex::~mutex((std::mutex *)((char *)this + 416));
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 42);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  health::WriteAheadLog::~WriteAheadLog((health::TransactionalFile *)((char *)this + 16));
  int v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::~__func()
{
}

__n128 std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F171F550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F171F550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::operator()(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = (**a2)(a2);
  if (!result) {
    goto LABEL_6;
  }
  uint64_t result = health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::BlockAccessFileHeader>((uint64_t)a2, v4 + 792, 0);
  if (*(_DWORD *)(v4 + 792) != 1212301638)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN6health21data_corruption_errorCI1St13runtime_errorEPKc(exception, "Block access file header appears to be corrupted (invalid magic word).");
  }
  int v6 = *(_DWORD *)(v4 + 796);
  if (v6 == 2)
  {
LABEL_6:
    **(unsigned char **)(a1 + 8) = 1;
  }
  else if (v6 == 1)
  {
    *(_OWORD *)(v4 + 816) = xmmword_1BD32C620;
  }
  return result;
}

void sub_1BCED9CC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(health::TransactionalFile::ReadTransaction const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t health::SmartBuffer::SmartBuffer(uint64_t this, unint64_t a2)
{
  *(void *)(this + 1024) = 0;
  *(void *)(this + 1032) = a2;
  if (a2 >= 0x400) {
    operator new[]();
  }
  return this;
}

void sub_1BCED9E2C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 1024);
  *(void *)(v1 + 1024) = 0;
  if (v3) {
    MEMORY[0x1C187B880](v3, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t health::BlockAccessFile::BlockAccessFileHeader::serialize(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 4) < 3u)
  {
    LODWORD(v6) = *(_DWORD *)a1;
    health::SerializationBuffer::appendRaw<unsigned int>(a2, &v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 4);
    health::SerializationBuffer::appendRaw<unsigned int>(a2, &v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
    health::SerializationBuffer::appendRaw<unsigned int>(a2, &v6);
    uint64_t v4 = *(void *)(a1 + 16);
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)a1;
    health::SerializationBuffer::appendRaw<unsigned int>(a2, &v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 4);
    health::SerializationBuffer::appendRaw<unsigned int>(a2, &v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
    health::SerializationBuffer::appendRaw<unsigned int>(a2, &v6);
    uint64_t v6 = *(void *)(a1 + 16);
    health::SerializationBuffer::appendRaw<unsigned long long>(a2, &v6);
    uint64_t v6 = *(void *)(a1 + 24);
    health::SerializationBuffer::appendRaw<unsigned long long>(a2, &v6);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v6 = v4;
  health::SerializationBuffer::appendRaw<unsigned long long>(a2, &v6);
  uint64_t v6 = *(void *)(a1 + 40);
  health::SerializationBuffer::appendRaw<unsigned long long>(a2, &v6);
  uint64_t v6 = *(void *)(a1 + 48);
  health::SerializationBuffer::appendRaw<unsigned long long>(a2, &v6);
  uint64_t v6 = *(void *)(a1 + 56);
  health::SerializationBuffer::appendRaw<unsigned long long>(a2, &v6);
  uint64_t v6 = *(void *)(a1 + 64);
  return health::SerializationBuffer::appendRaw<unsigned long long>(a2, &v6);
}

void std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::~__func()
{
}

void *std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F171F5E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F171F5E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::operator()(uint64_t a1, health::TransactionalFile::WriteTransaction *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((**(uint64_t (***)(health::TransactionalFile::WriteTransaction *))a2)(a2) < 1)
  {
    bzero(v6, 0x6F2uLL);
    *(void *)(v3 + 792) = 0x348424146;
    *(_DWORD *)(v3 + 800) = 68;
    *(void *)(v3 + 824) = 1778;
    *(_OWORD *)(v3 + 808) = xmmword_1BD32C630;
    health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BlockAccessFile::BlockAccessFileHeader &>(a2, v3 + 792, 0);
    health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17> &>(a2, (uint64_t)v6, *(void *)(v3 + 816));
  }
  else if (*(_DWORD *)(v3 + 796) == 2)
  {
    bzero(v6, 0x6F2uLL);
    uint64_t v4 = *(void *)(v3 + 808);
    *(void *)(v3 + 816) = v4;
    *(void *)(v3 + 824) = 1778;
    *(void *)(v3 + 808) = v4 + 1778;
    health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17> &>(a2, (uint64_t)v6, v4);
    *(void *)(v3 + 796) = 0x4400000003;
    health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BlockAccessFile::BlockAccessFileHeader &>(a2, v3 + 792, 0);
  }
  return 1;
}

uint64_t std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1,std::allocator<health::BlockAccessFile::BlockAccessFile(std::string const&,std::shared_ptr<health::VirtualFilesystem>,health::TransactionalFile::OpenMethod)::$_1>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::target_type()
{
}

uint64_t health::TransactionalFile::WriteTransaction::storeObjectAtOffset<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17> &>(health::TransactionalFile::WriteTransaction *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  health::SmartBuffer::SmartBuffer((uint64_t)v15, 0x6F2uLL);
  uint64_t v6 = 0;
  if (v17 <= 0x3FF) {
    uint64_t v7 = v15;
  }
  else {
    uint64_t v7 = v16;
  }
  v14[0] = v7;
  v14[1] = v7;
  v14[2] = 1778;
  uint64_t v8 = a2;
  do
  {
    v13[0] = *(void *)(a2 + 96 * v6);
    health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v14, v13);
    for (uint64_t i = 8; i != 88; i += 8)
    {
      v13[0] = *(void *)(v8 + i);
      health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v14, v13);
    }
    v13[0] = *(void *)(a2 + 96 * v6 + 88);
    health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v14, v13);
    ++v6;
    v8 += 96;
  }
  while (v6 != 17);
  for (uint64_t j = 0; j != 144; j += 8)
  {
    v13[0] = *(void *)(a2 + 1632 + j);
    health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v14, v13);
  }
  LOWORD(v13[0]) = *(_WORD *)(a2 + 1776);
  health::SerializationBuffer::appendRaw<unsigned short>((uint64_t)v14, v13);
  if (v17 <= 0x3FF) {
    std::string v11 = v15;
  }
  else {
    std::string v11 = v16;
  }
  health::RawBuffer::RawBuffer(v13, v11, v17);
  health::TransactionalFile::WriteTransaction::writeBufferAtOffset(a1, (const health::RawBuffer *)v13, a3);
  uint64_t result = (uint64_t)v16;
  uint64_t v16 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCEDA334(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x428];
  STACK[0x428] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(health::TransactionalFile::WriteTransaction &)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0,std::allocator<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::~__func()
{
}

__n128 std::__function::__func<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0,std::allocator<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F171F670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0,std::allocator<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F171F670;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0,std::allocator<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8) + 792;
  v6[0] = a2;
  v6[1] = v3;
  uint64_t v4 = *(void *)(v2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v6);
}

uint64_t std::__function::__func<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0,std::allocator<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0,std::allocator<health::BlockAccessFile::performReadTransactionWithLambda(std::function<void ()(health::BlockAccessFile::ReadTransaction const&)>)::$_0>,void ()(health::TransactionalFile::ReadTransaction const&)>::target_type()
{
}

void std::__function::__func<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0,std::allocator<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::~__func()
{
}

__n128 std::__function::__func<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0,std::allocator<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F171F6F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0,std::allocator<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F171F6F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0,std::allocator<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8) + 792;
  v7[0] = a2;
  v7[1] = v3;
  void v7[2] = a2;
  v7[3] = v3;
  v7[4] = 0;
  v7[5] = v7;
  char v8 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v4 = *(void *)(v2 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v7);
  std::deque<health::BlockPointer>::~deque[abi:ne180100](v9);
  return v5;
}

void sub_1BCEDA664(_Unwind_Exception *a1)
{
  std::deque<health::BlockPointer>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0,std::allocator<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0,std::allocator<health::BlockAccessFile::performWriteTransactionWithLambda(std::function<BOOL ()(health::BlockAccessFile::WriteTransaction &)>)::$_0>,BOOL ()(health::TransactionalFile::WriteTransaction &)>::target_type()
{
}

uint64_t std::deque<health::BlockPointer>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<std::__thread_id *>::~__split_buffer((uint64_t)a1);
}

void std::__function::__func<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0,std::allocator<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0>,void ()(health::BlockAccessFile::ReadTransaction const&)>::~__func()
{
}

void *std::__function::__func<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0,std::allocator<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0>,void ()(health::BlockAccessFile::ReadTransaction const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F171F770;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0,std::allocator<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0>,void ()(health::BlockAccessFile::ReadTransaction const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F171F770;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0,std::allocator<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0>,void ()(health::BlockAccessFile::ReadTransaction const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 8);
  unint64_t v4 = (void *)v3[3];
  if (v4)
  {
    if (v4 == v3)
    {
      uint64_t v7 = v6;
      (*(void (**)(void *, void *))(*v3 + 24))(v3, v6);
    }
    else
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(void))(*v4 + 16))(v3[3]);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  health::BlockAccessFile::ReadTransaction::_checkIntegrity(a2, (uint64_t)v6);
  return std::__function::__value_func<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>::~__value_func[abi:ne180100](v6);
}

void sub_1BCEDA8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__function::__func<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0,std::allocator<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0>,void ()(health::BlockAccessFile::ReadTransaction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0,std::allocator<health::BlockAccessFile::checkIntegrity(std::function<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>)::$_0>,void ()(health::BlockAccessFile::ReadTransaction const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(health::BlockAccessFile::IntegrityError,long long,long long,std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(health::BlockAccessFile::ReadTransaction const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0,std::allocator<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0>,void ()(health::FileExtent const&)>::~__func()
{
}

__n128 std::__function::__func<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0,std::allocator<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0>,void ()(health::FileExtent const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F171F800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0,std::allocator<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0>,void ()(health::FileExtent const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F171F800;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0,std::allocator<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0>,void ()(health::FileExtent const&)>::operator()(uint64_t result, unint64_t *a2)
{
  uint64_t v2 = *(unint64_t **)(result + 8);
  unint64_t v3 = *v2;
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  BOOL v6 = *a2 < *v2 || v5 == 0;
  if (!v6 && v4 < v2[1] + v3 || ((unint64_t v7 = v5 + v4, v4 <= v3) ? (v8 = v7 > v3) : (v8 = 0), v8)) {
    **(unsigned char **)(result + 16) = 1;
  }
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0,std::allocator<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0>,void ()(health::FileExtent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0,std::allocator<health::BlockAccessFile::isBlockUsingFreeSpace(health::BlockPointer const&,health::BlockAccessFile::WriteTransaction &)::$_0>,void ()(health::FileExtent const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(health::FileExtent const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void health::FormatImplementation<unsigned long long &,unsigned long>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (char *)a1; ; ++i)
  {
    long long v31 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 - v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    --v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    long long v31 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    long long v31 = i + 2;
    int v21 = i[2];
    if ((v21 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = i + 3;
      do
      {
        long long v31 = v23;
        uint64_t v22 = (v21 - 48) + 10 * v22;
        int v24 = *v23++;
        int v21 = v24;
      }
      while ((v24 - 58) >= 0xFFFFFFF6);
      long long v31 = v23;
      if (*(v23 - 1) == 125) {
        health::FormatterParameters<0ul,unsigned long long &,unsigned long>::formatOptionsAtIndex<unsigned long long &,unsigned long>(v22);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::FormatOptions::FormatOptions((uint64_t)v27, (const char **)&v31);
  unint64_t v12 = v31;
  if (v28)
  {
    if (v28 != 1)
    {
      uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Parameter index out of bounds.");
      __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    health::TypeFormatter<unsigned long,void>::TypeFormatter((uint64_t)__p, **(void **)a4, (uint64_t)v27);
    if (v35 && !*((unsigned char *)__p[0] + 48)) {
      uint64_t v13 = 64;
    }
    else {
      uint64_t v13 = 65;
    }
    unint64_t v17 = v13 - v34;
    if (*((unsigned char *)__p[0] + 50) && v17 <= *((void *)__p[0] + 3)) {
      unint64_t v17 = *((void *)__p[0] + 3);
    }
    unint64_t v18 = v30;
    if (v30 <= v17) {
      unint64_t v18 = v17;
    }
    if (v29) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = v17;
    }
    health::FormatImplementation<unsigned long long &,unsigned long>(v12, a2, v19 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v20 = (char *)a2;
    }
    else {
      std::string v20 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long>(v27, &v20[a3 - v8], (uint64_t *)__p);
  }
  else
  {
    health::TypeFormatter<unsigned long long &,void>::TypeFormatter((uint64_t)__p, *(void *)(a4 + 8), (uint64_t)v27);
    unint64_t v14 = v33;
    if ((v33 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    unint64_t v15 = v30;
    if (v30 <= v14) {
      unint64_t v15 = v14;
    }
    if (v29) {
      unint64_t v14 = v15;
    }
    health::FormatImplementation<unsigned long long &,unsigned long>(v12, a2, v14 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = (char *)a2;
    }
    else {
      uint64_t v16 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long long &>(v27, &v16[a3 - v8], (const void **)__p);
    if ((char)v33 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
  }
}

void sub_1BCEDAF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,unsigned long long &,unsigned long>::formatOptionsAtIndex<unsigned long long &,unsigned long>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDB04C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void health::FormatImplementation<unsigned long long &,unsigned long long &>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  for (uint64_t i = (char *)a1; ; ++i)
  {
    uint64_t v27 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 - v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    --v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    uint64_t v27 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v27 = i + 2;
    int v18 = i[2];
    if ((v18 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v19 = 0;
      std::string v20 = i + 3;
      do
      {
        uint64_t v27 = v20;
        uint64_t v19 = (v18 - 48) + 10 * v19;
        int v21 = *v20++;
        int v18 = v21;
      }
      while ((v21 - 58) >= 0xFFFFFFF6);
      uint64_t v27 = v20;
      if (*(v20 - 1) == 125) {
        health::FormatterParameters<0ul,unsigned long long &,unsigned long long &>::formatOptionsAtIndex<unsigned long long &,unsigned long long &>(v19);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    goto LABEL_45;
  }
  health::FormatOptions::FormatOptions((uint64_t)v23, (const char **)&v27);
  unint64_t v12 = v27;
  if (v24)
  {
    if (v24 == 1)
    {
      health::TypeFormatter<unsigned long long &,void>::TypeFormatter((uint64_t)&__p, *a4, (uint64_t)v23);
      unint64_t v13 = v30;
      if ((v30 & 0x80u) != 0) {
        unint64_t v13 = v29;
      }
      unint64_t v14 = v26;
      if (v26 <= v13) {
        unint64_t v14 = v13;
      }
      if (v25) {
        unint64_t v13 = v14;
      }
      health::FormatImplementation<unsigned long long &,unsigned long long &>(v12, a2, v13 + a3 - v8, a4);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v15 = (char *)a2;
      }
      else {
        unint64_t v15 = (char *)a2->__r_.__value_.__r.__words[0];
      }
      goto LABEL_33;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
LABEL_45:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::TypeFormatter<unsigned long long &,void>::TypeFormatter((uint64_t)&__p, a4[1], (uint64_t)v23);
  unint64_t v16 = v30;
  if ((v30 & 0x80u) != 0) {
    unint64_t v16 = v29;
  }
  unint64_t v17 = v26;
  if (v26 <= v16) {
    unint64_t v17 = v16;
  }
  if (v25) {
    unint64_t v16 = v17;
  }
  health::FormatImplementation<unsigned long long &,unsigned long long &>(v12, a2, v16 + a3 - v8, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v15 = (char *)a2;
  }
  else {
    unint64_t v15 = (char *)a2->__r_.__value_.__r.__words[0];
  }
LABEL_33:
  health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long long &>(v23, &v15[a3 - v8], (const void **)&__p);
  if ((char)v30 < 0) {
    operator delete(__p);
  }
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
  }
}

void sub_1BCEDB360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,unsigned long long &,unsigned long long &>::formatOptionsAtIndex<unsigned long long &,unsigned long long &>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDB42C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void health::FormatImplementation<unsigned int &,unsigned int>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (char *)a1; ; ++i)
  {
    long long v31 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 - v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    --v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    long long v31 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    long long v31 = i + 2;
    int v21 = i[2];
    if ((v21 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = i + 3;
      do
      {
        long long v31 = v23;
        uint64_t v22 = (v21 - 48) + 10 * v22;
        int v24 = *v23++;
        int v21 = v24;
      }
      while ((v24 - 58) >= 0xFFFFFFF6);
      long long v31 = v23;
      if (*(v23 - 1) == 125) {
        health::FormatterParameters<0ul,unsigned int &,unsigned int>::formatOptionsAtIndex<unsigned int &,unsigned int>(v22);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::FormatOptions::FormatOptions((uint64_t)v27, (const char **)&v31);
  unint64_t v12 = v31;
  if (v28)
  {
    if (v28 != 1)
    {
      unint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Parameter index out of bounds.");
      __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    health::TypeFormatter<unsigned int,void>::TypeFormatter((uint64_t)__p, **(_DWORD **)a4, (uint64_t)v27);
    if (v35 && !*((unsigned char *)__p[0] + 48)) {
      uint64_t v13 = 32;
    }
    else {
      uint64_t v13 = 33;
    }
    unint64_t v17 = v13 - v34;
    if (*((unsigned char *)__p[0] + 50) && v17 <= *((void *)__p[0] + 3)) {
      unint64_t v17 = *((void *)__p[0] + 3);
    }
    unint64_t v18 = v30;
    if (v30 <= v17) {
      unint64_t v18 = v17;
    }
    if (v29) {
      unint64_t v19 = v18;
    }
    else {
      unint64_t v19 = v17;
    }
    health::FormatImplementation<unsigned int &,unsigned int>(v12, a2, v19 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v20 = (char *)a2;
    }
    else {
      std::string v20 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned int>(v27, &v20[a3 - v8], (uint64_t *)__p);
  }
  else
  {
    health::TypeFormatter<unsigned int &,void>::TypeFormatter((uint64_t)__p, *(void *)(a4 + 8), (uint64_t)v27);
    unint64_t v14 = v33;
    if ((v33 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    unint64_t v15 = v30;
    if (v30 <= v14) {
      unint64_t v15 = v14;
    }
    if (v29) {
      unint64_t v14 = v15;
    }
    health::FormatImplementation<unsigned int &,unsigned int>(v12, a2, v14 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v16 = (char *)a2;
    }
    else {
      unint64_t v16 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long long &>(v27, &v16[a3 - v8], (const void **)__p);
    if ((char)v33 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
  }
}

void sub_1BCEDB7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,unsigned int &,unsigned int>::formatOptionsAtIndex<unsigned int &,unsigned int>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDB898(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t health::TypeFormatter<unsigned int &,void>::TypeFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v12);
  uint64_t v5 = v12;
  if (*(unsigned char *)(a3 + 16)) {
    *(void *)((char *)&v13[2] + *(void *)(v12 - 24)) = *(void *)(a3 + 24);
  }
  if (*(unsigned char *)(a3 + 32)) {
    *(void *)((char *)&v13[1] + *(void *)(v5 - 24)) = *(void *)(a3 + 40);
  }
  BOOL v6 = (const std::ios_base *)((char *)&v13[-1] + *(void *)(v5 - 24));
  std::ios_base::fmtflags v7 = *(char *)(a3 + 52);
  if (v6[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v6);
    uint64_t v8 = std::locale::use_facet(v10, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
    std::locale::~locale(v10);
  }
  v6[1].__fmtflags_ = v7;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v13, v10);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)&v10[0].__locale_;
  *(void *)(a1 + 16) = v11;
  uint64_t v12 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v13[-1] + *(void *)(v12 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[0] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C187B850](&v15);
  return a1;
}

void sub_1BCEDBAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, char a13)
{
  std::locale::~locale(&a10);
  std::ostringstream::~ostringstream((uint64_t)&a13);
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  _Unwind_Resume(a1);
}

uint64_t health::BlockAccessFile::BlockAccessFileHeader::deserialize(uint64_t a1, uint64_t a2)
{
  LODWORD(v5) = 0;
  health::DeserializationBuffer::extractRaw<health::BlockAccessFile::BlockAccessFileHeader::MagicWord>(a2, &v5);
  *(_DWORD *)a1 = v5;
  LODWORD(v5) = 0;
  health::DeserializationBuffer::extractRaw<health::BlockAccessFile::BlockAccessFileHeader::Version>(a2, &v5);
  *(_DWORD *)(a1 + 4) = v5;
  LODWORD(v5) = 0;
  health::DeserializationBuffer::extractRaw<unsigned int>(a2, &v5);
  *(_DWORD *)(a1 + 8) = v5;
  uint64_t v5 = 0;
  health::DeserializationBuffer::extractRaw<unsigned long long>(a2, &v5);
  *(void *)(a1 + 16) = v5;
  if (*(_DWORD *)(a1 + 4) >= 3u) {
    health::BlockPointer::deserialize((void *)(a1 + 24), a2);
  }
  health::BlockPointer::deserialize((void *)(a1 + 40), a2);
  return health::BlockPointer::deserialize((void *)(a1 + 56), a2);
}

uint64_t health::DeserializationBuffer::extractRaw<health::BlockAccessFile::BlockAccessFileHeader::MagicWord>(uint64_t result, _DWORD *a2)
{
  if (*(void *)(result + 16) <= 3uLL)
  {
    uint64_t v2 = *MEMORY[0x1E4F29F18];
    std::string::basic_string[abi:ne180100]<0>(v7, "sizeof(T) <= _length");
    std::string::basic_string[abi:ne180100]<0>(v6, "extractRaw");
    std::string::basic_string[abi:ne180100]<0>(v5, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/Utility/HDEncoder.h");
    health::FormatString<>((std::string *)"Extract would overflow deserialization buffer.", &__p);
    health::_HDAssertImplementation<std::out_of_range>(v2, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5, 63, (uint64_t)&__p);
  }
  *a2 = **(_DWORD **)(result + 8);
  uint64_t v3 = *(void *)(result + 16) - 4;
  *(void *)(result + 8) += 4;
  *(void *)(result + 16) = v3;
  return result;
}

void sub_1BCEDBCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t health::DeserializationBuffer::extractRaw<health::BlockAccessFile::BlockAccessFileHeader::Version>(uint64_t result, _DWORD *a2)
{
  if (*(void *)(result + 16) <= 3uLL)
  {
    uint64_t v2 = *MEMORY[0x1E4F29F18];
    std::string::basic_string[abi:ne180100]<0>(v7, "sizeof(T) <= _length");
    std::string::basic_string[abi:ne180100]<0>(v6, "extractRaw");
    std::string::basic_string[abi:ne180100]<0>(v5, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/Utility/HDEncoder.h");
    health::FormatString<>((std::string *)"Extract would overflow deserialization buffer.", &__p);
    health::_HDAssertImplementation<std::out_of_range>(v2, (uint64_t)v7, (uint64_t)v6, (uint64_t)v5, 63, (uint64_t)&__p);
  }
  *a2 = **(_DWORD **)(result + 8);
  uint64_t v3 = *(void *)(result + 16) - 4;
  *(void *)(result + 8) += 4;
  *(void *)(result + 16) = v3;
  return result;
}

void sub_1BCEDBE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

void health::FormatImplementation<unsigned int,unsigned int>(std::string *a1, std::string *a2, std::string::size_type a3, unsigned int **a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  for (uint64_t i = (char *)a1; ; ++i)
  {
    uint64_t v32 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 - v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    --v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    uint64_t v32 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v32 = i + 2;
    int v22 = i[2];
    if ((v22 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v23 = 0;
      int v24 = i + 3;
      do
      {
        uint64_t v32 = v24;
        uint64_t v23 = (v22 - 48) + 10 * v23;
        int v25 = *v24++;
        int v22 = v25;
      }
      while ((v25 - 58) >= 0xFFFFFFF6);
      uint64_t v32 = v24;
      if (*(v24 - 1) == 125) {
        health::FormatterParameters<0ul,unsigned int,unsigned int>::formatOptionsAtIndex<unsigned int,unsigned int>(v23);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::FormatOptions::FormatOptions((uint64_t)v28, (const char **)&v32);
  uint64_t v12 = v32;
  if (v29)
  {
    if (v29 != 1)
    {
      uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Parameter index out of bounds.");
      __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    health::TypeFormatter<unsigned int,void>::TypeFormatter((uint64_t)v33, **a4, (uint64_t)v28);
    if (v35 && !*(unsigned char *)(v33[0] + 48)) {
      uint64_t v13 = 32;
    }
    else {
      uint64_t v13 = 33;
    }
    unint64_t v19 = v13 - v34;
    if (*(unsigned char *)(v33[0] + 50) && v19 <= *(void *)(v33[0] + 24)) {
      unint64_t v19 = *(void *)(v33[0] + 24);
    }
    unint64_t v20 = v31;
    if (v31 <= v19) {
      unint64_t v20 = v19;
    }
    if (v30) {
      unint64_t v21 = v20;
    }
    else {
      unint64_t v21 = v19;
    }
    health::FormatImplementation<unsigned int,unsigned int>(v12, a2, v21 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v18 = (char *)a2;
    }
    else {
      unint64_t v18 = (char *)a2->__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    health::TypeFormatter<unsigned int,void>::TypeFormatter((uint64_t)v33, *a4[1], (uint64_t)v28);
    if (v35 && !*(unsigned char *)(v33[0] + 48)) {
      uint64_t v14 = 32;
    }
    else {
      uint64_t v14 = 33;
    }
    unint64_t v15 = v14 - v34;
    if (*(unsigned char *)(v33[0] + 50) && v15 <= *(void *)(v33[0] + 24)) {
      unint64_t v15 = *(void *)(v33[0] + 24);
    }
    unint64_t v16 = v31;
    if (v31 <= v15) {
      unint64_t v16 = v15;
    }
    if (v30) {
      unint64_t v17 = v16;
    }
    else {
      unint64_t v17 = v15;
    }
    health::FormatImplementation<unsigned int,unsigned int>(v12, a2, v17 + a3 - v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v18 = (char *)a2;
    }
    else {
      unint64_t v18 = (char *)a2->__r_.__value_.__r.__words[0];
    }
  }
  health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned int>(v28, &v18[a3 - v8], v33);
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
  }
}

void sub_1BCEDC26C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,unsigned int,unsigned int>::formatOptionsAtIndex<unsigned int,unsigned int>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDC31C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void health::FormatImplementation<unsigned int &,unsigned int &>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  for (uint64_t i = (char *)a1; ; ++i)
  {
    uint64_t v26 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 - v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    --v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    uint64_t v26 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    uint64_t v26 = i + 2;
    int v17 = i[2];
    if ((v17 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = i + 3;
      do
      {
        uint64_t v26 = v19;
        uint64_t v18 = (v17 - 48) + 10 * v18;
        int v20 = *v19++;
        int v17 = v20;
      }
      while ((v20 - 58) >= 0xFFFFFFF6);
      uint64_t v26 = v19;
      if (*(v19 - 1) == 125) {
        health::FormatterParameters<0ul,unsigned int &,unsigned int &>::formatOptionsAtIndex<unsigned int &,unsigned int &>(v18);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    goto LABEL_43;
  }
  health::FormatOptions::FormatOptions((uint64_t)v22, (const char **)&v26);
  uint64_t v12 = v26;
  if (v23)
  {
    if (v23 == 1)
    {
      health::TypeFormatter<unsigned int &,void>::TypeFormatter((uint64_t)&__p, *a4, (uint64_t)v22);
      unint64_t v13 = v29;
      if ((v29 & 0x80u) != 0) {
        unint64_t v13 = v28;
      }
      unint64_t v14 = v25;
      if (v25 <= v13) {
        unint64_t v14 = v13;
      }
      if (v24) {
        unint64_t v13 = v14;
      }
      goto LABEL_28;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
LABEL_43:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::TypeFormatter<unsigned int &,void>::TypeFormatter((uint64_t)&__p, a4[1], (uint64_t)v22);
  unint64_t v13 = v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v13 = v28;
  }
  unint64_t v15 = v25;
  if (v25 <= v13) {
    unint64_t v15 = v13;
  }
  if (v24) {
    unint64_t v13 = v15;
  }
LABEL_28:
  health::FormatImplementation<unsigned int &,unsigned int &>(v12, a2, v13 + a3 - v8, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = (char *)a2;
  }
  else {
    unint64_t v16 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long long &>(v22, &v16[a3 - v8], (const void **)&__p);
  if ((char)v29 < 0) {
    operator delete(__p);
  }
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
  }
}

void sub_1BCEDC60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,unsigned int &,unsigned int &>::formatOptionsAtIndex<unsigned int &,unsigned int &>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDC6D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0,std::allocator<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0>,void ()(health::FileExtent const&)>::~__func()
{
}

void *std::__function::__func<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0,std::allocator<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0>,void ()(health::FileExtent const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F171F890;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0,std::allocator<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0>,void ()(health::FileExtent const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F171F890;
  a2[1] = v2;
  return result;
}

void std::__function::__func<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0,std::allocator<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0>,void ()(health::FileExtent const&)>::operator()(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(unint64_t **)(a1 + 8);
  unint64_t v4 = *v3;
  if (*v3 == v3[1])
  {
LABEL_10:
    unint64_t v9 = v3[2];
    if (v4 >= v9)
    {
      uint64_t v11 = (uint64_t)(v4 - *v3) >> 4;
      if ((unint64_t)(v11 + 1) >> 60) {
        goto LABEL_65;
      }
      uint64_t v12 = v9 - *v3;
      uint64_t v13 = v12 >> 3;
      if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<health::FileExtent>>(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v32 = (_OWORD *)(v14 + 16 * v11);
      unint64_t v33 = v14 + 16 * v15;
      *uint64_t v32 = *(_OWORD *)v2;
      uint64_t v10 = v32 + 1;
      char v35 = (char *)*v3;
      uint64_t v34 = (char *)v3[1];
      if (v34 != (char *)*v3)
      {
        do
        {
          *--uint64_t v32 = *((_OWORD *)v34 - 1);
          v34 -= 16;
        }
        while (v34 != v35);
        uint64_t v34 = (char *)*v3;
      }
      *uint64_t v3 = (unint64_t)v32;
      v3[1] = (unint64_t)v10;
      uint64_t v3[2] = v33;
      if (v34) {
        operator delete(v34);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      uint64_t v10 = (_OWORD *)(v4 + 16);
    }
    v3[1] = (unint64_t)v10;
    return;
  }
  uint64_t v5 = -(uint64_t)v4;
  int64_t v6 = *(void *)a2;
  while (1)
  {
    unint64_t v7 = *(void *)v4;
    if (v6 <= *(void *)v4 && *((void *)a2 + 1) + v6 > v7 || (uint64_t)v7 <= v6 && *(void *)(v4 + 8) + v7 > v6)
    {
      uint64_t v8 = *MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v52, "!extent.overlaps(*i)");
      std::string::basic_string[abi:ne180100]<0>(v51, "operator()");
      std::string::basic_string[abi:ne180100]<0>(v50, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBlockAccessFile.cpp");
      v53[0] = (uint64_t)v2;
      v53[1] = v4;
      memset(&__p, 0, sizeof(__p));
      health::FormatImplementation<health::FileExtent &,health::FileExtent const&>((std::string *)"Found overlapping free space extents {0} and {1}", &__p, 0, v53);
      health::_HDAssertImplementation<health::data_corruption_error>(v8, (uint64_t)v52, (uint64_t)v51, (uint64_t)v50, 192, (uint64_t)&__p);
    }
    int64_t v6 = *(void *)a2;
    if (*(void *)a2 < *(void *)v4) {
      break;
    }
    v4 += 16;
    uint64_t v3 = *(unint64_t **)(a1 + 8);
    v5 -= 16;
    if (v4 == v3[1]) {
      goto LABEL_10;
    }
  }
  unint64_t v16 = *(char ***)(a1 + 8);
  uint64_t v18 = *v16;
  int v17 = v16[1];
  uint64_t v19 = -v5 - (void)*v16;
  int v20 = &(*v16)[v19 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v21 = (unint64_t)v16[2];
  if ((unint64_t)v17 < v21)
  {
    if (v20 == v17)
    {
      *(_OWORD *)int v20 = *(_OWORD *)a2;
      v16[1] = v20 + 16;
    }
    else
    {
      int v22 = v20 + 16;
      uint64_t v23 = v17 - 16;
      char v24 = v16[1];
      while (v23 < v17)
      {
        long long v25 = *(_OWORD *)v23;
        v23 += 16;
        *(_OWORD *)char v24 = v25;
        v24 += 16;
      }
      v16[1] = v24;
      if (v17 != v22) {
        memmove(&v17[-16 * ((v17 - v22) >> 4)], v20, v17 - v22);
      }
      if (v20 <= v2) {
        v2 += 16 * (v16[1] > v2);
      }
      *(_OWORD *)int v20 = *(_OWORD *)v2;
    }
    return;
  }
  unint64_t v26 = ((v17 - v18) >> 4) + 1;
  if (v26 >> 60) {
LABEL_65:
  }
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  uint64_t v27 = v19 >> 4;
  uint64_t v28 = v21 - (void)v18;
  if (v28 >> 3 > v26) {
    unint64_t v26 = v28 >> 3;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health::FileExtent>>(v29);
  }
  else
  {
    unint64_t v31 = 0;
    uint64_t v30 = 0;
  }
  uint64_t v36 = &v31[16 * v27];
  long long v37 = &v31[16 * v30];
  if (v27 == v30)
  {
    if (v19 < 1)
    {
      if ((char *)v4 == v18) {
        unint64_t v39 = 1;
      }
      else {
        unint64_t v39 = v19 >> 3;
      }
      int v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health::FileExtent>>(v39);
      uint64_t v36 = &v40[16 * (v39 >> 2)];
      long long v37 = &v40[16 * v41];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      unint64_t v38 = v27 + 2;
      if (v27 >= -1) {
        unint64_t v38 = v27 + 1;
      }
      v36 -= 16 * (v38 >> 1);
    }
  }
  *(_OWORD *)uint64_t v36 = *(_OWORD *)v2;
  uint64_t v42 = *v16;
  uint64_t v43 = v36;
  if (*v16 != v20)
  {
    unint64_t v44 = v20;
    uint64_t v45 = v36;
    do
    {
      uint64_t v43 = v45 - 16;
      *((_OWORD *)v45 - 1) = *((_OWORD *)v44 - 1);
      v44 -= 16;
      v45 -= 16;
    }
    while (v44 != v42);
  }
  v46 = v16[1];
  int64_t v47 = v46 - v20;
  if (v46 != v20) {
    memmove(v36 + 16, v20, v46 - v20);
  }
  unint64_t v48 = *v16;
  char *v16 = v43;
  v16[1] = &v36[v47 + 16];
  v16[2] = v37;
  if (v48) {
    operator delete(v48);
  }
}

void sub_1BCEDCB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v32) {
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0,std::allocator<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0>,void ()(health::FileExtent const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0,std::allocator<health::BlockAccessFile::ReadTransaction::_computeFreeSpaceExtents(void)::$_0>,void ()(health::FileExtent const&)>::target_type()
{
}

void health::FormatImplementation<health::FileExtent &,health::FileExtent const&>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  std::string::size_type v8 = 0;
  char v9 = 0;
  for (uint64_t i = (char *)a1; ; ++i)
  {
    __int16 v49 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 + v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    ++v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    __int16 v49 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    __int16 v49 = i + 2;
    int v39 = i[2];
    if ((v39 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v41 = i + 3;
      do
      {
        __int16 v49 = v41;
        uint64_t v40 = (v39 - 48) + 10 * v40;
        int v42 = *v41++;
        int v39 = v42;
      }
      while ((v42 - 58) >= 0xFFFFFFF6);
      __int16 v49 = v41;
      if (*(v41 - 1) == 125) {
        health::FormatterParameters<0ul,health::FileExtent &,health::FileExtent const&>::formatOptionsAtIndex<health::FileExtent &,health::FileExtent const&>(v40);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
LABEL_101:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::FormatOptions::FormatOptions((uint64_t)&v44, (const char **)&v49);
  uint64_t v12 = v49;
  if (!v45)
  {
    health::FormatString<long long const&,unsigned long const&>(&__p, a4[1], a4[1] + 8);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v27 = v47;
    if (v47 <= size) {
      std::string::size_type v27 = size;
    }
    if (v46) {
      std::string::size_type size = v27;
    }
    health::FormatImplementation<health::FileExtent &,health::FileExtent const&>(v12, a2, size + a3 + v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = (char *)a2;
    }
    else {
      uint64_t v28 = (char *)a2->__r_.__value_.__r.__words[0];
    }
    health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long long &>(&v44, &v28[a3 + v8], (const void **)&__p.__r_.__value_.__l.__data_);
    goto LABEL_59;
  }
  if (v45 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    goto LABEL_101;
  }
  health::FormatString<long long const&,unsigned long const&>(&__p, *a4, *a4 + 8);
  std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v14 = v47;
  if (v47 <= v13) {
    std::string::size_type v14 = v13;
  }
  if (v46) {
    std::string::size_type v13 = v14;
  }
  health::FormatImplementation<health::FileExtent &,health::FileExtent const&>(v12, a2, v13 + a3 + v8, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  unint64_t v16 = (char *)v15 + a3 + v8;
  size_t v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v20 = __p.__r_.__value_.__l.__size_;
  }
  if (v46 && (v21 = v47, unint64_t v22 = v47 - v20, v47 > v20))
  {
    if (v44)
    {
      if (v44 == 1)
      {
        unint64_t v31 = v22 >> 1;
        if (v22 >= 2)
        {
          if (v31 <= 1) {
            uint64_t v32 = 1;
          }
          else {
            uint64_t v32 = v22 >> 1;
          }
          do
          {
            *v16++ = v48;
            --v32;
          }
          while (v32);
          size_t v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
          char v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v18 >= 0) {
          size_t v33 = v17;
        }
        else {
          size_t v33 = v19;
        }
        if (v33)
        {
          if (v18 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v16, p_p, v33);
        }
        if (v22 != v31)
        {
          unint64_t v35 = v22 - (v22 >> 1);
          uint64_t v36 = &v16[v20];
          if (v35 <= 1) {
            unint64_t v35 = 1;
          }
          uint64_t v37 = -(uint64_t)v35;
          do
            *v36++ = v48;
          while (!__CFADD__(v37++, 1));
        }
      }
      else if (v44 == 2)
      {
        if (v47 != v20)
        {
          do
          {
            *v16++ = v48;
            --v22;
          }
          while (v22);
          size_t v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
          char v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        size_t v23 = v18 >= 0 ? v17 : v19;
        if (v23)
        {
          if (v18 >= 0) {
            char v24 = &__p;
          }
          else {
            char v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          long long v25 = v16;
          goto LABEL_58;
        }
      }
    }
    else
    {
      if (v20)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v29 = &__p;
        }
        else {
          unint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove((char *)v15 + a3 + v8, v29, v20);
      }
      if (v21 != v20)
      {
        size_t v30 = (size_t)v15 + v20;
        do
        {
          *(unsigned char *)(v30 + a3 + v8) = v48;
          ++v30;
          --v22;
        }
        while (v22);
      }
    }
  }
  else if (v20)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v24 = &__p;
    }
    else {
      char v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    long long v25 = (char *)v15 + a3 + v8;
    size_t v23 = v20;
LABEL_58:
    memmove(v25, v24, v23);
  }
LABEL_59:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, v8, v9 & 1);
  }
}

void sub_1BCEDD0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,health::FileExtent &,health::FileExtent const&>::formatOptionsAtIndex<health::FileExtent &,health::FileExtent const&>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDD178(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void health::FormatString<long long const&,unsigned long const&>(std::string *a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a3;
  v3[1] = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  health::FormatImplementation<long long const&,unsigned long const&>((std::string *)"({0}, {1})", a1, 0, (uint64_t)v3);
}

void sub_1BCEDD1E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void health::FormatImplementation<long long const&,unsigned long const&>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t a4)
{
  std::string::size_type v8 = 0;
  char v9 = 0;
  for (uint64_t i = (char *)a1; ; ++i)
  {
    v65 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 + v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    ++v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    v65 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    v65 = i + 2;
    int v52 = i[2];
    if ((v52 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v53 = 0;
      uint64_t v54 = i + 3;
      do
      {
        v65 = v54;
        uint64_t v53 = (v52 - 48) + 10 * v53;
        int v55 = *v54++;
        int v52 = v55;
      }
      while ((v55 - 58) >= 0xFFFFFFF6);
      v65 = v54;
      if (*(v54 - 1) == 125) {
        health::FormatterParameters<0ul,long long const&,unsigned long const&>::formatOptionsAtIndex<long long const&,unsigned long const&>(v53);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
LABEL_137:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::FormatOptions::FormatOptions((uint64_t)&v58, (const char **)&v65);
  uint64_t v12 = v65;
  __s = a1;
  if (!v59)
  {
    v66[1] = 0;
    uint64_t v67 = 0;
    v66[0] = 0;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
    uint64_t v25 = v70;
    if (v60) {
      *(void *)((char *)&v71[2] + *(void *)(v70 - 24)) = v61;
    }
    if (v62) {
      *(void *)((char *)&v71[1] + *(void *)(v25 - 24)) = v63;
    }
    unint64_t v26 = (const std::ios_base *)((char *)&v71[-1] + *(void *)(v25 - 24));
    std::ios_base::fmtflags v27 = v64;
    if (v26[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v26);
      uint64_t v28 = std::locale::use_facet(v68, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 32);
      std::locale::~locale(v68);
    }
    v26[1].__fmtflags_ = v27;
    std::ostream::operator<<();
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v71, v68);
    *(_OWORD *)v66 = *(_OWORD *)&v68[0].__locale_;
    uint64_t v67 = v69;
    uint64_t v70 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v71[-1] + *(void *)(v70 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v71[0] = MEMORY[0x1E4FBA470] + 16;
    if (v73 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C187B850](v74);
    int v17 = SHIBYTE(v67);
    if (v67 >= 0) {
      size_t v18 = HIBYTE(v67);
    }
    else {
      size_t v18 = (size_t)v66[1];
    }
    size_t v29 = v61;
    if (v61 <= v18) {
      size_t v29 = v18;
    }
    if (v60) {
      size_t v30 = v29;
    }
    else {
      size_t v30 = v18;
    }
    health::FormatImplementation<long long const&,unsigned long const&>(v12, a2, v30 + a3 + v8, a4);
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v31 = a2;
    }
    else {
      unint64_t v31 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    unint64_t v22 = (char *)v31 + a3 + v8;
    if (v60)
    {
      size_t v32 = v61;
      unint64_t v33 = v61 - v18;
      if (v61 > v18)
      {
        if (!v58)
        {
          if (v18)
          {
            if (v17 >= 0) {
              int v44 = v66;
            }
            else {
              int v44 = (void **)v66[0];
            }
            memmove((char *)v31 + a3 + v8, v44, v18);
          }
          if (v32 != v18)
          {
            size_t v45 = (size_t)v31 + v18;
            do
            {
              *(unsigned char *)(v45 + a3 + v8) = v64;
              ++v45;
              --v33;
            }
            while (v33);
          }
          goto LABEL_73;
        }
        if (v58 == 1)
        {
          unint64_t v46 = v33 >> 1;
          if (v33 >= 2)
          {
            if (v46 <= 1) {
              uint64_t v47 = 1;
            }
            else {
              uint64_t v47 = v33 >> 1;
            }
            do
            {
              *v22++ = v64;
              --v47;
            }
            while (v47);
          }
          if (v18)
          {
            if (v17 >= 0) {
              char v48 = v66;
            }
            else {
              char v48 = (void **)v66[0];
            }
            memmove(v22, v48, v18);
          }
          if (v33 != v46)
          {
            unint64_t v49 = v33 - (v33 >> 1);
            int v50 = &v22[v18];
            if (v49 <= 1) {
              unint64_t v49 = 1;
            }
            uint64_t v51 = -(uint64_t)v49;
            do
            {
              *v50++ = v64;
              BOOL v43 = __CFADD__(v51++, 1);
            }
            while (!v43);
          }
          goto LABEL_73;
        }
        if (v58 != 2) {
          goto LABEL_73;
        }
        if (v61 != v18)
        {
          do
          {
            *v22++ = v64;
            --v33;
          }
          while (v33);
        }
      }
    }
LABEL_68:
    if (v18)
    {
      if (v17 >= 0) {
        uint64_t v34 = v66;
      }
      else {
        uint64_t v34 = (void **)v66[0];
      }
      memmove(v22, v34, v18);
    }
    goto LABEL_73;
  }
  if (v59 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    goto LABEL_137;
  }
  v66[1] = 0;
  uint64_t v67 = 0;
  v66[0] = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
  uint64_t v13 = v70;
  if (v60) {
    *(void *)((char *)&v71[2] + *(void *)(v70 - 24)) = v61;
  }
  if (v62) {
    *(void *)((char *)&v71[1] + *(void *)(v13 - 24)) = v63;
  }
  std::string::size_type v14 = (const std::ios_base *)((char *)&v71[-1] + *(void *)(v13 - 24));
  std::ios_base::fmtflags v15 = v64;
  if (v14[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v14);
    unint64_t v16 = std::locale::use_facet(v68, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 32);
    std::locale::~locale(v68);
  }
  v14[1].__fmtflags_ = v15;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v71, v68);
  *(_OWORD *)v66 = *(_OWORD *)&v68[0].__locale_;
  uint64_t v67 = v69;
  uint64_t v70 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v71[-1] + *(void *)(v70 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v71[0] = MEMORY[0x1E4FBA470] + 16;
  if (v73 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C187B850](v74);
  int v17 = SHIBYTE(v67);
  if (v67 >= 0) {
    size_t v18 = HIBYTE(v67);
  }
  else {
    size_t v18 = (size_t)v66[1];
  }
  size_t v19 = v61;
  if (v61 <= v18) {
    size_t v19 = v18;
  }
  if (v60) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v18;
  }
  health::FormatImplementation<long long const&,unsigned long const&>(v12, a2, v20 + a3 + v8, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = a2;
  }
  else {
    std::string::size_type v21 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  unint64_t v22 = (char *)v21 + a3 + v8;
  if (!v60) {
    goto LABEL_68;
  }
  size_t v23 = v61;
  unint64_t v24 = v61 - v18;
  if (v61 <= v18) {
    goto LABEL_68;
  }
  if (v58)
  {
    if (v58 == 1)
    {
      unint64_t v37 = v24 >> 1;
      if (v24 >= 2)
      {
        if (v37 <= 1) {
          uint64_t v38 = 1;
        }
        else {
          uint64_t v38 = v24 >> 1;
        }
        do
        {
          *v22++ = v64;
          --v38;
        }
        while (v38);
      }
      if (v18)
      {
        if (v17 >= 0) {
          int v39 = v66;
        }
        else {
          int v39 = (void **)v66[0];
        }
        memmove(v22, v39, v18);
      }
      if (v24 != v37)
      {
        unint64_t v40 = v24 - (v24 >> 1);
        uint64_t v41 = &v22[v18];
        if (v40 <= 1) {
          unint64_t v40 = 1;
        }
        uint64_t v42 = -(uint64_t)v40;
        do
        {
          *v41++ = v64;
          BOOL v43 = __CFADD__(v42++, 1);
        }
        while (!v43);
      }
    }
    else if (v58 == 2)
    {
      if (v61 != v18)
      {
        do
        {
          *v22++ = v64;
          --v24;
        }
        while (v24);
      }
      goto LABEL_68;
    }
  }
  else
  {
    if (v18)
    {
      if (v17 >= 0) {
        unint64_t v35 = v66;
      }
      else {
        unint64_t v35 = (void **)v66[0];
      }
      memmove((char *)v21 + a3 + v8, v35, v18);
    }
    if (v23 != v18)
    {
      size_t v36 = (size_t)v21 + v18;
      do
      {
        *(unsigned char *)(v36 + a3 + v8) = v64;
        ++v36;
        --v24;
      }
      while (v24);
    }
  }
LABEL_73:
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[0]);
  }
  if (v8) {
    health::CopyFormatSectionToResult(__s, a2, a3, v8, v9 & 1);
  }
}

void sub_1BCEDDAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,char a26)
{
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,long long const&,unsigned long const&>::formatOptionsAtIndex<long long const&,unsigned long const&>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDDBD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<health::FileExtent>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void health::FormatImplementation<health::FileExtent &,health::FileExtent &>(std::string *a1, std::string *a2, std::string::size_type a3, uint64_t *a4)
{
  uint64_t v8 = 0;
  char v9 = 0;
  for (uint64_t i = (char *)a1; ; ++i)
  {
    unint64_t v26 = i;
    if (*i == 123) {
      break;
    }
    if (!*i)
    {
      std::string::resize(a2, a3 - v8, 0);
      if (v8)
      {
        health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
      }
      return;
    }
LABEL_7:
    --v8;
  }
  int v11 = i[1];
  if (v11 == 123)
  {
    unint64_t v26 = i + 1;
    char v9 = 1;
    ++i;
    goto LABEL_7;
  }
  if (v11 == 42)
  {
    unint64_t v26 = i + 2;
    int v17 = i[2];
    if ((v17 - 48) > 9)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format string- missing numeric value.");
    }
    else
    {
      uint64_t v18 = 0;
      size_t v19 = i + 3;
      do
      {
        unint64_t v26 = v19;
        uint64_t v18 = (v17 - 48) + 10 * v18;
        int v20 = *v19++;
        int v17 = v20;
      }
      while ((v20 - 58) >= 0xFFFFFFF6);
      unint64_t v26 = v19;
      if (*(v19 - 1) == 125) {
        health::FormatterParameters<0ul,health::FileExtent &,health::FileExtent &>::formatOptionsAtIndex<health::FileExtent &,health::FileExtent &>(v18);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid format options reference: Must be of form {*<index>} but no trailing '}' found.");
    }
    goto LABEL_43;
  }
  health::FormatOptions::FormatOptions((uint64_t)v22, (const char **)&v26);
  uint64_t v12 = v26;
  if (v23)
  {
    if (v23 == 1)
    {
      health::FormatString<long long const&,unsigned long const&>(&__p, *a4, *a4 + 8);
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::size_type v14 = v25;
      if (v25 <= size) {
        std::string::size_type v14 = size;
      }
      if (v24) {
        std::string::size_type size = v14;
      }
      goto LABEL_28;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
LABEL_43:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  health::FormatString<long long const&,unsigned long const&>(&__p, a4[1], a4[1] + 8);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v25;
  if (v25 <= size) {
    std::string::size_type v15 = size;
  }
  if (v24) {
    std::string::size_type size = v15;
  }
LABEL_28:
  health::FormatImplementation<health::FileExtent &,health::FileExtent &>(v12, a2, size + a3 - v8, a4);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = (char *)a2;
  }
  else {
    unint64_t v16 = (char *)a2->__r_.__value_.__r.__words[0];
  }
  health::FormatOptions::justifyNativeValueOfLength<std::__wrap_iter<char *>,unsigned long long &>(v22, &v16[a3 - v8], (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v8) {
    health::CopyFormatSectionToResult(a1, a2, a3, -v8, v9 & 1);
  }
}

void sub_1BCEDDEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void health::FormatterParameters<0ul,health::FileExtent &,health::FileExtent &>::formatOptionsAtIndex<health::FileExtent &,health::FileExtent &>(uint64_t a1)
{
  if (a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v1 = exception;
    if (a1 == 1) {
      std::runtime_error::runtime_error(exception, "Requested parameter is not an FormatOptions instance.");
    }
    else {
      std::runtime_error::runtime_error(exception, "Parameter index out of bounds.");
    }
  }
  else
  {
    uint64_t v1 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v1, "Requested parameter is not an FormatOptions instance.");
  }
  __cxa_throw(v1, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BCEDDFBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t health::BTree<health::BlockAccessFile::ReadTransaction::FreeSpaceMapReadConfiguration>::_enumerateAllValues<health::BlockAccessFile::ReadTransaction::_enumerateFreeSpaceBlocks(std::function<void ()(health::FileExtent const&)>)::$_0>(uint64_t result, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v26 = a2 + 1632;
  uint64_t v27 = result;
  uint64_t v5 = *(void *)(a2 + 1632);
  uint64_t v6 = **(void **)(result + 8);
  if (*(_WORD *)(a2 + 1776))
  {
    unint64_t v8 = 0;
    unsigned int v25 = a3 + 1;
    do
    {
      if (v5 != v6)
      {
        uint64_t v9 = *(void *)(v27 + 8);
        uint64_t v10 = (uint64_t *)health::StaticArray<unsigned long long,18ul>::operator[](v26, v8);
        bzero(v28, 0x6F2uLL);
        health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17>>(**(void **)(v9 + 8), (uint64_t)v28, *v10);
        health::BTree<health::BlockAccessFile::ReadTransaction::FreeSpaceMapReadConfiguration>::_enumerateAllValues<health::BlockAccessFile::ReadTransaction::_enumerateFreeSpaceBlocks(std::function<void ()(health::FileExtent const&)>)::$_0>(v27, v28, v25, a4);
      }
      uint64_t v11 = *(void *)health::StaticArray<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17>::ValueEntry,17ul>::operator[](a2, v8);
      uint64_t v12 = health::StaticArray<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17>::ValueEntry,17ul>::operator[](a2, v8);
      unint64_t v13 = 0;
      std::string::size_type v14 = (uint64_t *)a4[1];
      do
      {
        __n128 result = health::StaticArray<unsigned long long,10ul>::operator[](v12 + 8, v13);
        if (*(void *)result)
        {
          uint64_t v15 = *a4;
          *(void *)&v28[0] = *(void *)result;
          *((void *)&v28[0] + 1) = v11;
          uint64_t v16 = *(void *)(v15 + 24);
          if (!v16) {
LABEL_23:
          }
            std::__throw_bad_function_call[abi:ne180100]();
          __n128 result = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v16 + 48))(v16, v28);
        }
        ++v13;
      }
      while (v13 != 10);
      uint64_t v17 = *(void *)(v12 + 88);
      if (v17)
      {
        do
        {
          uint64_t v29 = 0;
          memset(v28, 0, sizeof(v28));
          health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::FreeSpaceList>(*v14, (uint64_t)v28, v17);
          for (unint64_t i = 0; i != 10; ++i)
          {
            __n128 result = health::StaticArray<unsigned long long,10ul>::operator[]((uint64_t)v28, i);
            if (*(void *)result)
            {
              uint64_t v19 = *a4;
              v30[0] = *(void *)result;
              v30[1] = v11;
              uint64_t v20 = *(void *)(v19 + 24);
              if (!v20) {
                goto LABEL_23;
              }
              __n128 result = (*(uint64_t (**)(uint64_t, void *))(*(void *)v20 + 48))(v20, v30);
            }
          }
          uint64_t v17 = v29;
        }
        while (v29);
      }
      ++v8;
      unint64_t v21 = *(unsigned __int16 *)(a2 + 1776);
    }
    while (v8 < v21);
  }
  else
  {
    unint64_t v21 = 0;
  }
  if (v5 != v6)
  {
    uint64_t v22 = *(void *)(v27 + 8);
    uint64_t v23 = (uint64_t *)health::StaticArray<unsigned long long,18ul>::operator[](v26, v21);
    bzero(v28, 0x6F2uLL);
    health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BTreeNode<unsigned long long,health::BlockAccessFile::FreeSpaceList,unsigned long long,17>>(**(void **)(v22 + 8), (uint64_t)v28, *v23);
    return health::BTree<health::BlockAccessFile::ReadTransaction::FreeSpaceMapReadConfiguration>::_enumerateAllValues<health::BlockAccessFile::ReadTransaction::_enumerateFreeSpaceBlocks(std::function<void ()(health::FileExtent const&)>)::$_0>(v27, v28, (a3 + 1), a4);
  }
  return result;
}

uint64_t health::BlockAccessFile::FreeSpaceList::deserialize(uint64_t a1, uint64_t a2)
{
  for (unint64_t i = 0; i != 10; ++i)
  {
    uint64_t v5 = (void *)health::StaticArray<unsigned long long,10ul>::operator[](a1, i);
    uint64_t v7 = 0;
    health::DeserializationBuffer::extractRaw<unsigned long long>(a2, &v7);
    void *v5 = v7;
  }
  uint64_t v7 = 0;
  uint64_t result = health::DeserializationBuffer::extractRaw<unsigned long long>(a2, &v7);
  *(void *)(a1 + 80) = v7;
  return result;
}

uint64_t health::TransactionalFile::ReadTransaction::readObjectAtOffset<health::BlockAccessFile::FreeSpaceList>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = 88;
  v11[0] = v13;
  v11[1] = v13;
  v11[2] = 88;
  health::RawBuffer::RawBuffer(v10, v13, 88);
  uint64_t v8 = a1 + 8;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v8 + 8);
  health::RawBuffer::RawBuffer(v12, v10[0], (uint64_t)v10[1]);
  health::TransactionalFile::_readBufferAtOffset(v7, v6, (health::RawBuffer *)v12, a3);
  health::BlockAccessFile::FreeSpaceList::deserialize(a2, (uint64_t)v11);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCEDE384(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x438];
  STACK[0x438] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t health::BlockAccessFile::WriteTransaction::updateObject<health::ByteRange<void const,unsigned long long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (size_t *)(a4 + 8);
  unint64_t v8 = *(void *)(a4 + 8);
  health::SmartBuffer::SmartBuffer((uint64_t)v15, v8);
  if (v17 <= 0x3FF) {
    uint64_t v10 = v15;
  }
  else {
    uint64_t v10 = v16;
  }
  v14[0] = v10;
  v14[1] = v10;
  v14[2] = v8;
  health::SerializationBuffer::appendBytes((health::SerializationBuffer *)v14, *(const void **)a4, *v9);
  if (v17 <= 0x3FF) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = v16;
  }
  health::RawBuffer::RawBuffer(v13, v11, v17);
  health::BlockAccessFile::WriteTransaction::updateBlock(a1, a2, a3, (uint64_t)v13);
  uint64_t result = (uint64_t)v16;
  uint64_t v16 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCEDE4B8(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x428];
  STACK[0x428] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

void *health::SerializationBuffer::appendBytes(health::SerializationBuffer *this, const void *__src, size_t __n)
{
  if (*((void *)this + 2) < __n)
  {
    uint64_t v5 = *MEMORY[0x1E4F29F18];
    std::string::basic_string[abi:ne180100]<0>(v11, "length <= _length");
    std::string::basic_string[abi:ne180100]<0>(v10, "appendBytes");
    std::string::basic_string[abi:ne180100]<0>(v9, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/Utility/HDEncoder.h");
    health::FormatString<>((std::string *)"Append would overflow serialization buffer.", &__p);
    health::_HDAssertImplementation<std::out_of_range>(v5, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, 43, (uint64_t)&__p);
  }
  uint64_t result = memcpy(*((void **)this + 1), __src, __n);
  size_t v7 = *((void *)this + 2) - __n;
  *((void *)this + 1) += __n;
  *((void *)this + 2) = v7;
  return result;
}

void sub_1BCEDE5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

__n128 std::deque<health::BlockPointer>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<health::BlockPointer>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<health::BlockPointer>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<health::BlockPointer *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<health::BlockPointer *>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      char v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      BOOL v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<health::BlockPointer *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<health::BlockPointer *>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1BCEDE9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<health::BlockPointer *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      unint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<health::BlockPointer *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<health::BlockPointer>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x100) {
    a2 = 1;
  }
  if (v2 < 0x200) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t HDCloudSyncCodableAttachmentReferenceTombstonesReadFrom(void *a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HDCloudSyncCodableAttachmentReferenceTombstone);
        [a1 addAttachmentReferenceTombstone:v17];
        if (!PBReaderPlaceMark()
          || (HDCloudSyncCodableAttachmentReferenceTombstoneReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableFHIRCredentialReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 32;
        goto LABEL_26;
      case 2u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 24;
        goto LABEL_26;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 64;
        goto LABEL_26;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_26;
      case 5u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
LABEL_26:
        uint64_t v21 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_55;
      case 6u:
        *(unsigned char *)(a1 + 84) |= 2u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v35 = 16;
        goto LABEL_54;
      case 7u:
        *(unsigned char *)(a1 + 84) |= 1u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v35 = 8;
LABEL_54:
        *(void *)(a1 + v35) = v24;
        goto LABEL_55;
      case 8u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 84) |= 4u;
        while (2)
        {
          uint64_t v30 = *v3;
          uint64_t v31 = *(void *)(a2 + v30);
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              BOOL v15 = v28++ >= 9;
              if (v15)
              {
                uint64_t v29 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_49:
        *(unsigned char *)(a1 + 80) = v29 != 0;
        goto LABEL_55;
      case 9u:
        uint64_t v34 = objc_alloc_init(HDCodableMessageVersion);
        objc_storeStrong((id *)(a1 + 40), v34);
        if (!PBReaderPlaceMark() || !HDCodableMessageVersionReadFrom((uint64_t)v34, a2)) {
          goto LABEL_57;
        }
        goto LABEL_45;
      case 0xAu:
        uint64_t v34 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 72), v34);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v34, a2))
        {
LABEL_45:
          PBReaderRecallMark();

LABEL_55:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_57:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_55;
    }
  }
}

uint64_t HDCodableOnboardingCompletionReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  int v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  char v8 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  unsigned int v9 = &OBJC_IVAR___HDEntityEncoder__authorizationFilter;
  unint64_t v10 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v10) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v18 = v12++ >= 9;
      if (v18)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        uint64_t v21 = PBReaderReadData();
        uint64_t v22 = v7[794];
        goto LABEL_34;
      case 2u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = v8[795];
        goto LABEL_34;
      case 3u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + v9[796]) |= 8u;
        while (2)
        {
          uint64_t v27 = *v3;
          uint64_t v28 = *(void *)(a2 + v27);
          unint64_t v29 = v28 + 1;
          if (v28 == -1 || v29 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v10) + v28);
            *(void *)(a2 + v27) = v29;
            v26 |= (unint64_t)(v30 & 0x7F) << v24;
            if (v30 < 0)
            {
              v24 += 7;
              BOOL v18 = v25++ >= 9;
              if (v18)
              {
                uint64_t v26 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
LABEL_58:
        uint64_t v54 = 32;
        goto LABEL_67;
      case 4u:
        *(unsigned char *)(a1 + v9[796]) |= 1u;
        uint64_t v31 = *v3;
        unint64_t v32 = *(void *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v33 = *(void *)(*(void *)(a2 + *v10) + v32);
          *(void *)(a2 + v31) = v32 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v33 = 0;
        }
        uint64_t v55 = 8;
        goto LABEL_72;
      case 5u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 40;
LABEL_34:
        uint64_t v34 = *(void **)(a1 + v22);
        *(void *)(a1 + v22) = v21;

        goto LABEL_73;
      case 6u:
        *(unsigned char *)(a1 + v9[796]) |= 4u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v33 = *(void *)(*(void *)(a2 + *v10) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v33 = 0;
        }
        uint64_t v55 = 24;
LABEL_72:
        *(void *)(a1 + v55) = v33;
        goto LABEL_73;
      case 7u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + v9[796]) |= 0x10u;
        while (2)
        {
          uint64_t v40 = *v3;
          uint64_t v41 = *(void *)(a2 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v10) + v41);
            *(void *)(a2 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              BOOL v18 = v38++ >= 9;
              if (v18)
              {
                uint64_t v39 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
LABEL_62:
        *(unsigned char *)(a1 + 72) = v39 != 0;
        goto LABEL_73;
      case 8u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + v9[796]) |= 2u;
        while (2)
        {
          uint64_t v46 = *v3;
          uint64_t v47 = *(void *)(a2 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + *v10) + v47);
            *(void *)(a2 + v46) = v48;
            v26 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              BOOL v18 = v45++ >= 9;
              if (v18)
              {
                uint64_t v26 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v26 = 0;
        }
LABEL_66:
        uint64_t v54 = 16;
LABEL_67:
        *(void *)(a1 + v54) = v26;
        goto LABEL_73;
      case 9u:
        uint64_t v50 = v9;
        uint64_t v51 = v8;
        uint64_t v52 = v7;
        uint64_t v53 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 56), v53);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v53, a2))
        {
          PBReaderRecallMark();

          unint64_t v7 = v52;
          char v8 = v51;
          unsigned int v9 = v50;
LABEL_73:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_73;
    }
  }
}

uint64_t _HDMakeSleepStagesInfo@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  a2[2] = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

double HDStatisticsSleepStages::splitSampleAtTime@<D0>(double *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  HDRawQuantitySample::splitAtTime((uint64_t)a1, a2, a3, a4);
  double result = *a1;
  *(double *)a3 = *a1;
  *(double *)(a3 + 40) = result;
  return result;
}

void HDStatisticsSleepStages::splitSampleAtTime(__n128 *a1, __n128 *a2, int a3, __n128 a4)
{
  unint64_t v6 = a1->n128_u64[0];
  HDRawQuantitySample::splitAtTime(a1, a2, a3, a4);
  a1->n128_u64[0] = v6;
  a2->n128_u64[0] = v6;
}

double HDStatisticsSleepStages::addSample(HDStatisticsSleepStages *this, const HDRawQuantitySample *a2, int a3)
{
  if (a3) {
    ++*(void *)this;
  }
  double var1 = a2->var1;
  int v4 = (double *)((char *)this + 24 * (uint64_t)a2->var0);
  uint64_t v5 = (char *)(v4 + 2);
  double v6 = v4[3];
  uint64_t v7 = *((void *)v4 + 4);
  double var2 = a2->var2;
  uint64_t v9 = *((void *)this + 1);
  if (v9 < v7)
  {
    uint64_t v7 = v9 + 1;
    *((void *)this + 1) = v9 + 1;
  }
  double result = v6 + var2 - var1;
  *((double *)v5 + 1) = result;
  *((void *)v5 + 2) = v7;
  return result;
}

uint64_t HDStatisticsSleepStages::prevailingSleepStage(HDStatisticsSleepStages *this)
{
  uint64_t v1 = 0;
  double v2 = 0.0;
  uint64_t v3 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v5 = (char *)this + v1;
    double v6 = *(double *)((char *)this + v1 + 24);
    if (v6 > 2.22507386e-308 && v6 >= v2)
    {
      if (v6 <= v2)
      {
        if (*(void *)((char *)this + v1 + 32) < v3)
        {
          uint64_t v4 = *((void *)v5 + 2);
          double v2 = *(double *)((char *)this + v1 + 24);
          uint64_t v3 = *(void *)((char *)this + v1 + 32);
        }
      }
      else
      {
        uint64_t v4 = *((void *)v5 + 2);
        uint64_t v3 = *(void *)((char *)this + v1 + 32);
        double v2 = *(double *)((char *)this + v1 + 24);
      }
    }
    v1 += 24;
  }
  while (v1 != 144);
  return v4;
}

void HDStatisticsSleepStages::unarchive(HDStatisticsSleepStages *this, const statistics::Statistics *a2)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unarchiving sleep stage statistics is not currently supported.");
  __cxa_throw(exception, (struct type_info *)off_1E62F22C8, MEMORY[0x1E4FBA1E8]);
}

void sub_1BCEED648(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

void HDStatisticsSleepStages::archive(HDStatisticsSleepStages *this)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Archiving sleep stage statistics is not currently supported.");
  __cxa_throw(exception, (struct type_info *)off_1E62F22C8, MEMORY[0x1E4FBA1E8]);
}

void sub_1BCEED6D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL HDCodableWorkoutZonesReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = objc_alloc_init(HDCodableSample);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (HDCodableSampleReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    char v17 = *(HDCodableSample **)(a1 + 16);
    *(void *)(a1 + 16) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCEEF970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDCodableTinkerEndToEndCloudSyncRequestReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCEF0AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__116(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__116(uint64_t a1)
{
}

void sub_1BCEF1DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 184), 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__117(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__117(uint64_t a1)
{
}

uint64_t HDCloudSyncCodableStoreReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 29)
      {
        switch((int)v17)
        {
          case 1:
            uint64_t v18 = PBReaderReadString();
            uint64_t v19 = 32;
            goto LABEL_83;
          case 2:
            uint64_t v18 = PBReaderReadString();
            uint64_t v19 = 40;
            goto LABEL_83;
          case 3:
            char v21 = 0;
            unsigned int v22 = 0;
            uint64_t v23 = 0;
            *(unsigned char *)(a1 + 116) |= 1u;
            while (2)
            {
              uint64_t v24 = *v3;
              unint64_t v25 = *(void *)(a2 + v24);
              if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
                *(void *)(a2 + v24) = v25 + 1;
                v23 |= (unint64_t)(v26 & 0x7F) << v21;
                if (v26 < 0)
                {
                  v21 += 7;
                  BOOL v14 = v22++ >= 9;
                  if (v14)
                  {
                    uint64_t v23 = 0;
                    goto LABEL_89;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v23 = 0;
            }
LABEL_89:
            *(void *)(a1 + 8) = v23;
            goto LABEL_112;
          case 4:
            uint64_t v20 = objc_alloc_init(HDCodableSyncIdentity);
            uint64_t v27 = 96;
            goto LABEL_42;
          case 5:
            uint64_t v20 = objc_alloc_init(HDCodableSyncIdentity);
            uint64_t v27 = 48;
LABEL_42:
            objc_storeStrong((id *)(a1 + v27), v20);
            if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v20, a2)) {
              goto LABEL_44;
            }
            goto LABEL_114;
          case 6:
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            *(unsigned char *)(a1 + 116) |= 0x20u;
            while (2)
            {
              uint64_t v31 = *v3;
              unint64_t v32 = *(void *)(a2 + v31);
              if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
                *(void *)(a2 + v31) = v32 + 1;
                v30 |= (unint64_t)(v33 & 0x7F) << v28;
                if (v33 < 0)
                {
                  v28 += 7;
                  BOOL v14 = v29++ >= 9;
                  if (v14)
                  {
                    uint64_t v30 = 0;
                    goto LABEL_93;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v30 = 0;
            }
LABEL_93:
            BOOL v58 = v30 != 0;
            uint64_t v59 = 113;
            goto LABEL_98;
          case 10:
            uint64_t v18 = PBReaderReadData();
            uint64_t v19 = 80;
            goto LABEL_83;
          case 20:
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            *(unsigned char *)(a1 + 116) |= 0x10u;
            while (2)
            {
              uint64_t v37 = *v3;
              unint64_t v38 = *(void *)(a2 + v37);
              if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
                *(void *)(a2 + v37) = v38 + 1;
                v36 |= (unint64_t)(v39 & 0x7F) << v34;
                if (v39 < 0)
                {
                  v34 += 7;
                  BOOL v14 = v35++ >= 9;
                  if (v14)
                  {
                    uint64_t v36 = 0;
                    goto LABEL_97;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v36 = 0;
            }
LABEL_97:
            BOOL v58 = v36 != 0;
            uint64_t v59 = 112;
LABEL_98:
            *(unsigned char *)(a1 + v59) = v58;
            goto LABEL_112;
          case 21:
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            *(unsigned char *)(a1 + 116) |= 2u;
            break;
          default:
            goto LABEL_84;
        }
        while (1)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
          *(void *)(a2 + v43) = v44 + 1;
          v42 |= (unint64_t)(v45 & 0x7F) << v40;
          if ((v45 & 0x80) == 0) {
            goto LABEL_100;
          }
          v40 += 7;
          BOOL v14 = v41++ >= 9;
          if (v14)
          {
            LODWORD(v42) = 0;
            goto LABEL_102;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_100:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v42) = 0;
        }
LABEL_102:
        uint64_t v60 = 16;
LABEL_111:
        *(_DWORD *)(a1 + v60) = v42;
        goto LABEL_112;
      }
      if ((int)v17 <= 40)
      {
        if (v17 == 30)
        {
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v42 = 0;
          *(unsigned char *)(a1 + 116) |= 8u;
          while (1)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1 || v49 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
            *(void *)(a2 + v48) = v49 + 1;
            v42 |= (unint64_t)(v50 & 0x7F) << v46;
            if ((v50 & 0x80) == 0) {
              goto LABEL_104;
            }
            v46 += 7;
            BOOL v14 = v47++ >= 9;
            if (v14)
            {
              LODWORD(v42) = 0;
              goto LABEL_106;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_104:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v42) = 0;
          }
LABEL_106:
          uint64_t v60 = 88;
          goto LABEL_111;
        }
        if (v17 == 31)
        {
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v42 = 0;
          *(unsigned char *)(a1 + 116) |= 4u;
          while (1)
          {
            uint64_t v53 = *v3;
            unint64_t v54 = *(void *)(a2 + v53);
            if (v54 == -1 || v54 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v54 + 1;
            v42 |= (unint64_t)(v55 & 0x7F) << v51;
            if ((v55 & 0x80) == 0) {
              goto LABEL_108;
            }
            v51 += 7;
            BOOL v14 = v52++ >= 9;
            if (v14)
            {
              LODWORD(v42) = 0;
              goto LABEL_110;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_108:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v42) = 0;
          }
LABEL_110:
          uint64_t v60 = 64;
          goto LABEL_111;
        }
        if (v17 != 40) {
          goto LABEL_84;
        }
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_83;
      }
      if (v17 == 41) {
        break;
      }
      if (v17 == 42)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_83;
      }
      if (v17 != 50)
      {
LABEL_84:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_112;
      }
      uint64_t v20 = objc_alloc_init(HDCloudSyncCodableShardPredicate);
      objc_storeStrong((id *)(a1 + 72), v20);
      if (!PBReaderPlaceMark() || (HDCloudSyncCodableShardPredicateReadFrom((uint64_t)v20, a2) & 1) == 0)
      {
LABEL_114:

        return 0;
      }
LABEL_44:
      PBReaderRecallMark();

LABEL_112:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 56;
LABEL_83:
    v56 = *(void **)(a1 + v19);
    *(void *)(a1 + v19) = v18;

    goto LABEL_112;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableNotificationInstructionCriteriaReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        if (v18 == 2)
        {
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 24;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 16;
        }
        char v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__118(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__118(uint64_t a1)
{
}

uint64_t HDCodableActivityStatisticsQuantityInfoReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 2u;
              uint64_t v18 = *v3;
              unint64_t v19 = *(void *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
                *(void *)(a2 + v18) = v19 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v28 = 16;
              goto LABEL_37;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 1u;
              uint64_t v26 = *v3;
              unint64_t v27 = *(void *)(a2 + v26);
              if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v27);
                *(void *)(a2 + v26) = v27 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v28 = 8;
              goto LABEL_37;
            case 3u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = *(void **)(a1 + 32);
              *(void *)(a1 + 32) = v21;

              goto LABEL_38;
            case 4u:
              *(unsigned char *)(a1 + 40) |= 4u;
              uint64_t v23 = *v3;
              unint64_t v24 = *(void *)(a2 + v23);
              if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v24);
                *(void *)(a2 + v23) = v24 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v28 = 24;
LABEL_37:
              *(void *)(a1 + v28) = v20;
              goto LABEL_38;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_38:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL HDCodableSyncIdentityReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 8;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 16;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 24;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCEF8F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HDFitnessFriendAchievementEntityPredicateForFriendUUID()
{
  v0 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v1 = _HDSQLiteValueForUUID();
  double v2 = [v0 predicateWithProperty:@"friend_uuid" equalToValue:v1];

  return v2;
}

void sub_1BCEF9324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9508(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BCEF96C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF99E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9CC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9DEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__119(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__119(uint64_t a1)
{
}

void sub_1BCEF9F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1BCEF9FC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFA10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFA1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFA298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFA314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFA55C(_Unwind_Exception *a1)
{
  char v8 = v4;
  unsigned int v9 = v6;

  _Unwind_Resume(a1);
}

void sub_1BCEFA650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFA720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFA794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFA8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFAA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFAB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFAC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFAE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFB040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFB268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFB480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFB6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFB8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFBAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1BCEFBD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFBE4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFC030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCEFE250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1BCF0028C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__120(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__120(uint64_t a1)
{
}

void sub_1BCF00654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__121(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__121(uint64_t a1)
{
}

id _HDPredicateForOwnerAndType(void *a1, void *a2)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v4 = NSNumber;
  id v5 = a2;
  double v6 = objc_msgSend(v4, "numberWithLongLong:", objc_msgSend(a1, "persistentID"));
  uint64_t v7 = [v3 predicateWithProperty:@"owner_id" equalToValue:v6];

  char v8 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v9 = NSNumber;
  uint64_t v10 = [v5 code];

  uint64_t v11 = [v9 numberWithInteger:v10];
  uint64_t v12 = [v8 predicateWithProperty:@"quantity_type" equalToValue:v11];

  uint64_t v13 = (void *)MEMORY[0x1E4F65D08];
  v17[0] = v7;
  v17[1] = v12;
  uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:2];
  uint64_t v15 = [v13 predicateMatchingAllPredicates:v14];

  return v15;
}

void sub_1BCF00AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF022CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__122(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__122(uint64_t a1)
{
}

void sub_1BCF02BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

__CFString *NSStringFromHDQuantitySeriesBuilderTaskServerState(unint64_t a1)
{
  if (a1 >= 0xA)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown state (%ld)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E6303E80[a1];
  }

  return v1;
}

void sub_1BCF04DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__123(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__123(uint64_t a1)
{
}

__n128 HDQuantitySampleAttenuationEngineSplit@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = *(void *)(a1 + 8);
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a3 + 8) = result;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 24) = v4;
  return result;
}

BOOL HDQuantitySampleAttenuationEngineHasNonZeroDuration(double *a1)
{
  return a1[1] - *a1 > 0.000001;
}

uint64_t *HDStatisticsDiscrete::splitSampleAtTime@<X0>(uint64_t *result@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v4 = *((double *)result + 1);
  double v5 = *((double *)result + 2);
  uint64_t v6 = result[3];
  char v7 = *((unsigned char *)result + 32);
  uint64_t v8 = 0;
  char v9 = *((unsigned char *)result + 33);
  if (v7)
  {
    BOOL v10 = v4 <= a4;
    if (a2) {
      BOOL v10 = v4 < a4;
    }
    if (v10)
    {
      char v11 = 0;
      uint64_t v12 = 0;
      if (v5 > a4) {
        double v5 = a4;
      }
      char v13 = *((unsigned char *)result + 32);
      double v14 = 0.0;
      a4 = 0.0;
      char v7 = 0;
    }
    else
    {
      char v13 = 0;
      if (v4 >= a4) {
        a4 = *((double *)result + 1);
      }
      char v11 = *((unsigned char *)result + 33);
      uint64_t v12 = result[3];
      uint64_t v8 = result[2];
      double v14 = *(double *)result;
    }
  }
  else
  {
    char v13 = 0;
    char v11 = 0;
    uint64_t v12 = 0;
    double v14 = 0.0;
    a4 = 0.0;
  }
  *(void *)a3 = *result;
  *(double *)(a3 + 8) = v4;
  *(double *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = v6;
  *(unsigned char *)(a3 + 32) = v13;
  *(unsigned char *)(a3 + 33) = v9;
  *(_DWORD *)(a3 + 34) = *(_DWORD *)((char *)result + 34);
  *(_WORD *)(a3 + 38) = *((_WORD *)result + 19);
  *(double *)(a3 + 40) = v14;
  *(double *)(a3 + 48) = a4;
  *(void *)(a3 + 56) = v8;
  *(void *)(a3 + 64) = v12;
  *(unsigned char *)(a3 + 72) = v7;
  *(unsigned char *)(a3 + 73) = v11;
  return result;
}

double *HDStatisticsDiscrete::splitSampleAtTime(double *result, uint64_t a2, int a3, double a4)
{
  if (*((unsigned char *)result + 32))
  {
    double v4 = result[1];
    BOOL v5 = v4 <= a4;
    if (a3) {
      BOOL v5 = v4 < a4;
    }
    if (v5)
    {
      *(unsigned char *)(a2 + 32) = 0;
      if (result[2] <= a4) {
        a4 = result[2];
      }
      result[2] = a4;
    }
    else
    {
      long long v6 = *(_OWORD *)result;
      long long v7 = *((_OWORD *)result + 1);
      *(_WORD *)(a2 + 32) = *((_WORD *)result + 16);
      *(_OWORD *)a2 = v6;
      *(_OWORD *)(a2 + 16) = v7;
      if (result[1] >= a4) {
        a4 = result[1];
      }
      *(double *)(a2 + 8) = a4;
      *((unsigned char *)result + 32) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t HDStatisticsDiscrete::applyMaskToSample(uint64_t result, double **a2)
{
  double v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    double v4 = *(double *)(result + 8);
    while (v4 >= *v2)
    {
      if (v4 < v2[1])
      {
        *(unsigned char *)(result + 32) = 0;
        return result;
      }
      v2 += 2;
      if (v2 == v3) {
        return result;
      }
    }
  }
  return result;
}

uint64_t HDStatisticsDiscrete::addSample(uint64_t this, const HDRawQuantitySample *a2)
{
  uint64_t v2 = *(void *)(this + 24);
  if (v2)
  {
    double var0 = *(double *)(this + 16);
    if (var0 >= a2->var0) {
      double var0 = a2->var0;
    }
    *(double *)(this + 16) = var0;
    double v4 = *(double *)(this + 8);
    if (a2->var0 >= v4) {
      double v4 = a2->var0;
    }
    uint64_t v5 = v2 + 1;
    *(double *)this = *(double *)this + (a2->var0 - *(double *)this) / (double)v5;
    *(double *)(this + 8) = v4;
  }
  else
  {
    double v6 = a2->var0;
    *(double *)(this + 8) = a2->var0;
    *(double *)(this + 16) = v6;
    *(double *)this = v6;
    uint64_t v5 = 1;
  }
  *(void *)(this + 24) = v5;
  return this;
}

__n128 HDStatisticsDiscrete::updateMostRecentSample(__n128 *this, const HDRawQuantitySample *a2)
{
  if (!this[4].n128_u8[0] || (result.n128_u64[0] = this[2].n128_u64[1], result.n128_f64[0] <= a2->var1))
  {
    __n128 result = *(__n128 *)&a2->var0;
    __n128 v3 = *(__n128 *)&a2->var2;
    this[4].n128_u16[0] = *(_WORD *)&a2->var4;
    this[2] = result;
    this[3] = v3;
  }
  return result;
}

double HDStatisticsDiscrete::unarchive@<D0>(HDStatisticsDiscrete *this@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 24) = *((void *)this + 3);
  *(int8x16_t *)a2 = vextq_s8(*(int8x16_t *)((char *)this + 88), *(int8x16_t *)((char *)this + 88), 8uLL);
  double result = *((double *)this + 13);
  *(double *)(a2 + 16) = result;
  uint64_t v4 = *((void *)this + 14);
  if (v4)
  {
    double result = *(double *)(v4 + 8);
    uint64_t v5 = *(void *)(v4 + 16);
    *(int8x16_t *)(a2 + 32) = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    *(double *)(a2 + 48) = result;
    *(void *)(a2 + 56) = v5;
    *(unsigned char *)(a2 + 64) = 1;
  }
  return result;
}

void HDStatisticsDiscrete::archive(int8x16_t *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a2 + 112);
  *(void *)(a2 + 160) = 0;
  *(void *)a2 = &unk_1F171B978;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v5 = this[1].i64[1];
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v5;
  *(int8x16_t *)(a2 + 88) = vextq_s8(*this, *this, 8uLL);
  uint64_t v6 = this[1].i64[0];
  *(_DWORD *)(a2 + 204) = 225;
  *(void *)(a2 + 104) = v6;
  statistics::Statistics::makeMostRecentDatum(a2);
  v7[0] = &unk_1F17206F8;
  int v11 = 127;
  int8x16_t v8 = vextq_s8(this[2], this[2], 8uLL);
  v7[1] = this[3].i64[0];
  void v7[2] = this[3].i64[1];
  __int16 v9 = 0;
  char v10 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v7);
  PB::Base::~Base((PB::Base *)v7);
}

void sub_1BCF0A488(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

uint64_t HDCodableLocationSeriesReadFrom(uint64_t a1, uint64_t a2)
{
  __n128 v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(HDCodableSample);
        objc_storeStrong((id *)(a1 + 24), v17);
        if PBReaderPlaceMark() && (HDCodableSampleReadFrom((uint64_t)v17, a2)) {
          goto LABEL_41;
        }
        goto LABEL_53;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_45;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_45:
        BOOL v33 = v20 != 0;
        uint64_t v34 = 33;
        goto LABEL_50;
      case 3u:
        uint64_t v24 = PBReaderReadData();
        unint64_t v25 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v24;

        goto LABEL_51;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_49:
        BOOL v33 = v28 != 0;
        uint64_t v34 = 32;
LABEL_50:
        *(unsigned char *)(a1 + v34) = v33;
        goto LABEL_51;
      case 0xAu:
        unint64_t v17 = objc_alloc_init(HDCodableLocationDatum);
        [(id)a1 addLocationData:v17];
        if PBReaderPlaceMark() && (HDCodableLocationDatumReadFrom((uint64_t)v17, a2))
        {
LABEL_41:
          PBReaderRecallMark();

LABEL_51:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_53:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_51;
    }
  }
}

void sub_1BCF0B8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__124(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__124(uint64_t a1)
{
}

uint64_t HDCodableClinicalDeletedAccountReadFrom(uint64_t a1, uint64_t a2)
{
  __n128 v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  long long v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadData();
        unsigned int v19 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v18;

        goto LABEL_44;
      case 2u:
        *(unsigned char *)(a1 + 48) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        *(void *)(a1 + 8) = v23;
        goto LABEL_44;
      case 3u:
        uint64_t v24 = objc_alloc_init(HDCodableMessageVersion);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || !HDCodableMessageVersionReadFrom((uint64_t)v24, a2)) {
          goto LABEL_46;
        }
        goto LABEL_37;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 48) |= 2u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              BOOL v15 = v26++ >= 9;
              if (v15)
              {
                uint64_t v27 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_41:
        *(void *)(a1 + 16) = v27;
        goto LABEL_44;
      case 5u:
        uint64_t v24 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 40), v24);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v24, a2))
        {
LABEL_37:
          PBReaderRecallMark();

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_46:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

uint64_t _HDAddDeviceContextTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeUncachedSQL:@"CREATE TABLE IF NOT EXISTS device_context (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, sync_identity_id INTEGER NOT NULL UNIQUE REFERENCES sync_identities(ROWID) ON DELETE CASCADE, device_type INTEGER NOT NULL, currentOS_name TEXT NOT NULL, currentOS_version TEXT NOT NULL, product_type_name TEXT NOT NULL, date_modified REAL NOT NULL)", a4 error] ^ 1;

  return v6;
}

uint64_t _HDAddUnprotectedDeviceKeyValueStorageTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeUncachedSQL:@"CREATE TABLE IF NOT EXISTS kv_device_storage (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, sync_identity_id INTEGER NOT NULL, device_record_id INTEGER NOT NULL REFERENCES device_context(ROWID) ON DELETE CASCADE, domain TEXT NOT NULL, key TEXT NOT NULL, value BLOB NOT NULL, date_modified REAL NOT NULL)", a4 error] ^ 1;

  return v6;
}

uint64_t _HDAddIsMirroringToWorkoutSessionTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA260 error:a4] ^ 1;

  return v6;
}

uint64_t _HDMigrateCycleTrackingOvulationConfirmationNotificationStateKeyValueDomainCategory(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = _HDKeyValueDomainCategoryMigrationStatement(@"key_value", @"com.apple.private.health.menstrual-cycles.ovulation-confirmation-notification-state", 0, 1, 0);
  long long v7 = [v5 unprotectedDatabase];

  uint64_t v8 = [v7 executeUncachedSQL:v6 error:a4] ^ 1;
  return v8;
}

uint64_t _HDMigrateCycleTrackingUnconfirmedDeviationNotificationStateKeyValueDomainCategory(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = _HDKeyValueDomainCategoryMigrationStatement(@"key_value", @"com.apple.private.health.menstrual-cycles.unconfirmed-deviation-notification-state", 0, 1, 0);
  long long v7 = [v5 unprotectedDatabase];

  uint64_t v8 = [v7 executeUncachedSQL:v6 error:a4] ^ 1;
  return v8;
}

uint64_t _HDMigrateCycleTrackingUpdatedFertileWindowNotificationFireDateKeyValueDomainCategory(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = _HDKeyValueDomainCategoryMigrationStatement(@"key_value", @"com.apple.private.health.menstrual-cycles", 0, 1, &unk_1F17EA338);
  long long v7 = [v5 unprotectedDatabase];

  uint64_t v8 = [v7 executeUncachedSQL:v6 error:a4] ^ 1;
  return v8;
}

uint64_t _HDAddChildSyncIdentityTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA290 error:a4] ^ 1;

  return v6;
}

uint64_t _HDResetAnchorsForAssociationsForNanoSync(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  long long v7 = [a1 behavior];
  char v8 = [v7 isAppleWatch];

  if (v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v10 = [v6 unprotectedDatabase];
    uint64_t v9 = [v10 executeSQLStatements:&unk_1F17EA2A8 error:a4] ^ 1;
  }
  return v9;
}

uint64_t _HDAddNotificationInstructionsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 unprotectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA278 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddTableForCloudSyncRequests(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA2C0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddFirstActivityConfigToWorkoutSessionsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA2D8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDResetLocalDeviceSource(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  char v8 = [v6 behavior];
  if ([v8 isiPad])
  {
  }
  else
  {
    uint64_t v9 = [v6 behavior];
    int v10 = [v9 isRealityDevice];

    if (!v10)
    {
      uint64_t v12 = 0;
      goto LABEL_6;
    }
  }
  uint64_t v11 = [v7 unprotectedDatabase];
  uint64_t v12 = [v11 executeSQLStatements:&unk_1F17EA2F0 error:a4] ^ 1;

LABEL_6:
  return v12;
}

uint64_t _HDAddAdditionalColumnsToCloudSyncRequests(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 unprotectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA308 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddLinkCollectionDataColumnToUDCTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  if ([v5 executeUncachedSQL:@"ALTER TABLE user_domain_concepts ADD COLUMN link_collection_data BLOB" error:a4])
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    void v8[2] = ___HDAddLinkCollectionDataColumnToUDCTable_block_invoke;
    v8[3] = &unk_1E62F3D38;
    id v9 = v5;
    uint64_t v6 = [v9 executeUncachedSQL:@"SELECT udc_id FROM user_domain_concepts WHERE udc_id IN (SELECT DISTINCT udc_id FROM user_domain_concept_links)" error:a4 bindingHandler:0 enumerationHandler:v8] ^ 1;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

uint64_t _HDAddProtectedDeviceKeyValueStorageTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeUncachedSQL:@"CREATE TABLE IF NOT EXISTS secure_kv_device_storage (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, sync_identity_id INTEGER NOT NULL, domain TEXT NOT NULL, key TEXT NOT NULL, value BLOB NOT NULL, date_modified REAL NOT NULL)", a4 error] ^ 1;

  return v6;
}

uint64_t _HDAddWorkoutZonesSamplesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeUncachedSQL:@"CREATE TABLE IF NOT EXISTS workout_zones_samples (data_id INTEGER PRIMARY KEY AUTOINCREMENT, zones BLOB NOT NULL)", a4 error] ^ 1;

  return v6;
}

uint64_t _HDAddWorkoutZonesAssociationsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = objc_msgSend(v5, "executeUncachedSQL:error:", @"CREATE TABLE IF NOT EXISTS workout_zones_associations (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, workout_id INTEGER NOT NULL REFERENCES workouts(data_id), zones_sample_id INTEGER NOT NULL REFERENCES workout_zones_samples(data_id), sync_provenance INTEGER, sync_identity INTEGER NOT NULL, UNIQUE(workout_id, zones_sample_id));",
                       a4) ^ 1;

  return v6;
}

uint64_t _HDMigrateCycleTrackingKeyValueDomainCategory(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = _HDKeyValueDomainCategoryMigrationStatement(@"key_value_secure", @"com.apple.private.health.menstrual-cycles", 100, 105, &unk_1F17EA320);
  id v7 = [v5 protectedDatabase];

  uint64_t v8 = [v7 executeUncachedSQL:v6 error:a4] ^ 1;
  return v8;
}

uint64_t _HDAddHashedMedicationIdentifierToMedicationDoseEventTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  id v7 = [v5 protectedDatabase];
  int v8 = [v7 executeSQLStatements:&unk_1F17EA350 error:a4];

  if (v8)
  {
    id v19 = 0;
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3221225472;
    int v16 = ___HDAddHashedMedicationIdentifierToMedicationDoseEventTable_block_invoke;
    unint64_t v17 = &unk_1E62F3D38;
    id v18 = v6;
    int v9 = [v18 executeUncachedSQL:@"SELECT DISTINCT medication_identifier FROM medication_dose_event_samples_new" error:&v19 bindingHandler:0 enumerationHandler:&v14];
    id v10 = v19;
    if (v9)
    {
      uint64_t v11 = objc_msgSend(v5, "protectedDatabase", v14, v15, v16, v17);
      uint64_t v12 = [v11 executeSQLStatements:&unk_1F17EA368 error:a4] ^ 1;
    }
    else
    {
      uint64_t v12 = 1;
    }
  }
  else
  {
    uint64_t v12 = 1;
  }

  return v12;
}

uint64_t _HDAddStateOfMindSamplesTables(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA398 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddScoredAssessmentSamplesTables(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA3B0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDRemoveOnDeleteCascadeFromAssociationsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA380 error:a4] ^ 1;

  return v6;
}

uint64_t _HDMigrateClinicalAccountSyncAnchors(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v43 = 0;
  unint64_t v44 = &v43;
  uint64_t v45 = 0x2020000000;
  uint64_t v46 = 0;
  int v8 = [v7 protectedDatabase];
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = 3221225472;
  v42[2] = ___HDMigrateClinicalAccountSyncAnchors_block_invoke;
  v42[3] = &unk_1E62F3640;
  v42[4] = &v43;
  char v9 = [v8 executeUncachedSQL:@"SELECT MAX(sync_anchor) FROM clinical_accounts" error:a4 bindingHandler:0 enumerationHandler:v42];

  if (v9)
  {
    v44[3] += 10000;
    v41[0] = 0;
    v41[1] = v41;
    v41[2] = 0x2020000000;
    v41[3] = 0;
    id v10 = [v7 protectedDatabase];
    v40[0] = MEMORY[0x1E4F143A8];
    v40[1] = 3221225472;
    v40[2] = ___HDMigrateClinicalAccountSyncAnchors_block_invoke_2;
    v40[3] = &unk_1E62F3640;
    v40[4] = v41;
    char v11 = [v10 executeUncachedSQL:@"SELECT MAX(ROWID) FROM clinical_credentials" error:a4 bindingHandler:0 enumerationHandler:v40];

    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v12 = [v7 protectedDatabase];
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 3221225472;
    v39[2] = ___HDMigrateClinicalAccountSyncAnchors_block_invoke_3;
    v39[3] = &unk_1E62F3D88;
    v39[4] = v41;
    char v13 = [v12 executeUncachedSQL:@"UPDATE clinical_credentials SET ROWID = ROWID + ?" error:a4 bindingHandler:v39 enumerationHandler:0];

    if ((v13 & 1) == 0) {
      goto LABEL_12;
    }
    uint64_t v14 = [v7 protectedDatabase];
    v38[0] = MEMORY[0x1E4F143A8];
    v38[1] = 3221225472;
    void v38[2] = ___HDMigrateClinicalAccountSyncAnchors_block_invoke_4;
    v38[3] = &unk_1E62F3D88;
    v38[4] = v41;
    char v15 = [v14 executeUncachedSQL:@"UPDATE clinical_accounts SET credential_id = credential_id + ? WHERE credential_id IS NOT NULL" error:a4 bindingHandler:v38 enumerationHandler:0];

    if ((v15 & 1) == 0) {
      goto LABEL_12;
    }
    int v16 = [v7 protectedDatabase];
    v37[0] = MEMORY[0x1E4F143A8];
    v37[1] = 3221225472;
    void v37[2] = ___HDMigrateClinicalAccountSyncAnchors_block_invoke_5;
    v37[3] = &unk_1E62F3D88;
    v37[4] = &v43;
    char v17 = [v16 executeUncachedSQL:@"UPDATE clinical_accounts SET sync_anchor = sync_anchor + ?" error:a4 bindingHandler:v37 enumerationHandler:0];

    if (v17)
    {
      uint64_t v33 = 0;
      uint64_t v34 = &v33;
      uint64_t v35 = 0x2020000000;
      uint64_t v36 = 0;
      id v18 = [v7 protectedDatabase];
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 3221225472;
      v32[2] = ___HDMigrateClinicalAccountSyncAnchors_block_invoke_6;
      v32[3] = &unk_1E62F3640;
      v32[4] = &v33;
      char v19 = [v18 executeUncachedSQL:@"SELECT MAX(sync_anchor) FROM clinical_accounts" error:a4 bindingHandler:0 enumerationHandler:v32];

      if ((v19 & 1) == 0 || (uint64_t v20 = [v6 fetchLegacySyncIdentity:v7 error:a4], v20 == -1))
      {
        uint64_t v26 = 1;
      }
      else
      {
        unint64_t v21 = v34[3];
        if (v21 <= 0x2710) {
          unint64_t v21 = 10000;
        }
        v34[3] = v21 + 1;
        unint64_t v22 = [MEMORY[0x1E4F1C9C8] date];
        uint64_t v23 = [v7 protectedDatabase];
        v28[0] = MEMORY[0x1E4F143A8];
        v28[1] = 3221225472;
        v28[2] = ___HDMigrateClinicalAccountSyncAnchors_block_invoke_7;
        v28[3] = &unk_1E63040B8;
        unint64_t v30 = &v33;
        id v24 = v22;
        id v29 = v24;
        uint64_t v31 = v20;
        int v25 = [v23 executeUncachedSQL:@"INSERT INTO key_value_secure (category, domain, key, value, provenance, mod_date, sync_identity) values (100, 'com.apple.health.records.syncanchors', 'ClinicalAccountNextSyncAnchor', ?, 0, ?, ?)", a4, v28, 0 error bindingHandler enumerationHandler];

        uint64_t v26 = v25 ^ 1u;
      }
      _Block_object_dispose(&v33, 8);
    }
    else
    {
LABEL_12:
      uint64_t v26 = 1;
    }
    _Block_object_dispose(v41, 8);
  }
  else
  {
    uint64_t v26 = 1;
  }
  _Block_object_dispose(&v43, 8);

  return v26;
}

void sub_1BCF0FB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 184), 8);
  _Block_object_dispose((const void *)(v14 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDMigrateClinicalGatewaySyncAnchors(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v33 = 0;
  uint64_t v34 = &v33;
  uint64_t v35 = 0x2020000000;
  uint64_t v36 = 0;
  int v8 = [v7 protectedDatabase];
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  v32[2] = ___HDMigrateClinicalGatewaySyncAnchors_block_invoke;
  v32[3] = &unk_1E62F3640;
  v32[4] = &v33;
  char v9 = [v8 executeUncachedSQL:@"SELECT MAX(sync_anchor) FROM clinical_gateways" error:a4 bindingHandler:0 enumerationHandler:v32];

  if ((v9 & 1) == 0) {
    goto LABEL_8;
  }
  v34[3] += 10000;
  id v10 = [v7 protectedDatabase];
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = ___HDMigrateClinicalGatewaySyncAnchors_block_invoke_2;
  v31[3] = &unk_1E62F3D88;
  v31[4] = &v33;
  char v11 = [v10 executeUncachedSQL:@"UPDATE clinical_gateways SET sync_anchor = sync_anchor + ?" error:a4 bindingHandler:v31 enumerationHandler:0];

  if (v11)
  {
    uint64_t v27 = 0;
    uint64_t v28 = &v27;
    uint64_t v29 = 0x2020000000;
    uint64_t v30 = 0;
    uint64_t v12 = [v7 protectedDatabase];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = ___HDMigrateClinicalGatewaySyncAnchors_block_invoke_3;
    v26[3] = &unk_1E62F3640;
    void v26[4] = &v27;
    char v13 = [v12 executeUncachedSQL:@"SELECT MAX(sync_anchor) FROM clinical_gateways" error:a4 bindingHandler:0 enumerationHandler:v26];

    if ((v13 & 1) == 0 || (uint64_t v14 = [v6 fetchLegacySyncIdentity:v7 error:a4], v14 == -1))
    {
      uint64_t v20 = 1;
    }
    else
    {
      unint64_t v15 = v28[3];
      if (v15 <= 0x2710) {
        unint64_t v15 = 10000;
      }
      v28[3] = v15 + 1;
      int v16 = [MEMORY[0x1E4F1C9C8] date];
      char v17 = [v7 protectedDatabase];
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 3221225472;
      void v22[2] = ___HDMigrateClinicalGatewaySyncAnchors_block_invoke_4;
      v22[3] = &unk_1E63040B8;
      id v24 = &v27;
      id v18 = v16;
      id v23 = v18;
      uint64_t v25 = v14;
      int v19 = [v17 executeUncachedSQL:@"INSERT INTO key_value_secure (category, domain, key, value, provenance, mod_date, sync_identity) values (100, 'com.apple.health.records.syncanchors', 'ClinicalGatewayNextSyncAnchor', ?, 0, ?, ?)", a4, v22, 0 error bindingHandler enumerationHandler];

      uint64_t v20 = v19 ^ 1u;
    }
    _Block_object_dispose(&v27, 8);
  }
  else
  {
LABEL_8:
    uint64_t v20 = 1;
  }
  _Block_object_dispose(&v33, 8);

  return v20;
}

void sub_1BCF0FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDMigrateOriginalResources(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2020000000;
  v31[3] = 0;
  int v8 = [v7 protectedDatabase];
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = ___HDMigrateOriginalResources_block_invoke;
  void v30[3] = &unk_1E62F3640;
  v30[4] = v31;
  char v9 = [v8 executeUncachedSQL:@"SELECT MAX(ROWID) FROM original_fhir_resources" error:a4 bindingHandler:0 enumerationHandler:v30];

  if ((v9 & 1) == 0) {
    goto LABEL_8;
  }
  id v10 = [v7 protectedDatabase];
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___HDMigrateOriginalResources_block_invoke_2;
  v29[3] = &unk_1E62F3D88;
  v29[4] = v31;
  char v11 = [v10 executeUncachedSQL:@"UPDATE original_fhir_resources SET ROWID = ROWID + ?" error:a4 bindingHandler:v29 enumerationHandler:0];

  if ((v11 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v12 = [v7 protectedDatabase];
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = ___HDMigrateOriginalResources_block_invoke_3;
  v28[3] = &unk_1E62F3D88;
  void v28[4] = v31;
  char v13 = [v12 executeUncachedSQL:@"UPDATE clinical_record_samples SET original_fhir_resource_ROWID = original_fhir_resource_ROWID + ? WHERE original_fhir_resource_ROWID IS NOT NULL" error:a4 bindingHandler:v28 enumerationHandler:0];

  if ((v13 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v14 = [v7 protectedDatabase];
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 3221225472;
  v27[2] = ___HDMigrateOriginalResources_block_invoke_4;
  v27[3] = &unk_1E62F3D88;
  v27[4] = v31;
  char v15 = [v14 executeUncachedSQL:@"UPDATE medical_records SET original_fhir_resource_ROWID = original_fhir_resource_ROWID + ? WHERE original_fhir_resource_ROWID IS NOT NULL" error:a4 bindingHandler:v27 enumerationHandler:0];

  if ((v15 & 1) == 0) {
    goto LABEL_8;
  }
  int v16 = [v7 protectedDatabase];
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = ___HDMigrateOriginalResources_block_invoke_5;
  v26[3] = &unk_1E62F3D88;
  void v26[4] = v31;
  char v17 = [v16 executeUncachedSQL:@"UPDATE original_fhir_resources_last_seen SET resource_id = resource_id + ?" error:a4 bindingHandler:v26 enumerationHandler:0];

  if ((v17 & 1) == 0) {
    goto LABEL_8;
  }
  id v18 = [v7 protectedDatabase];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  uint64_t v25[2] = ___HDMigrateOriginalResources_block_invoke_6;
  v25[3] = &unk_1E62F3D88;
  v25[4] = v31;
  char v19 = [v18 executeUncachedSQL:@"UPDATE clinical_accounts SET last_extracted_rowid = last_extracted_rowid + ? WHERE last_extracted_rowid IS NOT NULL AND last_extracted_rowid > 0" error:a4 bindingHandler:v25 enumerationHandler:0];

  if (v19)
  {
    uint64_t v20 = [v7 protectedDatabase];
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = ___HDMigrateOriginalResources_block_invoke_7;
    v24[3] = &unk_1E62F3D88;
    v24[4] = v31;
    int v21 = [v20 executeUncachedSQL:@"UPDATE clinical_accounts SET last_submitted_rowid = last_submitted_rowid + ? WHERE last_submitted_rowid IS NOT NULL AND last_submitted_rowid > 0" error:a4 bindingHandler:v24 enumerationHandler:0];

    uint64_t v22 = v21 ^ 1u;
  }
  else
  {
LABEL_8:
    uint64_t v22 = 1;
  }
  _Block_object_dispose(v31, 8);

  return v22;
}

void sub_1BCF1027C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDMigrateOriginalSignedClinicalDataRecords(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  v22[0] = 0;
  v22[1] = v22;
  void v22[2] = 0x2020000000;
  v22[3] = 0;
  int v8 = [v7 protectedDatabase];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  void v21[2] = ___HDMigrateOriginalSignedClinicalDataRecords_block_invoke;
  v21[3] = &unk_1E62F3640;
  v21[4] = v22;
  char v9 = [v8 executeUncachedSQL:@"SELECT MAX(ROWID) FROM original_signed_clinical_data_records" error:a4 bindingHandler:0 enumerationHandler:v21];

  if ((v9 & 1) == 0) {
    goto LABEL_5;
  }
  id v10 = [v7 protectedDatabase];
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 3221225472;
  v20[2] = ___HDMigrateOriginalSignedClinicalDataRecords_block_invoke_2;
  v20[3] = &unk_1E62F3D88;
  v20[4] = v22;
  char v11 = [v10 executeUncachedSQL:@"UPDATE original_signed_clinical_data_records SET ROWID = ROWID + ?" error:a4 bindingHandler:v20 enumerationHandler:0];

  if ((v11 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v12 = [v7 protectedDatabase];
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  v19[2] = ___HDMigrateOriginalSignedClinicalDataRecords_block_invoke_3;
  v19[3] = &unk_1E62F3D88;
  v19[4] = v22;
  char v13 = [v12 executeUncachedSQL:@"UPDATE clinical_record_samples SET original_signed_clinical_data_rowid = original_signed_clinical_data_rowid + ? WHERE original_signed_clinical_data_rowid IS NOT NULL" error:a4 bindingHandler:v19 enumerationHandler:0];

  if (v13)
  {
    uint64_t v14 = [v7 protectedDatabase];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    v18[2] = ___HDMigrateOriginalSignedClinicalDataRecords_block_invoke_4;
    v18[3] = &unk_1E62F3D88;
    v18[4] = v22;
    int v15 = [v14 executeUncachedSQL:@"UPDATE medical_records SET original_signed_clinical_data_rowid = original_signed_clinical_data_rowid + ? WHERE original_signed_clinical_data_rowid IS NOT NULL" error:a4 bindingHandler:v18 enumerationHandler:0];

    uint64_t v16 = v15 ^ 1u;
  }
  else
  {
LABEL_5:
    uint64_t v16 = 1;
  }
  _Block_object_dispose(v22, 8);

  return v16;
}

void sub_1BCF10510(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id _HDKeyValueDomainCategoryMigrationStatement(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a1;
  char v11 = objc_msgSend(a5, "hk_map:", &__block_literal_global_406_0);
  uint64_t v12 = [v11 componentsJoinedByString:@", "];

  char v13 = [NSString stringWithFormat:@"INSERT OR IGNORE INTO %@ (value, key, domain, category, provenance, mod_date, sync_identity)", v10];
  uint64_t v14 = [NSString stringWithFormat:@"SELECT value, key, domain, %ld, provenance, mod_date, sync_identity FROM %@", a4, v10];

  int v15 = [NSString stringWithFormat:@"WHERE domain = '%@' AND category = %ld", v9, a3];

  if (v12)
  {
    uint64_t v16 = [NSString stringWithFormat:@" AND key in (%@)", v12];
  }
  else
  {
    uint64_t v16 = &stru_1F1728D60;
  }
  char v17 = [NSString stringWithFormat:@"%@ %@ %@%@", v13, v14, v15, v16];

  return v17;
}

void sub_1BCF11168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF112E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF113A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF11480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1171C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1BCF11B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_1BCF11CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF11DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF11EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF11FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCF124C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCF125D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF12738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF127F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF134E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);

  _Unwind_Resume(a1);
}

void sub_1BCF13884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF13B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__125(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__125(uint64_t a1)
{
}

void sub_1BCF13E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1BCF13EE4()
{
}

void sub_1BCF13EEC()
{
}

void sub_1BCF13EF4()
{
}

void sub_1BCF13EFC()
{
}

void sub_1BCF13FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1BCF144CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_1BCF146EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF148A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCF14A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCF14E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);

  _Block_object_dispose((const void *)(v41 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF150AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1540C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF15550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1562C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF156E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF159BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1BCF15B74(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BCF15C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BCF167DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF16938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF16B44(_Unwind_Exception *a1)
{
  __n128 v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BCF16E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF16F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF17568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1BCF17824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF17910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF17D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

void sub_1BCF17E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF17F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF17FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF181B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF18320(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1BCF18568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF186DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__126(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__126(uint64_t a1)
{
}

void sub_1BCF18978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF18ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF18DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1BCF18FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1BCF190C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF19160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF197A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1BCF19B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  id v19 = va_arg(va1, id);

  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);

  _Unwind_Resume(a1);
}

void sub_1BCF19C68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF19DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1A598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);

  _Unwind_Resume(a1);
}

void sub_1BCF1A8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1AA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1ABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF1AD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1AF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1B038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1B180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BCF1B270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1B414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF1B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1B7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1B8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1B96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1BA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1BC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1BD28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1C328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1C544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1C6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF1C8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF1D114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1D51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1D7B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1D90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1DA4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDSQLitePredicateForUnfrozenQuantitySeriesSamples()
{
  return [MEMORY[0x1E4F65D48] isNotNullPredicateWithProperty:@"insertion_era"];
}

void sub_1BCF1DB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1DC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1DD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1E078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1E2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1E4F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1E5CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1EAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v42 - 232), 8);
  _Block_object_dispose((const void *)(v42 - 200), 8);

  _Unwind_Resume(a1);
}

void sub_1BCF1EC04()
{
}

void sub_1BCF1EC1C()
{
}

void sub_1BCF1F028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1F0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1F194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF1F268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_1()
{
  for (uint64_t i = 0; i != -15; i -= 3)
  {
  }
}

void sub_1BCF1FCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t HDGraphDatabaseSchemaVersionFutureEnabled(int a1)
{
  if (a1) {
    return 10001;
  }
  else {
    return 8;
  }
}

void health::HDDemangleSymbol(const char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t v4 = __cxa_demangle(a1, 0, 0, 0);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, v4);
    JUMPOUT(0x1C187B8A0);
  }
  if (v2[23] < 0)
  {
    id v5 = *(const std::string::value_type **)v2;
    std::string::size_type v6 = *((void *)v2 + 1);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
  }
}

void sub_1BCF20BA4(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

void health::HDRegexReplace(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    id v7 = *(std::sub_match<const char *> **)a1;
    uint64_t v6 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    id v7 = (std::sub_match<const char *> *)a1;
  }
  int v8 = (char *)v7 + v6;
  *(void *)v78 = v7;
  *(void *)&v78[8] = (char *)v7 + v6;
  *(void *)&v78[16] = a2;
  *(_DWORD *)&v78[24] = 0;
  *(void *)&long long v80 = 0;
  *(void *)&v79[48] = 0;
  BYTE8(v80) = 0;
  long long v81 = 0uLL;
  LOBYTE(v82) = 0;
  BYTE8(v82) = 0;
  uint64_t v83 = 0;
  memset(v79, 0, 41);
  memset(v73, 0, 17);
  *(void *)&v73[24] = 0;
  *(void *)&v73[32] = 0;
  LOBYTE(v74) = 0;
  BYTE8(v74) = 0;
  *(void *)&long long v75 = 0;
  memset(__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v7, (std::sub_match<const char *> *)((char *)v7 + v6), (std::vector<std::csub_match> *)__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)v79, (uint64_t)v7, v8, (uint64_t *)__p, 0);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v78;
  *(_OWORD *)&__p[12] = *(_OWORD *)&v78[12];
  *(void *)&__p[40] = 0;
  *(void *)char v73 = 0;
  *(void *)&__p[32] = 0;
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&__p[32], *(long long **)v79, *(long long **)&v79[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v79[8] - *(void *)v79) >> 3));
  long long v74 = v80;
  long long v75 = v81;
  long long v76 = v82;
  uint64_t v77 = v83;
  *(_OWORD *)&v73[8] = *(_OWORD *)&v79[24];
  *(_OWORD *)&v73[24] = *(_OWORD *)&v79[40];
  id v9 = *(long long **)&__p[32];
  id v10 = *(long long **)&__p[40];
  while (*(void *)&__p[40] != *(void *)&__p[32])
  {
    memset(v85, 0, 24);
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(v85, v9, v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
    long long v86 = v74;
    long long v87 = v75;
    long long v88 = v76;
    uint64_t v89 = v77;
    *(_OWORD *)&v85[24] = *(_OWORD *)&v73[8];
    *(_OWORD *)&v85[40] = *(_OWORD *)&v73[24];
    char v62 = 0;
    uint64_t v63 = 0;
    long long v11 = *(_OWORD *)v85;
    size_t v61 = 0;
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&v61, *(long long **)v85, *(long long **)&v85[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v85[8] - *(void *)v85) >> 3));
    long long v66 = v74;
    long long v67 = v75;
    long long v68 = v76;
    uint64_t v69 = v77;
    long long v64 = *(_OWORD *)&v73[8];
    long long v65 = *(_OWORD *)&v73[24];
    uint64_t v12 = *(void *)(a3 + 24);
    if (!v12) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v12 + 48))(v70);
    if (v61)
    {
      char v62 = v61;
      operator delete(v61);
    }
    if (*((void *)&v11 + 1) == (void)v11) {
      uint64_t v13 = (char **)&v85[24];
    }
    else {
      uint64_t v13 = (char **)v11;
    }
    uint64_t v14 = *v13;
    uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
    if ((v15 & 0x80u) == 0) {
      unint64_t v16 = a4;
    }
    else {
      unint64_t v16 = *(void *)a4;
    }
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(a4 + 8);
    }
    std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v16 + v15, (char *)v7, v14, v14 - (char *)v7);
    int v17 = *(char *)(a4 + 23);
    unint64_t v18 = *(void *)a4;
    std::string::size_type v19 = *(void *)(a4 + 8);
    uint64_t v20 = *(unsigned __int8 *)(a4 + 23);
    if (v17 >= 0) {
      unint64_t v21 = a4;
    }
    else {
      unint64_t v21 = *(void *)a4;
    }
    if (v17 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a4 + 8);
    }
    uint64_t v23 = v21 + v22;
    if ((v71 & 0x80u) == 0) {
      id v24 = v70;
    }
    else {
      id v24 = (void **)v70[0];
    }
    if ((v71 & 0x80u) == 0) {
      std::string::size_type v25 = v71;
    }
    else {
      std::string::size_type v25 = (std::string::size_type)v70[1];
    }
    if (v17 < 0)
    {
      if (!v25) {
        goto LABEL_57;
      }
      std::string::size_type v26 = v23 - v18;
      if (v18 > (unint64_t)v24 || v18 + v19 + 1 <= (unint64_t)v24)
      {
        std::string::size_type v27 = (*(void *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v27 - v19 >= v25) {
          goto LABEL_49;
        }
LABEL_35:
        std::string::__grow_by((std::string *)a4, v27, v19 + v25 - v27, v19, v26, 0, v25);
        *(void *)(a4 + 8) = v19 + v25;
        unint64_t v18 = *(void *)a4;
LABEL_52:
        std::string::size_type v31 = v19 + v25;
        if (*(char *)(a4 + 23) < 0) {
          *(void *)(a4 + 8) = v31;
        }
        else {
          *(unsigned char *)(a4 + 23) = v31 & 0x7F;
        }
        *(unsigned char *)(v18 + v31) = 0;
        uint64_t v32 = (unsigned char *)(v18 + v26);
        do
        {
          char v33 = *(unsigned char *)v24;
          id v24 = (void **)((char *)v24 + 1);
          *v32++ = v33;
          --v25;
        }
        while (v25);
        goto LABEL_57;
      }
    }
    else
    {
      if (!v25) {
        goto LABEL_57;
      }
      std::string::size_type v26 = v23 - a4;
      if ((unint64_t)v24 < a4 || a4 + 1 + v20 <= (unint64_t)v24)
      {
        std::string::size_type v19 = *(unsigned __int8 *)(a4 + 23);
        unint64_t v18 = a4;
        std::string::size_type v27 = 22;
        if (22 - v20 < v25) {
          goto LABEL_35;
        }
LABEL_49:
        if (v19 == v26) {
          std::string::size_type v19 = v26;
        }
        else {
          memmove((void *)(v18 + v26 + v25), (const void *)(v18 + v26), v19 - v26);
        }
        goto LABEL_52;
      }
    }
    uint64_t v28 = 0;
    memset(&v84, 0, sizeof(v84));
    do
      std::string::push_back(&v84, *((unsigned char *)v24 + v28++));
    while (v25 != v28);
    std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v84;
    }
    else {
      uint64_t v30 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v84.__r_.__value_.__l.__size_;
    }
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v25, v26, (char *)v30, (char *)v30 + size);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
LABEL_57:
    uint64_t v34 = *(void **)v85;
    uint64_t v35 = (std::sub_match<const char *> **)&v85[32];
    if (*(void *)&v85[8] != *(void *)v85) {
      uint64_t v35 = (std::sub_match<const char *> **)(*(void *)v85 + 8);
    }
    id v7 = *v35;
    if (((char)v71 & 0x80000000) == 0)
    {
      if (!*(void *)v85) {
        goto LABEL_62;
      }
LABEL_61:
      operator delete(v34);
      goto LABEL_62;
    }
    operator delete(v70[0]);
    if (v34) {
      goto LABEL_61;
    }
LABEL_62:
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    unsigned int v52 = 0;
    uint64_t v37 = *(std::sub_match<const char *> ***)&__p[32];
    uint64_t v36 = *(std::sub_match<const char *> ***)&__p[40];
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(&v52, *(long long **)&__p[32], *(long long **)&__p[40], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3));
    long long v57 = v74;
    long long v58 = v75;
    long long v59 = v76;
    uint64_t v60 = v77;
    long long v55 = *(_OWORD *)&v73[8];
    long long v56 = *(_OWORD *)&v73[24];
    int v38 = *(_DWORD *)&__p[24];
    int v39 = *(_DWORD *)&__p[24] | 0x800;
    *(_DWORD *)&__p[24] |= 0x800u;
    if (v36 == v37) {
      char v40 = (std::sub_match<const char *> **)&v73[8];
    }
    else {
      char v40 = v37;
    }
    uint64_t v41 = v37 + 1;
    if (v36 == v37) {
      uint64_t v41 = (std::sub_match<const char *> **)&v73[16];
    }
    uint64_t v42 = *v41;
    uint64_t v43 = *(char **)&__p[8];
    if (*v40 == *v41)
    {
      if (*(std::sub_match<const char *> **)&__p[8] == v42) {
        goto LABEL_79;
      }
      *(void *)&v85[48] = 0;
      *(void *)&long long v86 = 0;
      BYTE8(v86) = 0;
      long long v87 = 0uLL;
      LOBYTE(v88) = 0;
      BYTE8(v88) = 0;
      uint64_t v89 = 0;
      memset(v85, 0, 41);
      char v45 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&__p[16], v42, *(std::sub_match<const char *> **)&__p[8], (std::vector<std::csub_match> *)v85, v38 | 0x860u);
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)&__p[32], (uint64_t)v42, v43, (uint64_t *)v85, 1);
      if (*(void *)v85) {
        operator delete(*(void **)v85);
      }
      if (v45) {
        goto LABEL_82;
      }
      uint64_t v42 = (std::sub_match<const char *> *)((char *)v42 + 1);
      int v39 = *(_DWORD *)&__p[24];
      uint64_t v43 = *(char **)&__p[8];
    }
    *(_DWORD *)&__p[24] = v39 | 0x80;
    *(void *)&v85[48] = 0;
    *(void *)&long long v86 = 0;
    BYTE8(v86) = 0;
    long long v87 = 0uLL;
    LOBYTE(v88) = 0;
    BYTE8(v88) = 0;
    uint64_t v89 = 0;
    memset(v85, 0, 41);
    char v44 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&__p[16], v42, (std::sub_match<const char *> *)v43, (std::vector<std::csub_match> *)v85, v39 | 0x80u);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)&__p[32], (uint64_t)v42, v43, (uint64_t *)v85, (v39 & 0x800) != 0);
    if (*(void *)v85) {
      operator delete(*(void **)v85);
    }
    if (v44) {
      goto LABEL_82;
    }
    uint64_t v37 = *(std::sub_match<const char *> ***)&__p[32];
LABEL_79:
    if (v37) {
      operator delete(v37);
    }
    BYTE8(v76) = 0;
    *(_OWORD *)&__p[32] = 0u;
    memset(v73, 0, 25);
    *(void *)&v73[32] = 0;
    *(void *)&long long v74 = 0;
    BYTE8(v74) = 0;
    long long v75 = 0uLL;
    LOBYTE(v76) = 0;
    uint64_t v77 = 0;
LABEL_82:
    if (v52)
    {
      uint64_t v53 = v52;
      operator delete(v52);
    }
    id v9 = *(long long **)&__p[32];
    id v10 = *(long long **)&__p[40];
  }
  if (v10) {
    operator delete(v10);
  }
  uint64_t v46 = *(unsigned __int8 *)(a4 + 23);
  if ((v46 & 0x80u) == 0) {
    unint64_t v47 = a4;
  }
  else {
    unint64_t v47 = *(void *)a4;
  }
  if ((v46 & 0x80u) != 0) {
    uint64_t v46 = *(void *)(a4 + 8);
  }
  uint64_t v48 = v47 + v46;
  unint64_t v49 = (std::sub_match<const char *> *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v49 = *(std::sub_match<const char *> **)a1;
    uint64_t v50 = *(void *)(a1 + 8);
  }
  else
  {
    uint64_t v50 = *(unsigned __int8 *)(a1 + 23);
  }
  std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((std::string *)a4, v48, (char *)v7, (char *)v49 + v50, (char *)v49 + v50 - (char *)v7);
  if (*(void *)v79) {
    operator delete(*(void **)v79);
  }
}

void sub_1BCF21304()
{
}

void sub_1BCF213B0()
{
}

void health::HDDemangleBacktraceLine()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v0, "(\\S+)( \\+ \\d+)", 0);
}

void sub_1BCF21550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::locale a23)
{
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }

  std::locale::~locale(this);
}

void *std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__init_with_size[abi:ne180100]<std::sub_match<std::__wrap_iter<char const*>>*,std::sub_match<std::__wrap_iter<char const*>>*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawDistanceSample>>(a4);
    *uint64_t v4 = result;
    v4[1] = result;
    void v4[2] = &result[3 * v7];
    if (a2 != a3)
    {
      int v8 = result;
      do
      {
        long long v9 = *a2;
        void v8[2] = *((void *)a2 + 2);
        *(_OWORD *)int v8 = v9;
        v8 += 3;
        a2 = (long long *)((char *)a2 + 24);
        result += 3;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_1BCF2166C(_Unwind_Exception *exception_object)
{
  __n128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__insert_with_size<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  uint64_t v7 = a3;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__n_add) {
      return;
    }
    id v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    if (!__n_add) {
      return;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    id v10 = this;
  }
  std::string::size_type v11 = a2 - (void)v10;
  if (v10 > (std::string *)a3 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= a3)
  {
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, a3, a4);
  }
  else
  {
    memset(&v16, 0, sizeof(v16));
    if (a3 == a4)
    {
      std::string::size_type v13 = 0;
      std::string::size_type v14 = 0;
      unsigned int v12 = 0;
    }
    else
    {
      do
        std::string::push_back(&v16, *v7++);
      while (v7 != a4);
      unsigned int v12 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v16.__r_.__value_.__l.__size_;
      std::string::size_type v14 = v16.__r_.__value_.__r.__words[0];
    }
    if ((v12 & 0x80u) == 0) {
      uint64_t v15 = &v16;
    }
    else {
      uint64_t v15 = (std::string *)v14;
    }
    if ((v12 & 0x80u) == 0) {
      std::string::size_type v13 = v12;
    }
    std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, __n_add, v11, (char *)v15, (char *)v15 + v13);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BCF217C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  long long v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      unsigned int v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    unsigned int v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  unsigned int v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    uint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    long long v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  std::string::size_type v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    std::string::size_type v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        std::vector<std::csub_match>::pointer begin = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    std::string::size_type v14 = v11;
  }
  else {
    std::string::size_type v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(char **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  size_t v13 = *a1;
  unsigned int v12 = a1[1];
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      unsigned int v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v12;
    }
  }
  else
  {
    char v16 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      uint64_t v29 = &v12[24 * v15];
      uint64_t v30 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v12 - *a1) >> 3);
      do
      {
        *(void *)unsigned int v12 = 0;
        *((void *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      unsigned int v12 = v29;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v11) {
        uint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v18;
      }
      int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawDistanceSample>>(v19);
      uint64_t v22 = &v20[24 * v14];
      unsigned int v12 = &v20[24 * v11];
      uint64_t v23 = v22;
      uint64_t v24 = 24 * v11 - 24 * v14;
      do
      {
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        v23[16] = 0;
        v23 += 24;
        v24 -= 24;
      }
      while (v24);
      std::string::size_type v25 = &v20[24 * v21];
      std::string::size_type v27 = *a1;
      std::string::size_type v26 = a1[1];
      if (v26 != *a1)
      {
        do
        {
          long long v28 = *(_OWORD *)(v26 - 24);
          *((void *)v22 - 1) = *((void *)v26 - 1);
          *(_OWORD *)(v22 - 24) = v28;
          v22 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        std::string::size_type v26 = *a1;
      }
      *a1 = v22;
      a1[1] = v12;
      a1[2] = v25;
      if (v26)
      {
        operator delete(v26);
        unsigned int v12 = a1[1];
      }
    }
  }
  std::string::size_type v31 = *a1;
  if (v12 != *a1)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v35 = *a4;
    uint64_t v34 = a4[1];
    do
    {
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
      uint64_t v37 = (void *)(v35 + v32);
      if (v36 <= v33) {
        int v38 = a4 + 3;
      }
      else {
        int v38 = v37;
      }
      *(void *)&v31[v32] = a2 + *v38 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v33) {
        int v39 = a4 + 3;
      }
      else {
        int v39 = (uint64_t *)(*a4 + v32);
      }
      *(void *)&(*a1)[v32 + 8] = a2 + v39[1] - v10;
      uint64_t v35 = *a4;
      uint64_t v34 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a4) >> 3) <= v33) {
        char v40 = a4 + 3;
      }
      else {
        char v40 = (uint64_t *)(*a4 + v32);
      }
      char v41 = *((unsigned char *)v40 + 16);
      std::string::size_type v31 = *a1;
      uint64_t v42 = a1[1];
      (*a1)[v32 + 16] = v41;
      ++v33;
      v32 += 24;
    }
    while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((unsigned char *)a1 + 40) = 0;
  uint64_t v43 = (char *)(a2 + a4[6] - v10);
  a1[6] = v43;
  a1[7] = (char *)(a2 + a4[7] - v10);
  *((unsigned char *)a1 + 64) = *((unsigned char *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v10);
  a1[10] = (char *)(a2 + a4[10] - v10);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[13] = v43;
  }
  *((unsigned char *)a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  int v9 = a3;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
  {
    v165 = (char *)(a3 - a2);
    __int16 v164 = a5;
    if (*(_DWORD *)(a1 + 28))
    {
      v166[0] = 0;
      v166[1] = 0;
      *(void *)&long long v167 = 0;
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        __x.first = a3;
        __x.second = a3;
        __x.matched = 0;
        *(_DWORD *)v169 = 0;
        memset(&v169[8], 0, 48);
        *(_OWORD *)std::string __p = 0u;
        memset(v171, 0, 21);
        v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v166, (uint64_t)v169);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v169[32]) {
          operator delete(*(void **)&v169[32]);
        }
        v152 = a4;
        size_t v13 = v166[1];
        *((_DWORD *)v166[1] - 24) = 0;
        *(v13 - 11) = v10;
        *(v13 - 10) = v10;
        *(v13 - 9) = v9;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v166[1] - 40), *(unsigned int *)(a1 + 32));
        v158 = 0;
        v160 = 0;
        uint64_t v154 = 0;
        uint64_t v155 = 0;
        v156 = 0;
        v157 = 0;
        uint64_t v14 = 0;
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v17 = v166[1];
        *((void *)v166[1] - 2) = v12;
        *(v17 - 2) = v7;
        *((unsigned char *)v17 - 4) = a6;
        do
        {
          BOOL v18 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v165;
          if (!v18) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          int v20 = v17 - 4;
          uint64_t v19 = *((void *)v17 - 2);
          uint64_t v21 = v17 - 24;
          if (v19) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v19 + 16))(v19, v17 - 24);
          }
          switch(*(_DWORD *)v21)
          {
            case 0xFFFFFC18:
              uint64_t v22 = (const char *)*((void *)v17 - 10);
              if ((v164 & 0x20) != 0 && v22 == v10 || (v164 & 0x1000) != 0 && v22 != a3) {
                goto LABEL_21;
              }
              if ((v15 & (v14 >= (uint64_t)&v22[-*((void *)v17 - 11)])) != 0)
              {
                uint64_t v29 = v160;
                uint64_t v30 = v156;
              }
              else
              {
                uint64_t v32 = (long long *)*((void *)v17 - 8);
                std::string::size_type v31 = (long long *)*((void *)v17 - 7);
                unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                uint64_t v34 = v160;
                v151 = &v22[-*((void *)v17 - 11)];
                if (0xAAAAAAAAAAAAAAABLL * ((v155 - (uint64_t)v157) >> 3) >= v33)
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v160 - v157) >> 3) >= v33)
                  {
                    if (v32 == v31)
                    {
                      unint64_t v47 = v157;
                      uint64_t v48 = v157;
                    }
                    else
                    {
                      unint64_t v47 = v157;
                      uint64_t v48 = v157;
                      unint64_t v49 = v157;
                      do
                      {
                        *(_OWORD *)unint64_t v49 = *v32;
                        v49[16] = *((unsigned char *)v32 + 16);
                        v48 += 24;
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                        v49 += 24;
                      }
                      while (v32 != v31);
                    }
                    int64_t v46 = v48 - v47;
                    uint64_t v34 = v47;
                  }
                  else
                  {
                    char v41 = (long long *)((char *)v32 + 8 * ((v160 - v157) >> 3));
                    if (v160 != v157)
                    {
                      uint64_t v42 = v157;
                      do
                      {
                        *(_OWORD *)uint64_t v42 = *v32;
                        v42[16] = *((unsigned char *)v32 + 16);
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                        v42 += 24;
                      }
                      while (v32 != v41);
                    }
                    uint64_t v43 = v160;
                    if (v41 != v31)
                    {
                      char v44 = v160;
                      do
                      {
                        long long v45 = *v41;
                        *((void *)v44 + 2) = *((void *)v41 + 2);
                        *(_OWORD *)char v44 = v45;
                        v44 += 24;
                        char v41 = (long long *)((char *)v41 + 24);
                        v43 += 24;
                      }
                      while (v41 != v31);
                    }
                    int64_t v46 = v43 - v160;
                  }
                }
                else
                {
                  if (v157)
                  {
                    operator delete(v157);
                    uint64_t v155 = 0;
                  }
                  if (v33 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_220;
                  }
                  unint64_t v35 = 0x5555555555555556 * (v155 >> 3);
                  if (v35 <= v33) {
                    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                  }
                  unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (v155 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v35;
                  if (v36 > 0xAAAAAAAAAAAAAAALL) {
LABEL_220:
                  }
                    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                  uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawDistanceSample>>(v36);
                  uint64_t v34 = v37;
                  int v39 = v37;
                  while (v32 != v31)
                  {
                    long long v40 = *v32;
                    *((void *)v39 + 2) = *((void *)v32 + 2);
                    *(_OWORD *)int v39 = v40;
                    v39 += 24;
                    uint64_t v32 = (long long *)((char *)v32 + 24);
                  }
                  uint64_t v155 = (uint64_t)&v37[24 * v38];
                  int64_t v46 = v39 - v37;
                  v157 = v37;
                }
                char v51 = (char *)*((void *)v17 - 5);
                uint64_t v50 = (char *)*((void *)v17 - 4);
                unint64_t v52 = (v50 - v51) >> 4;
                if (v52 <= (v154 - (uint64_t)v158) >> 4)
                {
                  unint64_t v59 = (v156 - v158) >> 4;
                  if (v59 >= v52)
                  {
                    if (v51 == v50)
                    {
                      long long v66 = v158;
                      uint64_t v14 = (uint64_t)v151;
                    }
                    else
                    {
                      long long v65 = v158;
                      long long v66 = v158;
                      uint64_t v14 = (uint64_t)v151;
                      do
                      {
                        *(void *)long long v65 = *(void *)v51;
                        *((void *)v65 + 1) = *((void *)v51 + 1);
                        v66 += 16;
                        v51 += 16;
                        v65 += 16;
                      }
                      while (v51 != v50);
                    }
                    int64_t v67 = v66 - v158;
                    long long v55 = v158;
                  }
                  else
                  {
                    uint64_t v60 = &v51[16 * v59];
                    if (v156 != v158)
                    {
                      size_t v61 = v158;
                      do
                      {
                        *(void *)size_t v61 = *(void *)v51;
                        *((void *)v61 + 1) = *((void *)v51 + 1);
                        v51 += 16;
                        v61 += 16;
                      }
                      while (v51 != v60);
                    }
                    uint64_t v14 = (uint64_t)v151;
                    if (v60 == v50)
                    {
                      long long v55 = v156;
                      char v62 = v156;
                    }
                    else
                    {
                      long long v55 = v156;
                      char v62 = v156;
                      uint64_t v63 = v156;
                      do
                      {
                        long long v64 = *(_OWORD *)v60;
                        v60 += 16;
                        *(_OWORD *)uint64_t v63 = v64;
                        v63 += 16;
                        v62 += 16;
                      }
                      while (v60 != v50);
                    }
                    int64_t v67 = v62 - v55;
                  }
                }
                else
                {
                  if (v158)
                  {
                    operator delete(v158);
                    uint64_t v154 = 0;
                  }
                  if (v50 - v51 < 0) {
                    goto LABEL_219;
                  }
                  uint64_t v53 = v154 >> 3;
                  if (v154 >> 3 <= v52) {
                    uint64_t v53 = (v50 - v51) >> 4;
                  }
                  unint64_t v54 = (unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v53;
                  if (v54 >> 60) {
LABEL_219:
                  }
                    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                  long long v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health::FileExtent>>(v54);
                  long long v57 = v55;
                  if (v51 == v50)
                  {
                    uint64_t v14 = (uint64_t)v151;
                  }
                  else
                  {
                    uint64_t v14 = (uint64_t)v151;
                    do
                    {
                      long long v58 = *(_OWORD *)v51;
                      v51 += 16;
                      *(_OWORD *)long long v57 = v58;
                      v57 += 16;
                    }
                    while (v51 != v50);
                  }
                  uint64_t v154 = (uint64_t)&v55[16 * v56];
                  int64_t v67 = v57 - v55;
                  v158 = v55;
                }
                uint64_t v29 = &v34[v46];
                uint64_t v30 = &v55[v67];
              }
              v160 = v29;
              long long v68 = v166[1];
              v156 = v30;
              if ((char *)v14 == v165)
              {
                uint64_t v69 = v166[0];
                while (v68 != v69)
                {
                  v68 -= 12;
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v68);
                }
                v166[1] = v69;
                char v15 = 1;
                uint64_t v14 = (uint64_t)v165;
              }
              else
              {
                uint64_t v70 = (char *)v166[1] - 96;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v166[1] - 12);
                v166[1] = v70;
                char v15 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_21:
              uint64_t v23 = (char *)v166[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v166[1] - 12);
              v166[1] = v23;
              break;
            case 0xFFFFFC20:
              long long v24 = *((_OWORD *)v17 - 5);
              *(_OWORD *)v169 = *v21;
              *(_OWORD *)&v169[16] = v24;
              memset(&v169[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *((long long **)v17 - 8), *((long long **)v17 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 - 7) - *((void *)v17 - 8)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v17 - 5), *((long long **)v17 - 4), (uint64_t)(*((void *)v17 - 4) - *((void *)v17 - 5)) >> 4);
              uint64_t v25 = *v20;
              *(void *)((char *)&v171[1] + 5) = *(void *)((char *)v17 - 11);
              v171[1] = v25;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v20 + 24))(*v20, 1, v17 - 24);
              (*(void (**)(void, void, unsigned char *))(*(void *)v171[1] + 24))(v171[1], 0, v169);
              std::string::size_type v26 = (char *)v166[1];
              if (v166[1] >= (void *)v167)
              {
                v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v166, (uint64_t)v169);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v27 = *(_OWORD *)&v169[16];
                *(_OWORD *)v166[1] = *(_OWORD *)v169;
                *((_OWORD *)v26 + 1) = v27;
                *((void *)v26 + 4) = 0;
                *((void *)v26 + 5) = 0;
                *((void *)v26 + 6) = 0;
                *((void *)v26 + 7) = 0;
                *((_OWORD *)v26 + 2) = *(_OWORD *)&v169[32];
                *((void *)v26 + 6) = *(void *)&v169[48];
                memset(&v169[32], 0, 24);
                *((void *)v26 + 8) = 0;
                *((void *)v26 + 9) = 0;
                *(_OWORD *)(v26 + 56) = *(_OWORD *)__p;
                *((void *)v26 + 9) = v171[0];
                __p[0] = 0;
                __p[1] = 0;
                v171[0] = 0;
                uint64_t v28 = v171[1];
                *(void *)(v26 + 85) = *(void *)((char *)&v171[1] + 5);
                *((void *)v26 + 10) = v28;
                v166[1] = v26 + 96;
              }
              if (*(void *)&v169[32])
              {
                *(void *)&v169[40] = *(void *)&v169[32];
                operator delete(*(void **)&v169[32]);
              }
              break;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          unint64_t v17 = v166[1];
        }
        while (v166[0] != v166[1]);
        if (v15)
        {
          uint64_t v72 = *v152;
          *(void *)uint64_t v72 = v10;
          *(void *)(v72 + 8) = &v10[v14];
          *(unsigned char *)(v72 + 16) = 1;
          char v73 = v157;
          if (v160 != v157)
          {
            long long v74 = v157 + 16;
            unsigned int v75 = 1;
            do
            {
              uint64_t v76 = v72 + 24 * v75;
              *(_OWORD *)uint64_t v76 = *((_OWORD *)v74 - 1);
              char v77 = *v74;
              v74 += 24;
              *(unsigned char *)(v76 + 16) = v77;
              BOOL v18 = 0xAAAAAAAAAAAAAAABLL * ((v160 - v157) >> 3) > v75++;
            }
            while (v18);
          }
        }
        else
        {
          char v73 = v157;
        }
        if (v158) {
          operator delete(v158);
        }
        if (v73) {
          operator delete(v73);
        }
      }
      else
      {
        char v15 = 0;
      }
      *(void *)v169 = v166;
      std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
    }
    else
    {
      long long v167 = 0u;
      int64x2_t v168 = 0u;
      *(_OWORD *)v166 = 0u;
      uint64_t v78 = *(void *)(a1 + 40);
      if (v78)
      {
        *(_DWORD *)v169 = 0;
        memset(&v169[8], 0, 48);
        *(_OWORD *)std::string __p = 0uLL;
        memset(v171, 0, 21);
        std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (*(void *)&v169[32]) {
          operator delete(*(void **)&v169[32]);
        }
        v153 = a4;
        v79 = v166[1];
        unint64_t v80 = v168.i64[1] + v168.i64[0] - 1;
        unint64_t v81 = v80 / 0x2A;
        uint64_t v82 = *((void *)v166[1] + v80 / 0x2A);
        unint64_t v83 = 3 * (v80 % 0x2A);
        uint64_t v84 = v82 + 32 * v83;
        *(_DWORD *)uint64_t v84 = 0;
        *(void *)(v84 + 8) = v10;
        *(void *)(v79[v81] + 32 * v83 + 16) = v10;
        *(void *)(v79[v81] + 32 * v83 + 24) = v9;
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v79[v81] + 32 * v83 + 56), *(unsigned int *)(a1 + 32));
        char v161 = 0;
        unsigned int v85 = 0;
        v159 = 0;
        uint64_t v86 = v168.i64[1];
        long long v87 = v166[1];
        unint64_t v88 = v168.i64[1] + v168.i64[0] - 1;
        unint64_t v89 = v88 / 0x2A;
        unint64_t v90 = 3 * (v88 % 0x2A);
        *(void *)(*((void *)v166[1] + v89) + 32 * v90 + 80) = v78;
        uint64_t v91 = v87[v89] + 32 * v90;
        *(_DWORD *)(v91 + 88) = v7;
        *(unsigned char *)(v91 + 92) = a6;
        while (2)
        {
          if ((++v85 & 0xFFF) == 0 && (int)(v85 >> 12) >= (int)v165) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          unint64_t v93 = v86 + v168.i64[0] - 1;
          uint64_t v94 = *((void *)v166[1] + v93 / 0x2A);
          unint64_t v95 = v93 % 0x2A;
          uint64_t v96 = v94 + 96 * (v93 % 0x2A);
          v98 = (void *)(v96 + 80);
          uint64_t v97 = *(void *)(v96 + 80);
          if (v97) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v97 + 16))(v97, v94 + 96 * v95);
          }
          switch(*(_DWORD *)v96)
          {
            case 0xFFFFFC18:
              v99 = *(const char **)(v94 + 96 * v95 + 16);
              BOOL v100 = (v7 & 0x1000) == 0 || v99 == v9;
              char v101 = v100;
              BOOL v102 = v99 != v10 || (v7 & 0x20) == 0;
              if (!v102 || (v101 & 1) == 0) {
                goto LABEL_203;
              }
              uint64_t v103 = (uint64_t)&v99[-*(void *)(v94 + 96 * v95 + 8)];
              v104 = v159;
              if ((v161 & ((uint64_t)v159 >= v103)) == 0) {
                v104 = (char *)v103;
              }
              if (v104 != v165)
              {
                v159 = v104;
                std::deque<std::__state<char>>::pop_back(v166);
                char v161 = 1;
                goto LABEL_204;
              }
              v105 = (void **)v166[1];
              v106 = (unsigned char *)v167;
              if ((void *)v167 == v166[1])
              {
                v106 = v166[1];
              }
              else
              {
                v107 = v10;
                v108 = (char *)v166[1] + 8 * (v168.i64[0] / 0x2AuLL);
                v109 = (void *)(*v108 + 96 * (v168.i64[0] % 0x2AuLL));
                unint64_t v110 = *((void *)v166[1] + (v168.i64[1] + v168.i64[0]) / 0x2AuLL)
                     + 96 * ((v168.i64[1] + v168.i64[0]) % 0x2AuLL);
                if (v109 != (void *)v110)
                {
                  do
                  {
                    std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v109);
                    v109 += 12;
                    if ((void *)((char *)v109 - *v108) == (void *)4032)
                    {
                      v111 = (void *)v108[1];
                      ++v108;
                      v109 = v111;
                    }
                  }
                  while (v109 != (void *)v110);
                  v105 = (void **)v166[1];
                  v106 = (unsigned char *)v167;
                }
                uint64_t v10 = v107;
              }
              v168.i64[1] = 0;
              unint64_t v141 = v106 - (unsigned char *)v105;
              if (v141 >= 0x11)
              {
                do
                {
                  operator delete(*v105);
                  v105 = (void **)((char *)v166[1] + 8);
                  v166[1] = v105;
                  unint64_t v141 = v167 - (void)v105;
                }
                while ((void)v167 - (void)v105 > 0x10uLL);
              }
              if (v141 >> 3 == 1)
              {
                uint64_t v142 = 21;
              }
              else
              {
                if (v141 >> 3 != 2) {
                  goto LABEL_191;
                }
                uint64_t v142 = 42;
              }
              v168.i64[0] = v142;
LABEL_191:
              char v161 = 1;
              v159 = v165;
LABEL_204:
              uint64_t v86 = v168.i64[1];
              if (v168.i64[1]) {
                continue;
              }
              if ((v161 & 1) == 0) {
                goto LABEL_207;
              }
              uint64_t v150 = *v153;
              *(void *)uint64_t v150 = v10;
              *(void *)(v150 + 8) = &v159[(void)v10];
              char v15 = 1;
              *(unsigned char *)(v150 + 16) = 1;
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_204;
            case 0xFFFFFC1D:
              unint64_t v112 = v168.i64[0];
              v113 = (char *)v166[1];
              v114 = (char *)v167;
              if (!v168.i64[0])
              {
                unint64_t v117 = (uint64_t)(v167 - (unint64_t)v166[1]) >> 3;
                uint64_t v118 = 42 * v117 - 1;
                if ((void *)v167 == v166[1]) {
                  uint64_t v118 = 0;
                }
                if ((unint64_t)(v118 - v168.i64[1]) < 0x2A)
                {
                  if (v117 >= (uint64_t)(*((void *)&v167 + 1) - (unint64_t)v166[0]) >> 3)
                  {
                    if (*((void **)&v167 + 1) == v166[0]) {
                      unint64_t v119 = 1;
                    }
                    else {
                      unint64_t v119 = (uint64_t)(*((void *)&v167 + 1) - (unint64_t)v166[0]) >> 2;
                    }
                    *(void *)&v169[32] = (char *)&v167 + 8;
                    *(void *)v169 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v119);
                    *(void *)&v169[8] = *(void *)v169;
                    *(void *)&v169[16] = *(void *)v169;
                    *(void *)&v169[24] = *(void *)v169 + 8 * v120;
                    v163 = v10;
                    __x.first = (const char *)operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v169, &__x);
                    v121 = (uint64_t *)v166[1];
                    for (uint64_t i = *(char **)&v169[16]; v121 != (uint64_t *)v167; *(void *)&v169[16] += 8)
                    {
                      if (i == *(char **)&v169[24])
                      {
                        v123 = *(char **)&v169[8];
                        v124 = *(void **)v169;
                        if (*(void *)&v169[8] <= *(void *)v169)
                        {
                          if (i == *(char **)v169) {
                            unint64_t v131 = 1;
                          }
                          else {
                            unint64_t v131 = (uint64_t)&i[-*(void *)v169] >> 2;
                          }
                          v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v131);
                          uint64_t v134 = i - v123;
                          BOOL v100 = i == v123;
                          uint64_t i = &v132[8 * (v131 >> 2)];
                          if (!v100)
                          {
                            uint64_t i = &v132[8 * (v131 >> 2) + (v134 & 0xFFFFFFFFFFFFFFF8)];
                            uint64_t v135 = 8 * (v134 >> 3);
                            v136 = &v132[8 * (v131 >> 2)];
                            do
                            {
                              uint64_t v137 = *(void *)v123;
                              v123 += 8;
                              *(void *)v136 = v137;
                              v136 += 8;
                              v135 -= 8;
                            }
                            while (v135);
                          }
                          *(void *)v169 = v132;
                          *(void *)&v169[8] = &v132[8 * (v131 >> 2)];
                          *(void *)&v169[16] = i;
                          *(void *)&v169[24] = &v132[8 * v133];
                          if (v124) {
                            operator delete(v124);
                          }
                        }
                        else
                        {
                          uint64_t v125 = (uint64_t)(*(void *)&v169[8] - *(void *)v169) >> 3;
                          if (v125 >= -1) {
                            uint64_t v126 = v125 + 1;
                          }
                          else {
                            uint64_t v126 = v125 + 2;
                          }
                          uint64_t v127 = *(void *)&v169[8] - 8 * (v126 >> 1);
                          size_t v128 = (size_t)&i[-*(void *)&v169[8]];
                          if (i != *(char **)&v169[8])
                          {
                            v129 = (void *)(*(void *)&v169[8] - 8 * (v126 >> 1));
                            memmove(v129, *(const void **)&v169[8], v128);
                            uint64_t v127 = (uint64_t)v129;
                            uint64_t i = v123;
                          }
                          v130 = &i[-8 * (v126 >> 1)];
                          uint64_t i = (char *)(v127 + v128);
                          *(void *)&v169[8] = v130;
                          *(void *)&v169[16] = v127 + v128;
                        }
                      }
                      uint64_t v138 = *v121++;
                      *(void *)uint64_t i = v138;
                      uint64_t i = (char *)(*(void *)&v169[16] + 8);
                    }
                    v139 = v166[0];
                    *(_OWORD *)v166 = *(_OWORD *)v169;
                    *(void *)&long long v167 = i;
                    *((void *)&v167 + 1) = *(void *)&v169[24];
                    uint64_t v140 = 21;
                    if (&i[-*(void *)&v169[8]] != (char *)8) {
                      uint64_t v140 = v168.i64[0] + 42;
                    }
                    v168.i64[0] = v140;
                    uint64_t v10 = v163;
                    if (v139) {
                      operator delete(v139);
                    }
                    LOWORD(v7) = v164;
                    int v9 = a3;
                  }
                  else
                  {
                    if (v166[1] == v166[0])
                    {
                      *(void *)v169 = operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v166, v169);
                      *(void *)v169 = *(void *)(v167 - 8);
                      *(void *)&long long v167 = v167 - 8;
                    }
                    else
                    {
                      *(void *)v169 = operator new(0xFC0uLL);
                    }
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
                    uint64_t v143 = 21;
                    if ((void)v167 - (unint64_t)v166[1] != 8) {
                      uint64_t v143 = v168.i64[0] + 42;
                    }
                    v168.i64[0] = v143;
                  }
                }
                else
                {
                  v168.i64[0] = 42;
                  *(void *)v169 = *(void *)(v167 - 8);
                  *(void *)&long long v167 = v167 - 8;
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
                }
                unint64_t v112 = v168.i64[0];
                v113 = (char *)v166[1];
                v114 = (char *)v167;
              }
              v144 = &v113[8 * (v112 / 0x2A)];
              unint64_t v145 = *(void *)v144 + 96 * (v112 % 0x2A);
              if (v114 == v113) {
                uint64_t v146 = 0;
              }
              else {
                uint64_t v146 = v145;
              }
              if (v146 == *(void *)v144) {
                uint64_t v146 = *((void *)v144 - 1) + 4032;
              }
              long long v147 = *(_OWORD *)(v96 + 16);
              *(_OWORD *)(v146 - 96) = *(_OWORD *)v96;
              *(_OWORD *)(v146 - 80) = v147;
              uint64_t v148 = v94 + 96 * v95;
              *(void *)(v146 - 56) = 0;
              *(void *)(v146 - 48) = 0;
              *(void *)(v146 - 64) = 0;
              *(_OWORD *)(v146 - 64) = *(_OWORD *)(v148 + 32);
              *(void *)(v146 - 48) = *(void *)(v148 + 48);
              *(void *)(v148 + 32) = 0;
              *(void *)(v148 + 40) = 0;
              *(void *)(v148 + 48) = 0;
              *(void *)(v146 - 40) = 0;
              *(void *)(v146 - 32) = 0;
              *(void *)(v146 - 24) = 0;
              *(_OWORD *)(v146 - 40) = *(_OWORD *)(v148 + 56);
              *(void *)(v146 - 24) = *(void *)(v148 + 72);
              *(void *)(v148 + 56) = 0;
              *(void *)(v148 + 64) = 0;
              *(void *)(v148 + 72) = 0;
              uint64_t v149 = *v98;
              *(void *)(v146 - 11) = *(void *)(v96 + 85);
              *(void *)(v146 - 16) = v149;
              int64x2_t v168 = vaddq_s64(v168, (int64x2_t)xmmword_1BD32D280);
              goto LABEL_203;
            case 0xFFFFFC1F:
LABEL_203:
              std::deque<std::__state<char>>::pop_back(v166);
              goto LABEL_204;
            case 0xFFFFFC20:
              long long v115 = *(_OWORD *)(v96 + 16);
              *(_OWORD *)v169 = *(_OWORD *)v96;
              *(_OWORD *)&v169[16] = v115;
              memset(&v169[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *(long long **)(v94 + 96 * v95 + 32), *(long long **)(v94 + 96 * v95 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v94 + 96 * v95 + 40) - *(void *)(v94 + 96 * v95 + 32)) >> 3));
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v94 + 96 * v95 + 56), *(long long **)(v94 + 96 * v95 + 64), (uint64_t)(*(void *)(v94 + 96 * v95 + 64) - *(void *)(v94 + 96 * v95 + 56)) >> 4);
              uint64_t v116 = *v98;
              *(void *)((char *)&v171[1] + 5) = *(void *)(v96 + 85);
              v171[1] = v116;
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v98 + 24))(*v98, 1, v96);
              (*(void (**)(void, void, unsigned char *))(*(void *)v171[1] + 24))(v171[1], 0, v169);
              std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (*(void *)&v169[32])
              {
                *(void *)&v169[40] = *(void *)&v169[32];
                operator delete(*(void **)&v169[32]);
              }
              goto LABEL_204;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
      }
      else
      {
LABEL_207:
        char v15 = 0;
      }
      std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v166);
    }
    return v15 & 1;
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
}

void sub_1BCF22E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      BOOL v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<_HDWrappedSource>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    uint64_t v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int64x2_t v44 = 0uLL;
  unint64_t v45 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)long long v40 = 0;
    memset(&v40[8], 0, 48);
    *(_OWORD *)std::string __p = 0u;
    memset(v42, 0, 21);
    v44.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v44, (uint64_t)v40);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (*(void *)&v40[32]) {
      operator delete(*(void **)&v40[32]);
    }
    uint64_t v38 = a4;
    uint64_t v13 = v44.i64[1];
    *(_DWORD *)(v44.i64[1] - 96) = 0;
    *(void *)(v13 - 88) = a2;
    *(void *)(v13 - 80) = a2;
    *(void *)(v13 - 72) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44.i64[1] - 40), *(unsigned int *)(a1 + 32));
    uint64_t v14 = v44.i64[1];
    *(void *)(v44.i64[1] - 16) = v6;
    int v39 = a3;
    signed int v15 = a3 - a2;
    *(_DWORD *)(v14 - 8) = a5;
    *(unsigned char *)(v14 - 4) = a6;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        BOOL v18 = (void *)(v14 - 16);
        uint64_t v17 = *(void *)(v14 - 16);
        uint64_t v19 = (_OWORD *)(v14 - 96);
        if (v17) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            std::vector<std::csub_match>::size_type v20 = *(const char **)(v14 - 80);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v39) {
              goto LABEL_16;
            }
            uint64_t v29 = *v38;
            *(void *)uint64_t v29 = a2;
            *(void *)(v29 + 8) = v20;
            *(unsigned char *)(v29 + 16) = 1;
            uint64_t v30 = *(void *)(v14 - 64);
            uint64_t v31 = *(void *)(v14 - 56) - v30;
            if (v31)
            {
              unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
              unint64_t v33 = (unsigned char *)(v30 + 16);
              unsigned int v34 = 1;
              do
              {
                uint64_t v35 = v29 + 24 * v34;
                *(_OWORD *)uint64_t v35 = *((_OWORD *)v33 - 1);
                char v36 = *v33;
                v33 += 24;
                *(unsigned char *)(v35 + 16) = v36;
              }
              while (v32 > v34++);
            }
            uint64_t v27 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            uint64_t v21 = v44.i64[1] - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(v44.i64[1] - 96));
            v44.i64[1] = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            long long v22 = *(_OWORD *)(v14 - 80);
            *(_OWORD *)long long v40 = *v19;
            *(_OWORD *)&v40[16] = v22;
            memset(&v40[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v40[32], *(long long **)(v14 - 64), *(long long **)(v14 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 - 56) - *(void *)(v14 - 64)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v42[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v14 - 40), *(long long **)(v14 - 32), (uint64_t)(*(void *)(v14 - 32) - *(void *)(v14 - 40)) >> 4);
            uint64_t v23 = *v18;
            *(void *)((char *)&v42[1] + 5) = *(void *)(v14 - 11);
            v42[1] = v23;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v18 + 24))(*v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(*(void *)v42[1] + 24))(v42[1], 0, v40);
            uint64_t v24 = v44.i64[1];
            if (v44.i64[1] >= v45)
            {
              v44.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v44, (uint64_t)v40);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v25 = *(_OWORD *)&v40[16];
              *(_OWORD *)v44.i64[1] = *(_OWORD *)v40;
              *(_OWORD *)(v24 + 16) = v25;
              *(void *)(v24 + 32) = 0;
              *(void *)(v24 + 40) = 0;
              *(void *)(v24 + 48) = 0;
              *(void *)(v24 + 56) = 0;
              *(_OWORD *)(v24 + 32) = *(_OWORD *)&v40[32];
              *(void *)(v24 + 48) = *(void *)&v40[48];
              memset(&v40[32], 0, 24);
              *(void *)(v24 + 64) = 0;
              *(void *)(v24 + 72) = 0;
              *(_OWORD *)(v24 + 56) = *(_OWORD *)__p;
              *(void *)(v24 + 72) = v42[0];
              __p[0] = 0;
              __p[1] = 0;
              v42[0] = 0;
              uint64_t v26 = v42[1];
              *(void *)(v24 + 85) = *(void *)((char *)&v42[1] + 5);
              *(void *)(v24 + 80) = v26;
              v44.i64[1] = v24 + 96;
            }
            if (*(void *)&v40[32])
            {
              *(void *)&v40[40] = *(void *)&v40[32];
              operator delete(*(void **)&v40[32]);
            }
LABEL_23:
            uint64_t v14 = v44.i64[1];
            ++v16;
            if (v44.i64[0] == v44.i64[1]) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v27 = 0;
LABEL_25:
  *(void *)long long v40 = &v44;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  return v27;
}

void sub_1BCF23514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void *std::__state<char>::~__state(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  __n128 v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      long long v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawDistanceSample>>(v13);
      uint64_t v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      uint64_t v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      BOOL v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *BOOL v18 = v20;
        BOOL v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      uint64_t v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      long long v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        long long v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    BOOL v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    BOOL v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health::FileExtent>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  uint64_t v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  uint64_t v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    uint64_t v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF238C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF23918(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  std::pair<const char *, const char *> v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = &v7[96 * v2];
  *(_OWORD *)std::vector<std::pair<unsigned long, const char *>>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v13 = v9 + 96;
  v25.i64[1] = (uint64_t)(v9 + 96);
  std::vector<std::csub_match>::size_type v26 = v10;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::pair<unsigned long, const char *>>::pointer v17 = &v9[v16];
      uint64_t v18 = v14 + v16;
      long long v19 = *(_OWORD *)(v14 + v16 - 80);
      *((_OWORD *)v17 - 6) = *(_OWORD *)(v14 + v16 - 96);
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 8) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)(v14 + v16 - 64);
      *((void *)v17 - 6) = *(void *)(v14 + v16 - 48);
      *(void *)(v18 - 64) = 0;
      *(void *)(v18 - 56) = 0;
      *(void *)(v18 - 48) = 0;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)(v14 + v16 - 40);
      *((void *)v17 - 3) = *(void *)(v14 + v16 - 24);
      *(void *)(v18 - 40) = 0;
      *(void *)(v18 - 32) = 0;
      *(void *)(v18 - 24) = 0;
      uint64_t v20 = *(void *)(v14 + v16 - 16);
      *(void *)(v17 - 11) = *(void *)(v14 + v16 - 11);
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (v14 + v16 != v15);
    int64x2_t v21 = *a1;
    v9 += v16;
    uint64_t v13 = (char *)v25.i64[1];
    unint64_t v10 = v26;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v25 = v21;
  long long v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  std::vector<std::csub_match>::size_type v26 = v22;
  uint64_t v24 = v21.i64[0];
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)&v24);
  return v13;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<std::__state<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<_HDWrappedSource>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BCF23C00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BCF23C74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health::FileExtent>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 42 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      std::vector<std::csub_match>::pointer v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        long long v87 = a1 + 3;
        unint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v25);
        uint64_t v84 = &v83[8 * v6];
        unsigned int v85 = v84;
        uint64_t v86 = &v83[8 * v26];
        uint64_t v82 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v83, &v82);
        uint64_t v28 = v83;
        std::pair<const char *, const char *> v27 = v84;
        uint64_t v29 = v85;
        uint64_t v30 = v86;
        uint64_t v31 = a1[2];
        if (v31 == a1[1])
        {
          unint64_t v47 = v84;
        }
        else
        {
          do
          {
            if (v27 == v28)
            {
              if (v29 >= v30)
              {
                if (v30 == v27) {
                  unint64_t v37 = 1;
                }
                else {
                  unint64_t v37 = (v30 - v27) >> 2;
                }
                uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v37);
                uint64_t v28 = v38;
                unint64_t v32 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v41 = v29 - v27;
                BOOL v40 = v29 == v27;
                uint64_t v29 = v32;
                if (!v40)
                {
                  uint64_t v29 = &v32[v41 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v42 = 8 * (v41 >> 3);
                  uint64_t v43 = v32;
                  int64x2_t v44 = v27;
                  do
                  {
                    uint64_t v45 = *(void *)v44;
                    v44 += 8;
                    *(void *)uint64_t v43 = v45;
                    v43 += 8;
                    v42 -= 8;
                  }
                  while (v42);
                }
                uint64_t v30 = &v38[8 * v39];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                uint64_t v33 = (v30 - v29) >> 3;
                if (v33 >= -1) {
                  uint64_t v34 = v33 + 1;
                }
                else {
                  uint64_t v34 = v33 + 2;
                }
                uint64_t v35 = v34 >> 1;
                unint64_t v32 = &v27[8 * (v34 >> 1)];
                char v36 = v27;
                if (v29 != v27)
                {
                  memmove(v32, v27, v29 - v27);
                  char v36 = v29;
                }
                uint64_t v29 = &v36[8 * v35];
                uint64_t v28 = v27;
              }
            }
            else
            {
              unint64_t v32 = v27;
            }
            uint64_t v46 = *(void *)(v31 - 8);
            v31 -= 8;
            *((void *)v32 - 1) = v46;
            unint64_t v47 = v32 - 8;
            std::pair<const char *, const char *> v27 = v47;
          }
          while (v31 != a1[1]);
        }
        char v62 = (char *)*a1;
        *a1 = v28;
        a1[1] = v47;
        a1[2] = v29;
        a1[3] = v30;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_54;
      }
      if (v23 != v5)
      {
        unint64_t v83 = (char *)operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v83);
LABEL_54:
        uint64_t v4 = (char *)a1[1];
        unint64_t v9 = a1[5] + a1[4];
        goto LABEL_55;
      }
      unint64_t v83 = (char *)operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v83);
      unint64_t v59 = (void *)a1[1];
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[2];
      uint64_t v61 = *v59;
      uint64_t v60 = (char *)(v59 + 1);
      uint64_t v11 = v61;
      a1[1] = v60;
      if (v5 == (char *)a1[3])
      {
        uint64_t v67 = (uint64_t)&v60[-*a1];
        if ((unint64_t)v60 > *a1)
        {
          uint64_t v68 = v67 >> 3;
          BOOL v15 = v67 >> 3 < -1;
          uint64_t v69 = (v67 >> 3) + 2;
          if (v15) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = v68 + 1;
          }
          uint64_t v71 = -(v70 >> 1);
          uint64_t v72 = v70 >> 1;
          char v73 = &v60[-8 * v72];
          int64_t v74 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v72], v60, v5 - v60);
            uint64_t v60 = (char *)a1[1];
          }
          std::vector<std::pair<unsigned long, const char *>>::size_type v5 = &v73[v74];
          long long v22 = &v60[8 * v71];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1) {
          unint64_t v75 = 1;
        }
        else {
          unint64_t v75 = (uint64_t)&v5[-*a1] >> 2;
        }
        unint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v75);
        uint64_t v50 = &v49[8 * (v75 >> 2)];
        unint64_t v52 = &v49[8 * v76];
        char v77 = (uint64_t *)a1[1];
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = v50;
        uint64_t v78 = a1[2] - (void)v77;
        if (v78)
        {
          std::vector<std::pair<unsigned long, const char *>>::size_type v5 = &v50[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          unint64_t v80 = &v49[8 * (v75 >> 2)];
          do
          {
            uint64_t v81 = *v77++;
            *(void *)unint64_t v80 = v81;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
LABEL_47:
        long long v58 = (char *)*a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      uint64_t v12 = *(void *)v4;
      unint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            std::vector<std::pair<unsigned long, const char *>>::size_type v5 = (char *)a1[1];
          }
          long long v22 = &v5[8 * v18];
          std::vector<std::pair<unsigned long, const char *>>::size_type v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_50;
        }
        if (v5 == (char *)*a1) {
          unint64_t v48 = 1;
        }
        else {
          unint64_t v48 = (uint64_t)&v5[-*a1] >> 2;
        }
        unint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v48);
        uint64_t v50 = &v49[8 * (v48 >> 2)];
        unint64_t v52 = &v49[8 * v51];
        uint64_t v53 = (uint64_t *)a1[1];
        std::vector<std::pair<unsigned long, const char *>>::size_type v5 = v50;
        uint64_t v54 = a1[2] - (void)v53;
        if (v54)
        {
          std::vector<std::pair<unsigned long, const char *>>::size_type v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = 8 * (v54 >> 3);
          uint64_t v56 = &v49[8 * (v48 >> 2)];
          do
          {
            uint64_t v57 = *v53++;
            *(void *)uint64_t v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        goto LABEL_47;
      }
    }
LABEL_50:
    *(void *)std::vector<std::pair<unsigned long, const char *>>::size_type v5 = v11;
    a1[2] += 8;
    goto LABEL_54;
  }
LABEL_55:
  unint64_t v63 = *(void *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  long long v64 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v63 = *(_OWORD *)a2;
  *(_OWORD *)(v63 + 16) = v64;
  *(void *)(v63 + 40) = 0;
  *(void *)(v63 + 48) = 0;
  *(void *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v63 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v63 + 56) = 0;
  *(void *)(v63 + 64) = 0;
  *(void *)(v63 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v63 + 56) = result;
  *(void *)(v63 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v66 = *(void *)(a2 + 80);
  *(void *)(v63 + 85) = *(void *)(a2 + 85);
  *(void *)(v63 + 80) = v66;
  ++a1[5];
  return result;
}

void sub_1BCF241C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  uint64_t v3 = a1[2];
  BOOL v4 = v3 == a1[1];
  uint64_t v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4) {
    uint64_t v5 = 0;
  }
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  BOOL v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      BOOL v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        BOOL v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        std::vector<std::csub_match>::pointer v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)std::vector<std::csub_match>::pointer v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        BOOL v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        BOOL v4 = (char *)a1[1];
      }
      BOOL v15 = &v4[8 * v11];
      BOOL v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)BOOL v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      BOOL v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    BOOL v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    BOOL v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *BOOL v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(void *result, char *a2, char *a3, unint64_t a4)
{
  BOOL v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    __n128 result = operator new(v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000;
    *BOOL v4 = result;
    BOOL v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)BOOL v4 = v10;
    BOOL v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)BOOL v4 = 0;
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  unint64_t v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_1BCF24770(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  unint64_t v2 = (const std::locale *)MEMORY[0x1C187B800]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_1BCF247DC(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_1BCF249B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF24A28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    char v10 = v8 + 1;
    unint64_t v11 = v8 + 1;
    do
    {
      uint64_t v8 = v11;
      unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  BOOL v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    unint64_t v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    char v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, char *__s, char *a3)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer end = a1->__end_;
  uint64_t v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    unint64_t v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (char *)memchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    char v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF2504C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1BCF250F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x1C187B8A0);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_34;
      }
      int v16 = a2[1];
      if (v16 == 66)
      {
        BOOL v17 = 1;
      }
      else
      {
        if (v16 != 98) {
          goto LABEL_34;
        }
        BOOL v17 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
      return a2 + 2;
    }
    if (v6 != 94) {
      goto LABEL_34;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return a2 + 1;
  }
  BOOL v9 = v6 == 40;
  uint64_t v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (v9 || ((BOOL v9 = *v8 == 63, v10 = (char *)(a2 + 2), v9) ? (v11 = v10 == a3) : (v11 = 1), v11))
  {
LABEL_34:
    std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
    unsigned int marked_count = this->__marked_count_;
    if ((char)v7 <= 91)
    {
      uint64_t result = a2;
      switch((char)v7)
      {
        case '$':
        case ')':
          return result;
        case '%':
        case '&':
        case '\'':
        case ',':
        case '-':
          goto LABEL_62;
        case '(':
          if (a2 + 1 == (unsigned __int8 *)a3) {
            goto LABEL_101;
          }
          if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
          {
            p_open_count = &this->__open_count_;
            ++this->__open_count_;
            uint64_t v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
            if (v22 == a3) {
              goto LABEL_101;
            }
            std::vector<std::csub_match>::pointer v23 = v22;
            if (*v22 != 41) {
              goto LABEL_101;
            }
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
            unsigned int v29 = this->__marked_count_;
            p_open_count = &this->__open_count_;
            ++this->__open_count_;
            uint64_t v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
            if (v30 == a3 || (std::vector<std::csub_match>::pointer v23 = v30, *v30 != 41)) {
LABEL_101:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v29);
          }
          --*p_open_count;
          unint64_t v25 = (unsigned __int8 *)(v23 + 1);
          goto LABEL_59;
        case '*':
        case '+':
          goto LABEL_67;
        case '.':
          operator new();
        default:
          if ((char)v7 == 91)
          {
            unint64_t v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(this, (char *)a2, a3);
            goto LABEL_59;
          }
          if ((char)v7 != 63) {
            goto LABEL_62;
          }
          goto LABEL_67;
      }
    }
    uint64_t v24 = ((char)v7 - 92);
    if (v24 <= 0x21)
    {
      if (((1 << (v7 - 92)) & 0x300000006) != 0) {
        return a2;
      }
      if ((char)v7 == 92)
      {
        if (v7 != 92) {
          return a2;
        }
        uint64_t v26 = a2 + 1;
        if (a2 + 1 == (unsigned __int8 *)a3) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        }
        int v27 = *v26;
        unsigned int v28 = v27 - 48;
        if (v27 == 48)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v28);
LABEL_100:
          unint64_t v25 = a2 + 2;
          goto LABEL_63;
        }
        if ((v27 - 49) <= 8)
        {
          unint64_t v25 = a2 + 2;
          if (a2 + 2 == (unsigned __int8 *)a3)
          {
            unint64_t v25 = (unsigned __int8 *)a3;
          }
          else
          {
            while (1)
            {
              int v32 = *v25;
              if ((v32 - 48) > 9) {
                break;
              }
              if (v28 >= 0x19999999) {
                goto LABEL_102;
              }
              ++v25;
              unsigned int v28 = v32 + 10 * v28 - 48;
              if (v25 == (unsigned __int8 *)a3)
              {
                unint64_t v25 = (unsigned __int8 *)a3;
                break;
              }
            }
            if (!v28) {
LABEL_102:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
          }
          if (v28 > marked_count) {
            goto LABEL_102;
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v28);
          if (v25 != v26)
          {
LABEL_59:
            uint64_t result = a2;
            if (v25 == a2) {
              return result;
            }
            goto LABEL_63;
          }
          LOBYTE(v27) = *v26;
        }
        if ((char)v27 > 99)
        {
          if ((char)v27 == 119)
          {
            uint64_t v33 = this;
            BOOL v34 = 0;
            goto LABEL_92;
          }
          if ((char)v27 == 115)
          {
            uint64_t v41 = this;
            BOOL v42 = 0;
LABEL_98:
            started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v41, v42);
            int v38 = started->__mask_ | 0x4000;
            goto LABEL_99;
          }
          if ((char)v27 != 100)
          {
LABEL_93:
            BOOL v40 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
            if (v40 == v26) {
              unint64_t v25 = a2;
            }
            else {
              unint64_t v25 = v40;
            }
            goto LABEL_59;
          }
          uint64_t v35 = this;
          BOOL v36 = 0;
        }
        else
        {
          if ((char)v27 != 68)
          {
            if ((char)v27 != 83)
            {
              if ((char)v27 == 87)
              {
                uint64_t v33 = this;
                BOOL v34 = 1;
LABEL_92:
                uint64_t v39 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v33, v34);
                v39->__mask_ |= 0x500u;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v39, 95);
                goto LABEL_100;
              }
              goto LABEL_93;
            }
            uint64_t v41 = this;
            BOOL v42 = 1;
            goto LABEL_98;
          }
          uint64_t v35 = this;
          BOOL v36 = 1;
        }
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v35, v36);
        int v38 = started->__mask_ | 0x400;
LABEL_99:
        started->__mask_ = v38;
        goto LABEL_100;
      }
      if (v24 == 31) {
LABEL_67:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
    unint64_t v25 = a2 + 1;
LABEL_63:
    size_t v31 = this->__marked_count_ + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v25, (unsigned __int8 *)a3, end, marked_count + 1, v31);
  }
  int v12 = *v10;
  if (v12 == 33)
  {
    std::regex_traits<char>::regex_traits(&v43.__traits_);
    memset(&v43.__flags_, 0, 40);
    v43.__flags_ = this->__flags_;
    uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v43, a2 + 3, a3);
    unsigned int v18 = v43.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v43, 1, this->__marked_count_);
    this->__marked_count_ += v18;
    if (v13 == a3 || *v13 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
  }
  else
  {
    if (v12 != 61) {
      goto LABEL_34;
    }
    std::regex_traits<char>::regex_traits(&v43.__traits_);
    memset(&v43.__flags_, 0, 40);
    v43.__flags_ = this->__flags_;
    uint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v43, a2 + 3, a3);
    unsigned int v14 = v43.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v43, 0, this->__marked_count_);
    this->__marked_count_ += v14;
    if (v13 == a3 || *v13 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
  }
  if (v43.__start_.__cntrl_) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43.__start_.__cntrl_);
  }
  std::locale::~locale(&v43.__traits_.__loc_);
  uint64_t result = (unsigned __int8 *)(v13 + 1);
  if (v13 + 1 == (char *)a2)
  {
    int v7 = *a2;
    goto LABEL_34;
  }
  return result;
}

void sub_1BCF25AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      uint64_t v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        uint64_t v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    uint64_t v15 = a2 + 1;
    int v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            uint64_t v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              uint64_t v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::vector<std::csub_match>::pointer v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          uint64_t v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            uint64_t v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            uint64_t v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                uint64_t v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    uint64_t v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    uint64_t v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      uint64_t v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF260BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F171FE98;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F171FE98;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F171FEE0;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F171FEE0;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x1C187B8A0);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    uint64_t v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:

  operator delete(begin);
}

void sub_1BCF268A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_243;
    }
    uint64_t v4 = (uint64_t)a1;
    uint64_t v5 = (void **)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, a2[1] == 94);
    if (v5 == (void **)a3) {
      goto LABEL_243;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(v4 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      uint64_t v5 = (void **)((char *)v5 + 1);
    }
    if (v5 == (void **)a3) {
      goto LABEL_243;
    }
    unint64_t v88 = (void **)(v7 + 88);
    uint64_t v89 = v7 + 16;
    char v8 = a3 - 4;
    uint64_t v90 = v4;
    while (1)
    {
      int v9 = (char *)v5;
      unint64_t v10 = a3;
      if (v5 == (void **)a3) {
        goto LABEL_152;
      }
      int v11 = *(unsigned __int8 *)v5;
      unint64_t v10 = (char *)v5;
      if (v11 == 93) {
        goto LABEL_152;
      }
      int v12 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v98 = 0;
      uint64_t v13 = 0;
      unint64_t v10 = (char *)v5;
      if ((char *)v5 + 1 != a3 && v11 == 91)
      {
        int v14 = *((unsigned __int8 *)v5 + 1);
        switch(v14)
        {
          case '.':
            unint64_t v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(v4, (char *)v5 + 2, a3, (uint64_t)__p);
            uint64_t v13 = (void *)HIBYTE(v98);
            int v12 = __p[1];
            break;
          case ':':
            if (a3 - ((char *)v5 + 2) < 2) {
              goto LABEL_242;
            }
            for (unint64_t i = 0; *((unsigned char *)v5 + i + 2) != 58 || *((unsigned char *)v5 + i + 3) != 93; ++i)
            {
              if (v8 - (char *)v5 == i) {
                goto LABEL_242;
              }
            }
            char v21 = (char *)v5 + i + 2;
            if (v21 == a3) {
LABEL_242:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v22 = *(_DWORD *)(v4 + 24);
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v103, (char *)v5 + 2, v21, i);
            std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(v103.__end_);
            if (SHIBYTE(v103.__end_) >= 0) {
              first = &v103;
            }
            else {
              first = v103.__first_;
            }
            if (SHIBYTE(v103.__end_) < 0) {
              std::__split_buffer<std::string>::pointer end_high = v103.__begin_;
            }
            (*(void (**)(void, void *, char *))(**(void **)(v4 + 8) + 48))(*(void *)(v4 + 8), first, (char *)end_high + (void)first);
            if (SHIBYTE(v103.__end_) >= 0) {
              unint64_t v25 = (const char *)&v103;
            }
            else {
              unint64_t v25 = (const char *)v103.__first_;
            }
            std::regex_traits<char>::char_class_type classname = std::__get_classname(v25, v22 & 1);
            if (SHIBYTE(v103.__end_) < 0) {
              operator delete(v103.__first_);
            }
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v27 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            unsigned int v28 = (char *)v5 + i;
            goto LABEL_148;
          case '=':
            uint64_t v15 = (char *)v5 + 2;
            if (a3 - ((char *)v5 + 2) < 2) {
              goto LABEL_242;
            }
            for (uint64_t j = 0; v9[j + 2] != 61 || v9[j + 3] != 93; ++j)
            {
              if (v8 - v9 == j) {
                goto LABEL_242;
              }
            }
            unsigned int v29 = &v9[j + 2];
            if (v29 == a3) {
              goto LABEL_242;
            }
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v101, v4, v15, v29);
            if (SHIBYTE(v102) < 0)
            {
              unint64_t v30 = *((void *)&v101 + 1);
              if (!*((void *)&v101 + 1)) {
LABEL_244:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              size_t v31 = (char *)v101;
            }
            else
            {
              unint64_t v30 = HIBYTE(v102);
              if (!HIBYTE(v102)) {
                goto LABEL_244;
              }
              size_t v31 = (char *)&v101;
            }
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v103, v31, &v31[v30], v30);
            (*(void (**)(std::string::size_type *__return_ptr))(**(void **)(v4 + 16) + 32))(__sz);
            std::string::size_type v33 = HIBYTE(v100);
            if (v100 < 0) {
              std::string::size_type v33 = __sz[1];
            }
            if (v33 != 1)
            {
              if (v33 == 12)
              {
                BOOL v34 = __sz;
                if (v100 < 0) {
                  BOOL v34 = (std::string::size_type *)__sz[0];
                }
                *((unsigned char *)v34 + 11) = *((unsigned char *)v34 + 3);
              }
              else if (SHIBYTE(v100) < 0)
              {
                *(unsigned char *)__sz[0] = 0;
                __sz[1] = 0;
              }
              else
              {
                LOBYTE(__sz[0]) = 0;
                HIBYTE(v100) = 0;
              }
            }
            if (SHIBYTE(v103.__end_) < 0) {
              operator delete(v103.__first_);
            }
            std::string::size_type v40 = HIBYTE(v100);
            int v41 = SHIBYTE(v100);
            std::string::size_type v42 = __sz[1];
            if (v100 < 0) {
              std::string::size_type v40 = __sz[1];
            }
            if (v40)
            {
              unint64_t v44 = *(void *)(v7 + 144);
              unint64_t v43 = *(void *)(v7 + 152);
              if (v44 >= v43)
              {
                unint64_t v48 = *(void *)(v7 + 136);
                unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - v48) >> 3) + 1;
                if (v49 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - v48) >> 3);
                if (2 * v50 > v49) {
                  unint64_t v49 = 2 * v50;
                }
                if (v50 >= 0x555555555555555) {
                  unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v51 = v49;
                }
                v103.__end_cap_.__value_ = (std::allocator<std::string> *)(v7 + 152);
                if (v51)
                {
                  if (v51 > 0xAAAAAAAAAAAAAAALL) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v52 = (std::string *)operator new(24 * v51);
                }
                else
                {
                  unint64_t v52 = 0;
                }
                std::__split_buffer<std::string>::pointer begin = (std::string *)((char *)v52 + 8 * ((uint64_t)(v44 - v48) >> 3));
                v103.__first_ = v52;
                v103.__begin_ = begin;
                v103.__end_ = begin;
                v103.__end_cap_.__value_ = &v52[v51];
                if (v41 < 0)
                {
                  std::string::__init_copy_ctor_external(begin, (const std::string::value_type *)__sz[0], v42);
                  unint64_t v48 = *(void *)(v7 + 136);
                  unint64_t v44 = *(void *)(v7 + 144);
                  std::__split_buffer<std::string>::pointer begin = v103.__begin_;
                  std::__split_buffer<std::string>::pointer end = v103.__end_;
                }
                else
                {
                  *(_OWORD *)&begin->__r_.__value_.__l.__data_ = *(_OWORD *)__sz;
                  begin->__r_.__value_.__r.__words[2] = v100;
                  std::__split_buffer<std::string>::pointer end = (std::string *)((char *)v52 + 8 * ((uint64_t)(v44 - v48) >> 3));
                }
                if (v44 == v48)
                {
                  int64x2_t v58 = vdupq_n_s64(v48);
                }
                else
                {
                  do
                  {
                    long long v57 = *(_OWORD *)(v44 - 24);
                    begin[-1].__r_.__value_.__r.__words[2] = *(void *)(v44 - 8);
                    *(_OWORD *)&begin[-1].__r_.__value_.__l.__data_ = v57;
                    --begin;
                    *(void *)(v44 - 16) = 0;
                    *(void *)(v44 - 8) = 0;
                    *(void *)(v44 - 24) = 0;
                    v44 -= 24;
                  }
                  while (v44 != v48);
                  int64x2_t v58 = *(int64x2_t *)(v7 + 136);
                }
                std::__split_buffer<std::string>::pointer v54 = end + 1;
                *(void *)(v7 + 136) = begin;
                *(void *)(v7 + 144) = end + 1;
                *(int64x2_t *)&v103.__begin_ = v58;
                unint64_t v59 = *(std::string **)(v7 + 152);
                *(void *)(v7 + 152) = v103.__end_cap_.__value_;
                v103.__end_cap_.__value_ = v59;
                v103.__first_ = (std::__split_buffer<std::string>::pointer)v58.i64[0];
                std::__split_buffer<std::string>::~__split_buffer(&v103);
              }
              else
              {
                if (SHIBYTE(v100) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), (const std::string::value_type *)__sz[0], __sz[1]);
                }
                else
                {
                  long long v45 = *(_OWORD *)__sz;
                  *(void *)(v44 + 16) = v100;
                  *(_OWORD *)unint64_t v44 = v45;
                }
                std::__split_buffer<std::string>::pointer v54 = (std::__split_buffer<std::string>::pointer)(v44 + 24);
                *(void *)(v7 + 144) = v44 + 24;
              }
              *(void *)(v7 + 144) = v54;
            }
            else
            {
              uint64_t v46 = HIBYTE(v102);
              if (SHIBYTE(v102) < 0) {
                uint64_t v46 = *((void *)&v101 + 1);
              }
              if (v46 == 2)
              {
                uint64_t v53 = (char *)&v101;
                if (SHIBYTE(v102) < 0) {
                  uint64_t v53 = (char *)v101;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *v53, v53[1]);
              }
              else
              {
                if (v46 != 1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                unint64_t v47 = (char *)&v101;
                if (SHIBYTE(v102) < 0) {
                  unint64_t v47 = (char *)v101;
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *v47);
              }
            }
            if (SHIBYTE(v100) < 0) {
              operator delete((void *)__sz[0]);
            }
            char v8 = a3 - 4;
            uint64_t v4 = v90;
            if (SHIBYTE(v102) < 0) {
              operator delete((void *)v101);
            }
            char v27 = 0;
            unsigned int v28 = &v9[j];
LABEL_148:
            uint64_t v5 = (void **)(v28 + 4);
            int v38 = v9;
            goto LABEL_149;
          default:
            int v12 = 0;
            uint64_t v13 = 0;
            unint64_t v10 = (char *)v5;
            break;
        }
      }
      uint64_t v5 = (void **)(*(_DWORD *)(v4 + 24) & 0x1F0);
      if ((char)v13 >= 0) {
        int v12 = v13;
      }
      if (!v12)
      {
        if ((*(_DWORD *)(v4 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          int v18 = *v10;
          if (v18 == 92)
          {
            uint64_t v19 = v10 + 1;
            if ((*(_DWORD *)(v4 + 24) & 0x1F0) != 0) {
              uint64_t v20 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)v4, v19, a3, (uint64_t *)__p);
            }
            else {
              uint64_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)v4, (unsigned __int8 *)v19, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            }
            unint64_t v10 = v20;
            goto LABEL_76;
          }
        }
        else
        {
          LOBYTE(v18) = *v10;
        }
        if ((char)v13 < 0)
        {
          int v32 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v98) = 1;
          int v32 = __p;
        }
        *(unsigned char *)int v32 = v18;
        *((unsigned char *)v32 + 1) = 0;
        ++v10;
      }
LABEL_76:
      if (v10 != a3)
      {
        int v35 = *v10;
        if (v35 != 93)
        {
          unint64_t v37 = v10 + 1;
          if (v10 + 1 != a3 && v35 == 45 && *v37 != 93)
          {
            v95[0] = 0;
            v95[1] = 0;
            uint64_t v96 = 0;
            int v38 = v10 + 2;
            if (v10 + 2 != a3 && *v37 == 91 && *v38 == 46)
            {
              uint64_t v39 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(v4, v10 + 3, a3, (uint64_t)v95);
              goto LABEL_156;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v37) = *v37;
              if (v37 == 92)
              {
                if (v5) {
                  uint64_t v39 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)v4, v10 + 2, a3, (uint64_t *)v95);
                }
                else {
                  uint64_t v39 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)v4, (unsigned __int8 *)v10 + 2, (unsigned __int8 *)a3, (uint64_t)v95, v7);
                }
LABEL_156:
                int v38 = (char *)v39;
LABEL_157:
                uint64_t v5 = v91;
                *(_OWORD *)unint64_t v93 = *(_OWORD *)__p;
                uint64_t v94 = v98;
                __p[1] = 0;
                v98 = 0;
                *(_OWORD *)uint64_t v91 = *(_OWORD *)v95;
                int64_t v92 = v96;
                v95[0] = 0;
                v95[1] = 0;
                uint64_t v96 = 0;
                __p[0] = 0;
                if (*(unsigned char *)(v7 + 170))
                {
                  if (*(unsigned char *)(v7 + 169))
                  {
                    BOOL v60 = SHIBYTE(v94) < 0;
                    uint64_t v61 = (void *)HIBYTE(v94);
                    if (SHIBYTE(v94) < 0) {
                      uint64_t v61 = v93[1];
                    }
                    if (v61)
                    {
                      unint64_t v62 = 0;
                      do
                      {
                        if (v60) {
                          unint64_t v63 = (void **)v93[0];
                        }
                        else {
                          unint64_t v63 = v93;
                        }
                        char v64 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *((char *)v63 + v62));
                        if (SHIBYTE(v94) >= 0) {
                          long long v65 = v93;
                        }
                        else {
                          long long v65 = (void **)v93[0];
                        }
                        *((unsigned char *)v65 + v62++) = v64;
                        BOOL v60 = SHIBYTE(v94) < 0;
                        uint64_t v66 = (void *)HIBYTE(v94);
                        if (SHIBYTE(v94) < 0) {
                          uint64_t v66 = v93[1];
                        }
                      }
                      while (v62 < (unint64_t)v66);
                    }
                    BOOL v67 = v92 < 0;
                    uint64_t v68 = (void *)HIBYTE(v92);
                    if (v92 < 0) {
                      uint64_t v68 = v91[1];
                    }
                    if (v68)
                    {
                      unint64_t v69 = 0;
                      do
                      {
                        if (v67) {
                          uint64_t v70 = (void **)v91[0];
                        }
                        else {
                          uint64_t v70 = v91;
                        }
                        char v71 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *((char *)v70 + v69));
                        if (v92 >= 0) {
                          uint64_t v72 = v91;
                        }
                        else {
                          uint64_t v72 = (void **)v91[0];
                        }
                        *((unsigned char *)v72 + v69++) = v71;
                        BOOL v67 = v92 < 0;
                        char v73 = (void *)HIBYTE(v92);
                        if (v92 < 0) {
                          char v73 = v91[1];
                        }
                      }
                      while (v69 < (unint64_t)v73);
                    }
                  }
                  int64_t v74 = (char *)HIBYTE(v94);
                  if (SHIBYTE(v94) >= 0) {
                    unint64_t v75 = (char *)v93;
                  }
                  else {
                    unint64_t v75 = (char *)v93[0];
                  }
                  if (SHIBYTE(v94) < 0) {
                    int64_t v74 = (char *)v93[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v101, v89, v75, &v74[(void)v75]);
                  uint64_t v76 = (char *)HIBYTE(v92);
                  if (v92 >= 0) {
                    char v77 = (char *)v91;
                  }
                  else {
                    char v77 = (char *)v91[0];
                  }
                  if (v92 < 0) {
                    uint64_t v76 = (char *)v91[1];
                  }
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__sz, v89, v77, &v76[(void)v77]);
                  *(_OWORD *)&v103.__first_ = v101;
                  v103.__end_ = v102;
                  BOOL v102 = 0;
                  long long v101 = 0uLL;
                  v103.__end_cap_ = *(std::__compressed_pair<std::string *> *)__sz;
                  int64_t v104 = v100;
                  __sz[0] = 0;
                  __sz[1] = 0;
                  int64_t v100 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v88, (long long *)&v103);
                  if (SHIBYTE(v104) < 0) {
                    operator delete(v103.__end_cap_.__value_);
                  }
                  if (SHIBYTE(v103.__end_) < 0) {
                    operator delete(v103.__first_);
                  }
                  if (SHIBYTE(v100) < 0) {
                    operator delete((void *)__sz[0]);
                  }
                  if (SHIBYTE(v102) < 0)
                  {
                    std::__split_buffer<std::string>::pointer v78 = (std::__split_buffer<std::string>::pointer)v101;
                    goto LABEL_227;
                  }
                }
                else
                {
                  uint64_t v79 = (void *)HIBYTE(v94);
                  if (SHIBYTE(v94) < 0) {
                    uint64_t v79 = v93[1];
                  }
                  if (v79 != (void *)1) {
                    goto LABEL_246;
                  }
                  unint64_t v80 = (void *)HIBYTE(v92);
                  if (v92 < 0) {
                    unint64_t v80 = v91[1];
                  }
                  if (v80 != (void *)1) {
LABEL_246:
                  }
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(unsigned char *)(v7 + 169))
                  {
                    if (SHIBYTE(v94) >= 0) {
                      uint64_t v81 = v93;
                    }
                    else {
                      uint64_t v81 = (void **)v93[0];
                    }
                    char v82 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v81);
                    if (SHIBYTE(v94) >= 0) {
                      unint64_t v83 = v93;
                    }
                    else {
                      unint64_t v83 = (void **)v93[0];
                    }
                    *(unsigned char *)unint64_t v83 = v82;
                    if (v92 >= 0) {
                      uint64_t v84 = v91;
                    }
                    else {
                      uint64_t v84 = (void **)v91[0];
                    }
                    char v85 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)v84);
                    if (v92 >= 0) {
                      uint64_t v86 = v91;
                    }
                    else {
                      uint64_t v86 = (void **)v91[0];
                    }
                    *(unsigned char *)uint64_t v86 = v85;
                  }
                  *(_OWORD *)&v103.__first_ = *(_OWORD *)v93;
                  v103.__end_ = v94;
                  v93[0] = 0;
                  v93[1] = 0;
                  uint64_t v94 = 0;
                  v103.__end_cap_ = *(std::__compressed_pair<std::string *> *)v91;
                  int64_t v104 = v92;
                  v91[0] = 0;
                  v91[1] = 0;
                  int64_t v92 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v88, (long long *)&v103);
                  if (SHIBYTE(v104) < 0) {
                    operator delete(v103.__end_cap_.__value_);
                  }
                  if (SHIBYTE(v103.__end_) < 0)
                  {
                    std::__split_buffer<std::string>::pointer v78 = v103.__first_;
LABEL_227:
                    operator delete(v78);
                  }
                }
                if (SHIBYTE(v92) < 0) {
                  operator delete(v91[0]);
                }
                if (SHIBYTE(v94) < 0) {
                  operator delete(v93[0]);
                }
                if (SHIBYTE(v96) < 0) {
                  operator delete(v95[0]);
                }
                char v27 = 1;
LABEL_149:
                if (SHIBYTE(v98) < 0) {
                  operator delete(__p[0]);
                }
                unint64_t v10 = v38;
                if ((v27 & 1) == 0) {
                  goto LABEL_153;
                }
                goto LABEL_152;
              }
            }
            else
            {
              LOBYTE(v37) = *v37;
            }
            HIBYTE(v96) = 1;
            LOWORD(v95[0]) = v37;
            goto LABEL_157;
          }
        }
      }
      if (SHIBYTE(v98) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            BOOL v36 = (void **)__p[0];
LABEL_85:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v36);
LABEL_96:
            char v27 = 1;
            int v38 = v10;
            goto LABEL_149;
          }
          BOOL v36 = (void **)__p[0];
LABEL_95:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v36, *((char *)v36 + 1));
          goto LABEL_96;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v98))
      {
        BOOL v36 = __p;
        if (HIBYTE(v98) == 1) {
          goto LABEL_85;
        }
        goto LABEL_95;
      }
LABEL_152:
      uint64_t v5 = (void **)v10;
LABEL_153:
      if (v5 == (void **)v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93) {
            return v9 + 1;
          }
        }
LABEL_243:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1BCF274DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  *(void *)(v46 + 144) = v47;
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF27750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF278A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_89;
    }
    unsigned __int8 v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u) {
      goto LABEL_89;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1BCF27E14(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  MEMORY[0x1C187B8A0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF27ED0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F171FF70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F171FF70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F171FFB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F171FFB8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1720048;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1720048;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1720090;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1F1720090;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      char v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_1BCF28BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::basic_regex<char>::value_type v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  __int16 v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  int v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  void *v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  MEMORY[0x1C187B8A0](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = &v5[-v6];
      uint64_t v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        unint64_t v9 = v4 - v6;
        if (2 * v9 > v8) {
          uint64_t v8 = 2 * v9;
        }
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v10 = v8;
        }
        if (v10) {
          uint64_t v11 = operator new(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v19 = &v7[(void)v11];
        uint64_t v20 = (char *)v11 + v10;
        v7[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v7[(void)v11 + 1];
        if (v5 != (unsigned char *)v6)
        {
          char v21 = &v5[~v6];
          do
          {
            char v22 = *--v5;
            (v21--)[(void)v11] = v22;
          }
          while (v5 != (unsigned char *)v6);
LABEL_45:
          unsigned int v5 = *(unsigned char **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      unint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = &v5[-v23];
      uint64_t v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        unint64_t v26 = v12 - v23;
        if (2 * v26 > v25) {
          uint64_t v25 = 2 * v26;
        }
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v27 = v25;
        }
        if (v27) {
          uint64_t v11 = operator new(v27);
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v19 = &v24[(void)v11];
        uint64_t v20 = (char *)v11 + v27;
        v24[(void)v11] = v2;
        uint64_t v18 = (uint64_t)&v24[(void)v11 + 1];
        if (v5 != (unsigned char *)v23)
        {
          unint64_t v30 = &v5[~v23];
          do
          {
            char v31 = *--v5;
            (v30--)[(void)v11] = v31;
          }
          while (v5 != (unsigned char *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12) {
    goto LABEL_22;
  }
  unint64_t v13 = *(void *)(a1 + 40);
  unsigned __int8 v14 = &v5[-v13];
  uint64_t v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0) {
    goto LABEL_50;
  }
  unint64_t v16 = v12 - v13;
  if (2 * v16 > v15) {
    uint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v17 = v15;
  }
  if (v17) {
    uint64_t v11 = operator new(v17);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v19 = &v14[(void)v11];
  uint64_t v20 = (char *)v11 + v17;
  v14[(void)v11] = v2;
  uint64_t v18 = (uint64_t)&v14[(void)v11 + 1];
  if (v5 != (unsigned char *)v13)
  {
    unsigned int v28 = &v5[~v13];
    do
    {
      char v29 = *--v5;
      (v28--)[(void)v11] = v29;
    }
    while (v5 != (unsigned char *)v13);
    goto LABEL_45;
  }
LABEL_46:
  uint64_t v11 = v19;
LABEL_47:
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v18;
  *(void *)(a1 + 56) = v20;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v18;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x1C187B8A0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v10 = 0;
    LODWORD(v11) = this->__negate_;
    goto LABEL_178;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_34;
  }
  char v6 = *current;
  LOBYTE(v90) = *current;
  char v7 = current[1];
  HIBYTE(v90) = v7;
  if (this->__icase_)
  {
    LOBYTE(v90) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v90) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v90;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v91, (const char *)&__s);
  std::string __p = v91;
  std::string::size_type size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v91.__r_.__value_.__r.__words[2]);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v91.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    goto LABEL_14;
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v91);
  if (v9 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v91;
  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v91.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v91.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_115;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_115:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
LABEL_14:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_16;
    }
LABEL_34:
    uint64_t v11 = 0;
    uint64_t v10 = 1;
    goto LABEL_35;
  }
  std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v21) {
    goto LABEL_34;
  }
LABEL_16:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v13 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v13)
  {
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    p_second = &begin->second;
    while (v90 != *(p_second - 1) || HIBYTE(v90) != *p_second)
    {
      p_second += 2;
      if (!--v14) {
        goto LABEL_25;
      }
    }
    goto LABEL_175;
  }
LABEL_25:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    LODWORD(v11) = 0;
    goto LABEL_122;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v90, (char *)&v91);
  size_t v17 = this->__ranges_.__begin_;
  if (this->__ranges_.__end_ == v17)
  {
LABEL_32:
    uint64_t v11 = 0;
    char v20 = 1;
  }
  else
  {
    unint64_t v18 = 0;
    uint64_t v19 = 3;
    while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17->first.__r_.__value_.__r.__words[v19 - 3], (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_ + v19 * 8)) << 24) >= 0x1000000)
    {
      ++v18;
      size_t v17 = this->__ranges_.__begin_;
      v19 += 6;
      if (v18 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v17) >> 4)) {
        goto LABEL_32;
      }
    }
    char v20 = 0;
    uint64_t v11 = 1;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if ((v11 & 1) == 0)
  {
LABEL_122:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_157;
    }
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v90, (char *)&v91);
    std::vector<std::string>::pointer v58 = this->__equivalences_.__begin_;
    uint64_t v59 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    int64_t v60 = (char *)this->__equivalences_.__end_ - (char *)v58;
    if (v60)
    {
      unint64_t v61 = 0;
      unint64_t v62 = v60 / 24;
      size_t v64 = __s.__r_.__value_.__l.__size_;
      unint64_t v63 = (const void *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v65 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v65 = __s.__r_.__value_.__l.__size_;
      }
      if (v62 <= 1) {
        uint64_t v66 = 1;
      }
      else {
        uint64_t v66 = v60 / 24;
      }
      for (BOOL i = 1; ; BOOL i = v61 < v62)
      {
        uint64_t v68 = &v58[v61];
        std::string::size_type v69 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
        int v70 = (char)v69;
        if ((v69 & 0x80u) != 0) {
          std::string::size_type v69 = v68->__r_.__value_.__l.__size_;
        }
        if (v65 != v69) {
          goto LABEL_143;
        }
        char v71 = v70 >= 0 ? &v58[v61] : (std::string *)v68->__r_.__value_.__r.__words[0];
        if ((v59 & 0x80) == 0) {
          break;
        }
        BOOL v86 = i;
        uint64_t v73 = v66;
        unint64_t v88 = v58;
        int64_t v74 = v63;
        size_t v75 = v64;
        if (!memcmp(v63, v71, v64))
        {
          operator delete(__s.__r_.__value_.__l.__data_);
          if (!v86)
          {
LABEL_156:
            LODWORD(v11) = 1;
            goto LABEL_157;
          }
LABEL_149:
          LODWORD(v11) = 1;
LABEL_177:
          uint64_t v10 = 2;
          goto LABEL_178;
        }
        ++v61;
        uint64_t v66 = v73;
        size_t v64 = v75;
        unint64_t v63 = v74;
        std::vector<std::string>::pointer v58 = v88;
        if (v61 == v73) {
          goto LABEL_151;
        }
LABEL_147:
        ;
      }
      if (!v59)
      {
LABEL_148:
        if (!i) {
          goto LABEL_156;
        }
        goto LABEL_149;
      }
      uint64_t v72 = 0;
      while (__s.__r_.__value_.__s.__data_[v72] == v71->__r_.__value_.__s.__data_[v72])
      {
        if (v59 == ++v72) {
          goto LABEL_148;
        }
      }
LABEL_143:
      if (++v61 == v66) {
        goto LABEL_150;
      }
      goto LABEL_147;
    }
LABEL_150:
    if ((v59 & 0x80) != 0) {
LABEL_151:
    }
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_157:
    if ((char)v90 < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v78 = tab[v90];
      if (((v78 & mask) != 0 || v90 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v90) & 0x80000000) == 0
        && ((tab[HIBYTE(v90)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v90) == 95))
      {
        goto LABEL_175;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((neg_mask & v78) != 0 || v90 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_174:
        int v80 = v11;
LABEL_176:
        LODWORD(v11) = v80;
        goto LABEL_177;
      }
    }
    if ((SHIBYTE(v90) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v90)] & neg_mask) == 0)
      {
        int v80 = 1;
        if (HIBYTE(v90) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_176;
        }
      }
      goto LABEL_174;
    }
LABEL_175:
    int v80 = 1;
    goto LABEL_176;
  }
  if ((v20 & 1) == 0) {
    goto LABEL_177;
  }
  uint64_t v10 = 2;
LABEL_35:
  unsigned __int8 v22 = *a2->__current_;
  v91.__r_.__value_.__s.__data_[0] = v22;
  if (this->__icase_)
  {
    unsigned __int8 v22 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v22);
    v91.__r_.__value_.__s.__data_[0] = v22;
  }
  std::vector<char>::pointer v23 = this->__chars_.__begin_;
  unint64_t v24 = this->__chars_.__end_ - v23;
  if (v24)
  {
    if (v24 <= 1) {
      unint64_t v24 = 1;
    }
    while (1)
    {
      int v25 = *v23++;
      if (v25 == v22) {
        break;
      }
      if (!--v24) {
        goto LABEL_42;
      }
    }
LABEL_112:
    LODWORD(v11) = 1;
    goto LABEL_178;
  }
LABEL_42:
  std::regex_traits<char>::char_class_type v26 = this->__neg_mask_;
  if (v26 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v22 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v22] & v26) == 0)
    {
      int v28 = (v26 >> 7) & 1;
      char v27 = v22 == 95 ? v28 : 0;
    }
    else
    {
      char v27 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v30 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v22, end - this->__neg_chars_.__begin_);
    char v31 = v30 ? v30 : end;
    if ((v27 & 1) == 0 && v31 == end) {
      goto LABEL_112;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__end_;
  if (v32 != v33)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v91, &v91.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__end_;
    }
    else
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v22;
    }
    if (v33 == v32)
    {
LABEL_65:
      char v36 = 0;
    }
    else
    {
      unint64_t v34 = 0;
      uint64_t v35 = 3;
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v32->first.__r_.__value_.__r.__words[v35 - 3], (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_+ v35 * 8)) << 24) >= 0x1000000)
      {
        ++v34;
        std::vector<std::pair<std::string, std::string>>::pointer v32 = this->__ranges_.__begin_;
        v35 += 6;
        if (v34 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v32) >> 4)) {
          goto LABEL_65;
        }
      }
      char v36 = 1;
      uint64_t v11 = 1;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v36) {
      goto LABEL_178;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_107:
    if (v91.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_178;
    }
    std::regex_traits<char>::char_class_type v56 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v91.__r_.__value_.__s.__data_[0]] & v56) == 0)
    {
      int v57 = (v56 >> 7) & 1;
      if (v91.__r_.__value_.__s.__data_[0] != 95) {
        int v57 = 0;
      }
      if (v57 != 1) {
        goto LABEL_178;
      }
    }
    goto LABEL_112;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v91, &v91.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v37 = this->__equivalences_.__begin_;
  uint64_t v38 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v39 = (char *)this->__equivalences_.__end_ - (char *)v37;
  if (!v39)
  {
LABEL_105:
    if ((v38 & 0x80) != 0) {
LABEL_106:
    }
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_107;
  }
  unint64_t v40 = 0;
  unint64_t v41 = v39 / 24;
  size_t v43 = __s.__r_.__value_.__l.__size_;
  std::string::size_type v42 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v44 = __s.__r_.__value_.__l.__size_;
  }
  if (v41 <= 1) {
    uint64_t v45 = 1;
  }
  else {
    uint64_t v45 = v39 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v40 < v41)
  {
    uint64_t v47 = &v37[v40];
    std::string::size_type v48 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
    int v49 = (char)v48;
    if ((v48 & 0x80u) != 0) {
      std::string::size_type v48 = v47->__r_.__value_.__l.__size_;
    }
    if (v44 != v48) {
      goto LABEL_98;
    }
    if (v49 >= 0) {
      unint64_t v50 = &v37[v40];
    }
    else {
      unint64_t v50 = (std::string *)v47->__r_.__value_.__r.__words[0];
    }
    if ((v38 & 0x80) == 0)
    {
      if (!v38)
      {
LABEL_103:
        LODWORD(v11) = 1;
        if (!j) {
          goto LABEL_107;
        }
        goto LABEL_178;
      }
      uint64_t v51 = 0;
      while (__s.__r_.__value_.__s.__data_[v51] == v50->__r_.__value_.__s.__data_[v51])
      {
        if (v38 == ++v51) {
          goto LABEL_103;
        }
      }
LABEL_98:
      if (++v40 == v45) {
        goto LABEL_105;
      }
      continue;
    }
    BOOL v83 = j;
    uint64_t v84 = v37;
    std::string::size_type v85 = v44;
    uint64_t v52 = v11;
    unint64_t v53 = v41;
    uint64_t v87 = v10;
    std::__split_buffer<std::string>::pointer v54 = v42;
    size_t v55 = v43;
    if (!memcmp(v42, v50, v43)) {
      break;
    }
    ++v40;
    size_t v43 = v55;
    std::string::size_type v42 = v54;
    std::string::size_type v44 = v85;
    uint64_t v10 = v87;
    unint64_t v41 = v53;
    uint64_t v11 = v52;
    std::vector<std::string>::pointer v37 = v84;
    if (v40 == v45) {
      goto LABEL_106;
    }
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  LODWORD(v11) = 1;
  uint64_t v10 = v87;
  if (!v83) {
    goto LABEL_107;
  }
LABEL_178:
  if (v11 == this->__negate_)
  {
    first = 0;
    int v82 = -993;
  }
  else
  {
    a2->__current_ += v10;
    first = this->__first_;
    int v82 = -995;
  }
  a2->__do_ = v82;
  a2->__node_ = first;
}

void sub_1BCF29828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  char v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BCF29BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    size_t v7 = __p;
  }
  else {
    size_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a1;
      }
      else {
        uint64_t v10 = *(unsigned char **)a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a1 = 0;
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BCF29D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF29DB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = (char)*a2;
  if (v7 > 97)
  {
    if (v7 > 114)
    {
      if (v7 != 115)
      {
        if (v7 == 119)
        {
          *(_DWORD *)(a5 + 160) |= 0x500u;
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
          return a2 + 1;
        }
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v7 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v7 != 100) {
        goto LABEL_27;
      }
      int v9 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 1) = 0;
      return a2 + 1;
    }
    if (v7 == 68)
    {
      int v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
      *(_DWORD *)(a5 + 164) = v8;
      return a2 + 1;
    }
    goto LABEL_27;
  }
  if (v7 == 83)
  {
    int v8 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_24;
  }
  if (v7 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(unsigned char *)(a5 + 169))
    {
      char v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a5 + 24) + 40))(*(void *)(a5 + 24), 95);
      char v11 = v10;
      uint64_t v13 = *(unsigned char **)(a5 + 72);
      unint64_t v12 = *(void *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        unsigned char *v13 = v10;
        uint64_t v14 = (uint64_t)(v13 + 1);
LABEL_62:
        *(void *)(a5 + 72) = v14;
        return a2 + 1;
      }
      unint64_t v24 = *(void *)(a5 + 64);
      int v25 = &v13[-v24];
      uint64_t v26 = (uint64_t)&v13[-v24 + 1];
      if (v26 >= 0)
      {
        unint64_t v27 = v12 - v24;
        if (2 * v27 > v26) {
          uint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          char v29 = operator new(v28);
        }
        else {
          char v29 = 0;
        }
        char v31 = &v29[v28];
        v25[(void)v29] = v11;
        uint64_t v14 = (uint64_t)&v25[(void)v29 + 1];
        if (v13 == (unsigned char *)v24)
        {
          char v29 = &v25[(void)v29];
        }
        else
        {
          std::vector<std::pair<std::string, std::string>>::pointer v32 = &v13[~v24];
          do
          {
            char v33 = *--v13;
            (v32--)[(void)v29] = v33;
          }
          while (v13 != (unsigned char *)v24);
          uint64_t v13 = *(unsigned char **)(a5 + 64);
        }
        *(void *)(a5 + 64) = v29;
        *(void *)(a5 + 72) = v14;
        *(void *)(a5 + 80) = v31;
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_62;
      }
LABEL_87:
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    size_t v17 = *(unsigned char **)(a5 + 72);
    unint64_t v16 = *(void *)(a5 + 80);
    if (*(unsigned char *)(a5 + 170))
    {
      if ((unint64_t)v17 >= v16)
      {
        unint64_t v18 = *(void *)(a5 + 64);
        uint64_t v19 = &v17[-v18];
        uint64_t v20 = (uint64_t)&v17[-v18 + 1];
        if (v20 < 0) {
          goto LABEL_87;
        }
        unint64_t v21 = v16 - v18;
        if (2 * v21 > v20) {
          uint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v22 = v20;
        }
        if (v22) {
          std::vector<char>::pointer v23 = operator new(v22);
        }
        else {
          std::vector<char>::pointer v23 = 0;
        }
        int64_t v39 = &v19[(void)v23];
        unint64_t v40 = (char *)v23 + v22;
        v19[(void)v23] = 95;
        uint64_t v30 = (uint64_t)&v19[(void)v23 + 1];
        if (v17 != (unsigned char *)v18)
        {
          unint64_t v41 = &v17[~v18];
          do
          {
            char v42 = *--v17;
            (v41--)[(void)v23] = v42;
          }
          while (v17 != (unsigned char *)v18);
LABEL_80:
          size_t v17 = *(unsigned char **)(a5 + 64);
          goto LABEL_82;
        }
        goto LABEL_81;
      }
    }
    else if ((unint64_t)v17 >= v16)
    {
      unint64_t v34 = *(void *)(a5 + 64);
      uint64_t v35 = &v17[-v34];
      uint64_t v36 = (uint64_t)&v17[-v34 + 1];
      if (v36 < 0) {
        goto LABEL_87;
      }
      unint64_t v37 = v16 - v34;
      if (2 * v37 > v36) {
        uint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v38 = v36;
      }
      if (v38) {
        std::vector<char>::pointer v23 = operator new(v38);
      }
      else {
        std::vector<char>::pointer v23 = 0;
      }
      int64_t v39 = &v35[(void)v23];
      unint64_t v40 = (char *)v23 + v38;
      v35[(void)v23] = 95;
      uint64_t v30 = (uint64_t)&v35[(void)v23 + 1];
      if (v17 != (unsigned char *)v34)
      {
        size_t v43 = &v17[~v34];
        do
        {
          char v44 = *--v17;
          (v43--)[(void)v23] = v44;
        }
        while (v17 != (unsigned char *)v34);
        goto LABEL_80;
      }
LABEL_81:
      std::vector<char>::pointer v23 = v39;
LABEL_82:
      *(void *)(a5 + 64) = v23;
      *(void *)(a5 + 72) = v30;
      *(void *)(a5 + 80) = v40;
      if (v17) {
        operator delete(v17);
      }
      goto LABEL_84;
    }
    *size_t v17 = 95;
    uint64_t v30 = (uint64_t)(v17 + 1);
LABEL_84:
    *(void *)(a5 + 72) = v30;
    return a2 + 1;
  }
LABEL_27:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        int v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *int v25 = v6;
        unint64_t v24 = v25 + 1;
        unint64_t v37 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--int v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        int v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *int v25 = v6;
        unint64_t v24 = v25 + 1;
        int64_t v39 = *(char **)(a1 + 112);
        unint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--int v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    _WORD *v8 = v6;
    unint64_t v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  int v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *int v25 = v6;
  unint64_t v24 = v25 + 1;
  size_t v28 = *(char **)(a1 + 112);
  unint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--int v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  unint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF2A820(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = v11;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a1 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a1 = 0;
  *(void *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_1BCF2A9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF2AA98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, long long *a2)
{
  std::__split_buffer<std::string>::pointer v4 = (char *)a1[1];
  unsigned __int8 v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[48 * v9];
    *(_OWORD *)uint64_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    unint64_t v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      unint64_t v8 = v14 + 48;
      *a1 = v14;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
    }
    else
    {
      uint64_t v18 = &v13[48 * v9];
      do
      {
        long long v19 = *((_OWORD *)v17 - 3);
        *((void *)v18 - 4) = *((void *)v17 - 4);
        *((_OWORD *)v18 - 3) = v19;
        *((void *)v17 - 5) = 0;
        *((void *)v17 - 4) = 0;
        *((void *)v17 - 6) = 0;
        long long v20 = *(_OWORD *)(v17 - 24);
        *((void *)v18 - 1) = *((void *)v17 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *((void *)v17 - 2) = 0;
        *((void *)v17 - 1) = 0;
        *((void *)v17 - 3) = 0;
        v17 -= 48;
      }
      while (v17 != v16);
      uint64_t v17 = (char *)*a1;
      uint64_t v21 = (uint64_t)a1[1];
      unint64_t v8 = v14 + 48;
      *a1 = v18;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
      while ((char *)v21 != v17)
      {
        v21 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v21);
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::__split_buffer<std::string>::pointer v4 = v6;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unint64_t v8 = v4 + 48;
  }
  a1[1] = v8;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(__p, a3, a4, a4 - a3);
  unint64_t v5 = v8;
  if ((v8 & 0x80u) == 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  if ((v8 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BCF2AD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF2AD84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  size_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  size_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_1BCF2B17C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF2B294(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF2B2EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1C187B8A0);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1C187B8A0);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1F1720258;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      *unint64_t v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x1C187B8A0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C187B590](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1BCF2B668(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    unint64_t v7 = a2 + 1;
    int v6 = *a2;
    if (a2 + 1 != a3 || v6 != 36)
    {
      if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
        return (unsigned __int8 *)v7;
      }
      if (v7 == a3 || v6 != 92)
      {
        if (v6 == 46) {
          operator new();
        }
      }
      else
      {
        int v14 = *v7;
        if ((v14 - 36) <= 0x3A && ((1 << (v14 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v14);
          return (unsigned __int8 *)(a2 + 2);
        }
      }
    }
  }
  BOOL v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(this, a2, a3);
  unint64_t v7 = v8;
  if (v8 == a2 && v8 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return (unsigned __int8 *)a2;
    }
    else
    {
      int v9 = a2[1];
      if (v9 == 40)
      {
        uint64_t v10 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int marked_count = this->__marked_count_;
        do
        {
          unint64_t v12 = (char *)v10;
          uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v10, a3);
        }
        while ((char *)v10 != v12);
        if (v12 == a3 || v12 + 1 == a3 || *v12 != 92 || v12[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        unint64_t v7 = v12 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
      }
      else
      {
        BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v9);
        uint64_t v16 = 2;
        if (!v15) {
          uint64_t v16 = 0;
        }
        return (unsigned __int8 *)&a2[v16];
      }
    }
  }
  return (unsigned __int8 *)v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  int v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      unint64_t v13 = a2 + 2;
      int v25 = 0;
      int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        BOOL v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          uint64_t v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v14 + 1, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            int v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            uint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          int v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          uint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x1C187B8A0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::__split_buffer<std::string>::pointer end = this->__end_;
  unsigned int marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(this, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  int v9 = *a2;
  uint64_t v10 = (v8 - 36);
  if (v10 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (this->__open_count_) {
        goto LABEL_4;
      }
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
LABEL_32:
      int v14 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
LABEL_13:
    if ((v8 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  int v11 = a2 + 1;
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46) {
      operator new();
    }
    goto LABEL_24;
  }
  int v12 = *v11;
  char v13 = *v11;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v17 = 2;
      if (!v16) {
        uint64_t v17 = 0;
      }
      BOOL v15 = &a2[v17];
    }
    if (v15 != a2)
    {
LABEL_25:
      if (v15 == a2 && v15 != a3)
      {
        int v18 = *a2;
        if (v18 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
          goto LABEL_32;
        }
        if (v18 != 40)
        {
          if (v18 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v19 = this->__marked_count_;
        ++this->__open_count_;
        size_t v20 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
        if (v20 == a3 || (size_t v21 = v20, *v20 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v19);
        --this->__open_count_;
        BOOL v15 = v21 + 1;
      }
      int v14 = (unsigned __int8 *)v15;
      if (v15 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    int v9 = *a2;
    goto LABEL_22;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  int v14 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v22 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v14, (unsigned __int8 *)a3, end, marked_count + 1, v22);
}

void std::__function::__func<health::HDDemangleBacktraceLine(std::string)::$_0,std::allocator<health::HDDemangleBacktraceLine(std::string)::$_0>,std::string ()(std::match_results<std::__wrap_iter<char const*>>)>::~__func()
{
}

void *std::__function::__func<health::HDDemangleBacktraceLine(std::string)::$_0,std::allocator<health::HDDemangleBacktraceLine(std::string)::$_0>,std::string ()(std::match_results<std::__wrap_iter<char const*>>)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F17203A8;
  return result;
}

void std::__function::__func<health::HDDemangleBacktraceLine(std::string)::$_0,std::allocator<health::HDDemangleBacktraceLine(std::string)::$_0>,std::string ()(std::match_results<std::__wrap_iter<char const*>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17203A8;
}

void std::__function::__func<health::HDDemangleBacktraceLine(std::string)::$_0,std::allocator<health::HDDemangleBacktraceLine(std::string)::$_0>,std::string ()(std::match_results<std::__wrap_iter<char const*>>)>::operator()(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(unsigned char **)a1;
  uint64_t v4 = *(unsigned char **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v5 = *(char **)(a1 + 24);
  int v6 = *(char **)(a1 + 32);
  int v7 = *(unsigned __int8 *)(a1 + 40);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
  if (v8 >= 2)
  {
    if (v3[40])
    {
      int v9 = (char *)*((void *)v3 + 3);
      uint64_t v10 = (char *)*((void *)v3 + 4);
      goto LABEL_5;
    }
LABEL_8:
    memset(&mangled, 0, sizeof(mangled));
    p_std::string mangled = &mangled;
    goto LABEL_9;
  }
  int v9 = *(char **)(a1 + 24);
  uint64_t v10 = v6;
  if (!v7) {
    goto LABEL_8;
  }
LABEL_5:
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&mangled, v9, v10, v10 - v9);
  if ((mangled.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string mangled = &mangled;
  }
  else {
    p_std::string mangled = (std::string *)mangled.__r_.__value_.__r.__words[0];
  }
LABEL_9:
  int v12 = __cxa_demangle((const char *)p_mangled, 0, 0, 0);
  char v13 = v12;
  if ((SHIBYTE(mangled.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_11;
    }
LABEL_15:
    if (v4 == v3)
    {
      if (v7)
      {
LABEL_34:
        std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a2, v5, v6, v6 - v5);
        if (!v3) {
          return;
        }
        goto LABEL_35;
      }
    }
    else if (v3[16])
    {
      uint64_t v5 = *(char **)v3;
      int v6 = (char *)*((void *)v3 + 1);
      goto LABEL_34;
    }
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (!v3) {
      return;
    }
    goto LABEL_35;
  }
  operator delete(mangled.__r_.__value_.__l.__data_);
  if (!v13) {
    goto LABEL_15;
  }
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>(&mangled, v13);
  if (v8 < 3)
  {
    if (v7) {
      goto LABEL_19;
    }
  }
  else if (v3[64])
  {
    uint64_t v5 = (char *)*((void *)v3 + 6);
    int v6 = (char *)*((void *)v3 + 7);
LABEL_19:
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, v5, v6, v6 - v5);
    unsigned int v14 = HIBYTE(v23);
    BOOL v15 = (void **)__p;
    std::string::size_type v16 = v22;
    goto LABEL_21;
  }
  std::string::size_type v16 = 0;
  BOOL v15 = 0;
  unsigned int v14 = 0;
  std::string __p = 0;
  std::string::size_type v22 = 0;
  uint64_t v23 = 0;
LABEL_21:
  if ((v14 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v15;
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v18 = v14;
  }
  else {
    std::string::size_type v18 = v16;
  }
  unsigned int v19 = std::string::append(&mangled, (const std::string::value_type *)p_p, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  a2[2] = *((void *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(mangled.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(mangled.__r_.__value_.__l.__data_);
  }
  free(v13);
  if (v3) {
LABEL_35:
  }
    operator delete(v3);
}

void sub_1BCF2C1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<health::HDDemangleBacktraceLine(std::string)::$_0,std::allocator<health::HDDemangleBacktraceLine(std::string)::$_0>,std::string ()(std::match_results<std::__wrap_iter<char const*>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<health::HDDemangleBacktraceLine(std::string)::$_0,std::allocator<health::HDDemangleBacktraceLine(std::string)::$_0>,std::string ()(std::match_results<std::__wrap_iter<char const*>>)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(std::match_results<std::__wrap_iter<char const*>>)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t HDCodableSyncEntityVersionMapReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(HDCodableSyncEntityVersionRange);
        [a1 addEntityVersionRange:v17];
        if (!PBReaderPlaceMark() || !HDCodableSyncEntityVersionRangeReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__127(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__127(uint64_t a1)
{
}

void sub_1BCF30F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF31948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 120), 8);
  _Unwind_Resume(a1);
}

NSObject *HDDatabaseForContainer(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a1;
  id v5 = a2;
  int v6 = v5;
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v7 = [v5 type];
  if (v7 > 3)
  {
    if (v7 != 100 && v7 != 4) {
      goto LABEL_13;
    }
LABEL_7:
    uint64_t v8 = [v4 privateCloudDatabase];
    goto LABEL_8;
  }
  if ((unint64_t)(v7 - 2) < 2)
  {
    uint64_t v8 = [v4 sharedCloudDatabase];
LABEL_8:
    unsigned int v2 = v8;
    goto LABEL_9;
  }
  if (v7 == 1) {
    goto LABEL_7;
  }
LABEL_13:
  _HKInitializeLogging();
  unint64_t v10 = (void *)*MEMORY[0x1E4F29FA8];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29FA8], OS_LOG_TYPE_FAULT))
  {
    unsigned int v2 = v10;
    uint64_t v11 = [v6 identifier];
    int v12 = 138412546;
    char v13 = v11;
    __int16 v14 = 2048;
    uint64_t v15 = [v6 type];
    _os_log_fault_impl(&dword_1BCB7D000, v2, OS_LOG_TYPE_FAULT, "Unexpected profile with identifier %@ and type %lu", (uint8_t *)&v12, 0x16u);
  }
LABEL_9:

  return v2;
}

id HDListUserDomainConceptEntityPredicateForListType(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  uint64_t v3 = (void *)MEMORY[0x1E4F65D00];
  id v4 = [NSNumber numberWithUnsignedInteger:a1];
  id v5 = [v3 predicateWithProperty:@"list_type" value:v4 comparisonType:v2];

  return v5;
}

uint64_t HDListUserDomainConceptEntityPredicateForListTypes(uint64_t a1)
{
  return [MEMORY[0x1E4F65D10] containsPredicateWithProperty:@"list_type" values:a1];
}

void sub_1BCF34E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF350B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF356C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__128(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__128(uint64_t a1)
{
}

id HDCreateDataAggregatorForType(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = [v4 code];
  if (v5 > 257)
  {
    char v6 = v5 - 2;
    if ((unint64_t)(v5 - 258) > 0x2D) {
      goto LABEL_39;
    }
    if (((1 << v6) & 0x38F013C11007) != 0) {
      goto LABEL_10;
    }
    if (((1 << v6) & 0x10000280800) != 0) {
      goto LABEL_32;
    }
    if (v5 != 272) {
      goto LABEL_39;
    }
    goto LABEL_26;
  }
  if (v5 > 112)
  {
    if (v5 <= 146)
    {
      if (v5 == 113) {
        goto LABEL_10;
      }
      if (v5 != 138)
      {
        if (v5 == 140)
        {
          unsigned int v9 = HDTachycardiaDataAggregator;
          goto LABEL_44;
        }
        goto LABEL_39;
      }
      goto LABEL_32;
    }
    char v8 = v5 + 109;
    if ((unint64_t)(v5 - 147) > 0x2F) {
      goto LABEL_39;
    }
    if (((1 << v8) & 0x830900000000) != 0)
    {
LABEL_32:
      uint64_t v7 = HDPassiveQuantityDataAggregator;
      goto LABEL_33;
    }
    if (((1 << v8) & 0x6000000) == 0)
    {
      if (v5 == 147)
      {
        unsigned int v9 = HDBradycardiaDataAggregator;
        goto LABEL_44;
      }
      goto LABEL_39;
    }
LABEL_26:
    uint64_t v7 = HDAudioExposureAggregator;
LABEL_33:
    uint64_t v10 = [[v7 alloc] initForQuantityType:v4 dataCollectionManager:v3];
LABEL_34:
    uint64_t v11 = (void *)v10;
    goto LABEL_35;
  }
  if (v5 <= 60)
  {
    if ((unint64_t)(v5 - 7) >= 4)
    {
      if (v5 != 5)
      {
        if (v5 != 12) {
          goto LABEL_39;
        }
        goto LABEL_10;
      }
      unsigned int v9 = HDHeartRateDataAggregator;
LABEL_44:
      uint64_t v10 = [[v9 alloc] initWithDataCollectionManager:v3];
      goto LABEL_34;
    }
LABEL_10:
    if (HKFeatureFlagWorkoutSeriesAggregation()) {
      uint64_t v7 = HDWorkoutSeriesDataAggregator;
    }
    else {
      uint64_t v7 = HDActiveQuantityDataAggregator;
    }
    goto LABEL_33;
  }
  if (v5 <= 100)
  {
    if (v5 != 61)
    {
      if (v5 == 75)
      {
        unsigned int v9 = HDAppleExerciseTimeDataAggregator;
        goto LABEL_44;
      }
      if (v5 == 83)
      {
        unsigned int v9 = HDCyclingDistanceDataAggregator;
        goto LABEL_44;
      }
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  if ((unint64_t)(v5 - 110) < 2) {
    goto LABEL_32;
  }
  if (v5 == 101) {
    goto LABEL_10;
  }
LABEL_39:
  _HKInitializeLogging();
  char v13 = *MEMORY[0x1E4F29F10];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F10], OS_LOG_TYPE_ERROR))
  {
    int v14 = 138543618;
    id v15 = v3;
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_error_impl(&dword_1BCB7D000, v13, OS_LOG_TYPE_ERROR, "%{public}@: Attempting to fetch aggregator for non-collectible type %{public}@", (uint8_t *)&v14, 0x16u);
  }
  uint64_t v11 = 0;
LABEL_35:

  return v11;
}

uint64_t HDCloudSyncCodableShardPredicateReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 11)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v32 = 8;
      }
      else
      {
        if (v18 != 10)
        {
          if (v18 == 1)
          {
            char v19 = 0;
            unsigned int v20 = 0;
            uint64_t v21 = 0;
            *(unsigned char *)(a1 + 28) |= 4u;
            while (1)
            {
              uint64_t v22 = *v3;
              uint64_t v23 = *(void *)(a2 + v22);
              unint64_t v24 = v23 + 1;
              if (v23 == -1 || v24 > *(void *)(a2 + *v4)) {
                break;
              }
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
              *(void *)(a2 + v22) = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0) {
                goto LABEL_37;
              }
              v19 += 7;
              BOOL v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_39;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v21) = 0;
            }
LABEL_39:
            *(_DWORD *)(a1 + 24) = v21;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        *(unsigned char *)(a1 + 28) |= 2u;
        uint64_t v29 = *v3;
        unint64_t v30 = *(void *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v32 = 16;
      }
      *(void *)(a1 + v32) = v28;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id NSDictionaryPreferencesSyncRepresentationForHKFeatureAttributes(void *a1)
{
  void v11[2] = *MEMORY[0x1E4F143B8];
  v10[0] = @"FeatureVersion";
  id v1 = a1;
  uint64_t v2 = [v1 featureVersion];
  v10[1] = @"UpdateVersion";
  v11[0] = v2;
  id v3 = [v1 updateVersion];
  v11[1] = v3;
  id v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:2];
  uint64_t v5 = (void *)[v4 mutableCopy];

  char v6 = [v1 UDIDeviceIdentifier];
  [v5 setObject:v6 forKeyedSubscript:@"UDIDeviceIdentifier"];

  uint64_t v7 = [v1 yearOfRelease];

  [v5 setObject:v7 forKeyedSubscript:@"YearOfRelease"];
  char v8 = (void *)[v5 copy];

  return v8;
}

id NSDictionaryPreferencesSyncRepresentationForHKCountrySet(void *a1)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  v10[0] = @"AvailableRegions";
  id v1 = a1;
  uint64_t v2 = [v1 countryBitmasks];
  v11[0] = v2;
  v10[1] = @"AvailableRegionsVersion";
  id v3 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v1, "compatibilityVersion"));
  v11[1] = v3;
  void v10[2] = @"AvailableRegionsContentVersion";
  id v4 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v1, "contentVersion"));
  void v11[2] = v4;
  v10[3] = @"CountrySetProvenance";
  uint64_t v5 = NSNumber;
  uint64_t v6 = [v1 provenance];

  uint64_t v7 = [v5 numberWithInteger:v6];
  void v11[3] = v7;
  char v8 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:v10 count:4];

  return v8;
}

id HKLocalFeaturePropertiesDefaultsDomainForFeatureIdentifier(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F2B860];
  id v2 = a1;
  id v3 = [v1 sharedBehavior];
  int v4 = [v3 isAppleWatch];

  if (v4) {
    uint64_t v5 = @"%@.%@.watch";
  }
  else {
    uint64_t v5 = @"%@.%@.companion";
  }
  uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", v5, *MEMORY[0x1E4F2BA38], v2);

  return v6;
}

void sub_1BCF399D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id HKRemoteFeaturePropertiesDefaultsDomainForFeatureIdentifier(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F2B860];
  id v2 = a1;
  id v3 = [v1 sharedBehavior];
  int v4 = [v3 isAppleWatch];

  if (v4) {
    uint64_t v5 = @"%@.%@.companion";
  }
  else {
    uint64_t v5 = @"%@.%@.watch";
  }
  uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", v5, *MEMORY[0x1E4F2BA38], v2);

  return v6;
}

id HKFeatureAttributesFromSource(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = [v1 stringForKey:@"FeatureVersion"];
    uint64_t v4 = [v2 stringForKey:@"UpdateVersion"];
    uint64_t v5 = (void *)v4;
    uint64_t v6 = 0;
    if (v3 && v4)
    {
      uint64_t v7 = [v2 stringForKey:@"UDIDeviceIdentifier"];
      char v8 = [v2 stringForKey:@"YearOfRelease"];
      uint64_t v6 = (void *)[objc_alloc(MEMORY[0x1E4F2AFE8]) initWithFeatureVersion:v3 updateVersion:v5 UDIDeviceIdentifier:v7 yearOfRelease:v8];
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

id HKCountrySetFromSource(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = NSNumberFromHKFeaturePropertiesReadSourceForKey(v1, @"AvailableRegionsVersion");
    uint64_t v4 = [v2 arrayForKey:@"AvailableRegions"];
    uint64_t v5 = (void *)v4;
    uint64_t v6 = 0;
    if (v3 && v4)
    {
      uint64_t v7 = NSNumberFromHKFeaturePropertiesReadSourceForKey(v2, @"AvailableRegionsContentVersion");
      char v8 = NSNumberFromHKFeaturePropertiesReadSourceForKey(v2, @"CountrySetProvenance");
      uint64_t v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F2AE70]), "initWithCountryBitmasks:compatibilityVersion:contentVersion:provenance:", v5, objc_msgSend(v3, "integerValue"), objc_msgSend(v7, "integerValue"), objc_msgSend(v8, "integerValue"));
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

id NSNumberFromHKFeaturePropertiesReadSourceForKey(void *a1, uint64_t a2)
{
  id v2 = [a1 objectForKey:a2];
  if (v2 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }

  return v3;
}

void sub_1BCF3C698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t __Block_byref_object_copy__129(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__129(uint64_t a1)
{
}

void sub_1BCF3D99C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDDataCollectorCanResumeFromLastSensorDatum(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector()) {
    uint64_t v2 = [v1 canResumeCollectionFromLastSensorDatum];
  }
  else {
    uint64_t v2 = 1;
  }

  return v2;
}

void sub_1BCF3F1D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

uint64_t HDCodableCategoryDomainDictionaryReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_36;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_38;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_38:
        *(void *)(a1 + 8) = v19;
        goto LABEL_39;
      case 2u:
        uint64_t v24 = PBReaderReadString();
        char v25 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v24;

        goto LABEL_39;
      case 3u:
        uint64_t v26 = objc_alloc_init(HDCodableTimestampedKeyValuePair);
        [(id)a1 addKeyValuePairs:v26];
        if (!PBReaderPlaceMark() || (HDCodableTimestampedKeyValuePairReadFrom((uint64_t)v26, a2) & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_34;
      case 4u:
        uint64_t v26 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 32), v26);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v26, a2))
        {
LABEL_34:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

uint64_t HDCodableRacingMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v18;

        goto LABEL_41;
      case 2u:
        *(unsigned char *)(a1 + 48) |= 4u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v29 = 24;
        goto LABEL_40;
      case 3u:
        *(unsigned char *)(a1 + 48) |= 2u;
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v29 = 16;
        goto LABEL_40;
      case 4u:
        *(unsigned char *)(a1 + 48) |= 1u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        uint64_t v29 = 8;
LABEL_40:
        *(void *)(a1 + v29) = v22;
        goto LABEL_41;
      case 0xAu:
        uint64_t v28 = objc_alloc_init(HDCodableRoutePointDatum);
        [(id)a1 addRoutePoints:v28];
        if PBReaderPlaceMark() && (HDCodableRoutePointDatumReadFrom((uint64_t)v28, a2))
        {
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t HDCodableRoutineRequestMessageReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 9)
      {
        if (v17 == 10)
        {
          uint64_t v20 = objc_alloc_init(HDCodableRoutineLocationRequest);
          objc_storeStrong((id *)(a1 + 8), v20);
          if (!PBReaderPlaceMark()
            || (HDCodableRoutineLocationRequestReadFrom((uint64_t)v20, a2) & 1) == 0)
          {
LABEL_45:

            return 0;
          }
        }
        else
        {
          if (v17 != 12)
          {
LABEL_37:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v20 = objc_alloc_init(HDCodableRoutineScenarioTriggeredRequest);
          objc_storeStrong((id *)(a1 + 32), v20);
          if (!PBReaderPlaceMark()
            || (HDCodableRoutineScenarioTriggeredRequestReadFrom((uint64_t)v20, a2) & 1) == 0)
          {
            goto LABEL_45;
          }
        }
        PBReaderRecallMark();
      }
      else if (v17 == 1)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if ((v26 & 0x80) == 0) {
            goto LABEL_40;
          }
          v21 += 7;
          BOOL v14 = v22++ >= 9;
          if (v14)
          {
            LODWORD(v23) = 0;
            goto LABEL_42;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_40:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_42:
        *(_DWORD *)(a1 + 24) = v23;
      }
      else
      {
        if (v17 != 2) {
          goto LABEL_37;
        }
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCF45598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__130(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__130(uint64_t a1)
{
}

void sub_1BCF45DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodableCDADocumentSampleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              unint64_t v17 = objc_alloc_init(HDCodableSample);
              objc_storeStrong((id *)(a1 + 48), v17);
              if PBReaderPlaceMark() && (HDCodableSampleReadFrom((uint64_t)v17, a2))
              {
                PBReaderRecallMark();

                goto LABEL_37;
              }

              return 0;
            case 2u:
              char v19 = 0;
              unsigned int v20 = 0;
              uint64_t v21 = 0;
              *(unsigned char *)(a1 + 64) |= 1u;
              break;
            case 3u:
              uint64_t v25 = PBReaderReadData();
              uint64_t v26 = 24;
              goto LABEL_36;
            case 4u:
              uint64_t v25 = PBReaderReadString();
              uint64_t v26 = 56;
              goto LABEL_36;
            case 5u:
              uint64_t v25 = PBReaderReadString();
              uint64_t v26 = 40;
              goto LABEL_36;
            case 6u:
              uint64_t v25 = PBReaderReadString();
              uint64_t v26 = 8;
              goto LABEL_36;
            case 7u:
              uint64_t v25 = PBReaderReadString();
              uint64_t v26 = 16;
LABEL_36:
              unint64_t v27 = *(void **)(a1 + v26);
              *(void *)(a1 + v26) = v25;

              goto LABEL_37;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_37:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_40;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_42;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_40:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_42:
          *(_DWORD *)(a1 + 32) = v21;
          goto LABEL_37;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCF4A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4AB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__131(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__131(uint64_t a1)
{
}

BOOL HDCodableClinicalGatewayReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v19 = objc_alloc_init(HDCodableMessageVersion);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (!PBReaderPlaceMark() || !HDCodableMessageVersionReadFrom((uint64_t)v19, a2)) {
          goto LABEL_33;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_28;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadData();
        char v19 = *(HDCodableMessageVersion **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v19 = objc_alloc_init(HDCodableSyncIdentity);
    objc_storeStrong((id *)(a1 + 24), v19);
    if (!PBReaderPlaceMark() || !HDCodableSyncIdentityReadFrom((uint64_t)v19, a2))
    {
LABEL_33:

      return 0;
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCF4C424(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4C7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4CCEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4D070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t __Block_byref_object_copy__132(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__132(uint64_t a1)
{
}

void sub_1BCF4EC7C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4F2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4F688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 184), 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4F8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF4FE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF50210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF5053C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *HDCloudSyncOperationStatusToString(unint64_t a1)
{
  if (a1 >= 4)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"unknown(%ld)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E63051B8[a1];
  }

  return v1;
}

uint64_t statistics::RawQuantitySample::RawQuantitySample(uint64_t this)
{
  *(void *)this = &unk_1F17206F8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

{
  *(void *)this = &unk_1F17206F8;
  *(_DWORD *)(this + 44) = 0;
  return this;
}

void statistics::RawQuantitySample::~RawQuantitySample(statistics::RawQuantitySample *this)
{
  PB::Base::~Base(this);

  JUMPOUT(0x1C187B8A0);
}

uint64_t statistics::RawQuantitySample::RawQuantitySample(uint64_t this, const statistics::RawQuantitySample *a2)
{
  *(void *)this = &unk_1F17206F8;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    char v3 = 8;
    *(unsigned char *)(this + 44) = 8;
    *(void *)(this + 32) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 3);
    v3 |= 4u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 8) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 2);
  v3 |= 2u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 16) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  char v8 = *((unsigned char *)a2 + 41);
  v3 |= 0x20u;
  *(unsigned char *)(this + 44) = v3;
  *(unsigned char *)(this + 41) = v8;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return this;
    }
LABEL_16:
    char v10 = *((unsigned char *)a2 + 42);
    *(unsigned char *)(this + 44) = v3 | 0x40;
    *(unsigned char *)(this + 42) = v10;
    return this;
  }
LABEL_15:
  char v9 = *((unsigned char *)a2 + 40);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(unsigned char *)(this + 40) = v9;
  if ((*((unsigned char *)a2 + 44) & 0x40) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t statistics::RawQuantitySample::operator=(uint64_t a1, const statistics::RawQuantitySample *a2)
{
  if ((const statistics::RawQuantitySample *)a1 != a2)
  {
    statistics::RawQuantitySample::RawQuantitySample((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v10;
    uint64_t v10 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v13;
    char v13 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 42);
    *(unsigned char *)(a1 + 42) = v14;
    char v14 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double statistics::swap(statistics *this, statistics::RawQuantitySample *a2, statistics::RawQuantitySample *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 41);
  *((unsigned char *)this + 41) = *((unsigned char *)a2 + 41);
  *((unsigned char *)a2 + 41) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 42);
  *((unsigned char *)this + 42) = *((unsigned char *)a2 + 42);
  *((unsigned char *)a2 + 42) = v7;
  return result;
}

double statistics::RawQuantitySample::RawQuantitySample(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F17206F8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  return result;
}

{
  double result;

  *(void *)a1 = &unk_1F17206F8;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  return result;
}

uint64_t statistics::RawQuantitySample::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v13[0] = &unk_1F17206F8;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    char v6 = *(unsigned char *)(a2 + 41);
    char v7 = *(unsigned char *)(a2 + 40);
    char v8 = *(unsigned char *)(a2 + 42);
    int v18 = *(_DWORD *)(a1 + 44);
    long long v9 = *(_OWORD *)(a1 + 24);
    long long v10 = *(_OWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 24) = v10;
    long long v14 = v9;
    *(void *)&long long v9 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v13[1] = v9;
    uint64_t v11 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v5;
    void v13[2] = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v6;
    char v16 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v7;
    char v15 = v11;
    LOBYTE(v11) = *(unsigned char *)(a1 + 42);
    *(unsigned char *)(a1 + 42) = v8;
    char v17 = v11;
    PB::Base::~Base((PB::Base *)v13);
  }
  return a1;
}

uint64_t statistics::RawQuantitySample::formatText(statistics::RawQuantitySample *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if (v5)
  {
    PB::TextFormatter::format(a2, "endTime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "hasContributedToOverall");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "hasContributedToSource");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "hasContributedToSourceID");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "sourceID");
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
  if ((*((unsigned char *)this + 44) & 8) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "value", *((double *)this + 4));
LABEL_9:

  return MEMORY[0x1F4147498](a2);
}

uint64_t statistics::RawQuantitySample::readFrom(statistics::RawQuantitySample *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_21;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      goto LABEL_65;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_21:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 44) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 2u:
        *((unsigned char *)this + 44) |= 4u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
          goto LABEL_31;
        }
        *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
        goto LABEL_59;
      case 3u:
        *((unsigned char *)this + 44) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_59:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
LABEL_31:
          *((unsigned char *)a2 + 24) = 1;
        }
        break;
      case 4u:
        *((unsigned char *)this + 44) |= 2u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v34 = v20++;
            char v35 = *(unsigned char *)(v21 + v34);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0) {
              break;
            }
            v32 += 7;
            BOOL v14 = v33++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
LABEL_63:
              unint64_t v2 = v34 + 1;
              goto LABEL_64;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
          goto LABEL_63;
        }
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        do
        {
          unint64_t v2 = v20 + 1;
          *((void *)a2 + 1) = v20 + 1;
          char v25 = *(unsigned char *)(v21 + v20);
          v24 |= (unint64_t)(v25 & 0x7F) << v22;
          if ((v25 & 0x80) == 0) {
            goto LABEL_64;
          }
          v22 += 7;
          unint64_t v20 = v2;
          BOOL v14 = v23++ > 8;
        }
        while (!v14);
        uint64_t v24 = 0;
LABEL_64:
        *((void *)this + 2) = v24;
        break;
      case 0xAu:
        *((unsigned char *)this + 44) |= 0x20u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v27 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *((unsigned char *)this + 41) = v27;
        break;
      case 0xBu:
        *((unsigned char *)this + 44) |= 0x10u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v29 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v28 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v29 = v28 != 0;
        }
        *((unsigned char *)this + 40) = v29;
        break;
      case 0xCu:
        *((unsigned char *)this + 44) |= 0x40u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v31 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v30 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v31 = v30 != 0;
        }
        *((unsigned char *)this + 42) = v31;
        break;
      default:
        goto LABEL_19;
    }
LABEL_65:
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t statistics::RawQuantitySample::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2);
    if ((*(unsigned char *)(v3 + 44) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:

  return PB::Writer::write(a2);
}

BOOL statistics::RawQuantitySample::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 44) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 8) == 0 || *(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 4) == 0 || *(double *)(a1 + 24) != *(double *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    if ((*(unsigned char *)(a2 + 44) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 44))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 44) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 44) & 0x10) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 44) & 0x40) == 0;
  if ((*(unsigned char *)(a1 + 44) & 0x40) != 0) {
    return (*(unsigned char *)(a2 + 44) & 0x40) != 0 && *(unsigned __int8 *)(a1 + 42) == *(unsigned __int8 *)(a2 + 42);
  }
  return v2;
}

uint64_t statistics::RawQuantitySample::hash_value(statistics::RawQuantitySample *this)
{
  if ((*((unsigned char *)this + 44) & 8) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    double v2 = 0.0;
    if (*((unsigned char *)this + 44)) {
      goto LABEL_6;
    }
LABEL_17:
    double v3 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  double v1 = *((double *)this + 4);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  double v2 = *((double *)this + 3);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 1) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 44) & 2) != 0)
  {
LABEL_9:
    uint64_t v4 = *((void *)this + 2);
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 0x20) != 0)
  {
LABEL_10:
    uint64_t v5 = *((unsigned __int8 *)this + 41);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_11;
    }
LABEL_20:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v7 = 0;
    return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_19:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_11:
  uint64_t v6 = *((unsigned __int8 *)this + 40);
  if ((*((unsigned char *)this + 44) & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  uint64_t v7 = *((unsigned __int8 *)this + 42);
  return *(void *)&v2 ^ *(void *)&v1 ^ *(void *)&v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void sub_1BCF55630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__133(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__133(uint64_t a1)
{
}

void sub_1BCF559B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF56220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1BCF5656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF5673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF5690C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF56ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF56D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *HDStatisticsPresence::addSample(void *this, const HDRawQuantitySample *a2, int a3)
{
  if (a3) {
    ++*this;
  }
  return this;
}

__n128 HDStatisticsPresence::updateMostRecentSample(HDStatisticsPresence *this, const HDRawQuantitySample *a2)
{
  if (!*((unsigned char *)this + 40) || (result.n128_u64[0] = *((void *)this + 2), result.n128_f64[0] <= a2->var1))
  {
    __n128 result = *(__n128 *)&a2->var0;
    long long v3 = *(_OWORD *)&a2->var2;
    *((_WORD *)this + 20) = *(_WORD *)&a2->var4;
    *(__n128 *)((char *)this + 8) = result;
    *(_OWORD *)((char *)this + 24) = v3;
  }
  return result;
}

double HDStatisticsPresence::unarchive@<D0>(HDStatisticsPresence *this@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)(a2 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)a2 = *((void *)this + 3);
  uint64_t v4 = *((void *)this + 14);
  if (v4)
  {
    double result = *(double *)(v4 + 8);
    uint64_t v5 = *(void *)(v4 + 16);
    *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(v4 + 24), *(int8x16_t *)(v4 + 24), 8uLL);
    *(double *)(a2 + 24) = result;
    *(void *)(a2 + 32) = v5;
    *(unsigned char *)(a2 + 40) = 1;
  }
  return result;
}

void HDStatisticsPresence::archive(HDStatisticsPresence *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a2 + 112);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)a2 = &unk_1F171B978;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v5 = *(void *)this;
  *(_DWORD *)(a2 + 204) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v5;
  statistics::Statistics::makeMostRecentDatum(a2);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)((char *)this + 8), *(int8x16_t *)((char *)this + 8), 8uLL);
  v6[1] = *((void *)this + 3);
  void v6[2] = *((void *)this + 4);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BCF576D0(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void sub_1BCF59180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t HDOntologyEducationContentSectionDataTypeForAttributeType(uint64_t a1)
{
  if (a1 <= 799)
  {
    return (unint64_t)(a1 - 666) < 3;
  }
  else
  {
    uint64_t v1 = a1 - 800;
    uint64_t result = 2;
    switch(v1)
    {
      case 0:
      case 1:
        return 1;
      case 2:
        return result;
      case 3:
        uint64_t result = 4;
        break;
      case 4:
        uint64_t result = 5;
        break;
      default:
        return 0;
    }
  }
  return result;
}

void sub_1BCF5D108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id HDQueryServerSampleTypeObservationAssertionName(void *a1)
{
  uint64_t v1 = NSString;
  double v2 = [a1 identifier];
  long long v3 = [v1 stringWithFormat:@"QueryServerObserver-%@", v2];

  return v3;
}

__CFString *HDStringFromQueryServerState(unint64_t a1)
{
  if (a1 > 4) {
    return @"Unknown state";
  }
  else {
    return off_1E6305418[a1];
  }
}

void sub_1BCF5F410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__134(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__134(uint64_t a1)
{
}

void sub_1BCF5FDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF600D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF60DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1BCF60FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF61D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL HDCodableSyncEntityVersionRangeReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int8x16_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(HDCodableEntityIdentifier);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (HDCodableEntityIdentifierReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unint64_t v17 = objc_alloc_init(HDCodableSyncVersionRange);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || !HDCodableSyncVersionRangeReadFrom((uint64_t)v17, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t _HDResetAllReceivedSyncAnchorsOnVisionDevices(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  int8x16_t v7 = [a1 behavior];
  int v8 = [v7 isRealityDevice];

  if (v8)
  {
    unsigned int v9 = [v6 unprotectedDatabase];
    uint64_t v10 = [v9 executeSQLStatements:&unk_1F17EA500 error:a4] ^ 1;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t _HDAddClientOptionsToAlarmEventsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA518 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddLastAssociationAnchorToSubscriptions(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA548 error:a4] ^ 1;

  return v6;
}

uint64_t _HDResetReceivedNanoSyncAnchorsOnWatchForActivityCache(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  int8x16_t v7 = [a1 behavior];
  int v8 = [v7 isAppleWatch];

  if (v8)
  {
    unsigned int v9 = [v6 unprotectedDatabase];
    uint64_t v10 = [v9 executeSQLStatements:&unk_1F17EA560 error:a4] ^ 1;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t _HDResetReceivedNanoSyncAnchorsOnWatch(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  int8x16_t v7 = [a1 behavior];
  int v8 = [v7 isAppleWatch];

  if (v8)
  {
    unsigned int v9 = [v6 unprotectedDatabase];
    uint64_t v10 = [v9 executeSQLStatements:&unk_1F17EA530 error:a4] ^ 1;
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t _HDUpdateSDKVersionTokenFieldOnSubscriptionsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  int active_platform = dyld_get_active_platform();
  int8x16_t v7 = [v5 unprotectedDatabase];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___HDUpdateSDKVersionTokenFieldOnSubscriptionsTable_block_invoke;
  v10[3] = &unk_1E6305790;
  int v12 = active_platform;
  id v11 = v5;
  id v8 = v5;
  LODWORD(a4) = [v7 executeSQL:@"SELECT ROWID, sdk_version FROM subscription_app_launch WHERE sdk_version != 0", a4, 0, v10 error bindingHandler enumerationHandler];

  return a4 ^ 1;
}

uint64_t _HDAddPendingFullSyncColumnToCloudSyncStoresTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA578 error:a4] ^ 1;

  return v6;
}

uint64_t _HDResetAnchorsForAssociationsForNanoSync_0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  int8x16_t v7 = [a1 behavior];
  char v8 = [v7 isAppleWatch];

  if (v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = [v6 unprotectedDatabase];
    uint64_t v9 = [v10 executeSQLStatements:&unk_1F17EA590 error:a4] ^ 1;
  }
  return v9;
}

uint64_t _HDAddRPEFieldsToAssociationsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void v13[10] = *MEMORY[0x1E4F143B8];
  id v5 = [a2 protectedDatabase];
  id v6 = [MEMORY[0x1E4F1C9C8] distantPast];
  [v6 timeIntervalSinceReferenceDate];
  uint64_t v8 = v7;

  uint64_t v9 = [NSString stringWithFormat:@"INSERT INTO associations_new (ROWID, destination_object_id, source_object_id, sync_provenance, sync_identity, type, deleted, creation_date) SELECT ROWID, parent_id, child_id, sync_provenance, sync_identity, %lu, %d, %f FROM associations", 0, 0, v8];
  uint64_t v10 = [NSString stringWithFormat:@"INSERT INTO pending_associations_new (ROWID, parent_uuid, child_uuid, sync_provenance, sync_identity, type, deleted, creation_date) SELECT ROWID, parent_uuid, child_uuid, sync_provenance, sync_identity, %lu, %d, %f FROM pending_associations", 0, 0, v8];
  v13[0] = @"CREATE TABLE associations_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, destination_object_id INTEGER, source_object_id INTEGER, sync_provenance INTEGER, sync_identity INTEGER NOT NULL, type INTEGER NOT NULL, deleted INTEGER NOT NULL, creation_date REAL NOT NULL, destination_sub_object_id INTEGER NULL, UNIQUE(destination_object_id, source_object_id))";
  v13[1] = v9;
  void v13[2] = @"DROP TABLE associations";
  void v13[3] = @"ALTER TABLE associations_new RENAME TO associations";
  v13[4] = @"CREATE INDEX IF NOT EXISTS associations_child ON associations (source_object_id)";
  v13[5] = @"CREATE TABLE pending_associations_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, parent_uuid BLOB NOT NULL, child_uuid BLOB NOT NULL, sync_provenance INTEGER NOT NULL, sync_identity INTEGER NOT NULL, destination_sub_uuid BLOB NULL, type INTEGER NOT NULL, deleted INTEGER NOT NULL, creation_date REAL NOT NULL, UNIQUE(parent_uuid, child_uuid, destination_sub_uuid))";
  v13[6] = v10;
  v13[7] = @"DROP TABLE pending_associations";
  v13[8] = @"ALTER TABLE pending_associations_new RENAME TO pending_associations";
  v13[9] = @"CREATE INDEX IF NOT EXISTS pending_associations_child ON pending_associations (child_uuid)";
  id v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:10];
  LODWORD(a4) = [v5 executeSQLStatements:v11 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddPauseRingsScheduleTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeUncachedSQL:@"CREATE TABLE IF NOT EXISTS pause_rings_schedule_samples (data_id INTEGER PRIMARY KEY REFERENCES samples (data_id) ON DELETE CASCADE, start_date_index INTEGER NOT NULL, end_date_index INTEGER NOT NULL)", a4 error] ^ 1;

  return v6;
}

uint64_t _HDAddPauseColumnToActivityCache(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeUncachedSQL:@"ALTER TABLE activity_caches ADD COLUMN paused INTEGER" error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddActivityGoalSchedulesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA5A8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDUpdateTypeAndCreationDateFieldOnAssociationsTableForWorkoutEffortChildren(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = NSString;
  id v6 = a2;
  uint64_t v7 = [v5 stringWithFormat:@"UPDATE associations SET type = %lu, creation_date = samples.end_date FROM samples WHERE associations.source_object_id=samples.data_id AND associations.type = %lu AND (samples.data_type = %lu OR samples.data_type = %lu)", 1, 0, 298, 304];
  uint64_t v8 = [v6 protectedDatabase];

  uint64_t v9 = [v8 executeUncachedSQL:v7 error:a4] ^ 1;
  return v9;
}

uint64_t _HDUpdateTypeAndCreationDateFieldOnAssociationsTableForNonWorkoutEffortChildren(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = (void *)MEMORY[0x1E4F1C9C8];
  id v6 = a2;
  uint64_t v7 = [v5 distantPast];
  [v7 timeIntervalSinceReferenceDate];
  uint64_t v9 = v8;

  uint64_t v10 = [NSString stringWithFormat:@"UPDATE associations SET type = %lu, creation_date = %f FROM samples WHERE associations.source_object_id=samples.data_id AND associations.type = %lu AND samples.data_type != %lu AND samples.data_type != %lu", 0, v9, 1, 298, 304];
  id v11 = [v6 protectedDatabase];

  uint64_t v12 = [v11 executeUncachedSQL:v10 error:a4] ^ 1;
  return v12;
}

void sub_1BCF67388(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF67AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__135(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__135(uint64_t a1)
{
}

void sub_1BCF68084(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1BCF685A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

__CFString *NSStringFromHDQuantitySampleValueEnumeratorOptions(uint64_t a1)
{
  if (a1)
  {
    char v1 = a1;
    id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v3 = v2;
    if (v1) {
      [v2 addObject:@"expand series"];
    }
    if ((v1 & 2) != 0) {
      [v3 addObject:@"secondary sort by UUID"];
    }
    uint64_t v4 = [v3 componentsJoinedByString:@", "];
  }
  else
  {
    uint64_t v4 = @"none";
  }

  return v4;
}

void sub_1BCF695CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__136(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__136(uint64_t a1)
{
}

uint64_t HDCodableUserDomainConceptReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 128;
        goto LABEL_63;
      case 2u:
        uint64_t v21 = objc_alloc_init(HDCodableUserDomainConceptTypeIdentifier);
        objc_storeStrong((id *)(a1 + 40), v21);
        if (!PBReaderPlaceMark()
          || (HDCodableUserDomainConceptTypeIdentifierReadFrom((uint64_t)v21, a2) & 1) == 0)
        {
          goto LABEL_109;
        }
        goto LABEL_84;
      case 3u:
        *(unsigned char *)(a1 + 140) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v55 = 8;
        goto LABEL_106;
      case 4u:
        *(unsigned char *)(a1 + 140) |= 2u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v55 = 16;
LABEL_106:
        *(void *)(a1 + v55) = v24;
        goto LABEL_107;
      case 5u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 140) |= 0x20u;
        while (2)
        {
          uint64_t v30 = *v3;
          uint64_t v31 = *(void *)(a2 + v30);
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              BOOL v15 = v28++ >= 9;
              if (v15)
              {
                uint64_t v29 = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v29 = 0;
        }
LABEL_88:
        *(unsigned char *)(a1 + 136) = v29 != 0;
        goto LABEL_107;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_63;
      case 7u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + 140) |= 4u;
        while (2)
        {
          uint64_t v37 = *v3;
          uint64_t v38 = *(void *)(a2 + v37);
          unint64_t v39 = v38 + 1;
          if (v38 == -1 || v39 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              BOOL v15 = v35++ >= 9;
              if (v15)
              {
                LODWORD(v36) = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v36) = 0;
        }
LABEL_92:
        uint64_t v54 = 72;
        goto LABEL_101;
      case 8u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + 140) |= 8u;
        while (2)
        {
          uint64_t v43 = *v3;
          uint64_t v44 = *(void *)(a2 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v45;
            v36 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              BOOL v15 = v42++ >= 9;
              if (v15)
              {
                LODWORD(v36) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v36) = 0;
        }
LABEL_96:
        uint64_t v54 = 76;
        goto LABEL_101;
      case 9u:
        char v47 = 0;
        unsigned int v48 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + 140) |= 0x10u;
        while (2)
        {
          uint64_t v49 = *v3;
          uint64_t v50 = *(void *)(a2 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v51;
            v36 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              BOOL v15 = v48++ >= 9;
              if (v15)
              {
                LODWORD(v36) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v36) = 0;
        }
LABEL_100:
        uint64_t v54 = 96;
LABEL_101:
        *(_DWORD *)(a1 + v54) = v36;
        goto LABEL_107;
      case 0xAu:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 56;
        goto LABEL_63;
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
        goto LABEL_22;
      case 0x14u:
        uint64_t v21 = objc_alloc_init(HDCodableMedicalCoding);
        [(id)a1 addCodings:v21];
        if (!PBReaderPlaceMark() || !HDCodableMedicalCodingReadFrom((uint64_t)v21, a2)) {
          goto LABEL_109;
        }
        goto LABEL_84;
      case 0x15u:
        uint64_t v21 = objc_alloc_init(HDCodableUserDomainConceptLink);
        [(id)a1 addLinks:v21];
        if (!PBReaderPlaceMark() || (HDCodableUserDomainConceptLinkReadFrom((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_109;
        }
        goto LABEL_84;
      case 0x16u:
        uint64_t v21 = objc_alloc_init(HDCodableUserDomainConceptProperty);
        [(id)a1 addProperties:v21];
        if (!PBReaderPlaceMark()
          || (HDCodableUserDomainConceptPropertyReadFrom((uint64_t)v21, a2) & 1) == 0)
        {
          goto LABEL_109;
        }
        goto LABEL_84;
      case 0x17u:
        uint64_t v21 = objc_alloc_init(HDCodableUserDomainConceptLocalizedStringProperty);
        [(id)a1 addLocalizedStringProperties:v21];
        if (!PBReaderPlaceMark()
          || (HDCodableUserDomainConceptLocalizedStringPropertyReadFrom((uint64_t)v21, a2) & 1) == 0)
        {
          goto LABEL_109;
        }
        goto LABEL_84;
      case 0x18u:
        uint64_t v21 = objc_alloc_init(HDCodableOntologyLocalizedEducationContent);
        objc_storeStrong((id *)(a1 + 88), v21);
        if (!PBReaderPlaceMark()
          || (HDCodableOntologyLocalizedEducationContentReadFrom((uint64_t)v21, a2) & 1) == 0)
        {
          goto LABEL_109;
        }
        goto LABEL_84;
      case 0x19u:
        uint64_t v21 = objc_alloc_init(HDCodableUserDomainConceptNamedQuantity);
        [(id)a1 addNamedQuantities:v21];
        if (!PBReaderPlaceMark()
          || (HDCodableUserDomainConceptNamedQuantityReadFrom((uint64_t)v21, a2) & 1) == 0)
        {
          goto LABEL_109;
        }
        goto LABEL_84;
      case 0x1Au:
        uint64_t v21 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 112), v21);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v21, a2))
        {
LABEL_84:
          PBReaderRecallMark();

LABEL_107:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_109:

        return 0;
      default:
        if ((v10 >> 3) == 100)
        {
          uint64_t v18 = PBReaderReadData();
          uint64_t v19 = 120;
LABEL_63:
          unint64_t v53 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;
        }
        else
        {
LABEL_22:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
        }
        goto LABEL_107;
    }
  }
}

uint64_t HDCodableQuantityReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__137(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__137(uint64_t a1)
{
}

void sub_1BCF71234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDCloudSyncCodableChangeReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 9)
      {
        if (v17 != 1)
        {
          if (v17 != 2)
          {
LABEL_55:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 44) |= 4u;
          while (1)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if ((v29 & 0x80) == 0) {
              goto LABEL_62;
            }
            v24 += 7;
            BOOL v14 = v25++ >= 9;
            if (v14)
            {
              uint64_t v26 = 0;
              goto LABEL_64;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_64:
          uint64_t v42 = 24;
          goto LABEL_73;
        }
        char v40 = objc_alloc_init(HDCodableSyncAnchorRangeMap);
        objc_storeStrong((id *)(a1 + 32), v40);
        if (!PBReaderPlaceMark()
          || !-[HDCodableSyncAnchorRangeMap readFrom:](v40, "readFrom:", a2, 0, 0))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        if (v17 == 10)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          while (1)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v26 |= (unint64_t)(v34 & 0x7F) << v30;
            if ((v34 & 0x80) == 0) {
              goto LABEL_66;
            }
            v30 += 7;
            BOOL v14 = v31++ >= 9;
            if (v14)
            {
              uint64_t v26 = 0;
              goto LABEL_68;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_66:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_68:
          uint64_t v42 = 16;
          goto LABEL_73;
        }
        if (v17 == 11)
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (1)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v26 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0) {
              goto LABEL_70;
            }
            v35 += 7;
            BOOL v14 = v36++ >= 9;
            if (v14)
            {
              uint64_t v26 = 0;
              goto LABEL_72;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_70:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_72:
          uint64_t v42 = 8;
LABEL_73:
          *(void *)(a1 + v42) = v26;
          continue;
        }
        if (v17 != 20) {
          goto LABEL_55;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 44) |= 8u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_58;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_60;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_60:
        *(unsigned char *)(a1 + 40) = v20 != 0;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableECGSampleReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = objc_alloc_init(HDCodableSample);
          objc_storeStrong((id *)(a1 + 32), v18);
          if PBReaderPlaceMark() && (HDCodableSampleReadFrom((uint64_t)v18, a2))
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (1)
          {
            uint64_t v23 = *v3;
            uint64_t v24 = *(void *)(a2 + v23);
            unint64_t v25 = v24 + 1;
            if (v24 == -1 || v25 > *(void *)(a2 + *v4)) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0) {
              goto LABEL_43;
            }
            v20 += 7;
            BOOL v15 = v21++ >= 9;
            if (v15)
            {
              uint64_t v22 = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v22 = 0;
          }
LABEL_45:
          uint64_t v38 = 16;
          goto LABEL_50;
        case 3u:
          *(unsigned char *)(a1 + 48) |= 1u;
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v29 = 0;
          }
          *(void *)(a1 + 8) = v29;
          continue;
        case 4u:
          uint64_t v30 = PBReaderReadData();
          unsigned int v31 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v30;

          continue;
        case 5u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v34 = *v3;
        uint64_t v35 = *(void *)(a2 + v34);
        unint64_t v36 = v35 + 1;
        if (v35 == -1 || v36 > *(void *)(a2 + *v4)) {
          break;
        }
        char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
        *(void *)(a2 + v34) = v36;
        v22 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0) {
          goto LABEL_47;
        }
        v32 += 7;
        BOOL v15 = v33++ >= 9;
        if (v15)
        {
          uint64_t v22 = 0;
          goto LABEL_49;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v22 = 0;
      }
LABEL_49:
      uint64_t v38 = 24;
LABEL_50:
      *(void *)(a1 + v38) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCF73BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF73D5C(_Unwind_Exception *exception_object)
{
}

void sub_1BCF73F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF741F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1BCF742B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF74438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF744BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF74658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDCodableSharingRelationshipReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        unsigned int v19 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v18;

        goto LABEL_47;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 56) |= 2u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_44:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_47;
      case 3u:
        *(unsigned char *)(a1 + 56) |= 1u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        *(void *)(a1 + 8) = v30;
        goto LABEL_47;
      case 4u:
        PBReaderReadString();
        unsigned int v31 = (HDCodableSharingAuthorization *)objc_claimAutoreleasedReturnValue();
        if (v31) {
          [(id)a1 addAuthorizationIdentifiers:v31];
        }
        goto LABEL_40;
      case 5u:
        unsigned int v31 = objc_alloc_init(HDCodableSharingAuthorization);
        [(id)a1 addSharingAuthorizations:v31];
        if (!PBReaderPlaceMark() || !HDCodableSharingAuthorizationReadFrom((uint64_t)v31, a2)) {
          goto LABEL_49;
        }
        goto LABEL_39;
      case 6u:
        unsigned int v31 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 48), v31);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v31, a2))
        {
LABEL_39:
          PBReaderRecallMark();
LABEL_40:

LABEL_47:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_49:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_47;
    }
  }
}

BOOL HDCodableObjectAuthorizationReadFrom(void *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = (HDCodableObjectSourceAuthorization *)a1[2];
        a1[2] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = objc_alloc_init(HDCodableObjectSourceAuthorization);
    [a1 addAuthorizations:v18];
    if (!PBReaderPlaceMark() || (HDCodableObjectSourceAuthorizationReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDMedicalUserDomainConceptEntityPredicateForCountryCode(uint64_t a1)
{
  return [MEMORY[0x1E4F65D00] predicateWithProperty:@"country_code" equalToValue:a1];
}

void sub_1BCF7C16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__138(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__138(uint64_t a1)
{
}

void sub_1BCF7C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t HDMedicalUserDomainConceptEntityPredicateForCategoryType(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  return [MEMORY[0x1E4F65D00] predicateWithProperty:@"medical_user_domain_concept_category_types.category_type" value:a1 comparisonType:v2];
}

uint64_t HDMedicalUserDomainConceptEntityPredicateForCategoryTypes(uint64_t a1)
{
  return [MEMORY[0x1E4F65D10] containsPredicateWithProperty:@"medical_user_domain_concept_category_types.category_type" values:a1];
}

id HDMedicalUserDomainConceptEntityPredicateForMedicalRecordWithUUID(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  long long v3 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v4 = _HDSQLiteValueForUUID();
  id v5 = [v3 predicateWithProperty:@"objects.uuid" value:v4 comparisonType:v2];

  return v5;
}

uint64_t HDMedicalUserDomainConceptEntityPredicateForMedicalRecordWithUUIDs(uint64_t a1)
{
  return [MEMORY[0x1E4F65D10] containsPredicateWithProperty:@"objects.uuid" values:a1];
}

void sub_1BCF7DE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__139(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__139(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__140(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__140(uint64_t a1)
{
}

void sub_1BCF810C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF813F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF82194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t HDCodableWorkoutReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = objc_alloc_init(HDCodableSample);
        objc_storeStrong((id *)(a1 + 96), v18);
        if PBReaderPlaceMark() && (HDCodableSampleReadFrom((uint64_t)v18, a2)) {
          goto LABEL_66;
        }
        goto LABEL_93;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 112) |= 0x100u;
        while (2)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if (v26 < 0)
            {
              v20 += 7;
              BOOL v15 = v21++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_70:
        uint64_t v48 = 72;
        goto LABEL_75;
      case 3u:
        uint64_t v18 = objc_alloc_init(HDCodableWorkoutEvent);
        [(id)a1 addEvents:v18];
        if (!PBReaderPlaceMark() || (HDCodableWorkoutEventReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_93;
        }
        goto LABEL_66;
      case 4u:
        *(_WORD *)(a1 + 112) |= 1u;
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        uint64_t v49 = 8;
        goto LABEL_90;
      case 5u:
        *(_WORD *)(a1 + 112) |= 0x20u;
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v31);
          *(void *)(a2 + v30) = v31 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        uint64_t v49 = 48;
        goto LABEL_90;
      case 6u:
        *(_WORD *)(a1 + 112) |= 0x10u;
        uint64_t v32 = *v3;
        unint64_t v33 = *(void *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        uint64_t v49 = 40;
        goto LABEL_90;
      case 7u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v22 = 0;
        *(_WORD *)(a1 + 112) |= 4u;
        while (2)
        {
          uint64_t v36 = *v3;
          uint64_t v37 = *(void *)(a2 + v36);
          unint64_t v38 = v37 + 1;
          if (v37 == -1 || v38 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v38;
            v22 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              BOOL v15 = v35++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_74:
        uint64_t v48 = 24;
LABEL_75:
        *(void *)(a1 + v48) = v22;
        goto LABEL_91;
      case 8u:
        *(_WORD *)(a1 + 112) |= 2u;
        uint64_t v40 = *v3;
        unint64_t v41 = *(void *)(a2 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v41);
          *(void *)(a2 + v40) = v41 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        uint64_t v49 = 16;
        goto LABEL_90;
      case 9u:
        *(_WORD *)(a1 + 112) |= 8u;
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v43);
          *(void *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        uint64_t v49 = 32;
        goto LABEL_90;
      case 0xAu:
        *(_WORD *)(a1 + 112) |= 0x80u;
        uint64_t v44 = *v3;
        unint64_t v45 = *(void *)(a2 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v45);
          *(void *)(a2 + v44) = v45 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        uint64_t v49 = 64;
        goto LABEL_90;
      case 0xBu:
        *(_WORD *)(a1 + 112) |= 0x40u;
        uint64_t v46 = *v3;
        unint64_t v47 = *(void *)(a2 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v47);
          *(void *)(a2 + v46) = v47 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        uint64_t v49 = 56;
LABEL_90:
        *(void *)(a1 + v49) = v29;
        goto LABEL_91;
      case 0xCu:
        uint64_t v18 = objc_alloc_init(HDCodableWorkoutActivity);
        objc_storeStrong((id *)(a1 + 88), v18);
        goto LABEL_64;
      case 0xDu:
        uint64_t v18 = objc_alloc_init(HDCodableWorkoutActivity);
        [(id)a1 addSubActivities:v18];
LABEL_64:
        if PBReaderPlaceMark() && (HDCodableWorkoutActivityReadFrom((uint64_t)v18, a2))
        {
LABEL_66:
          PBReaderRecallMark();

LABEL_91:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_93:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_91;
    }
  }
}

void sub_1BCF86CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__141(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__141(uint64_t a1)
{
}

HDKeyValueDomain *HDTinkerKeyValueDomainWithProfile(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [[HDKeyValueDomain alloc] initWithCategory:0 domainName:@"Tinker" profile:v1];

  return v2;
}

HDKeyValueDomain *HDTinkerProtectedKeyValueDomainWithProfile(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [[HDKeyValueDomain alloc] initWithCategory:100 domainName:@"Tinker" profile:v1];

  return v2;
}

HDKeyValueDomain *HDTinkerSyncedProtectedKeyValueDomainWithProfile(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [[HDKeyValueDomain alloc] initWithCategory:102 domainName:@"Tinker" profile:v1];

  return v2;
}

uint64_t HDCodableClinicalAccountReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 112;
        goto LABEL_80;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 164) |= 0x400u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                uint64_t v23 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_87:
        *(unsigned char *)(a1 + 160) = v23 != 0;
        goto LABEL_116;
      case 5u:
        *(_WORD *)(a1 + 164) |= 0x10u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v65 = 40;
        goto LABEL_115;
      case 6u:
        *(_WORD *)(a1 + 164) |= 0x200u;
        uint64_t v31 = *v3;
        unint64_t v32 = *(void *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v32);
          *(void *)(a2 + v31) = v32 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v65 = 80;
        goto LABEL_115;
      case 7u:
        *(_WORD *)(a1 + 164) |= 0x80u;
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v65 = 64;
        goto LABEL_115;
      case 8u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 144;
        goto LABEL_80;
      case 9u:
        *(_WORD *)(a1 + 164) |= 0x100u;
        uint64_t v35 = *v3;
        unint64_t v36 = *(void *)(a2 + v35);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v36);
          *(void *)(a2 + v35) = v36 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v65 = 72;
        goto LABEL_115;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 88;
        goto LABEL_80;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 128;
        goto LABEL_80;
      case 0xCu:
        uint64_t v37 = objc_alloc_init(HDCodableMessageVersion);
        objc_storeStrong((id *)(a1 + 120), v37);
        if (!PBReaderPlaceMark() || !HDCodableMessageVersionReadFrom((uint64_t)v37, a2)) {
          goto LABEL_118;
        }
        goto LABEL_83;
      case 0xDu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 136;
        goto LABEL_80;
      case 0xEu:
        *(_WORD *)(a1 + 164) |= 1u;
        uint64_t v38 = *v3;
        unint64_t v39 = *(void *)(a2 + v38);
        if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v39);
          *(void *)(a2 + v38) = v39 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v65 = 8;
        goto LABEL_115;
      case 0xFu:
        *(_WORD *)(a1 + 164) |= 2u;
        uint64_t v40 = *v3;
        unint64_t v41 = *(void *)(a2 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v41);
          *(void *)(a2 + v40) = v41 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v65 = 16;
        goto LABEL_115;
      case 0x11u:
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 164) |= 8u;
        while (2)
        {
          uint64_t v45 = *v3;
          uint64_t v46 = *(void *)(a2 + v45);
          unint64_t v47 = v46 + 1;
          if (v46 == -1 || v47 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
            *(void *)(a2 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              BOOL v15 = v43++ >= 9;
              if (v15)
              {
                uint64_t v44 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_91:
        uint64_t v64 = 32;
        goto LABEL_100;
      case 0x12u:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 164) |= 4u;
        while (2)
        {
          uint64_t v51 = *v3;
          uint64_t v52 = *(void *)(a2 + v51);
          unint64_t v53 = v52 + 1;
          if (v52 == -1 || v53 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
            *(void *)(a2 + v51) = v53;
            v44 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              BOOL v15 = v50++ >= 9;
              if (v15)
              {
                uint64_t v44 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_95:
        uint64_t v64 = 24;
        goto LABEL_100;
      case 0x13u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 96;
        goto LABEL_80;
      case 0x14u:
        *(_WORD *)(a1 + 164) |= 0x40u;
        uint64_t v55 = *v3;
        unint64_t v56 = *(void *)(a2 + v55);
        if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v56);
          *(void *)(a2 + v55) = v56 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v65 = 56;
LABEL_115:
        *(void *)(a1 + v65) = v30;
        goto LABEL_116;
      case 0x15u:
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v44 = 0;
        *(_WORD *)(a1 + 164) |= 0x20u;
        while (2)
        {
          uint64_t v59 = *v3;
          uint64_t v60 = *(void *)(a2 + v59);
          unint64_t v61 = v60 + 1;
          if (v60 == -1 || v61 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v62 = *(unsigned char *)(*(void *)(a2 + *v7) + v60);
            *(void *)(a2 + v59) = v61;
            v44 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              BOOL v15 = v58++ >= 9;
              if (v15)
              {
                uint64_t v44 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v44 = 0;
        }
LABEL_99:
        uint64_t v64 = 48;
LABEL_100:
        *(void *)(a1 + v64) = v44;
        goto LABEL_116;
      case 0x16u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 104;
LABEL_80:
        unint64_t v63 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_116;
      case 0x17u:
        uint64_t v37 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 152), v37);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v37, a2))
        {
LABEL_83:
          PBReaderRecallMark();

LABEL_116:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_118:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_116;
    }
  }
}

void sub_1BCF8AB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__142(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__142(uint64_t a1)
{
}

void sub_1BCF8AEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 152), 8);
  _Block_object_dispose((const void *)(v34 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodableOntologyLocalizedEducationContentSectionReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = objc_alloc_init(HDCodableSectionData);
        [(id)a1 addSectionData:v23];
        if (!PBReaderPlaceMark() || (HDCodableSectionDataReadFrom((uint64_t)v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(void *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL HDCodableMessageVersionReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            uint64_t v24 = &OBJC_IVAR___HDCodableMessageVersion__entityVersion;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            uint64_t v24 = &OBJC_IVAR___HDCodableMessageVersion__entityVersion;
            goto LABEL_41;
          }
        }
        uint64_t v24 = &OBJC_IVAR___HDCodableMessageVersion__entityVersion;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        uint64_t v24 = &OBJC_IVAR___HDCodableMessageVersion__compatibilityVersion;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        uint64_t v24 = &OBJC_IVAR___HDCodableMessageVersion__compatibilityVersion;
        goto LABEL_41;
      }
    }
    uint64_t v24 = &OBJC_IVAR___HDCodableMessageVersion__compatibilityVersion;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HDBuiltinSyncEntityClassForType(uint64_t a1)
{
  long long v3 = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 22:
    case 23:
    case 26:
    case 44:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
      long long v3 = objc_opt_class();
      break;
    default:
      break;
  }
  return v3;
}

id HDBuiltinOrderedSyncEntities()
{
  if (qword_1EBA18DD0 != -1) {
    dispatch_once(&qword_1EBA18DD0, &__block_literal_global_173);
  }
  std::regex_traits<char> v0 = (void *)_MergedGlobals_218;

  return v0;
}

void __HDBuiltinOrderedSyncEntities_block_invoke()
{
  v2[42] = *MEMORY[0x1E4F143B8];
  v2[0] = objc_opt_class();
  v2[1] = objc_opt_class();
  v2[2] = objc_opt_class();
  v2[3] = objc_opt_class();
  v2[4] = objc_opt_class();
  v2[5] = objc_opt_class();
  v2[6] = objc_opt_class();
  v2[7] = objc_opt_class();
  v2[8] = objc_opt_class();
  v2[9] = objc_opt_class();
  v2[10] = objc_opt_class();
  v2[11] = objc_opt_class();
  v2[12] = objc_opt_class();
  v2[13] = objc_opt_class();
  v2[14] = objc_opt_class();
  v2[15] = objc_opt_class();
  v2[16] = objc_opt_class();
  v2[17] = objc_opt_class();
  v2[18] = objc_opt_class();
  v2[19] = objc_opt_class();
  v2[20] = objc_opt_class();
  v2[21] = objc_opt_class();
  v2[22] = objc_opt_class();
  v2[23] = objc_opt_class();
  v2[24] = objc_opt_class();
  v2[25] = objc_opt_class();
  v2[26] = objc_opt_class();
  v2[27] = objc_opt_class();
  v2[28] = objc_opt_class();
  v2[29] = objc_opt_class();
  v2[30] = objc_opt_class();
  v2[31] = objc_opt_class();
  v2[32] = objc_opt_class();
  v2[33] = objc_opt_class();
  v2[34] = objc_opt_class();
  v2[35] = objc_opt_class();
  v2[36] = objc_opt_class();
  v2[37] = objc_opt_class();
  v2[38] = objc_opt_class();
  v2[39] = objc_opt_class();
  v2[40] = objc_opt_class();
  v2[41] = objc_opt_class();
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:42];
  uint64_t v1 = (void *)_MergedGlobals_218;
  _MergedGlobals_218 = v0;
}

id HDBuiltinStateSyncEntities()
{
  if (qword_1EBA18DE0 != -1) {
    dispatch_once(&qword_1EBA18DE0, &__block_literal_global_325);
  }
  uint64_t v0 = (void *)qword_1EBA18DD8;

  return v0;
}

void __HDBuiltinStateSyncEntities_block_invoke()
{
  uint64_t v0 = (void *)qword_1EBA18DD8;
  qword_1EBA18DD8 = MEMORY[0x1E4F1CBF0];
}

uint64_t HDCodableObjectSourceAuthorizationReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 32;
        goto LABEL_33;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                uint64_t v23 = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_40:
        *(void *)(a1 + 8) = v23;
        goto LABEL_43;
      case 3u:
        *(unsigned char *)(a1 + 48) |= 2u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        *(void *)(a1 + 16) = v30;
        goto LABEL_43;
      case 4u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 24;
LABEL_33:
        uint64_t v31 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_43;
      case 5u:
        unint64_t v32 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 40), v32);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v32, a2))
        {
          PBReaderRecallMark();

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

void sub_1BCF92CEC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__143(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__143(uint64_t a1)
{
}

id HDPredicateForZoneIDAndRecordName(uint64_t a1, void *a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  long long v3 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v4 = NSNumber;
  id v5 = a2;
  uint64_t v6 = [v4 numberWithLongLong:a1];
  uint64_t v7 = [v3 predicateWithProperty:@"zone_id" equalToValue:v6];

  char v8 = (void *)MEMORY[0x1E4F65D00];
  unsigned int v9 = _HDSQLiteValueForString();

  unint64_t v10 = [v8 predicateWithProperty:@"record_name" equalToValue:v9];

  uint64_t v11 = (void *)MEMORY[0x1E4F65D08];
  v15[0] = v7;
  v15[1] = v10;
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:2];
  unint64_t v13 = [v11 predicateMatchingAllPredicates:v12];

  return v13;
}

id HDPredicateForRecordsSinceEpoch(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v2 = [NSNumber numberWithLongLong:a1];
  long long v3 = [v1 predicateWithProperty:@"epoch" greaterThanValue:v2];

  return v3;
}

id HDPredicateForZoneIDAndRecordType(uint64_t a1, void *a2)
{
  v15[2] = *MEMORY[0x1E4F143B8];
  long long v3 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v4 = NSNumber;
  id v5 = a2;
  uint64_t v6 = [v4 numberWithLongLong:a1];
  uint64_t v7 = [v3 predicateWithProperty:@"zone_id" equalToValue:v6];

  char v8 = (void *)MEMORY[0x1E4F65D00];
  unsigned int v9 = _HDSQLiteValueForString();

  unint64_t v10 = [v8 predicateWithProperty:@"record_type" equalToValue:v9];

  uint64_t v11 = (void *)MEMORY[0x1E4F65D08];
  v15[0] = v7;
  v15[1] = v10;
  uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v15 count:2];
  unint64_t v13 = [v11 predicateMatchingAllPredicates:v12];

  return v13;
}

void sub_1BCF97914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__144(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__144(uint64_t a1)
{
}

id HDPredicateForZoneID(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v2 = [NSNumber numberWithLongLong:a1];
  long long v3 = [v1 predicateWithProperty:@"zone_id" equalToValue:v2];

  return v3;
}

void sub_1BCF97CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCF98004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t HDEntityActivityModeModeForRowAndColumnName(uint64_t a1)
{
  int v2 = HDSQLiteColumnWithName();
  if (MEMORY[0x1C1879FC0](a1, v2)) {
    return 1;
  }
  unint64_t result = HDSQLiteColumnAsInt64();
  if (result <= 1) {
    return 1;
  }
  return result;
}

void sub_1BCF9AB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose((const void *)(v13 - 160), 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__145(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__145(uint64_t a1)
{
}

void sub_1BCF9BF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF9C264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_1BCF9C40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF9C6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1BCF9C804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF9C8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF9C9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCF9CA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setUnderlyingDeviceKeyValue(void *a1, void *a2)
{
  id v3 = a2;
  id v9 = a1;
  uint64_t v4 = [v3 key];
  [v9 setKey:v4];

  id v5 = [v3 value];
  [v9 setValue:v5];

  uint64_t v6 = [v3 domain];
  [v9 setDomain:v6];

  uint64_t v7 = [v3 modificationDate];
  [v7 timeIntervalSinceReferenceDate];
  objc_msgSend(v9, "setModificationDate:");

  uint64_t v8 = [v3 protectionCategory];
  [v9 setProtectionCategory:v8];
}

void sub_1BCF9EBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__146(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__146(uint64_t a1)
{
}

id HDMedicalRecordEntityPredicateForFHIRIdentifier(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F65D00];
  int v2 = [a1 stringValue];
  id v3 = [v1 predicateWithProperty:@"fhir_identifier" equalToValue:v2];

  return v3;
}

void sub_1BCF9FF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

id HDMedicalRecordEntityPredicateForModifiedDate(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x1E4F65D00];
  id v3 = _HDSQLiteValueForDate();
  uint64_t v4 = [v2 predicateWithProperty:@"modified_date" value:v3 comparisonType:a1];

  return v4;
}

id HDMedicalRecordEntityPredicateForSortDate(uint64_t a1)
{
  int v2 = (void *)MEMORY[0x1E4F65D00];
  id v3 = _HDSQLiteValueForDate();
  uint64_t v4 = [v2 predicateWithProperty:@"sort_date" value:v3 comparisonType:a1];

  return v4;
}

id HDMedicalRecordEntityPredicateForState(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v4 = [NSNumber numberWithUnsignedInteger:a2];
  id v5 = [v3 predicateWithProperty:@"state" value:v4 comparisonType:a1];

  return v5;
}

id HDMedicalRecordEntityPredicateForMedicalUserDomainConcept(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F65D00];
  int v2 = [a1 UUID];
  id v3 = [v1 predicateWithProperty:@"user_domain_concepts.uuid" equalToValue:v2];

  return v3;
}

id HDMedicalRecordEntityPredicateForOriginType(unsigned __int8 a1, uint64_t a2)
{
  char v2 = a1 ^ 1;
  if (a2 == 1 && ((a1 ^ 1) & 1) == 0)
  {
    id v3 = (void *)MEMORY[0x1E4F65D48];
    uint64_t v4 = @"fhir_identifier";
LABEL_15:
    uint64_t v7 = [v3 isNotNullPredicateWithProperty:v4];
    goto LABEL_16;
  }
  if (a2 == 1 && (a1 & 1) == 0)
  {
    id v5 = (void *)MEMORY[0x1E4F65D48];
    uint64_t v6 = @"fhir_identifier";
LABEL_13:
    uint64_t v7 = [v5 isNullPredicateWithProperty:v6];
    goto LABEL_16;
  }
  if (a2 != 3) {
    char v2 = 1;
  }
  if ((v2 & 1) == 0)
  {
    id v3 = (void *)MEMORY[0x1E4F65D48];
    uint64_t v4 = @"original_signed_clinical_data_rowid";
    goto LABEL_15;
  }
  if (a2 == 3 && (a1 & 1) == 0)
  {
    id v5 = (void *)MEMORY[0x1E4F65D48];
    uint64_t v6 = @"original_signed_clinical_data_rowid";
    goto LABEL_13;
  }
  uint64_t v7 = [MEMORY[0x1E4F65D58] falsePredicate];
LABEL_16:

  return v7;
}

id HDMedicalRecordEntityPredicateForSignedClinicalDataOriginIdentifier(void *a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)MEMORY[0x1E4F65D38];
  id v2 = a1;
  id v3 = +[HDSQLiteSchemaEntity disambiguatedDatabaseTable];
  uint64_t v4 = [v1 innerJoinClauseFromTable:v3 toTargetEntity:objc_opt_class() as:0 localReference:@"original_signed_clinical_data_rowid" targetKey:*MEMORY[0x1E4F65C70]];

  id v5 = (void *)MEMORY[0x1E4F65D40];
  uint64_t v6 = [MEMORY[0x1E4F1CAD0] setWithObject:v4];
  uint64_t v7 = [v5 predicateWithJoinClauses:v6];

  uint64_t v8 = [MEMORY[0x1E4F65D00] predicateWithProperty:@"sync_identifier" equalToValue:v2];
  id v9 = [v8 SQLForEntityClass:objc_opt_class()];
  unint64_t v10 = (void *)MEMORY[0x1E4F65D78];
  v18[0] = v2;
  uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
  uint64_t v12 = [v10 predicateWithSQL:v9 overProperties:MEMORY[0x1E4F1CBF0] values:v11];

  uint64_t v13 = (void *)MEMORY[0x1E4F65D08];
  v17[0] = v7;
  v17[1] = v12;
  char v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:2];
  BOOL v15 = [v13 predicateMatchingAllPredicates:v14];

  return v15;
}

void sub_1BCFA11F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFA435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BCFA5BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

uint64_t __Block_byref_object_copy__147(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__147(uint64_t a1)
{
}

void sub_1BCFA5E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1BCFAD6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFAD8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodableSyncStateOriginReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 56) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
        goto LABEL_66;
      case 2u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 16;
        goto LABEL_26;
      case 3u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 40;
LABEL_26:
        uint64_t v24 = *(void **)(a1 + v23);
        *(void *)(a1 + v23) = v22;

        goto LABEL_66;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 56) |= 2u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              BOOL v15 = v26++ >= 9;
              if (v15)
              {
                LODWORD(v27) = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_54:
        uint64_t v45 = 24;
        goto LABEL_63;
      case 5u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 56) |= 4u;
        while (2)
        {
          uint64_t v34 = *v3;
          uint64_t v35 = *(void *)(a2 + v34);
          unint64_t v36 = v35 + 1;
          if (v35 == -1 || v36 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v36;
            v27 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v15 = v33++ >= 9;
              if (v15)
              {
                LODWORD(v27) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_58:
        uint64_t v45 = 28;
        goto LABEL_63;
      case 6u:
        char v38 = 0;
        unsigned int v39 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 56) |= 8u;
        while (2)
        {
          uint64_t v40 = *v3;
          uint64_t v41 = *(void *)(a2 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
            *(void *)(a2 + v40) = v42;
            v27 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              BOOL v15 = v39++ >= 9;
              if (v15)
              {
                LODWORD(v27) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_62:
        uint64_t v45 = 32;
LABEL_63:
        *(_DWORD *)(a1 + v45) = v27;
        goto LABEL_66;
      case 7u:
        uint64_t v44 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 48), v44);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v44, a2))
        {
          PBReaderRecallMark();

LABEL_66:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_66;
    }
  }
}

void sub_1BCFB0458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__148(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__148(uint64_t a1)
{
}

void sub_1BCFB0C74(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodableRoutineScenarioTriggeredRequestReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 10)
      {
        uint64_t v23 = objc_alloc_init(HDCodableRoutineLocation);
        objc_storeStrong((id *)(a1 + 16), v23);
        if (!PBReaderPlaceMark() || (HDCodableRoutineLocationReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(void *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableTinkerEndToEndCloudSyncResponseReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v20 = objc_alloc_init(HDCodableError);
        objc_storeStrong((id *)(a1 + 8), v20);
        if (!PBReaderPlaceMark() || (HDCodableErrorReadFrom((uint64_t)v20, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v25 + 1;
          v23 |= (unint64_t)(v26 & 0x7F) << v21;
          if ((v26 & 0x80) == 0) {
            goto LABEL_35;
          }
          v21 += 7;
          BOOL v14 = v22++ >= 9;
          if (v14)
          {
            uint64_t v23 = 0;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_37:
        *(unsigned char *)(a1 + 24) = v23 != 0;
      }
      else if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableCorrelationReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        unint64_t v17 = objc_alloc_init(HDCodableSample);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (HDCodableSampleReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCFB45B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1BCFB4924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BCFB536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va2, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__149(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__149(uint64_t a1)
{
}

void sub_1BCFB6420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__150(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__150(uint64_t a1)
{
}

void sub_1BCFB7A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFB8684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BCFB933C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFBBBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

uint64_t __Block_byref_object_copy__151(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__151(uint64_t a1)
{
}

void sub_1BCFBD3B4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodableRoutineResponseMessageReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) <= 9)
      {
        if (v17 == 1)
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (1)
          {
            uint64_t v25 = *v3;
            unint64_t v26 = *(void *)(a2 + v25);
            if (v26 == -1 || v26 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if ((v27 & 0x80) == 0) {
              goto LABEL_43;
            }
            v22 += 7;
            BOOL v14 = v23++ >= 9;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v24) = 0;
          }
LABEL_45:
          *(_DWORD *)(a1 + 40) = v24;
          continue;
        }
        if (v17 != 2)
        {
LABEL_40:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
      }
      else
      {
        if (v17 == 10)
        {
          char v21 = objc_alloc_init(HDCodableRoutineLocationResponse);
          objc_storeStrong((id *)(a1 + 16), v21);
          if (!PBReaderPlaceMark()
            || (HDCodableRoutineLocationResponseReadFrom((uint64_t)v21, a2) & 1) == 0)
          {
LABEL_48:

            return 0;
          }
          goto LABEL_32;
        }
        if (v17 == 11)
        {
          char v21 = objc_alloc_init(HDCodableRoutinePredictedLocationsResponse);
          objc_storeStrong((id *)(a1 + 24), v21);
          if (!PBReaderPlaceMark()
            || (HDCodableRoutinePredictedLocationsResponseReadFrom(v21, a2) & 1) == 0)
          {
            goto LABEL_48;
          }
LABEL_32:
          PBReaderRecallMark();

          continue;
        }
        if (v17 != 100) {
          goto LABEL_40;
        }
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
      }
      uint64_t v20 = *(void **)(a1 + v19);
      *(void *)(a1 + v19) = v18;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCFBF444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

uint64_t __Block_byref_object_copy__152(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__152(uint64_t a1)
{
}

void sub_1BCFC1694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *a16, id *a17, id *location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  objc_destroyWeak(location);
  _Block_object_dispose(&a38, 8);
  objc_destroyWeak(a17);
  objc_destroyWeak(a16);
  _Block_object_dispose((const void *)(v38 - 240), 8);
  objc_destroyWeak((id *)(v38 - 208));
  _Block_object_dispose((const void *)(v38 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1BCFC1C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BCFC1D6C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BCFC38F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  _Block_object_dispose((const void *)(v33 - 256), 8);
  _Block_object_dispose((const void *)(v33 - 224), 8);
  objc_destroyWeak((id *)(v33 - 192));
  _Unwind_Resume(a1);
}

void sub_1BCFC6650(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1BCFC8D28(_Unwind_Exception *a1)
{
}

uint64_t IDSPriorityFromHDIDSPriority(unint64_t a1)
{
  if (a1 > 2) {
    return 200;
  }
  else {
    return qword_1BD32D9F8[a1];
  }
}

__CFString *HDStringFromHDIDSPriority(unint64_t a1)
{
  if (a1 >= 3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Unknown Priority (%ld)", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E63078A0[a1];
  }

  return v1;
}

BOOL HDCodableSignedClinicalDataIssuerReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 40;
        goto LABEL_25;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
        goto LABEL_25;
      case 4u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
        goto LABEL_25;
      case 5u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 48;
LABEL_25:
        uint64_t v19 = *(HDCodableMessageVersion **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x230], 8) = v17;
        goto LABEL_32;
      case 6u:
        uint64_t v19 = objc_alloc_init(HDCodableMessageVersion);
        objc_storeStrong((id *)(a1 + 16), v19);
        if (!PBReaderPlaceMark() || !HDCodableMessageVersionReadFrom((uint64_t)v19, a2)) {
          goto LABEL_36;
        }
        goto LABEL_31;
      case 7u:
        uint64_t v19 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 32), v19);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v19, a2))
        {
LABEL_31:
          PBReaderRecallMark();
LABEL_32:

LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_33;
    }
  }
}

void sub_1BCFCA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__153(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__153(uint64_t a1)
{
}

uint64_t HDCodableSyncAnchorRangeReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_46;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_48:
        uint64_t v35 = 16;
        goto LABEL_57;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_52:
        uint64_t v35 = 24;
        goto LABEL_57;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 1;
            v19 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_56:
        uint64_t v35 = 8;
LABEL_57:
        *(void *)(a1 + v35) = v19;
        goto LABEL_58;
      case 4u:
        uint64_t v34 = objc_alloc_init(HDCodableEntityIdentifier);
        objc_storeStrong((id *)(a1 + 32), v34);
        if PBReaderPlaceMark() && (HDCodableEntityIdentifierReadFrom((uint64_t)v34, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

uint64_t __Block_byref_object_copy__154(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__154(uint64_t a1)
{
}

uint64_t _removeUserDataAndAdHocConcepts(void *a1, uint64_t a2)
{
  return [a1 executeUncachedSQL:@"DELETE FROM nodes WHERE rowid IN (SELECT object_id FROM relationships WHERE name_id in (10, 11)) OR ROWID IN (SELECT node_id FROM attributes WHERE key_id = 2) OR name = \"ad-hoc concept\" OR rowid >= 0x01000000", a2 error] ^ 1;
}

uint64_t _improveOntologyDatabaseSchema(void *a1, uint64_t a2)
{
  return [a1 executeSQLStatements:&unk_1F17EA620 error:a2] ^ 1;
}

uint64_t _shardedOntologySupport(void *a1, uint64_t a2)
{
  v16[15] = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v12 = 0;
  char v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = ___shardedOntologySupport_block_invoke_2;
  void v11[3] = &unk_1E62F3640;
  v11[4] = &v12;
  if ([v3 executeUncachedSQL:@"SELECT value FROM metadata WHERE key=?" error:a2 bindingHandler:&__block_literal_global_185 enumerationHandler:v11])
  {
    v16[0] = @"CREATE TABLE new_nodes (rowid INTEGER PRIMARY KEY, version INTEGER NOT NULL, slots INTEGER NOT NULL, deleted INTEGER NOT NULL)";
    v16[1] = @"CREATE TABLE new_attributes (rowid INTEGER PRIMARY KEY, node_id INTEGER NOT NULL REFERENCES new_nodes (rowid) ON DELETE CASCADE, attribute_type INTEGER NOT NULL, value TEXT NOT NULL, version INTEGER NOT NULL, slots INTEGER NOT NULL, UNIQUE(node_id, attribute_type, value))";
    v16[2] = @"CREATE TABLE new_relationships (rowid INTEGER PRIMARY KEY, subject_id INTEGER NOT NULL REFERENCES new_nodes (rowid) ON DELETE CASCADE, relationship_type INTEGER NOT NULL, object_id INTEGER NOT NULL REFERENCES new_nodes (rowid) ON DELETE CASCADE, version INTEGER NOT NULL, slots INTEGER NOT NULL, UNIQUE(subject_id, relationship_type, object_id))";
    v16[3] = @"CREATE TABLE IF NOT EXISTS shard_registry (rowid INTEGER PRIMARY KEY, identifier TEXT NOT NULL, schema_type TEXT NOT NULL, schema_version INTEGER NOT NULL, settings INTEGER NOT NULL, slot INTEGER NOT NULL, desired_state INTEGER NOT NULL, desired_state_date REAL NOT NULL, current_version INTEGER NOT NULL, current_version_date REAL NOT NULL, current_region TEXT NOT NULL, current_region_date REAL NOT NULL, current_locale TEXT, current_locale_date REAL NOT NULL, available_version INTEGER NOT NULL, available_version_date REAL NOT NULL, available_region TEXT NOT NULL, available_region_date REAL NOT NULL, available_locale TEXT, available_locale_date REAL NOT NULL, available_url TEXT, available_url_date REAL NOT NULL, available_checksum TEXT, available_checksum_date REAL NOT NULL, available_size INTEGER NOT NULL, available_size_date REAL NOT NULL, available_state INTEGER NOT NULL, available_state_date REAL NOT NULL, UNIQUE(identifier, schema_type, schema_version))";
    uint64_t v4 = [NSString stringWithFormat:@"INSERT INTO new_nodes SELECT rowid, %lld, 0, 0 FROM nodes", v13[3]];
    v16[4] = v4;
    id v5 = [NSString stringWithFormat:@"INSERT INTO new_attributes SELECT rowid, node_id, attribute_type, value, %lld, 0 FROM attributes", v13[3]];
    v16[5] = v5;
    uint64_t v6 = [NSString stringWithFormat:@"INSERT INTO new_relationships SELECT rowid, subject_id, relationship_type, object_id, %lld, 0 FROM relationships", v13[3]];
    v16[6] = v6;
    v16[7] = @"DROP TABLE attributes";
    v16[8] = @"DROP TABLE relationships";
    v16[9] = @"DROP TABLE nodes";
    v16[10] = @"ALTER TABLE new_nodes RENAME TO nodes";
    v16[11] = @"ALTER TABLE new_attributes RENAME TO attributes";
    v16[12] = @"ALTER TABLE new_relationships RENAME TO relationships";
    v16[13] = @"CREATE INDEX attributes_type_value_index ON attributes(attribute_type, value)";
    v16[14] = @"CREATE INDEX relationships_object_id_index ON relationships (object_id)";
    uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:15];

    int v8 = [v3 executeSQLStatements:v7 error:a2];
    uint64_t v9 = v8 ^ 1u;
  }
  else
  {
    uint64_t v9 = 1;
  }
  _Block_object_dispose(&v12, 8);

  return v9;
}

void sub_1BCFCFA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _removeOrphanedSydneyContent(void *a1, uint64_t a2)
{
  return [a1 executeSQLStatements:&unk_1F17EA638 error:a2] ^ 1;
}

uint64_t _noOpSuccess()
{
  return 0;
}

uint64_t ___shardedOntologySupport_block_invoke()
{
  return HDSQLiteBindStringToStatement();
}

uint64_t ___shardedOntologySupport_block_invoke_2(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HDSQLiteColumnAsInt64();
  return 1;
}

uint64_t hfd_catchExceptionsAsErrors(void *a1, uint64_t a2, unsigned char *a3)
{
  id v5 = a1;
  uint64_t v6 = v5;
  if (a3) {
    *a3 = 0;
  }
  uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a2);

  return v7;
}

void sub_1BCFD03C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BCFD04B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD0568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)HDHFDataStore;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

void sub_1BCFD062C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD0784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD0CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _Unwind_Exception *exception_object, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

__CFString *sizeStringForNumber(NSNumber *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = NSString;
    [(NSNumber *)v1 doubleValue];
    id v5 = [v3 stringWithFormat:@"%.2f MB", v4 * 0.000000953674316];
  }
  else
  {
    id v5 = @"<Unknown size>";
  }

  return v5;
}

void sub_1BCFD0EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD1078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__155(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__155(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void _HDHFDataStoreWillCloseStore(HDHFDataStore *a1)
{
  uint64_t v1 = a1;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  void v3[2] = ___ZL28_HDHFDataStoreWillCloseStoreP13HDHFDataStore_block_invoke;
  v3[3] = &unk_1E6307AD8;
  double v4 = v1;
  uint64_t v2 = v1;
  _WithActiveHFDataStores(0, v3);
}

void sub_1BCFD1254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD13C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__355(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__356(uint64_t a1)
{
}

void sub_1BCFD1650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD1768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD1878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD1AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD1BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_1BCFD1F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD2788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a12, 8);
  _Block_object_dispose((const void *)(v30 - 176), 8);
  unint64_t v32 = *(std::__shared_weak_count **)(v30 - 120);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }

  _Unwind_Resume(a1);
}

void sub_1BCFD289C(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BCFD2C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c45_ZTSNSt3__110shared_ptrIN6health9DataStoreEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 4_Block_object_dispose(&STACK[0x230], 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c45_ZTSNSt3__110shared_ptrIN6health9DataStoreEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1BCFD2EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD2F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD30AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1BCFD4640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,health::TransactionalFile *a25,uint64_t a26,health::TransactionalFile *a27,uint64_t a28,health::TransactionalFile *a29)
{
  std::unique_ptr<health::DataStore>::reset[abi:ne180100](&a25, 0);
  std::unique_ptr<health::DataStore>::reset[abi:ne180100](&a27, 0);

  std::unique_ptr<health::DataStore>::reset[abi:ne180100](&a29, 0);
  _Unwind_Resume(a1);
}

void sub_1BCFD49B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD4C2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD4E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFD4F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__function::__value_func<BOOL ()(health::DataStore::WriteTransaction &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c58_ZTSKZ45__HDHFDataStore__lock_restoreHFDFromArchive__E3__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v3;
  return result;
}

void sub_1BCFD506C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(health::DataStore::WriteTransaction &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c58_ZTSKZ45__HDHFDataStore__lock_restoreHFDFromArchive__E3__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v3;
  return result;
}

void sub_1BCFD51CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1BCFD52A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _WithActiveHFDataStores(void *a1, void *a2)
{
  long long v3 = a1;
  double v4 = a2;
  if (qword_1EBA18E18 != -1) {
    dispatch_once(&qword_1EBA18E18, &__block_literal_global_465);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  [(id)qword_1EBA18E10 lock];
  if (v3)
  {
    char v6 = v3[2](v3, _MergedGlobals_221);
    double v7 = Current + 5.0;
    while ((v6 & 1) == 0)
    {
      if (CFAbsoluteTimeGetCurrent() > v7)
      {
        uint64_t v10 = 0;
        goto LABEL_10;
      }
      int v8 = (void *)qword_1EBA18E10;
      uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:v7];
      [v8 waitUntilDate:v9];

      char v6 = v3[2](v3, _MergedGlobals_221);
    }
  }
  v4[2](v4, _MergedGlobals_221);
  [(id)qword_1EBA18E10 signal];
  uint64_t v10 = 1;
LABEL_10:
  [(id)qword_1EBA18E10 unlock];

  return v10;
}

void sub_1BCFD5544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28_HDHFDataStoreWillCloseStoreP13HDHFDataStore_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  _HKInitializeLogging();
  double v4 = *MEMORY[0x1E4F29F18];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl(&dword_1BCB7D000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@: Will close store (#hfd)", (uint8_t *)&v6, 0xCu);
  }
  [v3 removeObject:*(void *)(a1 + 32)];
}

void sub_1BCFD5638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL23_WithActiveHFDataStoresU13block_pointerFbP11NSHashTableIP13HDHFDataStoreEEU13block_pointerFvS3_E_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F28D30] weakObjectsHashTable];
  uint64_t v1 = (void *)_MergedGlobals_221;
  _MergedGlobals_221 = v0;

  id v2 = objc_alloc_init(MEMORY[0x1E4F28BB0]);
  id v3 = (void *)qword_1EBA18E10;
  qword_1EBA18E10 = (uint64_t)v2;
}

uint64_t ___ZL27_HDHFDataStoreWillOpenStoreP13HDHFDataStore_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v3 = [a2 allObjects];
  uint64_t v4 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v19;
    uint64_t v7 = (os_log_t *)MEMORY[0x1E4F29F18];
    *(void *)&long long v5 = 138543618;
    long long v17 = v5;
    while (2)
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void **)(*((void *)&v18 + 1) + 8 * v8);
        _HKInitializeLogging();
        uint64_t v10 = *v7;
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          *(_DWORD *)buf = v17;
          uint64_t v23 = v11;
          __int16 v24 = 2114;
          unsigned int v25 = v9;
          _os_log_impl(&dword_1BCB7D000, v10, OS_LOG_TYPE_DEFAULT, "%{public}@: Existing open store: %{public}@ (#hfd)", buf, 0x16u);
        }
        uint64_t v12 = objc_msgSend(v9, "fileSystemPath", v17);
        char v13 = [*(id *)(a1 + 32) fileSystemPath];
        char v14 = [v12 isEqualToString:v13];

        if (v14)
        {
          uint64_t v15 = 0;
          goto LABEL_13;
        }
        ++v8;
      }
      while (v4 != v8);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v18 objects:v26 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v15 = 1;
LABEL_13:

  return v15;
}

void sub_1BCFD5870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL27_HDHFDataStoreWillOpenStoreP13HDHFDataStore_block_invoke_473(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  _HKInitializeLogging();
  uint64_t v4 = *MEMORY[0x1E4F29F18];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543362;
    uint64_t v7 = v5;
    _os_log_impl(&dword_1BCB7D000, v4, OS_LOG_TYPE_DEFAULT, "%{public}@: Will open store (#hfd)", (uint8_t *)&v6, 0xCu);
  }
  [v3 addObject:*(void *)(a1 + 32)];
}

void sub_1BCFD5974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE7__cloneEv(uint64_t a1)
{
  id v2 = (char *)operator new(0x30uLL);
  *(void *)id v2 = &unk_1F1720D80;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1720D80;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEEclESF_(void **a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*a1[1] + 80));
  uint64_t v3 = [WeakRetained migrateDataForHFDataStore:*a1[1] from:*a1[2] to:*a1[3] recoveryAnalytics:*a1[4] error:*a1[5]];

  return v3;
}

void sub_1BCFD5AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE11target_typeEv()
{
  return &_ZTIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__0clEPU15__autoreleasingP7NSErrorEUlRT_E_;
}

void _ZNSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE7__cloneEv(uint64_t a1)
{
  id v2 = (char *)operator new(0x30uLL);
  *(void *)id v2 = &unk_1F1720E00;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1720E00;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEEclESF_(void **a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*a1[1] + 80));
  uint64_t v3 = [WeakRetained migrateDataForHFDataStore:*a1[1] from:*a1[2] to:*a1[3] recoveryAnalytics:*a1[4] error:*a1[5]];

  return v3;
}

void sub_1BCFD5C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_NS_9allocatorIS9_EEFbRN6health9DataStore16WriteTransactionEEE11target_typeEv()
{
  return &_ZTIZZ45__HDHFDataStore__lock_restoreHFDFromArchive__ENK3__1clEPU15__autoreleasingP7NSErrorEUlRT_E_;
}

void std::__shared_ptr_emplace<health::DataStore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1720E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<health::DataStore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1720E80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C187B8A0);
}

void std::__shared_ptr_emplace<health::DataStore>::__on_zero_shared(uint64_t a1)
{
}

void sub_1BCFD8264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__156(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__156(uint64_t a1)
{
}

void sub_1BCFD84EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1BCFD8670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFD8958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1BCFD8ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodablePinnedContentStateReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_33:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        long long v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableContributorReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 40;
        goto LABEL_37;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 52) |= 2u;
        while (2)
        {
          uint64_t v23 = *v3;
          uint64_t v24 = *(void *)(a2 + v23);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if (v26 < 0)
            {
              v20 += 7;
              BOOL v15 = v21++ >= 9;
              if (v15)
              {
                uint64_t v22 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_41:
        *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v22 != 0;
        goto LABEL_44;
      case 3u:
        *(unsigned char *)(a1 + 52) |= 1u;
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v29 = *(void *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v29 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v29;
        goto LABEL_44;
      case 4u:
        uint64_t v30 = objc_alloc_init(HDCodableSyncIdentity);
        objc_storeStrong((id *)(a1 + 32), v30);
        if (PBReaderPlaceMark() && HDCodableSyncIdentityReadFrom((uint64_t)v30, a2))
        {
          PBReaderRecallMark();

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_37;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_37:
        unint64_t v32 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_44;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_44;
    }
  }
}

void sub_1BCFDDA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFDF99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

id HDSimpleGraphRelationshipEntityPredicateForRelationshipType(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F65D00];
  id v2 = [NSNumber numberWithLongLong:a1];
  uint64_t v3 = [v1 predicateWithProperty:@"relationship_type" value:v2 comparisonType:1];

  return v3;
}

id HDSimpleGraphRelationshipEntityPredicateForFetchType(uint64_t a1, uint64_t a2)
{
  switch(a1)
  {
    case 2:
      uint64_t v7 = (void *)MEMORY[0x1E4F65D58];
      char v8 = (void *)MEMORY[0x1E4F65D00];
      uint64_t v5 = [NSNumber numberWithLongLong:a2];
      unsigned int v9 = [v8 predicateWithProperty:@"object_id" value:v5 comparisonType:1];
      unint64_t v10 = (void *)MEMORY[0x1E4F65D00];
      uint64_t v11 = [NSNumber numberWithLongLong:a2];
      uint64_t v12 = [v10 predicateWithProperty:@"subject_id" value:v11 comparisonType:1];
      unint64_t v13 = [v7 disjunctionWithPredicate:v9 otherPredicate:v12];

      goto LABEL_9;
    case 1:
      uint64_t v4 = (void *)MEMORY[0x1E4F65D00];
      uint64_t v5 = [NSNumber numberWithLongLong:a2];
      int v6 = @"object_id";
      goto LABEL_7;
    case 0:
      uint64_t v4 = (void *)MEMORY[0x1E4F65D00];
      uint64_t v5 = [NSNumber numberWithLongLong:a2];
      int v6 = @"subject_id";
LABEL_7:
      unint64_t v13 = [v4 predicateWithProperty:v6 value:v5 comparisonType:1];
      goto LABEL_9;
  }
  uint64_t v5 = [MEMORY[0x1E4F28B00] currentHandler];
  unint64_t v13 = objc_msgSend(NSString, "stringWithUTF8String:", "HDSQLitePredicate * _Nonnull HDSimpleGraphRelationshipEntityPredicateForFetchType(HDGraphDatabaseRelationshipFetchType, int64_t)");
  objc_msgSend(v5, "handleFailureInFunction:file:lineNumber:description:", v13, @"HDSimpleGraphDatabaseRelationshipEntity.m", 346, @"Invalid fetchType: %lld", a1);

LABEL_9:

  return v13;
}

id HDSimpleGraphRelationshipEntityPredicateForSubjectID(uint64_t a1)
{
  return HDSimpleGraphRelationshipEntityPredicateForFetchType(0, a1);
}

id HDSimpleGraphRelationshipEntityPredicateForSubject(uint64_t a1, uint64_t a2)
{
  void v9[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1E4F65D08];
  uint64_t v4 = HDSimpleGraphRelationshipEntityPredicateForFetchType(0, a1);
  v9[0] = v4;
  uint64_t v5 = HDSimpleGraphRelationshipEntityPredicateForRelationshipType(a2);
  v9[1] = v5;
  int v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v9 count:2];
  uint64_t v7 = [v3 predicateMatchingAllPredicates:v6];

  return v7;
}

void sub_1BCFE0BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1BCFE123C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int buf, long long a20,uint64_t a21,long long a22)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    _HKInitializeLogging();
    uint64_t v24 = *MEMORY[0x1E4F29F90];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F90], OS_LOG_TYPE_ERROR))
    {
      buf = 138544130;
      WORD2(a20) = 2048;
      *(void *)((char *)&a20 + 6) = a15;
      HIWORD(a20) = 2048;
      a21 = v23;
      LOWORD(a22) = 2048;
      *(void *)((char *)&a22 + 2) = v22;
      _os_log_error_impl(&dword_1BCB7D000, v24, OS_LOG_TYPE_ERROR, "%{public}@: Caught exception adding data point with value %lf (%lf -> %lf); ignoring.",
        (uint8_t *)&buf,
        0x2Au);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BCFE11F4);
  }
  _Unwind_Resume(a1);
}

void sub_1BCFE15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFE1718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *std::vector<HistogramBucket>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 64;
      long long v6 = *(_OWORD *)(v3 - 48);
      uint64_t v7 = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 4_Block_object_dispose(&STACK[0x230], 8) = v6;
      *(void *)(v4 - 32) = v7;
      *(void *)(v4 - 24) = 0;
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - _Block_object_dispose(&STACK[0x230], 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - _Block_object_dispose(&STACK[0x230], 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - _Block_object_dispose(&STACK[0x230], 8) = 0;
      v4 -= 64;
      v3 -= 64;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HistogramBucket>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 6);
}

uint64_t std::__split_buffer<HistogramBucket>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 64;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t _HDAddVersionFieldsToSyncAnchorEntity(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA698 error:a4] ^ 1;

  return v6;
}

uint64_t _HDResetWorkoutSyncAnchors(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA6B0 error:a4];

  return a4 ^ 1;
}

uint64_t _HDChangeForeignKeyOnBuilderStatisticsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA6C8 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddSyncIdentityTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeUncachedSQL:@"CREATE TABLE sync_identities (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, hardware_identifier BLOB NOT NULL, database_identifier BLOB NOT NULL, instance_discriminator TEXT NOT NULL, UNIQUE(hardware_identifier, database_identifier, instance_discriminator))", a4 error] ^ 1;

  return v6;
}

uint64_t _HDAddLogicalSourceEntity(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA6E0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddWorkoutAssociatedObjectTimestampColumn(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA6F8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddLogicalSourceOrderEntity(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA710 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddMultiActivityFieldsToWorkoutSessionsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA740 error:a4] ^ 1;

  return v6;
}

uint64_t _HDValidatedAnchorsToSyncAnchorEntityTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA758 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddRequestedDatesToWorkoutSessionsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA770 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddUnprotectedWorkoutOwnerIndices(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA7A0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDRefactorSourcesToAddLogicalSourceID(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA728 error:a4] ^ 1;

  return v6;
}

uint64_t _HDSwapDataTypeSourceOrderToLogicalSourceOrder(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA788 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddSourceIndices(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA7B8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddLegacySyncIdentityToSyncIdentityTable(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = (void *)MEMORY[0x1E4F65C98];
  objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM sync_identities WHERE hardware_identifier = %@('00000000-0000-0000-0000-000000000000') AND database_identifier = %@('00000000-0000-0000-0000-000000000000') AND instance_discriminator = '' LIMIT 1;",
    *MEMORY[0x1E4F65C98],
  uint64_t v9 = *MEMORY[0x1E4F65C98]);
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v10 = [v7 unprotectedDatabase];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = ___HDAddLegacySyncIdentityToSyncIdentityTable_block_invoke;
  v16[3] = &unk_1E62F3640;
  v16[4] = &v17;
  char v11 = [v10 executeSQL:v9 error:a4 bindingHandler:0 enumerationHandler:v16];

  if (v11)
  {
    if (v18[3])
    {
      uint64_t v12 = 0;
    }
    else
    {
      unint64_t v13 = [NSString stringWithFormat:@"INSERT INTO sync_identities (hardware_identifier, database_identifier, instance_discriminator) VALUES (%@('00000000-0000-0000-0000-000000000000'), %@('00000000-0000-0000-0000-000000000000'), '')", *v8, *v8];
      char v14 = [v7 unprotectedDatabase];
      uint64_t v12 = [v14 executeUncachedSQL:v13 error:a4] ^ 1;
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
  _Block_object_dispose(&v17, 8);

  return v12;
}

void sub_1BCFE39D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HDSyncIdentityUpdateForDeviceEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void v18[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 unprotectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE source_devices_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, manufacturer TEXT NOT NULL, model TEXT NOT NULL, hardware TEXT NOT NULL, firmware TEXT NOT NULL, software TEXT NOT NULL, localIdentifier TEXT NOT NULL, FDAUDI TEXT NOT NULL, creation_date REAL NOT NULL, sync_provenance INTEGER NOT NULL, uuid BLOB UNIQUE NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(name, manufacturer, model, hardware, firmware, software, localIdentifier, FDAUDI, sync_provenance, uuid, sync_identity));",
                       a4))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM sync_identities WHERE hardware_identifier = %@('00000000-0000-0000-0000-000000000000') AND database_identifier = %@('00000000-0000-0000-0000-000000000000') AND instance_discriminator = '' LIMIT 1;",
      *MEMORY[0x1E4F65C98],
    uint64_t v9 = *MEMORY[0x1E4F65C98]);
    v17[0] = 0;
    v17[1] = v17;
    void v17[2] = 0x2020000000;
    void v17[3] = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = ___HDSyncIdentityUpdateForDeviceEntity_block_invoke;
    v16[3] = &unk_1E62F3640;
    v16[4] = v17;
    if ([v8 executeSQL:v9 error:a4 bindingHandler:0 enumerationHandler:v16])
    {
      uint64_t v10 = [NSString stringWithFormat:@"INSERT INTO source_devices_new (ROWID, name, manufacturer, model, hardware, firmware, software, localIdentifier, FDAUDI, creation_date, sync_provenance, uuid, sync_identity) SELECT ROWID, name, manufacturer, model, hardware, firmware, software, localIdentifier, FDAUDI, creation_date, sync_provenance, uuid, ? AS sync_identity FROM source_devices;"];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      v15[2] = ___HDSyncIdentityUpdateForDeviceEntity_block_invoke_2;
      void v15[3] = &unk_1E62F3D88;
      v15[4] = v17;
      if ([v8 executeSQL:v10 error:a4 bindingHandler:v15 enumerationHandler:0])
      {
        v18[0] = @"DROP TABLE source_devices;";
        v18[1] = @"ALTER TABLE source_devices_new RENAME TO source_devices;";
        char v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:2];
        int v12 = [v8 executeSQLStatements:v11 error:a4];

        uint64_t v13 = v12 ^ 1u;
      }
      else
      {
        uint64_t v13 = 1;
      }
    }
    else
    {
      uint64_t v13 = 1;
    }
    _Block_object_dispose(v17, 8);
  }
  else
  {
    uint64_t v13 = 1;
  }

  return v13;
}

void sub_1BCFE3C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HDSyncIdentityUpdateForSourceEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 unprotectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE sources_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, uuid BLOB UNIQUE NOT NULL, name TEXT NOT NULL, source_options INTEGER NOT NULL, local_device INTEGER NOT NULL, product_type TEXT NOT NULL, deleted INTEGER NOT NULL, mod_date REAL NOT NULL, provenance INTEGER NOT NULL, sync_anchor INTEGER NOT NULL UNIQUE, logical_source_id INTEGER NOT NULL REFERENCES logical_sources (ROWID) ON DELETE CASCADE, sync_identity INTEGER NOT NULL);",
                       a4))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM sync_identities WHERE hardware_identifier = %@('00000000-0000-0000-0000-000000000000') AND database_identifier = %@('00000000-0000-0000-0000-000000000000') AND instance_discriminator = '' LIMIT 1;",
      *MEMORY[0x1E4F65C98],
    uint64_t v9 = *MEMORY[0x1E4F65C98]);
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2020000000;
    void v15[3] = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = ___HDSyncIdentityUpdateForSourceEntity_block_invoke;
    void v14[3] = &unk_1E62F3640;
    v14[4] = v15;
    if ([v8 executeSQL:v9 error:a4 bindingHandler:0 enumerationHandler:v14])
    {
      uint64_t v10 = [NSString stringWithFormat:@"INSERT INTO sources_new (ROWID, uuid, name, source_options, local_device, product_type, deleted, mod_date, provenance, sync_anchor, logical_source_id, sync_identity) SELECT ROWID, uuid, name, source_options, local_device, product_type, deleted, mod_date, provenance, sync_anchor, logical_source_id, ? AS sync_identity FROM sources;"];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = ___HDSyncIdentityUpdateForSourceEntity_block_invoke_2;
      void v13[3] = &unk_1E62F3D88;
      v13[4] = v15;
      if ([v8 executeSQL:v10 error:a4 bindingHandler:v13 enumerationHandler:0]) {
        uint64_t v11 = [v8 executeSQLStatements:&unk_1F17EA7D0 error:a4] ^ 1;
      }
      else {
        uint64_t v11 = 1;
      }
    }
    else
    {
      uint64_t v11 = 1;
    }
    _Block_object_dispose(v15, 8);
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_1BCFE3E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _IncrementSourceOrderSyncAnchors(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2020000000;
  v16[3] = 0;
  uint64_t v8 = [v7 unprotectedDatabase];
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = ___IncrementSourceOrderSyncAnchors_block_invoke;
  void v15[3] = &unk_1E62F3640;
  void v15[4] = v16;
  char v9 = [v8 executeUncachedSQL:@"SELECT MAX(COALESCE((SELECT MAX(ROWID) FROM datatype_source_order), 0), COALESCE((SELECT MAX(ROWID) FROM logical_source_order), 0))", a4, 0, v15 error bindingHandler enumerationHandler];

  if (v9)
  {
    uint64_t v10 = [v7 unprotectedDatabase];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = ___IncrementSourceOrderSyncAnchors_block_invoke_2;
    void v14[3] = &unk_1E62F3D88;
    v14[4] = v16;
    int v11 = [v10 executeUncachedSQL:@"UPDATE logical_source_order SET ROWID = ROWID + ?" error:a4 bindingHandler:v14 enumerationHandler:0];

    uint64_t v12 = v11 ^ 1u;
  }
  else
  {
    uint64_t v12 = 1;
  }
  _Block_object_dispose(v16, 8);

  return v12;
}

void sub_1BCFE3FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HDSyncIdentityUpdateForLogicalSourceOrderEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 unprotectedDatabase];
  if ([v8 executeUncachedSQL:@"CREATE TABLE logical_source_order_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, data_type INTEGER NOT NULL, logical_source INTEGER NOT NULL REFERENCES logical_sources (ROWID) ON DELETE CASCADE, user_preferred INTEGER NOT NULL, provenance INTEGER NOT NULL, modification_date REAL NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(data_type, logical_source))", a4 error])
  {
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM sync_identities WHERE hardware_identifier = %@('00000000-0000-0000-0000-000000000000') AND database_identifier = %@('00000000-0000-0000-0000-000000000000') AND instance_discriminator = '' LIMIT 1;",
      *MEMORY[0x1E4F65C98],
    char v9 = *MEMORY[0x1E4F65C98]);
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2020000000;
    void v15[3] = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = ___HDSyncIdentityUpdateForLogicalSourceOrderEntity_block_invoke;
    void v14[3] = &unk_1E62F3640;
    v14[4] = v15;
    if ([v8 executeSQL:v9 error:a4 bindingHandler:0 enumerationHandler:v14])
    {
      uint64_t v10 = [NSString stringWithFormat:@"INSERT INTO logical_source_order_new (ROWID, data_type, logical_source, user_preferred, provenance, modification_date, sync_identity) SELECT ROWID, data_type, logical_source, user_preferred, provenance, modification_date, ? FROM logical_source_order;"];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = ___HDSyncIdentityUpdateForLogicalSourceOrderEntity_block_invoke_2;
      void v13[3] = &unk_1E62F3D88;
      v13[4] = v15;
      if ([v8 executeSQL:v10 error:a4 bindingHandler:v13 enumerationHandler:0]) {
        uint64_t v11 = [v8 executeSQLStatements:&unk_1F17EA7E8 error:a4] ^ 1;
      }
      else {
        uint64_t v11 = 1;
      }
    }
    else
    {
      uint64_t v11 = 1;
    }
    _Block_object_dispose(v15, 8);
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_1BCFE41F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HDSyncIdentityUpdateForAuthorizationEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 unprotectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE authorization_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, source_id INTEGER NOT NULL REFERENCES sources(ROWID) ON DELETE CASCADE, object_type INTEGER NOT NULL, status INTEGER NOT NULL, request INTEGER NOT NULL, mode INTEGER NOT NULL, date_modified REAL NOT NULL, modification_epoch INTEGER NOT NULL, provenance INTEGER NOT NULL, deleted_object_anchor INTEGER NOT NULL DEFAULT 0, object_limit_anchor INTEGER NOT NULL DEFAULT 0, object_limit_modified REAL, sync_identity INTEGER NOT NULL, UNIQUE(source_id, object_type));",
                       a4))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM sync_identities WHERE hardware_identifier = %@('00000000-0000-0000-0000-000000000000') AND database_identifier = %@('00000000-0000-0000-0000-000000000000') AND instance_discriminator = '' LIMIT 1;",
      *MEMORY[0x1E4F65C98],
    char v9 = *MEMORY[0x1E4F65C98]);
    v15[0] = 0;
    v15[1] = v15;
    v15[2] = 0x2020000000;
    void v15[3] = 0;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = ___HDSyncIdentityUpdateForAuthorizationEntity_block_invoke;
    void v14[3] = &unk_1E62F3640;
    v14[4] = v15;
    if ([v8 executeSQL:v9 error:a4 bindingHandler:0 enumerationHandler:v14])
    {
      uint64_t v10 = [NSString stringWithFormat:@"INSERT INTO authorization_new (ROWID, source_id, object_type, status, request, mode, date_modified, modification_epoch, provenance, deleted_object_anchor, object_limit_anchor, object_limit_modified, sync_identity) SELECT ROWID, source_id, object_type, status, request, mode, date_modified, modification_epoch, provenance, deleted_object_anchor, object_limit_anchor, object_limit_modified, ? FROM authorization;"];
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 3221225472;
      void v13[2] = ___HDSyncIdentityUpdateForAuthorizationEntity_block_invoke_2;
      void v13[3] = &unk_1E62F3D88;
      v13[4] = v15;
      if ([v8 executeSQL:v10 error:a4 bindingHandler:v13 enumerationHandler:0]) {
        uint64_t v11 = [v8 executeSQLStatements:&unk_1F17EA800 error:a4] ^ 1;
      }
      else {
        uint64_t v11 = 1;
      }
    }
    else
    {
      uint64_t v11 = 1;
    }
    _Block_object_dispose(v15, 8);
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_1BCFE43F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HDSyncIdentityUpdateForOnboardingCompletionEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 unprotectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE onboarding_completions_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, uuid BLOB NOT NULL UNIQUE, feature_identifier TEXT NOT NULL, version INTEGER NOT NULL, completion_date REAL NOT NULL, country_code TEXT, mod_date REAL NOT NULL, deleted INTEGER NOT NULL DEFAULT 0, sync_provenance INTEGER NOT NULL, country_code_provenance INTEGER NOT NULL DEFAULT 0, sync_identity INTEGER NOT NULL);",
                       a4))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM sync_identities WHERE hardware_identifier = %@('00000000-0000-0000-0000-000000000000') AND database_identifier = %@('00000000-0000-0000-0000-000000000000') AND instance_discriminator = '' LIMIT 1;",
      *MEMORY[0x1E4F65C98],
    char v9 = *MEMORY[0x1E4F65C98]);
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x2020000000;
    v16[3] = 0;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = ___HDSyncIdentityUpdateForOnboardingCompletionEntity_block_invoke;
    void v15[3] = &unk_1E62F3640;
    void v15[4] = v16;
    if (([v8 executeSQL:v9 error:a4 bindingHandler:0 enumerationHandler:v15] & 1) != 0
      && (v14[0] = MEMORY[0x1E4F143A8],
          v14[1] = 3221225472,
          v14[2] = ___HDSyncIdentityUpdateForOnboardingCompletionEntity_block_invoke_2,
          void v14[3] = &unk_1E62F3D88,
          v14[4] = v16,
          (objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO onboarding_completions_new (ROWID, uuid, feature_identifier, version, completion_date, country_code, mod_date, deleted, sync_provenance, country_code_provenance, sync_identity) SELECT ROWID, uuid, feature_identifier, version, completion_date, country_code, mod_date, deleted, sync_provenance, country_code_provenance, ? FROM onboarding_completions;",
             a4,
             v14,
             0) & 1) != 0))
    {
      v17[0] = @"DROP TABLE onboarding_completions;";
      v17[1] = @"ALTER TABLE onboarding_completions_new RENAME TO onboarding_completions;";
      uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:2];
      int v11 = [v8 executeSQLStatements:v10 error:a4];

      uint64_t v12 = v11 ^ 1u;
    }
    else
    {
      uint64_t v12 = 1;
    }
    _Block_object_dispose(v16, 8);
  }
  else
  {
    uint64_t v12 = 1;
  }

  return v12;
}

void sub_1BCFE4640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HDSyncIdentityUpdateForUnProtectedKeyValueEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 unprotectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE key_value_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, category INTEGER NOT NULL, domain TEXT NOT NULL, key TEXT NOT NULL, value, provenance INTEGER NOT NULL, mod_date REAL NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(category, domain, key));",
                       a4))
  {
    objc_msgSend(NSString, "stringWithFormat:", @"SELECT ROWID FROM sync_identities WHERE hardware_identifier = %@('00000000-0000-0000-0000-000000000000') AND database_identifier = %@('00000000-0000-0000-0000-000000000000') AND instance_discriminator = '' LIMIT 1;",
      *MEMORY[0x1E4F65C98],
    char v9 = *MEMORY[0x1E4F65C98]);
    v18[0] = 0;
    v18[1] = v18;
    void v18[2] = 0x2020000000;
    void v18[3] = 0;
    uint64_t v10 = [v7 unprotectedDatabase];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = ___HDSyncIdentityUpdateForUnProtectedKeyValueEntity_block_invoke;
    void v17[3] = &unk_1E62F3640;
    void v17[4] = v18;
    char v11 = [v10 executeSQL:v9 error:a4 bindingHandler:0 enumerationHandler:v17];

    if ((v11 & 1) != 0
      && (v16[0] = MEMORY[0x1E4F143A8],
          v16[1] = 3221225472,
          v16[2] = ___HDSyncIdentityUpdateForUnProtectedKeyValueEntity_block_invoke_2,
          v16[3] = &unk_1E62F3D88,
          void v16[4] = v18,
          (objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO key_value_new (ROWID, category, domain, key, value, provenance, mod_date, sync_identity) SELECT ROWID, category, domain, key, value, provenance, mod_date, ? FROM key_value;",
             a4,
             v16,
             0) & 1) != 0))
    {
      v19[0] = @"DROP TABLE key_value;";
      v19[1] = @"ALTER TABLE key_value_new RENAME TO key_value;";
      uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:2];
      int v13 = [v8 executeSQLStatements:v12 error:a4];

      uint64_t v14 = v13 ^ 1u;
    }
    else
    {
      uint64_t v14 = 1;
    }
    _Block_object_dispose(v18, 8);
  }
  else
  {
    uint64_t v14 = 1;
  }

  return v14;
}

void sub_1BCFE48AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HDResetAllReceivedSyncAnchors(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 unprotectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA818 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddSyncIdentityToCloudSyncStoreEntity(void *a1)
{
  return objc_msgSend(a1, "executeSQL:error:", @"ALTER TABLE cloud_sync_stores ADD COLUMN sync_identity INTEGER") ^ 1;
}

uint64_t _HDResetAnchorsForAssociationsForNanoSync_1(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v7 = [a1 behavior];
  char v8 = [v7 isAppleWatch];

  if (v8)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = [v6 unprotectedDatabase];
    uint64_t v9 = [v10 executeSQLStatements:&unk_1F17EA830 error:a4] ^ 1;
  }
  return v9;
}

uint64_t _HDAddAttachmentAndReferencesEntities_0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA848 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddVisionPrescriptionEntityTable_0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA860 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddWorkoutStatisticsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA878 error:a4] ^ 1;

  return v6;
}

uint64_t _HDCopyWorkoutTotalsToPrimaryActivity(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v25 = a1;
  id v6 = a2;
  v41[0] = 0;
  v41[1] = v41;
  v41[2] = 0x2020000000;
  v41[3] = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2020000000;
  v40[3] = 0;
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2020000000;
  v39[3] = 0;
  id v7 = [v6 protectedDatabase];
  v37[6] = v39;
  id v38 = 0;
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 3221225472;
  void v37[2] = ___HDCopyWorkoutTotalsToPrimaryActivity_block_invoke;
  v37[3] = &unk_1E62FA4E8;
  v37[4] = v41;
  void v37[5] = v40;
  char v8 = [v7 executeUncachedSQL:@"SELECT ROWID, key FROM metadata_keys WHERE key IN ('HKIndoorWorkout', 'HKSwimmingLocationType', 'HKLapLength')", &v38, 0, v37 error bindingHandler enumerationHandler];
  id v9 = v38;
  if (v8)
  {
    id v36 = 0;
    char v10 = [v7 executeSQLStatements:&unk_1F17EA890 error:&v36];
    id v11 = v36;
    if (v10)
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000;
      uint64_t v47 = 0;
      id v35 = 0;
      uint64_t v26 = MEMORY[0x1E4F143A8];
      uint64_t v27 = 3221225472;
      unint64_t v28 = ___HDCopyWorkoutTotalsToPrimaryActivity_block_invoke_587;
      uint64_t v29 = &unk_1E6307E08;
      uint64_t v31 = v41;
      unint64_t v32 = v40;
      char v33 = v39;
      id v30 = v7;
      uint64_t v34 = buf;
      char v12 = [v30 executeUncachedSQL:@"SELECT data_id, o.uuid, w.activity_type, s.start_date, s.end_date, w.duration, total_energy_burned, total_basal_energy_burned, total_w_steps, total_flights_climbed, total_distance FROM workouts w INNER JOIN samples s USING(data_id) INNER JOIN objects o USING(data_id)", &v35, 0, &v26 error bindingHandler enumerationHandler];
      id v13 = v35;
      uint64_t v14 = v13;
      if (v12)
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v18 = NSString;
        uint64_t v19 = *(void *)(*(void *)&buf[8] + 24);
        uint64_t v20 = [v13 userInfo];
        unsigned int v21 = [v20 objectForKeyedSubscript:*MEMORY[0x1E4F29B68]];
        uint64_t v22 = [v18 stringWithFormat:@"CopyWorkoutTotalsToPrimaryActivity: Success count: %lu, context: %@", v19, v21, v25, v26, v27, v28, v29];

        _HDAssignWorkoutDatabaseMigrationError(a4, v22, v14, 0);
        _HKInitializeLogging();
        uint64_t v23 = *MEMORY[0x1E4F29F18];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)unint64_t v42 = 138543618;
          char v43 = v22;
          __int16 v44 = 2114;
          uint64_t v45 = v14;
          _os_log_fault_impl(&dword_1BCB7D000, v23, OS_LOG_TYPE_FAULT, "%{public}@, underlying error: %{public}@", v42, 0x16u);
        }

        uint64_t v15 = 1;
      }

      _Block_object_dispose(buf, 8);
    }
    else
    {
      _HDAssignWorkoutDatabaseMigrationError(a4, @"CopyWorkoutTotalsToPrimaryActivity: Failed to empty activities and statistics tables", v11, 0);
      _HKInitializeLogging();
      uint64_t v17 = *MEMORY[0x1E4F29F18];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = @"CopyWorkoutTotalsToPrimaryActivity: Failed to empty activities and statistics tables";
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v11;
        _os_log_fault_impl(&dword_1BCB7D000, v17, OS_LOG_TYPE_FAULT, "%{public}@: %{public}@", buf, 0x16u);
      }
      uint64_t v15 = 1;
    }
  }
  else
  {
    _HDAssignWorkoutDatabaseMigrationError(a4, @"CopyWorkoutTotalsToPrimaryActivity: Failed to retrieve swimming metadata", v9, 0);
    _HKInitializeLogging();
    int v16 = *MEMORY[0x1E4F29F18];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = @"CopyWorkoutTotalsToPrimaryActivity: Failed to retrieve swimming metadata";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v9;
      _os_log_fault_impl(&dword_1BCB7D000, v16, OS_LOG_TYPE_FAULT, "%{public}@: %{public}@", buf, 0x16u);
    }
    uint64_t v15 = 1;
  }

  _Block_object_dispose(v39, 8);
  _Block_object_dispose(v40, 8);
  _Block_object_dispose(v41, 8);

  return v15;
}

void sub_1BCFE565C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDAddUDCLocalizedStringTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA8A8 error:a4];

  return a4 ^ 1;
}

uint64_t _HDModifyConceptIndexTableOntologyVersionColumn(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA8C0 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddSyncProvenanceToCredentialsTable(void *a1)
{
  return objc_msgSend(a1, "executeSQLStatements:error:", &unk_1F17EA8D8) ^ 1;
}

uint64_t _HDAddClinicalAccountEventsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA8F0 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddMedicationDoseEventSamplesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA920 error:a4];

  return a4 ^ 1;
}

uint64_t _HDFixWorkoutStatisticsForeignKey(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA908 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddMedicationUUIDToMedicationDoseEventSamplesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  LODWORD(a4) = [v5 executeSQLStatements:&unk_1F17EA938 error:a4];

  return a4 ^ 1;
}

uint64_t _HDAddAttachmentMetadata(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA950 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddAttachmentEncryptionKeyColumn(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA968 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddDisplaySubtitleColumn(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA980 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddNotNullConstraintsToAttachmentsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA998 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddProtectedWorkoutOwnerIndices(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA9B0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDFixLapLengthColumnInActivitiesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___HDFixLapLengthColumnInActivitiesTable_block_invoke;
  void v9[3] = &unk_1E62F3D60;
  id v10 = v5;
  id v11 = @"UPDATE workout_activities SET lap_length = NULL WHERE ROWID = ?";
  id v6 = v5;
  uint64_t v7 = [v6 executeUncachedSQL:@"SELECT ROWID, lap_length FROM workout_activities", a4, 0, v9 error bindingHandler enumerationHandler] ^ 1;

  return v7;
}

uint64_t _HDDeleteHearingReductionSamples(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return _HDDeleteQuantitySamplesOfType(a2, 272, a4) ^ 1;
}

uint64_t _HDMigrateBloodPressureIdentifierAuthorizationsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA9E0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddUserDomainConceptEducationContentTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA9F8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddVersionColumnToActivityCacheTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v12[7] = *MEMORY[0x1E4F143B8];
  v12[0] = @"DROP INDEX IF EXISTS activity_caches_cache_index";
  v12[1] = @"DROP TABLE IF EXISTS activity_caches_new";
  void v12[2] = @"CREATE TABLE activity_caches_new (data_id INTEGER PRIMARY KEY REFERENCES samples (data_id) ON DELETE CASCADE, cache_index INTEGER, sequence INTEGER NOT NULL, activity_mode INTEGER, wheelchair_use INTEGER, energy_burned REAL, energy_burned_goal REAL, energy_burned_goal_date REAL, move_minutes REAL, move_minutes_goal REAL, move_minutes_goal_date REAL, brisk_minutes REAL, brisk_minutes_goal REAL, brisk_minutes_goal_date REAL, active_hours REAL, active_hours_goal REAL, active_hours_goal_date REAL, steps REAL, pushes REAL, walk_distance REAL, deep_breathing_duration REAL, flights INTEGER, energy_burned_stats BLOB, move_minutes_stats BLOB, brisk_minutes_stats BLOB, version INTEGER NOT NULL)";
  uint64_t v5 = NSString;
  uint64_t v6 = *MEMORY[0x1E4F65C80];
  id v7 = a2;
  objc_msgSend(v5, "stringWithFormat:", @"INSERT INTO activity_caches_new (data_id, cache_index, sequence, wheelchair_use, energy_burned, energy_burned_goal, energy_burned_goal_date, brisk_minutes, brisk_minutes_goal, active_hours, active_hours_goal, steps, pushes, walk_distance, deep_breathing_duration, flights, energy_burned_stats, brisk_minutes_stats, version) SELECT data_id, cache_index, sequence, wheelchair_use, energy_burned, energy_burned_goal, energy_burned_goal_date, brisk_minutes, brisk_minutes_goal, active_hours, active_hours_goal, steps, pushes, walk_distance, deep_breathing_duration, flights, energy_burned_stats, brisk_minutes_stats, CASE WHEN %@(origin_build, '20A6') > 0 OR %@(origin_build, '20R57') > 0 THEN 2 ELSE 1 END FROM activity_caches INNER JOIN objects USING (data_id) INNER JOIN data_provenances ON (objects.provenance = data_provenances.rowid) WHERE sequence IS NOT NULL;",
    v6,
    v6,
    @"DROP INDEX IF EXISTS activity_caches_cache_index",
    @"DROP TABLE IF EXISTS activity_caches_new",
  char v8 = @"CREATE TABLE activity_caches_new (data_id INTEGER PRIMARY KEY REFERENCES samples (data_id) ON DELETE CASCADE, cache_index INTEGER, sequence INTEGER NOT NULL, activity_mode INTEGER, wheelchair_use INTEGER, energy_burned REAL, energy_burned_goal REAL, energy_burned_goal_date REAL, move_minutes REAL, move_minutes_goal REAL, move_minutes_goal_date REAL, brisk_minutes REAL, brisk_minutes_goal REAL, brisk_minutes_goal_date REAL, active_hours REAL, active_hours_goal REAL, active_hours_goal_date REAL, steps REAL, pushes REAL, walk_distance REAL, deep_breathing_duration REAL, flights INTEGER, energy_burned_stats BLOB, move_minutes_stats BLOB, brisk_minutes_stats BLOB, version INTEGER NOT NULL)");
  v12[3] = v8;
  v12[4] = @"DROP TABLE IF EXISTS activity_caches";
  v12[5] = @"ALTER TABLE activity_caches_new RENAME TO activity_caches";
  v12[6] = @"CREATE INDEX IF NOT EXISTS activity_caches_cache_index ON activity_caches (cache_index)";
  id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v12 count:7];

  id v10 = [v7 protectedDatabase];

  LODWORD(a4) = [v10 executeSQLStatements:v9 error:a4];
  return a4 ^ 1;
}

uint64_t _HDUpdateClinicalRecordEntities(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___HDUpdateClinicalRecordEntities_block_invoke;
  void v9[3] = &unk_1E62F3D38;
  id v10 = v5;
  id v7 = v5;
  LODWORD(a4) = [v6 executeUncachedSQL:@"SELECT clinical_accounts.ROWID, clinical_gateways.external_id         FROM clinical_accounts JOIN clinical_gateways ON clinical_accounts.gateway_id = clinical_gateways.ROWID", a4, 0, v9 error bindingHandler enumerationHandler];

  return a4 ^ 1;
}

uint64_t _HDRecreateSeriesDataTables(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAA10 error:a4] ^ 1;

  return v6;
}

uint64_t _HDUpdateGlassesTypeToGlassesDecription(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAA28 error:a4] ^ 1;

  return v6;
}

uint64_t _HDUpdateMedicalRecordsDiagnosticReportTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  int v7 = [v6 deleteDataEntitySubclassTablesIfExist:&unk_1F17EAA58 intermediateTables:&unk_1F17EAA70 error:a4];

  if (v7)
  {
    char v8 = [v5 protectedDatabase];
    uint64_t v9 = [v8 executeSQLStatements:&unk_1F17EAA88 error:a4] ^ 1;
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

uint64_t _HDUpdateMissingDurationInWorkoutActivitiesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAA40 error:a4] ^ 1;

  return v6;
}

uint64_t _HDUpdateMedicalRecordEntitiesTableWithOrigin(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  int v7 = [v6 executeSQLStatements:&unk_1F17EAAA0 error:a4];

  if (v7)
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v9 = [v5 protectedDatabase];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    v26[2] = ___HDUpdateMedicalRecordEntitiesTableWithOrigin_block_invoke;
    v26[3] = &unk_1E62F3D60;
    id v10 = v5;
    id v27 = v10;
    id v11 = v8;
    id v28 = v11;
    int v12 = [v9 executeUncachedSQL:@"SELECT ROWID, HEX(identifier) FROM clinical_accounts", a4, 0, v26 error bindingHandler enumerationHandler];

    if (v12)
    {
      id v13 = [v10 protectedDatabase];
      uint64_t v20 = MEMORY[0x1E4F143A8];
      uint64_t v21 = 3221225472;
      uint64_t v22 = ___HDUpdateMedicalRecordEntitiesTableWithOrigin_block_invoke_963;
      uint64_t v23 = &unk_1E62F3D60;
      id v24 = v11;
      id v14 = v10;
      id v25 = v14;
      int v15 = [v13 executeSQL:@"SELECT medical_records.ROWID, fhir_identifier, data_provenances.source_id FROM medical_records          JOIN objects USING(data_id)          JOIN data_provenances ON data_provenances.ROWID = objects.provenance          WHERE medical_records.fhir_identifier IS NOT NULL", a4, 0, &v20 error bindingHandler enumerationHandler];

      if (v15)
      {
        int v16 = objc_msgSend(v14, "protectedDatabase", v20, v21, v22, v23, v24);
        int v17 = [v16 executeSQLStatements:&unk_1F17EAAB8 error:a4];

        uint64_t v18 = v17 ^ 1u;
      }
      else
      {
        uint64_t v18 = 1;
      }
    }
    else
    {
      uint64_t v18 = 1;
    }
  }
  else
  {
    uint64_t v18 = 1;
  }

  return v18;
}

uint64_t _HDSanitizeHFDRebuildState(uint64_t a1, void *a2)
{
  id v2 = a2;
  if ([v2 HFDRebuildState] >= 7) {
    [v2 setHFDRebuildState:10];
  }

  return 0;
}

uint64_t _HDMigrateHFDToSQLite(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [[HDSydneyHFDMigrator alloc] initWithMigrationTransaction:v5];

  uint64_t v7 = [(HDSydneyHFDMigrator *)v6 migrateHFD:a4];
  return v7;
}

uint64_t _HDAddSourceURLIndexToOriginalFHIRResourcesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAAD0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDDeleteRunningStrideLengthSamples(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return _HDDeleteQuantitySamplesOfType(a2, 258, a4) ^ 1;
}

uint64_t _HDAddUserDomainConceptNamedQuantityTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAAE8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDDeleteDeprecated261Samples(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return _HDDeleteQuantitySamplesOfType(a2, 261, a4) ^ 1;
}

uint64_t _HDDeleteDeprecated261WorkoutStatistics(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EA9C8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDDeleteArchivalHFD(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return [a2 accessHistoricHFDWithError:a4 block:&__block_literal_global_901];
}

uint64_t _HDMoveAdHocConceptIntoCorrectIDNamespace(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAB00 error:a4] ^ 1;

  return v6;
}

uint64_t _HDForceMedicalRecordReextractionToRelinkUDCs(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  int v7 = [v6 executeUncachedSQL:@"UPDATE clinical_accounts SET last_extracted_rowid = NULL" error:a4];

  if (v7)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v8 = [&unk_1F17EAB30 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (!v8)
    {
      uint64_t v14 = 0;
      goto LABEL_12;
    }
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
LABEL_4:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v17 != v10) {
        objc_enumerationMutation(&unk_1F17EAB30);
      }
      uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * v11);
      id v13 = [v5 protectedDatabase];
      LODWORD(v12) = [v13 deleteRowsFromDataEntitySubclassTable:v12 intermediateTables:&unk_1F17EAB18 error:a4];

      if (!v12) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t v9 = [&unk_1F17EAB30 countByEnumeratingWithState:&v16 objects:v20 count:16];
        uint64_t v14 = 0;
        if (v9) {
          goto LABEL_4;
        }
        goto LABEL_12;
      }
    }
  }
  uint64_t v14 = 1;
LABEL_12:

  return v14;
}

uint64_t _HDFixStatisticsAndRemoveUnusedColumnsFromWorkoutsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = ___HDFixStatisticsAndRemoveUnusedColumnsFromWorkoutsTable_block_invoke;
  void v11[3] = &unk_1E62F3D38;
  id v7 = v6;
  id v12 = v7;
  if ([v7 executeUncachedSQL:@"SELECT a.ROWID, a.activity_type, total_energy_burned, total_basal_energy_burned, total_distance, total_w_steps, total_flights_climbed FROM workouts LEFT JOIN workout_activities a ON (data_id = owner_id AND a.is_primary_activity)", a4, 0, v11 error bindingHandler enumerationHandler])
  {
    uint64_t v8 = [v5 protectedDatabase];
    uint64_t v9 = [v8 executeSQLStatements:&unk_1F17EAB48 error:a4] ^ 1;
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

uint64_t _HDMoveGlassesDescriptionToMetadata(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = a2;
  uint64_t v6 = [v5 protectedDatabase];
  int v7 = [v6 executeUncachedSQL:@"INSERT INTO metadata_keys (key) VALUES ('HKMetadataKeyGlassesPrescriptionDescription')" error:a4 bindingHandler:0 enumerationHandler:0];

  if (v7)
  {
    uint64_t v8 = NSString;
    uint64_t v9 = [v5 protectedDatabase];
    uint64_t v10 = [v9 lastInsertRowID];
    uint64_t v11 = [v8 stringWithFormat:@"INSERT INTO metadata_values (key_id, object_id, value_type, string_value)SELECT %@, data_id, 0, glasses_description FROM vision_prescription WHERE prescription_type=1", v10];

    id v12 = [v5 protectedDatabase];
    int v13 = [v12 executeUncachedSQL:v11 error:a4 bindingHandler:0 enumerationHandler:0];

    uint64_t v14 = v13 ^ 1u;
  }
  else
  {
    uint64_t v14 = 1;
  }

  return v14;
}

uint64_t _HDDropDeprecatedUDCPropertyTypesFromPropertyTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAB60 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddSchemaVersionToAttachmentReferences(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAB78 error:a4] ^ 1;

  return v6;
}

uint64_t _HDMigrateUDCPreferredNameProperties(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void v10[2] = *MEMORY[0x1E4F143B8];
  v10[0] = @"INSERT OR REPLACE INTO user_domain_concept_localized_strings (udc_id, property_type, string_value, locale, version, timestamp, deleted) SELECT udc_id, 160012, IFNULL(string_value,''), CASE property_type WHEN 150000 THEN '(null)' WHEN 150001 THEN 'en_US' WHEN 150002 THEN 'en_GB' WHEN 150003 THEN 'en_CA' END, version, timestamp, (string_value IS NULL) FROM user_domain_concept_properties WHERE property_type IN (150000, 150001, 150002, 150003)";
  v10[1] = @"DELETE FROM user_domain_concept_properties WHERE property_type IN (150000, 150001, 150002, 150003)";
  id v5 = (void *)MEMORY[0x1E4F1C978];
  id v6 = a2;
  int v7 = [v5 arrayWithObjects:v10 count:2];
  uint64_t v8 = [v6 protectedDatabase];

  LODWORD(a4) = [v8 executeSQLStatements:v7 error:a4];
  return a4 ^ 1;
}

uint64_t _HDAddCHRAccountsDeletionReason(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EAB90 error:a4] ^ 1;

  return v6;
}

uint64_t _HDSyncIdentityUpdateForSignedClinicalDataIssuersEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE signed_clinical_data_issuer_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, identifier TEXT NOT NULL UNIQUE, sync_provenance INTEGER NOT NULL, title TEXT NOT NULL, subtitle TEXT, well_known_url TEXT, sync_identity INTEGER NOT NULL);",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForSignedClinicalDataIssuersEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO signed_clinical_data_issuer_new (ROWID, identifier, sync_provenance, title, subtitle, well_known_url, sync_identity) SELECT ROWID, identifier, sync_provenance, title, subtitle, well_known_url, ? FROM signed_clinical_data_issuer;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE signed_clinical_data_issuer;";
    v14[1] = @"ALTER TABLE signed_clinical_data_issuer_new RENAME TO signed_clinical_data_issuer;";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForOriginalSignedClinicalDataRecordEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE original_signed_clinical_data_records_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, sync_identifier BLOB NOT NULL UNIQUE, issuer_identifier TEXT NOT NULL, source_url TEXT NOT NULL, source_type INTEGER NOT NULL, raw_content BLOB, uniqueness_checksum BLOB NOT NULL, type TEXT NOT NULL, metadata BLOB, received_date REAL NOT NULL, received_date_timezone TEXT NOT NULL, first_seen_date REAL NOT NULL, first_seen_date_timezone TEXT NOT NULL, signature_status INTEGER NOT NULL, sync_provenance INTEGER NOT NULL, account_id INTEGER NOT NULL REFERENCES clinical_accounts (ROWID) ON DELETE CASCADE, last_modified_date REAL NOT NULL, deleted INTEGER NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(account_id, uniqueness_checksum), CHECK((raw_content IS NULL AND deleted == 1) OR (raw_content IS NOT NULL AND deleted == 0)));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForOriginalSignedClinicalDataRecordEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO original_signed_clinical_data_records_new (ROWID, sync_identifier, issuer_identifier, source_url, source_type, raw_content, uniqueness_checksum, type, metadata, received_date, received_date_timezone, first_seen_date, first_seen_date_timezone, signature_status, sync_provenance, account_id, last_modified_date, deleted, sync_identity) SELECT ROWID, sync_identifier, issuer_identifier, source_url, source_type, raw_content, uniqueness_checksum, type, metadata, received_date, received_date_timezone, first_seen_date, first_seen_date_timezone, signature_status, sync_provenance, account_id, last_modified_date, deleted, ? FROM original_signed_clinical_data_records;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE original_signed_clinical_data_records;";
    v14[1] = @"ALTER TABLE original_signed_clinical_data_records_new RENAME TO original_signed_clinical_data_records;";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForUserDomainConceptEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (![v8 executeUncachedSQL:@"CREATE TABLE user_domain_concepts_new (udc_id INTEGER PRIMARY KEY AUTOINCREMENT, uuid BLOB UNIQUE NOT NULL, schema TEXT, type INTEGER NOT NULL, deleted INTEGER NOT NULL, creation_date REAL NOT NULL, modification_date REAL NOT NULL, major_version INTEGER NOT NULL, minor_version INTEGER NOT NULL, patch_version INTEGER NOT NULL, build TEXT NOT NULL, sync_provenance INTEGER NOT NULL, sync_anchor INTEGER UNIQUE NOT NULL, sync_identity INTEGER NOT NULL)", a4 error]|| (uint64_t v9 = objc_msgSend(v6, "fetchLegacySyncIdentity:error:", v7, a4), v9 == -1))
  {
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v10 = v9;
    uint64_t v11 = [NSString stringWithFormat:@"INSERT INTO user_domain_concepts_new (udc_id, uuid, schema, type, deleted, creation_date, modification_date, major_version, minor_version, patch_version, build, sync_provenance, sync_anchor, sync_identity) SELECT udc_id, uuid, schema, type, deleted, creation_date, modification_date, major_version, minor_version, patch_version, build, sync_provenance, sync_anchor, ? FROM user_domain_concepts"];
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    v15[2] = ___HDSyncIdentityUpdateForUserDomainConceptEntity_block_invoke;
    void v15[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    void v15[4] = v10;
    if ([v8 executeSQL:v11 error:a4 bindingHandler:v15 enumerationHandler:0])
    {
      v16[0] = @"DROP TABLE user_domain_concepts";
      v16[1] = @"ALTER TABLE user_domain_concepts_new RENAME TO user_domain_concepts";
      id v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:v16 count:2];
      uint64_t v13 = [v8 executeSQLStatements:v12 error:a4] ^ 1;
    }
    else
    {
      uint64_t v13 = 1;
    }
  }
  return v13;
}

uint64_t _HDSyncIdentityUpdateForOriginalFHIRResourceEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void v14[3] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE original_fhir_resources_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, type TEXT NOT NULL, account_id INTEGER NOT NULL REFERENCES clinical_accounts (ROWID) ON DELETE CASCADE, id TEXT NOT NULL, sync_provenance INTEGER NOT NULL, raw_content BLOB NOT NULL, received_date REAL NOT NULL, received_date_timezone TEXT NOT NULL, fhir_version TEXT NOT NULL, source_url TEXT, extraction_hints INTEGER, origin_major_version INTEGER NOT NULL, origin_minor_version INTEGER NOT NULL, origin_patch_version INTEGER NOT NULL, origin_build TEXT NOT NULL, first_seen_date REAL NOT NULL, first_seen_date_timezone TEXT NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(type, account_id, id));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForOriginalFHIRResourceEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO original_fhir_resources_new (ROWID, type, account_id, id, sync_provenance, raw_content, received_date, received_date_timezone, fhir_version, source_url, extraction_hints, origin_major_version, origin_minor_version, origin_patch_version, origin_build, first_seen_date, first_seen_date_timezone, sync_identity) SELECT ROWID, type, account_id, id, sync_provenance, raw_content, received_date, received_date_timezone, fhir_version, source_url, extraction_hints, origin_major_version, origin_minor_version, origin_patch_version, origin_build, first_seen_date, first_seen_date_timezone, ? FROM original_fhir_resources;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE original_fhir_resources;";
    v14[1] = @"ALTER TABLE original_fhir_resources_new RENAME TO original_fhir_resources;";
    v14[2] = @"CREATE INDEX original_fhir_resources_source_url ON original_fhir_resources (source_url);";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:3];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForFHIRCredentialEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE clinical_credentials_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, identifier BLOB NOT NULL, sync_provenance INTEGER NOT NULL, expiration_date REAL, scope TEXT, patient_id TEXT, creation_date REAL NOT NULL, requested_scope TEXT NOT NULL, deleted INTEGER NOT NULL DEFAULT 0, sync_identity INTEGER NOT NULL);",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForFHIRCredentialEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO clinical_credentials_new (ROWID, identifier, sync_provenance, expiration_date, scope, patient_id, creation_date, requested_scope, deleted, sync_identity) SELECT ROWID, identifier, sync_provenance, expiration_date, scope, patient_id, creation_date, requested_scope, deleted, ? FROM clinical_credentials;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE clinical_credentials;";
    v14[1] = @"ALTER TABLE clinical_credentials_new RENAME TO clinical_credentials;";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForClinicalGatewayEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE clinical_gateways_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, external_id TEXT NOT NULL, last_reported_status INTEGER NOT NULL, revision INTEGER NOT NULL, raw_content BLOB NOT NULL, sync_anchor INTEGER NOT NULL UNIQUE, sync_provenance INTEGER NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(external_id));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForClinicalGatewayEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO clinical_gateways_new (ROWID, external_id, last_reported_status, revision, raw_content, sync_anchor, sync_provenance, sync_identity) SELECT ROWID, external_id, last_reported_status, revision, raw_content, sync_anchor, sync_provenance, ? FROM clinical_gateways;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE clinical_gateways;";
    v14[1] = @"ALTER TABLE clinical_gateways_new RENAME TO clinical_gateways;";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForClinicalDeletedAccountEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE clinical_deleted_accounts_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, sync_identifier BLOB NOT NULL, deletion_date REAL NOT NULL, deletion_reason INTEGER NOT NULL, sync_provenance INTEGER NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(sync_identifier));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForClinicalDeletedAccountEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO clinical_deleted_accounts_new (ROWID, sync_identifier, deletion_date, deletion_reason, sync_provenance, sync_identity) SELECT ROWID, sync_identifier, deletion_date, deletion_reason, sync_provenance, ? FROM clinical_deleted_accounts;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE clinical_deleted_accounts;";
    v14[1] = @"ALTER TABLE clinical_deleted_accounts_new RENAME TO clinical_deleted_accounts;";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForClinicalAccountEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE clinical_accounts_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, identifier BLOB NOT NULL UNIQUE, user_enabled_flag INTEGER NOT NULL, credential_state INTEGER NOT NULL, creation_date REAL NOT NULL, last_fetch_date REAL, last_full_fetch_date REAL, last_extracted_rowid INTEGER, last_submitted_rowid INTEGER, last_extracted_rules_version INTEGER, patient_hash TEXT, credential_id INTEGER REFERENCES clinical_credentials (ROWID) ON DELETE SET NULL, gateway_id INTEGER UNIQUE REFERENCES clinical_gateways (ROWID) ON DELETE SET NULL, signed_clinical_data_issuer_rowid INTEGER UNIQUE REFERENCES signed_clinical_data_issuer (ROWID) ON DELETE CASCADE, clinical_sharing_last_shared_date REAL, clinical_sharing_first_shared_date REAL, clinical_sharing_user_status INTEGER NOT NULL DEFAULT 0, clinical_sharing_multi_device_status INTEGER NOT NULL DEFAULT 0, clinical_sharing_primary_device_name TEXT, sync_identifier BLOB NOT NULL UNIQUE, modification_date REAL NOT NULL, last_failed_fetch_date REAL, failed_fetch_attempts_count INTEGER, sync_anchor INTEGER NOT NULL UNIQUE, sync_provenance INTEGER NOT NULL, sync_identity INTEGER NOT NULL, CHECK ((gateway_id IS NOT NULL AND signed_clinical_data_issuer_rowid IS NULL) OR (gateway_id IS NULL AND signed_clinical_data_issuer_rowid IS NOT NULL)));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForClinicalAccountEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO clinical_accounts_new (ROWID, identifier, user_enabled_flag, credential_state, creation_date, last_fetch_date, last_full_fetch_date, last_extracted_rowid, last_submitted_rowid, last_extracted_rules_version, patient_hash, credential_id, gateway_id, signed_clinical_data_issuer_rowid, clinical_sharing_last_shared_date, clinical_sharing_first_shared_date, clinical_sharing_user_status, clinical_sharing_multi_device_status, clinical_sharing_primary_device_name, sync_identifier, modification_date, last_failed_fetch_date, failed_fetch_attempts_count, sync_anchor, sync_provenance, sync_identity) SELECT ROWID, identifier, user_enabled_flag, credential_state, creation_date, last_fetch_date, last_full_fetch_date, last_extracted_rowid, last_submitted_rowid, last_extracted_rules_version, patient_hash, credential_id, gateway_id, signed_clinical_data_issuer_rowid, clinical_sharing_last_shared_date, clinical_sharing_first_shared_date, clinical_sharing_user_status, clinical_sharing_multi_device_status, clinical_sharing_primary_device_name, sync_identifier, modification_date, last_failed_fetch_date, failed_fetch_attempts_count, sync_anchor, sync_provenance, ? FROM clinical_accounts;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE clinical_accounts;";
    v14[1] = @"ALTER TABLE clinical_accounts_new RENAME TO clinical_accounts;";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForSharingRelationshipEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE sharing_relationship_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, recipient TEXT UNIQUE NOT NULL, date_modified REAL NOT NULL, sync_provenance INTEGER NOT NULL, sync_identity INTEGER NOT NULL);",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForSharingRelationshipEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO sharing_relationship_new (ROWID, recipient, date_modified, sync_provenance, sync_identity) SELECT ROWID, recipient, date_modified, sync_provenance, ? FROM sharing_relationship;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE sharing_relationship;";
    v14[1] = @"ALTER TABLE sharing_relationship_new RENAME TO sharing_relationship;";
    uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForAssociationsAndPendingAssociationsEntities(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  v19[0] = @"CREATE TABLE associations (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, parent_id INTEGER REFERENCES objects (data_id) ON DELETE CASCADE, child_id INTEGER REFERENCES objects (data_id) ON DELETE CASCADE, sync_provenance INTEGER, sync_identity INTEGER NOT NULL, UNIQUE(parent_id, child_id))";
  v19[1] = @"CREATE TABLE pending_associations_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, parent_uuid BLOB NOT NULL, child_uuid BLOB NOT NULL, sync_provenance INTEGER NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(parent_uuid, child_uuid))";
  uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:2];
  int v10 = [v8 executeSQLStatements:v9 error:a4];

  if (!v10 || (uint64_t v11 = [v6 fetchLegacySyncIdentity:v7 error:a4], v11 == -1))
  {
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v12 = v11;
    uint64_t v13 = [NSString stringWithFormat:@"INSERT INTO associations (ROWID, parent_id, child_id, sync_provenance, sync_identity) SELECT ROWID, correlation, object, provenance, ? FROM correlations;"];
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = ___HDSyncIdentityUpdateForAssociationsAndPendingAssociationsEntities_block_invoke;
    void v18[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
    void v18[4] = v12;
    if ([v8 executeSQL:v13 error:a4 bindingHandler:v18 enumerationHandler:0])
    {
      uint64_t v14 = [NSString stringWithFormat:@"INSERT INTO pending_associations_new (ROWID, parent_uuid, child_uuid, sync_provenance, sync_identity) SELECT ROWID, parent_uuid, child_uuid, provenance, ? FROM pending_associations;"];
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      void v17[2] = ___HDSyncIdentityUpdateForAssociationsAndPendingAssociationsEntities_block_invoke_2;
      void v17[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
      void v17[4] = v12;
      if ([v8 executeSQL:v14 error:a4 bindingHandler:v17 enumerationHandler:0]) {
        uint64_t v15 = [v8 executeSQLStatements:&unk_1F17EABA8 error:a4] ^ 1;
      }
      else {
        uint64_t v15 = 1;
      }
    }
    else
    {
      uint64_t v15 = 1;
    }
  }
  return v15;
}

uint64_t _HDSyncIdentityUpdateForDataProvenanceEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE data_provenances_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, sync_provenance INTEGER NOT NULL, origin_product_type TEXT NOT NULL, origin_build TEXT NOT NULL, local_product_type TEXT NOT NULL, local_build TEXT NOT NULL, source_id INTEGER NOT NULL, device_id INTEGER NOT NULL, contributor_id INTEGER NOT NULL, source_version TEXT NOT NULL, tz_name TEXT NOT NULL, origin_major_version INTEGER NOT NULL, origin_minor_version INTEGER NOT NULL, origin_patch_version INTEGER NOT NULL, sync_identity INTEGER NOT NULL, derived_flags INTEGER NOT NULL, UNIQUE(sync_provenance, origin_product_type, origin_build, local_product_type, local_build, source_id, device_id, contributor_id, source_version, tz_name, origin_major_version, origin_minor_version, origin_patch_version, sync_identity));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForDataProvenanceEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO data_provenances_new (ROWID, sync_provenance, origin_product_type, origin_build, local_product_type, local_build, source_id, device_id, contributor_id, source_version, tz_name, origin_major_version, origin_minor_version, origin_patch_version, sync_identity, derived_flags) SELECT ROWID, sync_provenance, origin_product_type, origin_build, local_product_type, local_build, source_id, device_id, contributor_id, source_version, tz_name, origin_major_version, origin_minor_version, origin_patch_version, ?, derived_flags FROM data_provenances;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE data_provenances;";
    v14[1] = @"ALTER TABLE data_provenances_new RENAME TO data_provenances;";
    int v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForContributorEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE contributors_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, uuid BLOB UNIQUE NOT NULL, apple_id TEXT, caller_id TEXT, deleted INTEGER NOT NULL, mod_date REAL NOT NULL, sync_anchor INTEGER UNIQUE NOT NULL, sync_provenance INTEGER NOT NULL, primary_user INTEGER NOT NULL, sync_identity INTEGER NOT NULL);",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForContributorEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO contributors_new (ROWID, uuid, apple_id, caller_id, deleted, mod_date, sync_anchor, sync_provenance, primary_user, sync_identity) SELECT ROWID, uuid, apple_id, caller_id, deleted, mod_date, sync_anchor, sync_provenance, primary_user, ? FROM contributors;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE contributors;";
    v14[1] = @"ALTER TABLE contributors_new RENAME TO contributors;";
    int v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForProtectedKeyValueEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE key_value_secure_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, category INTEGER NOT NULL, domain TEXT NOT NULL, key TEXT NOT NULL, value, provenance INTEGER NOT NULL, mod_date REAL NOT NULL, sync_identity INTEGER NOT NULL, UNIQUE(category, domain, key));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForProtectedKeyValueEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO key_value_secure_new (ROWID, category, domain, key, value, provenance, mod_date, sync_identity) SELECT ROWID, category, domain, key, value, provenance, mod_date, ? FROM key_value_secure;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE key_value_secure;";
    v14[1] = @"ALTER TABLE key_value_secure_new RENAME TO key_value_secure;";
    int v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDSyncIdentityUpdateForObjectAuthorizationEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v14[2] = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = [v7 protectedDatabase];
  if (objc_msgSend(v8, "executeUncachedSQL:error:", @"CREATE TABLE object_authorizations_new (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, object BLOB NOT NULL REFERENCES objects (uuid) ON DELETE CASCADE, source BLOB NOT NULL, status INTEGER NOT NULL, sync_provenance INTEGER NOT NULL, modification_date REAL NOT NULL, session BLOB, sync_identity INTEGER NOT NULL, UNIQUE(object, source, sync_provenance, sync_identity));",
                       a4)
    && (uint64_t v9 = [v6 fetchLegacySyncIdentity:v7 error:a4], v9 != -1)
    && (v13[0] = MEMORY[0x1E4F143A8],
        v13[1] = 3221225472,
        void v13[2] = ___HDSyncIdentityUpdateForObjectAuthorizationEntity_block_invoke,
        void v13[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l,
        v13[4] = v9,
        objc_msgSend(v8, "executeSQL:error:bindingHandler:enumerationHandler:", @"INSERT INTO object_authorizations_new (ROWID, object, source, status, sync_provenance, modification_date, session, sync_identity) SELECT ROWID, object, source, status, sync_provenance, modification_date, session, ? FROM object_authorizations;",
                        a4,
                        v13,
                        0)))
  {
    v14[0] = @"DROP TABLE object_authorizations;";
    v14[1] = @"ALTER TABLE object_authorizations_new RENAME TO object_authorizations;";
    int v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:v14 count:2];
    uint64_t v11 = [v8 executeSQLStatements:v10 error:a4] ^ 1;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

uint64_t _HDAddVerifiableDataToVisionPrescriptionEntity(void *a1)
{
  return objc_msgSend(a1, "executeSQL:error:", @"ALTER TABLE vision_prescription ADD COLUMN verifiable_data BLOB") ^ 1;
}

uint64_t _HDAddMedicalDownloadableAttachmentsTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EABC0 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddClinicalNoteRecordSamplesTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v5 = [a2 protectedDatabase];
  uint64_t v6 = [v5 executeSQLStatements:&unk_1F17EABD8 error:a4] ^ 1;

  return v6;
}

uint64_t _HDAddUniquenessChecksumToOriginalFHIRResourceEntity(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  if ([v6 executeSQLStatements:&unk_1F17EABF0 error:a4])
  {
    uint64_t v8 = [v7 protectedDatabase];
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 3221225472;
    uint64_t v14 = ___HDAddUniquenessChecksumToOriginalFHIRResourceEntity_block_invoke;
    uint64_t v15 = &unk_1E62F3D60;
    id v16 = v8;
    long long v17 = @"UPDATE original_fhir_resources_new SET uniqueness_checksum = ? WHERE ROWID = ?";
    id v9 = v8;
    if ([v9 executeUncachedSQL:@"SELECT ROWID, raw_content FROM original_fhir_resources_new", a4, 0, &v12 error bindingHandler enumerationHandler])uint64_t v10 = objc_msgSend(v6, "executeSQLStatements:error:", &unk_1F17EAC08, a4, v12, v13, v14, v15, v16, v17) ^ 1; {
    else
    }
      uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

uint64_t _HDAdvanceUDCSyncAnchors(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a1;
  id v7 = a2;
  uint64_t v29 = 0;
  id v30 = &v29;
  uint64_t v31 = 0x2020000000;
  uint64_t v32 = 0;
  uint64_t v8 = [v7 unprotectedDatabase];
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  v28[2] = ___HDAdvanceUDCSyncAnchors_block_invoke;
  v28[3] = &unk_1E62F3640;
  void v28[4] = &v29;
  char v9 = [v8 executeUncachedSQL:@"SELECT MAX(next) from sync_anchors WHERE schema=\"main\" AND type=59" error:a4 bindingHandler:0 enumerationHandler:v28];

  if (v9)
  {
    uint64_t v24 = 0;
    id v25 = &v24;
    uint64_t v26 = 0x2020000000;
    uint64_t v27 = 0;
    uint64_t v10 = [v7 protectedDatabase];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = ___HDAdvanceUDCSyncAnchors_block_invoke_2;
    v23[3] = &unk_1E62F3640;
    v23[4] = &v24;
    char v11 = [v10 executeUncachedSQL:@"SELECT MIN(sync_anchor) from user_domain_concepts" error:a4 bindingHandler:0 enumerationHandler:v23];

    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v25[3];
      if (v13)
      {
        uint64_t v14 = v30[3];
        uint64_t v15 = v14 - v13;
        if (v14 >= v13)
        {
          id v16 = [v7 protectedDatabase];
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 3221225472;
          v19[2] = ___HDAdvanceUDCSyncAnchors_block_invoke_3;
          void v19[3] = &unk_1E62F9D90;
          id v20 = v7;
          uint64_t v21 = @"UPDATE user_domain_concepts SET sync_anchor = (sync_anchor + ?) WHERE udc_id = ?";
          uint64_t v22 = v15 + 1;
          int v17 = [v16 executeUncachedSQL:@"SELECT udc_id FROM user_domain_concepts ORDER BY sync_anchor DESC" error:a4 bindingHandler:0 enumerationHandler:v19];

          uint64_t v12 = v17 ^ 1u;
        }
      }
    }
    else
    {
      uint64_t v12 = 1;
    }
    _Block_object_dispose(&v24, 8);
  }
  else
  {
    uint64_t v12 = 1;
  }
  _Block_object_dispose(&v29, 8);

  return v12;
}

void sub_1BCFE822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDAddPKCEVerifierToAuthSession(void *a1)
{
  return objc_msgSend(a1, "executeSQL:error:", @"ALTER TABLE clinical_authorization_sessions ADD COLUMN pkce_verifier TEXT") ^ 1;
}

BOOL _HDAssignWorkoutDatabaseMigrationError(void *a1, void *a2, void *a3, void *a4)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (v9)
  {
    char v11 = NSString;
    uint64_t v12 = [v9 UUIDString];
    id v13 = [v11 stringWithFormat:@"%@ for workout %@", v7, v12];
  }
  else
  {
    id v13 = v7;
  }
  uint64_t v18 = *MEMORY[0x1E4F29B68];
  v19[0] = v13;
  uint64_t v14 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  uint64_t v15 = objc_msgSend(v8, "hk_errorByAddingEntriesToUserInfo:", v14);

  id v16 = v15;
  if (v16)
  {
    if (a1) {
      *a1 = v16;
    }
    else {
      _HKLogDroppedError();
    }
  }

  return v16 == 0;
}

void sub_1BCFE8C40(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t _HDInsertStatisticsForColumnAndDataType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  id v13 = a5;
  if (MEMORY[0x1C1879FC0](a1, a2))
  {
    uint64_t v14 = 1;
  }
  else
  {
    double v15 = MEMORY[0x1C1879F40](a1, a2);
    v17[1] = 3221225472;
    v17[0] = MEMORY[0x1E4F143A8];
    void v17[2] = ___HDInsertStatisticsForColumnAndDataType_block_invoke_2;
    void v17[3] = &__block_descriptor_56_e23_v16__0__sqlite3_stmt__8l;
    void v17[4] = a4;
    void v17[5] = a3;
    *(double *)&v17[6] = v15 * a7;
    uint64_t v14 = [v13 executeCachedStatementForKey:&_HDInsertStatisticsForColumnAndDataType_insertionKey error:a6 SQLGenerator:&__block_literal_global_627 bindingHandler:v17 enumerationHandler:0];
  }

  return v14;
}

uint64_t _HDDistanceTypeCodeForActivityType(uint64_t a1)
{
  if (a1 > 66)
  {
    if ((unint64_t)(a1 - 70) < 2) {
      return 113;
    }
    if (a1 != 67) {
      return 8;
    }
    return 138;
  }
  if (a1 == 13) {
    return 83;
  }
  if (a1 != 46)
  {
    if (a1 != 61) {
      return 8;
    }
    return 138;
  }
  return 110;
}

uint64_t __Block_byref_object_copy__157(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__157(uint64_t a1)
{
}

uint64_t _HDDeleteQuantitySamplesOfType(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = [v5 protectedDatabase];
  id v11 = v5;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  void v12[2] = ___HDDeleteQuantitySamplesOfType_block_invoke;
  v12[3] = &__block_descriptor_40_e23_v16__0__sqlite3_stmt__8l;
  v12[4] = a2;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___HDDeleteQuantitySamplesOfType_block_invoke_2;
  void v10[3] = &unk_1E62F3D38;
  id v7 = v5;
  uint64_t v8 = [v6 executeUncachedSQL:@"SELECT data_id, hfd_key FROM objects INNER JOIN samples USING (data_id) INNER JOIN quantity_samples USING (data_id) LEFT JOIN quantity_sample_series USING(data_id) WHERE type=1 AND data_type=?", a3, v12, v10 error bindingHandler enumerationHandler];

  return v8;
}

uint64_t _HDReplaceStatisticsForColumnAndDataType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, double a7)
{
  id v13 = a5;
  if (MEMORY[0x1C1879FC0](a1, a2))
  {
    uint64_t v14 = 1;
  }
  else
  {
    double v15 = MEMORY[0x1C1879F40](a1, a2);
    v17[1] = 3221225472;
    v17[0] = MEMORY[0x1E4F143A8];
    void v17[2] = ___HDReplaceStatisticsForColumnAndDataType_block_invoke_2;
    void v17[3] = &__block_descriptor_56_e23_v16__0__sqlite3_stmt__8l;
    void v17[4] = a4;
    void v17[5] = a3;
    *(double *)&v17[6] = v15 * a7;
    uint64_t v14 = [v13 executeCachedStatementForKey:&_HDReplaceStatisticsForColumnAndDataType_insertionKey error:a6 SQLGenerator:&__block_literal_global_1043 bindingHandler:v17 enumerationHandler:0];
  }

  return v14;
}

void sub_1BCFEB060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEB1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEB2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEB3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEB544(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEB6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__158(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__158(uint64_t a1)
{
}

void sub_1BCFEB8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEBAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEBB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEBD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFEC300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEC544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEC78C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1BCFECA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFECC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFECDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFED080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFED280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFED470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFED5B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFED730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFED92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEDA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEDC14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BCFEDD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEDE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEE02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEE1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEE2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEE434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEE584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEE738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEE848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEEFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEF888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p)
  {
    v63[15] = __p;
    operator delete(__p);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v67);

  if (a42) {
    operator delete(a42);
  }

  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_1BCFEFB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_72c97_ZTSNSt3__113unordered_setI15_HKDataTypeCodeNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEEE112c23_ZTS14HKIntervalMaskIdE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  std::unordered_set<_HKDataTypeCode>::unordered_set((uint64_t)(a1 + 9), a2 + 72);
  v3[14] = 0;
  v3[15] = 0;
  v3 += 14;
  void v3[2] = 0;
  return std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v3, *(const void **)(a2 + 112), *(void *)(a2 + 120), (uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 4);
}

void sub_1BCFEFBEC(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_72c97_ZTSNSt3__113unordered_setI15_HKDataTypeCodeNS_4hashIS1_EENS_8equal_toIS1_EENS_9allocatorIS1_EEEE112c23_ZTS14HKIntervalMaskIdE(uint64_t a1)
{
  id v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }

  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 72);
}

void sub_1BCFEFE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEFEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1BCFEFFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF00D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF01DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF02FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF04D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF06B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF07B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF0928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF0A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF0B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF0C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF0DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF0EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF11B8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

id HDPredicateForWorkoutBuilderWithIdentifier(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F65D00] predicateWithProperty:@"uuid" equalToValue:a1];

  return v1;
}

void sub_1BCFF13C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF1554(_Unwind_Exception *a1)
{
  if (v6) {
    objc_end_catch();
  }

  _Unwind_Resume(a1);
}

void sub_1BCFF16B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<std::tuple<long long,HKSample * {__strong}>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BCFF1740(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x230], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      id v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  id v5 = operator new(8 * prime);
  int v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  size_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        size_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::unordered_set<_HKDataTypeCode>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(void *)(a2 + 8));
  id v5 = *(void **)(a2 + 16);
  if (v5)
  {
    int v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = v5[2];
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        uint8x8_t v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v13 = operator new(0x18uLL);
      void *v13 = 0;
      v13[1] = v8;
      void v13[2] = v8;
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        BOOL v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v7);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v19);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v20 = *(void *)a1;
      uint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        void *v13 = *v21;
      }
      else
      {
        void *v13 = *v6;
        *int v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7) {
            v22 %= v7;
          }
        }
        else
        {
          v22 &= v7 - 1;
        }
        uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      void *v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      id v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BCFF1B7C(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_2()
{
  uint64_t v0 = 0x2Du;
  do
  {

    v0 -= 3;
  }
  while (v0 * 8);
}

void sub_1BCFF229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF25AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF2718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(health::DataStore::ReadTransaction const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c112_ZTSKZ99__HDLocationSeriesHFDMigrationEntity_migrateDataFromDataStore_to_database_recoveryAnalytics_error__E3__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v3;
  return result;
}

void sub_1BCFF2900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  unint64_t v17 = v16;

  _Unwind_Resume(a1);
}

void sub_1BCFF2CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF2DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF3148()
{
}

void sub_1BCFF3160()
{
}

void sub_1BCFF316C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BCFF35F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, long long buf, char a20)
{
  if (a2)
  {

    uint64_t v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      id v25 = v24;
      _HKInitializeLogging();
      os_log_t v26 = *v21;
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = *(uint64_t (**)(void *))(*(void *)v25 + 16);
        id v28 = v26;
        uint64_t v29 = v27(v25);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v29;
        _os_log_impl(&dword_1BCB7D000, v28, OS_LOG_TYPE_DEFAULT, "Caught std::exception during ignore block; ignoring: %s",
          (uint8_t *)&buf,
          0xCu);
      }
    }
    else
    {
      _HKInitializeLogging();
      id v30 = *v21;
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1BCB7D000, v30, OS_LOG_TYPE_DEFAULT, "Caught unknown during ignore block; ignoring.",
          (uint8_t *)&buf,
          2u);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BCFF3518);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE7__cloneEv(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)unint64_t v2 = &unk_1F1721148;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1721148;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEEclESX_(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  uint64_t v5[2] = ___ZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO__block_invoke;
  v5[3] = &__block_descriptor_72_ea8_32c276_ZTSKZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_EUlSL_E__e9_B16__0__8l;
  uint64_t v2 = *(void *)(a1 + 8);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v7 = v2;
  uint64_t v8 = a2;
  long long v3 = *(id **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v3)
  {
    obBOOL j = *v3;
    hfd_catchExceptionsAsErrors(v5, (uint64_t)&obj, 0);
    objc_storeStrong(v3, obj);
  }
  else
  {
    hfd_catchExceptionsAsErrors(v5, 0, 0);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSB_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE11target_typeEv()
{
  return &_ZTIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSB_E_;
}

BOOL ___ZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO__block_invoke(void *a1, void *a2)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  char v17 = 0;
  id v16 = 0;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = &unk_1F17211E8;
  v8[1] = v7;
  void v8[2] = &v16;
  v8[3] = &v17;
  void v8[4] = v6;
  void v18[3] = v8;
  health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV1>(v4, v5, 1, (uint64_t)v18);
  std::__function::__value_func<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1> &)>::~__value_func[abi:ne180100](v18);
  id v9 = v16;
  if (v16)
  {
    id v10 = v16;
    unint64_t v11 = v10;
    if (a2) {
      *a2 = v10;
    }
    else {
      _HKLogDroppedError();
    }
  }
  else
  {
    if (v17) {
      goto LABEL_7;
    }
    uint64_t v12 = *(void *)(a1[8] + 24);
    if (!v12) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) & 1) == 0)
    {
LABEL_7:
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[5];
      v19[0] = &unk_1F17212E8;
      v19[1] = v14;
      void v19[3] = v19;
      health::DataStore::performWriteTransactionWithLambda(v13, (uint64_t)v19);
      std::__function::__value_func<BOOL ()(health::DataStore::WriteTransaction &)>::~__value_func[abi:ne180100](v19);
    }
  }

  return v9 == 0;
}

void sub_1BCFF3C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c276_ZTSKZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_EUlSL_E_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F17211E8;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE7__cloneEPNS0_6__baseIS14_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F17211E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEEclES13_(uint64_t a1, uint64_t a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  long long v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v5 = &unk_1F1721258;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 2) = a2;
  *(_OWORD *)(v5 + 24) = v7;
  v8[3] = v5;
  health::DataStore::SampleHistory<LocationHistoryBehaviorV1>::enumerateSamples(v3, (uint64_t)v8);
  std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV1 const&)>::~__value_func[abi:ne180100](v8);
  return 1;
}

void sub_1BCFF3E10(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(bufa, a4);
  long long buf = va_arg(va1, _OWORD);
  uint64_t v15 = va_arg(va1, void);
  if (a2)
  {
    std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV1 const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
    uint64_t v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      long long v7 = v6;
      _HKInitializeLogging();
      uint64_t v8 = (void *)*MEMORY[0x1E4F29F18];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_DEFAULT))
      {
        id v9 = *(uint64_t (**)(void *))(*(void *)v7 + 16);
        id v10 = v8;
        uint64_t v11 = v9(v7);
        LODWORD(buf) = 136315138;
        *(void *)(bufa + 4) = v11;
        _os_log_impl(&dword_1BCB7D000, v10, OS_LOG_TYPE_DEFAULT, "Caught std::exception during ignore block; ignoring: %s",
          (uint8_t *)bufa,
          0xCu);
      }
    }
    else
    {
      _HKInitializeLogging();
      uint64_t v12 = *MEMORY[0x1E4F29F18];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1BCB7D000, v12, OS_LOG_TYPE_DEFAULT, "Caught unknown during ignore block; ignoring.",
          (uint8_t *)bufa,
          2u);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BCFF3DDCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_EUlRSB_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE11target_typeEv()
{
  return &_ZTIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_EUlRSB_E_;
}

void _ZNSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV1EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV1EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F1721258;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV1EE7__cloneEPNS0_6__baseIS1D_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1721258;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV1EEclES19_S1C_(void *a1, uint64_t *a2, long long *a3)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  long long v6 = a3[1];
  long long v18 = *a3;
  long long v19 = v6;
  uint64_t v20 = *((void *)a3 + 4);
  uint64_t v7 = *(void *)(v4 + 24);
  v14[0] = v5;
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v7 + 48))(&v21);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = ___ZZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvENKUlSO_RKS9_E_clId21_HDRawLocationDatumV1EEbSO_S12__block_invoke;
  void v14[3] = &__block_descriptor_88_e9_B16__0__8l;
  id v9 = (id *)a1[3];
  void v14[4] = a1[2];
  void v14[5] = a2;
  long long v15 = v21;
  long long v16 = v22;
  uint64_t v17 = v23;
  if (v9) {
    p_obBOOL j = &obj;
  }
  else {
    p_obBOOL j = 0;
  }
  if (v9) {
    obBOOL j = *v9;
  }
  uint64_t v11 = hfd_catchExceptionsAsErrors(v14, (uint64_t)p_obj, 0);
  if (v9) {
    objc_storeStrong(v9, obj);
  }
  return v11;
}

void sub_1BCFF4184(void *a1)
{
  __cxa_begin_catch(a1);
  **(unsigned char **)(v1 + 32) = 1;
  __cxa_end_catch();
  JUMPOUT(0x1BCFF4164);
}

uint64_t _ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV1EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvEUlSO_RKS9_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV1EE11target_typeEv()
{
  return &_ZTIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvEUlSO_RKS9_E_;
}

uint64_t ___ZZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV1S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvENKUlSO_RKS9_E_clId21_HDRawLocationDatumV1EEbSO_S12__block_invoke(uint64_t a1)
{
  return 1;
}

void std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::~__func()
{
}

void *std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F17212E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F17212E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::operator()(uint64_t a1, health::DataStore::WriteTransaction *a2)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = a2;
  uint64_t v13 = a2;
  uint64_t HistoryRoot = health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1>::loadHistoryRoot((uint64_t)v6, *(ObjectIdentifier **)(a1 + 8), 0);
  if (HistoryRoot)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = (char *)v13 + 80;
    void v16[3] = (char *)v13 + 80;
    if (v7 != 0)
    {
      long long v14 = v7;
      long long v15 = v16;
      memset(__src, 0, 411);
      health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>((uint64_t *)v13 + 10, v7, *((uint64_t *)&v7 + 1), (uint64_t)__src);
      memcpy(__dst, __src, sizeof(__dst));
      health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV1>>::_removeSubtree<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV1 const&)#1}>((uint64_t)&v14, 0, (unint64_t *)&v14, (uint64_t)__dst);
    }
    uint64_t v9 = 0;
    health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1>::_updateHistoryRoot((uint64_t)v6);
    health::DataStore::WriteTransaction::removeObjectWithIdentifier(a2, *(ObjectIdentifier **)(a1 + 8));
  }
  return HistoryRoot;
}

uint64_t std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV1>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::target_type()
{
}

uint64_t health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV1>>::_removeSubtree<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV1 const&)#1}>(uint64_t a1, int a2, unint64_t *a3, uint64_t a4)
{
  if (*(_WORD *)(a4 + 408))
  {
    unint64_t v8 = 0;
    uint64_t v9 = (a2 + 1);
    do
    {
      if (*(unsigned char *)(a4 + 410))
      {
        uint64_t v10 = health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v8);
        health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV1>>::_removeLeaf<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV1 const&)#1}>(a1, (uint64_t *)(v10 + 8));
      }
      else
      {
        health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV1>>::_interiorChildAtIndex(a1, a2, a4, (unsigned __int16)v8, (uint64_t)__src);
        uint64_t v11 = health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v8)+ 8;
        memcpy(v13, __src, sizeof(v13));
        health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV1>>::_removeSubtree<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV1 const&)#1}>(a1, v9, v11, v13);
      }
      ++v8;
    }
    while (v8 < *(unsigned __int16 *)(a4 + 408));
  }
  return health::BlockAccessFile::WriteTransaction::freeBlock(*(void *)(*(void *)(a1 + 16) + 24), *a3, a3[1]);
}

uint64_t health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV1>>::_removeLeaf<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV1>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV1 const&)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  bzero(v11, 0x332uLL);
  long long v13 = 0u;
  long long v14 = 0u;
  health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV1,health::BlockPointer,17>>(*(uint64_t **)(v4 + 24), *a2, a2[1], (uint64_t)v11);
  if (v12)
  {
    for (unint64_t i = 0;
          i < v12;
          health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV1,health::BlockPointer,17>::ValueEntry,17ul>::operator[]((uint64_t)v11, i++))
    {
      health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV1,health::BlockPointer,17>::ValueEntry,17ul>::operator[]((uint64_t)v11, i);
    }
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *((void *)&v14 + 1);
  uint64_t v7 = v14;
  if (v14 != *(_OWORD *)v6)
  {
    bzero(v15, 0x332uLL);
    long long v16 = 0u;
    long long v17 = 0u;
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV1,health::BlockPointer,17>>(*(uint64_t **)(v6 + 24), v7, v8, (uint64_t)v15);
    long long v16 = v13;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV1,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v14, *((uint64_t *)&v14 + 1), (uint64_t)v15);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)v6;
  }
  long long v9 = v13;
  if (v13 != __PAIR128__(*(void *)(v6 + 8), v7))
  {
    bzero(v15, 0x332uLL);
    long long v16 = 0u;
    long long v17 = 0u;
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV1,health::BlockPointer,17>>(*(uint64_t **)(v6 + 24), v9, *((uint64_t *)&v9 + 1), (uint64_t)v15);
    long long v17 = v14;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV1,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v13, *((uint64_t *)&v13 + 1), (uint64_t)v15);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  return health::BlockAccessFile::WriteTransaction::freeBlock(*(void *)(v6 + 24), *a2, a2[1]);
}

void sub_1BCFF48EC(_Unwind_Exception *exception_object)
{
}

void *std::__function::__value_func<_HDRawLocationDatumV1 ()(double,_HDRawLocationDatumV1)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F1721488;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE7__cloneEPNS0_6__baseISY_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1721488;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEEclESX_(uint64_t a1, uint64_t a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3321888768;
  uint64_t v5[2] = ___ZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO__block_invoke;
  v5[3] = &__block_descriptor_72_ea8_32c276_ZTSKZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_EUlSL_E__e9_B16__0__8l;
  uint64_t v2 = *(void *)(a1 + 8);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v7 = v2;
  uint64_t v8 = a2;
  long long v3 = *(id **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v3)
  {
    obBOOL j = *v3;
    hfd_catchExceptionsAsErrors(v5, (uint64_t)&obj, 0);
    objc_storeStrong(v3, obj);
  }
  else
  {
    hfd_catchExceptionsAsErrors(v5, 0, 0);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSB_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSD_E_NS_9allocatorISR_EEFvRKNS5_13SampleHistoryIS3_EEEE11target_typeEv()
{
  return &_ZTIZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvEUlRKSB_E_;
}

BOOL ___ZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO__block_invoke(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  char v18 = 0;
  id v17 = 0;
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = &unk_1F17215A8;
  v8[1] = v7;
  void v8[2] = &v17;
  v8[3] = &v18;
  void v8[4] = v6;
  v20[3] = v8;
  char v19 = 1;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_1F1721528;
  v9[1] = v5;
  void v9[2] = &v19;
  void v9[3] = v20;
  long long v22 = v9;
  health::DataStore::performWriteTransactionWithLambda(v4, (uint64_t)v21);
  std::__function::__value_func<BOOL ()(health::DataStore::WriteTransaction &)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>::~__value_func[abi:ne180100](v20);
  id v10 = v17;
  if (v17)
  {
    id v11 = v17;
    unsigned __int16 v12 = v11;
    if (a2) {
      *a2 = v11;
    }
    else {
      _HKLogDroppedError();
    }
  }
  else
  {
    if (v18) {
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1[8] + 24);
    if (!v13) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13) & 1) == 0)
    {
LABEL_7:
      uint64_t v14 = a1[4];
      uint64_t v15 = a1[5];
      v21[0] = &unk_1F17216B8;
      v21[1] = v15;
      long long v22 = v21;
      health::DataStore::performWriteTransactionWithLambda(v14, (uint64_t)v21);
      std::__function::__value_func<BOOL ()(health::DataStore::WriteTransaction &)>::~__value_func[abi:ne180100](v21);
    }
  }

  return v10 == 0;
}

void sub_1BCFF4E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c276_ZTSKZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_EUlSL_E_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v3;
  return result;
}

void std::__function::__func<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::~__func()
{
}

__n128 std::__function::__func<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1721528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1721528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::operator()(uint64_t a1, uint64_t a2)
{
  long long v8 = 0u;
  long long v7 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = a2;
  uint64_t v12 = a2;
  double HistoryRoot = health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::loadHistoryRoot((uint64_t)v6, *(ObjectIdentifier **)(a1 + 8), **(unsigned __int8 **)(a1 + 16));
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, unsigned char *, double))(*(void *)v4 + 48))(v4, v6, HistoryRoot);
}

uint64_t std::__function::__func<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<BOOL health::DataStore::accessSampleHistoryWithIdentifierForWriting<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&,BOOL,std::function<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::target_type()
{
}

double health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::loadHistoryRoot(uint64_t a1, ObjectIdentifier *a2, int a3)
{
  *(ObjectIdentifier *)(a1 + 72) = *a2;
  uint64_t v5 = *(health::DataStore::ReadTransaction **)(a1 + 96);
  health::DataStore::ReadTransaction::_pointerForObject(v5, a2, (uint64_t)v10);
  if (v10[16])
  {
    uint64_t v6 = (uint64_t *)*((void *)v5 + 3);
    long long v7 = (uint64_t *)health::Optional<health::BlockPointer>::get((uint64_t)v10);
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::DataStore::SampleHistory<LocationHistoryBehaviorV1>::SampleHistoryRoot>(v6, *v7, v7[1], (void *)a1);
  }
  else
  {
    if (!a3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      _ZN6health15not_found_errorCI1St13runtime_errorEPKc(exception, "The requested sample history does not exist.");
    }
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
    *(void *)&double result = health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::_updateHistoryRoot(a1).n128_u64[0];
  }
  return result;
}

void sub_1BCFF50C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::_updateHistoryRoot(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  if (*(void *)(a1 + 64) != 56)
  {
    long long v17 = *(_OWORD *)(v2 + 32);
    uint64_t v18 = v2 + 48;
    health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<health::DataStore::ObjectIdentifier,health::BlockPointer>>::valueForKey<health::DataStore::ObjectIdentifier>((uint64_t *)&v17, (void *)(a1 + 72), 0, v15);
    if (v16)
    {
      uint64_t v5 = *(void *)(health::Optional<health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<health::DataStore::ObjectIdentifier,health::BlockPointer>>::LookupResult>::operator->((uint64_t)v15)
                     + 24);
      uint64_t v6 = (health::BlockAccessFile::WriteTransaction *)(v2 + 80);
      uint64_t v7 = health::Optional<health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<health::DataStore::ObjectIdentifier,health::BlockPointer>>::LookupResult>::operator->((uint64_t)v15);
      unint64_t v8 = *(void *)(v7 + 16);
      unint64_t v9 = *(void *)(v7 + 24);
      if (v5 == 56)
      {
        health::BlockAccessFile::WriteTransaction::updateObject<health::DataStore::SampleHistory<LocationHistoryBehaviorV2>::SampleHistoryRoot>((uint64_t)v6, v8, v9, (void *)a1);
LABEL_11:
        health::DataStore::ReadTransaction::_pointerForObject(*(health::DataStore::ReadTransaction **)(a1 + 96), (ObjectIdentifier *)(a1 + 72), (uint64_t)v15);
        uint64_t v13 = (__n128 *)health::Optional<health::BlockPointer>::get((uint64_t)v15);
        __n128 result = *v13;
        *(__n128 *)(a1 + 56) = *v13;
        return result;
      }
      health::BlockAccessFile::WriteTransaction::freeBlock((uint64_t)v6, v8, v9);
    }
    else
    {
      uint64_t v6 = (health::BlockAccessFile::WriteTransaction *)(v2 + 80);
    }
    unint64_t v10 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(v6, 56);
    unint64_t v12 = v11;
    health::BlockAccessFile::WriteTransaction::updateObject<health::DataStore::SampleHistory<LocationHistoryBehaviorV2>::SampleHistoryRoot>((uint64_t)v6, v10, v11, (void *)a1);
    v14.n128_u64[0] = v10;
    v14.n128_u64[1] = v12;
    health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<health::DataStore::ObjectIdentifier,health::BlockPointer>>::setValueForKey((uint64_t *)&v17, (__n128 *)(a1 + 72), &v14);
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(a1 + 56);

  health::BlockAccessFile::WriteTransaction::updateObject<health::DataStore::SampleHistory<LocationHistoryBehaviorV2>::SampleHistoryRoot>(v2 + 80, v3, 56, (void *)a1);
  return result;
}

uint64_t health::BlockAccessFile::WriteTransaction::updateObject<health::DataStore::SampleHistory<LocationHistoryBehaviorV2>::SampleHistoryRoot>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  unint64_t v14 = 56;
  v11[0] = v12;
  v11[1] = v12;
  void v11[2] = 56;
  v10[0] = *a4;
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v11, v10);
  v10[0] = a4[1];
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v11, v10);
  v10[0] = a4[2];
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v11, v10);
  v10[0] = a4[3];
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v11, v10);
  v10[0] = a4[4];
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v11, v10);
  v10[0] = a4[5];
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v11, v10);
  v10[0] = a4[6];
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v11, v10);
  if (v14 <= 0x3FF) {
    unint64_t v8 = v12;
  }
  else {
    unint64_t v8 = v13;
  }
  health::RawBuffer::RawBuffer(v10, v8, v14);
  health::BlockAccessFile::WriteTransaction::updateBlock(a1, a2, a3, (uint64_t)v10);
  uint64_t result = (uint64_t)v13;
  uint64_t v13 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCFF5390(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x428];
  STACK[0x428] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE7__cloneEv(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_1F17215A8;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE7__cloneEPNS0_6__baseIS14_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F17215A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEEclES13_(uint64_t a1, uint64_t a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v5 = &unk_1F1721628;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 2) = a2;
  *(_OWORD *)(v5 + 24) = v7;
  v8[3] = v5;
  health::DataStore::SampleHistory<LocationHistoryBehaviorV2>::enumerateSamples(v3, (uint64_t)v8);
  std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV2 const&)>::~__value_func[abi:ne180100](v8);
  return 1;
}

void sub_1BCFF551C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(bufa, a4);
  long long buf = va_arg(va1, _OWORD);
  uint64_t v15 = va_arg(va1, void);
  if (a2)
  {
    std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV2 const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
    uint64_t v6 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      long long v7 = v6;
      _HKInitializeLogging();
      unint64_t v8 = (void *)*MEMORY[0x1E4F29F18];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v9 = *(uint64_t (**)(void *))(*(void *)v7 + 16);
        unint64_t v10 = v8;
        uint64_t v11 = v9(v7);
        LODWORD(buf) = 136315138;
        *(void *)(bufa + 4) = v11;
        _os_log_impl(&dword_1BCB7D000, v10, OS_LOG_TYPE_DEFAULT, "Caught std::exception during ignore block; ignoring: %s",
          (uint8_t *)bufa,
          0xCu);
      }
    }
    else
    {
      _HKInitializeLogging();
      unint64_t v12 = *MEMORY[0x1E4F29F18];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E4F29F18], OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1BCB7D000, v12, OS_LOG_TYPE_DEFAULT, "Caught unknown during ignore block; ignoring.",
          (uint8_t *)bufa,
          2u);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BCFF54E8);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_EUlRSB_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_EUlRSD_E_NS_9allocatorISY_EEFbRNS5_20MutableSampleHistoryIS3_EEEE11target_typeEv()
{
  return &_ZTIZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_EUlRSB_E_;
}

void _ZNSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV2EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV2EE7__cloneEv(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_1F1721628;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV2EE7__cloneEPNS0_6__baseIS1D_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1721628;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV2EEclES19_S1C_(void *a1, uint64_t *a2, long long *a3)
{
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  long long v6 = a3[1];
  long long v18 = *a3;
  long long v19 = v6;
  long long v20 = a3[2];
  long long v21 = 0u;
  uint64_t v7 = *(void *)(v4 + 24);
  v14[0] = v5;
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v7 + 48))(&v21);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = ___ZZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvENKUlSO_RKS9_E_clId21_HDRawLocationDatumV2EEbSO_S12__block_invoke;
  void v14[3] = &__block_descriptor_96_e9_B16__0__8l;
  unint64_t v9 = (id *)a1[3];
  void v14[4] = a1[2];
  void v14[5] = a2;
  long long v15 = v21;
  long long v16 = v22;
  long long v17 = v23;
  if (v9) {
    p_obBOOL j = &obj;
  }
  else {
    p_obBOOL j = 0;
  }
  if (v9) {
    obBOOL j = *v9;
  }
  uint64_t v11 = hfd_catchExceptionsAsErrors(v14, (uint64_t)p_obj, 0);
  if (v9) {
    objc_storeStrong(v9, obj);
  }
  return v11;
}

void sub_1BCFF5894(void *a1)
{
  __cxa_begin_catch(a1);
  **(unsigned char **)(v1 + 32) = 1;
  __cxa_end_catch();
  JUMPOUT(0x1BCFF5870);
}

uint64_t _ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV2EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvEUlSO_RKS9_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S3_EbRKN6health9DataStoreERS5_NS5_16ObjectIdentifierENS_8functionIFNT0_9ValueTypeENT_7KeyTypeENSD_9ValueTypeEEEENSA_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSD_E_clINS5_13SampleHistoryIS3_EEEEDaSQ_ENKUlSN_E_clESN_ENKUlRSD_E_clINS5_20MutableSampleHistoryIS3_EEEEbSX_ENKUlvE_clEvEUlSQ_RKSB_E_NS_9allocatorIS15_EEFbRKdRK21_HDRawLocationDatumV2EE11target_typeEv()
{
  return &_ZTIZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvEUlSO_RKS9_E_;
}

uint64_t ___ZZZZZZZL15HDMigrateDatumsI25LocationHistoryBehaviorV2S0_EbRKN6health9DataStoreERS2_NS2_16ObjectIdentifierENSt3__18functionIFNT0_9ValueTypeENT_7KeyTypeENSB_9ValueTypeEEEENS8_IFbvEEEPU15__autoreleasingP7NSErrorENKUlvE_clEvENKUlRKSB_E_clINS2_13SampleHistoryIS0_EEEEDaSO_ENKUlSL_E_clESL_ENKUlRSB_E_clINS2_20MutableSampleHistoryIS0_EEEEbSV_ENKUlvE_clEvENKUlSO_RKS9_E_clId21_HDRawLocationDatumV2EEbSO_S12__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(double **)(a1 + 40);
  uint64_t v3 = (long long *)(a1 + 48);
  uint64_t v4 = (health::BlockAccessFile::WriteTransaction *)(*(void *)(v1 + 96) + 80);
  v36[0] = 0;
  v36[1] = 0;
  void v36[2] = v4;
  v36[3] = v4;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  if (!v6)
  {
    if (v5)
    {
      uint64_t v6 = 0;
    }
    else
    {
      long long v34 = 0u;
      memset(v35, 0, sizeof(v35));
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      uint64_t v6 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(v4, 411);
      uint64_t v5 = v7;
      health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>((uint64_t)v4, v6, v7, (uint64_t)&v11);
      *(void *)(v1 + 16) = v6;
      *(void *)(v1 + 24) = v5;
    }
  }
  *(void *)&long long v11 = v6;
  *((void *)&v11 + 1) = v5;
  *(void *)&long long v12 = v36;
  int v8 = health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::setValueForKey((uint64_t *)&v11, v2, v3);
  uint64_t v9 = *(void *)(v1 + 48);
  if (v9)
  {
    if (!v8) {
      *(void *)(v1 + 4_Block_object_dispose(&STACK[0x230], 8) = v9 + 1;
    }
  }
  else
  {
    *(void *)(v1 + 4_Block_object_dispose(&STACK[0x230], 8) = 1;
    *(_OWORD *)uint64_t v1 = xmmword_1BD32DD50;
  }
  health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::_updateHistoryRoot(v1);
  return 1;
}

uint64_t health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::setValueForKey(uint64_t *a1, double *a2, long long *a3)
{
  uint64_t v6 = a1[2];
  memset(v15, 0, 411);
  health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(uint64_t **)(v6 + 24), *a1, a1[1], (uint64_t)v15);
  uint64_t result = health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_setValueForKey((uint64_t)a1, 0, a1, (uint64_t)v15, a2, a3);
  if (result >= 2)
  {
    uint64_t v8 = a1[2];
    memset(__src, 0, 411);
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(uint64_t **)(v8 + 24), *a1, a1[1], (uint64_t)__src);
    memcpy(v13, __src, sizeof(v13));
    uint64_t v9 = *(health::BlockAccessFile::WriteTransaction **)(a1[2] + 24);
    uint64_t v10 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(v9, 411);
    uint64_t v12 = v11;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>((uint64_t)v9, v10, v11, (uint64_t)v13);
    WORD4(__src[25]) = 1;
    *((void *)&__src[0] + 1) = v10;
    *(void *)&__src[1] = v12;
    BYTE10(__src[25]) = 0;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(void *)(a1[2] + 24), *a1, a1[1], (uint64_t)__src);
    return health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::setValueForKey(a1, a2, a3);
  }
  return result;
}

uint64_t health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_setValueForKey(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, double *a5, long long *a6)
{
  if (!*(_WORD *)(a4 + 408))
  {
    bzero(&v76, 0x380uLL);
    long long v19 = *(long long **)(a1 + 16);
    long long v80 = *v19;
    long long v81 = *v19;
    double v72 = *a5;
    long long v20 = *a6;
    long long v74 = a6[1];
    long long v75 = a6[2];
    unsigned __int16 v79 = 1;
    long long v73 = v20;
    long long v21 = (health::BlockAccessFile::WriteTransaction *)*((void *)v19 + 3);
    uint64_t v22 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(v21, 935);
    uint64_t v24 = v23;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>((uint64_t)v21, v22, v23, (uint64_t)&v72);
    *(double *)a4 = *a5;
    *(void *)(a4 + _Block_object_dispose(&STACK[0x230], 8) = v22;
    *(void *)(a4 + 16) = v24;
    *(_WORD *)(a4 + 40_Block_object_dispose(&STACK[0x230], 8) = 1;
    *(unsigned char *)(a4 + 410) = 1;
LABEL_8:
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), *a3, a3[1], a4);
    return 0;
  }
  if (*(unsigned char *)(a4 + 410))
  {
    unsigned int v11 = health::bplustree::InteriorNode<double,health::BlockPointer,17>::childForKey(a4, a5);
    *(_OWORD *)int v82 = *(_OWORD *)(health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v11)+ 8);
    uint64_t v12 = *(void *)(a1 + 16);
    bzero(&v72, 0x3BAuLL);
    long long v81 = 0u;
    long long v80 = 0u;
    long long v13 = *(_OWORD *)v82;
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(uint64_t **)(v12 + 24), v82[0], v82[1], (uint64_t)&v72);
    uint64_t v14 = health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_setValueForKey(a1, v82, (uint64_t)&v72, a5, a6);
    uint64_t v15 = v14;
    if (v14 <= 1)
    {
      double v16 = *a5;
      if (v16 < *(double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v11))
      {
        double v17 = *a5;
        *(double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v11) = v17;
        health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), *a3, a3[1], a4);
      }
      return v15;
    }
    int v33 = *(unsigned __int16 *)(a4 + 408);
    if (v33 == 17)
    {
      uint64_t v18 = 2;
      if (v11 == 16)
      {
        if (v14 == 4) {
          return 4;
        }
        else {
          return 2;
        }
      }
      else if (!v11)
      {
        if (v14 == 3) {
          return 3;
        }
        else {
          return 2;
        }
      }
      return v18;
    }
    if (v14 == 4 && v33 - 1 == v11)
    {
      bzero((char *)&__dst[3] + 8, 0x380uLL);
      __int16 v69 = 1;
      *(double *)__dst = *a5;
      long long v34 = *a6;
      *(_OWORD *)((char *)&__dst[1] + _Block_object_dispose(&STACK[0x230], 8) = a6[1];
      *(_OWORD *)((char *)&__dst[2] + _Block_object_dispose(&STACK[0x230], 8) = a6[2];
      *(_OWORD *)((char *)__dst + _Block_object_dispose(&STACK[0x230], 8) = v34;
      long long v70 = *(_OWORD *)v82;
      long long v71 = v81;
      uint64_t v35 = *(health::BlockAccessFile::WriteTransaction **)(*(void *)(a1 + 16) + 24);
      uint64_t v36 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(v35, 935);
      uint64_t v38 = v37;
      health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>((uint64_t)v35, v36, v37, (uint64_t)__dst);
      *(void *)&long long v81 = v36;
      *((void *)&v81 + 1) = v38;
      health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v13, *((uint64_t *)&v13 + 1), (uint64_t)&v72);
      uint64_t v39 = *(void *)(a1 + 16);
      long long v40 = v71;
      if (v71 != *(_OWORD *)v39)
      {
        bzero(&__p, 0x3BAuLL);
        long long v65 = 0u;
        long long v66 = 0u;
        health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(uint64_t **)(v39 + 24), v40, *((uint64_t *)&v40 + 1), (uint64_t)&__p);
        *(void *)&long long v65 = v36;
        *((void *)&v65 + 1) = v38;
        health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v71, *((uint64_t *)&v71 + 1), (uint64_t)&__p);
      }
      unint64_t v41 = *(unsigned __int16 *)(a4 + 408);
      uint64_t v42 = health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v41);
      *(void *)(v42 + _Block_object_dispose(&STACK[0x230], 8) = v36;
      *(void *)(v42 + 16) = v38;
      double v43 = *a5;
      *(double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v41) = v43;
      ++*(_WORD *)(a4 + 408);
      goto LABEL_8;
    }
    long long v62 = *(_OWORD *)v82;
    uint64_t v68 = 0;
    memset(&__dst[28], 0, 496);
    long long v70 = *(_OWORD *)v82;
    long long v71 = v81;
    if (v79 >= 0x12uLL)
    {
      unsigned int v50 = (void *)*MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(&__p, "sourceIndex + elementCount <= Length");
      std::string::basic_string[abi:ne180100]<0>(&v85, "copyElementsFromArrayToIndex");
      std::string::basic_string[abi:ne180100]<0>(&v84, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/Utility/HDStaticArray.h");
      health::FormatString<>((std::string *)"Copy would overflow source.", &v83);
      health::_HDAssertImplementation<std::out_of_range>(v50, (uint64_t)&__p, (uint64_t)&v85, (uint64_t)&v84, 80, (uint64_t)&v83);
    }
    memcpy(__dst, &v72 + 7 * v79 - 56, 0x1C0uLL);
    v79 -= 8;
    __int16 v69 = 8;
    uint64_t v51 = *(health::BlockAccessFile::WriteTransaction **)(*(void *)(a1 + 16) + 24);
    unint64_t v52 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(v51, 935);
    uint64_t v54 = v53;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>((uint64_t)v51, v52, v53, (uint64_t)__dst);
    *(void *)&long long v85 = v52;
    *((void *)&v85 + 1) = v54;
    long long v81 = v85;
    uint64_t v55 = *(void *)(a1 + 16);
    uint64_t v56 = v71;
    if (v71 != *(_OWORD *)v55)
    {
      uint64_t v61 = *((void *)&v71 + 1);
      bzero(&__p, 0x3BAuLL);
      long long v65 = 0u;
      long long v66 = 0u;
      health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(uint64_t **)(v55 + 24), v56, v61, (uint64_t)&__p);
      long long v65 = v85;
      health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v71, *((uint64_t *)&v71 + 1), (uint64_t)&__p);
    }
    __p.n128_u64[0] = *(void *)&__dst[0];
    __p.n128_u64[1] = v52;
    std::string::size_type v64 = v54;
    health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::insertElementAtIndex(a4, &__p, v11 + 1);
    ++*(_WORD *)(a4 + 408);
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v62, *((uint64_t *)&v62 + 1), (uint64_t)&v72);
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), *a3, a3[1], a4);
    if (*a5 <= *(double *)__dst)
    {
      char v57 = (uint64_t *)&v62;
      unsigned int v58 = &v72;
    }
    else
    {
      char v57 = (uint64_t *)&v85;
      unsigned int v58 = (double *)__dst;
    }
    return health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_setValueForKey(a1, v57, (uint64_t)v58, a5, a6);
  }
  int v26 = a2 + 1;
  unsigned int v27 = health::bplustree::InteriorNode<double,health::BlockPointer,17>::childForKey(a4, a5);
  uint64_t v28 = v27;
  long long v85 = *(_OWORD *)(health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v27)+ 8);
  health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_interiorChildAtIndex((uint64_t)&v72, a1, v26, a4, v27);
  uint64_t v29 = (a2 + 2);
  uint64_t v30 = health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_setValueForKey(a1, v29, &v85, &v72, a5, a6);
  if (v30 > 1)
  {
    if (*(_WORD *)(a4 + 408) == 17) {
      return 2;
    }
    long long v84 = v85;
    memset(&__dst[2], 0, 379);
    BYTE10(__dst[25]) = v78;
    memset(__dst, 0, 32);
    health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::copyElementsFromArrayToIndex((uint64_t)__dst, 0, (uint64_t)&v72, v77 - 8, 8);
    v77 -= 8;
    WORD4(__dst[25]) = 8;
    __int16 v44 = *(health::BlockAccessFile::WriteTransaction **)(*(void *)(a1 + 16) + 24);
    unint64_t v45 = health::BlockAccessFile::WriteTransaction::_requestBlockOfLength(v44, 411);
    std::string::size_type v47 = v46;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>((uint64_t)v44, v45, v46, (uint64_t)__dst);
    v83.__r_.__value_.__r.__words[0] = v45;
    v83.__r_.__value_.__l.__size_ = v47;
    __p.n128_u64[0] = *(void *)&__dst[0];
    __p.n128_u64[1] = v45;
    std::string::size_type v64 = v47;
    health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::insertElementAtIndex(a4, &__p, v28 + 1);
    ++*(_WORD *)(a4 + 408);
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v84, *((uint64_t *)&v84 + 1), (uint64_t)&v72);
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), *a3, a3[1], a4);
    if (*a5 <= *(double *)__dst)
    {
      uint64_t v48 = (std::string *)&v84;
      char v49 = &v72;
    }
    else
    {
      uint64_t v48 = &v83;
      char v49 = (double *)__dst;
    }
    return health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_setValueForKey(a1, v29, v48, v49, a5, a6);
  }
  uint64_t v18 = v30;
  double v31 = *a5;
  if (v31 < *(double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v27))
  {
    double v32 = *a5;
    *(double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v27) = v32;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), *a3, a3[1], a4);
  }
  return v18;
}

void sub_1BCFF643C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 177) < 0) {
    operator delete(*(void **)(v18 - 200));
  }
  if (*(char *)(v18 - 153) < 0) {
    operator delete(*(void **)(v18 - 176));
  }
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  unint64_t v16 = 935;
  v13[0] = v14;
  v13[1] = v14;
  void v13[2] = 935;
  do
  {
    uint64_t v9 = health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>::ValueEntry,17ul>::operator[](a4, v8);
    v12[0] = *(void *)v9;
    health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v13, v12);
    v12[0] = *(void *)(v9 + 8);
    health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v13, v12);
    v12[0] = *(void *)(v9 + 16);
    health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v13, v12);
    LODWORD(v12[0]) = *(_DWORD *)(v9 + 24);
    health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v13, v12);
    LODWORD(v12[0]) = *(_DWORD *)(v9 + 28);
    health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v13, v12);
    LODWORD(v12[0]) = *(_DWORD *)(v9 + 32);
    health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v13, v12);
    LODWORD(v12[0]) = *(_DWORD *)(v9 + 36);
    health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v13, v12);
    LODWORD(v12[0]) = *(_DWORD *)(v9 + 40);
    health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v13, v12);
    LODWORD(v12[0]) = *(_DWORD *)(v9 + 44);
    health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v13, v12);
    LODWORD(v12[0]) = *(_DWORD *)(v9 + 48);
    health::SerializationBuffer::appendRaw<unsigned int>((uint64_t)v13, v12);
    LOBYTE(v12[0]) = *(unsigned char *)(v9 + 52);
    health::SerializationBuffer::appendRaw<unsigned char>((uint64_t)v13, v12);
    ++v8;
  }
  while (v8 != 17);
  LOWORD(v12[0]) = *(_WORD *)(a4 + 952);
  health::SerializationBuffer::appendRaw<unsigned short>((uint64_t)v13, v12);
  v12[0] = *(void *)(a4 + 960);
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v13, v12);
  v12[0] = *(void *)(a4 + 968);
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v13, v12);
  v12[0] = *(void *)(a4 + 976);
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v13, v12);
  v12[0] = *(void *)(a4 + 984);
  health::SerializationBuffer::appendRaw<unsigned long long>((uint64_t)v13, v12);
  if (v16 <= 0x3FF) {
    uint64_t v10 = v14;
  }
  else {
    uint64_t v10 = v15;
  }
  health::RawBuffer::RawBuffer(v12, v10, v16);
  health::BlockAccessFile::WriteTransaction::updateBlock(a1, a2, a3, (uint64_t)v12);
  uint64_t result = (uint64_t)v15;
  uint64_t v15 = 0;
  if (result) {
    return MEMORY[0x1C187B880](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1BCFF66E0(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x428];
  STACK[0x428] = 0;
  if (v2) {
    MEMORY[0x1C187B880](v2, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_setValueForKey(uint64_t a1, uint64_t *a2, uint64_t a3, double *a4, _OWORD *a5)
{
  if (!*(_WORD *)(a3 + 952))
  {
    uint64_t v10 = (void *)*MEMORY[0x1E4F29F18];
    std::string::basic_string[abi:ne180100]<0>(v27, "valueCount > 0");
    std::string::basic_string[abi:ne180100]<0>(v33, "indexForKey");
    std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBPlusTree.hpp");
    health::FormatString<>((std::string *)"Looking for index for key in an empty node.", &__p);
    health::_HDAssertImplementation<health::btree_access_error>(v10, (uint64_t)v27, (uint64_t)v33, (uint64_t)v32, 72, (uint64_t)&__p);
  }
  unsigned int v11 = *(unsigned __int16 *)(a3 + 952) - 1;
  uint64_t v12 = 1;
  while (1)
  {
    double v13 = *a4;
    if (v13 > *(double *)health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>::ValueEntry,17ul>::operator[](a3, v11))break; {
    double v14 = *a4;
    }
    uint64_t v15 = (double *)health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>::ValueEntry,17ul>::operator[](a3, v11);
    int v16 = (unsigned __int16)v11;
    if (v14 == *v15)
    {
      uint64_t v24 = health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>::ValueEntry,17ul>::operator[](a3, (unsigned __int16)v11);
      long long v26 = a5[1];
      long long v25 = a5[2];
      *(_OWORD *)(v24 + _Block_object_dispose(&STACK[0x230], 8) = *a5;
      *(_OWORD *)(v24 + 24) = v26;
      *(_OWORD *)(v24 + 40) = v25;
      health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), *a2, a2[1], a3);
      return 1;
    }
    --v11;
    if (!v16)
    {
      uint64_t v12 = 0;
      LOWORD(v11) = 0;
      break;
    }
  }
  if (*(_WORD *)(a3 + 952) == 17)
  {
    if (*a4 >= *(double *)a3)
    {
      if (*a4 <= *(double *)(a3 + 896)) {
        return 2;
      }
      else {
        return 4;
      }
    }
    else
    {
      return 3;
    }
  }
  else
  {
    unint64_t v18 = v12 + (unsigned __int16)v11;
    double v19 = *a4;
    long long v20 = a5[1];
    *(_OWORD *)unsigned int v27 = *a5;
    long long v28 = v20;
    long long v29 = a5[2];
    if (v18 >= 0x11)
    {
      long long v21 = (void *)*MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v33, "index < Length");
      std::string::basic_string[abi:ne180100]<0>(v32, "insertElementAtIndex");
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/Utility/HDStaticArray.h");
      health::FormatString<>((std::string *)"Index out of bounds.", &v30);
      health::_HDAssertImplementation<std::out_of_range>(v21, (uint64_t)v33, (uint64_t)v32, (uint64_t)&__p, 57, (uint64_t)&v30);
    }
    uint64_t v22 = (double *)(a3 + 56 * v18);
    memmove(v22 + 7, v22, 56 * (16 - v18));
    *uint64_t v22 = v19;
    long long v23 = v28;
    *(_OWORD *)(v22 + 1) = *(_OWORD *)v27;
    *(_OWORD *)(v22 + 3) = v23;
    *(_OWORD *)(v22 + 5) = v29;
    ++*(_WORD *)(a3 + 952);
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), *a2, a2[1], a3);
    return 0;
  }
}

void sub_1BCFF6A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 81) < 0) {
    operator delete(*(void **)(v35 - 104));
  }
  _Unwind_Resume(exception_object);
}

double *health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_interiorChildAtIndex(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  if (*(unsigned __int16 *)(a4 + 408) <= a5)
  {
    uint64_t v9 = (void *)*MEMORY[0x1E4F29F18];
    std::string::basic_string[abi:ne180100]<0>(v35, "index < node.childCount");
    std::string::basic_string[abi:ne180100]<0>(v34, "_interiorChildAtIndex");
    std::string::basic_string[abi:ne180100]<0>(v33, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBPlusTree.hpp");
    health::FormatString<>((std::string *)"Child index out of bounds.", &v32);
    health::_HDAssertImplementation<health::btree_access_error>(v9, (uint64_t)v35, (uint64_t)v34, (uint64_t)v33, 137, (uint64_t)&v32);
  }
  if (a3 >= 64)
  {
    uint64_t v10 = (void *)*MEMORY[0x1E4F29F18];
    std::string::basic_string[abi:ne180100]<0>(v31, "depth < kMaximumRecursionDepth");
    std::string::basic_string[abi:ne180100]<0>(v30, "_interiorChildAtIndex");
    std::string::basic_string[abi:ne180100]<0>(v29, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBPlusTree.hpp");
    health::FormatString<>((std::string *)"Maximum recursion depth reached.", &__p);
    health::_HDAssertImplementation<health::btree_access_error>(v10, (uint64_t)v31, (uint64_t)v30, (uint64_t)v29, 138, (uint64_t)&__p);
  }
  uint64_t v11 = health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, a5);
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 395) = 0u;
  uint64_t result = (double *)health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>(*(uint64_t **)(v14 + 24), v12, v13, a1);
  if (*(_WORD *)(a1 + 408))
  {
    double v16 = *(double *)a1;
    uint64_t result = (double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, a5);
    if (v16 < *result)
    {
      uint64_t v17 = (void *)*MEMORY[0x1E4F29F18];
      std::string::basic_string[abi:ne180100]<0>(v27, "child.children[0].key >= node.children[index].key");
      std::string::basic_string[abi:ne180100]<0>(v26, "_interiorChildAtIndex");
      std::string::basic_string[abi:ne180100]<0>(v25, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBPlusTree.hpp");
      health::FormatString<>((std::string *)"Child node's smallest key is < parent's key", &v24);
      health::_HDAssertImplementation<health::btree_access_error>(v17, (uint64_t)v27, (uint64_t)v26, (uint64_t)v25, 144, (uint64_t)&v24);
    }
    if (*(unsigned __int16 *)(a4 + 408) - 1 > (int)a5)
    {
      double v18 = *(double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a1, *(unsigned __int16 *)(a1 + 408) - 1);
      uint64_t result = (double *)health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, a5 + 1);
      if (v18 >= *result)
      {
        double v19 = (void *)*MEMORY[0x1E4F29F18];
        std::string::basic_string[abi:ne180100]<0>(v23, "child.children[child.childCount - 1].key < node.children[index + 1].key");
        std::string::basic_string[abi:ne180100]<0>(v22, "_interiorChildAtIndex");
        std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/HealthKit/HealthKit/HealthDaemon/Database/Migration/HFDtoSQLite/HighFrequencyData/HDBPlusTree.hpp");
        health::FormatString<>((std::string *)"Child node's largest key is >= parent's next key", &v20);
        health::_HDAssertImplementation<health::btree_access_error>(v19, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21, 146, (uint64_t)&v20);
      }
    }
  }
  return result;
}

void sub_1BCFF6EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2> &)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::~__func()
{
}

void *std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F17216B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F17216B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::operator()(uint64_t a1, health::DataStore::WriteTransaction *a2)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v11 = a2;
  uint64_t v12 = a2;
  health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::loadHistoryRoot((uint64_t)v5, *(ObjectIdentifier **)(a1 + 8), 0);
  v15[0] = 0;
  v15[1] = 0;
  _OWORD v15[2] = (char *)v12 + 80;
  void v15[3] = (char *)v12 + 80;
  if (v6 != 0)
  {
    long long v13 = v6;
    uint64_t v14 = v15;
    memset(__src, 0, 411);
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::InteriorNode<double,health::BlockPointer,17>>((uint64_t *)v12 + 10, v6, *((uint64_t *)&v6 + 1), (uint64_t)__src);
    memcpy(__dst, __src, sizeof(__dst));
    health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_removeSubtree<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV2 const&)#1}>((uint64_t)&v13, 0, (unint64_t *)&v13, (uint64_t)__dst);
  }
  uint64_t v8 = 0;
  health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::_updateHistoryRoot((uint64_t)v5);
  health::DataStore::WriteTransaction::removeObjectWithIdentifier(a2, *(ObjectIdentifier **)(a1 + 8));
  return 1;
}

uint64_t std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1},std::allocator<void health::DataStore::deleteSampleHistory<LocationHistoryBehaviorV2>(health::DataStore::ObjectIdentifier const&)::{lambda(health::DataStore::WriteTransaction &)#1}>,BOOL ()(health::DataStore::WriteTransaction &)>::target_type()
{
}

uint64_t health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_removeSubtree<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV2 const&)#1}>(uint64_t a1, int a2, unint64_t *a3, uint64_t a4)
{
  if (*(_WORD *)(a4 + 408))
  {
    unint64_t v8 = 0;
    uint64_t v9 = (a2 + 1);
    do
    {
      if (*(unsigned char *)(a4 + 410))
      {
        uint64_t v10 = health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v8);
        health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_removeLeaf<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV2 const&)#1}>(a1, (uint64_t *)(v10 + 8));
      }
      else
      {
        health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_interiorChildAtIndex((uint64_t)__src, a1, a2, a4, (unsigned __int16)v8);
        uint64_t v11 = health::StaticArray<health::bplustree::InteriorNode<double,health::BlockPointer,17>::ChildEntry,17ul>::operator[](a4, v8)+ 8;
        memcpy(v13, __src, sizeof(v13));
        health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_removeSubtree<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV2 const&)#1}>(a1, v9, v11, v13);
      }
      ++v8;
    }
    while (v8 < *(unsigned __int16 *)(a4 + 408));
  }
  return health::BlockAccessFile::WriteTransaction::freeBlock(*(void *)(*(void *)(a1 + 16) + 24), *a3, a3[1]);
}

uint64_t health::bplustree::Tree<health::BlockAccessFile::WriteTransaction::BPlusTreeConfiguration<double,_HDRawLocationDatumV2>>::_removeLeaf<health::DataStore::MutableSampleHistory<LocationHistoryBehaviorV2>::deleteAllSamples(void)::{lambda(double const&,_HDRawLocationDatumV2 const&)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  bzero(v11, 0x3BAuLL);
  long long v13 = 0u;
  long long v14 = 0u;
  health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(uint64_t **)(v4 + 24), *a2, a2[1], (uint64_t)v11);
  if (v12)
  {
    for (unint64_t i = 0;
          i < v12;
          health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>::ValueEntry,17ul>::operator[]((uint64_t)v11, i++))
    {
      health::StaticArray<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>::ValueEntry,17ul>::operator[]((uint64_t)v11, i);
    }
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *((void *)&v14 + 1);
  uint64_t v7 = v14;
  if (v14 != *(_OWORD *)v6)
  {
    bzero(v15, 0x3BAuLL);
    long long v17 = 0u;
    long long v16 = 0u;
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(uint64_t **)(v6 + 24), v7, v8, (uint64_t)v15);
    long long v16 = v13;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v14, *((uint64_t *)&v14 + 1), (uint64_t)v15);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v7 = *(void *)v6;
  }
  long long v9 = v13;
  if (v13 != __PAIR128__(*(void *)(v6 + 8), v7))
  {
    bzero(v15, 0x3BAuLL);
    long long v17 = 0u;
    long long v16 = 0u;
    health::BlockAccessFile::ReadTransaction::retrieveObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(uint64_t **)(v6 + 24), v9, *((uint64_t *)&v9 + 1), (uint64_t)v15);
    long long v17 = v14;
    health::BlockAccessFile::WriteTransaction::updateObject<health::bplustree::LeafNode<double,_HDRawLocationDatumV2,health::BlockPointer,17>>(*(void *)(*(void *)(a1 + 16) + 24), v13, *((uint64_t *)&v13 + 1), (uint64_t)v15);
    uint64_t v6 = *(void *)(a1 + 16);
  }
  return health::BlockAccessFile::WriteTransaction::freeBlock(*(void *)(v6 + 24), *a2, a2[1]);
}

void *std::__function::__value_func<_HDRawLocationDatumV2 ()(double,_HDRawLocationDatumV2)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F1721868;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1721868;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

void *_ZNSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEclESB_(uint64_t a1, _OWORD *a2)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  long long v3 = a2[3];
  void v10[2] = a2[2];
  void v10[3] = v3;
  long long v4 = a2[5];
  void v10[4] = a2[4];
  v10[5] = v4;
  long long v5 = a2[1];
  v10[0] = *a2;
  v10[1] = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = &unk_1F17218D8;
  v8[1] = v6;
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a1 + 24);
  void v8[4] = v7;
  void v11[3] = v8;
  health::DataStore::SampleHistory<LocationHistoryBehaviorV1>::enumerateSamples(v10, (uint64_t)v11);
  return std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV1 const&)>::~__value_func[abi:ne180100](v11);
}

void sub_1BCFF7944(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV1 const&)>::~__value_func[abi:ne180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEE11target_typeEv()
{
  return &_ZTIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__1;
}

void _ZNSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_NS_9allocatorISD_EEFbRKdSC_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_NS_9allocatorISD_EEFbRKdSC_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F17218D8;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_NS_9allocatorISD_EEFbRKdSC_EE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F17218D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_NS_9allocatorISD_EEFbRKdSC_EEclESH_SC_(uint64_t a1, double *a2, uint64_t a3)
{
  double v5 = *a2;
  **(unsigned char **)(a1 + 32) = 1;
  uint64_t v6 = **(void **)(a1 + 16);
  uint64_t v7 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v5];
  uint64_t v8 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1E5F0]), "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", v7, *(double *)a3, *(double *)(a3 + 8), *(float *)(a3 + 16), *(float *)(a3 + 28), *(float *)(a3 + 32), *(float *)(a3 + 24), *(float *)(a3 + 20));

  long long v9 = *(id **)(a1 + 24);
  if (v9) {
    p_obBOOL j = &obj;
  }
  else {
    p_obBOOL j = 0;
  }
  if (v9) {
    obBOOL j = *v9;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, id *))(v6 + 16))(v6, v8, p_obj);
  if (v9) {
    objc_storeStrong(v9, obj);
  }

  return v11;
}

void sub_1BCFF7B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_NS_9allocatorISD_EEFbRKdSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_NS_9allocatorISD_EEFbRKdSC_EE11target_typeEv()
{
  return &_ZTIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__1clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV1EEEEvT_EUldRK21_HDRawLocationDatumV1E_;
}

void _ZNSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F1721968;
  *(_OWORD *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEE7__cloneEPNS0_6__baseISC_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1721968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

void *_ZNSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEclESB_(uint64_t a1, _OWORD *a2)
{
  void v10[4] = *MEMORY[0x1E4F143B8];
  long long v3 = a2[3];
  void v9[2] = a2[2];
  void v9[3] = v3;
  long long v4 = a2[5];
  void v9[4] = a2[4];
  v9[5] = v4;
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = operator new(0x20uLL);
  *uint64_t v7 = &unk_1F17219D8;
  v7[1] = v6;
  *((_OWORD *)v7 + 1) = *(_OWORD *)(a1 + 24);
  void v10[3] = v7;
  health::DataStore::SampleHistory<LocationHistoryBehaviorV2>::enumerateSamples(v9, (uint64_t)v10);
  return std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV2 const&)>::~__value_func[abi:ne180100](v10);
}

void sub_1BCFF7D0C(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(double const&,_HDRawLocationDatumV2 const&)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2NS_9allocatorIS2_EEFvRKN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEE11target_typeEv()
{
  return &_ZTIZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_E3__2;
}

void _ZNSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_NS_9allocatorISD_EEFbRKdSC_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_NS_9allocatorISD_EEFbRKdSC_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F17219D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_NS_9allocatorISD_EEFbRKdSC_EE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F17219D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + _Block_object_dispose(&STACK[0x230], 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_NS_9allocatorISD_EEFbRKdSC_EEclESH_SC_(uint64_t a1, uint64_t *a2, float *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = **(void **)(a1 + 16);
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  uint64_t v6 = *((void *)a3 + 1);
  uint64_t v21 = *(void *)a3;
  double v7 = a3[7];
  double v8 = a3[4];
  double v9 = a3[8];
  double v10 = a3[5];
  double v11 = a3[9];
  double v12 = a3[6];
  double v13 = a3[10];
  int v14 = *((unsigned __int8 *)a3 + 44);
  int v15 = *MEMORY[0x1E4F1E768];
  obj[0] = 0;
  *(void *)&obj[1] = v21;
  *(void *)&obj[3] = v6;
  *(double *)&obj[5] = v7;
  *(double *)&obj[7] = v8;
  *(double *)&obj[9] = v9;
  *(double *)&obj[11] = v10;
  *(double *)&obj[13] = v11;
  *(double *)&obj[15] = v12;
  *(double *)&obj[17] = v13;
  *(void *)&obj[19] = v4;
  obj[21] = 0;
  unint64_t v23 = 0xBFF0000000000000;
  int v24 = 0;
  int v28 = 0x7FFFFFFF;
  int v29 = v15;
  int v30 = 0;
  int v31 = 0;
  int v32 = v14;
  long long v16 = (void *)[objc_alloc(MEMORY[0x1E4F1E5F0]) initWithClientLocation:obj];
  long long v17 = *(id **)(a1 + 24);
  if (v17) {
    double v18 = obj;
  }
  else {
    double v18 = 0;
  }
  if (v17) {
    *(void *)obBOOL j = *v17;
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void *, _DWORD *))(v5 + 16))(v5, v16, v18);
  if (v17) {
    objc_storeStrong(v17, *(id *)obj);
  }

  return v19;
}

void sub_1BCFF7F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_NS_9allocatorISD_EEFbRKdSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_NS_9allocatorISD_EEFbRKdSC_EE11target_typeEv()
{
  return &_ZTIZZZ90__HDLocationSeriesHFDMigrationEntity__migrateSeriesWithKey_toSQLFromStore_database_error__EUb_ENK3__2clIN6health9DataStore13SampleHistoryI25LocationHistoryBehaviorV2EEEEvT_EUldRK21_HDRawLocationDatumV2E_;
}

void sub_1BCFF8640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF8738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF8898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF8A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF8DAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF8EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF8F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BCFF90CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float std::deque<std::tuple<double,double,float>>::emplace_back<double &,double &,float &>(void *a1, void *a2, void *a3, float *a4)
{
  double v8 = (char *)a1[1];
  double v9 = (char *)a1[2];
  unint64_t v10 = (v9 - v8) >> 3;
  if (v9 == v8) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = 170 * v10 - 1;
  }
  unint64_t v13 = a1[4];
  uint64_t v12 = a1[5];
  unint64_t v14 = v12 + v13;
  if (v11 == v12 + v13)
  {
    if (v13 < 0xAA)
    {
      int v28 = (char *)a1[3];
      uint64_t v29 = (uint64_t)&v28[-*a1];
      if (v10 >= v29 >> 3)
      {
        if (v28 == (char *)*a1) {
          unint64_t v30 = 1;
        }
        else {
          unint64_t v30 = v29 >> 2;
        }
        __int16 v69 = a1 + 3;
        *(void *)&long long v67 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v30);
        *((void *)&v67 + 1) = v67 + 8 * v10;
        *(void *)&long long v68 = *((void *)&v67 + 1);
        *((void *)&v68 + 1) = v67 + 8 * v31;
        long long v66 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v67, &v66);
        for (unint64_t i = (void *)a1[2];
              i != (void *)a1[1];
              std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)&v67, i))
        {
          --i;
        }
        uint64_t v33 = (char *)*a1;
        long long v34 = v68;
        *(_OWORD *)a1 = v67;
        *((_OWORD *)a1 + 1) = v34;
        if (v33) {
          operator delete(v33);
        }
        goto LABEL_36;
      }
      if (v28 != v9)
      {
        *(void *)&long long v67 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v67);
LABEL_36:
        uint64_t v12 = a1[5];
        double v8 = (char *)a1[1];
        unint64_t v14 = a1[4] + v12;
        goto LABEL_37;
      }
      *(void *)&long long v67 = operator new(0xFF0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v67);
      uint64_t v46 = (void *)a1[1];
      double v9 = (char *)a1[2];
      uint64_t v48 = *v46;
      std::string::size_type v47 = (char *)(v46 + 1);
      uint64_t v16 = v48;
      a1[1] = v47;
      if (v9 == (char *)a1[3])
      {
        uint64_t v51 = (uint64_t)&v47[-*a1];
        if ((unint64_t)v47 > *a1)
        {
          uint64_t v52 = v51 >> 3;
          BOOL v20 = v51 >> 3 < -1;
          uint64_t v53 = (v51 >> 3) + 2;
          if (v20) {
            uint64_t v54 = v53;
          }
          else {
            uint64_t v54 = v52 + 1;
          }
          uint64_t v55 = -(v54 >> 1);
          uint64_t v56 = v54 >> 1;
          char v57 = &v47[-8 * v56];
          int64_t v58 = v9 - v47;
          if (v9 != v47)
          {
            memmove(&v47[-8 * v56], v47, v9 - v47);
            std::string::size_type v47 = (char *)a1[1];
          }
          double v9 = &v57[v58];
          uint64_t v27 = &v47[8 * v55];
          goto LABEL_14;
        }
        if (v9 == (char *)*a1) {
          unint64_t v59 = 1;
        }
        else {
          unint64_t v59 = (uint64_t)&v9[-*a1] >> 2;
        }
        uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v59);
        uint64_t v37 = &v36[8 * (v59 >> 2)];
        uint64_t v39 = &v36[8 * v60];
        uint64_t v61 = (uint64_t *)a1[1];
        double v9 = v37;
        uint64_t v62 = a1[2] - (void)v61;
        if (v62)
        {
          double v9 = &v37[v62 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v63 = 8 * (v62 >> 3);
          std::string::size_type v64 = &v36[8 * (v59 >> 2)];
          do
          {
            uint64_t v65 = *v61++;
            *(void *)std::string::size_type v64 = v65;
            v64 += 8;
            v63 -= 8;
          }
          while (v63);
        }
LABEL_32:
        unint64_t v45 = (char *)*a1;
        *a1 = v36;
        a1[1] = v37;
        a1[2] = v9;
        a1[3] = v39;
        if (v45)
        {
          operator delete(v45);
          double v9 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v13 - 170;
      uint64_t v17 = *(void *)v8;
      int v15 = v8 + 8;
      uint64_t v16 = v17;
      a1[1] = v15;
      if (v9 == (char *)a1[3])
      {
        uint64_t v18 = (uint64_t)&v15[-*a1];
        if ((unint64_t)v15 > *a1)
        {
          uint64_t v19 = v18 >> 3;
          BOOL v20 = v18 >> 3 < -1;
          uint64_t v21 = (v18 >> 3) + 2;
          if (v20) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = v19 + 1;
          }
          uint64_t v23 = -(v22 >> 1);
          uint64_t v24 = v22 >> 1;
          uint64_t v25 = &v15[-8 * v24];
          int64_t v26 = v9 - v15;
          if (v9 != v15)
          {
            memmove(&v15[-8 * v24], v15, v9 - v15);
            double v9 = (char *)a1[1];
          }
          uint64_t v27 = &v9[8 * v23];
          double v9 = &v25[v26];
LABEL_14:
          a1[1] = v27;
          a1[2] = v9;
          goto LABEL_35;
        }
        if (v9 == (char *)*a1) {
          unint64_t v35 = 1;
        }
        else {
          unint64_t v35 = (uint64_t)&v9[-*a1] >> 2;
        }
        uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v35);
        uint64_t v37 = &v36[8 * (v35 >> 2)];
        uint64_t v39 = &v36[8 * v38];
        long long v40 = (uint64_t *)a1[1];
        double v9 = v37;
        uint64_t v41 = a1[2] - (void)v40;
        if (v41)
        {
          double v9 = &v37[v41 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v42 = 8 * (v41 >> 3);
          double v43 = &v36[8 * (v35 >> 2)];
          do
          {
            uint64_t v44 = *v40++;
            *(void *)double v43 = v44;
            v43 += 8;
            v42 -= 8;
          }
          while (v42);
        }
        goto LABEL_32;
      }
    }
LABEL_35:
    *(void *)double v9 = v16;
    a1[2] += 8;
    goto LABEL_36;
  }
LABEL_37:
  unint64_t v49 = *(void *)&v8[8 * (v14 / 0xAA)] + 24 * (v14 % 0xAA);
  *(void *)unint64_t v49 = *a2;
  *(void *)(v49 + _Block_object_dispose(&STACK[0x230], 8) = *a3;
  float result = *a4;
  *(float *)(v49 + 16) = *a4;
  a1[5] = v12 + 1;
  return result;
}

void sub_1BCFF94BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__deque_iterator<std::tuple<double,double,float>,std::tuple<double,double,float>*,std::tuple<double,double,float>&,std::tuple<double,double,float>**,long,170l>::operator+=[abi:ne180100](void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      uint64_t v6 = &v2[-(v5 / 0xAA)];
      *float result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *float result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

id HDPredicateForRecordID(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v2 = [NSNumber numberWithLongLong:a1];
  unint64_t v3 = [v1 predicateWithProperty:@"record_id" equalToValue:v2];

  return v3;
}

void sub_1BCFFB738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BCFFB944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__159(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__159(uint64_t a1)
{
}

void sub_1BCFFC2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodableUserDomainConceptPropertyReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 76) |= 8u;
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_66;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_68;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_66:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_68:
          uint64_t v59 = 32;
          goto LABEL_81;
        case 2u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 76) |= 0x20u;
          while (2)
          {
            uint64_t v28 = *v3;
            uint64_t v29 = *(void *)(a2 + v28);
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x230], 8) = v30;
              v20 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v15 = v27++ >= 9;
                if (v15)
                {
                  uint64_t v20 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_72:
          uint64_t v59 = 48;
          goto LABEL_81;
        case 3u:
          *(unsigned char *)(a1 + 76) |= 4u;
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v34 = *(void *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v34 = 0;
          }
          uint64_t v60 = 24;
          goto LABEL_90;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 76) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            uint64_t v38 = *(void *)(a2 + v37);
            unint64_t v39 = v38 + 1;
            if (v38 == -1 || v39 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v39;
              v20 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                BOOL v15 = v36++ >= 9;
                if (v15)
                {
                  uint64_t v20 = 0;
                  goto LABEL_76;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_76:
          uint64_t v59 = 40;
          goto LABEL_81;
        case 5u:
          uint64_t v41 = PBReaderReadString();
          uint64_t v42 = 64;
          goto LABEL_64;
        case 6u:
          *(unsigned char *)(a1 + 76) |= 1u;
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v34 = *(void *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v34 = 0;
          }
          uint64_t v60 = 8;
LABEL_90:
          *(void *)(a1 + v60) = v34;
          continue;
        case 7u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 76) |= 2u;
          while (2)
          {
            uint64_t v47 = *v3;
            uint64_t v48 = *(void *)(a2 + v47);
            unint64_t v49 = v48 + 1;
            if (v48 == -1 || v49 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v49;
              v20 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                BOOL v15 = v46++ >= 9;
                if (v15)
                {
                  uint64_t v20 = 0;
                  goto LABEL_80;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_80:
          uint64_t v59 = 16;
LABEL_81:
          *(void *)(a1 + v59) = v20;
          continue;
        case 8u:
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0;
          *(unsigned char *)(a1 + 76) |= 0x40u;
          break;
        case 9u:
          uint64_t v41 = PBReaderReadData();
          uint64_t v42 = 56;
LABEL_64:
          int64_t v58 = *(void **)(a1 + v42);
          *(void *)(a1 + v42) = v41;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v54 = *v3;
        uint64_t v55 = *(void *)(a2 + v54);
        unint64_t v56 = v55 + 1;
        if (v55 == -1 || v56 > *(void *)(a2 + *v4)) {
          break;
        }
        char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
        *(void *)(a2 + v54) = v56;
        v53 |= (unint64_t)(v57 & 0x7F) << v51;
        if ((v57 & 0x80) == 0) {
          goto LABEL_83;
        }
        v51 += 7;
        BOOL v15 = v52++ >= 9;
        if (v15)
        {
          uint64_t v53 = 0;
          goto LABEL_85;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_83:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v53 = 0;
      }
LABEL_85:
      *(unsigned char *)(a1 + 72) = v53 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableWorkoutStatisticsReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v15 = v9++ >= 9;
          if (v15)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v18 = 0;
              unsigned int v19 = 0;
              uint64_t v20 = 0;
              *(unsigned char *)(a1 + 48) |= 8u;
              break;
            case 2u:
              *(unsigned char *)(a1 + 48) |= 0x10u;
              uint64_t v26 = *v3;
              unint64_t v27 = *(void *)(a2 + v26);
              if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v27);
                *(void *)(a2 + v26) = v27 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v28 = 0;
              }
              uint64_t v35 = 40;
              goto LABEL_52;
            case 3u:
              *(unsigned char *)(a1 + 48) |= 4u;
              uint64_t v29 = *v3;
              unint64_t v30 = *(void *)(a2 + v29);
              if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v30);
                *(void *)(a2 + v29) = v30 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v28 = 0;
              }
              uint64_t v35 = 24;
              goto LABEL_52;
            case 4u:
              *(unsigned char *)(a1 + 48) |= 2u;
              uint64_t v31 = *v3;
              unint64_t v32 = *(void *)(a2 + v31);
              if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v32);
                *(void *)(a2 + v31) = v32 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v28 = 0;
              }
              uint64_t v35 = 16;
              goto LABEL_52;
            case 5u:
              *(unsigned char *)(a1 + 48) |= 1u;
              uint64_t v33 = *v3;
              unint64_t v34 = *(void *)(a2 + v33);
              if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v34);
                *(void *)(a2 + v33) = v34 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v28 = 0;
              }
              uint64_t v35 = 8;
LABEL_52:
              *(void *)(a1 + v35) = v28;
              goto LABEL_53;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_53:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_41;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_43;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_43:
          *(void *)(a1 + 32) = v20;
          goto LABEL_53;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BCFFF000(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

double _HDWorkoutCollectionIntervalForType(void *a1)
{
  uint64_t v1 = [a1 code];
  BOOL v2 = v1 == 179 || v1 == 75;
  double result = 60.0;
  if (!v2) {
    return 0.5;
  }
  return result;
}

uint64_t statistics::QuantityOverlapProcessorState::QuantityOverlapProcessorState(uint64_t this)
{
  *(void *)this = &unk_1F1721AC8;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

{
  *(void *)this = &unk_1F1721AC8;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 60) = 0;
  return this;
}

void statistics::QuantityOverlapProcessorState::~QuantityOverlapProcessorState(statistics::QuantityOverlapProcessorState *this)
{
  *(void *)this = &unk_1F1721AC8;
  BOOL v2 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<statistics::Interval>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = &unk_1F1721AC8;
  BOOL v2 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<statistics::Interval>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
}

{
  void **v2;

  *(void *)this = &unk_1F1721AC8;
  BOOL v2 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<statistics::Interval>>::__destroy_vector::operator()[abi:ne180100](&v2);
  PB::Base::~Base(this);
  MEMORY[0x1C187B8A0]();
}

uint64_t statistics::QuantityOverlapProcessorState::QuantityOverlapProcessorState(uint64_t this, const statistics::QuantityOverlapProcessorState *a2)
{
  *(void *)this = &unk_1F1721AC8;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(_DWORD *)(this + 60) = 0;
  char v2 = *((unsigned char *)a2 + 60);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    char v3 = 2;
    *(unsigned char *)(this + 60) = 2;
    *(void *)(this + 16) = v4;
    char v2 = *((unsigned char *)a2 + 60);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*((unsigned char *)a2 + 60))
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 60) = v3;
    *(void *)(this + _Block_object_dispose(&STACK[0x230], 8) = v5;
    char v2 = *((unsigned char *)a2 + 60);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    *(unsigned char *)(this + 60) = v3 | 4;
    *(void *)(this + 24) = v6;
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5)) {
    operator new();
  }
  if ((*((unsigned char *)a2 + 60) & 8) != 0)
  {
    char v7 = *((unsigned char *)a2 + 56);
    *(unsigned char *)(this + 60) |= 8u;
    *(unsigned char *)(this + 56) = v7;
  }
  return this;
}

void sub_1BCFFF4AC(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  __clang_call_terminate(a1);
}

uint64_t statistics::QuantityOverlapProcessorState::operator=(uint64_t a1, const statistics::QuantityOverlapProcessorState *a2)
{
  if ((const statistics::QuantityOverlapProcessorState *)a1 != a2)
  {
    statistics::QuantityOverlapProcessorState::QuantityOverlapProcessorState((uint64_t)&v10, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v11;
    uint64_t v11 = v3;
    long long v4 = v13;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v4;
    int v7 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    int v16 = v7;
    long long v12 = v5;
    long long v13 = v6;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v14;
    uint64_t v14 = v8;
    LOBYTE(v_Block_object_dispose(&STACK[0x230], 8) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v15;
    char v15 = v8;
    unint64_t v10 = &unk_1F1721AC8;
    BOOL v17 = (void **)&v13;
    std::vector<std::unique_ptr<statistics::Interval>>::__destroy_vector::operator()[abi:ne180100](&v17);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

double statistics::swap(statistics *this, statistics::QuantityOverlapProcessorState *a2, statistics::QuantityOverlapProcessorState *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *((void *)this + 4);
  uint64_t v7 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v7;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  *((void *)a2 + 3) = v5;
  *((void *)a2 + 4) = v6;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v10;
  return result;
}

uint64_t statistics::QuantityOverlapProcessorState::QuantityOverlapProcessorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1721AC8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = (_OWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  std::vector<std::unique_ptr<statistics::Interval>>::__vdeallocate((void **)(a1 + 32));
  *uint64_t v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t statistics::QuantityOverlapProcessorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    statistics::QuantityOverlapProcessorState::QuantityOverlapProcessorState((uint64_t)&v10, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v11;
    uint64_t v11 = v3;
    long long v4 = v13;
    long long v5 = *(_OWORD *)(a1 + 16);
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v4;
    int v7 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v16;
    int v16 = v7;
    long long v12 = v5;
    long long v13 = v6;
    uint64_t v8 = *(void *)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v14;
    uint64_t v14 = v8;
    LOBYTE(v_Block_object_dispose(&STACK[0x230], 8) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v15;
    char v15 = v8;
    uint64_t v10 = &unk_1F1721AC8;
    BOOL v17 = (void **)&v13;
    std::vector<std::unique_ptr<statistics::Interval>>::__destroy_vector::operator()[abi:ne180100](&v17);
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t statistics::QuantityOverlapProcessorState::formatText(statistics::QuantityOverlapProcessorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 60);
  if (v5)
  {
    PB::TextFormatter::format(a2, "anchorTime", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "loggedDuplicatedSample");
  if ((*((unsigned char *)this + 60) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "overlapFunction");
LABEL_5:
  long long v6 = (uint64_t *)*((void *)this + 4);
  int v7 = (uint64_t *)*((void *)this + 5);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, a2, "workingSet");
  }
  if ((*((unsigned char *)this + 60) & 4) != 0) {
    PB::TextFormatter::format(a2, "workingSetCount");
  }

  return MEMORY[0x1F4147498](a2);
}

uint64_t statistics::QuantityOverlapProcessorState::readFrom(statistics::QuantityOverlapProcessorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      do
      {
        if (v3 == v2)
        {
          int v4 = 1;
          *((unsigned char *)a2 + 24) = 1;
          return v4 == 0;
        }
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_25;
        }
        v15 += 7;
        unint64_t v2 = v17;
        BOOL v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      uint64_t result = PB::Reader::skip(a2);
      if (!result) {
        return result;
      }
      goto LABEL_20;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_25:
    if ((v11 & 7) == 4) {
      break;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *((unsigned char *)this + 60) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          do
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              goto LABEL_71;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
          }
          while (!v14);
LABEL_62:
          uint64_t v26 = 0;
          goto LABEL_71;
        }
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v26 = 0;
        if (v22 <= v21) {
          unint64_t v22 = *((void *)a2 + 1);
        }
        while (2)
        {
          if (v22 == v21)
          {
            uint64_t v26 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v48 = v21 + 1;
            char v49 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v48;
            v26 |= (unint64_t)(v49 & 0x7F) << v46;
            if (v49 < 0)
            {
              v46 += 7;
              unint64_t v21 = v48;
              BOOL v14 = v47++ > 8;
              if (v14) {
                goto LABEL_62;
              }
              continue;
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v26 = 0;
            }
          }
          break;
        }
LABEL_71:
        *((void *)this + 2) = v26;
        goto LABEL_20;
      case 2u:
        *((unsigned char *)this + 60) |= 1u;
        unint64_t v41 = *((void *)a2 + 1);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v41);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
        goto LABEL_20;
      case 3u:
        *((unsigned char *)this + 60) |= 4u;
        unint64_t v33 = *((void *)a2 + 1);
        unint64_t v34 = *((void *)a2 + 2);
        uint64_t v35 = *(void *)a2;
        if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
        {
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v38 = 0;
          do
          {
            unint64_t v39 = v33 + 1;
            *((void *)a2 + 1) = v33 + 1;
            char v40 = *(unsigned char *)(v35 + v33);
            v38 |= (unint64_t)(v40 & 0x7F) << v36;
            if ((v40 & 0x80) == 0) {
              goto LABEL_68;
            }
            v36 += 7;
            unint64_t v33 = v39;
            BOOL v14 = v37++ > 8;
          }
          while (!v14);
LABEL_55:
          uint64_t v38 = 0;
          goto LABEL_68;
        }
        char v42 = 0;
        unsigned int v43 = 0;
        uint64_t v38 = 0;
        if (v34 <= v33) {
          unint64_t v34 = *((void *)a2 + 1);
        }
        break;
      case 4u:
        operator new();
      case 5u:
        *((unsigned char *)this + 60) |= 8u;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 >= *((void *)a2 + 2))
        {
          BOOL v32 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v30 = v29 + 1;
          int v31 = *(unsigned __int8 *)(*(void *)a2 + v29);
          *((void *)a2 + 1) = v30;
          BOOL v32 = v31 != 0;
        }
        *((unsigned char *)this + 56) = v32;
        goto LABEL_20;
      default:
        goto LABEL_19;
    }
    while (1)
    {
      if (v34 == v33)
      {
        uint64_t v38 = 0;
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_68;
      }
      unint64_t v44 = v33 + 1;
      char v45 = *(unsigned char *)(v35 + v33);
      *((void *)a2 + 1) = v44;
      v38 |= (unint64_t)(v45 & 0x7F) << v42;
      if ((v45 & 0x80) == 0) {
        break;
      }
      v42 += 7;
      unint64_t v33 = v44;
      BOOL v14 = v43++ > 8;
      if (v14) {
        goto LABEL_55;
      }
    }
    if (*((unsigned char *)a2 + 24)) {
      uint64_t v38 = 0;
    }
LABEL_68:
    *((void *)this + 3) = v38;
LABEL_20:
    unint64_t v2 = *((void *)a2 + 1);
    unint64_t v3 = *((void *)a2 + 2);
    int v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  int v4 = 0;
  return v4 == 0;
}

void sub_1BCFFFE04(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t statistics::QuantityOverlapProcessorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 60);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 60) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    this = PB::Writer::write(a2, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 60) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2);
  char v4 = *(unsigned char *)(v3 + 60);
  if (v4) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v4 & 4) != 0) {
LABEL_4:
  }
    this = PB::Writer::writeVarInt(a2);
LABEL_5:
  char v5 = *(const PB::Base ***)(v3 + 32);
  long long v6 = *(const PB::Base ***)(v3 + 40);
  while (v5 != v6)
  {
    int v7 = *v5++;
    this = PB::Writer::writeSubmessage(a2, v7);
  }
  if ((*(unsigned char *)(v3 + 60) & 8) != 0)
  {
    return PB::Writer::write(a2);
  }
  return this;
}

BOOL statistics::QuantityOverlapProcessorState::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 60) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 2) == 0 || *(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 2) != 0)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 60))
  {
    if ((*(unsigned char *)(a2 + 60) & 1) == 0 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 60))
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 60) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 60) & 4) == 0 || *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 60) & 4) != 0)
  {
    return 0;
  }
  BOOL result = PB::PtrVector<statistics::QuantitySampleAttenuationEngineSample>::operator==((uint64_t *)(a1 + 32), a2 + 32);
  if (result)
  {
    BOOL result = (*(unsigned char *)(a2 + 60) & 8) == 0;
    if ((*(unsigned char *)(a1 + 60) & 8) != 0) {
      return (*(unsigned char *)(a2 + 60) & 8) != 0 && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
    }
  }
  return result;
}

BOOL PB::PtrVector<statistics::QuantitySampleAttenuationEngineSample>::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *(uint64_t **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  uint64_t v5 = v2 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = statistics::QuantitySampleAttenuationEngineSample::operator==(*(void *)(v5 - 8), v6);
    BOOL v8 = !result || v5 == v3;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t statistics::QuantityOverlapProcessorState::hash_value(statistics::QuantityOverlapProcessorState *this)
{
  char v2 = *((unsigned char *)this + 60);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)this + 2);
    if (*((unsigned char *)this + 60))
    {
LABEL_3:
      if (*((double *)this + 1) == 0.0) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = *((void *)this + 1);
      }
      if ((*((unsigned char *)this + 60) & 4) != 0) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (*((unsigned char *)this + 60)) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 60) & 4) != 0)
  {
LABEL_7:
    uint64_t v5 = *((void *)this + 3);
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v5 = 0;
LABEL_11:
  uint64_t v6 = (statistics::QuantitySampleAttenuationEngineSample **)*((void *)this + 4);
  int v7 = (statistics::QuantitySampleAttenuationEngineSample **)*((void *)this + 5);
  if (v6 != v7)
  {
    uint64_t v8 = 0;
    do
    {
      char v9 = *v6++;
      v8 ^= statistics::QuantitySampleAttenuationEngineSample::hash_value(v9);
    }
    while (v6 != v7);
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v10 = *((unsigned __int8 *)this + 56);
    return v4 ^ v3 ^ v10 ^ v5 ^ v8;
  }
  uint64_t v8 = 0;
  if ((*((unsigned char *)this + 60) & 8) != 0) {
    goto LABEL_17;
  }
LABEL_15:
  uint64_t v10 = 0;
  return v4 ^ v3 ^ v10 ^ v5 ^ v8;
}

uint64_t HDCloudSyncCodableAttachmentReferenceTombstoneReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 100)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v24;
      }
      else
      {
        if (v18 == 2)
        {
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 24;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 16;
        }
        unint64_t v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BD000F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BD001200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__160(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__160(uint64_t a1)
{
}

void sub_1BD001724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BD001A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDCodablePauseRingsScheduleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v21 |= (unint64_t)(v29 & 0x7F) << v25;
          if ((v29 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_47:
        uint64_t v31 = 16;
LABEL_48:
        *(void *)(a1 + v31) = v21;
        goto LABEL_49;
      }
      if (v17 == 1)
      {
        unint64_t v18 = objc_alloc_init(HDCodableSample);
        objc_storeStrong((id *)(a1 + 24), v18);
        if (!PBReaderPlaceMark() || (HDCodableSampleReadFrom((uint64_t)v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
LABEL_49:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    *(unsigned char *)(a1 + 32) |= 1u;
    while (1)
    {
      uint64_t v22 = *v3;
      unint64_t v23 = *(void *)(a2 + v22);
      if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
      *(void *)(a2 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0) {
        goto LABEL_41;
      }
      v19 += 7;
      BOOL v14 = v20++ >= 9;
      if (v14)
      {
        uint64_t v21 = 0;
        goto LABEL_43;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v21 = 0;
    }
LABEL_43:
    uint64_t v31 = 8;
    goto LABEL_48;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDCodableDateComponentsReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_123;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_125;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_123:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_125:
          uint64_t v92 = 16;
          goto LABEL_178;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x1000u;
          while (2)
          {
            uint64_t v26 = *v3;
            unint64_t v27 = *(void *)(a2 + v26);
            if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
              *(void *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_129:
          uint64_t v92 = 104;
          goto LABEL_178;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x10u;
          while (2)
          {
            uint64_t v31 = *v3;
            unint64_t v32 = *(void *)(a2 + v31);
            if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v32 + 1;
              v19 |= (unint64_t)(v33 & 0x7F) << v29;
              if (v33 < 0)
              {
                v29 += 7;
                BOOL v14 = v30++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_133:
          uint64_t v92 = 40;
          goto LABEL_178;
        case 4u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 1u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v19 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v14 = v35++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_137:
          uint64_t v92 = 8;
          goto LABEL_178;
        case 5u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 4u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v19 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v14 = v40++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_141:
          uint64_t v92 = 24;
          goto LABEL_178;
        case 6u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 8u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v19 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v14 = v45++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_145:
          uint64_t v92 = 32;
          goto LABEL_178;
        case 7u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x80u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v19 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v14 = v50++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_149:
          uint64_t v92 = 64;
          goto LABEL_178;
        case 8u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x400u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v19 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v14 = v55++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_153;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_153:
          uint64_t v92 = 88;
          goto LABEL_178;
        case 9u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x800u;
          while (2)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v19 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v14 = v60++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_157;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_157:
          uint64_t v92 = 96;
          goto LABEL_178;
        case 0xAu:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x40u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v7) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v19 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                BOOL v14 = v65++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_161;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_161:
          uint64_t v92 = 56;
          goto LABEL_178;
        case 0xBu:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x100u;
          while (2)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v72);
              *(void *)(a2 + v71) = v72 + 1;
              v19 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v14 = v70++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_165;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_165:
          uint64_t v92 = 72;
          goto LABEL_178;
        case 0xCu:
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x200u;
          while (2)
          {
            uint64_t v76 = *v3;
            unint64_t v77 = *(void *)(a2 + v76);
            if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v78 = *(unsigned char *)(*(void *)(a2 + *v7) + v77);
              *(void *)(a2 + v76) = v77 + 1;
              v19 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                BOOL v14 = v75++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_169;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_169:
          uint64_t v92 = 80;
          goto LABEL_178;
        case 0xDu:
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x2000u;
          while (2)
          {
            uint64_t v81 = *v3;
            unint64_t v82 = *(void *)(a2 + v81);
            if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v83 = *(unsigned char *)(*(void *)(a2 + *v7) + v82);
              *(void *)(a2 + v81) = v82 + 1;
              v19 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                BOOL v14 = v80++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_173:
          uint64_t v92 = 112;
          goto LABEL_178;
        case 0xEu:
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v19 = 0;
          *(_WORD *)(a1 + 136) |= 0x20u;
          break;
        case 0xFu:
          uint64_t v89 = PBReaderReadString();
          uint64_t v90 = 120;
          goto LABEL_121;
        case 0x10u:
          uint64_t v89 = PBReaderReadString();
          uint64_t v90 = 128;
LABEL_121:
          std::string v91 = *(void **)(a1 + v90);
          *(void *)(a1 + v90) = v89;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v86 = *v3;
        unint64_t v87 = *(void *)(a2 + v86);
        if (v87 == -1 || v87 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v88 = *(unsigned char *)(*(void *)(a2 + *v7) + v87);
        *(void *)(a2 + v86) = v87 + 1;
        v19 |= (unint64_t)(v88 & 0x7F) << v84;
        if ((v88 & 0x80) == 0) {
          goto LABEL_175;
        }
        v84 += 7;
        BOOL v14 = v85++ >= 9;
        if (v14)
        {
          uint64_t v19 = 0;
          goto LABEL_177;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_175:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v19 = 0;
      }
LABEL_177:
      uint64_t v92 = 48;
LABEL_178:
      *(void *)(a1 + v92) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BD005C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t HDSyncAnchorMapIsSuperset(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v11 = 0;
  unint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  char v14 = 1;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  void v8[2] = __HDSyncAnchorMapIsSuperset_block_invoke;
  v8[3] = &unk_1E63084E8;
  id v5 = v4;
  id v9 = v5;
  unint64_t v10 = &v11;
  [v3 enumerateAnchorsAndEntityIdentifiersWithBlock:v8];
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1BD006450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __HDSyncAnchorMapIsSuperset_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = [*(id *)(a1 + 32) anchorForSyncEntityIdentifier:a2];
  if (result < a3)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t HDSyncAnchorMapIsEquivalent(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (HDSyncAnchorMapIsSuperset(v3, v4)) {
    uint64_t IsSuperset = HDSyncAnchorMapIsSuperset(v4, v3);
  }
  else {
    uint64_t IsSuperset = 0;
  }

  return IsSuperset;
}

BOOL HDCodableSyncStateReadFrom(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 1;
        goto LABEL_25;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 2;
LABEL_25:
        uint64_t v19 = (HDCodableSyncVersionRange *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_32;
      case 3u:
        uint64_t v19 = objc_alloc_init(HDCodableSyncVersionRange);
        objc_storeStrong(a1 + 4, v19);
        if (!PBReaderPlaceMark() || !HDCodableSyncVersionRangeReadFrom((uint64_t)v19, a2)) {
          goto LABEL_39;
        }
        goto LABEL_31;
      case 4u:
        uint64_t v19 = objc_alloc_init(HDCodableSyncStateOrigin);
        objc_storeStrong(a1 + 3, v19);
        if PBReaderPlaceMark() && (HDCodableSyncStateOriginReadFrom((uint64_t)v19, a2)) {
          goto LABEL_31;
        }
        goto LABEL_39;
      default:
        if ((v10 >> 3) != 100)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_33:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
        uint64_t v19 = objc_alloc_init(HDCodableSyncStateVersionedData);
        [a1 addVersionedData:v19];
        if PBReaderPlaceMark() && (HDCodableSyncStateVersionedDataReadFrom((uint64_t)v19, a2))
        {
LABEL_31:
          PBReaderRecallMark();
LABEL_32:

          goto LABEL_33;
        }
LABEL_39:

        return 0;
    }
  }
}

void sub_1BD007A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BD007B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BD0081E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _IdentifierStringsFromSensorDatum(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    char v2 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v1, "recordID"));
  }
  else
  {
    char v2 = 0;
  }
  if (objc_opt_respondsToSelector())
  {
    id v3 = [v1 sourceId];
  }
  else
  {
    id v3 = 0;
  }
  id v4 = [NSString stringWithFormat:@"(%@,%@)", v2, v3];

  return v4;
}

id HDUserDomainConceptPropertyEntityPredicateForPropertiesWithType(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)MEMORY[0x1E4F65D00];
  id v4 = [NSNumber numberWithInteger:a1];
  id v5 = [v3 predicateWithProperty:@"property_type" value:v4 comparisonType:a2];

  return v5;
}

void sub_1BD00E400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BD00EEB4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1BD010704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)HDFileArchiver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1BD010824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD010A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD01109C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t metadata_filter()
{
  if (archive_read_disk_can_descend()) {
    archive_read_disk_descend();
  }
  return 1;
}

void sub_1BD0113C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    id v4 = (char *)a1[1];
    id v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1BD0114EC(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x230], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t HDCloudSyncCodableAttachmentReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((int)(v10 >> 3) <= 19)
      {
        switch((int)v18)
        {
          case 1:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 56;
            goto LABEL_45;
          case 2:
            char v21 = 0;
            unsigned int v22 = 0;
            uint64_t v23 = 0;
            *(unsigned char *)(a1 + 96) |= 2u;
            break;
          case 3:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 72;
            goto LABEL_45;
          case 4:
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 48;
            goto LABEL_45;
          case 5:
            *(unsigned char *)(a1 + 96) |= 1u;
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
            {
              uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x230], 8) = v29 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              uint64_t v30 = 0;
            }
            *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v30;
            continue;
          case 6:
            uint64_t v19 = PBReaderReadData();
            uint64_t v20 = 64;
            goto LABEL_45;
          default:
            goto LABEL_48;
        }
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
            break;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            goto LABEL_51;
          }
          v21 += 7;
          BOOL v15 = v22++ >= 9;
          if (v15)
          {
            uint64_t v23 = 0;
            goto LABEL_53;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_51:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_53:
        *(void *)(a1 + 16) = v23;
        continue;
      }
      if ((int)v18 <= 99)
      {
        if (v18 == 20)
        {
          uint64_t v19 = PBReaderReadData();
          uint64_t v20 = 24;
          goto LABEL_45;
        }
        if (v18 == 30)
        {
          uint64_t v19 = PBReaderReadData();
          uint64_t v20 = 40;
          goto LABEL_45;
        }
      }
      else
      {
        switch(v18)
        {
          case 'd':
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 88;
            goto LABEL_45;
          case 'e':
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 80;
            goto LABEL_45;
          case 'f':
            uint64_t v19 = PBReaderReadString();
            uint64_t v20 = 32;
LABEL_45:
            uint64_t v31 = *(void **)(a1 + v20);
            *(void *)(a1 + v20) = v19;

            continue;
        }
      }
LABEL_48:
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1BD013770(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL HDCodableSyncVersionRangeReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            uint64_t v24 = &OBJC_IVAR___HDCodableSyncVersionRange__minimum;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            uint64_t v24 = &OBJC_IVAR___HDCodableSyncVersionRange__minimum;
            goto LABEL_41;
          }
        }
        uint64_t v24 = &OBJC_IVAR___HDCodableSyncVersionRange__minimum;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        uint64_t v24 = &OBJC_IVAR___HDCodableSyncVersionRange__current;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        uint64_t v24 = &OBJC_IVAR___HDCodableSyncVersionRange__current;
        goto LABEL_41;
      }
    }
    uint64_t v24 = &OBJC_IVAR___HDCodableSyncVersionRange__current;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t HDStatisticsPercentiles::applyMaskToSample(uint64_t result, double **a2)
{
  char v2 = *a2;
  id v3 = a2[1];
  if (*a2 != v3)
  {
    double v4 = *(double *)(result + 8);
    while (v4 >= *v2)
    {
      if (v4 < v2[1])
      {
        *(unsigned char *)(result + 32) = 0;
        return result;
      }
      v2 += 2;
      if (v2 == v3) {
        return result;
      }
    }
  }
  return result;
}

void HDStatisticsPercentiles::addSample(HDStatisticsPercentiles *this, const HDRawQuantitySample *a2)
{
  double v4 = (char *)this + 16;
  unint64_t v5 = *((void *)this + 2);
  uint64_t v6 = (double *)*((void *)this + 1);
  if ((unint64_t)v6 >= v5)
  {
    char v8 = *(double **)this;
    uint64_t v9 = ((uint64_t)v6 - *(void *)this) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<statistics::Interval>>>((uint64_t)v4, v12);
      char v8 = *(double **)this;
      uint64_t v6 = (double *)*((void *)this + 1);
    }
    else
    {
      char v13 = 0;
    }
    char v14 = (double *)&v13[8 * v9];
    int v15 = &v13[8 * v12];
    double *v14 = a2->var0;
    int v7 = v14 + 1;
    while (v6 != v8)
    {
      uint64_t v16 = *((void *)v6-- - 1);
      *((void *)v14-- - 1) = v16;
    }
    *(void *)this = v14;
    *((void *)this + 1) = v7;
    *((void *)this + 2) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = a2->var0;
    int v7 = v6 + 1;
  }
  *((void *)this + 1) = v7;
}

__n128 HDStatisticsPercentiles::updateMostRecentSample(__n128 *this, const HDRawQuantitySample *a2)
{
  if (!this[4].n128_u8[0] || (result.n128_u64[0] = this[2].n128_u64[1], result.n128_f64[0] <= a2->var1))
  {
    __n128 result = *(__n128 *)&a2->var0;
    __n128 v3 = *(__n128 *)&a2->var2;
    this[4].n128_u16[0] = *(_WORD *)&a2->var4;
    this[2] = result;
    this[3] = v3;
  }
  return result;
}

void HDStatisticsPercentiles::configure(HDStatisticsPercentiles *this, HDStatisticsPercentileConfiguration *a2)
{
  id v4 = [(HDStatisticsPercentileConfiguration *)a2 percentile];
  [v4 doubleValue];
  *((void *)this + 3) = v3;
}

void sub_1BD014294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

double HDStatisticsPercentiles::calculatePercentileValue(HDStatisticsPercentiles *this)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = (double *)*((void *)this + 1);
  unint64_t v5 = ((unint64_t)v3 - v2) >> 3;
  double result = 0.0;
  if (v5)
  {
    double v7 = *((double *)this + 3);
    if (v7 != 0.0)
    {
      uint64_t v8 = (int)vcvtmd_s64_f64(v7 * (double)(int)v5);
      uint64_t v9 = (double *)(v2 + 8 * v8);
      if (v9 != v3)
      {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v2, v9, v3);
        uint64_t v2 = *(void *)this;
      }
      return *(double *)(v2 + 8 * v8);
    }
  }
  return result;
}

void HDStatisticsPercentiles::unarchive(HDStatisticsPercentiles *this, const statistics::Statistics *a2)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unarchiving percentile statistics is not currently supported.");
  __cxa_throw(exception, (struct type_info *)off_1E62F22C8, MEMORY[0x1E4FBA1E8]);
}

void sub_1BD014364(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void HDStatisticsPercentiles::archive(HDStatisticsPercentiles *this)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "archiving percentile statistics is not currently supported.");
  __cxa_throw(exception, (struct type_info *)off_1E62F22C8, MEMORY[0x1E4FBA1E8]);
}

void sub_1BD0143C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(uint64_t result, double *a2, double *a3)
{
  if (a3 != a2)
  {
    uint64_t v3 = a3;
    unint64_t v5 = (double *)result;
    do
    {
      unint64_t v6 = v3 - v5;
      if (v6 < 2) {
        break;
      }
      if (v6 == 3)
      {
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v5, v5 + 1, v3 - 1);
      }
      if (v6 == 2)
      {
        double v33 = *(v3 - 1);
        double v34 = *v5;
        if (v33 < *v5)
        {
          double *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
      {
        while (v5 != v3 - 1)
        {
          unsigned int v35 = v5++;
          if (v35 != v3 && v5 != v3)
          {
            double v36 = *v35;
            double v37 = *v35;
            char v38 = v5;
            char v39 = v35;
            unsigned int v40 = v5;
            do
            {
              double v41 = *v40++;
              double v42 = v41;
              if (v41 < v37)
              {
                double v37 = v42;
                char v39 = v38;
              }
              char v38 = v40;
            }
            while (v40 != v3);
            if (v39 != v35)
            {
              *unsigned int v35 = *v39;
              *char v39 = v36;
            }
          }
        }
        return result;
      }
      double v7 = &v5[v6 >> 1];
      uint64_t v8 = v3 - 1;
      double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(v5, v7, v3 - 1);
      double v9 = *v5;
      if (*v5 >= *v7)
      {
        unint64_t v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            double *v5 = *v10;
            double *v10 = v9;
            double result = (result + 1);
            goto LABEL_13;
          }
        }
        char v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            double v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              double *v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8) {
          return result;
        }
        while (1)
        {
          double v27 = *v5;
          do
          {
            double v28 = *v22++;
            double v29 = v28;
          }
          while (v27 >= v28);
          uint64_t v30 = v22 - 1;
          do
          {
            double v31 = *--v8;
            double v32 = v31;
          }
          while (v27 < v31);
          if (v30 >= v8) {
            break;
          }
          *uint64_t v30 = v32;
          double *v8 = v29;
        }
        unint64_t v5 = v22 - 1;
        if (v30 > a2) {
          return result;
        }
      }
      else
      {
        unint64_t v10 = v3 - 1;
LABEL_13:
        uint64_t v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          uint64_t v16 = v5 + 1;
        }
        else
        {
          unint64_t v12 = v5 + 1;
          while (1)
          {
            double v13 = *v7;
            do
            {
              double v14 = *v12++;
              double v15 = v14;
            }
            while (v14 < v13);
            uint64_t v16 = v12 - 1;
            do
            {
              double v17 = *--v10;
              double v18 = v17;
            }
            while (v17 >= v13);
            if (v16 >= v10) {
              break;
            }
            double *v16 = v18;
            double *v10 = v15;
            double result = (result + 1);
            if (v16 == v7) {
              double v7 = v10;
            }
          }
        }
        if (v16 != v7)
        {
          double v19 = *v16;
          if (*v7 < *v16)
          {
            double *v16 = *v7;
            *double v7 = v19;
            double result = (result + 1);
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!result)
        {
          if (v16 <= a2)
          {
            uint64_t v24 = v16 + 1;
            while (v24 != v3)
            {
              double v26 = *(v24 - 1);
              double v25 = *v24++;
              if (v25 < v26) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v11 != v16)
            {
              double v21 = *(v11 - 1);
              double v20 = *v11++;
              if (v20 < v21) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          unint64_t v5 = v16 + 1;
        }
        else {
          uint64_t v3 = v16;
        }
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<double *>>(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a1;
  double v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    double v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

void sub_1BD014BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BD016470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__161(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__161(uint64_t a1)
{
}

void sub_1BD016794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BD016FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BD0171D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BD017570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1BD0177FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BD017A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1BD017CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1BD019474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id HDFitnessFriendWorkoutEntityEntityPredicateForFriendUUID()
{
  uint64_t v0 = (void *)MEMORY[0x1E4F65D00];
  uint64_t v1 = _HDSQLiteValueForUUID();
  uint64_t v2 = [v0 predicateWithProperty:@"friend_uuid" equalToValue:v1];

  return v2;
}

uint64_t HDCodableWorkoutActivityReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  double v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        double v19 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = v18;

        goto LABEL_47;
      case 2u:
        double v21 = objc_alloc_init(HDCodableWorkoutConfiguration);
        objc_storeStrong((id *)(a1 + 32), v21);
        if (!PBReaderPlaceMark() || (HDCodableWorkoutConfigurationReadFrom((uint64_t)v21, a2) & 1) == 0) {
          goto LABEL_49;
        }
        goto LABEL_39;
      case 3u:
        *(unsigned char *)(a1 + 64) |= 4u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v29 = 24;
        goto LABEL_46;
      case 4u:
        *(unsigned char *)(a1 + 64) |= 2u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v29 = 16;
        goto LABEL_46;
      case 5u:
        double v21 = objc_alloc_init(HDCodableMetadataDictionary);
        objc_storeStrong((id *)(a1 + 40), v21);
        if (!PBReaderPlaceMark() || (HDCodableMetadataDictionaryReadFrom(v21, a2) & 1) == 0) {
          goto LABEL_49;
        }
        goto LABEL_39;
      case 6u:
        *(unsigned char *)(a1 + 64) |= 1u;
        uint64_t v27 = *v3;
        unint64_t v28 = *(void *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        uint64_t v29 = 8;
LABEL_46:
        *(void *)(a1 + v29) = v24;
        goto LABEL_47;
      case 7u:
        double v21 = objc_alloc_init(HDCodableWorkoutStatistics);
        [(id)a1 addStatistics:v21];
        if PBReaderPlaceMark() && (HDCodableWorkoutStatisticsReadFrom((uint64_t)v21, a2))
        {
LABEL_39:
          PBReaderRecallMark();

LABEL_47:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_49:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_47;
    }
  }
}

uint64_t HDCodableMedicalIDConditionReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  double v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    double v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id HDQuantitySeriesDataEntityAllProperties()
{
  v2[4] = *MEMORY[0x1E4F143B8];
  v2[0] = @"series_identifier";
  v2[1] = @"timestamp";
  v2[2] = @"value";
  v2[3] = @"duration";
  uint64_t v0 = [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:4];

  return v0;
}

void sub_1BD0217A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__162(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__162(uint64_t a1)
{
}

void sub_1BD02199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _HKStatisticsComputationMethodForQuantityType(void *a1, uint64_t a2)
{
  id v3 = a1;
  if ((_HKStatisticOptionsAverageSampleDuration() & a2) != 0)
  {
    uint64_t v4 = 6;
  }
  else if ((_HKStatisticsOptionPercentile() & a2) != 0)
  {
    uint64_t v4 = 7;
  }
  else if ((_HKStatisticsOptionPresence() & a2) != 0)
  {
    uint64_t v4 = 8;
  }
  else if ((_HKStatisticsOptionSleepStages() & a2) != 0)
  {
    uint64_t v4 = 9;
  }
  else
  {
    unint64_t v5 = [v3 aggregationStyle];
    if (v5 > 3) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = qword_1BD33F520[v5];
    }
  }

  return v4;
}

void sub_1BD023900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD0239B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD0246B0(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v6, 0x10F1C40A18ECEBDLL);

  _Unwind_Resume(a1);
}

void sub_1BD024BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD024C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD024EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1BD0250D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v15;
  objc_destroyWeak(v17);

  objc_destroyWeak((id *)(v16 - 40));
  _Unwind_Resume(a1);
}

void sub_1BD025180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BD0252C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD0253DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1BD025678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BD025848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD025924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD0259A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD025A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BD025B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_1BD026BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void **a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a2, a3, a4, a6);
  uint64_t v11 = *a4;
  unint64_t v12 = *a6;
  char v13 = [NSNumber numberWithLongLong:*a5];
  unint64_t v14 = [v12 indexOfObject:v13];
  int v15 = *a6;
  uint64_t v16 = [NSNumber numberWithLongLong:v11];
  unint64_t v17 = [v15 indexOfObject:v16];

  if (v14 < v17)
  {
    uint64_t v18 = *a4;
    *a4 = *a5;
    *a5 = v18;
    uint64_t v19 = *a3;
    double v20 = *a6;
    double v21 = [NSNumber numberWithLongLong:*a4];
    unint64_t v22 = [v20 indexOfObject:v21];
    unint64_t v23 = *a6;
    uint64_t v24 = [NSNumber numberWithLongLong:v19];
    unint64_t v25 = [v23 indexOfObject:v24];

    if (v22 < v25)
    {
      uint64_t v26 = *a3;
      *a3 = *a4;
      *a4 = v26;
      uint64_t v27 = *a2;
      unint64_t v28 = *a6;
      uint64_t v29 = [NSNumber numberWithLongLong:*a3];
      unint64_t v30 = [v28 indexOfObject:v29];
      double v31 = *a6;
      double v32 = [NSNumber numberWithLongLong:v27];
      unint64_t v33 = [v31 indexOfObject:v32];

      if (v30 < v33)
      {
        uint64_t v34 = *a2;
        *a2 = *a3;
        *a3 = v34;
        uint64_t v35 = *a1;
        double v36 = *a6;
        double v37 = [NSNumber numberWithLongLong:*a2];
        unint64_t v38 = [v36 indexOfObject:v37];
        char v39 = *a6;
        unsigned int v40 = [NSNumber numberWithLongLong:v35];
        unint64_t v41 = [v39 indexOfObject:v40];

        if (v38 < v41)
        {
          uint64_t v42 = *a1;
          *a1 = *a2;
          *a2 = v42;
        }
      }
    }
  }
}

void sub_1BD026F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, void **a4)
{
  uint64_t v8 = *a1;
  unsigned int v9 = *a4;
  unint64_t v10 = [NSNumber numberWithLongLong:*a2];
  unint64_t v11 = [v9 indexOfObject:v10];
  unint64_t v12 = *a4;
  char v13 = [NSNumber numberWithLongLong:v8];
  unint64_t v14 = [v12 indexOfObject:v13];

  uint64_t v15 = *a2;
  uint64_t v16 = *a4;
  unint64_t v17 = [NSNumber numberWithLongLong:*a3];
  if (v11 >= v14)
  {
    unint64_t v23 = [v16 indexOfObject:v17];
    uint64_t v24 = *a4;
    unint64_t v25 = [NSNumber numberWithLongLong:v15];
    unint64_t v26 = [v24 indexOfObject:v25];

    if (v23 < v26)
    {
      uint64_t v27 = *a2;
      *a2 = *a3;
      *a3 = v27;
      uint64_t v28 = *a1;
      uint64_t v29 = *a4;
      unint64_t v30 = [NSNumber numberWithLongLong:*a2];
      unint64_t v31 = [v29 indexOfObject:v30];
      double v32 = *a4;
      unint64_t v33 = [NSNumber numberWithLongLong:v28];
      unint64_t v34 = [v32 indexOfObject:v33];

      if (v31 < v34)
      {
        uint64_t v35 = *a1;
        *a1 = *a2;
        *a2 = v35;
      }
    }
  }
  else
  {
    unint64_t v18 = [v16 indexOfObject:v17];
    uint64_t v19 = *a4;
    double v20 = [NSNumber numberWithLongLong:v15];
    unint64_t v21 = [v19 indexOfObject:v20];

    uint64_t v22 = *a1;
    if (v18 >= v21)
    {
      *a1 = *a2;
      *a2 = v22;
      double v36 = *a4;
      double v37 = [NSNumber numberWithLongLong:*a3];
      unint64_t v38 = [v36 indexOfObject:v37];
      char v39 = *a4;
      unsigned int v40 = [NSNumber numberWithLongLong:v22];
      unint64_t v41 = [v39 indexOfObject:v40];

      if (v38 < v41)
      {
        uint64_t v42 = *a2;
        *a2 = *a3;
        *a3 = v42;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v22;
    }
  }
}

void sub_1BD027200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(uint64_t *a1, uint64_t *a2, void **a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *a1;
      unsigned int v9 = *a3;
      unint64_t v10 = [NSNumber numberWithLongLong:*(a2 - 1)];
      unint64_t v11 = [v9 indexOfObject:v10];
      unint64_t v12 = *a3;
      char v13 = [NSNumber numberWithLongLong:v8];
      unint64_t v14 = [v12 indexOfObject:v13];

      if (v11 < v14)
      {
        uint64_t v15 = *a1;
        *a1 = *(v4 - 1);
        *(v4 - 1) = v15;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v16 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a1 + 1, a1 + 2, a3);
      unint64_t v17 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      uint64_t v18 = 0;
      int v37 = 0;
      uint64_t v35 = v4;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v16;
    double v20 = *a3;
    unint64_t v21 = [NSNumber numberWithLongLong:*v17];
    unint64_t v22 = [v20 indexOfObject:v21];
    unint64_t v23 = *a3;
    uint64_t v24 = [NSNumber numberWithLongLong:v19];
    unint64_t v25 = [v23 indexOfObject:v24];

    if (v22 < v25)
    {
      uint64_t v26 = *v17;
      uint64_t v36 = v18;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16) {
          break;
        }
        uint64_t v27 = *(uint64_t *)((char *)a1 + v18 + 8);
        uint64_t v28 = *a3;
        uint64_t v29 = [NSNumber numberWithLongLong:v26];
        unint64_t v30 = [v28 indexOfObject:v29];
        unint64_t v31 = *a3;
        double v32 = [NSNumber numberWithLongLong:v27];
        unint64_t v33 = [v31 indexOfObject:v32];

        v18 -= 8;
        if (v30 >= v33)
        {
          unint64_t v34 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_13;
        }
      }
      unint64_t v34 = a1;
LABEL_13:
      uint64_t *v34 = v26;
      ++v37;
      uint64_t v4 = v35;
      uint64_t v18 = v36;
      if (v37 == 8) {
        return v17 + 1 == v35;
      }
    }
    uint64_t v16 = v17;
    v18 += 8;
    if (++v17 == v4) {
      return 1;
    }
  }
}

void sub_1BD02750C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void **a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[HDStatisticsCollectionCalculator orderSourceIDs:]::$_0 &,long long *>(a1, a2, a3, a5);
  uint64_t v10 = *a3;
  unint64_t v11 = *a5;
  unint64_t v12 = [NSNumber numberWithLongLong:*a4];
  unint64_t v13 = [v11 indexOfObject:v12];
  unint64_t v14 = *a5;
  uint64_t v15 = [NSNumber numberWithLongLong:v10];
  unint64_t v16 = [v14 indexOfObject:v15];

  if (v13 < v16)
  {
    uint64_t v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    uint64_t v18 = *a2;
    uint64_t v19 = *a5;
    double v20 = [NSNumber numberWithLongLong:*a3];
    unint64_t v21 = [v19 indexOfObject:v20];
    unint64_t v22 = *a5;
    unint64_t v23 = [NSNumber numberWithLongLong:v18];
    unint64_t v24 = [v22 indexOfObject:v23];

    if (v21 < v24)
    {
      uint64_t v25 = *a2;
      *a2 = *a3;
      *a3 = v25;
      uint64_t v26 = *a1;
      uint64_t v27 = *a5;
      uint64_t v28 = [NSNumber numberWithLongLong:*a2];
      unint64_t v29 = [v27 indexOfObject:v28];
      unint64_t v30 = *a5;
      unint64_t v31 = [NSNumber numberWithLongLong:v26];
      unint64_t v32 = [v30 indexOfObject:v31];

      if (v29 < v32)
      {
        uint64_t v33 = *a1;
        *a1 = *a2;
        *a2 = v33;
      }
    }
  }
}

void sub_1BD027718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1721C58;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 96) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 60_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_WORD *)(a1 + 640) = 1;
  *(unsigned char *)(a1 + 642) = 0;
  *(unsigned char *)(a1 + 644) = 0;
  *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 68_Block_object_dispose(&STACK[0x230], 8) = 0;
  return a1;
}

uint64_t _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a5;
  id v13 = a6;
  *(void *)a1 = &unk_1F1721D38;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 16) = [v11 copy];
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = [v12 copy];
  objc_initWeak((id *)(a1 + 48), v13);

  return a1;
}

void sub_1BD0278C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  _Unwind_Resume(a1);
}

void _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation(_HDStatisticsCollectionCalculatorImplementation *this)
{
  objc_destroyWeak((id *)this + 1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1721C58;
  uint64_t v2 = *(void **)(a1 + 672);
  if (v2)
  {
    *(void *)(a1 + 680) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 608);
  if (v3)
  {
    *(void *)(a1 + 61objc_destroyWeak((id *)this + 6) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 5objc_destroyWeak((id *)this + 6) = a2;
    *(unsigned char *)(result + 640) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  unint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD027A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = v4;
    id v3 = v5;
  }
}

void sub_1BD027A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 82, a2);
  id v7 = a2;
  id v4 = a1[82];
  id v5 = a1[79];
  a1[79] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[79]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v3;
}

void sub_1BD027C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 640))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD027D40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 642))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 641))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 643)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 680);
    unint64_t v18 = *(void *)(a1 + 688);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 672);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 1objc_destroyWeak((id *)this + 6) = v31;
      unint64_t v21 = v28 + 40;
      unint64_t v32 = *(char **)(a1 + 680);
      uint64_t v33 = *(char **)(a1 + 672);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        unint64_t v32 = *(char **)(a1 + 672);
      }
      *(void *)(a1 + 672) = v28;
      *(void *)(a1 + 680) = v21;
      *(void *)(a1 + 68_Block_object_dispose(&STACK[0x230], 8) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 1objc_destroyWeak((id *)this + 6) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 680) = v21;
    goto LABEL_9;
  }
  unint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD027FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 642))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 642) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  unsigned int v65 = v6;
  if (*(unsigned char *)(a1 + 641)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 664);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_198];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 664);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      unint64_t v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 664);
  *(void *)(a1 + 664) = 0;

  *(unsigned char *)(a1 + 641) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 672);
    *(void *)(a1 + 68_Block_object_dispose(&STACK[0x230], 8) = 0;
    *(void *)(a1 + 680) = 0;
    *(void *)(a1 + 672) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      uint64_t v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 672);
      int v37 = *(long long **)(a1 + 680);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            unsigned int v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 1objc_destroyWeak((id *)this + 6) = v42;
                  v36 += 40;
                }
                unsigned int v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              int v37 = *(long long **)(a1 + 680);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 680) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 672);
  unint64_t v39 = *(void *)(a1 + 680);
  *(void *)(a1 + 68_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 680) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  std::string __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    std::string __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    do
    {
      unint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      char v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      char v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      unint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 616) != *(void *)(a1 + 608));
  }
  *(unsigned char *)(a1 + 642) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 644))
    {
      *(unsigned char *)(a1 + 644) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 642) = 0;
LABEL_83:

  return v7;
}

void sub_1BD0286B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 642) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 643) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 642)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 642)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 664);
    *(void *)(a1 + 664) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 641) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 641))
  {
    int v8 = *(void **)(a1 + 664);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 664);
      *(void *)(a1 + 664) = v9;

      int v8 = *(void **)(a1 + 664);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD0289B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 640) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    void v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 640) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD028B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 640) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 640) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  uint64_t v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v3_Block_object_dispose(&STACK[0x230], 8) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 400);
  if (v8 != a1 + 408)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 608);
  if (v11 != *(int8x16_t **)(a1 + 616))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD028F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v61 = a2;
  *(unsigned char *)(a1 + 640) = [v61 decodeBoolForKey:@"needs_config"];
  id v3 = v61;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v65.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)uint64_t v66 = 0u;
  long long v67 = 0u;
  unint64_t v111 = 0;
  id v64 = v3;
  PB::Reader::Reader((PB::Reader *)v110, (const unsigned __int8 *)[v64 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v111]);
  uint64_t v63 = a1;
  std::__split_buffer<std::string> v103 = &unk_1F1726FA0;
  uint64_t v104 = 0;
  uint64_t v108 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  int v109 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v103, (PB::Reader *)v110);
  v65.n128_u64[0] = v105;
  if (v104)
  {
    uint64_t v72 = 0;
    memset(v75, 0, sizeof(v75));
    long long v80 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    LOWORD(v84) = 0;
    memset(v85, 0, 74);
    uint64_t v88 = 0;
    int v79 = 0;
    std::string __p = 0;
    unint64_t v78 = 0;
    unint64_t v77 = 0;
    unint64_t v87 = 0;
    uint64_t v86 = &v87;
    long long v89 = 0u;
    long long v90 = 0u;
    int v91 = 1065353216;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    uint64_t v95 = 0;
    int v96 = 1065353216;
    long long v97 = 0u;
    long long v98 = 0u;
    int v99 = 1065353216;
    long long v100 = 0u;
    long long v101 = 0u;
    int v102 = 1065353216;
    int8x16_t v68 = vextq_s8(*(int8x16_t *)(v104 + 8), *(int8x16_t *)(v104 + 8), 8uLL);
    uint64_t v4 = *(void *)(v104 + 72);
    uint64_t v69 = *(void *)(v104 + 64);
    char v70 = *(unsigned char *)(v104 + 185);
    char v71 = *(unsigned char *)(v104 + 186);
    int8x16_t v73 = vextq_s8(*(int8x16_t *)(v104 + 24), *(int8x16_t *)(v104 + 24), 8uLL);
    uint64_t v74 = v4;
    uint64_t v5 = *(void *)(v104 + 80);
    uint64_t v6 = *(void *)(v104 + 88);
    unint64_t v62 = (void *)v104;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v78)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v78 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v78 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v77;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          void v19[2] = v10;
          void v19[3] = v11;
          *((_WORD *)v19 + 1objc_destroyWeak((id *)this + 6) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          std::string __p = v20;
          unint64_t v77 = (char *)(v19 + 6);
          unint64_t v78 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 1objc_destroyWeak((id *)this + 6) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        unint64_t v77 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v62[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v112, v23);
      int v79 = v112;
      uint64_t v84 = v117;
      long long v82 = v115;
      long long v83 = v116;
      long long v80 = v113;
      long long v81 = v114;
      v85[0] = v118;
      if (v85[1])
      {
        v85[2] = v85[1];
        operator delete((void *)v85[1]);
      }
      *(_OWORD *)&v85[1] = v119;
      v85[3] = v120;
      uint64_t v120 = 0;
      long long v119 = 0uLL;
      v85[4] = v121;
      *(_OWORD *)&v85[5] = v122;
      *(_OWORD *)&v85[7] = v123;
      LOWORD(v85[9]) = v124;
    }
    long long v24 = (void **)v62[17];
    for (uint64_t i = (void **)v62[18]; v24 != i; ++v24)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v112, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v87;
      for (j = &v87; ; BOOL v28 = *j)
      {
        char v30 = j;
        if (!v28) {
          break;
        }
        while (1)
        {
          uint64_t j = (uint64_t **)v28;
          uint64_t v31 = v28[4];
          if (v31 > v27) {
            break;
          }
          if (v31 >= v27)
          {
            int v32 = (char *)j;
            goto LABEL_37;
          }
          BOOL v28 = j[1];
          if (!v28)
          {
            char v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      int v32 = (char *)operator new(0xC8uLL);
      *((void *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 13objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 16_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v32 + 184) = 0u;
      *(void *)int v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = j;
      *char v30 = (uint64_t *)v32;
      uint64_t v33 = (uint64_t *)v32;
      if (*v86)
      {
        uint64_t v86 = (uint64_t **)*v86;
        uint64_t v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v87, v33);
      ++v88;
LABEL_37:
      uint64_t v34 = (void *)*((void *)v32 + 16);
      *((_DWORD *)v32 + 10) = v112;
      long long v35 = v114;
      *((_OWORD *)v32 + 3) = v113;
      uint64_t v36 = v117;
      long long v38 = v115;
      long long v37 = v116;
      *((_OWORD *)v32 + 4) = v35;
      *((_OWORD *)v32 + 5) = v38;
      *((_OWORD *)v32 + objc_destroyWeak((id *)this + 6) = v37;
      *((void *)v32 + 14) = v36;
      *((void *)v32 + 15) = v118;
      if (v34)
      {
        *((void *)v32 + 17) = v34;
        operator delete(v34);
        *((void *)v32 + 1objc_destroyWeak((id *)this + 6) = 0;
        *((void *)v32 + 17) = 0;
        *((void *)v32 + 1_Block_object_dispose(&STACK[0x230], 8) = 0;
      }
      *((_OWORD *)v32 + _Block_object_dispose(&STACK[0x230], 8) = v119;
      *((void *)v32 + 1_Block_object_dispose(&STACK[0x230], 8) = v120;
      uint64_t v120 = 0;
      long long v119 = 0uLL;
      *((void *)v32 + 19) = v121;
      long long v39 = v123;
      *((_OWORD *)v32 + 10) = v122;
      *((_OWORD *)v32 + 11) = v39;
      *((_WORD *)v32 + 9objc_destroyWeak((id *)this + 6) = v124;
    }
    uint64_t v40 = v62[5];
    for (uint64_t k = v62[6]; v40 != k; v40 += 8)
    {
      double v43 = *(double *)(*(void *)v40 + 8);
      double v42 = *(double *)(*(void *)v40 + 16);
      if (v43 >= v42) {
        double v44 = *(double *)(*(void *)v40 + 16);
      }
      else {
        double v44 = *(double *)(*(void *)v40 + 8);
      }
      if (v42 < v43) {
        double v42 = *(double *)(*(void *)v40 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v75, v44, v42);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v65.n128_i64[1], (uint64_t)&v68);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v68);
  }
  uint64_t v45 = v106;
  uint64_t v46 = v107;
  if (v106 != v107)
  {
    unint64_t v47 = (char *)v66[1];
    do
    {
      uint64_t v48 = *(void *)(*(void *)v45 + 24);
      uint64_t v49 = *(void *)(*(void *)v45 + 32);
      uint64_t v50 = *(void *)(*(void *)v45 + 8);
      uint64_t v51 = *(void *)(*(void *)v45 + 16);
      if ((unint64_t)v47 >= (unint64_t)v67)
      {
        uint64_t v52 = (char *)v66[0];
        unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - (char *)v66[0]) >> 3);
        unint64_t v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v67 - (unint64_t)v66[0]) >> 3) > v54) {
          unint64_t v54 = 0x999999999999999ALL * ((uint64_t)(v67 - (unint64_t)v66[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (unint64_t)v66[0]) >> 3) >= 0x333333333333333) {
          unint64_t v55 = 0x666666666666666;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55)
        {
          unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
          unint64_t v47 = (char *)v66[1];
          uint64_t v52 = (char *)v66[0];
        }
        else
        {
          uint64_t v56 = 0;
        }
        unint64_t v57 = v55 + 40 * v53;
        *(void *)unint64_t v57 = v49;
        *(void *)(v57 + _Block_object_dispose(&STACK[0x230], 8) = v48;
        *(void *)(v57 + 1objc_destroyWeak((id *)this + 6) = v50;
        *(void *)(v57 + 24) = v51;
        *(_WORD *)(v57 + 32) = 1;
        char v58 = (char *)v57;
        if (v47 != v52)
        {
          do
          {
            long long v59 = *(_OWORD *)(v47 - 40);
            long long v60 = *(_OWORD *)(v47 - 24);
            *((_WORD *)v58 - 4) = *((_WORD *)v47 - 4);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v47 -= 40;
          }
          while (v47 != v52);
          uint64_t v52 = (char *)v66[0];
        }
        unint64_t v47 = (char *)(v57 + 40);
        v66[0] = v58;
        v66[1] = (void *)(v57 + 40);
        *(void *)&long long v67 = v55 + 40 * v56;
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)unint64_t v47 = v49;
        *((void *)v47 + 1) = v48;
        *((void *)v47 + 2) = v50;
        *((void *)v47 + 3) = v51;
        *((_WORD *)v47 + 1objc_destroyWeak((id *)this + 6) = 1;
        v47 += 40;
      }
      v66[1] = v47;
      v45 += 8;
    }
    while (v45 != v46);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v103);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((void *)(v63 + 112), &v65);
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v65.n128_i64[1]);
}

void sub_1BD0296F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x410]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3C0]);
  uint64_t v10 = (void *)STACK[0x3A8];
  if (STACK[0x3A8])
  {
    STACK[0x3B0] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x380]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x370]);
  uint64_t v11 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v11;
    operator delete(v11);
  }
  char v12 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x2A8]);
  char v13 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x440]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = a4;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x230], 8) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 17objc_destroyWeak((id *)this + 6) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 25_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 29objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 280) = a1 + 288;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 33objc_destroyWeak((id *)this + 6) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 37objc_destroyWeak((id *)this + 6) = 0u;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  *(_OWORD *)(a1 + 44_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(void *)(a1 + 504) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 448);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 408);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 368);
  uint64_t v2 = *(void **)(a1 + 344);
  if (v2)
  {
    *(void *)(a1 + 352) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 304);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 288));
  id v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 21objc_destroyWeak((id *)this + 6) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__deallocate_node(id *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (id *)*v1;

      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__deallocate_node(*(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__deallocate_node(id *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (id *)*v1;

      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[16];
    if (v2)
    {
      a1[17] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 656));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 640) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD029DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 62), a2 + 31);
  unint64_t v4 = a2[32].n128_u64[1];
  a2[32].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[65];
  a1[65] = v4;

  return a1;
}

char *std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  double v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *double v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = std::vector<std::tuple<long long,HKSample * {__strong}>>::__vallocate[abi:ne180100](v7, v11);
    double v13 = (char *)v7[1];
    double v12 = (void **)(v7 + 1);
    double v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __n128 v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  double v12 = (void **)(result + 8);
  int8x16_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    double v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __n128 v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *double v12 = &v9[v17];
  return result;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a2 + 128);
  long long v12 = *(_OWORD *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 160);
  long long v14 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 17objc_destroyWeak((id *)this + 6) = v14;
  *(_OWORD *)(a1 + 144) = v12;
  uint64_t v15 = *(void *)(a2 + 200);
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 200) = v15;
  *(void *)(a1 + 21objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 224) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 208), *(const void **)(a2 + 208), *(void *)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 4);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  long long v16 = *(_OWORD *)(a2 + 256);
  uint64_t v17 = *(void *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 25objc_destroyWeak((id *)this + 6) = v16;
  __n128 v18 = (void *)(a1 + 288);
  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 29objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 272) = v17;
  *(void *)(a1 + 280) = a1 + 288;
  uint64_t v19 = *(void **)(a2 + 280);
  if (v19 != (void *)(a2 + 288))
  {
    long long v20 = 0;
    long long v21 = (void *)(a1 + 288);
    while (1)
    {
      uint64_t v22 = (void *)(a1 + 288);
      if (v21 == v18) {
        goto LABEL_12;
      }
      char v23 = v20;
      char v24 = (void *)(a1 + 288);
      if (v20)
      {
        do
        {
          uint64_t v22 = v23;
          char v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      uint64_t v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20) {
          uint64_t v27 = (uint64_t **)v22;
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 288);
        }
        if (v20) {
          unint64_t v28 = (uint64_t **)(v22 + 1);
        }
        else {
          unint64_t v28 = (uint64_t **)(a1 + 288);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = operator new(0xC8uLL);
          void v31[4] = v19[4];
          *((_DWORD *)v31 + 10) = *((_DWORD *)v19 + 10);
          *((_OWORD *)v31 + 3) = *((_OWORD *)v19 + 3);
          long long v32 = *((_OWORD *)v19 + 4);
          long long v33 = *((_OWORD *)v19 + 5);
          long long v34 = *((_OWORD *)v19 + 6);
          v31[14] = v19[14];
          *((_OWORD *)v31 + 5) = v33;
          *((_OWORD *)v31 + objc_destroyWeak((id *)this + 6) = v34;
          *((_OWORD *)v31 + 4) = v32;
          uint64_t v35 = v19[15];
          v31[16] = 0;
          v31[15] = v35;
          v31[17] = 0;
          v31[18] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 16, (const void *)v19[16], v19[17], (uint64_t)(v19[17] - v19[16]) >> 4);
          v31[19] = v19[19];
          long long v36 = *((_OWORD *)v19 + 10);
          long long v37 = *((_OWORD *)v19 + 11);
          v31[24] = v19[24];
          *((_OWORD *)v31 + 10) = v36;
          *((_OWORD *)v31 + 11) = v37;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 280), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        unint64_t v28 = (uint64_t **)(a1 + 288);
        uint64_t v27 = (uint64_t **)(a1 + 288);
        if (!v20) {
          goto LABEL_28;
        }
        char v29 = v20;
        while (1)
        {
          while (1)
          {
            uint64_t v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v26) {
              break;
            }
            char v29 = *v27;
            unint64_t v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v26) {
            break;
          }
          char v29 = v27[1];
          if (!v29)
          {
            unint64_t v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v38 = (void *)v19[1];
      if (v38)
      {
        do
        {
          long long v39 = v38;
          long long v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          long long v39 = (void *)v19[2];
          BOOL v25 = *v39 == (void)v19;
          uint64_t v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (void *)(a2 + 288)) {
        break;
      }
      long long v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 280);
      uint64_t v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 304, a2 + 304);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 344), *(const void **)(a2 + 344), *(void *)(a2 + 352), (uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 408, a2 + 408);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 448, a2 + 448);
  return a1;
}

void sub_1BD02A2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 352) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 21objc_destroyWeak((id *)this + 6) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

uint64_t std::unordered_set<long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1, i[2], i[2]);
  return a1;
}

void sub_1BD02A474(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = a2;
  void v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *long long v20 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1BD02A680(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v4 = result;
    if (a4 >> 61) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(a4);
    unint64_t v7 = result;
    *long long v4 = result;
    v4[1] = result;
    void v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      BOOL result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BD02A710(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x230], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<long long,long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = v5[2];
      if (v7)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        uint64_t v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v8)
            {
              if (i[2] == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v7) {
                  v12 %= v7;
                }
              }
              else
              {
                v12 &= v7 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      float v13 = operator new(0x20uLL);
      void *v13 = 0;
      v13[1] = v8;
      *((_OWORD *)v13 + 1) = *((_OWORD *)v5 + 1);
      float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v15 = *(float *)(a1 + 32);
      if (!v7 || (float)(v15 * (float)v7) < v14)
      {
        BOOL v16 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v16 = 1;
        }
        unint64_t v17 = v16 | (2 * v7);
        unint64_t v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18) {
          size_t v19 = v18;
        }
        else {
          size_t v19 = v17;
        }
        std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v19);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v20 = *(void *)a1;
      unint64_t v21 = *(void **)(*(void *)a1 + 8 * v2);
      if (v21)
      {
        void *v13 = *v21;
      }
      else
      {
        void *v13 = *v6;
        *long long v6 = v13;
        *(void *)(v20 + 8 * v2) = v6;
        if (!*v13) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(*v13 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v22 >= v7) {
            v22 %= v7;
          }
        }
        else
        {
          v22 &= v7 - 1;
        }
        unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
      }
      void *v21 = v13;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BD02A960(_Unwind_Exception *a1)
{
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(uint64_t ***)(a2 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = [v5[2] hash];
      unint64_t v8 = v7;
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        unint64_t v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v7;
          if (v7 >= v9) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        unint64_t v12 = *(uint64_t ****)(*(void *)a1 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = *v12; i; uint64_t i = (uint64_t **)*i)
          {
            unint64_t v14 = (unint64_t)i[1];
            if (v14 == v8)
            {
              if (std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](i[2], v5[2]))goto LABEL_41; {
            }
              }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9) {
                  v14 %= v9;
                }
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      float v15 = operator new(0x20uLL);
      void *v15 = 0;
      v15[1] = v8;
      BOOL v16 = v5[2];
      unint64_t v17 = v5[3];
      _OWORD v15[2] = v16;
      void v15[3] = v17;
      float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        BOOL v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v9);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v23);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v8;
        }
      }
      uint64_t v24 = *(void *)a1;
      BOOL v25 = *(void **)(*(void *)a1 + 8 * v2);
      if (v25)
      {
        void *v15 = *v25;
      }
      else
      {
        void *v15 = *v6;
        *long long v6 = v15;
        *(void *)(v24 + 8 * v2) = v6;
        if (!*v15) {
          goto LABEL_40;
        }
        unint64_t v26 = *(void *)(*v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9) {
            v26 %= v9;
          }
        }
        else
        {
          v26 &= v9 - 1;
        }
        BOOL v25 = (void *)(*(void *)a1 + 8 * v26);
      }
      *BOOL v25 = v15;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      uint64_t v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BD02ABCC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3 == v4)
  {
    uint64_t v6 = 1;
  }
  else if (v4)
  {
    uint64_t v6 = [v3 isEqualToString:v4];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1BD02AC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},long long>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t std::unordered_map<long long,NSString * {__strong}>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = v5[2];
      unint64_t v8 = (void *)v5[3];
      unint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v9 <= v7) {
            unint64_t v2 = v7 % v9;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
        unint64_t v11 = *(void **)(*(void *)a1 + 8 * v2);
        if (v11)
        {
          for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v7)
            {
              if (i[2] == v7) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }
              else
              {
                v13 &= v9 - 1;
              }
              if (v13 != v2) {
                break;
              }
            }
          }
        }
      }
      unint64_t v14 = operator new(0x20uLL);
      void *v14 = 0;
      v14[1] = v7;
      v14[2] = v7;
      void v14[3] = v8;
      float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v16 = *(float *)(a1 + 32);
      if (!v9 || (float)(v16 * (float)v9) < v15)
      {
        BOOL v17 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v17 = 1;
        }
        unint64_t v18 = v17 | (2 * v9);
        unint64_t v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19) {
          size_t v20 = v19;
        }
        else {
          size_t v20 = v18;
        }
        std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v20);
        unint64_t v9 = *(void *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v7) {
            unint64_t v2 = v7 % v9;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v9 - 1) & v7;
        }
      }
      uint64_t v21 = *(void *)a1;
      unint64_t v22 = *(void **)(*(void *)a1 + 8 * v2);
      if (v22)
      {
        void *v14 = *v22;
      }
      else
      {
        void *v14 = *v6;
        *uint64_t v6 = v14;
        *(void *)(v21 + 8 * v2) = v6;
        if (!*v14) {
          goto LABEL_40;
        }
        unint64_t v23 = *(void *)(*v14 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v23 >= v9) {
            v23 %= v9;
          }
        }
        else
        {
          v23 &= v9 - 1;
        }
        unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
      }
      *unint64_t v22 = v14;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BD02AF10(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  unint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 17objc_destroyWeak((id *)this + 6) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 208, (__n128 *)(a2 + 208));
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  long long v13 = *(_OWORD *)(a2 + 240);
  long long v14 = *(_OWORD *)(a2 + 256);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v13;
  *(_OWORD *)(a1 + 25objc_destroyWeak((id *)this + 6) = v14;
  uint64_t v15 = a1 + 288;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 288));
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  uint64_t v16 = *(void *)(a2 + 288);
  *(void *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = v16;
  uint64_t v17 = *(void *)(a2 + 296);
  *(void *)(a1 + 29objc_destroyWeak((id *)this + 6) = v17;
  if (v17)
  {
    *(void *)(v16 + 1objc_destroyWeak((id *)this + 6) = v15;
    *(void *)(a2 + 280) = a2 + 288;
    *(void *)(a2 + 28_Block_object_dispose(&STACK[0x230], 8) = 0;
    *(void *)(a2 + 29objc_destroyWeak((id *)this + 6) = 0;
  }
  else
  {
    *(void *)(a1 + 280) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 304, (uint64_t *)(a2 + 304));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 344, (__n128 *)(a2 + 344));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 448, (uint64_t *)(a2 + 448));
  return a1;
}

__n128 std::vector<HKRawInterval<double>>::__move_assign(uint64_t a1, __n128 *a2)
{
  long long v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
    *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    long long v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        operator delete(v4);
        long long v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  unint64_t v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  long long v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = v12;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    *long long v11 = 0;
    v11[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__deallocate_node(*(id **)(a1 + 16));
    *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  long long v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  unint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = v10;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *unint64_t v9 = 0;
    v9[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__deallocate_node(*(id **)(a1 + 16));
    *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  long long v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  unint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = v10;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *unint64_t v9 = 0;
    v9[1] = 0;
  }
}

double HKIntervalMask<double>::firstDifference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (a2 == a1)
  {
    unint64_t v6 = (a4 - a3) >> 4;
LABEL_11:
    if (v4 >= v6) {
      return 1.79769313e308;
    }
    else {
      return *(double *)(a3 + 16 * v4);
    }
  }
  else
  {
    uint64_t v5 = 0;
    v4 >>= 4;
    unint64_t v6 = (a4 - a3) >> 4;
    if ((unint64_t)v4 <= 1) {
      uint64_t v4 = 1;
    }
    uint64_t v7 = a1 + 8;
    uint64_t v8 = (double *)(a3 + 8);
    while (1)
    {
      if (v6 == v5) {
        return *(double *)(a1 + 16 * v6);
      }
      double result = *(double *)(v7 - 8);
      double v10 = *(v8 - 1);
      if (result != v10) {
        break;
      }
      double result = *v8;
      if (*(double *)v7 != *v8)
      {
        if (result >= *(double *)v7) {
          return *(double *)v7;
        }
        return result;
      }
      ++v5;
      v7 += 16;
      v8 += 2;
      if (v4 == v5) {
        goto LABEL_11;
      }
    }
    if (v10 < result) {
      return *(v8 - 1);
    }
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  double v3 = *a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = a2 + 5;
  if (v3 != -1.79769313e308) {
    uint64_t v5 = a2;
  }
  unint64_t v6 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v90 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  uint64_t v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v6 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      unint64_t v15 = *(uint64_t **)(v90 + 344);
      unint64_t v16 = *(uint64_t **)(v90 + 352);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      size_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v98[0] = &unk_1F1721F10;
  v98[3] = v98;
  id v87 = v12;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v100, (uint64_t)v98);
  int v102 = 0;
  uint64_t v21 = operator new(0x28uLL);
  void *v21 = &unk_1F1721DF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v21 + 1), (uint64_t)v100);
  int v102 = v21;
  id v92 = v87;
  unint64_t v22 = (void *)MEMORY[0x1E4F2B370];
  unint64_t v23 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v24 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v94, v90);
  if (!v102) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v25 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v102 + 48))(v102, v94, v24);
  unint64_t v26 = *(double **)(v25 + 8);
  double v27 = 0.0;
  while (v26 != *(double **)(v25 + 16))
  {
    double v29 = *v26;
    double v28 = v26[1];
    v26 += 2;
    double v27 = v27 + v28 - v29;
  }
  uint64_t v30 = [v22 quantityWithUnit:v23 doubleValue:v27 + *(double *)(v25 + 32)];
  [v92 setDuration:v30];

  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }

  __n128 v31 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v94, v90);
  if (!v102) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v92, "setDataCount:", *(void *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v102 + 48))(v102, v94, v31));
  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v32 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v94, v90);
    long long v34 = v95;
    if (v95)
    {
      id v9 = (id)0x1E4F28000;
      do
      {
        uint64_t v35 = v34[2];
        long long v36 = (void *)MEMORY[0x1E4F2B370];
        long long v37 = [MEMORY[0x1E4F2B618] secondUnit];
        if (!v102) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v38 = (*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)v34 + 3);
        long long v39 = *(double **)(v38 + 8);
        double v40 = 0.0;
        while (v39 != *(double **)(v38 + 16))
        {
          double v42 = *v39;
          double v41 = v39[1];
          v39 += 2;
          double v40 = v40 + v41 - v42;
        }
        double v43 = [v36 quantityWithUnit:v37 doubleValue:v40 + *(double *)(v38 + 32)];
        [v32 setObject:v43 forKeyedSubscript:v35];

        if (!v102) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        double v44 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)v34 + 3));
        [v33 setObject:v44 forKeyedSubscript:v35];

        long long v34 = (uint64_t **)*v34;
      }
      while (v34);
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v94);
    [v92 setDurationBySource:v32];
    [v92 setDataCountBySource:v33];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v101);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v100);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)v98);
  int v102 = 0;
  uint64_t v45 = operator new(0x28uLL);
  *uint64_t v45 = &unk_1F1721E80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v45 + 1), (uint64_t)v99);
  int v102 = v45;
  id v93 = v92;
  uint64_t v46 = *(void *)(a1 + 24);
  __n128 v47 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v94, v90);
  if (!v102) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v48 = (double *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v102 + 48))(v102, v94, v47);
  double v50 = *v48;
  double v49 = v48[1];
  double v51 = v48[2];
  uint64_t v52 = *((void *)v48 + 3);
  double v54 = v48[4];
  double v53 = v48[5];
  double v55 = v48[6];
  if (__p)
  {
    long long v97 = __p;
    operator delete(__p);
  }
  uint64_t v56 = *(void *)(a1 + 24);
  uint64_t v57 = _HKStatisticsOptionBaselineRelativeQuantities();
  char v58 = *(void **)(a1 + 16);
  if ((v57 & v56) != 0) {
    [v58 _unitForChangeInCanonicalUnit];
  }
  else {
  long long v59 = [v58 canonicalUnit];
  }
  if ((v46 & 2) != 0)
  {
    long long v60 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v50];
    [v93 setAverageQuantity:v60];
  }
  if ((v46 & 4) != 0)
  {
    id v61 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v51];
    [v93 setMinimumQuantity:v61];
  }
  if ((v46 & 8) != 0)
  {
    unint64_t v62 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v49];
    [v93 setMaximumQuantity:v62];
  }
  if ((v46 & 0x20) != 0)
  {
    uint64_t v63 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:v54];
    [v93 setMostRecentQuantity:v63];

    id v64 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v53, v55);
    [v93 setMostRecentQuantityDateInterval:v64];
  }
  [v93 setDataCount:v52];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_88;
  }
  if ((v46 & 2) != 0)
  {
    id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v46 & 4) == 0) {
      goto LABEL_55;
    }
LABEL_57:
    id v89 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    goto LABEL_58;
  }
  id v9 = 0;
  if ((v46 & 4) != 0) {
    goto LABEL_57;
  }
LABEL_55:
  id v89 = 0;
LABEL_58:
  if ((v46 & 8) != 0) {
    id v88 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v88 = 0;
  }
  if ((v46 & 0x20) != 0)
  {
    id v66 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v65 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v65 = 0;
    id v66 = 0;
  }
  id v67 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v94, v90);
  for (uint64_t i = v95; i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v69 = i[2];
    if ((v46 & 2) != 0)
    {
      if (!v102) {
        goto LABEL_106;
      }
      char v70 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v59, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3));
      [v9 setObject:v70 forKeyedSubscript:v69];
    }
    if ((v46 & 4) != 0)
    {
      if (!v102) {
        goto LABEL_106;
      }
      char v71 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v59, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3) + 16));
      [v89 setObject:v71 forKeyedSubscript:v69];
    }
    if ((v46 & 8) != 0)
    {
      if (!v102) {
        goto LABEL_106;
      }
      uint64_t v72 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v59, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3) + 8));
      [v88 setObject:v72 forKeyedSubscript:v69];
    }
    if ((v46 & 0x20) != 0)
    {
      if (!v102) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v73 = (*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3);
      double v74 = *(double *)(v73 + 40);
      double v75 = *(double *)(v73 + 48);
      uint64_t v76 = [MEMORY[0x1E4F2B370] quantityWithUnit:v59 doubleValue:*(double *)(v73 + 32)];
      [v66 setObject:v76 forKeyedSubscript:v69];

      unint64_t v77 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v74, v75);
      [v65 setObject:v77 forKeyedSubscript:v69];
    }
    if (!v102) {
LABEL_106:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    unint64_t v78 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v102 + 48))(v102, (uint64_t *)i + 3) + 24));
    [v67 setObject:v78 forKeyedSubscript:v69];
  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v94);
  if ((v46 & 2) != 0) {
    [v93 setAverageQuantityBySource:v9];
  }
  if ((v46 & 4) != 0) {
    [v93 setMinimumQuantityBySource:v89];
  }
  if ((v46 & 8) != 0) {
    [v93 setMaximumQuantityBySource:v88];
  }
  if ((v46 & 0x20) != 0)
  {
    [v93 setMostRecentQuantityBySource:v66];
    [v93 setMostRecentQuantityDateIntervalBySource:v65];
  }
  [v93 setDataCountBySource:v67];

LABEL_88:
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v101);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v99);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v98);
  int v79 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  long long v80 = [v93 averageQuantity];
  if (v80)
  {
    long long v59 = [v93 averageQuantity];
    if (([v59 isCompatibleWithUnit:v79] & 1) == 0)
    {

LABEL_102:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v79 format];
      goto LABEL_103;
    }
  }
  long long v81 = [v93 minimumQuantity];
  if (v81)
  {
    id v9 = [v93 minimumQuantity];
    if (![v9 isCompatibleWithUnit:v79])
    {
      int v82 = 1;
      goto LABEL_96;
    }
  }
  long long v83 = [v93 maximumQuantity];
  if (v83)
  {
    uint64_t v84 = [v93 maximumQuantity];
    int v85 = [v84 isCompatibleWithUnit:v79];

    int v82 = v85 ^ 1;
    if (v81) {
      goto LABEL_96;
    }
  }
  else
  {
    int v82 = 0;
    if (v81)
    {
LABEL_96:

      if (v80) {
        goto LABEL_97;
      }
LABEL_101:

      if (!v82) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
  }
  if (!v80) {
    goto LABEL_101;
  }
LABEL_97:

  if (v82) {
    goto LABEL_102;
  }
LABEL_103:

  return v93;
}

void sub_1BD02C14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v40 - 176));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v40 - 240));

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a37);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 328);
  uint64_t v2 = *(void *)(a1 + 344);
  if (v1 != (*(void *)(a1 + 352) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 344);
    *(void *)(a1 + 352) = v2;
    std::vector<long long>::reserve((void **)(a1 + 344), v1);
    uint64_t v5 = *(void **)(a1 + 320);
    if (v5)
    {
      unint64_t v6 = *(char **)(a1 + 352);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 360);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 344);
            unint64_t v6 = *(char **)(a1 + 352);
          }
          else
          {
            uint64_t v15 = 0;
          }
          unint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--unint64_t v16 = v17;
          }
          *(void *)(a1 + 344) = v16;
          *(void *)(a1 + 352) = v9;
          *(void *)(a1 + 360) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)unint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 352) = v9;
        uint64_t v5 = (void *)*v5;
        unint64_t v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD02C644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v104 = (char **)(a1 + 96);
    int v102 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    int v99 = (double **)(a1 + 208);
    unint64_t v6 = (void *)(a1 + 288);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          char *v104 = 0;
          v104[1] = 0;
          v104[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            double v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            uint64_t v45 = *(char **)(a1 + 96);
            double v44 = *(char **)(a1 + 104);
            uint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              double v44 = *v104;
            }
            *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v106.double var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v106, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v101 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v101 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 232) = HKIntervalMask<double>::removeIntervalsBefore(v99, v38) + *(double *)(a1 + 232);
            id v93 = *(void **)(a1 + 280);
            if (v93 != v6)
            {
              do
              {
                *((double *)v93 + 19) = HKIntervalMask<double>::removeIntervalsBefore((double **)v93 + 16, v38)
                                      + *((double *)v93 + 19);
                long long v94 = (void *)v93[1];
                if (v94)
                {
                  do
                  {
                    uint64_t v95 = v94;
                    long long v94 = (void *)*v94;
                  }
                  while (v94);
                }
                else
                {
                  do
                  {
                    uint64_t v95 = (void *)v93[2];
                    BOOL v54 = *v95 == (void)v93;
                    id v93 = v95;
                  }
                  while (!v54);
                }
                id v93 = v95;
              }
              while (v95 != v6);
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_152;
          }
          int64_t v103 = 0;
          char v61 = 0;
          unint64_t v62 = v7;
          while (2)
          {
            long long v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v106.double var0 = *(_OWORD *)v62;
            *(_OWORD *)&v106.double var2 = v63;
            *(double *)&v106.var4 = v62[4];
            if (!v106.var4 || v106.var1 > v38)
            {
              id v64 = *(_OWORD **)(a1 + 104);
              unint64_t v65 = *(void *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v104) >> 4);
                unint64_t v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)*v104) >> 4);
                if (2 * v71 > v70) {
                  unint64_t v70 = 2 * v71;
                }
                if (v71 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v72 = 0x555555555555555;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72) {
                  unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                }
                else {
                  uint64_t v73 = 0;
                }
                int v79 = (_OWORD *)(v72 + 48 * v69);
                long long v80 = *(_OWORD *)v62;
                long long v81 = *((_OWORD *)v62 + 2);
                v79[1] = *((_OWORD *)v62 + 1);
                v79[2] = v81;
                _OWORD *v79 = v80;
                long long v83 = *(char **)(a1 + 96);
                int v82 = *(char **)(a1 + 104);
                uint64_t v84 = v79;
                if (v82 != v83)
                {
                  do
                  {
                    long long v85 = *((_OWORD *)v82 - 3);
                    long long v86 = *((_OWORD *)v82 - 2);
                    *(_OWORD *)((char *)v84 - 21) = *(_OWORD *)(v82 - 21);
                    *(v84 - 3) = v85;
                    *(v84 - 2) = v86;
                    v84 -= 3;
                    v82 -= 48;
                  }
                  while (v82 != v83);
                  int v82 = *v104;
                }
                int8x16_t v68 = v79 + 3;
                *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v84;
                *(void *)(a1 + 104) = v79 + 3;
                *(void *)(a1 + 112) = v72 + 48 * v73;
                if (v82) {
                  operator delete(v82);
                }
              }
              else
              {
                long long v66 = *(_OWORD *)v62;
                long long v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *id v64 = v66;
                int8x16_t v68 = v64 + 3;
              }
              *(void *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8) {
                goto LABEL_140;
              }
              continue;
            }
            break;
          }
          double var2 = v106.var2;
          if (v106.var2 > v38) {
            double var2 = v38;
          }
          v106.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v106.var1 >= *i; i += 2)
          {
            if (v106.var1 < i[1]) {
              goto LABEL_139;
            }
          }
          int v76 = *((unsigned __int8 *)v62 + 42);
          int v77 = *((unsigned __int8 *)v62 + 41);
          if (v61)
          {
            unint64_t var3 = v106.var3;
            if (v103 == v106.var3 || *(unsigned char *)(a1 + 24)) {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v102, &v106, v76 == 0);
            unint64_t var3 = v106.var3;
            int64_t v103 = v106.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_138;
          }
          id v87 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v87) {
            goto LABEL_137;
          }
          id v88 = [v101 objectForKeyedSubscript:v87];
          id v89 = v88;
          if (v88)
          {
            if ([v88 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              char v61 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            uint64_t v90 = [NSNumber numberWithLongLong:var3];
            [v101 setObject:v90 forKeyedSubscript:v87];
          }
          unint64_t v91 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          id v92 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v91);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v92, &v106, v77 == 0);
          goto LABEL_136;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v106.double var0 = *v7;
        v106.double var1 = v13;
        v106.double var2 = v14;
        v106.unint64_t var3 = v15;
        v106.var4 = v18;
        v106.var5 = v16;
        *(_DWORD *)(&v106.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v106.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v107 = v26;
        *((double *)&v107 + 1) = v27;
        *(double *)&long long v108 = v25;
        *((void *)&v108 + 1) = v20;
        LOBYTE(v109) = v28;
        HIBYTE(v109) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_150;
            }
LABEL_93:
            LOWORD(v105) = v109;
            long long v59 = v108;
            long long v60 = *v104;
            *(_OWORD *)long long v60 = v107;
            *((_OWORD *)v60 + 1) = v59;
            *((void *)v60 + 4) = v105;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 == 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          int v56 = v54;
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v102, &v106, v56);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v57 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v15);
            char v58 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v57);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(v58, &v106, v11 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_93;
        }
LABEL_150:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a2;
LABEL_152:
      double v96 = *(double *)(a1 + 56);
      if (v96 == v5)
      {
        long long v97 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v98 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>>]");
        [v97 handleFailureInFunction:v98 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v96 = *(double *)(a1 + 56);
      }
      double v5 = v96;
    }
    while (v96 < a2);
  }
}

void sub_1BD02CE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    double v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(a2);
    double v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    unint64_t v8 = (char *)*a1;
    unint64_t v9 = (char *)a1[1];
    int v10 = v5;
    if (v9 != *a1)
    {
      int v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v5 = result;
  int v6 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v6 = 1;
  }
  if (!v6)
  {
    if (*(_DWORD *)result || result[4]) {
      return result;
    }
    HDStatisticsDiscrete::addSample((uint64_t)(result + 1), a2);
    uint64_t v7 = v5 + 10;
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    *(_OWORD *)(result + 1) = 0u;
    double v14 = result + 11;
    double v13 = (void *)result[11];
    *(_DWORD *)double v5 = 1;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    if (v13)
    {
      v5[12] = (uint64_t)v13;
      operator delete(v13);
      int v15 = *((unsigned __int8 *)v5 + 72);
      _OWORD *v14 = 0u;
      *(_OWORD *)(v5 + 13) = 0u;
      if (v15 && *((double *)v5 + 6) > *((double *)v5 + 16)) {
        goto LABEL_25;
      }
    }
    else
    {
      _OWORD *v14 = 0uLL;
      *(_OWORD *)(v5 + 13) = 0uLL;
    }
    *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
    *(_OWORD *)(v5 + 7) = *(_OWORD *)(v5 + 17);
    *((_WORD *)v5 + 3objc_destroyWeak((id *)this + 6) = *((_WORD *)v5 + 76);
    goto LABEL_25;
  }
  if (v6 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)double result = 2;
    *(_OWORD *)(result + 1) = 0u;
    uint64_t v11 = result + 11;
    int v10 = (void *)result[11];
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    if (v10)
    {
      v5[12] = (uint64_t)v10;
      operator delete(v10);
      int v12 = *((unsigned __int8 *)v5 + 72);
      *uint64_t v11 = 0u;
      *(_OWORD *)(v5 + 13) = 0u;
      if (v12 && *((double *)v5 + 6) > *((double *)v5 + 16)) {
        goto LABEL_25;
      }
    }
    else
    {
      *uint64_t v11 = 0uLL;
      *(_OWORD *)(v5 + 13) = 0uLL;
    }
    *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
    *(_OWORD *)(v5 + 7) = *(_OWORD *)(v5 + 17);
    *((_WORD *)v5 + 3objc_destroyWeak((id *)this + 6) = *((_WORD *)v5 + 76);
LABEL_25:
    HDStatisticsDiscrete::addSample((uint64_t)(v5 + 1), a2);
    uint64_t v7 = v5 + 10;
LABEL_26:
    unint64_t v8 = a2;
    int v9 = a3;
    goto LABEL_27;
  }
  HDStatisticsDiscrete::addSample((uint64_t)(result + 1), a2);
  uint64_t v7 = v5 + 10;
  unint64_t v8 = a2;
  int v9 = 1;
LABEL_27:

  return HDStatisticsTimeInterval::addSample(v7, v8, v9);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  int64_t v3 = *(void **)(a1 + 288);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 288);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    int64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 288) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 280);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 368), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 408);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        uint64_t v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD02D2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 448);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD02D388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xC8uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 5objc_destroyWeak((id *)this + 6) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 13objc_destroyWeak((id *)this + 6) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 16_Block_object_dispose(&STACK[0x230], 8) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(void *a1, id *a2)
{
  unint64_t v4 = [*a2 hash];
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  id v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](i[2], *a2))return i; {
    }
      }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>(uint64_t a1, id *a2, id **a3)
{
  unint64_t v7 = [*a2 hash];
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>::operator()[abi:ne180100](*((void **)i + 2), *a2))return i; {
        }
          }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  *((void *)i + 2) = **a3;
  *((void *)i + 3) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  double v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_38:
    *double v22 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    double v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1BD02D798(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},long long>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                uint64_t v105 = *(char **)(*(void *)a3 + 344);
                HDRawQuantitySample v106 = *(char **)(*(void *)a3 + 352);
                long long v107 = v105;
                long long v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            long long v108 = *(char **)(*(void *)a3 + 352);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            unint64_t v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    uint64_t v118 = *(char **)(*(void *)a3 + 344);
                    long long v119 = *(char **)(*(void *)a3 + 352);
                    uint64_t v120 = v118;
                    uint64_t v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      uint64_t v121 = *(char **)(*(void *)a3 + 352);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          uint64_t v120 = *(char **)(*(void *)a3 + 352);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 1objc_destroyWeak((id *)this + 6) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 344);
                          uint64_t v126 = *(char **)(*(void *)a3 + 352);
                          uint64_t v127 = v125;
                          size_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            size_t v128 = *(char **)(*(void *)a3 + 352);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 1objc_destroyWeak((id *)this + 6) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  unint64_t v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 344);
                  v205 = *(char **)(*(void *)a3 + 352);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 352);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 352);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 344);
                      v213 = *(char **)(*(void *)a3 + 352);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 352);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 1objc_destroyWeak((id *)this + 6) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                unint64_t v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      uint64_t v137 = *(char **)(*(void *)a3 + 344);
                      v136 = *(char **)(*(void *)a3 + 352);
                      uint64_t v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 352);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            uint64_t v138 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 344);
                  uint64_t v143 = *(char **)(*(void *)a3 + 352);
                  unint64_t v145 = v144;
                  uint64_t v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    uint64_t v146 = *(char **)(*(void *)a3 + 352);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        unint64_t v145 = *(char **)(*(void *)a3 + 352);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 1objc_destroyWeak((id *)this + 6) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            uint64_t v154 = *(char **)(*(void *)a3 + 344);
                            uint64_t v155 = *(char **)(*(void *)a3 + 352);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 352);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 352);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 344);
                          v159 = *(char **)(*(void *)a3 + 352);
                          char v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 352);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                char v161 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 1objc_destroyWeak((id *)this + 6) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 1objc_destroyWeak((id *)this + 6) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 344);
                      v175 = *(char **)(*(void *)a3 + 352);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 352);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 344);
                      v188 = *(char **)(*(void *)a3 + 352);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 352);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 352);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 344);
                          v196 = *(char **)(*(void *)a3 + 352);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 352);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 352);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 1objc_destroyWeak((id *)this + 6) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          BOOL v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            unint64_t v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            size_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *BOOL v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 344);
            double v27 = *(char **)(*(void *)a3 + 352);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 352);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 352);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          int8x16_t v68 = *(char **)(*(void *)a3 + 344);
          unint64_t v69 = *(char **)(*(void *)a3 + 352);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 344);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 344);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 344);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 352);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  unint64_t v78 = *(char **)(v75 + 344);
                  int v79 = *(char **)(v75 + 352);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 352);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 352);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                double v74 = *(char **)(*(void *)a3 + 344);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 344);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 352);
                    break;
                  }
                }
                double v74 = *(char **)(*(void *)a3 + 344);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    double v74 = *(char **)(*(void *)a3 + 352);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          int v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            int v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 344);
              long long v86 = *(char **)(v83 + 352);
              id v87 = v85;
              id v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                id v88 = *(char **)(v83 + 352);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    id v87 = *(char **)(v83 + 352);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *int v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              id v93 = *(char **)(v91 + 344);
              long long v94 = *(char **)(v91 + 352);
              if (v93 == v94)
              {
                double v96 = *(char **)(v91 + 344);
                uint64_t v95 = v96;
              }
              else
              {
                uint64_t v95 = *(char **)(v91 + 344);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    uint64_t v95 = *(char **)(v91 + 352);
                    break;
                  }
                }
                double v96 = *(char **)(v91 + 344);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    double v96 = *(char **)(v91 + 352);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int v99 = v93;
                long long v98 = v93;
              }
              else
              {
                long long v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    long long v98 = v94;
                    break;
                  }
                }
                int v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          long long v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v102;
          }
          a5 = 0;
          *long long v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 344);
          double v34 = *(char **)(v24 + 352);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 352);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 352);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                double v44 = *(char **)(v24 + 344);
                uint64_t v45 = *(char **)(v24 + 352);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 352);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 352);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 344);
            double v40 = *(char **)(v24 + 352);
            double v41 = v39;
            double v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              double v42 = *(char **)(v24 + 352);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 352);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 344);
              BOOL v55 = *(char **)(v52 + 352);
              int v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 352);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 352);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 344);
              long long v60 = *(char **)(v52 + 352);
              char v61 = v59;
              unint64_t v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                unint64_t v62 = *(char **)(v52 + 352);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    char v61 = *(char **)(v52 + 352);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 344);
  unint64_t v7 = *(char **)(*(void *)a4 + 352);
  if (v6 == v7)
  {
    unint64_t v9 = *(char **)(*(void *)a4 + 344);
    unint64_t v8 = v9;
  }
  else
  {
    unint64_t v8 = *(char **)(*(void *)a4 + 344);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        unint64_t v8 = *(char **)(*(void *)a4 + 352);
        break;
      }
    }
    unint64_t v9 = *(char **)(*(void *)a4 + 344);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        unint64_t v9 = *(char **)(*(void *)a4 + 352);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 344);
      unint64_t v15 = *(char **)(*(void *)a4 + 352);
      unint64_t v16 = v14;
      BOOL v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        BOOL v17 = *(char **)(*(void *)a4 + 352);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 352);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)uint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 344);
          uint64_t v25 = *(char **)(*(void *)a4 + 352);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 352);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 352);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)long long v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 344);
        unint64_t v11 = v12;
      }
      else
      {
        unint64_t v11 = *(char **)(*(void *)a4 + 344);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            unint64_t v11 = *(char **)(*(void *)a4 + 352);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 344);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 352);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)long long v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      double v40 = *(char **)(*(void *)a4 + 344);
      double v41 = *(char **)(*(void *)a4 + 352);
      double v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 352);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            double v42 = *(char **)(*(void *)a4 + 352);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 344);
      unint64_t v11 = *(char **)(*(void *)a3 + 352);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 352);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 352);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        long long *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 344);
      uint64_t v24 = *(char **)(*(void *)a3 + 352);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 352);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 352);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 344);
            long long v31 = *(char **)(*(void *)a3 + 352);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 352);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 352);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 1objc_destroyWeak((id *)this + 6) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 344);
    uint64_t v14 = *(char **)(*(void *)a5 + 352);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 352);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 352);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 344);
        uint64_t v23 = *(char **)(*(void *)a5 + 352);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 352);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 352);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 344);
            long long v32 = *(char **)(*(void *)a5 + 352);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 352);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 352);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)double v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 344);
    long long v16 = *(char **)(*(void *)a6 + 352);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 352);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 352);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 344);
        uint64_t v25 = *(char **)(*(void *)a6 + 352);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 352);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 352);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 344);
            long long v34 = *(char **)(*(void *)a6 + 352);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 352);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 352);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                double v42 = *(char **)(*(void *)a6 + 344);
                uint64_t v43 = *(char **)(*(void *)a6 + 352);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 352);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 352);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = a2;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<_HKDataTypeCode,std::hash<_HKDataTypeCode>,std::equal_to<_HKDataTypeCode>,std::allocator<_HKDataTypeCode>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *long long v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1BD02F7C0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,NSString * {__strong}>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

__n128 HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::overallStatistics(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 144);
  long long v5 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 5objc_destroyWeak((id *)this + 6) = v5;
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = v4;
  uint64_t v6 = *(void *)(a2 + 200);
  *(void *)(a1 + 72) = *(void *)(a2 + 192);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  unint64_t v7 = *(const void **)(a2 + 208);
  uint64_t v8 = *(void *)(a2 + 216);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x230], 8) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 88), v7, v8, (v8 - (uint64_t)v7) >> 4);
  *(void *)(a1 + 112) = *(void *)(a2 + 232);
  __n128 result = *(__n128 *)(a2 + 240);
  long long v10 = *(_OWORD *)(a2 + 256);
  *(__n128 *)(a1 + 120) = result;
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = v10;
  *(void *)(a1 + 152) = *(void *)(a2 + 272);
  return result;
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  unint64_t v3 = *(void **)(a2 + 280);
  long long v48 = (void *)(a2 + 288);
  if (v3 == (void *)(a2 + 288)) {
    return;
  }
  long long v50 = (void *)(a1 + 16);
  do
  {
    long long v5 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v51 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    unint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (float v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0xB8uLL);
      v52[0] = v19;
      v52[1] = v50;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      *(_OWORD *)(v19 + 13objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v19 + 152) = 0u;
      *(_OWORD *)(v19 + 16_Block_object_dispose(&STACK[0x230], 8) = 0u;
      char v53 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(void **)(*(void *)a1 + 8 * v2);
        float v12 = (uint64_t *)v52[0];
        if (v37)
        {
          *(void *)v52[0] = *v37;
        }
        else
        {
          *(void *)v52[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v50;
          if (!*v12)
          {
LABEL_76:
            v52[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v52);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (void *)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v26 = operator new(8 * *(void *)&prime);
            long long v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            long long v29 = (void *)*v50;
            if (*v50)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v50;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v3objc_destroyWeak((id *)this + 6) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    *long long v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v3objc_destroyWeak((id *)this + 6) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  long long v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          long long v47 = *(void **)a1;
          *(void *)a1 = 0;
          if (v47) {
            operator delete(v47);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = v12[1];
      if (v13 == v8) {
        break;
      }
      if (v51 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      float v12 = (uint64_t *)*v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = (id)v12[2];
    unint64_t v15 = v6;
    id v16 = v6;
    size_t v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    *((_DWORD *)v12 + objc_destroyWeak((id *)this + 6) = *((_DWORD *)v3 + 10);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v3 + 3);
    long long v39 = *((_OWORD *)v3 + 4);
    long long v40 = *((_OWORD *)v3 + 5);
    long long v41 = *((_OWORD *)v3 + 6);
    v12[12] = v3[14];
    *((_OWORD *)v12 + 4) = v40;
    *((_OWORD *)v12 + 5) = v41;
    *((_OWORD *)v12 + 3) = v39;
    v12[13] = v3[15];
    if (v12 + 2 != v3 + 4) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)v12 + 112, (char *)v3[16], v3[17], (uint64_t)(v3[17] - v3[16]) >> 4);
    }
    v12[17] = v3[19];
    long long v42 = *((_OWORD *)v3 + 10);
    long long v43 = *((_OWORD *)v3 + 11);
    *((_WORD *)v12 + 8_Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v3 + 96);
    *((_OWORD *)v12 + 9) = v42;
    *((_OWORD *)v12 + 10) = v43;

LABEL_80:
    long long v44 = (void *)v3[1];
    if (v44)
    {
      do
      {
        long long v45 = v44;
        long long v44 = (void *)*v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        long long v45 = (void *)v3[2];
        BOOL v46 = *v45 == (void)v3;
        unint64_t v3 = v45;
      }
      while (!v46);
    }
    unint64_t v3 = v45;
  }
  while (v45 != v48);
}

void sub_1BD02FDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1721DF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1721DF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1721DF0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD0300C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1721DF0;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1721E80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1721E80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1721E80;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD03035C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1721E80;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1721F10;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1721F10;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>> const&)::{lambda(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 640))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD03076C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 640))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    long long v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 616);
      uint64_t v7 = *(void *)(a1 + 608);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        unint64_t v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD0309F8(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 312, *(void *)(a2 + 24), v9);
        unint64_t v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v33;
          *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(v5, v6);
          unint64_t v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          long long v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            long long v39 = *(char **)(a1 + 104);
            unint64_t v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v44 + 1objc_destroyWeak((id *)this + 6) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 4_Block_object_dispose(&STACK[0x230], 8) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)unint64_t v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 280) || *(double *)(a1 + 256) <= v6)
        {
          *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = v7;
          *(double *)(a1 + 25objc_destroyWeak((id *)this + 6) = v6;
          *(double *)(a1 + 264) = v8;
          *(void *)(a1 + 272) = v9;
          *(unsigned char *)(a1 + 280) = v3;
          *(unsigned char *)(a1 + 281) = v10;
          if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(void *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v7;
            *(double *)(a1 + 17objc_destroyWeak((id *)this + 6) = v6;
            *(double *)(a1 + 184) = v8;
            *(void *)(a1 + 192) = v9;
            *(unsigned char *)(a1 + 200) = v3;
            *(unsigned char *)(a1 + 201) = v10;
          }
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(v5, v9);
          long long v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 152) || *((double *)v49 + 16) <= v6)
          {
            v49[15] = v7;
            *((double *)v49 + 1objc_destroyWeak((id *)this + 6) = v6;
            *((double *)v49 + 17) = v8;
            v49[18] = (uint64_t *)v9;
            *((unsigned char *)v49 + 152) = v3;
            *((unsigned char *)v49 + 153) = v10;
            if (!*((unsigned char *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + objc_destroyWeak((id *)this + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((unsigned char *)v49 + 72) = v3;
              *((unsigned char *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 504);
        unint64_t v19 = *(void *)(a1 + 512);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 496);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v27 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          unint64_t v30 = *(char **)(a1 + 496);
          long long v29 = *(char **)(a1 + 504);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            long long v29 = *(char **)(a1 + 496);
          }
          *(void *)(a1 + 49objc_destroyWeak((id *)this + 6) = v27;
          *(void *)(a1 + 504) = v20;
          *(void *)(a1 + 512) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v18 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 504) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 642))
  {
    *(unsigned char *)(a1 + 644) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 644) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD030F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 496), *(void *)(a1 + 504), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD031040(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 520), *(id *)(a1 + 40));
  *((double *)v8 - 4) = a3;
  *(double *)(a1 + 1objc_destroyWeak((id *)this + 6) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v9 = 0uLL;
  memset(v18, 0, sizeof(v18));
  char v10 = *(void **)(a1 + 216);
  *(_DWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)&v18[36];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v18[52];
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = *(_OWORD *)&v18[4];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)&v18[20];
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
  if (v10)
  {
    *(void *)(a1 + 224) = v10;
    operator delete(v10);
    long long v9 = 0uLL;
  }
  *(_WORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = v9;
  *(_OWORD *)(a1 + 264) = v9;
  *(_OWORD *)(a1 + 21objc_destroyWeak((id *)this + 6) = v9;
  *(_OWORD *)(a1 + 232) = v9;
  if (*(void *)(a1 + 304))
  {
    uint64_t v11 = *(void **)(a1 + 288);
    uint64_t v12 = *(void *)(a1 + 296);
    *(void *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = a1 + 296;
    *(void *)(v12 + 1objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 29objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 304) = 0;
    if (v11[1]) {
      unint64_t v13 = (void *)v11[1];
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      double v14 = (void *)v13[2];
      if (v14)
      {
        unint64_t v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          void *v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              double v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; unint64_t v15 = (void *)v14[1])
          {
            do
            {
              double v14 = v15;
              unint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          double v14 = i;
        unint64_t v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 520));
  *(void *)(a1 + 504) = *(void *)(a1 + 496);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 644))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 644) = 0;
  }
}

void sub_1BD031278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x666666666666667) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    double result = std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    void v4[2] = &result[5 * v8];
    uint64_t v9 = a3 - (void)a2;
    if (v9) {
      double result = memmove(result, a2, v9 - 6);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BD03131C(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x230], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 640))
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD03143C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 640) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    void v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD03188C(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C400CC883D5);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD031A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  void v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  void v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD031D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 640)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v53;
                  *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 5objc_destroyWeak((id *)this + 6) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + _Block_object_dispose(&STACK[0x230], 8) = v60;
                    *(_OWORD *)(v65 + 1objc_destroyWeak((id *)this + 6) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                long long v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 1objc_destroyWeak((id *)this + 6) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + _Block_object_dispose(&STACK[0x230], 8) = v71;
                    *(_OWORD *)(v72 + 1objc_destroyWeak((id *)this + 6) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 1objc_destroyWeak((id *)this + 6) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 1objc_destroyWeak((id *)this + 6) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + _Block_object_dispose(&STACK[0x230], 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 1objc_destroyWeak((id *)this + 6) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 1objc_destroyWeak((id *)this + 6) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 1objc_destroyWeak((id *)this + 6) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(long long *result, double *a2, double *a3)
{
  double v3 = a2[1];
  double v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      uint64_t v10 = *((void *)a2 + 4);
      long long v11 = *(_OWORD *)a2;
      long long v12 = *((_OWORD *)a2 + 1);
      __int16 v13 = *((_WORD *)a3 + 16);
      long long v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((_WORD *)a2 + 1objc_destroyWeak((id *)this + 6) = v13;
      *(_OWORD *)a3 = v11;
      *((_OWORD *)a3 + 1) = v12;
      *((_WORD *)a3 + 1objc_destroyWeak((id *)this + 6) = v10;
      if (a2[1] < *((double *)result + 1))
      {
        uint64_t v15 = *((void *)result + 4);
        long long v16 = *result;
        long long v17 = result[1];
        __int16 v18 = *((_WORD *)a2 + 16);
        long long v19 = *((_OWORD *)a2 + 1);
        *double result = *(_OWORD *)a2;
        result[1] = v19;
        *((_WORD *)result + 1objc_destroyWeak((id *)this + 6) = v18;
        *(_OWORD *)a2 = v16;
        *((_OWORD *)a2 + 1) = v17;
        *((_WORD *)a2 + 1objc_destroyWeak((id *)this + 6) = v15;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      uint64_t v20 = *((void *)result + 4);
      long long v21 = *result;
      long long v22 = result[1];
      __int16 v23 = *((_WORD *)a2 + 16);
      long long v24 = *((_OWORD *)a2 + 1);
      *double result = *(_OWORD *)a2;
      result[1] = v24;
      *((_WORD *)result + 1objc_destroyWeak((id *)this + 6) = v23;
      *(_OWORD *)a2 = v21;
      *((_OWORD *)a2 + 1) = v22;
      *((_WORD *)a2 + 1objc_destroyWeak((id *)this + 6) = v20;
      if (a3[1] >= a2[1]) {
        return result;
      }
      uint64_t v5 = *((void *)a2 + 4);
      long long v6 = *(_OWORD *)a2;
      long long v7 = *((_OWORD *)a2 + 1);
      __int16 v25 = *((_WORD *)a3 + 16);
      long long v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((_WORD *)a2 + 1objc_destroyWeak((id *)this + 6) = v25;
    }
    else
    {
      uint64_t v5 = *((void *)result + 4);
      long long v6 = *result;
      long long v7 = result[1];
      __int16 v8 = *((_WORD *)a3 + 16);
      long long v9 = *((_OWORD *)a3 + 1);
      *double result = *(_OWORD *)a3;
      result[1] = v9;
      *((_WORD *)result + 1objc_destroyWeak((id *)this + 6) = v8;
    }
    *(_OWORD *)a3 = v6;
    *((_OWORD *)a3 + 1) = v7;
    *((_WORD *)a3 + 1objc_destroyWeak((id *)this + 6) = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 13objc_destroyWeak((id *)this + 6) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + _Block_object_dispose(&STACK[0x230], 8) = v15;
      *(_OWORD *)(v20 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(void *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    uint64_t v9 = *(void *)(a3 + 32);
    __n128 result = *(__n128 *)a3;
    long long v10 = *(_OWORD *)(a3 + 16);
    __int16 v11 = *(_WORD *)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v12;
    *(_WORD *)(a3 + 32) = v11;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v10;
    *(_WORD *)(a4 + 32) = v9;
    result.n128_u64[0] = *(void *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      uint64_t v13 = *(void *)(a2 + 32);
      __n128 result = *(__n128 *)a2;
      long long v14 = *(_OWORD *)(a2 + 16);
      __int16 v15 = *(_WORD *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v16;
      *(_WORD *)(a2 + 32) = v15;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v14;
      *(_WORD *)(a3 + 32) = v13;
      result.n128_u64[0] = *(void *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        __n128 result = *(__n128 *)a1;
        long long v18 = *(_OWORD *)(a1 + 16);
        __int16 v19 = *(_WORD *)(a2 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v20;
        *(_WORD *)(a1 + 32) = v19;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v18;
        *(_WORD *)(a2 + 32) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a2, a3, a4);
  result.n128_u64[0] = *(void *)(a5 + 8);
  if (result.n128_f64[0] < *(double *)(a4 + 8))
  {
    uint64_t v11 = *(void *)(a4 + 32);
    __n128 result = *(__n128 *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    __int16 v13 = *(_WORD *)(a5 + 32);
    long long v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v14;
    *(_WORD *)(a4 + 32) = v13;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 1objc_destroyWeak((id *)this + 6) = v12;
    *(_WORD *)(a5 + 32) = v11;
    result.n128_u64[0] = *(void *)(a4 + 8);
    if (result.n128_f64[0] < *(double *)(a3 + 8))
    {
      uint64_t v15 = *(void *)(a3 + 32);
      __n128 result = *(__n128 *)a3;
      long long v16 = *(_OWORD *)(a3 + 16);
      __int16 v17 = *(_WORD *)(a4 + 32);
      long long v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v18;
      *(_WORD *)(a3 + 32) = v17;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v16;
      *(_WORD *)(a4 + 32) = v15;
      result.n128_u64[0] = *(void *)(a3 + 8);
      if (result.n128_f64[0] < *(double *)(a2 + 8))
      {
        uint64_t v19 = *(void *)(a2 + 32);
        __n128 result = *(__n128 *)a2;
        long long v20 = *(_OWORD *)(a2 + 16);
        __int16 v21 = *(_WORD *)(a3 + 32);
        long long v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v22;
        *(_WORD *)(a2 + 32) = v21;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v20;
        *(_WORD *)(a3 + 32) = v19;
        result.n128_u64[0] = *(void *)(a2 + 8);
        if (result.n128_f64[0] < *(double *)(a1 + 8))
        {
          uint64_t v23 = *(void *)(a1 + 32);
          __n128 result = *(__n128 *)a1;
          long long v24 = *(_OWORD *)(a1 + 16);
          __int16 v25 = *(_WORD *)(a2 + 32);
          long long v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v26;
          *(_WORD *)(a1 + 32) = v25;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v24;
          *(_WORD *)(a2 + 32) = v23;
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  double v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  void v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  void v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  void v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD032D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)long long v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  void v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD032DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>()
{
}

void sub_1BD032F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<statistics::Interval>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>()
{
}

void sub_1BD033094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<statistics::Interval>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive((uint64_t)v6, (int8x16_t *)(a2 + 2));
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 13objc_destroyWeak((id *)this + 6) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a2 + 30), *(int8x16_t *)(a2 + 30), 8uLL);
  v6[1] = *((void *)a2 + 17);
  void v6[2] = *((void *)a2 + 18);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD0331F0(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

void PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>()
{
}

void sub_1BD03330C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<statistics::Interval>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive(uint64_t a1, int8x16_t *a2)
{
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
  uint64_t v4 = (statistics **)(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 112) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsDiscrete::archive(a2, (uint64_t)v5);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
  statistics::Statistics::makeAuxiliaryStatistics(a1);
  HDStatisticsTimeInterval::archive((HDStatisticsTimeInterval *)&a2[4].u64[1], (uint64_t)v5);
  statistics::Statistics::operator=(*v4, (uint64_t)v5);
  statistics::Statistics::~Statistics((statistics::Statistics *)v5);
}

void sub_1BD033410(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::unarchive(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0u;
  uint64_t v5 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 5objc_destroyWeak((id *)this + 6) = 0u;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 13_Block_object_dispose(&STACK[0x230], 8) = 0u;
  uint64_t v6 = a2[16];
  if (v6)
  {
    HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive((uint64_t)v13, *(HDStatisticsTimeInterval **)(v6 + 8), *(void *)(v6 + 128));
    uint64_t v7 = v15;
    *(void *)(v5 + 64) = v14;
    long long v8 = v13[3];
    *(_OWORD *)(v5 + 32) = v13[2];
    *(_OWORD *)(v5 + 4_Block_object_dispose(&STACK[0x230], 8) = v8;
    long long v9 = v13[1];
    *(_OWORD *)uint64_t v5 = v13[0];
    *(_OWORD *)(v5 + 1objc_destroyWeak((id *)this + 6) = v9;
    *(void *)(a1 + 80) = v7;
    double result = v18;
    uint64_t v10 = v17;
    *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x230], 8) = v16;
    *(void *)(a1 + 104) = v10;
    *(double *)(a1 + 112) = result;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v11 = a2[14];
  if (v11)
  {
    double result = *(double *)(v11 + 8);
    uint64_t v12 = *(void *)(v11 + 16);
    *(int8x16_t *)(a1 + 120) = vextq_s8(*(int8x16_t *)(v11 + 24), *(int8x16_t *)(v11 + 24), 8uLL);
    *(double *)(a1 + 13objc_destroyWeak((id *)this + 6) = result;
    *(void *)(a1 + 144) = v12;
    *(_WORD *)(a1 + 152) = 1;
  }
  return result;
}

double HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive(uint64_t a1, HDStatisticsTimeInterval *this, uint64_t a3)
{
  *(_WORD *)(a1 + 64) = 0;
  int8x16_t v4 = 0uLL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(void *)(a1 + 104) = 0;
  if (a3)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(a3 + 104);
    uint64_t v7 = *(void *)(a3 + 112);
    if (v7)
    {
      int8x16_t v4 = *(int8x16_t *)(v7 + 24);
      uint64_t v8 = *(void *)(v7 + 8);
      char v9 = 1;
      uint64_t v7 = *(void *)(v7 + 16);
    }
    else
    {
      char v9 = 0;
      uint64_t v8 = 0;
    }
    *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)(a3 + 88), *(int8x16_t *)(a3 + 88), 8uLL);
    *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = v6;
    *(void *)(a1 + 24) = v5;
    int8x16_t v4 = vextq_s8(v4, v4, 8uLL);
    *(int8x16_t *)(a1 + 32) = v4;
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v8;
    *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = v7;
    *(unsigned char *)(a1 + 64) = v9;
    *(unsigned char *)(a1 + 65) = 0;
  }
  if (this)
  {
    HDStatisticsTimeInterval::unarchive(this, (uint64_t)&v12);
    *(void *)(a1 + 72) = v12;
    v4.i64[0] = v15;
    uint64_t v10 = v14;
    *(_OWORD *)(a1 + 80) = v13;
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v10;
    *(void *)(a1 + 104) = v4.i64[0];
  }
  return *(double *)v4.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1721FC0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 5objc_destroyWeak((id *)this + 6) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 9objc_destroyWeak((id *)this + 6) = 0;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 57objc_destroyWeak((id *)this + 6) = 0u;
  *(_WORD *)(a1 + 592) = 1;
  *(unsigned char *)(a1 + 594) = 0;
  *(unsigned char *)(a1 + 59objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 60_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)(a1 + 640) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1721FC0;
  unint64_t v2 = *(void **)(a1 + 624);
  if (v2)
  {
    *(void *)(a1 + 632) = v2;
    operator delete(v2);
  }

  double v3 = *(void **)(a1 + 560);
  if (v3)
  {
    *(void *)(a1 + 56_Block_object_dispose(&STACK[0x230], 8) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  int8x16_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 5objc_destroyWeak((id *)this + 6) = a2;
    *(unsigned char *)(result + 592) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  int8x16_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  uint64_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
}

void sub_1BD03376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 600) = v4;
    id v3 = v5;
  }
}

void sub_1BD0337E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 76, a2);
  id v7 = a2;
  id v4 = a1[76];
  id v5 = a1[73];
  a1[73] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[73]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 264) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v3;
}

void sub_1BD0339C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 592))
  {
    uint64_t v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime((uint64_t)v4, v5);
    uint64_t v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD033A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 594))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 593))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 595)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 632);
    unint64_t v18 = *(void *)(a1 + 640);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 624);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 1objc_destroyWeak((id *)this + 6) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 632);
      double v33 = *(char **)(a1 + 624);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 624);
      }
      *(void *)(a1 + 624) = v28;
      *(void *)(a1 + 632) = v21;
      *(void *)(a1 + 640) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 1objc_destroyWeak((id *)this + 6) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 632) = v21;
    goto LABEL_9;
  }
  uint64_t v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD033D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 594))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 594) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 593)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 616);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_552];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 616);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      long long v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 616);
  *(void *)(a1 + 61objc_destroyWeak((id *)this + 6) = 0;

  *(unsigned char *)(a1 + 593) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 624);
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 624) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 624);
      BOOL v37 = *(long long **)(a1 + 632);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 1objc_destroyWeak((id *)this + 6) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 632);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 632) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 624);
  unint64_t v39 = *(void *)(a1 + 632);
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 632) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 568) != *(void *)(a1 + 560));
  }
  *(unsigned char *)(a1 + 594) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 596))
    {
      *(unsigned char *)(a1 + 59objc_destroyWeak((id *)this + 6) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 594) = 0;
LABEL_83:

  return v7;
}

void sub_1BD03440C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 594) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 595) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 594)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 594)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 616);
    *(void *)(a1 + 61objc_destroyWeak((id *)this + 6) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 593) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 593))
  {
    int v8 = *(void **)(a1 + 616);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 616);
      *(void *)(a1 + 61objc_destroyWeak((id *)this + 6) = v9;

      int v8 = *(void **)(a1 + 616);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD03470C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 592) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    void v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 592) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD034860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 592) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 592) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v3_Block_object_dispose(&STACK[0x230], 8) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 352);
  if (v8 != a1 + 360)
  {
    HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::archive((uint64_t)&v39, (int8x16_t *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 560);
  if (v11 != *(int8x16_t **)(a1 + 568))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD034C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v59 = a2;
  *(unsigned char *)(a1 + 592) = [v59 decodeBoolForKey:@"needs_config"];
  id v3 = v59;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v63.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)long long v64 = 0u;
  long long v65 = 0u;
  uint64_t v102 = 0;
  id v62 = v3;
  PB::Reader::Reader((PB::Reader *)v101, (const unsigned __int8 *)[v62 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v102]);
  unint64_t v94 = &unk_1F1726FA0;
  uint64_t v95 = 0;
  uint64_t v99 = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  int v100 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v94, (PB::Reader *)v101);
  uint64_t v61 = a1;
  v63.n128_u64[0] = v96;
  if (v95)
  {
    uint64_t v70 = 0;
    memset(v73, 0, sizeof(v73));
    memset(&v75[40], 0, 32);
    uint64_t v79 = 0;
    uint64_t v78 = 0;
    *(_OWORD *)long long __p = 0u;
    memset(v75, 0, 74);
    uint64_t v76 = 0;
    uint64_t v77 = &v78;
    long long v80 = 0u;
    long long v81 = 0u;
    int v82 = 1065353216;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    uint64_t v86 = 0;
    int v87 = 1065353216;
    long long v88 = 0u;
    long long v89 = 0u;
    int v90 = 1065353216;
    long long v91 = 0u;
    long long v92 = 0u;
    int v93 = 1065353216;
    int8x16_t v66 = vextq_s8(*(int8x16_t *)(v95 + 8), *(int8x16_t *)(v95 + 8), 8uLL);
    uint64_t v4 = *(void *)(v95 + 72);
    uint64_t v67 = *(void *)(v95 + 64);
    char v68 = *(unsigned char *)(v95 + 185);
    char v69 = *(unsigned char *)(v95 + 186);
    int8x16_t v71 = vextq_s8(*(int8x16_t *)(v95 + 24), *(int8x16_t *)(v95 + 24), 8uLL);
    uint64_t v72 = v4;
    uint64_t v6 = *(void *)(v95 + 80);
    uint64_t v5 = *(void *)(v95 + 88);
    double v60 = (void *)v95;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= *(void *)v75)
        {
          int8x16_t v14 = (char *)__p[0];
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (char *)__p[0]) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v75 - (unint64_t)__p[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (char *)__p[1];
            int8x16_t v14 = (char *)__p[0];
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + _Block_object_dispose(&STACK[0x230], 8) = v8;
          *(void *)(v19 + 1objc_destroyWeak((id *)this + 6) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p[0];
          }
          uint64_t v7 = (char *)(v19 + 48);
          __p[0] = v20;
          __p[1] = (void *)(v19 + 48);
          *(void *)long long v75 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 1objc_destroyWeak((id *)this + 6) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        __p[1] = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    uint64_t v23 = v60[13];
    if (v23)
    {
      HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(v23 + 8), *(void *)(v23 + 128));
      *(void *)&v75[36] = v107;
      *(_OWORD *)&v75[20] = v105;
      *(_OWORD *)&v75[28] = v106;
      *(_OWORD *)&uint64_t v75[4] = v103;
      *(_OWORD *)&v75[12] = v104;
      *(void *)&v75[40] = v108;
      if (*(void *)&v75[44])
      {
        *(void *)&v75[48] = *(void *)&v75[44];
        operator delete(*(void **)&v75[44]);
      }
      *(_OWORD *)&v75[44] = v109;
      *(void *)&v75[52] = v110;
      uint64_t v110 = 0;
      long long v109 = 0uLL;
      uint64_t v76 = v111;
    }
    long long v24 = (uint64_t *)v60[17];
    for (uint64_t i = (uint64_t *)v60[18]; v24 != i; ++v24)
    {
      uint64_t v26 = *v24;
      HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>::unarchive((uint64_t)&v103, *(HDStatisticsTimeInterval **)(*v24 + 8), *(void *)(*v24 + 128));
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v78;
      char v29 = &v78;
      char v30 = &v78;
      if (v78)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_34;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_37;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_34:
      double v33 = (char *)operator new(0x98uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 13objc_destroyWeak((id *)this + 6) = 0u;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v77)
      {
        uint64_t v77 = (uint64_t **)*v77;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v78, v32);
      ++v79;
LABEL_37:
      uint64_t v34 = (void *)*((void *)v33 + 15);
      uint64_t v35 = v107;
      long long v36 = v106;
      *(_OWORD *)(v33 + 72) = v105;
      *(_OWORD *)(v33 + 8_Block_object_dispose(&STACK[0x230], 8) = v36;
      *((void *)v33 + 13) = v35;
      long long v37 = v104;
      *(_OWORD *)(v33 + 40) = v103;
      *(_OWORD *)(v33 + 5objc_destroyWeak((id *)this + 6) = v37;
      *((void *)v33 + 14) = v108;
      if (v34)
      {
        *((void *)v33 + 1objc_destroyWeak((id *)this + 6) = v34;
        operator delete(v34);
        *((void *)v33 + 15) = 0;
        *((void *)v33 + 1objc_destroyWeak((id *)this + 6) = 0;
        *((void *)v33 + 17) = 0;
      }
      *(_OWORD *)(v33 + 120) = v109;
      *((void *)v33 + 17) = v110;
      uint64_t v110 = 0;
      long long v109 = 0uLL;
      *((void *)v33 + 1_Block_object_dispose(&STACK[0x230], 8) = v111;
    }
    uint64_t v38 = v60[5];
    for (uint64_t j = v60[6]; v38 != j; v38 += 8)
    {
      double v41 = *(double *)(*(void *)v38 + 8);
      double v40 = *(double *)(*(void *)v38 + 16);
      if (v41 >= v40) {
        double v42 = *(double *)(*(void *)v38 + 16);
      }
      else {
        double v42 = *(double *)(*(void *)v38 + 8);
      }
      if (v40 < v41) {
        double v40 = *(double *)(*(void *)v38 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v73, v42, v40);
    }
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((uint64_t)&v63.n128_i64[1], (uint64_t)&v66);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v66);
  }
  uint64_t v43 = v97;
  uint64_t v44 = v98;
  if (v97 != v98)
  {
    uint64_t v45 = (char *)v64[1];
    do
    {
      uint64_t v46 = *(void *)(*(void *)v43 + 24);
      uint64_t v47 = *(void *)(*(void *)v43 + 32);
      uint64_t v48 = *(void *)(*(void *)v43 + 8);
      uint64_t v49 = *(void *)(*(void *)v43 + 16);
      if ((unint64_t)v45 >= (unint64_t)v65)
      {
        uint64_t v50 = (char *)v64[0];
        unint64_t v51 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (char *)v64[0]) >> 3);
        unint64_t v52 = v51 + 1;
        if (v51 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) > v52) {
          unint64_t v52 = 0x999999999999999ALL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - (unint64_t)v64[0]) >> 3) >= 0x333333333333333) {
          unint64_t v53 = 0x666666666666666;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v53);
          uint64_t v50 = (char *)v64[0];
          uint64_t v45 = (char *)v64[1];
        }
        else
        {
          uint64_t v54 = 0;
        }
        unint64_t v55 = v53 + 40 * v51;
        *(void *)unint64_t v55 = v47;
        *(void *)(v55 + _Block_object_dispose(&STACK[0x230], 8) = v46;
        *(void *)(v55 + 1objc_destroyWeak((id *)this + 6) = v48;
        *(void *)(v55 + 24) = v49;
        *(_WORD *)(v55 + 32) = 1;
        char v56 = (char *)v55;
        if (v45 != v50)
        {
          do
          {
            long long v57 = *(_OWORD *)(v45 - 40);
            long long v58 = *(_OWORD *)(v45 - 24);
            *((_WORD *)v56 - 4) = *((_WORD *)v45 - 4);
            *(_OWORD *)(v56 - 24) = v58;
            *(_OWORD *)(v56 - 40) = v57;
            v56 -= 40;
            v45 -= 40;
          }
          while (v45 != v50);
          uint64_t v50 = (char *)v64[0];
        }
        uint64_t v45 = (char *)(v55 + 40);
        v64[0] = v56;
        v64[1] = (void *)(v55 + 40);
        *(void *)&long long v65 = v53 + 40 * v54;
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *(void *)uint64_t v45 = v47;
        *((void *)v45 + 1) = v46;
        *((void *)v45 + 2) = v48;
        *((void *)v45 + 3) = v49;
        *((_WORD *)v45 + 1objc_destroyWeak((id *)this + 6) = 1;
        v45 += 40;
      }
      v64[1] = v45;
      v43 += 8;
    }
    while (v43 != v44);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v94);

  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((void *)(v61 + 112), &v63);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v63.n128_i64[1]);
}

void sub_1BD0353C8(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a2);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x350]);
  uint64_t v8 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v8;
    operator delete(v8);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x310]);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy((void *)STACK[0x300]);
  uint64_t v9 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v10;
    operator delete(v10);
  }
  objc_destroyWeak((id *)&STACK[0x268]);
  uint64_t v11 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v11;
    operator delete(v11);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3D0]);
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = a4;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x230], 8) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(_OWORD *)(a1 + 25objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = 1065353216;
  *(void *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 29objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 37objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 41objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 432) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 448);
  if (v2)
  {
    *(void *)(a1 + 45objc_destroyWeak((id *)this + 6) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 400);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 360);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 320);
  unint64_t v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 256);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(*(void **)(a1 + 240));
  id v3 = *(void **)(a1 + 200);
  if (v3)
  {
    *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(a1[1]);
    unint64_t v2 = (void *)a1[15];
    if (v2)
    {
      a1[16] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 608));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 592) = 0;
  return HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD035974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 56), a2 + 28);
  unint64_t v4 = a2[29].n128_u64[1];
  a2[29].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[59];
  a1[59] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = v12;
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = v15;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 21objc_destroyWeak((id *)this + 6) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 200), *(const void **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 4);
  uint64_t v16 = *(void *)(a2 + 224);
  *(void *)(a1 + 240) = 0;
  unint64_t v17 = (void *)(a1 + 240);
  *(void *)(a1 + 224) = v16;
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  __n128 v18 = *(void **)(a2 + 232);
  if (v18 != (void *)(a2 + 240))
  {
    unint64_t v19 = 0;
    long long v20 = (void *)(a1 + 240);
    while (1)
    {
      long long v21 = (void *)(a1 + 240);
      if (v20 == v17) {
        goto LABEL_12;
      }
      uint64_t v22 = v19;
      char v23 = (void *)(a1 + 240);
      if (v19)
      {
        do
        {
          long long v21 = v22;
          uint64_t v22 = (void *)v22[1];
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v21 = (void *)v23[2];
          BOOL v24 = *v21 == (void)v23;
          char v23 = v21;
        }
        while (v24);
      }
      uint64_t v25 = v18[4];
      if (v21[4] < v25)
      {
LABEL_12:
        if (v19) {
          id v26 = (uint64_t **)v21;
        }
        else {
          id v26 = (uint64_t **)(a1 + 240);
        }
        if (v19) {
          uint64_t v27 = (uint64_t **)(v21 + 1);
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 240);
        }
        if (!*v27)
        {
LABEL_28:
          char v30 = (char *)operator new(0x98uLL);
          *((void *)v30 + 4) = v18[4];
          *(_OWORD *)(v30 + 40) = *(_OWORD *)(v18 + 5);
          long long v31 = *(_OWORD *)(v18 + 7);
          long long v32 = *(_OWORD *)(v18 + 9);
          long long v33 = *(_OWORD *)(v18 + 11);
          *((void *)v30 + 13) = v18[13];
          *(_OWORD *)(v30 + 8_Block_object_dispose(&STACK[0x230], 8) = v33;
          *(_OWORD *)(v30 + 72) = v32;
          *(_OWORD *)(v30 + 5objc_destroyWeak((id *)this + 6) = v31;
          uint64_t v34 = v18[14];
          *((void *)v30 + 15) = 0;
          *((void *)v30 + 14) = v34;
          *((void *)v30 + 1objc_destroyWeak((id *)this + 6) = 0;
          *((void *)v30 + 17) = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)v30 + 15, (const void *)v18[15], v18[16], (uint64_t)(v18[16] - v18[15]) >> 4);
          *((void *)v30 + 1_Block_object_dispose(&STACK[0x230], 8) = v18[18];
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 232), (uint64_t)v26, v27, (uint64_t *)v30);
        }
      }
      else
      {
        uint64_t v27 = (uint64_t **)(a1 + 240);
        id v26 = (uint64_t **)(a1 + 240);
        if (!v19) {
          goto LABEL_28;
        }
        unint64_t v28 = v19;
        while (1)
        {
          while (1)
          {
            id v26 = (uint64_t **)v28;
            uint64_t v29 = v28[4];
            if (v29 <= v25) {
              break;
            }
            unint64_t v28 = *v26;
            uint64_t v27 = v26;
            if (!*v26) {
              goto LABEL_28;
            }
          }
          if (v29 >= v25) {
            break;
          }
          unint64_t v28 = v26[1];
          if (!v28)
          {
            uint64_t v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v35 = (void *)v18[1];
      if (v35)
      {
        do
        {
          long long v36 = v35;
          uint64_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          long long v36 = (void *)v18[2];
          BOOL v24 = *v36 == (void)v18;
          __n128 v18 = v36;
        }
        while (!v24);
      }
      if (v36 == (void *)(a2 + 240)) {
        break;
      }
      unint64_t v19 = (void *)*v17;
      long long v20 = *(void **)(a1 + 232);
      __n128 v18 = v36;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 256, a2 + 256);
  *(void *)(a1 + 29objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 296), *(const void **)(a2 + 296), *(void *)(a2 + 304), (uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 360, a2 + 360);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 400, a2 + 400);
  return a1;
}

void sub_1BD035D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  unint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v13 + 304) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(*v12);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v13 + 20_Block_object_dispose(&STACK[0x230], 8) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v13 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v13 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 9objc_destroyWeak((id *)this + 6) = 0;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  uint64_t v12 = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v11;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 200, (__n128 *)(a2 + 200));
  uint64_t v14 = a1 + 240;
  uint64_t v13 = *(void **)(a1 + 240);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(v13);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  uint64_t v15 = (void *)(a2 + 240);
  uint64_t v16 = *(void *)(a2 + 240);
  *(void *)(a1 + 240) = v16;
  uint64_t v17 = *(void *)(a2 + 248);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = v17;
  if (v17)
  {
    *(void *)(v16 + 1objc_destroyWeak((id *)this + 6) = v14;
    *(void *)(a2 + 232) = v15;
    void *v15 = 0;
    *(void *)(a2 + 24_Block_object_dispose(&STACK[0x230], 8) = 0;
  }
  else
  {
    *(void *)(a1 + 232) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 256, (uint64_t *)(a2 + 256));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 296, (__n128 *)(a2 + 296));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 400, (uint64_t *)(a2 + 400));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308) {
    uint64_t v5 = (double *)a2;
  }
  uint64_t v95 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v98 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v95 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v14 = *(uint64_t **)(a2 + 296);
      uint64_t v15 = *(uint64_t **)(v98 + 304);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        __n128 v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      unint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v112[0] = &unk_1F17221B0;
  v112[3] = v112;
  id v96 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v114, (uint64_t)v112);
  long long v116 = 0;
  long long v20 = operator new(0x28uLL);
  *long long v20 = &unk_1F1722090;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v114);
  long long v116 = v20;
  id v21 = v96;
  uint64_t v22 = (void *)MEMORY[0x1E4F2B370];
  char v23 = [MEMORY[0x1E4F2B618] secondUnit];
  long long v24 = *(_OWORD *)(v98 + 136);
  long long v25 = *(_OWORD *)(v98 + 168);
  long long v104 = *(_OWORD *)(v98 + 152);
  long long v105 = v25;
  long long v102 = *(_OWORD *)(v98 + 120);
  long long v103 = v24;
  uint64_t v26 = *(void *)(v98 + 192);
  uint64_t v106 = *(void *)(v98 + 184);
  uint64_t v107 = v26;
  long long v109 = 0;
  uint64_t v110 = 0;
  uint64_t v27 = *(const void **)(v98 + 200);
  uint64_t v28 = *(void *)(v98 + 208);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v27, v28, (v28 - (uint64_t)v27) >> 4);
  uint64_t v111 = *(void *)(v98 + 224);
  if (!v116) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v29 = (*(uint64_t (**)(void *, long long *))(*v116 + 48))(v116, &v102);
  char v30 = *(double **)(v29 + 8);
  double v31 = 0.0;
  while (v30 != *(double **)(v29 + 16))
  {
    double v33 = *v30;
    double v32 = v30[1];
    v30 += 2;
    double v31 = v31 + v32 - v33;
  }
  uint64_t v34 = [v22 quantityWithUnit:v23 doubleValue:v31 + *(double *)(v29 + 32)];
  [v21 setDuration:v34];

  if (__p)
  {
    long long v109 = __p;
    operator delete(__p);
  }

  long long v35 = *(_OWORD *)(v98 + 168);
  long long v104 = *(_OWORD *)(v98 + 152);
  long long v105 = v35;
  uint64_t v36 = *(void *)(v98 + 184);
  long long v37 = *(_OWORD *)(v98 + 136);
  long long v102 = *(_OWORD *)(v98 + 120);
  long long v103 = v37;
  uint64_t v39 = *(void *)(v98 + 192);
  uint64_t v38 = *(const void **)(v98 + 200);
  uint64_t v106 = v36;
  uint64_t v107 = v39;
  long long v109 = 0;
  uint64_t v110 = 0;
  uint64_t v40 = *(void *)(v98 + 208);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v38, v40, (v40 - (uint64_t)v38) >> 4);
  uint64_t v111 = *(void *)(v98 + 224);
  if (!v116) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(v21, "setDataCount:", *(void *)(*(uint64_t (**)(void *, long long *))(*v116 + 48))(v116, &v102));
  if (__p)
  {
    long long v109 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v41 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v42 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v102, v98);
    for (uint64_t i = (uint64_t **)v103; i; uint64_t i = (uint64_t **)*i)
    {
      uint64_t v44 = i[2];
      uint64_t v45 = (void *)MEMORY[0x1E4F2B370];
      uint64_t v46 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v116) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)i + 3);
      uint64_t v48 = *(double **)(v47 + 8);
      double v49 = 0.0;
      while (v48 != *(double **)(v47 + 16))
      {
        double v51 = *v48;
        double v50 = v48[1];
        v48 += 2;
        double v49 = v49 + v50 - v51;
      }
      unint64_t v52 = [v45 quantityWithUnit:v46 doubleValue:v49 + *(double *)(v47 + 32)];
      [v41 setObject:v52 forKeyedSubscript:v44];

      if (!v116) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      unint64_t v53 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)i + 3));
      [v42 setObject:v53 forKeyedSubscript:v44];
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v102);
    [v21 setDurationBySource:v41];
    [v21 setDataCountBySource:v42];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v115);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v114);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)v113, (uint64_t)v112);
  long long v116 = 0;
  uint64_t v54 = operator new(0x28uLL);
  *uint64_t v54 = &unk_1F1722120;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v54 + 1), (uint64_t)v113);
  long long v116 = v54;
  id v101 = v21;
  uint64_t v55 = *(void *)(a1 + 24);
  long long v56 = *(_OWORD *)(v98 + 168);
  long long v104 = *(_OWORD *)(v98 + 152);
  long long v105 = v56;
  uint64_t v57 = *(void *)(v98 + 184);
  long long v58 = *(_OWORD *)(v98 + 136);
  long long v102 = *(_OWORD *)(v98 + 120);
  long long v103 = v58;
  uint64_t v60 = *(void *)(v98 + 192);
  id v59 = *(const void **)(v98 + 200);
  uint64_t v106 = v57;
  uint64_t v107 = v60;
  long long v109 = 0;
  uint64_t v110 = 0;
  uint64_t v61 = *(void *)(v98 + 208);
  long long __p = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(&__p, v59, v61, (v61 - (uint64_t)v59) >> 4);
  uint64_t v111 = *(void *)(v98 + 224);
  if (!v116) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  id v62 = (double *)(*(uint64_t (**)(void *, long long *))(*v116 + 48))(v116, &v102);
  double v64 = *v62;
  double v63 = v62[1];
  double v65 = v62[2];
  uint64_t v66 = *((void *)v62 + 3);
  double v68 = v62[4];
  double v67 = v62[5];
  double v69 = v62[6];
  if (__p)
  {
    long long v109 = __p;
    operator delete(__p);
  }
  uint64_t v70 = *(void *)(a1 + 24);
  uint64_t v71 = _HKStatisticsOptionBaselineRelativeQuantities();
  uint64_t v72 = *(void **)(a1 + 16);
  if ((v71 & v70) != 0) {
    [v72 _unitForChangeInCanonicalUnit];
  }
  else {
  uint64_t v73 = [v72 canonicalUnit];
  }
  if ((v55 & 2) != 0)
  {
    uint64_t v74 = [MEMORY[0x1E4F2B370] quantityWithUnit:v73 doubleValue:v64];
    [v101 setAverageQuantity:v74];
  }
  if ((v55 & 4) != 0)
  {
    long long v75 = [MEMORY[0x1E4F2B370] quantityWithUnit:v73 doubleValue:v65];
    [v101 setMinimumQuantity:v75];
  }
  if ((v55 & 8) != 0)
  {
    uint64_t v76 = [MEMORY[0x1E4F2B370] quantityWithUnit:v73 doubleValue:v63];
    [v101 setMaximumQuantity:v76];
  }
  if ((v55 & 0x20) != 0)
  {
    uint64_t v77 = [MEMORY[0x1E4F2B370] quantityWithUnit:v73 doubleValue:v68];
    [v101 setMostRecentQuantity:v77];

    uint64_t v78 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v67, v69);
    [v101 setMostRecentQuantityDateInterval:v78];
  }
  [v101 setDataCount:v66];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_87;
  }
  if ((v55 & 2) != 0) {
    id v100 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v100 = 0;
  }
  if ((v55 & 4) != 0) {
    id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v97 = 0;
  }
  if ((v55 & 8) != 0)
  {
    id v79 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v55 & 0x20) == 0) {
      goto LABEL_60;
    }
LABEL_62:
    id v81 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v80 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    goto LABEL_63;
  }
  id v79 = 0;
  if ((v55 & 0x20) != 0) {
    goto LABEL_62;
  }
LABEL_60:
  id v80 = 0;
  id v81 = 0;
LABEL_63:
  id v82 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier((uint64_t)&v102, v98);
  for (uint64_t j = (uint64_t **)v103; j; uint64_t j = (uint64_t **)*j)
  {
    long long v84 = j[2];
    if ((v55 & 2) != 0)
    {
      if (!v116) {
        goto LABEL_90;
      }
      long long v85 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v73, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3));
      [v100 setObject:v85 forKeyedSubscript:v84];
    }
    if ((v55 & 4) != 0)
    {
      if (!v116) {
        goto LABEL_90;
      }
      uint64_t v86 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v73, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 16));
      [v97 setObject:v86 forKeyedSubscript:v84];
    }
    if ((v55 & 8) != 0)
    {
      if (!v116) {
        goto LABEL_90;
      }
      int v87 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v73, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 8));
      [v79 setObject:v87 forKeyedSubscript:v84];
    }
    if ((v55 & 0x20) != 0)
    {
      if (!v116) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v88 = (*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3);
      double v89 = *(double *)(v88 + 40);
      double v90 = *(double *)(v88 + 48);
      long long v91 = [MEMORY[0x1E4F2B370] quantityWithUnit:v73 doubleValue:*(double *)(v88 + 32)];
      [v81 setObject:v91 forKeyedSubscript:v84];

      long long v92 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v89, v90);
      [v80 setObject:v92 forKeyedSubscript:v84];
    }
    if (!v116) {
LABEL_90:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    int v93 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v116 + 48))(v116, (uint64_t *)j + 3) + 24));
    [v82 setObject:v93 forKeyedSubscript:v84];
  }
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table((uint64_t)&v102);
  if ((v55 & 2) != 0) {
    [v101 setAverageQuantityBySource:v100];
  }
  if ((v55 & 4) != 0) {
    [v101 setMinimumQuantityBySource:v97];
  }
  if ((v55 & 8) != 0) {
    [v101 setMaximumQuantityBySource:v79];
  }
  if ((v55 & 0x20) != 0)
  {
    [v101 setMostRecentQuantityBySource:v81];
    [v101 setMostRecentQuantityDateIntervalBySource:v80];
  }
  [v101 setDataCountBySource:v82];

LABEL_87:
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v115);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v113);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](v112);

  return v101;
}

void sub_1BD036BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(v36 - 176));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a33);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](&a29);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 280);
  uint64_t v2 = *(void *)(a1 + 296);
  if (v1 != (*(void *)(a1 + 304) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 296);
    *(void *)(a1 + 304) = v2;
    std::vector<long long>::reserve((void **)(a1 + 296), v1);
    uint64_t v5 = *(void **)(a1 + 272);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 304);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 312);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 296);
            uint64_t v6 = *(char **)(a1 + 304);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 29objc_destroyWeak((id *)this + 6) = v16;
          *(void *)(a1 + 304) = v9;
          *(void *)(a1 + 312) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 304) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    __n128 v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD037030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v107 = (char **)(a1 + 96);
    long long v104 = (uint64_t *)(a1 + 192);
    long long v105 = (HDStatisticsDiscrete *)(a1 + 120);
    location = (id *)(a1 + 88);
    id v101 = (double **)(a1 + 200);
    uint64_t v6 = (void *)(a1 + 240);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          char *v107 = 0;
          v107[1] = 0;
          v107[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            id v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            uint64_t v45 = *(char **)(a1 + 96);
            uint64_t v44 = *(char **)(a1 + 104);
            uint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              uint64_t v44 = *v107;
            }
            *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v109.double var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v109, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v103 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v103 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_140:
            *(double *)(a1 + 224) = HKIntervalMask<double>::removeIntervalsBefore(v101, v38) + *(double *)(a1 + 224);
            uint64_t v95 = *(void **)(a1 + 232);
            if (v95 != v6)
            {
              do
              {
                *((double *)v95 + 1_Block_object_dispose(&STACK[0x230], 8) = HKIntervalMask<double>::removeIntervalsBefore((double **)v95 + 15, v38)
                                      + *((double *)v95 + 18);
                id v96 = (void *)v95[1];
                if (v96)
                {
                  do
                  {
                    id v97 = v96;
                    id v96 = (void *)*v96;
                  }
                  while (v96);
                }
                else
                {
                  do
                  {
                    id v97 = (void *)v95[2];
                    BOOL v54 = *v97 == (void)v95;
                    uint64_t v95 = v97;
                  }
                  while (!v54);
                }
                uint64_t v95 = v97;
              }
              while (v97 != v6);
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_152;
          }
          int64_t v106 = 0;
          char v61 = 0;
          id v62 = v7;
          while (2)
          {
            long long v63 = *((_OWORD *)v62 + 1);
            *(_OWORD *)&v109.double var0 = *(_OWORD *)v62;
            *(_OWORD *)&v109.double var2 = v63;
            *(double *)&v109.var4 = v62[4];
            if (!v109.var4 || v109.var1 > v38)
            {
              double v64 = *(_OWORD **)(a1 + 104);
              unint64_t v65 = *(void *)(a1 + 112);
              if ((unint64_t)v64 >= v65)
              {
                unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - *v107) >> 4);
                unint64_t v70 = v69 + 1;
                if (v69 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)*v107) >> 4);
                if (2 * v71 > v70) {
                  unint64_t v70 = 2 * v71;
                }
                if (v71 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v72 = 0x555555555555555;
                }
                else {
                  unint64_t v72 = v70;
                }
                if (v72) {
                  unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v72);
                }
                else {
                  uint64_t v73 = 0;
                }
                id v80 = (_OWORD *)(v72 + 48 * v69);
                long long v81 = *(_OWORD *)v62;
                long long v82 = *((_OWORD *)v62 + 2);
                v80[1] = *((_OWORD *)v62 + 1);
                v80[2] = v82;
                *id v80 = v81;
                long long v84 = *(char **)(a1 + 96);
                long long v83 = *(char **)(a1 + 104);
                long long v85 = v80;
                if (v83 != v84)
                {
                  do
                  {
                    long long v86 = *((_OWORD *)v83 - 3);
                    long long v87 = *((_OWORD *)v83 - 2);
                    *(_OWORD *)((char *)v85 - 21) = *(_OWORD *)(v83 - 21);
                    *(v85 - 3) = v86;
                    *(v85 - 2) = v87;
                    v85 -= 3;
                    v83 -= 48;
                  }
                  while (v83 != v84);
                  long long v83 = *v107;
                }
                double v68 = v80 + 3;
                *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v85;
                *(void *)(a1 + 104) = v80 + 3;
                *(void *)(a1 + 112) = v72 + 48 * v73;
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                long long v66 = *(_OWORD *)v62;
                long long v67 = *((_OWORD *)v62 + 2);
                v64[1] = *((_OWORD *)v62 + 1);
                v64[2] = v67;
                *double v64 = v66;
                double v68 = v64 + 3;
              }
              *(void *)(a1 + 104) = v68;
LABEL_139:
              v62 += 6;
              if (v62 == (double *)v8) {
                goto LABEL_140;
              }
              continue;
            }
            break;
          }
          double var2 = v109.var2;
          if (v109.var2 > v38) {
            double var2 = v38;
          }
          v109.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v109.var1 >= *i; i += 2)
          {
            if (v109.var1 < i[1]) {
              goto LABEL_139;
            }
          }
          int v76 = *((unsigned __int8 *)v62 + 42);
          int v77 = *((unsigned __int8 *)v62 + 41);
          if (v61)
          {
            unint64_t var3 = v109.var3;
            if (v106 == v109.var3 || *(unsigned char *)(a1 + 24))
            {
              BOOL v79 = v76 == 0;
              HDStatisticsDiscrete::addSample((uint64_t)v105, &v109);
              HDStatisticsTimeInterval::addSample(v104, &v109, v79);
            }
          }
          else
          {
            BOOL v88 = v76 == 0;
            HDStatisticsDiscrete::addSample((uint64_t)v105, &v109);
            HDStatisticsTimeInterval::addSample(v104, &v109, v88);
            unint64_t var3 = v109.var3;
            int64_t v106 = v109.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_138;
          }
          double v89 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v89) {
            goto LABEL_137;
          }
          double v90 = [v103 objectForKeyedSubscript:v89];
          long long v91 = v90;
          if (v90)
          {
            if ([v90 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_136:

LABEL_137:
LABEL_138:
              char v61 = 1;
              goto LABEL_139;
            }
          }
          else
          {
            long long v92 = [NSNumber numberWithLongLong:var3];
            [v103 setObject:v92 forKeyedSubscript:v89];
          }
          unint64_t v93 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, var3);
          unint64_t v94 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v93);
          HDStatisticsDiscrete::addSample((uint64_t)v94, &v109);
          HDStatisticsTimeInterval::addSample((uint64_t *)v94 + 9, &v109, v77 == 0);
          goto LABEL_136;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v109.double var0 = *v7;
        v109.double var1 = v13;
        v109.double var2 = v14;
        v109.unint64_t var3 = v15;
        v109.var4 = v18;
        v109.var5 = v16;
        *(_DWORD *)(&v109.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v109.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v110 = v26;
        *((double *)&v110 + 1) = v27;
        *(double *)&long long v111 = v25;
        *((void *)&v111 + 1) = v20;
        LOBYTE(v112) = v28;
        HIBYTE(v112) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v55 = v10 != 0;
            if (!v28) {
              goto LABEL_150;
            }
LABEL_93:
            LOWORD(v10_Block_object_dispose(&STACK[0x230], 8) = v112;
            long long v59 = v111;
            uint64_t v60 = *v107;
            *(_OWORD *)uint64_t v60 = v110;
            *((_OWORD *)v60 + 1) = v59;
            *((void *)v60 + 4) = v108;
            v60[40] = v52;
            v60[41] = v53;
            v60[42] = v55;
            goto LABEL_151;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 == 0;
        BOOL v55 = v10 != 0;
        if (v18)
        {
          int v56 = v54;
          HDStatisticsDiscrete::addSample((uint64_t)v105, &v109);
          HDStatisticsTimeInterval::addSample(v104, &v109, v56);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v57 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(a1, v15);
            long long v58 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(a1, v57);
            HDStatisticsDiscrete::addSample((uint64_t)v58, &v109);
            HDStatisticsTimeInterval::addSample((uint64_t *)v58 + 9, &v109, v11 == 0);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v55 = 1;
        }
        if (v28) {
          goto LABEL_93;
        }
LABEL_150:
        *(void *)(a1 + 104) = *(void *)(a1 + 96);
      }
LABEL_151:
      *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a2;
LABEL_152:
      double v98 = *(double *)(a1 + 56);
      if (v98 == v5)
      {
        uint64_t v99 = [MEMORY[0x1E4F28B00] currentHandler];
        id v100 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>>::_mergeThroughTime(double) [Statistics = HDStatisticsCombined<HDStatisticsDiscrete, HDStatisticsTimeInterval>]");
        [v99 handleFailureInFunction:v100 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v98 = *(double *)(a1 + 56);
      }
      double v5 = v98;
    }
    while (v98 < a2);
  }
}

void sub_1BD037860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 240);
  double v3 = (uint64_t **)(a1 + 240);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (!v8) {
      uint64_t v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    int v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    uint64_t v6 = std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 320), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 360);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD037A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 400);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD037B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x98uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 5objc_destroyWeak((id *)this + 6) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 13objc_destroyWeak((id *)this + 6) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                long long v105 = *(char **)(*(void *)a3 + 296);
                int64_t v106 = *(char **)(*(void *)a3 + 304);
                uint64_t v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 304);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 296);
                    long long v119 = *(char **)(*(void *)a3 + 304);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 304);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 304);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 1objc_destroyWeak((id *)this + 6) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 296);
                          uint64_t v126 = *(char **)(*(void *)a3 + 304);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 304);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 1objc_destroyWeak((id *)this + 6) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 296);
                  v205 = *(char **)(*(void *)a3 + 304);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 304);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 304);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 296);
                      v213 = *(char **)(*(void *)a3 + 304);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 304);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 1objc_destroyWeak((id *)this + 6) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      uint64_t v137 = *(char **)(*(void *)a3 + 296);
                      v136 = *(char **)(*(void *)a3 + 304);
                      uint64_t v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 304);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            uint64_t v138 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 296);
                  uint64_t v143 = *(char **)(*(void *)a3 + 304);
                  unint64_t v145 = v144;
                  uint64_t v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    uint64_t v146 = *(char **)(*(void *)a3 + 304);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        unint64_t v145 = *(char **)(*(void *)a3 + 304);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 1objc_destroyWeak((id *)this + 6) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            uint64_t v154 = *(char **)(*(void *)a3 + 296);
                            uint64_t v155 = *(char **)(*(void *)a3 + 304);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 304);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 304);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 296);
                          v159 = *(char **)(*(void *)a3 + 304);
                          char v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 304);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                char v161 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 1objc_destroyWeak((id *)this + 6) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 1objc_destroyWeak((id *)this + 6) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 296);
                      v175 = *(char **)(*(void *)a3 + 304);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 304);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 296);
                      v188 = *(char **)(*(void *)a3 + 304);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 304);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 304);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 296);
                          v196 = *(char **)(*(void *)a3 + 304);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 304);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 304);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 1objc_destroyWeak((id *)this + 6) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 296);
            double v27 = *(char **)(*(void *)a3 + 304);
            int v28 = v26;
            uint64_t v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              uint64_t v29 = *(char **)(*(void *)a3 + 304);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 304);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          double v68 = *(char **)(*(void *)a3 + 296);
          unint64_t v69 = *(char **)(*(void *)a3 + 304);
          if (v68 == v69)
          {
            unint64_t v71 = *(char **)(*(void *)a3 + 296);
            unint64_t v70 = v71;
          }
          else
          {
            unint64_t v70 = *(char **)(*(void *)a3 + 296);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                unint64_t v70 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
            unint64_t v71 = *(char **)(*(void *)a3 + 296);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                unint64_t v71 = *(char **)(*(void *)a3 + 304);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  uint64_t v78 = *(char **)(v75 + 296);
                  BOOL v79 = *(char **)(v75 + 304);
                  id v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 304);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        id v80 = *(char **)(v75 + 304);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                uint64_t v74 = *(char **)(*(void *)a3 + 296);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 296);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 304);
                    break;
                  }
                }
                uint64_t v74 = *(char **)(*(void *)a3 + 296);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    uint64_t v74 = *(char **)(*(void *)a3 + 304);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          long long v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            long long v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              long long v85 = *(char **)(v83 + 296);
              long long v86 = *(char **)(v83 + 304);
              long long v87 = v85;
              BOOL v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                BOOL v88 = *(char **)(v83 + 304);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 304);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *long long v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 296);
              unint64_t v94 = *(char **)(v91 + 304);
              if (v93 == v94)
              {
                id v96 = *(char **)(v91 + 296);
                uint64_t v95 = v96;
              }
              else
              {
                uint64_t v95 = *(char **)(v91 + 296);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    uint64_t v95 = *(char **)(v91 + 304);
                    break;
                  }
                }
                id v96 = *(char **)(v91 + 296);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    id v96 = *(char **)(v91 + 304);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                uint64_t v99 = v93;
                double v98 = v93;
              }
              else
              {
                double v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    double v98 = v94;
                    break;
                  }
                }
                uint64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    uint64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          id v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v102;
          }
          a5 = 0;
          *id v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 296);
          double v34 = *(char **)(v24 + 304);
          double v35 = v33;
          uint64_t v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            uint64_t v36 = *(char **)(v24 + 304);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 304);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                uint64_t v44 = *(char **)(v24 + 296);
                uint64_t v45 = *(char **)(v24 + 304);
                uint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 304);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      uint64_t v46 = *(char **)(v24 + 304);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 296);
            double v40 = *(char **)(v24 + 304);
            double v41 = v39;
            id v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              id v42 = *(char **)(v24 + 304);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 304);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 296);
              BOOL v55 = *(char **)(v52 + 304);
              int v56 = v54;
              unint64_t v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                unint64_t v57 = *(char **)(v52 + 304);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 304);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 296);
              uint64_t v60 = *(char **)(v52 + 304);
              char v61 = v59;
              id v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                id v62 = *(char **)(v52 + 304);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    char v61 = *(char **)(v52 + 304);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 296);
  uint64_t v7 = *(char **)(*(void *)a4 + 304);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 296);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 296);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 304);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 296);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 304);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 296);
      unint64_t v15 = *(char **)(*(void *)a4 + 304);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 304);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 304);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)uint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 296);
          uint64_t v25 = *(char **)(*(void *)a4 + 304);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 304);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 304);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)long long v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 296);
        int v11 = v12;
      }
      else
      {
        int v11 = *(char **)(*(void *)a4 + 296);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            int v11 = *(char **)(*(void *)a4 + 304);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 296);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 304);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)long long v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      double v40 = *(char **)(*(void *)a4 + 296);
      double v41 = *(char **)(*(void *)a4 + 304);
      id v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 304);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            id v42 = *(char **)(*(void *)a4 + 304);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 296);
      int v11 = *(char **)(*(void *)a3 + 304);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 304);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 304);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        long long *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 296);
      uint64_t v24 = *(char **)(*(void *)a3 + 304);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 304);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 304);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 296);
            long long v31 = *(char **)(*(void *)a3 + 304);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 304);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 304);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 1objc_destroyWeak((id *)this + 6) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 296);
    uint64_t v14 = *(char **)(*(void *)a5 + 304);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 304);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 304);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 296);
        uint64_t v23 = *(char **)(*(void *)a5 + 304);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 304);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 304);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 296);
            long long v32 = *(char **)(*(void *)a5 + 304);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 304);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 304);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)double v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 296);
    long long v16 = *(char **)(*(void *)a6 + 304);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 304);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 304);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 296);
        uint64_t v25 = *(char **)(*(void *)a6 + 304);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 304);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 304);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 296);
            long long v34 = *(char **)(*(void *)a6 + 304);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 304);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 304);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                id v42 = *(char **)(*(void *)a6 + 296);
                uint64_t v43 = *(char **)(*(void *)a6 + 304);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 304);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 304);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::statisticsByBundleIdentifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v3 = *(void **)(a2 + 232);
  long long v46 = (void *)(a2 + 240);
  if (v3 == (void *)(a2 + 240)) {
    return;
  }
  long long v48 = (void *)(a1 + 16);
  do
  {
    uint64_t v5 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_bundleIdentifierForSourceID(a2, v3[4]);
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_80;
    }
    unint64_t v7 = [v5 hash];
    unint64_t v8 = v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_21;
    }
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v49 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v2 = v7;
      if (v7 >= v9) {
        unint64_t v2 = v7 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(char ***)(*(void *)a1 + 8 * v2);
    if (!v11 || (uint64_t v12 = *v11) == 0)
    {
LABEL_21:
      long long v19 = (char *)operator new(0x88uLL);
      v50[0] = v19;
      v50[1] = v48;
      *(void *)long long v19 = 0;
      *((void *)v19 + 1) = v8;
      *((void *)v19 + 2) = v6;
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 40) = 0u;
      *(_OWORD *)(v19 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v19 + 72) = 0u;
      *(_OWORD *)(v19 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 120) = 0u;
      char v51 = 1;
      float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v21 = *(float *)(a1 + 32);
      if (v9 && (float)(v21 * (float)v9) >= v20)
      {
LABEL_67:
        long long v37 = *(char ***)(*(void *)a1 + 8 * v2);
        uint64_t v12 = (char *)v50[0];
        if (v37)
        {
          *(void *)v50[0] = *v37;
        }
        else
        {
          *(void *)v50[0] = *(void *)(a1 + 16);
          *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = v12;
          *(void *)(*(void *)a1 + 8 * v2) = v48;
          if (!*(void *)v12)
          {
LABEL_76:
            v50[0] = 0;
            ++*(void *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)v50);
            goto LABEL_77;
          }
          unint64_t v38 = *(void *)(*(void *)v12 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v38 >= v9) {
              v38 %= v9;
            }
          }
          else
          {
            v38 &= v9 - 1;
          }
          long long v37 = (char **)(*(void *)a1 + 8 * v38);
        }
        *long long v37 = v12;
        goto LABEL_76;
      }
      BOOL v22 = (v9 & (v9 - 1)) != 0;
      if (v9 < 3) {
        BOOL v22 = 1;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      else {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(void *)&prime > v9) {
        goto LABEL_33;
      }
      if (*(void *)&prime < v9)
      {
        unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          unint64_t v32 = std::__next_prime(v32);
        }
        else
        {
          uint64_t v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2) {
            unint64_t v32 = v34;
          }
        }
        if (*(void *)&prime <= v32) {
          int8x8_t prime = (int8x8_t)v32;
        }
        if (*(void *)&prime >= v9)
        {
          unint64_t v9 = *(void *)(a1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v26 = operator new(8 * *(void *)&prime);
            long long v27 = *(void **)a1;
            *(void *)a1 = v26;
            if (v27) {
              operator delete(v27);
            }
            uint64_t v28 = 0;
            *(int8x8_t *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = prime;
            do
              *(void *)(*(void *)a1 + 8 * v28++) = 0;
            while (*(void *)&prime != v28);
            long long v29 = (void *)*v48;
            if (*v48)
            {
              unint64_t v30 = v29[1];
              uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a1 + 8 * v30) = v48;
              long long v35 = (void *)*v29;
              if (*v29)
              {
                do
                {
                  unint64_t v36 = v35[1];
                  if (v31.u32[0] > 1uLL)
                  {
                    if (v36 >= *(void *)&prime) {
                      v36 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v36 &= *(void *)&prime - 1;
                  }
                  if (v36 != v30)
                  {
                    if (!*(void *)(*(void *)a1 + 8 * v36))
                    {
                      *(void *)(*(void *)a1 + 8 * v3objc_destroyWeak((id *)this + 6) = v29;
                      goto LABEL_58;
                    }
                    void *v29 = *v35;
                    *long long v35 = **(void **)(*(void *)a1 + 8 * v36);
                    **(void **)(*(void *)a1 + 8 * v3objc_destroyWeak((id *)this + 6) = v35;
                    long long v35 = v29;
                  }
                  unint64_t v36 = v30;
LABEL_58:
                  long long v29 = v35;
                  long long v35 = (void *)*v35;
                  unint64_t v30 = v36;
                }
                while (v35);
              }
            }
            unint64_t v9 = (unint64_t)prime;
            goto LABEL_62;
          }
          long long v45 = *(void **)a1;
          *(void *)a1 = 0;
          if (v45) {
            operator delete(v45);
          }
          unint64_t v9 = 0;
          *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
        }
      }
LABEL_62:
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v2 = v8 % v9;
        }
        else {
          unint64_t v2 = v8;
        }
      }
      else
      {
        unint64_t v2 = (v9 - 1) & v8;
      }
      goto LABEL_67;
    }
    while (1)
    {
      unint64_t v13 = *((void *)v12 + 1);
      if (v13 == v8) {
        break;
      }
      if (v49 > 1)
      {
        if (v13 >= v9) {
          v13 %= v9;
        }
      }
      else
      {
        v13 &= v9 - 1;
      }
      if (v13 != v2) {
        goto LABEL_21;
      }
LABEL_20:
      uint64_t v12 = *(char **)v12;
      if (!v12) {
        goto LABEL_21;
      }
    }
    id v14 = *((id *)v12 + 2);
    long long v15 = v6;
    id v16 = v6;
    long long v17 = v16;
    if (v14 != v16)
    {
      char v18 = [v14 isEqualToString:v16];

      uint64_t v6 = v15;
      if (v18) {
        goto LABEL_77;
      }
      goto LABEL_20;
    }

    uint64_t v6 = v15;
LABEL_77:
    *(_OWORD *)(v12 + 24) = *(_OWORD *)(v3 + 5);
    long long v39 = *(_OWORD *)(v3 + 7);
    long long v40 = *(_OWORD *)(v3 + 9);
    long long v41 = *(_OWORD *)(v3 + 11);
    *((void *)v12 + 11) = v3[13];
    *(_OWORD *)(v12 + 72) = v41;
    *(_OWORD *)(v12 + 5objc_destroyWeak((id *)this + 6) = v40;
    *(_OWORD *)(v12 + 40) = v39;
    *((void *)v12 + 12) = v3[14];
    if (v12 + 16 != (char *)(v3 + 4)) {
      std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v12 + 104, (char *)v3[15], v3[16], (uint64_t)(v3[16] - v3[15]) >> 4);
    }
    *((void *)v12 + 1objc_destroyWeak((id *)this + 6) = v3[18];

LABEL_80:
    id v42 = (void *)v3[1];
    if (v42)
    {
      do
      {
        uint64_t v43 = v42;
        id v42 = (void *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        uint64_t v43 = (void *)v3[2];
        BOOL v44 = *v43 == (void)v3;
        double v3 = v43;
      }
      while (!v44);
    }
    double v3 = v43;
  }
  while (v43 != v46);
}

void sub_1BD039F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);

  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,0>(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)a1;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      double v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<NSString * const {__strong},HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722090;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722090;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1722090;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD03A258(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722090;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1) + 72;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722120;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1722120;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C187B8A0);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_1F1722120;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BD03A4F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722120;
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete,HDStatisticsTimeInterval>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&,std::function<HDStatisticsCombined const&<HDStatisticsDiscrete,HDStatisticsTimeInterval> ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#2}>,HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F17221B0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17221B0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addStatisticsFromFinishedBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>(HKStatistics *,HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>> const&)::{lambda(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)#1}>,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const& ()(HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval> const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 592))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    unint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD03A900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 592))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = a1 + 120;
    do
    {
      uint64_t v6 = *(void *)(a1 + 568);
      uint64_t v7 = *(void *)(a1 + 560);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        id v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        float v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(v5);
        HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, *(double *)(a1 + 128));
        unint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        unint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD03AB8C(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 264, *(void *)(a2 + 24), v9);
        long long v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 152) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v33;
          *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v5, v6);
          long long v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          long long v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            long long v39 = *(char **)(a1 + 104);
            long long v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v44 + 1objc_destroyWeak((id *)this + 6) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 4_Block_object_dispose(&STACK[0x230], 8) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)long long v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(void *)(a1 + 160) = v7;
          *(double *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(a1 + 17objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(a1 + 184) = v9;
          *(unsigned char *)(a1 + 192) = v3;
          *(unsigned char *)(a1 + 193) = v10;
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_canonicalSourceIDForSourceID(v5, v9);
          unint64_t v49 = HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + objc_destroyWeak((id *)this + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((unsigned char *)v49 + 64) = v3;
            *((unsigned char *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 456);
        unint64_t v19 = *(void *)(a1 + 464);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 448);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v27 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          unint64_t v30 = *(char **)(a1 + 448);
          long long v29 = *(char **)(a1 + 456);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            long long v29 = *(char **)(a1 + 448);
          }
          *(void *)(a1 + 44_Block_object_dispose(&STACK[0x230], 8) = v27;
          *(void *)(a1 + 45objc_destroyWeak((id *)this + 6) = v20;
          *(void *)(a1 + 464) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v18 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 45objc_destroyWeak((id *)this + 6) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 594))
  {
    *(unsigned char *)(a1 + 59objc_destroyWeak((id *)this + 6) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 59objc_destroyWeak((id *)this + 6) = 0;
    unint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      unint64_t v2 = v4;
    }
  }
}

void sub_1BD03B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 448), *(void *)(a1 + 456), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 456) - *(void *)(a1 + 448)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD03B184(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = (id *)(a1 + 40);
  objc_storeStrong((id *)(a1 + 472), *(id *)(a1 + 40));
  unint64_t v9 = *(void **)(a1 + 208);
  *(double *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = a3;
  *(double *)(a1 + 1objc_destroyWeak((id *)this + 6) = a4;
  *(double *)(a1 + 64) = a3;
  *(void *)(a1 + 112) = *(void *)(a1 + 104);
  long long v10 = 0uLL;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 17objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if (v9)
  {
    *(void *)(a1 + 21objc_destroyWeak((id *)this + 6) = v9;
    operator delete(v9);
    long long v10 = 0uLL;
  }
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = v10;
  *(_OWORD *)(a1 + 224) = v10;
  if (*(void *)(a1 + 256))
  {
    uint64_t v11 = *(void *)(a1 + 248);
    BOOL v12 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = a1 + 248;
    *(void *)(v11 + 1objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = 0;
    *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = 0;
    if (v12[1]) {
      unint64_t v13 = (void *)v12[1];
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      double v14 = (void *)v13[2];
      if (v14)
      {
        long long v15 = (void *)*v14;
        if ((void *)*v14 == v13)
        {
          void *v14 = 0;
          while (1)
          {
            double v17 = (void *)v14[1];
            if (!v17) {
              break;
            }
            do
            {
              double v14 = v17;
              double v17 = (void *)*v17;
            }
            while (v17);
          }
        }
        else
        {
          for (v14[1] = 0; v15; long long v15 = (void *)v14[1])
          {
            do
            {
              double v14 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(v13);
        for (uint64_t i = (void *)v14[2]; i; uint64_t i = (void *)i[2])
          double v14 = i;
        unint64_t v13 = v14;
      }
    }
    std::__tree<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>>::destroy(v13);
  }
  objc_storeStrong(v8, *(id *)(a1 + 472));
  *(void *)(a1 + 45objc_destroyWeak((id *)this + 6) = *(void *)(a1 + 448);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 596))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 59objc_destroyWeak((id *)this + 6) = 0;
  }
}

void sub_1BD03B354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 592))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD03B428(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        long long v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      unint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      unint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 592) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    void v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD03B878(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C40E18B10D7);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD03BA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  void v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  void v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_statisticsFromFinishedBucket(v15, v15 + 120);
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD03BD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 592)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v53;
                  *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 5objc_destroyWeak((id *)this + 6) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + _Block_object_dispose(&STACK[0x230], 8) = v60;
                    *(_OWORD *)(v65 + 1objc_destroyWeak((id *)this + 6) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                double v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 1objc_destroyWeak((id *)this + 6) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + _Block_object_dispose(&STACK[0x230], 8) = v71;
                    *(_OWORD *)(v72 + 1objc_destroyWeak((id *)this + 6) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 1objc_destroyWeak((id *)this + 6) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 1objc_destroyWeak((id *)this + 6) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + _Block_object_dispose(&STACK[0x230], 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 1objc_destroyWeak((id *)this + 6) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 1objc_destroyWeak((id *)this + 6) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 1objc_destroyWeak((id *)this + 6) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 13objc_destroyWeak((id *)this + 6) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + _Block_object_dispose(&STACK[0x230], 8) = v15;
      *(_OWORD *)(v20 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  void v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  void v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  void v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD03CA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  void v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD03CB08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsCombinedI20HDStatisticsDiscrete24HDStatisticsTimeIntervalEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1722260;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 5objc_destroyWeak((id *)this + 6) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 9objc_destroyWeak((id *)this + 6) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 56_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_WORD *)(a1 + 600) = 1;
  *(unsigned char *)(a1 + 602) = 0;
  *(unsigned char *)(a1 + 604) = 0;
  *(void *)(a1 + 60_Block_object_dispose(&STACK[0x230], 8) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 61objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1722260;
  unint64_t v2 = *(void **)(a1 + 632);
  if (v2)
  {
    *(void *)(a1 + 640) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 568);
  if (v3)
  {
    *(void *)(a1 + 57objc_destroyWeak((id *)this + 6) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 5objc_destroyWeak((id *)this + 6) = a2;
    *(unsigned char *)(result + 600) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);
}

void sub_1BD03CCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 60_Block_object_dispose(&STACK[0x230], 8) = v4;
    id v3 = v5;
  }
}

void sub_1BD03CD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 77, a2);
  id v7 = a2;
  id v4 = a1[77];
  id v5 = a1[74];
  a1[74] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[74]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 272) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v3;
}

void sub_1BD03CF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 600))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD03CFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 602))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 601))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 603)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 640);
    unint64_t v18 = *(void *)(a1 + 648);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 632);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 1objc_destroyWeak((id *)this + 6) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 640);
      double v33 = *(char **)(a1 + 632);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 632);
      }
      *(void *)(a1 + 632) = v28;
      *(void *)(a1 + 640) = v21;
      *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 1objc_destroyWeak((id *)this + 6) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 640) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD03D254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 602))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 602) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 601)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 624);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_561];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 624);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 624);
  *(void *)(a1 + 624) = 0;

  *(unsigned char *)(a1 + 601) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 632);
    *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = 0;
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 632) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 632);
      BOOL v37 = *(long long **)(a1 + 640);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 1objc_destroyWeak((id *)this + 6) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 640);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 640) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 632);
  unint64_t v39 = *(void *)(a1 + 640);
  *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 640) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 576) != *(void *)(a1 + 568))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 576) != *(void *)(a1 + 568));
  }
  *(unsigned char *)(a1 + 602) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 604))
    {
      *(unsigned char *)(a1 + 604) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 602) = 0;
LABEL_83:

  return v7;
}

void sub_1BD03D958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 602) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 603) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 602)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 602)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 624);
    *(void *)(a1 + 624) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 601) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 601))
  {
    int v8 = *(void **)(a1 + 624);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 624);
      *(void *)(a1 + 624) = v9;

      int v8 = *(void **)(a1 + 624);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD03DC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 600) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    void v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 600) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD03DDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 600) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 600) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v3_Block_object_dispose(&STACK[0x230], 8) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsDiscrete>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 360);
  if (v8 != a1 + 368)
  {
    HDStatisticsRelative<HDStatisticsDiscrete>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 568);
  if (v11 != *(int8x16_t **)(a1 + 576))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD03E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v61 = a2;
  *(unsigned char *)(a1 + 600) = [v61 decodeBoolForKey:@"needs_config"];
  id v3 = v61;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v66, 0, -1.79769313e308, 1.79769313e308);
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v109 = 0;
  id v64 = v3;
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)[v64 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v109]);
  uint64_t v63 = a1;
  long long v101 = &unk_1F1726FA0;
  uint64_t v102 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  int v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  uint64_t v65 = v103;
  if (v102)
  {
    uint64_t v73 = 0;
    memset(v76, 0, sizeof(v76));
    long long __p = 0;
    memset(&v80[8], 0, 66);
    long long v81 = 0u;
    long long v82 = 0u;
    LOWORD(v83) = 0;
    uint64_t v86 = 0;
    unint64_t v79 = 0;
    uint64_t v78 = 0;
    *(_DWORD *)uint64_t v80 = 0;
    int64_t v85 = 0;
    uint64_t v84 = &v85;
    long long v87 = 0u;
    long long v88 = 0u;
    int v89 = 1065353216;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    uint64_t v93 = 0;
    int v94 = 1065353216;
    long long v95 = 0u;
    long long v96 = 0u;
    int v97 = 1065353216;
    long long v98 = 0u;
    long long v99 = 0u;
    int v100 = 1065353216;
    int8x16_t v69 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    uint64_t v4 = *(void *)(v102 + 72);
    uint64_t v70 = *(void *)(v102 + 64);
    char v71 = *(unsigned char *)(v102 + 185);
    char v72 = *(unsigned char *)(v102 + 186);
    int8x16_t v74 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    uint64_t v75 = v4;
    uint64_t v6 = *(void *)(v102 + 80);
    uint64_t v5 = *(void *)(v102 + 88);
    uint64_t v62 = (void *)v102;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= v79)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v79 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v79 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v78;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          void v19[2] = v10;
          void v19[3] = v11;
          *((_WORD *)v19 + 1objc_destroyWeak((id *)this + 6) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          uint64_t v78 = (char *)(v19 + 6);
          unint64_t v79 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 1objc_destroyWeak((id *)this + 6) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        uint64_t v78 = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    long long v23 = (void *)v62[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsDiscrete>::unarchive((uint64_t)&v110, v23);
      *(_OWORD *)&v80[64] = v114;
      long long v81 = v115;
      long long v82 = v116;
      uint64_t v83 = v117;
      *(_OWORD *)uint64_t v80 = v110;
      *(_OWORD *)&v80[16] = v111;
      *(_OWORD *)&v80[32] = v112;
      *(_OWORD *)&v80[48] = v113;
    }
    long long v24 = (void **)v62[17];
    long long v25 = (void **)v62[18];
    while (v24 != v25)
    {
      uint64_t v26 = (uint64_t)*v24;
      HDStatisticsRelative<HDStatisticsDiscrete>::unarchive((uint64_t)&v110, *v24);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v85;
      char v29 = &v85;
      char v30 = &v85;
      if (v85)
      {
        do
        {
          while (1)
          {
            char v30 = (uint64_t **)v28;
            uint64_t v31 = v28[4];
            if (v31 <= v27) {
              break;
            }
            BOOL v28 = *v30;
            char v29 = v30;
            if (!*v30) {
              goto LABEL_33;
            }
          }
          if (v31 >= v27)
          {
            double v33 = (char *)v30;
            goto LABEL_36;
          }
          BOOL v28 = v30[1];
        }
        while (v28);
        char v29 = v30 + 1;
      }
LABEL_33:
      double v33 = (char *)operator new(0xA0uLL);
      *((void *)v33 + 4) = v27;
      *(_OWORD *)(v33 + 40) = 0u;
      *(_OWORD *)(v33 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v33 + 72) = 0u;
      *(_OWORD *)(v33 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v33 + 104) = 0u;
      *(_OWORD *)(v33 + 120) = 0u;
      *(_OWORD *)(v33 + 13objc_destroyWeak((id *)this + 6) = 0u;
      *((void *)v33 + 19) = 0;
      *(void *)double v33 = 0;
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = v30;
      void *v29 = (uint64_t *)v33;
      int v32 = (uint64_t *)v33;
      if (*v84)
      {
        uint64_t v84 = (uint64_t **)*v84;
        int v32 = *v29;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v32);
      ++v86;
LABEL_36:
      uint64_t v34 = v117;
      long long v35 = v116;
      long long v36 = v115;
      *(_OWORD *)(v33 + 104) = v114;
      *(_OWORD *)(v33 + 120) = v36;
      *(_OWORD *)(v33 + 13objc_destroyWeak((id *)this + 6) = v35;
      long long v37 = v113;
      long long v38 = v112;
      long long v39 = v111;
      *(_OWORD *)(v33 + 40) = v110;
      *((void *)v33 + 19) = v34;
      *(_OWORD *)(v33 + 5objc_destroyWeak((id *)this + 6) = v39;
      *(_OWORD *)(v33 + 72) = v38;
      ++v24;
      *(_OWORD *)(v33 + 8_Block_object_dispose(&STACK[0x230], 8) = v37;
    }
    uint64_t v40 = v62[5];
    for (uint64_t i = v62[6]; v40 != i; v40 += 8)
    {
      double v43 = *(double *)(*(void *)v40 + 8);
      double v42 = *(double *)(*(void *)v40 + 16);
      if (v43 >= v42) {
        double v44 = *(double *)(*(void *)v40 + 16);
      }
      else {
        double v44 = *(double *)(*(void *)v40 + 8);
      }
      if (v42 < v43) {
        double v42 = *(double *)(*(void *)v40 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v76, v44, v42);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((uint64_t)v66, (uint64_t)&v69);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)&v69);
  }
  uint64_t v45 = v104;
  uint64_t v46 = v105;
  if (v104 != v105)
  {
    unint64_t v47 = *((void *)&v67 + 1);
    do
    {
      uint64_t v48 = *(void *)(*(void *)v45 + 24);
      uint64_t v49 = *(void *)(*(void *)v45 + 32);
      uint64_t v50 = *(void *)(*(void *)v45 + 8);
      uint64_t v51 = *(void *)(*(void *)v45 + 16);
      if (v47 >= (unint64_t)v68)
      {
        uint64_t v52 = (void *)v67;
        unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v47 - v67) >> 3);
        unint64_t v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3) > v54) {
          unint64_t v54 = 0x999999999999999ALL * ((uint64_t)(v68 - v67) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v68 - v67) >> 3) >= 0x333333333333333) {
          unint64_t v55 = 0x666666666666666;
        }
        else {
          unint64_t v55 = v54;
        }
        if (v55)
        {
          unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v55);
          unint64_t v47 = *((void *)&v67 + 1);
          uint64_t v52 = (void *)v67;
        }
        else
        {
          uint64_t v56 = 0;
        }
        unint64_t v57 = v55 + 40 * v53;
        *(void *)unint64_t v57 = v49;
        *(void *)(v57 + _Block_object_dispose(&STACK[0x230], 8) = v48;
        *(void *)(v57 + 1objc_destroyWeak((id *)this + 6) = v50;
        *(void *)(v57 + 24) = v51;
        *(_WORD *)(v57 + 32) = 1;
        unint64_t v58 = v57;
        if ((void *)v47 != v52)
        {
          do
          {
            long long v59 = *(_OWORD *)(v47 - 40);
            long long v60 = *(_OWORD *)(v47 - 24);
            *(_WORD *)(v58 - _Block_object_dispose(&STACK[0x230], 8) = *(_WORD *)(v47 - 8);
            *(_OWORD *)(v58 - 24) = v60;
            *(_OWORD *)(v58 - 40) = v59;
            v58 -= 40;
            v47 -= 40;
          }
          while ((void *)v47 != v52);
          uint64_t v52 = (void *)v67;
        }
        unint64_t v47 = v57 + 40;
        *(void *)&long long v67 = v58;
        *((void *)&v67 + 1) = v57 + 40;
        *(void *)&long long v68 = v55 + 40 * v56;
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(void *)unint64_t v47 = v49;
        *(void *)(v47 + _Block_object_dispose(&STACK[0x230], 8) = v48;
        *(void *)(v47 + 1objc_destroyWeak((id *)this + 6) = v50;
        *(void *)(v47 + 24) = v51;
        *(_WORD *)(v47 + 32) = 1;
        v47 += 40;
      }
      *((void *)&v67 + 1) = v47;
      v45 += 8;
    }
    while (v45 != v46);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((void *)(v63 + 112), (uint64_t)&v65);
  if ((void)v67)
  {
    *((void *)&v67 + 1) = v67;
    operator delete((void *)v67);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v66);
}

void sub_1BD03E8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x3E8]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = a4;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x230], 8) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 17objc_destroyWeak((id *)this + 6) = 0u;
  *(_WORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21objc_destroyWeak((id *)this + 6) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)(a1 + 29objc_destroyWeak((id *)this + 6) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 33objc_destroyWeak((id *)this + 6) = 0u;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 1065353216;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_DWORD *)(a1 + 440) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 456);
  if (v2)
  {
    *(void *)(a1 + 464) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 408);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 368);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 328);
  unint64_t v2 = *(void **)(a1 + 304);
  if (v2)
  {
    *(void *)(a1 + 312) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 264);
  std::__tree<long>::destroy(*(void **)(a1 + 248));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  unint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 616));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 600) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD03EE04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 57), (__n128 *)(a2 + 456));
  uint64_t v4 = *(void *)(a2 + 480);
  *(void *)(a2 + 480) = 0;
  uint64_t v5 = (void *)a1[60];
  a1[60] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 184);
  long long v13 = *(_OWORD *)(a2 + 200);
  long long v14 = *(_OWORD *)(a2 + 216);
  uint64_t v15 = *(void *)(a2 + 232);
  long long v16 = *(_OWORD *)(a2 + 120);
  long long v17 = *(_OWORD *)(a2 + 136);
  long long v18 = *(_OWORD *)(a2 + 152);
  long long v19 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = 0;
  uint64_t v20 = (void *)(a1 + 248);
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v19;
  *(_OWORD *)(a1 + 152) = v18;
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = v17;
  *(_OWORD *)(a1 + 120) = v16;
  *(void *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 21objc_destroyWeak((id *)this + 6) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 184) = v12;
  *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = 0;
  long long v21 = *(void **)(a2 + 240);
  if (v21 != (void *)(a2 + 248))
  {
    long long v22 = 0;
    uint64_t v23 = (void *)(a1 + 248);
    while (1)
    {
      uint64_t v24 = v21[4];
      char v25 = (void *)(a1 + 248);
      if (v23 == v20) {
        goto LABEL_12;
      }
      int v26 = v22;
      id v27 = (void *)(a1 + 248);
      if (v22)
      {
        do
        {
          char v25 = v26;
          int v26 = (void *)v26[1];
        }
        while (v26);
      }
      else
      {
        do
        {
          char v25 = (void *)v27[2];
          BOOL v28 = *v25 == (void)v27;
          id v27 = v25;
        }
        while (v28);
      }
      if (v25[4] < v24)
      {
LABEL_12:
        if (v22) {
          uint64_t v29 = (uint64_t **)v25;
        }
        else {
          uint64_t v29 = (uint64_t **)(a1 + 248);
        }
        if (v22) {
          char v30 = (uint64_t **)(v25 + 1);
        }
        else {
          char v30 = (uint64_t **)(a1 + 248);
        }
        if (!*v30)
        {
LABEL_28:
          double v33 = (uint64_t *)operator new(0xA0uLL);
          long long v34 = *((_OWORD *)v21 + 2);
          long long v35 = *((_OWORD *)v21 + 3);
          long long v36 = *((_OWORD *)v21 + 5);
          *((_OWORD *)v33 + 4) = *((_OWORD *)v21 + 4);
          *((_OWORD *)v33 + 5) = v36;
          *((_OWORD *)v33 + 2) = v34;
          *((_OWORD *)v33 + 3) = v35;
          long long v37 = *((_OWORD *)v21 + 6);
          long long v38 = *((_OWORD *)v21 + 7);
          long long v39 = *((_OWORD *)v21 + 9);
          *((_OWORD *)v33 + _Block_object_dispose(&STACK[0x230], 8) = *((_OWORD *)v21 + 8);
          *((_OWORD *)v33 + 9) = v39;
          *((_OWORD *)v33 + objc_destroyWeak((id *)this + 6) = v37;
          *((_OWORD *)v33 + 7) = v38;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 240), (uint64_t)v29, v30, v33);
        }
      }
      else
      {
        char v30 = (uint64_t **)(a1 + 248);
        uint64_t v29 = (uint64_t **)(a1 + 248);
        if (!v22) {
          goto LABEL_28;
        }
        uint64_t v31 = v22;
        while (1)
        {
          while (1)
          {
            uint64_t v29 = (uint64_t **)v31;
            uint64_t v32 = v31[4];
            if (v32 <= v24) {
              break;
            }
            uint64_t v31 = *v29;
            char v30 = v29;
            if (!*v29) {
              goto LABEL_28;
            }
          }
          if (v32 >= v24) {
            break;
          }
          uint64_t v31 = v29[1];
          if (!v31)
          {
            char v30 = v29 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v40 = (void *)v21[1];
      if (v40)
      {
        do
        {
          int8x16_t v41 = v40;
          uint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          int8x16_t v41 = (void *)v21[2];
          BOOL v28 = *v41 == (void)v21;
          long long v21 = v41;
        }
        while (!v28);
      }
      if (v41 == (void *)(a2 + 248)) {
        break;
      }
      long long v22 = (void *)*v20;
      uint64_t v23 = *(void **)(a1 + 240);
      long long v21 = v41;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 264, a2 + 264);
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 304), *(const void **)(a2 + 304), *(void *)(a2 + 312), (uint64_t)(*(void *)(a2 + 312) - *(void *)(a2 + 304)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 328, a2 + 328);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 368, a2 + 368);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 408, a2 + 408);
  return a1;
}

void sub_1BD03F1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  long long v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 312) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  uint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  long long v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 9objc_destroyWeak((id *)this + 6) = 0;
  long long v10 = *(_OWORD *)(a2 + 200);
  long long v11 = *(_OWORD *)(a2 + 216);
  uint64_t v12 = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 232) = v12;
  *(_OWORD *)(a1 + 21objc_destroyWeak((id *)this + 6) = v11;
  *(_OWORD *)(a1 + 200) = v10;
  long long v13 = *(_OWORD *)(a2 + 120);
  long long v14 = *(_OWORD *)(a2 + 136);
  long long v15 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v15;
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = v14;
  *(_OWORD *)(a1 + 120) = v13;
  uint64_t v16 = a1 + 248;
  std::__tree<long>::destroy(*(void **)(a1 + 248));
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  long long v17 = (void *)(a2 + 248);
  uint64_t v18 = *(void *)(a2 + 248);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = v19;
  if (v19)
  {
    *(void *)(v18 + 1objc_destroyWeak((id *)this + 6) = v16;
    *(void *)(a2 + 240) = v17;
    *long long v17 = 0;
    *(void *)(a2 + 25objc_destroyWeak((id *)this + 6) = 0;
  }
  else
  {
    *(void *)(a1 + 240) = v16;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 264, (uint64_t *)(a2 + 264));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 304, (__n128 *)(a2 + 304));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 328, (uint64_t *)(a2 + 328));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 368, (uint64_t *)(a2 + 368));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 408, (uint64_t *)(a2 + 408));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  double v5 = *a2;
  id v6 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v7 = a2 + 5;
  if (v5 != -1.79769313e308) {
    long long v7 = a2;
  }
  uint64_t v103 = (uint64_t)a2;
  id v104 = (id)[v6 initWithTimeIntervalSinceReferenceDate:*v7];
  if (a2[1] == 1.79769313e308) {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v9 = (void *)v8;
  id v10 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(id *)(a1 + 16);
    if ([v11 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v12 = [v11 underlyingSampleType];

      id v10 = (id)v12;
    }
  }
  uint64_t v13 = [objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v10 startDate:v104 endDate:v9];
  uint64_t v14 = a1;
  if (*(unsigned char *)(a1 + 24))
  {
    int8x8_t prime = (int8x8_t)(a1 + 48);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      unint64_t v2 = (unint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v16 = *(uint64_t **)(v103 + 304);
      long long v17 = *(uint64_t **)(v103 + 312);
      while (v16 != v17)
      {
        uint64_t v18 = *v16;
        id v19 = objc_loadWeakRetained(*(id **)&prime);
        uint64_t v20 = [v19 sourceForSourceID:v18];

        if (v20)
        {
          if (([(id)v2 containsObject:v20] & 1) == 0) {
            [(id)v2 addObject:v20];
          }
        }

        ++v16;
      }
      int8x8_t prime = (int8x8_t)[(id)v2 copy];
      [(id)v13 _setSources:*(void *)&prime];

      uint64_t v14 = a1;
    }
  }

  v116[0] = &unk_1F1722330;
  uint64_t v117 = v116;
  id v105 = (id)v13;
  uint64_t v107 = *(void *)(v14 + 24);
  long long v21 = *(_OWORD *)(v103 + 200);
  long long v112 = *(_OWORD *)(v103 + 184);
  long long v113 = v21;
  long long v114 = *(_OWORD *)(v103 + 216);
  uint64_t v115 = *(void *)(v103 + 232);
  long long v22 = *(_OWORD *)(v103 + 136);
  *(_OWORD *)long long __p = *(_OWORD *)(v103 + 120);
  long long v109 = v22;
  long long v23 = *(_OWORD *)(v103 + 168);
  long long v110 = *(_OWORD *)(v103 + 152);
  long long v111 = v23;
  if (!v117) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v24 = (double *)(*(uint64_t (**)(void *, void **))(*v117 + 48))(v117, __p);
  double v26 = *v24;
  double v25 = v24[1];
  double v27 = v24[2];
  uint64_t v28 = *((void *)v24 + 3);
  double v30 = v24[4];
  double v29 = v24[5];
  double v31 = v24[6];
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = _HKStatisticsOptionBaselineRelativeQuantities();
  long long v34 = *(void **)(a1 + 16);
  if ((v33 & v32) != 0) {
    [v34 _unitForChangeInCanonicalUnit];
  }
  else {
  uint64_t v106 = [v34 canonicalUnit];
  }
  if ((v107 & 2) != 0)
  {
    uint64_t v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v106 doubleValue:v26];
    [v105 setAverageQuantity:v13];
  }
  if ((v107 & 4) != 0)
  {
    uint64_t v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v106 doubleValue:v27];
    [v105 setMinimumQuantity:v13];
  }
  if ((v107 & 8) != 0)
  {
    uint64_t v13 = [MEMORY[0x1E4F2B370] quantityWithUnit:v106 doubleValue:v25];
    [v105 setMaximumQuantity:v13];
  }
  if ((v107 & 0x20) != 0)
  {
    long long v35 = [MEMORY[0x1E4F2B370] quantityWithUnit:v106 doubleValue:v30];
    [v105 setMostRecentQuantity:v35];

    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v29, v31);
    [v105 setMostRecentQuantityDateInterval:v13];
  }
  [v105 setDataCount:v28];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_163;
  }
  if ((v107 & 2) != 0) {
    id v99 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v99 = 0;
  }
  if ((v107 & 4) != 0) {
    id v98 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v98 = 0;
  }
  if ((v107 & 8) != 0) {
    id v96 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v96 = 0;
  }
  if ((v107 & 0x20) != 0)
  {
    id v95 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v97 = 0;
    id v95 = 0;
  }
  id v101 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v109 = 0u;
  LODWORD(v110) = 1065353216;
  long long v36 = *(void **)(v103 + 240);
  if (v36 == (void *)(v103 + 248)) {
    goto LABEL_154;
  }
  do
  {
    long long v37 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(v103, v36[4]);
    long long v38 = v37;
    if (!v37) {
      goto LABEL_121;
    }
    unint64_t v39 = [v37 hash];
    unint64_t v40 = v39;
    unint64_t v41 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_64;
    }
    uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v42.i16[0] = vaddlv_u8(v42);
    unint64_t v43 = v42.u32[0];
    if (v42.u32[0] > 1uLL)
    {
      unint64_t v2 = v39;
      if ((void *)v39 >= __p[1]) {
        unint64_t v2 = v39 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v2 = ((unint64_t)__p[1] - 1) & v39;
    }
    double v44 = (uint64_t *)*((void *)__p[0] + v2);
    if (!v44 || (uint64_t v13 = *v44) == 0)
    {
LABEL_64:
      uint64_t v13 = (uint64_t)operator new(0x90uLL);
      *(void *)uint64_t v13 = 0;
      *(void *)(v13 + _Block_object_dispose(&STACK[0x230], 8) = v40;
      *(void *)(v13 + 1objc_destroyWeak((id *)this + 6) = v38;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(void *)(v13 + 13objc_destroyWeak((id *)this + 6) = 0;
      float v49 = (float)(unint64_t)(*((void *)&v109 + 1) + 1);
      if (v41 && (float)(*(float *)&v110 * (float)v41) >= v49)
      {
LABEL_110:
        id v64 = __p[0];
        uint64_t v65 = (uint64_t *)*((void *)__p[0] + v2);
        if (v65)
        {
          *(void *)uint64_t v13 = *v65;
        }
        else
        {
          *(void *)uint64_t v13 = v109;
          *(void *)&long long v109 = v13;
          v64[v2] = &v109;
          if (!*(void *)v13)
          {
LABEL_119:
            ++*((void *)&v109 + 1);
            goto LABEL_120;
          }
          unint64_t v66 = *(void *)(*(void *)v13 + 8);
          if ((v41 & (v41 - 1)) != 0)
          {
            if (v66 >= v41) {
              v66 %= v41;
            }
          }
          else
          {
            v66 &= v41 - 1;
          }
          uint64_t v65 = (uint64_t *)((char *)__p[0] + 8 * v66);
        }
        uint64_t *v65 = v13;
        goto LABEL_119;
      }
      BOOL v50 = (v41 & (v41 - 1)) != 0;
      if (v41 < 3) {
        BOOL v50 = 1;
      }
      unint64_t v51 = v50 | (2 * v41);
      unint64_t v52 = vcvtps_u32_f32(v49 / *(float *)&v110);
      if (v51 <= v52) {
        int8x8_t prime = (int8x8_t)v52;
      }
      else {
        int8x8_t prime = (int8x8_t)v51;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v41 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_76;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v59 = vcvtps_u32_f32((float)*((unint64_t *)&v109 + 1) / *(float *)&v110);
        if (__p[1] < (void *)3
          || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
        {
          unint64_t v59 = std::__next_prime(v59);
        }
        else
        {
          uint64_t v61 = 1 << -(char)__clz(v59 - 1);
          if (v59 >= 2) {
            unint64_t v59 = v61;
          }
        }
        if (*(void *)&prime <= v59) {
          int8x8_t prime = (int8x8_t)v59;
        }
        if (*(void *)&prime >= v41)
        {
          unint64_t v41 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_76:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v53 = operator new(8 * *(void *)&prime);
            unint64_t v54 = __p[0];
            __p[0] = v53;
            if (v54) {
              operator delete(v54);
            }
            uint64_t v55 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v55++) = 0;
            while (*(void *)&prime != v55);
            uint64_t v56 = (void **)v109;
            if ((void)v109)
            {
              unint64_t v57 = *(void *)(v109 + 8);
              uint8x8_t v58 = (uint8x8_t)vcnt_s8(prime);
              v58.i16[0] = vaddlv_u8(v58);
              if (v58.u32[0] > 1uLL)
              {
                if (v57 >= *(void *)&prime) {
                  v57 %= *(void *)&prime;
                }
              }
              else
              {
                v57 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v57) = &v109;
              for (uint64_t i = *v56; i; v57 = v63)
              {
                unint64_t v63 = i[1];
                if (v58.u32[0] > 1uLL)
                {
                  if (v63 >= *(void *)&prime) {
                    v63 %= *(void *)&prime;
                  }
                }
                else
                {
                  v63 &= *(void *)&prime - 1;
                }
                if (v63 != v57)
                {
                  if (!*((void *)__p[0] + v63))
                  {
                    *((void *)__p[0] + v63) = v56;
                    goto LABEL_101;
                  }
                  char *v56 = (void *)*i;
                  *uint64_t i = **((void **)__p[0] + v63);
                  **((void **)__p[0] + v63) = i;
                  uint64_t i = v56;
                }
                unint64_t v63 = v57;
LABEL_101:
                uint64_t v56 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v41 = (unint64_t)prime;
            goto LABEL_105;
          }
          long long v76 = __p[0];
          __p[0] = 0;
          if (v76) {
            operator delete(v76);
          }
          unint64_t v41 = 0;
          __p[1] = 0;
        }
      }
LABEL_105:
      if ((v41 & (v41 - 1)) != 0)
      {
        if (v40 >= v41) {
          unint64_t v2 = v40 % v41;
        }
        else {
          unint64_t v2 = v40;
        }
      }
      else
      {
        unint64_t v2 = (v41 - 1) & v40;
      }
      goto LABEL_110;
    }
    unint64_t v100 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v45 = *(void *)(v13 + 8);
      if (v45 == v40) {
        break;
      }
      if (v43 > 1)
      {
        if (v45 >= v41) {
          v45 %= v41;
        }
      }
      else
      {
        v45 &= v100;
      }
      if (v45 != v2) {
        goto LABEL_64;
      }
LABEL_63:
      uint64_t v13 = *(void *)v13;
      if (!v13) {
        goto LABEL_64;
      }
    }
    int8x8_t prime = (int8x8_t)*(id *)(v13 + 16);
    id v46 = v38;
    unint64_t v47 = v46;
    if ((id)prime != v46)
    {
      char v48 = [*(id *)&prime isEqualToString:v46];

      if (v48) {
        goto LABEL_120;
      }
      goto LABEL_63;
    }

LABEL_120:
    long long v67 = *(_OWORD *)(v36 + 5);
    long long v68 = *(_OWORD *)(v36 + 7);
    long long v69 = *(_OWORD *)(v36 + 9);
    *(_OWORD *)(v13 + 72) = *(_OWORD *)(v36 + 11);
    *(_OWORD *)(v13 + 5objc_destroyWeak((id *)this + 6) = v69;
    *(_OWORD *)(v13 + 40) = v68;
    *(_OWORD *)(v13 + 24) = v67;
    long long v70 = *(_OWORD *)(v36 + 13);
    long long v71 = *(_OWORD *)(v36 + 15);
    long long v72 = *(_OWORD *)(v36 + 17);
    *(void *)(v13 + 13objc_destroyWeak((id *)this + 6) = v36[19];
    *(_OWORD *)(v13 + 120) = v72;
    *(_OWORD *)(v13 + 104) = v71;
    *(_OWORD *)(v13 + 8_Block_object_dispose(&STACK[0x230], 8) = v70;

LABEL_121:
    uint64_t v73 = (void *)v36[1];
    if (v73)
    {
      do
      {
        int8x16_t v74 = v73;
        uint64_t v73 = (void *)*v73;
      }
      while (v73);
    }
    else
    {
      do
      {
        int8x16_t v74 = (void *)v36[2];
        BOOL v75 = *v74 == (void)v36;
        long long v36 = v74;
      }
      while (!v75);
    }
    long long v36 = v74;
  }
  while (v74 != (void *)(v103 + 248));
  uint64_t v77 = (uint64_t **)v109;
  if ((void)v109)
  {
    int8x8_t prime = (int8x8_t)0x1E4F28000uLL;
    do
    {
      uint64_t v78 = v77[2];
      if ((v107 & 2) != 0)
      {
        if (!v117) {
          goto LABEL_181;
        }
        unint64_t v79 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v106, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)v77 + 3));
        [v99 setObject:v79 forKeyedSubscript:v78];
      }
      if ((v107 & 4) != 0)
      {
        if (!v117) {
          goto LABEL_181;
        }
        uint64_t v80 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v106, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)v77 + 3) + 16));
        [v98 setObject:v80 forKeyedSubscript:v78];
      }
      if ((v107 & 8) != 0)
      {
        if (!v117) {
          goto LABEL_181;
        }
        long long v81 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v106, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)v77 + 3) + 8));
        [v96 setObject:v81 forKeyedSubscript:v78];
      }
      if ((v107 & 0x20) != 0)
      {
        if (!v117) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v82 = (*(uint64_t (**)(void *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)v77 + 3);
        double v83 = *(double *)(v82 + 40);
        double v84 = *(double *)(v82 + 48);
        int64_t v85 = [MEMORY[0x1E4F2B370] quantityWithUnit:v106 doubleValue:*(double *)(v82 + 32)];
        [v95 setObject:v85 forKeyedSubscript:v78];

        uint64_t v86 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v83, v84);
        [v97 setObject:v86 forKeyedSubscript:v78];
      }
      if (!v117) {
LABEL_181:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      uint64_t v13 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v117 + 48))(v117, (uint64_t *)v77 + 3) + 24));
      [v101 setObject:v13 forKeyedSubscript:v78];

      uint64_t v77 = (uint64_t **)*v77;
    }
    while (v77);
  }
LABEL_154:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v107 & 2) != 0) {
    [v105 setAverageQuantityBySource:v99];
  }
  if ((v107 & 4) != 0) {
    [v105 setMinimumQuantityBySource:v98];
  }
  if ((v107 & 8) != 0) {
    [v105 setMaximumQuantityBySource:v96];
  }
  if ((v107 & 0x20) != 0)
  {
    [v105 setMostRecentQuantityBySource:v95];
    [v105 setMostRecentQuantityDateIntervalBySource:v97];
  }
  [v105 setDataCountBySource:v101];

LABEL_163:
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::~__value_func[abi:ne180100](v116);
  long long v87 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  long long v88 = [v105 averageQuantity];
  if (v88)
  {
    uint64_t v13 = [v105 averageQuantity];
    if (([(id)v13 isCompatibleWithUnit:v87] & 1) == 0)
    {

      goto LABEL_177;
    }
  }
  int v89 = [v105 minimumQuantity];
  if (v89)
  {
    int8x8_t prime = [v105 minimumQuantity];
    if (![*(id *)&prime isCompatibleWithUnit:v87])
    {
      int v90 = 1;
      goto LABEL_171;
    }
  }
  long long v91 = [v105 maximumQuantity];
  if (v91)
  {
    long long v92 = [v105 maximumQuantity];
    int v93 = [v92 isCompatibleWithUnit:v87];

    int v90 = v93 ^ 1;
    if (v89) {
      goto LABEL_171;
    }
LABEL_175:
    if (!v88) {
      goto LABEL_176;
    }
LABEL_172:

    if ((v90 & 1) == 0) {
      goto LABEL_178;
    }
LABEL_177:
    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v87 format];
    goto LABEL_178;
  }
  int v90 = 0;
  if (!v89) {
    goto LABEL_175;
  }
LABEL_171:

  if (v88) {
    goto LABEL_172;
  }
LABEL_176:

  if (v90) {
    goto LABEL_177;
  }
LABEL_178:

  return v105;
}

void sub_1BD040220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::~__value_func[abi:ne180100]((void *)(v23 - 176));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 288);
  uint64_t v2 = *(void *)(a1 + 304);
  if (v1 != (*(void *)(a1 + 312) - v2) >> 3)
  {
    long long v4 = (void **)(a1 + 304);
    *(void *)(a1 + 312) = v2;
    std::vector<long long>::reserve((void **)(a1 + 304), v1);
    double v5 = *(void **)(a1 + 280);
    if (v5)
    {
      id v6 = *(char **)(a1 + 312);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 320);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 304);
            id v6 = *(char **)(a1 + 312);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          uint64_t v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 304) = v16;
          *(void *)(a1 + 312) = v9;
          *(void *)(a1 + 320) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)id v6 = v7;
          uint64_t v9 = v6 + 8;
        }
        *(void *)(a1 + 312) = v9;
        double v5 = (void *)*v5;
        id v6 = v9;
      }
      while (v5);
    }
    uint64_t v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD040628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    unint64_t v100 = (char **)(a1 + 96);
    uint64_t v98 = a1 + 120;
    location = (id *)(a1 + 88);
    id v6 = (void *)(a1 + 248);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *unint64_t v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            uint8x8_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            unint64_t v45 = *(char **)(a1 + 96);
            double v44 = *(char **)(a1 + 104);
            id v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              double v44 = *v100;
            }
            *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v102.double var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v97 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_135:
            long long v87 = *(void **)(a1 + 240);
            if (v87 != v6)
            {
              do
              {
                long long v88 = (void *)v87[1];
                if (v88)
                {
                  do
                  {
                    int v89 = v88;
                    long long v88 = (void *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    int v89 = (void *)v87[2];
                    BOOL v90 = *v89 == (void)v87;
                    long long v87 = v89;
                  }
                  while (!v90);
                }
                long long v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_149;
          }
          int64_t v99 = 0;
          char v57 = 0;
          uint8x8_t v58 = v7;
          while (2)
          {
            long long v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.double var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.double var2 = v59;
            *(double *)&v102.var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              uint8x8_t v60 = *(_OWORD **)(a1 + 104);
              unint64_t v61 = *(void *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                unint64_t v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (void)*v100) >> 4);
                if (2 * v67 > v66) {
                  unint64_t v66 = 2 * v67;
                }
                if (v67 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v68 = 0x555555555555555;
                }
                else {
                  unint64_t v68 = v66;
                }
                if (v68) {
                  unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                }
                else {
                  uint64_t v69 = 0;
                }
                uint64_t v73 = (_OWORD *)(v68 + 48 * v65);
                long long v74 = *(_OWORD *)v58;
                long long v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *uint64_t v73 = v74;
                uint64_t v77 = *(char **)(a1 + 96);
                long long v76 = *(char **)(a1 + 104);
                uint64_t v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    long long v79 = *((_OWORD *)v76 - 3);
                    long long v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  long long v76 = *v100;
                }
                id v64 = v73 + 3;
                *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v78;
                *(void *)(a1 + 104) = v73 + 3;
                *(void *)(a1 + 112) = v68 + 48 * v69;
                if (v76) {
                  operator delete(v76);
                }
              }
              else
              {
                long long v62 = *(_OWORD *)v58;
                long long v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *uint8x8_t v60 = v62;
                id v64 = v60 + 3;
              }
              *(void *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8) {
                goto LABEL_135;
              }
              continue;
            }
            break;
          }
          double var2 = v102.var2;
          if (v102.var2 > v38) {
            double var2 = v38;
          }
          v102.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1]) {
              goto LABEL_134;
            }
          }
          if (v57)
          {
            unint64_t var3 = v102.var3;
            if (v99 == v102.var3 || *(unsigned char *)(a1 + 24)) {
              HDStatisticsRelative<HDStatisticsDiscrete>::addSample(v98, &v102);
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsDiscrete>::addSample(v98, &v102);
            unint64_t var3 = v102.var3;
            int64_t v99 = v102.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_133;
          }
          long long v81 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v81) {
            goto LABEL_132;
          }
          uint64_t v82 = [v97 objectForKeyedSubscript:v81];
          double v83 = v82;
          if (v82)
          {
            if ([v82 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              char v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            double v84 = [NSNumber numberWithLongLong:var3];
            [v97 setObject:v84 forKeyedSubscript:v81];
          }
          unint64_t v85 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(a1, var3);
          uint64_t v86 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v85);
          HDStatisticsRelative<HDStatisticsDiscrete>::addSample((uint64_t)v86, &v102);
          goto LABEL_131;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v102.double var0 = *v7;
        v102.double var1 = v13;
        v102.double var2 = v14;
        v102.unint64_t var3 = v15;
        v102.var4 = v18;
        v102.var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&long long v104 = v25;
        *((void *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsRelative<HDStatisticsDiscrete>::addSample(v98, &v102);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v55 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(a1, v15);
            uint64_t v56 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(a1, v55);
            HDStatisticsRelative<HDStatisticsDiscrete>::addSample((uint64_t)v56, &v102);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          long long v91 = v104;
          long long v92 = *v100;
          *(_OWORD *)long long v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((void *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a2;
LABEL_149:
      double v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        int v94 = [MEMORY[0x1E4F28B00] currentHandler];
        id v95 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsDiscrete>]"];
        [v94 handleFailureInFunction:v95 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v93 = *(double *)(a1 + 56);
      }
      double v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1BD040DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HDStatisticsRelative<HDStatisticsDiscrete>::addSample(uint64_t result, const HDRawQuantitySample *a2)
{
  int v2 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v2 = 1;
  }
  if (v2)
  {
    if (v2 == 1)
    {
      if (!*(_DWORD *)result)
      {
        *(_OWORD *)(result + 24) = 0u;
        *(_OWORD *)(result + _Block_object_dispose(&STACK[0x230], 8) = 0u;
        uint64_t v4 = result + 8;
        long long v5 = *(_OWORD *)(result + 96);
        *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
        int v6 = 1;
        goto LABEL_16;
      }
    }
    else if (v2 == 2)
    {
      if (*(_DWORD *)result == 2)
      {
        uint64_t v3 = result + 8;
        return HDStatisticsDiscrete::addSample(v3, a2);
      }
      *(_OWORD *)(result + 24) = 0u;
      *(_OWORD *)(result + _Block_object_dispose(&STACK[0x230], 8) = 0u;
      uint64_t v4 = result + 8;
      long long v5 = *(_OWORD *)(result + 96);
      *(_OWORD *)(result + 40) = *(_OWORD *)(result + 80);
      int v6 = 2;
LABEL_16:
      *(_DWORD *)BOOL result = v6;
      *(void *)(result + 72) = 0;
      *(_WORD *)(result + 72) = *(_WORD *)(result + 112);
      *(_OWORD *)(result + 5objc_destroyWeak((id *)this + 6) = v5;
      uint64_t v3 = v4;
      return HDStatisticsDiscrete::addSample(v3, a2);
    }
  }
  else if (!*(_DWORD *)result && !*(void *)(result + 32))
  {
    uint64_t v3 = result + 8;
    return HDStatisticsDiscrete::addSample(v3, a2);
  }
  return result;
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  long long v5 = *(void **)(a1 + 248);
  uint64_t v3 = (uint64_t **)(a1 + 248);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  int v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (!v8) {
      int v6 = (uint64_t **)v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    int v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    int v6 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    long long v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 328), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 368);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD04105C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  uint64_t v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 408);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD041140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsDiscrete>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xA0uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 5objc_destroyWeak((id *)this + 6) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 13objc_destroyWeak((id *)this + 6) = 0u;
    *((void *)v9 + 19) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                __int16 v105 = *(char **)(*(void *)a3 + 304);
                uint64_t v106 = *(char **)(*(void *)a3 + 312);
                uint64_t v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 312);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                uint64_t v107 = *(char **)(*(void *)a3 + 312);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            long long v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    uint64_t v118 = *(char **)(*(void *)a3 + 304);
                    long long v119 = *(char **)(*(void *)a3 + 312);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 312);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 312);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 1objc_destroyWeak((id *)this + 6) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 304);
                          uint64_t v126 = *(char **)(*(void *)a3 + 312);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 312);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 312);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 1objc_destroyWeak((id *)this + 6) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  long long v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 304);
                  v205 = *(char **)(*(void *)a3 + 312);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 312);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 312);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 304);
                      v213 = *(char **)(*(void *)a3 + 312);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 312);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 1objc_destroyWeak((id *)this + 6) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                long long v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      uint64_t v137 = *(char **)(*(void *)a3 + 304);
                      v136 = *(char **)(*(void *)a3 + 312);
                      uint64_t v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 312);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            uint64_t v138 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 304);
                  uint64_t v143 = *(char **)(*(void *)a3 + 312);
                  unint64_t v145 = v144;
                  uint64_t v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    uint64_t v146 = *(char **)(*(void *)a3 + 312);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        unint64_t v145 = *(char **)(*(void *)a3 + 312);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 1objc_destroyWeak((id *)this + 6) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            uint64_t v154 = *(char **)(*(void *)a3 + 304);
                            uint64_t v155 = *(char **)(*(void *)a3 + 312);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 312);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 312);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 304);
                          v159 = *(char **)(*(void *)a3 + 312);
                          char v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 312);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                char v161 = *(char **)(*(void *)a3 + 312);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 1objc_destroyWeak((id *)this + 6) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 1objc_destroyWeak((id *)this + 6) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 304);
                      v175 = *(char **)(*(void *)a3 + 312);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 312);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 304);
                      v188 = *(char **)(*(void *)a3 + 312);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 312);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 312);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 304);
                          v196 = *(char **)(*(void *)a3 + 312);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 312);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 312);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 1objc_destroyWeak((id *)this + 6) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 304);
            double v27 = *(char **)(*(void *)a3 + 312);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 312);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 312);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 304);
          uint64_t v69 = *(char **)(*(void *)a3 + 312);
          if (v68 == v69)
          {
            long long v71 = *(char **)(*(void *)a3 + 304);
            long long v70 = v71;
          }
          else
          {
            long long v70 = *(char **)(*(void *)a3 + 304);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                long long v70 = *(char **)(*(void *)a3 + 312);
                break;
              }
            }
            long long v71 = *(char **)(*(void *)a3 + 304);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                long long v71 = *(char **)(*(void *)a3 + 312);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  uint64_t v78 = *(char **)(v75 + 304);
                  long long v79 = *(char **)(v75 + 312);
                  long long v80 = v78;
                  long long v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    long long v81 = *(char **)(v75 + 312);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 312);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 304);
                uint64_t v73 = v74;
              }
              else
              {
                uint64_t v73 = *(char **)(*(void *)a3 + 304);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    uint64_t v73 = *(char **)(*(void *)a3 + 312);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 304);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 312);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          uint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            uint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 304);
              uint64_t v86 = *(char **)(v83 + 312);
              long long v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 312);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    long long v87 = *(char **)(v83 + 312);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *uint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              double v93 = *(char **)(v91 + 304);
              int v94 = *(char **)(v91 + 312);
              if (v93 == v94)
              {
                id v96 = *(char **)(v91 + 304);
                id v95 = v96;
              }
              else
              {
                id v95 = *(char **)(v91 + 304);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    id v95 = *(char **)(v91 + 312);
                    break;
                  }
                }
                id v96 = *(char **)(v91 + 304);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    id v96 = *(char **)(v91 + 312);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int64_t v99 = v93;
                uint64_t v98 = v93;
              }
              else
              {
                uint64_t v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    uint64_t v98 = v94;
                    break;
                  }
                }
                int64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          unint64_t v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v102;
          }
          a5 = 0;
          *unint64_t v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 304);
          double v34 = *(char **)(v24 + 312);
          double v35 = v33;
          long long v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            long long v36 = *(char **)(v24 + 312);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 312);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                double v44 = *(char **)(v24 + 304);
                unint64_t v45 = *(char **)(v24 + 312);
                id v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 312);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      id v46 = *(char **)(v24 + 312);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 304);
            double v40 = *(char **)(v24 + 312);
            double v41 = v39;
            uint8x8_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint8x8_t v42 = *(char **)(v24 + 312);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 312);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 304);
              unint64_t v55 = *(char **)(v52 + 312);
              uint64_t v56 = v54;
              char v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                char v57 = *(char **)(v52 + 312);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    uint64_t v56 = *(char **)(v52 + 312);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 304);
              uint8x8_t v60 = *(char **)(v52 + 312);
              unint64_t v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 312);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 312);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 304);
  uint64_t v7 = *(char **)(*(void *)a4 + 312);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 304);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 304);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 312);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 304);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 312);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 304);
      unint64_t v15 = *(char **)(*(void *)a4 + 312);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 312);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 312);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)id v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 304);
          uint64_t v25 = *(char **)(*(void *)a4 + 312);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 312);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 312);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)long long v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 304);
        int v11 = v12;
      }
      else
      {
        int v11 = *(char **)(*(void *)a4 + 304);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            int v11 = *(char **)(*(void *)a4 + 312);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 304);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 312);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)long long v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      double v40 = *(char **)(*(void *)a4 + 304);
      double v41 = *(char **)(*(void *)a4 + 312);
      uint8x8_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 312);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint8x8_t v42 = *(char **)(*(void *)a4 + 312);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 304);
      int v11 = *(char **)(*(void *)a3 + 312);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 312);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 312);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        long long *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 304);
      uint64_t v24 = *(char **)(*(void *)a3 + 312);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 312);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 312);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 304);
            long long v31 = *(char **)(*(void *)a3 + 312);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 312);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 312);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 1objc_destroyWeak((id *)this + 6) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 304);
    uint64_t v14 = *(char **)(*(void *)a5 + 312);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 312);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 312);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 304);
        uint64_t v23 = *(char **)(*(void *)a5 + 312);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 312);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 312);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 304);
            long long v32 = *(char **)(*(void *)a5 + 312);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 312);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 312);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)double v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 304);
    long long v16 = *(char **)(*(void *)a6 + 312);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 312);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 312);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 304);
        uint64_t v25 = *(char **)(*(void *)a6 + 312);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 312);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 312);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 304);
            long long v34 = *(char **)(*(void *)a6 + 312);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 312);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 312);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint8x8_t v42 = *(char **)(*(void *)a6 + 304);
                uint64_t v43 = *(char **)(*(void *)a6 + 312);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 312);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 312);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1722330;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1722330;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>> const&)::{lambda(HDStatisticsRelative<HDStatisticsDiscrete> const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsRelative<HDStatisticsDiscrete> const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 600))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD043308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 600))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 576);
      uint64_t v7 = *(void *)(a1 + 568);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD043594(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 272, *(void *)(a2 + 24), v9);
        long long v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 160) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v33;
          *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(v5, v6);
          long long v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          long long v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            long long v39 = *(char **)(a1 + 104);
            long long v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v44 + 1objc_destroyWeak((id *)this + 6) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 4_Block_object_dispose(&STACK[0x230], 8) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)long long v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 240) || *(double *)(a1 + 216) <= v6)
        {
          *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = v7;
          *(double *)(a1 + 21objc_destroyWeak((id *)this + 6) = v6;
          *(double *)(a1 + 224) = v8;
          *(void *)(a1 + 232) = v9;
          *(unsigned char *)(a1 + 240) = v3;
          *(unsigned char *)(a1 + 241) = v10;
          if (!*(unsigned char *)(a1 + 200) || *(double *)(a1 + 176) <= v6)
          {
            *(void *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v7;
            *(double *)(a1 + 17objc_destroyWeak((id *)this + 6) = v6;
            *(double *)(a1 + 184) = v8;
            *(void *)(a1 + 192) = v9;
            *(unsigned char *)(a1 + 200) = v3;
            *(unsigned char *)(a1 + 201) = v10;
          }
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_canonicalSourceIDForSourceID(v5, v9);
          long long v49 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 112) || *((double *)v49 + 11) <= v6)
          {
            v49[10] = v7;
            *((double *)v49 + 11) = v6;
            *((double *)v49 + 12) = v8;
            v49[13] = (uint64_t *)v9;
            *((unsigned char *)v49 + 112) = v3;
            *((unsigned char *)v49 + 113) = v10;
            if (!*((unsigned char *)v49 + 72) || *((double *)v49 + 6) <= v6)
            {
              v49[5] = v7;
              *((double *)v49 + objc_destroyWeak((id *)this + 6) = v6;
              *((double *)v49 + 7) = v8;
              v49[8] = (uint64_t *)v9;
              *((unsigned char *)v49 + 72) = v3;
              *((unsigned char *)v49 + 73) = v10;
            }
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 464);
        unint64_t v19 = *(void *)(a1 + 472);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 456);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v27 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          long long v30 = *(char **)(a1 + 456);
          long long v29 = *(char **)(a1 + 464);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            long long v29 = *(char **)(a1 + 456);
          }
          *(void *)(a1 + 45objc_destroyWeak((id *)this + 6) = v27;
          *(void *)(a1 + 464) = v20;
          *(void *)(a1 + 472) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v18 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 464) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 602))
  {
    *(unsigned char *)(a1 + 604) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 604) = 0;
    int v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      int v2 = v4;
    }
  }
}

void sub_1BD043AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 456), *(void *)(a1 + 464), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 464) - *(void *)(a1 + 456)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD043BDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 480), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 13objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 16_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(void *)(v8 + 200) = 0;
  if (*(void *)(v8 + 224))
  {
    unint64_t v9 = *(void **)(a1 + 248);
    uint64_t v10 = *(void *)(a1 + 256);
    *(void *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = a1 + 256;
    *(void *)(v10 + 1objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 264) = 0;
    if (v9[1]) {
      uint64_t v11 = (void *)v9[1];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      BOOL v12 = (void *)v11[2];
      if (v12)
      {
        uint64_t v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          *BOOL v12 = 0;
          while (1)
          {
            long long v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              BOOL v12 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; uint64_t v13 = (void *)v12[1])
          {
            do
            {
              BOOL v12 = v13;
              uint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          BOOL v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 480));
  *(void *)(a1 + 464) = *(void *)(a1 + 456);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 604))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 604) = 0;
  }
}

void sub_1BD043DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 600))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD043E74(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      unint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        uint64_t v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      uint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      uint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 600) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    void v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD0442C4(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C409B2FA8CALL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD0444A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  void v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  void v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsDiscrete>>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD044754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 600)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsDiscrete>>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v53;
                  *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 5objc_destroyWeak((id *)this + 6) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + _Block_object_dispose(&STACK[0x230], 8) = v60;
                    *(_OWORD *)(v65 + 1objc_destroyWeak((id *)this + 6) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                uint64_t v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 1objc_destroyWeak((id *)this + 6) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + _Block_object_dispose(&STACK[0x230], 8) = v71;
                    *(_OWORD *)(v72 + 1objc_destroyWeak((id *)this + 6) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 1objc_destroyWeak((id *)this + 6) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 1objc_destroyWeak((id *)this + 6) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + _Block_object_dispose(&STACK[0x230], 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 1objc_destroyWeak((id *)this + 6) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 1objc_destroyWeak((id *)this + 6) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 1objc_destroyWeak((id *)this + 6) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 13objc_destroyWeak((id *)this + 6) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + _Block_object_dispose(&STACK[0x230], 8) = v15;
      *(_OWORD *)(v20 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  void v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  void v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  void v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD0454B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  void v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsDiscrete>>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD045554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsDiscreteEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

void HDStatisticsRelative<HDStatisticsDiscrete>::archive(uint64_t a1, int *a2)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 112);
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(void *)a1 = &unk_1F171B978;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0;
  statistics::Statistics::makePrimaryStatistics(a1);
  HDStatisticsDiscrete::archive((int8x16_t *)(a2 + 2), (uint64_t)v6);
  statistics::Statistics::operator=(*(statistics **)(a1 + 128), (uint64_t)v6);
  statistics::Statistics::~Statistics((statistics::Statistics *)v6);
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 204) |= 0x100u;
  *(void *)(a1 + 13objc_destroyWeak((id *)this + 6) = v5;
  statistics::Statistics::makeMostRecentDatum(a1);
  v6[0] = &unk_1F17206F8;
  int v10 = 127;
  int8x16_t v7 = vextq_s8(*((int8x16_t *)a2 + 5), *((int8x16_t *)a2 + 5), 8uLL);
  v6[1] = *((void *)a2 + 12);
  void v6[2] = *((void *)a2 + 13);
  __int16 v8 = 0;
  char v9 = 0;
  statistics::RawQuantitySample::operator=(*v4, (uint64_t)v6);
  PB::Base::~Base((PB::Base *)v6);
}

void sub_1BD045684(_Unwind_Exception *a1)
{
  statistics::Statistics::~Statistics(v1);
  _Unwind_Resume(a1);
}

double HDStatisticsRelative<HDStatisticsDiscrete>::unarchive(uint64_t a1, void *a2)
{
  *(_WORD *)(a1 + 72) = 0;
  int8x16_t v2 = 0uLL;
  *(_OWORD *)(a1 + 5objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0u;
  *(_WORD *)(a1 + 112) = 0;
  uint64_t v3 = a2[16];
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 24);
    int8x16_t v5 = *(int8x16_t *)(v3 + 88);
    uint64_t v6 = *(void *)(v3 + 104);
    uint64_t v7 = *(void *)(v3 + 112);
    if (v7)
    {
      int8x16_t v2 = *(int8x16_t *)(v7 + 24);
      uint64_t v8 = *(void *)(v7 + 8);
      char v9 = 1;
      uint64_t v7 = *(void *)(v7 + 16);
    }
    else
    {
      char v9 = 0;
      uint64_t v8 = 0;
    }
    *(int8x16_t *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = vextq_s8(v5, v5, 8uLL);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v4;
    int8x16_t v2 = vextq_s8(v2, v2, 8uLL);
    *(int8x16_t *)(a1 + 40) = v2;
    *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = v8;
    *(void *)(a1 + 64) = v7;
    *(unsigned char *)(a1 + 72) = v9;
    *(unsigned char *)(a1 + 73) = 0;
  }
  *(_DWORD *)a1 = a2[17];
  uint64_t v10 = a2[14];
  if (v10)
  {
    v2.i64[0] = *(void *)(v10 + 8);
    uint64_t v11 = *(void *)(v10 + 16);
    *(int8x16_t *)(a1 + 80) = vextq_s8(*(int8x16_t *)(v10 + 24), *(int8x16_t *)(v10 + 24), 8uLL);
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v2.i64[0];
    *(void *)(a1 + 104) = v11;
    *(_WORD *)(a1 + 112) = 1;
  }
  return *(double *)v2.i64;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F17223E0;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 5objc_destroyWeak((id *)this + 6) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 9objc_destroyWeak((id *)this + 6) = 0;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 53objc_destroyWeak((id *)this + 6) = 0u;
  *(_WORD *)(a1 + 552) = 1;
  *(unsigned char *)(a1 + 554) = 0;
  *(unsigned char *)(a1 + 55objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 560) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 56_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(void *)(a1 + 600) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F17223E0;
  int8x16_t v2 = *(void **)(a1 + 584);
  if (v2)
  {
    *(void *)(a1 + 592) = v2;
    operator delete(v2);
  }

  uint64_t v3 = *(void **)(a1 + 520);
  if (v3)
  {
    *(void *)(a1 + 52_Block_object_dispose(&STACK[0x230], 8) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 5objc_destroyWeak((id *)this + 6) = a2;
    *(unsigned char *)(result + 552) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  int8x16_t v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);
}

void sub_1BD0458EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 560) = v4;
    id v3 = v5;
  }
}

void sub_1BD045960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 71, a2);
  id v7 = a2;
  id v4 = a1[71];
  id v5 = a1[68];
  a1[68] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[68]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 264) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v3;
}

void sub_1BD045B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 552))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime((uint64_t)v4, v4[1]);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, v4);
    HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD045C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 554))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 553))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 555)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 592);
    unint64_t v18 = *(void *)(a1 + 600);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 584);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 1objc_destroyWeak((id *)this + 6) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 592);
      double v33 = *(char **)(a1 + 584);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 584);
      }
      *(void *)(a1 + 584) = v28;
      *(void *)(a1 + 592) = v21;
      *(void *)(a1 + 600) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 1objc_destroyWeak((id *)this + 6) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 592) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD045E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 554))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 554) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 553)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 576);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_570];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 576);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 576);
  *(void *)(a1 + 57objc_destroyWeak((id *)this + 6) = 0;

  *(unsigned char *)(a1 + 553) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 584);
    *(void *)(a1 + 600) = 0;
    *(void *)(a1 + 592) = 0;
    *(void *)(a1 + 584) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 584);
      BOOL v37 = *(long long **)(a1 + 592);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 1objc_destroyWeak((id *)this + 6) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 592);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 592) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 584);
  unint64_t v39 = *(void *)(a1 + 592);
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 592) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 528) != *(void *)(a1 + 520))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, (double *)(a1 + 120));
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 528) != *(void *)(a1 + 520));
  }
  *(unsigned char *)(a1 + 554) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 556))
    {
      *(unsigned char *)(a1 + 55objc_destroyWeak((id *)this + 6) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 554) = 0;
LABEL_83:

  return v7;
}

void sub_1BD04658C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 554) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 555) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 554)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 554)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 576);
    *(void *)(a1 + 57objc_destroyWeak((id *)this + 6) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 553) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 553))
  {
    int v8 = *(void **)(a1 + 576);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 576);
      *(void *)(a1 + 57objc_destroyWeak((id *)this + 6) = v9;

      int v8 = *(void **)(a1 + 576);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD04688C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 552) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    void v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 552) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD0469E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::reset(uint64_t result)
{
  *(unsigned char *)(result + 552) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 552) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v3_Block_object_dispose(&STACK[0x230], 8) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsDiscrete::archive((int8x16_t *)(a1 + 240), (uint64_t)&v39);
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 312);
  if (v8 != a1 + 320)
  {
    HDStatisticsDiscrete::archive((int8x16_t *)(v8 + 40), (uint64_t)&v39);
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 520);
  if (v11 != *(int8x16_t **)(a1 + 528))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD046DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v68 = a2;
  *(unsigned char *)(a1 + 552) = [v68 decodeBoolForKey:@"needs_config"];
  id v3 = v68;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v75, 0, -1.79769313e308, 1.79769313e308);
  long long v76 = 0u;
  long long v77 = 0u;
  v112[0] = 0;
  id v71 = v3;
  PB::Reader::Reader((PB::Reader *)v111, (const unsigned __int8 *)[v71 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:v112]);
  uint64_t v70 = a1;
  long long v104 = &unk_1F1726FA0;
  uint64_t v105 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v107 = 0;
  int v110 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v104, (PB::Reader *)v111);
  uint64_t v74 = v106;
  if (v105)
  {
    uint64_t v81 = 0;
    memset(v84, 0, sizeof(v84));
    uint64_t v89 = 0;
    long long v88 = 0;
    long long __p = 0u;
    memset(v86, 0, 74);
    long long v87 = &v88;
    long long v90 = 0u;
    long long v91 = 0u;
    int v92 = 1065353216;
    long long v93 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    uint64_t v96 = 0;
    int v97 = 1065353216;
    long long v98 = 0u;
    long long v99 = 0u;
    int v100 = 1065353216;
    long long v101 = 0u;
    long long v102 = 0u;
    int v103 = 1065353216;
    int8x16_t v78 = vextq_s8(*(int8x16_t *)(v105 + 8), *(int8x16_t *)(v105 + 8), 8uLL);
    uint64_t v4 = *(void *)(v105 + 72);
    uint64_t v79 = *(void *)(v105 + 64);
    __int16 v80 = *(_WORD *)(v105 + 185);
    int8x16_t v82 = vextq_s8(*(int8x16_t *)(v105 + 24), *(int8x16_t *)(v105 + 24), 8uLL);
    uint64_t v83 = v4;
    uint64_t v6 = *(void *)(v105 + 80);
    uint64_t v5 = *(void *)(v105 + 88);
    long long v69 = (void *)v105;
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 24);
        uint64_t v9 = *(void *)(*(void *)v6 + 32);
        uint64_t v10 = *(void *)(*(void *)v6 + 8);
        uint64_t v11 = *(void *)(*(void *)v6 + 16);
        char v12 = *(unsigned char *)(*(void *)v6 + 41);
        char v13 = *(unsigned char *)(*(void *)v6 + 40);
        if ((unint64_t)v7 >= v86[0])
        {
          int8x16_t v14 = (void *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - __p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v86[0] - __p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v86[0] - __p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86[0] - __p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = (void *)*((void *)&__p + 1);
            int8x16_t v14 = (void *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          unint64_t v19 = v17 + 48 * v15;
          *(void *)unint64_t v19 = v9;
          *(void *)(v19 + _Block_object_dispose(&STACK[0x230], 8) = v8;
          *(void *)(v19 + 1objc_destroyWeak((id *)this + 6) = v10;
          *(void *)(v19 + 24) = v11;
          *(_WORD *)(v19 + 32) = 1;
          *(unsigned char *)(v19 + 40) = 0;
          *(unsigned char *)(v19 + 41) = v12;
          *(unsigned char *)(v19 + 42) = v13;
          unint64_t v20 = v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)((char *)v7 - 21);
              *(_OWORD *)(v20 - 4_Block_object_dispose(&STACK[0x230], 8) = v21;
              *(_OWORD *)(v20 - 32) = v22;
              v20 -= 48;
              v7 -= 6;
            }
            while (v7 != v14);
            int8x16_t v14 = (void *)__p;
          }
          uint64_t v7 = (void *)(v19 + 48);
          *(void *)&long long __p = v20;
          *((void *)&__p + 1) = v19 + 48;
          v86[0] = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *uint64_t v7 = v9;
          v7[1] = v8;
          void v7[2] = v10;
          void v7[3] = v11;
          *((_WORD *)v7 + 1objc_destroyWeak((id *)this + 6) = 1;
          *((unsigned char *)v7 + 40) = 0;
          *((unsigned char *)v7 + 41) = v12;
          *((unsigned char *)v7 + 42) = v13;
          v7 += 6;
        }
        *((void *)&__p + 1) = v7;
        v6 += 8;
      }
      while (v6 != v5);
    }
    uint64_t v23 = v69[13];
    if (v23)
    {
      uint64_t v24 = *(void *)(v23 + 24);
      int8x16_t v25 = *(int8x16_t *)(v23 + 88);
      uint64_t v26 = *(void *)(v23 + 104);
      uint64_t v27 = *(void *)(v23 + 112);
      if (v27)
      {
        int8x16_t v28 = *(int8x16_t *)(v27 + 24);
        uint64_t v29 = *(void *)(v27 + 8);
        unsigned __int8 v30 = 1;
        uint64_t v27 = *(void *)(v27 + 16);
      }
      else
      {
        unsigned __int8 v30 = 0;
        int8x16_t v28 = 0uLL;
        uint64_t v29 = 0;
      }
      *(int8x16_t *)&v86[1] = vextq_s8(v25, v25, 8uLL);
      v86[3] = v26;
      v86[4] = v24;
      *(int8x16_t *)&v86[5] = vextq_s8(v28, v28, 8uLL);
      v86[7] = v29;
      v86[8] = v27;
      LOWORD(v86[9]) = v30;
    }
    int v31 = (uint64_t *)v69[17];
    int v32 = (uint64_t *)v69[18];
    while (v31 != v32)
    {
      uint64_t v33 = *v31;
      uint64_t v34 = *(void *)(*v31 + 112);
      if (v34)
      {
        int8x16_t v73 = *(int8x16_t *)(v34 + 24);
        uint64_t v35 = *(void *)(v34 + 8);
        char v36 = 1;
        uint64_t v37 = *(void *)(v34 + 16);
      }
      else
      {
        uint64_t v37 = 0;
        char v36 = 0;
        uint64_t v35 = 0;
        int8x16_t v73 = 0u;
      }
      uint64_t v38 = *(void *)(v33 + 24);
      int8x16_t v72 = *(int8x16_t *)(v33 + 88);
      uint64_t v39 = *(void *)(v33 + 104);
      uint64_t v40 = *(void *)(v33 + 144);
      int8x16_t v41 = &v88;
      __int16 v42 = &v88;
      char v43 = v88;
      if (v88)
      {
        do
        {
          while (1)
          {
            __int16 v42 = (uint64_t **)v43;
            uint64_t v44 = v43[4];
            if (v44 <= v40) {
              break;
            }
            char v43 = *v42;
            int8x16_t v41 = v42;
            if (!*v42) {
              goto LABEL_39;
            }
          }
          if (v44 >= v40)
          {
            int v46 = (char *)v42;
            goto LABEL_42;
          }
          char v43 = v42[1];
        }
        while (v43);
        int8x16_t v41 = v42 + 1;
      }
LABEL_39:
      int v46 = (char *)operator new(0x70uLL);
      *((void *)v46 + 4) = v40;
      *(_OWORD *)(v46 + 40) = 0u;
      *(_OWORD *)(v46 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v46 + 72) = 0u;
      *(_OWORD *)(v46 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *((void *)v46 + 13) = 0;
      *(void *)int v46 = 0;
      *((void *)v46 + 1) = 0;
      *((void *)v46 + 2) = v42;
      char *v41 = (uint64_t *)v46;
      uint64_t v45 = (uint64_t *)v46;
      if (*v87)
      {
        long long v87 = (uint64_t **)*v87;
        uint64_t v45 = *v41;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v88, v45);
      ++v89;
LABEL_42:
      *(int8x16_t *)(v46 + 40) = vextq_s8(v72, v72, 8uLL);
      *((void *)v46 + 7) = v39;
      *((void *)v46 + _Block_object_dispose(&STACK[0x230], 8) = v38;
      *(int8x16_t *)(v46 + 72) = vextq_s8(v73, v73, 8uLL);
      *((void *)v46 + 11) = v35;
      *((void *)v46 + 12) = v37;
      v46[104] = v36;
      ++v31;
      v46[105] = 0;
    }
    uint64_t v47 = v69[5];
    for (uint64_t i = v69[6]; v47 != i; v47 += 8)
    {
      double v50 = *(double *)(*(void *)v47 + 8);
      double v49 = *(double *)(*(void *)v47 + 16);
      if (v50 >= v49) {
        double v51 = *(double *)(*(void *)v47 + 16);
      }
      else {
        double v51 = *(double *)(*(void *)v47 + 8);
      }
      if (v49 < v50) {
        double v49 = *(double *)(*(void *)v47 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v84, v51, v49);
    }
    HDStatisticsBucket<HDStatisticsDiscrete>::operator=((uint64_t)v75, (uint64_t)&v78);
    HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)&v78);
  }
  uint64_t v52 = v107;
  uint64_t v53 = v108;
  if (v107 != v108)
  {
    unint64_t v54 = *((void *)&v76 + 1);
    do
    {
      uint64_t v55 = *(void *)(*(void *)v52 + 24);
      uint64_t v56 = *(void *)(*(void *)v52 + 32);
      uint64_t v57 = *(void *)(*(void *)v52 + 8);
      uint64_t v58 = *(void *)(*(void *)v52 + 16);
      if (v54 >= (unint64_t)v77)
      {
        long long v59 = (void *)v76;
        unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - v76) >> 3);
        unint64_t v61 = v60 + 1;
        if (v60 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v77 - v76) >> 3) > v61) {
          unint64_t v61 = 0x999999999999999ALL * ((uint64_t)(v77 - v76) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77 - v76) >> 3) >= 0x333333333333333) {
          unint64_t v62 = 0x666666666666666;
        }
        else {
          unint64_t v62 = v61;
        }
        if (v62)
        {
          unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v62);
          unint64_t v54 = *((void *)&v76 + 1);
          long long v59 = (void *)v76;
        }
        else
        {
          uint64_t v63 = 0;
        }
        unint64_t v64 = v62 + 40 * v60;
        *(void *)unint64_t v64 = v56;
        *(void *)(v64 + _Block_object_dispose(&STACK[0x230], 8) = v55;
        *(void *)(v64 + 1objc_destroyWeak((id *)this + 6) = v57;
        *(void *)(v64 + 24) = v58;
        *(_WORD *)(v64 + 32) = 1;
        unint64_t v65 = v64;
        if ((void *)v54 != v59)
        {
          do
          {
            long long v66 = *(_OWORD *)(v54 - 40);
            long long v67 = *(_OWORD *)(v54 - 24);
            *(_WORD *)(v65 - _Block_object_dispose(&STACK[0x230], 8) = *(_WORD *)(v54 - 8);
            *(_OWORD *)(v65 - 24) = v67;
            *(_OWORD *)(v65 - 40) = v66;
            v65 -= 40;
            v54 -= 40;
          }
          while ((void *)v54 != v59);
          long long v59 = (void *)v76;
        }
        unint64_t v54 = v64 + 40;
        *(void *)&long long v76 = v65;
        *((void *)&v76 + 1) = v64 + 40;
        *(void *)&long long v77 = v62 + 40 * v63;
        if (v59) {
          operator delete(v59);
        }
      }
      else
      {
        *(void *)unint64_t v54 = v56;
        *(void *)(v54 + _Block_object_dispose(&STACK[0x230], 8) = v55;
        *(void *)(v54 + 1objc_destroyWeak((id *)this + 6) = v57;
        *(void *)(v54 + 24) = v58;
        *(_WORD *)(v54 + 32) = 1;
        v54 += 40;
      }
      *((void *)&v76 + 1) = v54;
      v52 += 8;
    }
    while (v52 != v53);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v104);

  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::operator=((void *)(v70 + 112), (uint64_t)&v74);
  if ((void)v76)
  {
    *((void *)&v76 + 1) = v76;
    operator delete((void *)v76);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v75);
}

void sub_1BD047514(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)(v12 - 224));
  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = a4;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(_WORD *)(a1 + 24) = 257;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x230], 8) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 170) = 0u;
  *(void *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 21objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 24_Block_object_dispose(&STACK[0x230], 8) = 1065353216;
  *(_OWORD *)(a1 + 25objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 33objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 37objc_destroyWeak((id *)this + 6) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsDiscrete>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  int8x16_t v2 = *(void **)(a1 + 408);
  if (v2)
  {
    *(void *)(a1 + 41objc_destroyWeak((id *)this + 6) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 360);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 320);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 280);
  int8x16_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 216);
  std::__tree<long>::destroy(*(void **)(a1 + 200));
  id v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v4 = *(void **)(a1 + 64);
  if (v4)
  {
    *(void *)(a1 + 72) = v4;
    operator delete(v4);
  }

  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(uint64_t a1)
{
  uint64_t v29 = 0;
  int8x16_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v29];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v22, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v24 = 1;
  }
  uint64_t v23 = *(void *)(a1 + 56);
  char v25 = *(unsigned char *)(a1 + 24) & 1;
  if (v28 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v28, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v27, *(id *)(a1 + 568));
  if (!*(void *)(a1 + 40)) {
    int v26 = 0;
  }
  uint64_t v15 = v29;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v22);
  uint64_t v18 = v15;
  HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket((uint64_t)v19, (uint64_t)v17);
  long long __p = 0u;
  long long v21 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::operator=((void *)(a1 + 112), (uint64_t)&v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v19);
  HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 552) = 0;
  return HDStatisticsBucket<HDStatisticsDiscrete>::~HDStatisticsBucket((uint64_t)v22);
}

void sub_1BD047A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsDiscrete>::operator=(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  HDStatisticsBucket<HDStatisticsDiscrete>::operator=((uint64_t)(a1 + 1), a2 + 8);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 51), (__n128 *)(a2 + 408));
  uint64_t v4 = *(void *)(a2 + 432);
  *(void *)(a2 + 432) = 0;
  uint64_t v5 = (void *)a1[54];
  a1[54] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  uint64_t v15 = *(void *)(a2 + 184);
  long long v16 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 200) = 0;
  unint64_t v17 = (void *)(a1 + 200);
  *(void *)(a1 + 192) = a1 + 200;
  *(_OWORD *)(a1 + 120) = v16;
  *(void *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v14;
  *(_OWORD *)(a1 + 152) = v13;
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = v12;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
  uint64_t v18 = *(void **)(a2 + 192);
  if (v18 != (void *)(a2 + 200))
  {
    unint64_t v19 = 0;
    unint64_t v20 = (void *)(a1 + 200);
    while (1)
    {
      uint64_t v21 = v18[4];
      long long v22 = (void *)(a1 + 200);
      if (v20 == v17) {
        goto LABEL_12;
      }
      uint64_t v23 = v19;
      char v24 = (void *)(a1 + 200);
      if (v19)
      {
        do
        {
          long long v22 = v23;
          uint64_t v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          long long v22 = (void *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      if (v22[4] < v21)
      {
LABEL_12:
        if (v19) {
          int v26 = (uint64_t **)v22;
        }
        else {
          int v26 = (uint64_t **)(a1 + 200);
        }
        if (v19) {
          id v27 = (uint64_t **)(v22 + 1);
        }
        else {
          id v27 = (uint64_t **)(a1 + 200);
        }
        if (!*v27)
        {
LABEL_28:
          unsigned __int8 v30 = (uint64_t *)operator new(0x70uLL);
          *((_OWORD *)v30 + 2) = *((_OWORD *)v18 + 2);
          long long v31 = *((_OWORD *)v18 + 3);
          long long v32 = *((_OWORD *)v18 + 4);
          long long v33 = *((_OWORD *)v18 + 6);
          *((_OWORD *)v30 + 5) = *((_OWORD *)v18 + 5);
          *((_OWORD *)v30 + objc_destroyWeak((id *)this + 6) = v33;
          *((_OWORD *)v30 + 3) = v31;
          *((_OWORD *)v30 + 4) = v32;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 192), (uint64_t)v26, v27, v30);
        }
      }
      else
      {
        id v27 = (uint64_t **)(a1 + 200);
        int v26 = (uint64_t **)(a1 + 200);
        if (!v19) {
          goto LABEL_28;
        }
        int8x16_t v28 = v19;
        while (1)
        {
          while (1)
          {
            int v26 = (uint64_t **)v28;
            uint64_t v29 = v28[4];
            if (v29 <= v21) {
              break;
            }
            int8x16_t v28 = *v26;
            id v27 = v26;
            if (!*v26) {
              goto LABEL_28;
            }
          }
          if (v29 >= v21) {
            break;
          }
          int8x16_t v28 = v26[1];
          if (!v28)
          {
            id v27 = v26 + 1;
            goto LABEL_28;
          }
        }
      }
      uint64_t v34 = (void *)v18[1];
      if (v34)
      {
        do
        {
          uint64_t v35 = v34;
          uint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          uint64_t v35 = (void *)v18[2];
          BOOL v25 = *v35 == (void)v18;
          uint64_t v18 = v35;
        }
        while (!v25);
      }
      if (v35 == (void *)(a2 + 200)) {
        break;
      }
      unint64_t v19 = (void *)*v17;
      unint64_t v20 = *(void **)(a1 + 192);
      uint64_t v18 = v35;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 216, a2 + 216);
  *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 256), *(const void **)(a2 + 256), *(void *)(a2 + 264), (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 280, a2 + 280);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 320, a2 + 320);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 360, a2 + 360);
  return a1;
}

void sub_1BD047DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v16);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v15);
  unint64_t v19 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 264) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v13);
  std::__tree<long>::destroy(*v17);
  unint64_t v20 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v20;
    operator delete(v20);
  }
  objc_destroyWeak(location);
  uint64_t v21 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v21;
    operator delete(v21);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsDiscrete>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 9objc_destroyWeak((id *)this + 6) = 0;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 136);
  uint64_t v14 = a1 + 200;
  uint64_t v13 = *(void **)(a1 + 200);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v11;
  *(_OWORD *)(a1 + 13objc_destroyWeak((id *)this + 6) = v12;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  std::__tree<long>::destroy(v13);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v15 = (void *)(a2 + 200);
  uint64_t v16 = *(void *)(a2 + 200);
  *(void *)(a1 + 200) = v16;
  uint64_t v17 = *(void *)(a2 + 208);
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = v17;
  if (v17)
  {
    *(void *)(v16 + 1objc_destroyWeak((id *)this + 6) = v14;
    *(void *)(a2 + 192) = v15;
    void *v15 = 0;
    *(void *)(a2 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
  }
  else
  {
    *(void *)(a1 + 192) = v14;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 216, (uint64_t *)(a2 + 216));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 256, (__n128 *)(a2 + 256));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 280, (uint64_t *)(a2 + 280));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 320, (uint64_t *)(a2 + 320));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 360, (uint64_t *)(a2 + 360));
  return a1;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(uint64_t a1, double *a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  double v4 = *a2;
  id v5 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  long long v6 = a2 + 5;
  if (v4 != -1.79769313e308) {
    long long v6 = a2;
  }
  id v99 = (id)[v5 initWithTimeIntervalSinceReferenceDate:*v6];
  uint64_t v101 = (uint64_t)a2;
  if (a2[1] == 1.79769313e308) {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[6]];
  }
  else {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:a2[1]];
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = *(id *)(a1 + 16);
    if ([v10 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v11 = [v10 underlyingSampleType];

      id v9 = (id)v11;
    }
  }
  long long v12 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v9 startDate:v99 endDate:v8];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v15 = *(uint64_t **)(v101 + 256);
      uint64_t v16 = *(uint64_t **)(v101 + 264);
      while (v15 != v16)
      {
        uint64_t v17 = *v15;
        id v18 = objc_loadWeakRetained((id *)(a1 + 48));
        unint64_t v19 = [v18 sourceForSourceID:v17];

        if (v19)
        {
          if (([v14 containsObject:v19] & 1) == 0) {
            [v14 addObject:v19];
          }
        }

        ++v15;
      }
      unint64_t v20 = (void *)[v14 copy];
      [v12 _setSources:v20];
    }
  }

  v109[0] = &unk_1F17224B0;
  int v110 = v109;
  id v100 = v12;
  uint64_t v103 = *(void *)(a1 + 24);
  long long v21 = *(_OWORD *)(v101 + 136);
  long long v22 = *(_OWORD *)(v101 + 168);
  long long v106 = *(_OWORD *)(v101 + 152);
  long long v107 = v22;
  uint64_t v108 = *(void *)(v101 + 184);
  *(_OWORD *)long long __p = *(_OWORD *)(v101 + 120);
  long long v105 = v21;
  if (!v110) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v23 = (double *)(*(uint64_t (**)(void *, void **))(*v110 + 48))(v110, __p);
  double v25 = *v23;
  double v24 = v23[1];
  double v26 = v23[2];
  unint64_t v27 = *((void *)v23 + 3);
  double v29 = v23[4];
  double v28 = v23[5];
  double v30 = v23[6];
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = _HKStatisticsOptionBaselineRelativeQuantities();
  long long v33 = *(void **)(a1 + 16);
  if ((v32 & v31) != 0) {
    [v33 _unitForChangeInCanonicalUnit];
  }
  else {
  long long v102 = [v33 canonicalUnit];
  }
  if ((v103 & 2) != 0)
  {
    uint64_t v34 = [MEMORY[0x1E4F2B370] quantityWithUnit:v102 doubleValue:v25];
    [v100 setAverageQuantity:v34];
  }
  if ((v103 & 4) != 0)
  {
    uint64_t v35 = [MEMORY[0x1E4F2B370] quantityWithUnit:v102 doubleValue:v26];
    [v100 setMinimumQuantity:v35];
  }
  if ((v103 & 8) != 0)
  {
    char v36 = [MEMORY[0x1E4F2B370] quantityWithUnit:v102 doubleValue:v24];
    [v100 setMaximumQuantity:v36];
  }
  if ((v103 & 0x20) != 0)
  {
    uint64_t v37 = [MEMORY[0x1E4F2B370] quantityWithUnit:v102 doubleValue:v29];
    [v100 setMostRecentQuantity:v37];

    uint64_t v38 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v28, v30);
    [v100 setMostRecentQuantityDateInterval:v38];
  }
  [v100 setDataCount:v27];
  if ((*(unsigned char *)(a1 + 24) & 1) == 0) {
    goto LABEL_162;
  }
  if ((v103 & 2) != 0) {
    id v96 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v96 = 0;
  }
  if ((v103 & 4) != 0) {
    id v95 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v95 = 0;
  }
  if ((v103 & 8) != 0) {
    id v93 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else {
    id v93 = 0;
  }
  if ((v103 & 0x20) != 0)
  {
    id v92 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v94 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  }
  else
  {
    id v94 = 0;
    id v92 = 0;
  }
  id v98 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  *(_OWORD *)long long __p = 0u;
  long long v105 = 0u;
  LODWORD(v10objc_destroyWeak((id *)this + 6) = 1065353216;
  uint64_t v39 = *(void **)(v101 + 192);
  if (v39 == (void *)(v101 + 200)) {
    goto LABEL_153;
  }
  do
  {
    uint64_t v40 = HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(v101, v39[4]);
    int8x16_t v41 = v40;
    if (!v40) {
      goto LABEL_121;
    }
    unint64_t v42 = [v40 hash];
    unint64_t v43 = v42;
    unint64_t v44 = (unint64_t)__p[1];
    if (!__p[1]) {
      goto LABEL_64;
    }
    uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v45.i16[0] = vaddlv_u8(v45);
    unint64_t v46 = v45.u32[0];
    if (v45.u32[0] > 1uLL)
    {
      unint64_t v27 = v42;
      if ((void *)v42 >= __p[1]) {
        unint64_t v27 = v42 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v27 = ((unint64_t)__p[1] - 1) & v42;
    }
    uint64_t v47 = (void **)*((void *)__p[0] + v27);
    if (!v47 || (id v48 = (char *)*v47) == 0)
    {
LABEL_64:
      id v48 = (char *)operator new(0x60uLL);
      *(void *)id v48 = 0;
      *((void *)v48 + 1) = v43;
      *((void *)v48 + 2) = v41;
      *(_OWORD *)(v48 + 24) = 0u;
      *(_OWORD *)(v48 + 40) = 0u;
      *(_OWORD *)(v48 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v48 + 72) = 0u;
      *((void *)v48 + 11) = 0;
      float v54 = (float)(unint64_t)(*((void *)&v105 + 1) + 1);
      if (v44 && (float)(*(float *)&v106 * (float)v44) >= v54)
      {
LABEL_110:
        uint64_t v70 = __p[0];
        id v71 = (void *)*((void *)__p[0] + v27);
        if (v71)
        {
          *(void *)id v48 = *v71;
        }
        else
        {
          *(void *)id v48 = v105;
          *(void *)&long long v105 = v48;
          v70[v27] = &v105;
          if (!*(void *)v48)
          {
LABEL_119:
            ++*((void *)&v105 + 1);
            goto LABEL_120;
          }
          unint64_t v72 = *(void *)(*(void *)v48 + 8);
          if ((v44 & (v44 - 1)) != 0)
          {
            if (v72 >= v44) {
              v72 %= v44;
            }
          }
          else
          {
            v72 &= v44 - 1;
          }
          id v71 = (char *)__p[0] + 8 * v72;
        }
        *id v71 = v48;
        goto LABEL_119;
      }
      BOOL v55 = (v44 & (v44 - 1)) != 0;
      if (v44 < 3) {
        BOOL v55 = 1;
      }
      unint64_t v56 = v55 | (2 * v44);
      unint64_t v57 = vcvtps_u32_f32(v54 / *(float *)&v106);
      if (v56 <= v57) {
        int8x8_t prime = (int8x8_t)v57;
      }
      else {
        int8x8_t prime = (int8x8_t)v56;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v44 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_76;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v65 = vcvtps_u32_f32((float)*((unint64_t *)&v105 + 1) / *(float *)&v106);
        if (__p[1] < (void *)3
          || (uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v66.i16[0] = vaddlv_u8(v66), v66.u32[0] > 1uLL))
        {
          unint64_t v65 = std::__next_prime(v65);
        }
        else
        {
          uint64_t v67 = 1 << -(char)__clz(v65 - 1);
          if (v65 >= 2) {
            unint64_t v65 = v67;
          }
        }
        if (*(void *)&prime <= v65) {
          int8x8_t prime = (int8x8_t)v65;
        }
        if (*(void *)&prime >= v44)
        {
          unint64_t v44 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_76:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v59 = operator new(8 * *(void *)&prime);
            unint64_t v60 = __p[0];
            __p[0] = v59;
            if (v60) {
              operator delete(v60);
            }
            uint64_t v61 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v61++) = 0;
            while (*(void *)&prime != v61);
            unint64_t v62 = (void **)v105;
            if ((void)v105)
            {
              unint64_t v63 = *(void *)(v105 + 8);
              uint8x8_t v64 = (uint8x8_t)vcnt_s8(prime);
              v64.i16[0] = vaddlv_u8(v64);
              if (v64.u32[0] > 1uLL)
              {
                if (v63 >= *(void *)&prime) {
                  v63 %= *(void *)&prime;
                }
              }
              else
              {
                v63 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v63) = &v105;
              for (uint64_t i = *v62; i; v63 = v69)
              {
                unint64_t v69 = i[1];
                if (v64.u32[0] > 1uLL)
                {
                  if (v69 >= *(void *)&prime) {
                    v69 %= *(void *)&prime;
                  }
                }
                else
                {
                  v69 &= *(void *)&prime - 1;
                }
                if (v69 != v63)
                {
                  if (!*((void *)__p[0] + v69))
                  {
                    *((void *)__p[0] + v69) = v62;
                    goto LABEL_101;
                  }
                  *unint64_t v62 = (void *)*i;
                  *uint64_t i = **((void **)__p[0] + v69);
                  **((void **)__p[0] + v69) = i;
                  uint64_t i = v62;
                }
                unint64_t v69 = v63;
LABEL_101:
                unint64_t v62 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v44 = (unint64_t)prime;
            goto LABEL_105;
          }
          uint64_t v79 = __p[0];
          __p[0] = 0;
          if (v79) {
            operator delete(v79);
          }
          unint64_t v44 = 0;
          __p[1] = 0;
        }
      }
LABEL_105:
      if ((v44 & (v44 - 1)) != 0)
      {
        if (v43 >= v44) {
          unint64_t v27 = v43 % v44;
        }
        else {
          unint64_t v27 = v43;
        }
      }
      else
      {
        unint64_t v27 = (v44 - 1) & v43;
      }
      goto LABEL_110;
    }
    unint64_t v97 = (unint64_t)__p[1] - 1;
    while (1)
    {
      unint64_t v49 = *((void *)v48 + 1);
      if (v49 == v43) {
        break;
      }
      if (v46 > 1)
      {
        if (v49 >= v44) {
          v49 %= v44;
        }
      }
      else
      {
        v49 &= v97;
      }
      if (v49 != v27) {
        goto LABEL_64;
      }
LABEL_63:
      id v48 = *(char **)v48;
      if (!v48) {
        goto LABEL_64;
      }
    }
    id v50 = *((id *)v48 + 2);
    id v51 = v41;
    uint64_t v52 = v51;
    if (v50 != v51)
    {
      char v53 = [v50 isEqualToString:v51];

      if (v53) {
        goto LABEL_120;
      }
      goto LABEL_63;
    }

LABEL_120:
    *(_OWORD *)(v48 + 24) = *(_OWORD *)(v39 + 5);
    long long v73 = *(_OWORD *)(v39 + 7);
    long long v74 = *(_OWORD *)(v39 + 9);
    long long v75 = *(_OWORD *)(v39 + 11);
    *((void *)v48 + 11) = v39[13];
    *(_OWORD *)(v48 + 72) = v75;
    *(_OWORD *)(v48 + 5objc_destroyWeak((id *)this + 6) = v74;
    *(_OWORD *)(v48 + 40) = v73;

LABEL_121:
    long long v76 = (void *)v39[1];
    if (v76)
    {
      do
      {
        long long v77 = v76;
        long long v76 = (void *)*v76;
      }
      while (v76);
    }
    else
    {
      do
      {
        long long v77 = (void *)v39[2];
        BOOL v78 = *v77 == (void)v39;
        uint64_t v39 = v77;
      }
      while (!v78);
    }
    uint64_t v39 = v77;
  }
  while (v77 != (void *)(v101 + 200));
  for (uint64_t j = (uint64_t **)v105; j; uint64_t j = (uint64_t **)*j)
  {
    uint64_t v81 = j[2];
    if ((v103 & 2) != 0)
    {
      if (!v110) {
        goto LABEL_165;
      }
      int8x16_t v82 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v102, *(double *)(*(uint64_t (**)(void *, uint64_t *))(*v110 + 48))(v110, (uint64_t *)j + 3));
      [v96 setObject:v82 forKeyedSubscript:v81];
    }
    if ((v103 & 4) != 0)
    {
      if (!v110) {
        goto LABEL_165;
      }
      uint64_t v83 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v102, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v110 + 48))(v110, (uint64_t *)j + 3) + 16));
      [v95 setObject:v83 forKeyedSubscript:v81];
    }
    if ((v103 & 8) != 0)
    {
      if (!v110) {
        goto LABEL_165;
      }
      uint64_t v84 = objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v102, *(double *)((*(uint64_t (**)(void *, uint64_t *))(*v110 + 48))(v110, (uint64_t *)j + 3) + 8));
      [v93 setObject:v84 forKeyedSubscript:v81];
    }
    if ((v103 & 0x20) != 0)
    {
      if (!v110) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v85 = (*(uint64_t (**)(void *, uint64_t *))(*v110 + 48))(v110, (uint64_t *)j + 3);
      double v86 = *(double *)(v85 + 40);
      double v87 = *(double *)(v85 + 48);
      long long v88 = [MEMORY[0x1E4F2B370] quantityWithUnit:v102 doubleValue:*(double *)(v85 + 32)];
      [v92 setObject:v88 forKeyedSubscript:v81];

      uint64_t v89 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v86, v87);
      [v94 setObject:v89 forKeyedSubscript:v81];
    }
    if (!v110) {
LABEL_165:
    }
      std::__throw_bad_function_call[abi:ne180100]();
    long long v90 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, uint64_t *))(*v110 + 48))(v110, (uint64_t *)j + 3) + 24));
    [v98 setObject:v90 forKeyedSubscript:v81];
  }
LABEL_153:
  std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsDiscrete>>>>::~__hash_table((uint64_t)__p);
  if ((v103 & 2) != 0) {
    [v100 setAverageQuantityBySource:v96];
  }
  if ((v103 & 4) != 0) {
    [v100 setMinimumQuantityBySource:v95];
  }
  if ((v103 & 8) != 0) {
    [v100 setMaximumQuantityBySource:v93];
  }
  if ((v103 & 0x20) != 0)
  {
    [v100 setMostRecentQuantityBySource:v92];
    [v100 setMostRecentQuantityDateIntervalBySource:v94];
  }
  [v100 setDataCountBySource:v98];

LABEL_162:
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::~__value_func[abi:ne180100](v109);

  return v100;
}

void sub_1BD048C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::~__value_func[abi:ne180100]((void *)(v21 - 176));
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 240);
  uint64_t v2 = *(void *)(a1 + 256);
  if (v1 != (*(void *)(a1 + 264) - v2) >> 3)
  {
    double v4 = (void **)(a1 + 256);
    *(void *)(a1 + 264) = v2;
    std::vector<long long>::reserve((void **)(a1 + 256), v1);
    id v5 = *(void **)(a1 + 232);
    if (v5)
    {
      long long v6 = *(char **)(a1 + 264);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 272);
        if ((unint64_t)v6 >= v8)
        {
          id v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            id v10 = *(char **)(a1 + 256);
            long long v6 = *(char **)(a1 + 264);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = v16;
          *(void *)(a1 + 264) = v9;
          *(void *)(a1 + 272) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)long long v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 264) = v9;
        id v5 = (void *)*v5;
        long long v6 = v9;
      }
      while (v5);
    }
    id v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD048FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    id v100 = (char **)(a1 + 96);
    id v98 = (HDStatisticsDiscrete *)(a1 + 120);
    location = (id *)(a1 + 88);
    long long v6 = (void *)(a1 + 200);
    do
    {
      uint64_t v7 = *(double **)(a1 + 96);
      unint64_t v8 = *(long long **)(a1 + 104);
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 4);
      if (v9)
      {
        if (v9 != 1)
        {
          double v30 = a2;
          double v31 = a2;
          double v32 = v5;
          uint64_t v33 = *(void *)(a1 + 96);
          if (v7 != (double *)v8)
          {
            do
            {
              double v34 = *(double *)(v33 + 8);
              double v35 = *(double *)(v33 + 16);
              if (v34 > v32 && v34 < v31) {
                double v31 = *(double *)(v33 + 8);
              }
              if (v35 > v5) {
                double v37 = *(double *)(v33 + 16);
              }
              else {
                double v37 = v30;
              }
              if (v35 < v30)
              {
                double v32 = v5;
                double v30 = v37;
              }
              v33 += 48;
            }
            while ((long long *)v33 != v8);
          }
          if (v30 >= v31) {
            double v38 = v31;
          }
          else {
            double v38 = v30;
          }
          double v39 = *(double *)(a1 + 16);
          if (v39 > 0.0)
          {
            double v40 = v39 * floor(v38 / v39);
            double v41 = v39 * floor((v39 + v5) / v39);
            if (v40 >= v41) {
              double v38 = v40;
            }
            else {
              double v38 = v41;
            }
          }
          *id v100 = 0;
          v100[1] = 0;
          v100[2] = 0;
          if (v7 != (double *)v8)
          {
            if (v9 > 0x555555555555555) {
              std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v9);
            uint8x8_t v45 = *(char **)(a1 + 96);
            unint64_t v44 = *(char **)(a1 + 104);
            unint64_t v46 = v42;
            if (v44 != v45)
            {
              do
              {
                long long v47 = *((_OWORD *)v44 - 3);
                long long v48 = *((_OWORD *)v44 - 2);
                *(_OWORD *)(v46 - 21) = *(_OWORD *)(v44 - 21);
                *((_OWORD *)v46 - 3) = v47;
                *((_OWORD *)v46 - 2) = v48;
                v46 -= 48;
                v44 -= 48;
              }
              while (v44 != v45);
              unint64_t v44 = *v100;
            }
            *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v46;
            *(void *)(a1 + 104) = v42;
            *(void *)(a1 + 112) = &v42[48 * v43];
            if (v44) {
              operator delete(v44);
            }
          }
          HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(a1);
          id WeakRetained = objc_loadWeakRetained(location);

          if (WeakRetained)
          {
            *(void *)&v102.double var0 = a1;
            unint64_t v50 = 126 - 2 * __clz(v9);
            if (v7 == (double *)v8) {
              uint64_t v51 = 0;
            }
            else {
              uint64_t v51 = v50;
            }
            std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*,false>((unint64_t)v7, v8, (uint64_t)&v102, v51, 1);
          }
          if (*(unsigned char *)(a1 + 25)) {
            id v97 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
          }
          else {
            id v97 = 0;
          }
          if (v7 == (double *)v8)
          {
LABEL_135:
            double v87 = *(void **)(a1 + 192);
            if (v87 != v6)
            {
              do
              {
                long long v88 = (void *)v87[1];
                if (v88)
                {
                  do
                  {
                    uint64_t v89 = v88;
                    long long v88 = (void *)*v88;
                  }
                  while (v88);
                }
                else
                {
                  do
                  {
                    uint64_t v89 = (void *)v87[2];
                    BOOL v90 = *v89 == (void)v87;
                    double v87 = v89;
                  }
                  while (!v90);
                }
                double v87 = v89;
              }
              while (v89 != v6);
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v38;

            if (v7) {
              operator delete(v7);
            }
            goto LABEL_149;
          }
          int64_t v99 = 0;
          char v57 = 0;
          uint64_t v58 = v7;
          while (2)
          {
            long long v59 = *((_OWORD *)v58 + 1);
            *(_OWORD *)&v102.double var0 = *(_OWORD *)v58;
            *(_OWORD *)&v102.double var2 = v59;
            *(double *)&v102.var4 = v58[4];
            if (!v102.var4 || v102.var1 > v38)
            {
              unint64_t v60 = *(_OWORD **)(a1 + 104);
              unint64_t v61 = *(void *)(a1 + 112);
              if ((unint64_t)v60 >= v61)
              {
                unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - *v100) >> 4);
                unint64_t v66 = v65 + 1;
                if (v65 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (void)*v100) >> 4);
                if (2 * v67 > v66) {
                  unint64_t v66 = 2 * v67;
                }
                if (v67 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v68 = 0x555555555555555;
                }
                else {
                  unint64_t v68 = v66;
                }
                if (v68) {
                  unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v68);
                }
                else {
                  uint64_t v69 = 0;
                }
                long long v73 = (_OWORD *)(v68 + 48 * v65);
                long long v74 = *(_OWORD *)v58;
                long long v75 = *((_OWORD *)v58 + 2);
                v73[1] = *((_OWORD *)v58 + 1);
                v73[2] = v75;
                *long long v73 = v74;
                long long v77 = *(char **)(a1 + 96);
                long long v76 = *(char **)(a1 + 104);
                BOOL v78 = v73;
                if (v76 != v77)
                {
                  do
                  {
                    long long v79 = *((_OWORD *)v76 - 3);
                    long long v80 = *((_OWORD *)v76 - 2);
                    *(_OWORD *)((char *)v78 - 21) = *(_OWORD *)(v76 - 21);
                    *(v78 - 3) = v79;
                    *(v78 - 2) = v80;
                    v78 -= 3;
                    v76 -= 48;
                  }
                  while (v76 != v77);
                  long long v76 = *v100;
                }
                uint8x8_t v64 = v73 + 3;
                *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v78;
                *(void *)(a1 + 104) = v73 + 3;
                *(void *)(a1 + 112) = v68 + 48 * v69;
                if (v76) {
                  operator delete(v76);
                }
              }
              else
              {
                long long v62 = *(_OWORD *)v58;
                long long v63 = *((_OWORD *)v58 + 2);
                v60[1] = *((_OWORD *)v58 + 1);
                v60[2] = v63;
                *unint64_t v60 = v62;
                uint8x8_t v64 = v60 + 3;
              }
              *(void *)(a1 + 104) = v64;
LABEL_134:
              v58 += 6;
              if (v58 == (double *)v8) {
                goto LABEL_135;
              }
              continue;
            }
            break;
          }
          double var2 = v102.var2;
          if (v102.var2 > v38) {
            double var2 = v38;
          }
          v102.double var2 = var2;
          for (uint64_t i = *(double **)(a1 + 64); i != *(double **)(a1 + 72) && v102.var1 >= *i; i += 2)
          {
            if (v102.var1 < i[1]) {
              goto LABEL_134;
            }
          }
          if (v57)
          {
            unint64_t var3 = v102.var3;
            if (v99 == v102.var3 || *(unsigned char *)(a1 + 24)) {
              HDStatisticsDiscrete::addSample((uint64_t)v98, &v102);
            }
          }
          else
          {
            HDStatisticsDiscrete::addSample((uint64_t)v98, &v102);
            unint64_t var3 = v102.var3;
            int64_t v99 = v102.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_133;
          }
          uint64_t v81 = HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(a1, var3);
          if (!v81) {
            goto LABEL_132;
          }
          int8x16_t v82 = [v97 objectForKeyedSubscript:v81];
          uint64_t v83 = v82;
          if (v82)
          {
            if ([v82 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_131:

LABEL_132:
LABEL_133:
              char v57 = 1;
              goto LABEL_134;
            }
          }
          else
          {
            uint64_t v84 = [NSNumber numberWithLongLong:var3];
            [v97 setObject:v84 forKeyedSubscript:v81];
          }
          unint64_t v85 = HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(a1, var3);
          double v86 = HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(a1, v85);
          HDStatisticsDiscrete::addSample((uint64_t)v86, &v102);
          goto LABEL_131;
        }
        int v10 = *((unsigned __int8 *)v7 + 42);
        int v11 = *((unsigned __int8 *)v7 + 41);
        int v12 = *((unsigned __int8 *)v7 + 40);
        double v13 = v7[1];
        double v14 = v7[2];
        unint64_t v15 = *((void *)v7 + 3);
        char v16 = *((unsigned char *)v7 + 33);
        if (v14 <= a2) {
          double v17 = v7[2];
        }
        else {
          double v17 = a2;
        }
        if (v13 < a2) {
          int v18 = *((unsigned __int8 *)v7 + 32);
        }
        else {
          int v18 = 0;
        }
        if (v13 < a2) {
          char v19 = 0;
        }
        else {
          char v19 = *((unsigned char *)v7 + 33);
        }
        if (v13 < a2)
        {
          uint64_t v20 = 0;
        }
        else
        {
          double v17 = v7[2];
          uint64_t v20 = *((void *)v7 + 3);
        }
        if (v13 < a2) {
          double v21 = 0.0;
        }
        else {
          double v21 = v7[2];
        }
        if (v13 < a2) {
          double v22 = 0.0;
        }
        else {
          double v22 = *v7;
        }
        if (v13 < a2) {
          double v23 = 0.0;
        }
        else {
          double v23 = v7[1];
        }
        if (v13 < a2) {
          int v24 = 0;
        }
        else {
          int v24 = *((unsigned __int8 *)v7 + 32);
        }
        if (*((unsigned char *)v7 + 32))
        {
          double v14 = v17;
        }
        else
        {
          int v18 = 0;
          char v19 = 0;
          uint64_t v20 = 0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v25 = v21;
        }
        else {
          double v25 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v26 = v22;
        }
        else {
          double v26 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          double v27 = v23;
        }
        else {
          double v27 = 0.0;
        }
        if (*((unsigned char *)v7 + 32)) {
          int v28 = v24;
        }
        else {
          int v28 = 0;
        }
        v102.double var0 = *v7;
        v102.double var1 = v13;
        v102.double var2 = v14;
        v102.unint64_t var3 = v15;
        v102.var4 = v18;
        v102.var5 = v16;
        *(_DWORD *)(&v102.var5 + 1) = *(_DWORD *)((char *)v7 + 34);
        *(_WORD *)(&v102.var5 + 5) = *((_WORD *)v7 + 19);
        *(double *)&long long v103 = v26;
        *((double *)&v103 + 1) = v27;
        *(double *)&long long v104 = v25;
        *((void *)&v104 + 1) = v20;
        LOBYTE(v105) = v28;
        HIBYTE(v105) = v19;
        for (uint64_t j = *(double **)(a1 + 64); j != *(double **)(a1 + 72) && v13 >= *j; j += 2)
        {
          if (v13 < j[1])
          {
            BOOL v52 = v12 != 0;
            BOOL v53 = v11 != 0;
            BOOL v54 = v10 != 0;
            goto LABEL_145;
          }
        }
        BOOL v52 = v12 != 0;
        BOOL v53 = v11 != 0;
        BOOL v54 = v10 != 0;
        if (v18)
        {
          HDStatisticsDiscrete::addSample((uint64_t)v98, &v102);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v55 = HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(a1, v15);
            unint64_t v56 = HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(a1, v55);
            HDStatisticsDiscrete::addSample((uint64_t)v56, &v102);
          }
          BOOL v52 = 1;
          BOOL v53 = 1;
          BOOL v54 = 1;
        }
LABEL_145:
        if (v28)
        {
          LOWORD(v101) = v105;
          long long v91 = v104;
          id v92 = *v100;
          *(_OWORD *)id v92 = v103;
          *((_OWORD *)v92 + 1) = v91;
          *((void *)v92 + 4) = v101;
          v92[40] = v52;
          v92[41] = v53;
          v92[42] = v54;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
      }
      *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a2;
LABEL_149:
      double v93 = *(double *)(a1 + 56);
      if (v93 == v5)
      {
        id v94 = [MEMORY[0x1E4F28B00] currentHandler];
        id v95 = [NSString stringWithUTF8String:"void HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(double) [Statistics = HDStatisticsDiscrete]"];
        [v94 handleFailureInFunction:v95 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v93 = *(double *)(a1 + 56);
      }
      double v5 = v93;
    }
    while (v93 < a2);
  }
}

void sub_1BD049784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  double v5 = *(void **)(a1 + 200);
  id v3 = (uint64_t **)(a1 + 200);
  double v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  long long v6 = v3;
  do
  {
    uint64_t v7 = v4[4];
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = v4 + 1;
    }
    if (!v8) {
      long long v6 = (uint64_t **)v4;
    }
    double v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == v3 || (uint64_t)v6[4] > a2)
  {
LABEL_11:
    int v10 = v3 - 1;
    std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v3 - 1, a2, &v12);
    long long v6 = std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v10, a2, &v12);
  }
  return v6 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    double v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 280), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      uint64_t v7 = (void *)(a1 + 320);
      BOOL v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        int v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD049948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsDiscrete>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 360);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD049A2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsDiscrete>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsDiscrete>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsDiscrete>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  double v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0x70uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 5objc_destroyWeak((id *)this + 6) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
    *((void *)v9 + 13) = 0;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                __int16 v105 = *(char **)(*(void *)a3 + 256);
                long long v106 = *(char **)(*(void *)a3 + 264);
                long long v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 264);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                long long v107 = *(char **)(*(void *)a3 + 264);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            uint64_t v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    long long v118 = *(char **)(*(void *)a3 + 256);
                    long long v119 = *(char **)(*(void *)a3 + 264);
                    long long v120 = v118;
                    long long v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      long long v121 = *(char **)(*(void *)a3 + 264);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          long long v120 = *(char **)(*(void *)a3 + 264);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 1objc_destroyWeak((id *)this + 6) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 256);
                          uint64_t v126 = *(char **)(*(void *)a3 + 264);
                          uint64_t v127 = v125;
                          uint64_t v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            uint64_t v128 = *(char **)(*(void *)a3 + 264);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                uint64_t v127 = *(char **)(*(void *)a3 + 264);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 1objc_destroyWeak((id *)this + 6) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  uint64_t v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 256);
                  v205 = *(char **)(*(void *)a3 + 264);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 264);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 264);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 256);
                      v213 = *(char **)(*(void *)a3 + 264);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 264);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 1objc_destroyWeak((id *)this + 6) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                uint64_t v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      uint64_t v137 = *(char **)(*(void *)a3 + 256);
                      v136 = *(char **)(*(void *)a3 + 264);
                      uint64_t v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 264);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            uint64_t v138 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 256);
                  uint64_t v143 = *(char **)(*(void *)a3 + 264);
                  unint64_t v145 = v144;
                  uint64_t v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    uint64_t v146 = *(char **)(*(void *)a3 + 264);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        unint64_t v145 = *(char **)(*(void *)a3 + 264);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 1objc_destroyWeak((id *)this + 6) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            uint64_t v154 = *(char **)(*(void *)a3 + 256);
                            uint64_t v155 = *(char **)(*(void *)a3 + 264);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 264);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 264);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 256);
                          v159 = *(char **)(*(void *)a3 + 264);
                          char v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 264);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                char v161 = *(char **)(*(void *)a3 + 264);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 1objc_destroyWeak((id *)this + 6) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 1objc_destroyWeak((id *)this + 6) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 256);
                      v175 = *(char **)(*(void *)a3 + 264);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 264);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 256);
                      v188 = *(char **)(*(void *)a3 + 264);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 264);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 264);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 256);
                          v196 = *(char **)(*(void *)a3 + 264);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 264);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 264);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 1objc_destroyWeak((id *)this + 6) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            char v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            uint64_t v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            double v26 = *(char **)(*(void *)a3 + 256);
            double v27 = *(char **)(*(void *)a3 + 264);
            int v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 264);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  int v28 = *(char **)(*(void *)a3 + 264);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          unint64_t v68 = *(char **)(*(void *)a3 + 256);
          uint64_t v69 = *(char **)(*(void *)a3 + 264);
          if (v68 == v69)
          {
            id v71 = *(char **)(*(void *)a3 + 256);
            uint64_t v70 = v71;
          }
          else
          {
            uint64_t v70 = *(char **)(*(void *)a3 + 256);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                uint64_t v70 = *(char **)(*(void *)a3 + 264);
                break;
              }
            }
            id v71 = *(char **)(*(void *)a3 + 256);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                id v71 = *(char **)(*(void *)a3 + 264);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  BOOL v78 = *(char **)(v75 + 256);
                  long long v79 = *(char **)(v75 + 264);
                  long long v80 = v78;
                  uint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    uint64_t v81 = *(char **)(v75 + 264);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        long long v80 = *(char **)(v75 + 264);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 256);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 256);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 264);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 256);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 264);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          int8x16_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            int8x16_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 256);
              double v86 = *(char **)(v83 + 264);
              double v87 = v85;
              long long v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                long long v88 = *(char **)(v83 + 264);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    double v87 = *(char **)(v83 + 264);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *int8x16_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              double v93 = *(char **)(v91 + 256);
              id v94 = *(char **)(v91 + 264);
              if (v93 == v94)
              {
                id v96 = *(char **)(v91 + 256);
                id v95 = v96;
              }
              else
              {
                id v95 = *(char **)(v91 + 256);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    id v95 = *(char **)(v91 + 264);
                    break;
                  }
                }
                id v96 = *(char **)(v91 + 256);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    id v96 = *(char **)(v91 + 264);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                int64_t v99 = v93;
                id v98 = v93;
              }
              else
              {
                id v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    id v98 = v94;
                    break;
                  }
                }
                int64_t v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    int64_t v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          id v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v102;
          }
          a5 = 0;
          *id v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 256);
          double v34 = *(char **)(v24 + 264);
          double v35 = v33;
          char v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            char v36 = *(char **)(v24 + 264);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                double v35 = *(char **)(v24 + 264);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        double v37 = a2;
        if (v31 == a1)
        {
          double v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            double v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                unint64_t v44 = *(char **)(v24 + 256);
                uint8x8_t v45 = *(char **)(v24 + 264);
                unint64_t v46 = v44;
                long long v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  long long v47 = *(char **)(v24 + 264);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      unint64_t v46 = *(char **)(v24 + 264);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            double v39 = *(char **)(v24 + 256);
            double v40 = *(char **)(v24 + 264);
            double v41 = v39;
            unint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              unint64_t v42 = *(char **)(v24 + 264);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  double v41 = *(char **)(v24 + 264);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          long long v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              BOOL v54 = *(char **)(v52 + 256);
              unint64_t v55 = *(char **)(v52 + 264);
              unint64_t v56 = v54;
              char v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                char v57 = *(char **)(v52 + 264);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    unint64_t v56 = *(char **)(v52 + 264);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 256);
              unint64_t v60 = *(char **)(v52 + 264);
              unint64_t v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 264);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    unint64_t v61 = *(char **)(v52 + 264);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        long long v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v65;
        }
        *long long v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 256);
  uint64_t v7 = *(char **)(*(void *)a4 + 264);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 256);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 256);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 264);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 256);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 264);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 256);
      unint64_t v15 = *(char **)(*(void *)a4 + 264);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 264);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 264);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)unint64_t v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 256);
          uint64_t v25 = *(char **)(*(void *)a4 + 264);
          double v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 264);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                double v26 = *(char **)(*(void *)a4 + 264);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)long long v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 256);
        int v11 = v12;
      }
      else
      {
        int v11 = *(char **)(*(void *)a4 + 256);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            int v11 = *(char **)(*(void *)a4 + 264);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 256);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 264);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)long long v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      double v40 = *(char **)(*(void *)a4 + 256);
      double v41 = *(char **)(*(void *)a4 + 264);
      unint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 264);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            unint64_t v42 = *(char **)(*(void *)a4 + 264);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 256);
      int v11 = *(char **)(*(void *)a3 + 264);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 264);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 264);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        long long *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 256);
      uint64_t v24 = *(char **)(*(void *)a3 + 264);
      uint64_t v25 = v23;
      double v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        double v26 = *(char **)(*(void *)a3 + 264);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 264);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 256);
            long long v31 = *(char **)(*(void *)a3 + 264);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 264);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 264);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 1objc_destroyWeak((id *)this + 6) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 256);
    uint64_t v14 = *(char **)(*(void *)a5 + 264);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 264);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 264);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 256);
        uint64_t v23 = *(char **)(*(void *)a5 + 264);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 264);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 264);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 256);
            long long v32 = *(char **)(*(void *)a5 + 264);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 264);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 264);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)double v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsDiscrete>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsDiscrete>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 256);
    long long v16 = *(char **)(*(void *)a6 + 264);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 264);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 264);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 256);
        uint64_t v25 = *(char **)(*(void *)a6 + 264);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 264);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 264);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 256);
            long long v34 = *(char **)(*(void *)a6 + 264);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 264);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 264);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                unint64_t v42 = *(char **)(*(void *)a6 + 256);
                uint64_t v43 = *(char **)(*(void *)a6 + 264);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 264);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 264);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::~__func()
{
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F17224B0;
  return result;
}

void std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F17224B0;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1},std::allocator<void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addStatisticsFromFinishedBucket<HDStatisticsDiscrete>(HKStatistics *,HDStatisticsBucket<HDStatisticsDiscrete> const&)::{lambda(HDStatisticsDiscrete const&)#1}>,HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::target_type()
{
}

void *std::__function::__value_func<HDStatisticsDiscrete const& ()(HDStatisticsDiscrete const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 552))
  {
    if ((a3 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a4, 3, @"Cannot configure statistics collection calculator engine with a sample if we cannot merge up to the sample's start date");
      return 0;
    }
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);
  }
  double v8 = *(double *)(a2 + 8);
  if (v8 >= _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(a1))
  {
    if (*(void *)(a1 + 40) && a3) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_advanceToTime(a1, v8);
    }
    HDStatisticsCollectionEngine<HDStatisticsDiscrete>::addSample(a1 + 112, a2, a3);
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);
    return 1;
  }
  else
  {
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v8, *(double *)(a2 + 16));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v9, a4);
  }
  return v10;
}

void sub_1BD04BB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_earliestStartTimeWithoutInvalidation(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (!*(unsigned char *)(a1 + 552))
    {
      double v1 = *(double *)(a1 + 176);
      double result = *(double *)(a1 + 120);
      if (v1 <= result)
      {
        double v1 = -1.79769313e308;
      }
      else if (*(unsigned char *)(a1 + 144))
      {
        double v1 = -1.79769313e308;
      }
      if (v1 >= result) {
        return v1;
      }
      return result;
    }
    return -1.79769313e308;
  }
  double result = *(double *)(a1 + 176);
  if (result <= *(double *)(a1 + 120)) {
    return -1.79769313e308;
  }
  if (*(unsigned char *)(a1 + 144)) {
    return -1.79769313e308;
  }
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_advanceToTime(uint64_t a1, double a2)
{
  if (*(double *)(a1 + 128) <= a2)
  {
    uint64_t v4 = a1 + 112;
    uint64_t v5 = (double *)(a1 + 120);
    do
    {
      uint64_t v6 = *(void *)(a1 + 528);
      uint64_t v7 = *(void *)(a1 + 520);
      if (v6 == v7)
      {
        uint64_t v22 = 0;
        long long v15 = *(void **)(a1 + 40);
        long long v16 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:a2];
        double v8 = [v15 dateIntervalContainingDate:v16 index:&v22];

        HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v17 = v22;
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v19 = v18;
        long long v20 = [v8 endDate];
        [v20 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsDiscrete>::resetToBucket(v4, v17, v19, v21);
      }
      else
      {
        double v8 = [*(id *)(a1 + 40) dateIntervalAtIndex:*(void *)(a1 + 112) + 1];
        HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder((uint64_t)v5);
        HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime((uint64_t)v5, *(double *)(a1 + 128));
        uint64_t v9 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(a1, v5);
        uint64_t v10 = [v8 startDate];
        [v10 timeIntervalSinceReferenceDate];
        double v12 = v11;
        uint64_t v13 = [v8 endDate];
        [v13 timeIntervalSinceReferenceDate];
        HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(v4, v12, v14);
      }
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(a1, v9);
      if (v6 != v7) {
        _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(a1);
      }
    }
    while (*(double *)(a1 + 128) <= a2);
  }
}

void sub_1BD04BE14(_Unwind_Exception *exception_object)
{
}

void HDStatisticsCollectionEngine<HDStatisticsDiscrete>::addSample(uint64_t a1, uint64_t a2, int a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  if (v3)
  {
    uint64_t v5 = a1 + 8;
    double v6 = *(double *)(a2 + 8);
    if (v6 >= *(double *)(a1 + 8))
    {
      uint64_t v7 = *(uint64_t **)a2;
      double v8 = *(double *)(a2 + 16);
      unint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 33);
      double v11 = *(double *)(a1 + 16);
      if (*(_DWORD *)(a1 + 36)) {
        BOOL v12 = v6 < v11;
      }
      else {
        BOOL v12 = v6 <= v11;
      }
      if (v12)
      {
        if (v8 <= v11) {
          double v14 = *(double *)(a2 + 16);
        }
        else {
          double v14 = *(double *)(a1 + 16);
        }
        std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(a1 + 224, *(void *)(a2 + 24), v9);
        long long v15 = *(char **)(a1 + 112);
        if (v15 == *(char **)(a1 + 104) && *(uint64_t *)(a1 + 152) <= 0)
        {
          double v33 = *(double *)(a1 + 8);
          double v34 = *(double *)(a1 + 16);
          if (v6 >= v33) {
            double v33 = v6;
          }
          if (v34 >= v14) {
            double v34 = v14;
          }
          *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v33;
          *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v34;
        }
        else
        {
          if (v6 < *(double *)(a1 + 48))
          {
            double v16 = *(double *)(a1 + 8);
            if (v6 >= v16) {
              double v16 = v6;
            }
            *(double *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = v16;
          }
          if (v14 > *(double *)(a1 + 56))
          {
            double v17 = *(double *)(a1 + 16);
            if (v17 >= v14) {
              double v17 = v14;
            }
            *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v17;
          }
        }
        if (*(unsigned char *)(a1 + 32))
        {
          double v35 = *(double *)(a1 + 64);
          if (v6 < v35) {
            double v35 = v6;
          }
          *(double *)(a1 + 64) = v35;
        }
        if (a3 && v6 < *(double *)(a1 + 16))
        {
          HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(v5, v6);
          long long v15 = *(char **)(a1 + 112);
        }
        unint64_t v36 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v36)
        {
          unint64_t v38 = 0x555555555555555;
          long long v39 = *(char **)(a1 + 104);
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v39) >> 4);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v39) >> 4);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 < 0x2AAAAAAAAAAAAAALL) {
            unint64_t v38 = v41;
          }
          if (v38)
          {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v38);
            long long v39 = *(char **)(a1 + 104);
            long long v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = v38 + 48 * v40;
          *(void *)unint64_t v44 = v7;
          *(double *)(v44 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v44 + 1objc_destroyWeak((id *)this + 6) = v14;
          *(void *)(v44 + 24) = v9;
          unint64_t v45 = v38 + 48 * v43;
          *(unsigned char *)(v44 + 32) = v3;
          *(unsigned char *)(v44 + 33) = v10;
          *(_WORD *)(v44 + 40) = 0;
          *(unsigned char *)(v44 + 42) = 0;
          long long v37 = (void *)(v44 + 48);
          if (v15 != v39)
          {
            do
            {
              long long v46 = *((_OWORD *)v15 - 3);
              long long v47 = *((_OWORD *)v15 - 2);
              *(_OWORD *)(v44 - 21) = *(_OWORD *)(v15 - 21);
              *(_OWORD *)(v44 - 4_Block_object_dispose(&STACK[0x230], 8) = v46;
              *(_OWORD *)(v44 - 32) = v47;
              v44 -= 48;
              v15 -= 48;
            }
            while (v15 != v39);
            long long v39 = *(char **)(a1 + 104);
          }
          *(void *)(a1 + 104) = v44;
          *(void *)(a1 + 112) = v37;
          *(void *)(a1 + 120) = v45;
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(void *)long long v15 = v7;
          *((double *)v15 + 1) = v6;
          *((double *)v15 + 2) = v14;
          *((void *)v15 + 3) = v9;
          v15[32] = v3;
          v15[33] = v10;
          *((_WORD *)v15 + 20) = 0;
          long long v37 = v15 + 48;
          v15[42] = 0;
        }
        *(void *)(a1 + 112) = v37;
        if (!*(unsigned char *)(a1 + 192) || *(double *)(a1 + 168) <= v6)
        {
          *(void *)(a1 + 160) = v7;
          *(double *)(a1 + 16_Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(a1 + 17objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(a1 + 184) = v9;
          *(unsigned char *)(a1 + 192) = v3;
          *(unsigned char *)(a1 + 193) = v10;
        }
        if (*(unsigned char *)(a1 + 33))
        {
          unint64_t v48 = HDStatisticsBucket<HDStatisticsDiscrete>::_canonicalSourceIDForSourceID(v5, v9);
          long long v49 = HDStatisticsBucket<HDStatisticsDiscrete>::_statisticsForSource(v5, v48);
          if (!*((unsigned char *)v49 + 64) || *((double *)v49 + 5) <= v6)
          {
            v49[4] = v7;
            *((double *)v49 + 5) = v6;
            *((double *)v49 + objc_destroyWeak((id *)this + 6) = v8;
            v49[7] = (uint64_t *)v9;
            *((unsigned char *)v49 + 64) = v3;
            *((unsigned char *)v49 + 65) = v10;
          }
        }
      }
      else
      {
        if (v6 < v11) {
          double v6 = *(double *)(a1 + 16);
        }
        unint64_t v18 = *(void *)(a1 + 416);
        unint64_t v19 = *(void *)(a1 + 424);
        if (v18 >= v19)
        {
          uint64_t v21 = *(void *)(a1 + 408);
          unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0x666666666666666) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x333333333333333) {
            unint64_t v25 = 0x666666666666666;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = v25 + 40 * v22;
          unint64_t v28 = v25 + 40 * v26;
          *(void *)unint64_t v27 = v7;
          *(double *)(v27 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v27 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v27 + 24) = v9;
          *(unsigned char *)(v27 + 32) = v3;
          *(unsigned char *)(v27 + 33) = v10;
          unint64_t v20 = v27 + 40;
          long long v30 = *(char **)(a1 + 408);
          long long v29 = *(char **)(a1 + 416);
          if (v29 != v30)
          {
            do
            {
              long long v31 = *(_OWORD *)(v29 - 40);
              long long v32 = *(_OWORD *)(v29 - 24);
              *(_WORD *)(v27 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v29 - 4);
              *(_OWORD *)(v27 - 24) = v32;
              *(_OWORD *)(v27 - 40) = v31;
              v27 -= 40;
              v29 -= 40;
            }
            while (v29 != v30);
            long long v29 = *(char **)(a1 + 408);
          }
          *(void *)(a1 + 40_Block_object_dispose(&STACK[0x230], 8) = v27;
          *(void *)(a1 + 41objc_destroyWeak((id *)this + 6) = v20;
          *(void *)(a1 + 424) = v28;
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(void *)unint64_t v18 = v7;
          *(double *)(v18 + _Block_object_dispose(&STACK[0x230], 8) = v6;
          *(double *)(v18 + 1objc_destroyWeak((id *)this + 6) = v8;
          *(void *)(v18 + 24) = v9;
          *(unsigned char *)(v18 + 32) = v3;
          unint64_t v20 = v18 + 40;
          *(unsigned char *)(v18 + 33) = v10;
        }
        *(void *)(a1 + 41objc_destroyWeak((id *)this + 6) = v20;
      }
    }
  }
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_notifyForCurrentBucket(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 554))
  {
    *(unsigned char *)(a1 + 55objc_destroyWeak((id *)this + 6) = 1;
  }
  else
  {
    *(unsigned char *)(a1 + 55objc_destroyWeak((id *)this + 6) = 0;
    uint64_t v2 = (void (**)(id, void *))_Block_copy(*(const void **)(a1 + 96));
    if (v2)
    {
      uint64_t v4 = v2;
      char v3 = (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
      if (v3) {
        v4[2](v4, v3);
      }

      uint64_t v2 = v4;
    }
  }
}

void sub_1BD04C310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(uint64_t a1, double a2, double a3)
{
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  std::vector<HDRawQuantitySample>::__init_with_size[abi:ne180100]<HDRawQuantitySample*,HDRawQuantitySample*>(&v9, *(const void **)(a1 + 408), *(void *)(a1 + 416), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 416) - *(void *)(a1 + 408)) >> 3));
  HDStatisticsCollectionEngine<HDStatisticsDiscrete>::resetToBucket(a1, *(void *)a1 + 1, a2, a3);
  double v6 = v9;
  uint64_t v7 = v10;
  if (v9 != v10)
  {
    uint64_t v8 = (uint64_t)v9;
    do
    {
      HDStatisticsCollectionEngine<HDStatisticsDiscrete>::addSample(a1, v8, 1);
      v8 += 40;
    }
    while ((void *)v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BD04C40C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HDStatisticsCollectionEngine<HDStatisticsDiscrete>::resetToBucket(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = a1 + 40;
  objc_storeStrong((id *)(a1 + 432), *(id *)(a1 + 40));
  *(double *)(v8 - 32) = a3;
  *(double *)(v8 - 24) = a4;
  *(double *)(v8 + 24) = a3;
  *(void *)(v8 + 72) = *(void *)(v8 + 64);
  *(_OWORD *)(v8 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 13objc_destroyWeak((id *)this + 6) = 0u;
  *(void *)(v8 + 152) = 0;
  if (*(void *)(v8 + 176))
  {
    uint64_t v9 = *(void *)(a1 + 208);
    char v10 = *(void **)(a1 + 200);
    *(void *)(a1 + 200) = a1 + 208;
    *(void *)(v9 + 1objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
    *(void *)(a1 + 21objc_destroyWeak((id *)this + 6) = 0;
    if (v10[1]) {
      uint64_t v11 = (void *)v10[1];
    }
    else {
      uint64_t v11 = v10;
    }
    if (v11)
    {
      BOOL v12 = (void *)v11[2];
      if (v12)
      {
        uint64_t v13 = (void *)*v12;
        if ((void *)*v12 == v11)
        {
          *BOOL v12 = 0;
          while (1)
          {
            long long v15 = (void *)v12[1];
            if (!v15) {
              break;
            }
            do
            {
              BOOL v12 = v15;
              long long v15 = (void *)*v15;
            }
            while (v15);
          }
        }
        else
        {
          for (v12[1] = 0; v13; uint64_t v13 = (void *)v12[1])
          {
            do
            {
              BOOL v12 = v13;
              uint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
        }
        std::__tree<long>::destroy(v11);
        for (uint64_t i = (void *)v12[2]; i; uint64_t i = (void *)i[2])
          BOOL v12 = i;
        uint64_t v11 = v12;
      }
    }
    std::__tree<long>::destroy(v11);
  }
  objc_storeStrong((id *)v8, *(id *)(a1 + 432));
  *(void *)(a1 + 41objc_destroyWeak((id *)this + 6) = *(void *)(a1 + 408);
  *(void *)a1 = a2;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 556))
  {
    if (v3)
    {
      id v6 = v3;
      uint64_t v4 = _Block_copy(*(const void **)(a1 + 96));
      uint64_t v5 = v4;
      if (v4) {
        (*((void (**)(void *, id))v4 + 2))(v4, v6);
      }

      id v3 = v6;
    }
    *(unsigned char *)(a1 + 55objc_destroyWeak((id *)this + 6) = 0;
  }
}

void sub_1BD04C5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 552))
  {
    double v1 = 0;
  }
  else
  {
    double v1 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", *(double *)(a1 + 120), *(double *)(a1 + 128));
  }

  return v1;
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE38_collapsedPendingInvalidationIntervalsERb_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 startDate];
  id v6 = [v4 startDate];
  uint64_t v7 = [v5 compare:v6];

  return v7;
}

void sub_1BD04C69C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveInvalidateInterval(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 13);
  if (WeakRetained)
  {
    if (v5
      && (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_currentBucketInterval((uint64_t)a1),
          (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      uint64_t v8 = [v5 endDate];
      uint64_t v9 = [v7 startDate];
      if (objc_msgSend(v8, "hk_isAfterDate:", v9))
      {
        char v10 = [v5 startDate];
        uint64_t v11 = [v7 endDate];
        char v12 = objc_msgSend(v10, "hk_isBeforeOrEqualToDate:", v11);
      }
      else
      {
        char v12 = 0;
      }

      uint64_t v13 = _Block_copy(a1[12]);
      if ((v12 & 1) == 0) {
        operator new();
      }
    }
    else
    {
      uint64_t v13 = _Block_copy(a1[12]);
    }
    *((unsigned char *)a1 + 552) = 1;
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke;
    v27[3] = &unk_1E6308FF8;
    id v15 = v5;
    id v28 = v15;
    id v16 = v13;
    id v29 = v16;
    (*((void (**)(id *, void *))*a1 + 9))(a1, v27);
    if (v5)
    {
      double v17 = [v15 startDate];
      [v17 timeIntervalSinceReferenceDate];
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime((uint64_t)a1);
    }
    else
    {
      (*((void (**)(id *))*a1 + 4))(a1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
    }
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    void v21[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2;
    void v21[3] = &unk_1E6309060;
    unint64_t v24 = a1;
    id v5 = v15;
    char v26 = 1;
    id v22 = v5;
    unint64_t v25 = a1;
    id v23 = WeakRetained;
    uint64_t v14 = (*((uint64_t (**)(id *, void *, uint64_t))*a1 + 14))(a1, v21, a3);
    unint64_t v18 = _Block_copy(v16);
    id v19 = a1[12];
    a1[12] = v18;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to invalidate interval: no data source available.");
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_1BD04CAEC(_Unwind_Exception *a1)
{
  MEMORY[0x1C187B8A0](v4, 0x10F1C404725BC8DLL);
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_11;
  }
  id v3 = [v10 endDate];
  uint64_t v4 = [*(id *)(a1 + 32) startDate];
  char v5 = objc_msgSend(v3, "hk_isBeforeOrEqualToDate:", v4);

  if ((v5 & 1) == 0)
  {
    id v6 = [v10 startDate];
    uint64_t v7 = [*(id *)(a1 + 32) endDate];
    char v8 = objc_msgSend(v6, "hk_isAfterOrEqualToDate:", v7);

    if ((v8 & 1) == 0)
    {
LABEL_11:
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
      }
    }
  }
}

void sub_1BD04CCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = [*(id *)(a1 + 32) startDate];
  [v5 timeIntervalSinceReferenceDate];
  uint64_t v7 = v6;

  char v8 = [*(id *)(a1 + 32) endDate];
  [v8 timeIntervalSinceReferenceDate];
  uint64_t v10 = v9;

  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(v4 + 8));
  uint64_t v13 = *(void *)(a1 + 32);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  void v30[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3;
  void v30[3] = &__block_descriptor_57_e24_B52__0d8d16d24q32B40__44l;
  char v32 = *(unsigned char *)(a1 + 64);
  v30[4] = v7;
  void v30[5] = v10;
  uint64_t v31 = *(void *)(a1 + 56);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4;
  v29[3] = &__block_descriptor_40_e8_v16__0d8l;
  v29[4] = v31;
  uint64_t v14 = [v11 collectionCalculator:WeakRetained queryForInterval:v13 error:a2 sampleHandler:v30 mergeHandler:v29];

  if (v14)
  {
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15 != v4)
    {
      id v16 = [*(id *)(a1 + 32) endDate];
      [v16 timeIntervalSinceReferenceDate];
      if (*(void *)(v15 + 40))
      {
        double v18 = v17;
        while (*(double *)(v15 + 120) < v18)
        {
          id v19 = [*(id *)(v15 + 40) dateIntervalAtIndex:*(void *)(v15 + 112) + 1];
          HDStatisticsBucket<HDStatisticsDiscrete>::_updateSourceOrder(v15 + 120);
          HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(v15 + 120, *(double *)(v15 + 128));
          unint64_t v20 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_statisticsFromFinishedBucket(v15, (double *)(v15 + 120));
          uint64_t v21 = [v19 startDate];
          [v21 timeIntervalSinceReferenceDate];
          double v23 = v22;
          unint64_t v24 = [v19 endDate];
          [v24 timeIntervalSinceReferenceDate];
          HDStatisticsCollectionEngine<HDStatisticsDiscrete>::advanceBucket(v15 + 112, v23, v25);

          if (v20)
          {
            char v26 = _Block_copy(*(const void **)(v15 + 96));
            unint64_t v27 = v26;
            if (v26) {
              (*((void (**)(void *, void *))v26 + 2))(v26, v20);
            }
          }
          _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_didChangeBucket(v15, 0);
        }
      }
    }
  }
  return v14;
}

void sub_1BD04CF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  double v7 = *(double *)(a1 + 32);
  if (v7 > a6)
  {
    a2 = 0;
    int v8 = 0;
    a7 = 0.0;
    a5 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    int v8 = 1;
    double v9 = a6;
  }
  double v13 = a5;
  double v14 = v9;
  double v15 = a7;
  uint64_t v16 = a2;
  char v17 = v8;
  char v18 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    if (v8) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  else
  {
    BOOL v11 = v7 <= a6;
    double v12 = *(double *)(a1 + 40);
    if (v9 >= v12) {
      BOOL v11 = 0;
    }
    if (!v11 || a7 <= v12) {
      double v12 = a7;
    }
    double v14 = v9;
    double v15 = v12;
    char v17 = v11;
    if (v11) {
      return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(*(void *)(a1 + 48), (uint64_t)&v13, a3, a4);
    }
  }
  return 1;
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE28_primitiveInvalidateIntervalEP14NSDateIntervalPU15__autoreleasingP7NSError_block_invoke_4(uint64_t a1, double a2)
{
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_mergeToTime(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 552)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_configureForStartTime(a1);
  }
  if (*(void *)(a1 + 40)) {
    _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_advanceToTime(a1, a2);
  }
  if (*(double *)(a1 + 128) > a2)
  {
    HDStatisticsBucket<HDStatisticsDiscrete>::_mergeThroughTime(a1 + 120, a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 32) < *(double *)(v10 + 8))
                {
                  uint64_t v129 = *(void *)(v10 + 32);
                  long long v113 = *(_OWORD *)v10;
                  long long v121 = *(_OWORD *)(v10 + 16);
                  long long v52 = *(_OWORD *)(a2 - 40);
                  long long v53 = *(_OWORD *)(a2 - 24);
                  *(_WORD *)(v10 + 32) = *(_WORD *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v52;
                  *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v53;
                  *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v129;
                  *(_OWORD *)(a2 - 24) = v121;
                  *(_OWORD *)(a2 - 40) = v113;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v10, (double *)(v10 + 40), (double *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            BOOL v54 = (void *)(v10 + 40);
            BOOL v56 = v10 == a2 || v54 == (void *)a2;
            if (a4)
            {
              if (!v56)
              {
                uint64_t v57 = 0;
                unint64_t v58 = v10;
                do
                {
                  long long v59 = v54;
                  double v60 = *(double *)(v58 + 48);
                  if (v60 < *(double *)(v58 + 8))
                  {
                    uint64_t v61 = *v54;
                    long long v114 = *(_OWORD *)(v58 + 56);
                    uint64_t v122 = *(void *)(v58 + 72);
                    uint64_t v62 = v57;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      long long v64 = *(_OWORD *)(v10 + v62 + 16);
                      *(_OWORD *)(v63 + 40) = *(_OWORD *)(v10 + v62);
                      *(_OWORD *)(v63 + 5objc_destroyWeak((id *)this + 6) = v64;
                      *(_WORD *)(v63 + 72) = *(_WORD *)(v10 + v62 + 32);
                      if (!v62) {
                        break;
                      }
                      v62 -= 40;
                      if (v60 >= *(double *)(v63 - 32))
                      {
                        uint64_t v65 = v10 + v62 + 40;
                        goto LABEL_81;
                      }
                    }
                    uint64_t v65 = v10;
LABEL_81:
                    *(void *)uint64_t v65 = v61;
                    *(double *)(v65 + _Block_object_dispose(&STACK[0x230], 8) = v60;
                    *(_OWORD *)(v65 + 1objc_destroyWeak((id *)this + 6) = v114;
                    *(_WORD *)(v65 + 32) = v122;
                  }
                  BOOL v54 = v59 + 5;
                  v57 += 40;
                  unint64_t v58 = (unint64_t)v59;
                }
                while (v59 + 5 != (void *)a2);
              }
            }
            else if (!v56)
            {
              do
              {
                id v98 = v54;
                double v99 = *(double *)(a1 + 48);
                if (v99 < *(double *)(a1 + 8))
                {
                  uint64_t v100 = *v54;
                  long long v117 = *(_OWORD *)(a1 + 56);
                  uint64_t v125 = *(void *)(a1 + 72);
                  long long v101 = v54;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 3);
                    *(_OWORD *)long long v101 = *(_OWORD *)(v101 - 5);
                    *((_OWORD *)v101 + 1) = v102;
                    *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = *((_WORD *)v101 - 4);
                    double v103 = *((double *)v101 - 9);
                    v101 -= 5;
                  }
                  while (v99 < v103);
                  *long long v101 = v100;
                  *((double *)v101 + 1) = v99;
                  *((_WORD *)v101 + 1objc_destroyWeak((id *)this + 6) = v125;
                  *((_OWORD *)v101 + 1) = v117;
                }
                v54 += 5;
                a1 = (unint64_t)v98;
              }
              while (v98 + 5 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v66 = (v12 - 2) >> 1;
              int64_t v67 = v66;
              do
              {
                int64_t v68 = v67;
                if (v66 >= v67)
                {
                  uint64_t v69 = (2 * v67) | 1;
                  unint64_t v70 = v10 + 40 * v69;
                  if (2 * v68 + 2 < (uint64_t)v12 && *(double *)(v10 + 40 * v69 + 8) < *(double *)(v70 + 48))
                  {
                    v70 += 40;
                    uint64_t v69 = 2 * v68 + 2;
                  }
                  double v71 = *(double *)(v10 + 40 * v68 + 8);
                  if (*(double *)(v70 + 8) >= v71)
                  {
                    unint64_t v72 = v10 + 40 * v68;
                    uint64_t v73 = *(void *)v72;
                    uint64_t v123 = *(void *)(v72 + 32);
                    long long v115 = *(_OWORD *)(v72 + 16);
                    do
                    {
                      unint64_t v74 = v72;
                      unint64_t v72 = v70;
                      long long v75 = *(_OWORD *)v70;
                      long long v76 = *(_OWORD *)(v70 + 16);
                      *(_WORD *)(v74 + 32) = *(_WORD *)(v70 + 32);
                      *(_OWORD *)unint64_t v74 = v75;
                      *(_OWORD *)(v74 + 1objc_destroyWeak((id *)this + 6) = v76;
                      if (v66 < v69) {
                        break;
                      }
                      uint64_t v77 = (2 * v69) | 1;
                      unint64_t v70 = v10 + 40 * v77;
                      uint64_t v78 = 2 * v69 + 2;
                      if (v78 < (uint64_t)v12 && *(double *)(v10 + 40 * v77 + 8) < *(double *)(v70 + 48))
                      {
                        v70 += 40;
                        uint64_t v77 = v78;
                      }
                      uint64_t v69 = v77;
                    }
                    while (*(double *)(v70 + 8) >= v71);
                    *(void *)unint64_t v72 = v73;
                    *(double *)(v72 + _Block_object_dispose(&STACK[0x230], 8) = v71;
                    *(_OWORD *)(v72 + 1objc_destroyWeak((id *)this + 6) = v115;
                    *(_WORD *)(v72 + 32) = v123;
                  }
                }
                int64_t v67 = v68 - 1;
              }
              while (v68);
              int64_t v79 = v11 / 0x28uLL;
              do
              {
                uint64_t v80 = 0;
                uint64_t v130 = *(void *)(v10 + 32);
                long long v116 = *(_OWORD *)v10;
                long long v124 = *(_OWORD *)(v10 + 16);
                unint64_t v81 = v10;
                do
                {
                  unint64_t v82 = v81;
                  uint64_t v83 = v80 + 1;
                  v81 += 40 * (v80 + 1);
                  uint64_t v84 = 2 * v80;
                  uint64_t v80 = (2 * v80) | 1;
                  int64_t v85 = v84 + 2;
                  if (v85 < v79 && *(double *)(v82 + 40 * v83 + 8) < *(double *)(v81 + 48))
                  {
                    v81 += 40;
                    uint64_t v80 = v85;
                  }
                  long long v86 = *(_OWORD *)v81;
                  long long v87 = *(_OWORD *)(v81 + 16);
                  *(_WORD *)(v82 + 32) = *(_WORD *)(v81 + 32);
                  *(_OWORD *)unint64_t v82 = v86;
                  *(_OWORD *)(v82 + 1objc_destroyWeak((id *)this + 6) = v87;
                }
                while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(_WORD *)(v81 + 32) = v130;
                  *(_OWORD *)unint64_t v81 = v116;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v124;
                }
                else
                {
                  long long v88 = *(_OWORD *)a2;
                  long long v89 = *(_OWORD *)(a2 + 16);
                  *(_WORD *)(v81 + 32) = *(_WORD *)(a2 + 32);
                  *(_OWORD *)unint64_t v81 = v88;
                  *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v89;
                  *(_WORD *)(a2 + 32) = v130;
                  *(_OWORD *)a2 = v116;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v124;
                  uint64_t v90 = v81 - v10 + 40;
                  if (v90 >= 41)
                  {
                    unint64_t v91 = (v90 / 0x28uLL - 2) >> 1;
                    double v92 = *(double *)(v81 + 8);
                    if (*(double *)(v10 + 40 * v91 + 8) < v92)
                    {
                      uint64_t v93 = *(void *)v81;
                      uint64_t v109 = *(void *)(v81 + 32);
                      long long v106 = *(_OWORD *)(v81 + 16);
                      do
                      {
                        unint64_t v94 = v81;
                        unint64_t v81 = v10 + 40 * v91;
                        long long v95 = *(_OWORD *)v81;
                        long long v96 = *(_OWORD *)(v81 + 16);
                        *(_WORD *)(v94 + 32) = *(_WORD *)(v81 + 32);
                        *(_OWORD *)unint64_t v94 = v95;
                        *(_OWORD *)(v94 + 1objc_destroyWeak((id *)this + 6) = v96;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 40 * v91 + 8) < v92);
                      *(void *)unint64_t v81 = v93;
                      *(double *)(v81 + _Block_object_dispose(&STACK[0x230], 8) = v92;
                      *(_WORD *)(v81 + 32) = v109;
                      *(_OWORD *)(v81 + 1objc_destroyWeak((id *)this + 6) = v106;
                    }
                  }
                }
              }
              while (v79-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40 * (v12 >> 1)), (double *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            uint64_t v16 = (double *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40), v16, (double *)(a2 - 80));
            char v17 = (double *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 80), v17, (double *)(a2 - 120));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)v16, (double *)v14, v17);
            uint64_t v126 = *(void *)(a1 + 32);
            long long v110 = *(_OWORD *)a1;
            long long v118 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v19;
            *(_WORD *)(v14 + 32) = v126;
            *(_OWORD *)unint64_t v14 = v110;
            *(_OWORD *)(v14 + 1objc_destroyWeak((id *)this + 6) = v118;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)(a1 + 40 * (v12 >> 1)), (double *)a1, (double *)(a2 - 40));
          }
          --a3;
          if (a4) {
            break;
          }
          double v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v20) {
            goto LABEL_12;
          }
          uint64_t v38 = *(void *)a1;
          long long v105 = *(_OWORD *)(a1 + 16);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v20 >= *(double *)(a2 - 32))
          {
            unint64_t v41 = a1 + 40;
            do
            {
              unint64_t v10 = v41;
              if (v41 >= a2) {
                break;
              }
              double v42 = *(double *)(v41 + 8);
              v41 += 40;
            }
            while (v20 >= v42);
          }
          else
          {
            unint64_t v39 = a1;
            do
            {
              unint64_t v10 = v39 + 40;
              double v40 = *(double *)(v39 + 48);
              v39 += 40;
            }
            while (v20 >= v40);
          }
          unint64_t v43 = a2;
          if (v10 < a2)
          {
            unint64_t v44 = a2;
            do
            {
              unint64_t v43 = v44 - 40;
              double v45 = *(double *)(v44 - 32);
              v44 -= 40;
            }
            while (v20 < v45);
          }
          while (v10 < v43)
          {
            uint64_t v128 = *(void *)(v10 + 32);
            long long v112 = *(_OWORD *)v10;
            long long v120 = *(_OWORD *)(v10 + 16);
            long long v46 = *(_OWORD *)v43;
            long long v47 = *(_OWORD *)(v43 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v43 + 32);
            *(_OWORD *)unint64_t v10 = v46;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v47;
            *(_WORD *)(v43 + 32) = v128;
            *(_OWORD *)unint64_t v43 = v112;
            *(_OWORD *)(v43 + 1objc_destroyWeak((id *)this + 6) = v120;
            do
            {
              double v48 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v20 >= v48);
            do
            {
              double v49 = *(double *)(v43 - 32);
              v43 -= 40;
            }
            while (v20 < v49);
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v50 = *(_OWORD *)(v10 - 40);
            long long v51 = *(_OWORD *)(v10 - 24);
            *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
            *(_OWORD *)a1 = v50;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v51;
          }
          a4 = 0;
          *(void *)(v10 - 40) = v38;
          *(double *)(v10 - 32) = v20;
          *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v108;
          *(_OWORD *)(v10 - 24) = v105;
        }
        double v20 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)a1;
        long long v104 = *(_OWORD *)(a1 + 16);
        uint64_t v107 = *(void *)(a1 + 32);
        do
        {
          double v23 = *(double *)(a1 + v21 + 48);
          v21 += 40;
        }
        while (v23 < v20);
        unint64_t v24 = a1 + v21;
        unint64_t v25 = a2;
        if (v21 == 40)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 40;
            double v29 = *(double *)(v28 - 32);
            v28 -= 40;
            if (v29 < v20) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 40;
            double v27 = *(double *)(v25 - 32);
            v25 -= 40;
          }
          while (v27 >= v20);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v127 = *(void *)(v10 + 32);
            long long v111 = *(_OWORD *)v10;
            long long v119 = *(_OWORD *)(v10 + 16);
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v10 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)unint64_t v10 = v31;
            *(_OWORD *)(v10 + 1objc_destroyWeak((id *)this + 6) = v32;
            *(_WORD *)(v30 + 32) = v127;
            *(_OWORD *)unint64_t v30 = v111;
            *(_OWORD *)(v30 + 1objc_destroyWeak((id *)this + 6) = v119;
            do
            {
              double v33 = *(double *)(v10 + 48);
              v10 += 40;
            }
            while (v33 < v20);
            do
            {
              double v34 = *(double *)(v30 - 32);
              v30 -= 40;
            }
            while (v34 >= v20);
          }
          while (v10 < v30);
        }
        if (v10 - 40 != a1)
        {
          long long v35 = *(_OWORD *)(v10 - 40);
          long long v36 = *(_OWORD *)(v10 - 24);
          *(_WORD *)(a1 + 32) = *(_WORD *)(v10 - 8);
          *(_OWORD *)a1 = v35;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v36;
        }
        *(void *)(v10 - 40) = v22;
        *(double *)(v10 - 32) = v20;
        *(_WORD *)(v10 - _Block_object_dispose(&STACK[0x230], 8) = v107;
        *(_OWORD *)(v10 - 24) = v104;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(v10, a2))
      {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 40;
    if (!v37) {
      continue;
    }
    break;
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        __int16 v9 = *(_WORD *)(a2 - 8);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v10;
        *(_WORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_WORD *)(a2 - _Block_object_dispose(&STACK[0x230], 8) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*>((long long *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    double v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      uint64_t v16 = *(void *)v12;
      long long v21 = *(_OWORD *)(v12 + 16);
      uint64_t v22 = *(void *)(v12 + 32);
      uint64_t v17 = v13;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 13objc_destroyWeak((id *)this + 6) = v19;
        *(_WORD *)(v18 + 152) = *(_WORD *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(void *)uint64_t v20 = v16;
      *(double *)(v20 + _Block_object_dispose(&STACK[0x230], 8) = v15;
      *(_OWORD *)(v20 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_WORD *)(v20 + 32) = v22;
      if (++v14 == 8) {
        return v12 + 40 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2) {
      return 1;
    }
  }
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke(void *a1, uint64_t a2)
{
  id v3 = (void *)a1[5];
  uint64_t v4 = a1[6];
  BOOL v5 = (void *)a1[4];
  uint64_t v6 = [v5 dateInterval];
  void v9[4] = v4;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  void v10[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2;
  void v10[3] = &__block_descriptor_40_e24_B52__0d8d16d24q32B40__44l;
  void v10[4] = v4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3;
  void v9[3] = &__block_descriptor_40_e8_v16__0d8l;
  uint64_t v7 = [v3 collectionCalculator:v5 queryForInterval:v6 error:a2 sampleHandler:v10 mergeHandler:v9];

  return v7;
}

void sub_1BD04DCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v10 = *(void *)(a1 + 32);
  *(double *)int v14 = a5;
  *(double *)&v14[1] = a6;
  *(double *)&v14[2] = a7;
  void v14[3] = a2;
  char v15 = 1;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] distantFuture];
  [v11 timeIntervalSinceReferenceDate];
  BOOL v16 = v12 <= a7;

  return _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsDiscrete>::_primitiveAddSample(v10, (uint64_t)v14, a3, a4);
}

void sub_1BD04DD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsDiscreteE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke_3(uint64_t a1, double a2)
{
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  char v6 = a3;
  uint64_t v8 = _HDStatisticsCollectionCalculatorImplementation::_HDStatisticsCollectionCalculatorImplementation(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v8 = &unk_1F1722560;
  double v9 = 900.0;
  if ((v6 & 0x10) == 0) {
    double v9 = 0.0;
  }
  *(double *)(v8 + 5objc_destroyWeak((id *)this + 6) = v9;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 9objc_destroyWeak((id *)this + 6) = 0;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket(v8 + 120, 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 60_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_WORD *)(a1 + 624) = 1;
  *(unsigned char *)(a1 + 62objc_destroyWeak((id *)this + 6) = 0;
  *(unsigned char *)(a1 + 62_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 632) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 65objc_destroyWeak((id *)this + 6) = 0u;
  *(void *)(a1 + 672) = 0;
  return a1;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(uint64_t a1)
{
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~_HDConcreteStatisticsCollectionCalculatorImplementation(a1);

  JUMPOUT(0x1C187B8A0);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1F1722560;
  uint64_t v2 = *(void **)(a1 + 656);
  if (v2)
  {
    *(void *)(a1 + 664) = v2;
    operator delete(v2);
  }

  id v3 = *(void **)(a1 + 592);
  if (v3)
  {
    *(void *)(a1 + 600) = v3;
    operator delete(v3);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 120);
  objc_destroyWeak((id *)(a1 + 104));

  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }

  _HDStatisticsCollectionCalculatorImplementation::~_HDStatisticsCollectionCalculatorImplementation((_HDStatisticsCollectionCalculatorImplementation *)a1);
}

double _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::mergeGranularity(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setMergeGranularity(uint64_t result, double a2)
{
  if (*(double *)(result + 56) != a2)
  {
    *(double *)(result + 5objc_destroyWeak((id *)this + 6) = a2;
    *(unsigned char *)(result + 624) = 1;
  }
  return result;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::dateInterval(uint64_t a1)
{
  return *(id *)(a1 + 64);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setDateInterval(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = [v6 copy];
  uint64_t v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  BOOL v5 = [v6 startDate];
  [v5 timeIntervalSinceReferenceDate];
  _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
}

void sub_1BD04DF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::configureMergeAnchor(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 40))
  {
    id v5 = v3;
    [v3 timeIntervalSinceReferenceDate];
    *(void *)(a1 + 632) = v4;
    id v3 = v5;
  }
}

void sub_1BD04DF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setStatisticsConfiguration(id *a1, void *a2)
{
  objc_storeStrong(a1 + 80, a2);
  id v7 = a2;
  id v4 = a1[80];
  id v5 = a1[77];
  a1[77] = v4;
  id v6 = v4;

  objc_storeStrong(a1 + 19, a1[77]);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setIntervalMask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (char *)(a1 + 72);
  if (v6 != (char *)a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v6, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (*(void *)(a1 + 40)) {
    return 1;
  }
  BOOL v7 = *(void *)(a1 + 224) == *(void *)(a1 + 216) && *(uint64_t *)(a1 + 256) < 1
    || HKIntervalMask<double>::firstDifference(*(void *)(a1 + 184), *(void *)(a1 + 192), *(void *)a2, *(void *)(a2 + 8)) >= *(double *)(a1 + 176);
  if (a1 + 184 != a2) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((char *)(a1 + 184), *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  if (v7) {
    return 1;
  }
  double v9 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 128);

  return v9(a1, 0, a3);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setStatisticsHandler(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t v3 = [v5 copy];
  id v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v3;
}

void sub_1BD04E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::dataSource(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));

  return WeakRetained;
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::setDataSource(uint64_t a1, void *a2)
{
  return objc_storeWeak((id *)(a1 + 104), a2);
}

id _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::currentStatistics(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 624))
  {
    double v1 = 0;
  }
  else
  {
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v4, a1 + 120);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder((uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime((uint64_t)v4, v5);
    double v1 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, (uint64_t)v4);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v4);
  }

  return v1;
}

void sub_1BD04E250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::addSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(id *)(a1 + 64);
  BOOL v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 startDate];
    [v8 timeIntervalSinceReferenceDate];
    if (v9 > *(double *)(a2 + 16))
    {

      goto LABEL_9;
    }
    uint64_t v10 = [v7 endDate];
    [v10 timeIntervalSinceReferenceDate];
    double v12 = v11;
    double v13 = *(double *)(a2 + 8);

    if (v12 < v13) {
      goto LABEL_9;
    }
  }
  if (!*(unsigned char *)(a1 + 626))
  {
LABEL_11:
    uint64_t v15 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, a2, 1, a3);
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 625))
  {
LABEL_9:
    uint64_t v15 = 1;
    goto LABEL_12;
  }
  if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_earliestStartTimeWithoutInvalidation(a1) <= *(double *)(a2 + 8))
  {
    if (*(unsigned char *)(a1 + 627)) {
      goto LABEL_11;
    }
    unint64_t v17 = *(void *)(a1 + 664);
    unint64_t v18 = *(void *)(a1 + 672);
    if (v17 >= v18)
    {
      uint64_t v22 = *(void *)(a1 + 656);
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v22) >> 3);
      unint64_t v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666) {
        std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v22) >> 3);
      if (2 * v25 > v24) {
        unint64_t v24 = 2 * v25;
      }
      if (v25 >= 0x333333333333333) {
        unint64_t v26 = 0x666666666666666;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26) {
        unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v26);
      }
      else {
        uint64_t v27 = 0;
      }
      unint64_t v28 = v26 + 40 * v23;
      unint64_t v29 = v26 + 40 * v27;
      long long v30 = *(_OWORD *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      *(void *)(v28 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v28 = v30;
      *(_OWORD *)(v28 + 1objc_destroyWeak((id *)this + 6) = v31;
      unint64_t v21 = v28 + 40;
      long long v32 = *(char **)(a1 + 664);
      double v33 = *(char **)(a1 + 656);
      if (v32 != v33)
      {
        do
        {
          long long v34 = *(_OWORD *)(v32 - 40);
          long long v35 = *(_OWORD *)(v32 - 24);
          *(_WORD *)(v28 - _Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v32 - 4);
          *(_OWORD *)(v28 - 24) = v35;
          *(_OWORD *)(v28 - 40) = v34;
          v28 -= 40;
          v32 -= 40;
        }
        while (v32 != v33);
        long long v32 = *(char **)(a1 + 656);
      }
      *(void *)(a1 + 65objc_destroyWeak((id *)this + 6) = v28;
      *(void *)(a1 + 664) = v21;
      *(void *)(a1 + 672) = v29;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)a2;
      long long v20 = *(_OWORD *)(a2 + 16);
      *(void *)(v17 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)unint64_t v17 = v19;
      *(_OWORD *)(v17 + 1objc_destroyWeak((id *)this + 6) = v20;
      unint64_t v21 = v17 + 40;
    }
    *(void *)(a1 + 664) = v21;
    goto LABEL_9;
  }
  int v14 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:");
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 128))(a1, v14, a3);

LABEL_12:
  return v15;
}

void sub_1BD04E4C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::performAddSampleTransaction(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 626))
  {
    uint64_t v7 = (*((uint64_t (**)(id, uint64_t))v5 + 2))(v5, a3);
    goto LABEL_83;
  }
  *(_WORD *)(a1 + 62objc_destroyWeak((id *)this + 6) = 1;
  uint64_t v67 = a3;
  if (!(*((unsigned int (**)(id, uint64_t))v5 + 2))(v5, a3))
  {
    uint64_t v7 = 0;
    goto LABEL_82;
  }
  uint64_t v65 = v6;
  if (*(unsigned char *)(a1 + 625)) {
    goto LABEL_5;
  }
  double v9 = *(void **)(a1 + 648);
  if (!v9)
  {
    id v68 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(a1 + 40))
  {
LABEL_5:
    int v8 = 0;
    id v68 = 0;
    goto LABEL_29;
  }
  [v9 sortUsingComparator:&__block_literal_global_593_0];
  id v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v10 = *(id *)(a1 + 648);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  if (!v11)
  {

    id v12 = 0;
    goto LABEL_27;
  }
  id v12 = 0;
  uint64_t v13 = *(void *)v70;
  do
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if (*(void *)v70 != v13) {
        objc_enumerationMutation(v10);
      }
      id v15 = *(id *)(*((void *)&v69 + 1) + 8 * i);
      BOOL v16 = v15;
      if (v12)
      {
        unint64_t v17 = [v15 startDate];
        unint64_t v18 = [v12 endDate];
        int v19 = objc_msgSend(v17, "hk_isBeforeOrEqualToDate:", v18);

        if (v19)
        {
          long long v20 = [v16 endDate];
          unint64_t v21 = [v12 endDate];
          int v22 = objc_msgSend(v20, "hk_isAfterDate:", v21);

          if (!v22) {
            goto LABEL_21;
          }
          id v23 = objc_alloc(MEMORY[0x1E4F28C18]);
          unint64_t v24 = [v12 startDate];
          unint64_t v25 = [v16 endDate];
          id v26 = (id)[v23 initWithStartDate:v24 endDate:v25];
        }
        else
        {
          [v68 addObject:v12];
          id v26 = v16;
        }
        id v12 = v26;
      }
      else
      {
        id v12 = v15;
      }
LABEL_21:
    }
    uint64_t v11 = [v10 countByEnumeratingWithState:&v69 objects:v73 count:16];
  }
  while (v11);

  if (v12) {
    [v68 addObject:v12];
  }
LABEL_27:

LABEL_28:
  int v8 = 1;
LABEL_29:
  uint64_t v27 = *(void **)(a1 + 648);
  *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = 0;

  *(unsigned char *)(a1 + 625) = 0;
  if (!v8)
  {
    unint64_t v38 = *(void *)(a1 + 656);
    *(void *)(a1 + 672) = 0;
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 65objc_destroyWeak((id *)this + 6) = 0;
    unint64_t v39 = v38;
    goto LABEL_47;
  }
  unint64_t v28 = [v68 lastObject];
  if (v28)
  {
    unint64_t v29 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_currentBucketInterval(a1);
    long long v30 = [v29 endDate];
    long long v31 = [v28 endDate];
    int v32 = objc_msgSend(v30, "hk_isBeforeOrEqualToDate:", v31);

    if (v32)
    {
      double v33 = [v28 endDate];
      [v33 timeIntervalSinceReferenceDate];
      double v35 = v34;

      uint64_t v36 = *(void *)(a1 + 656);
      BOOL v37 = *(long long **)(a1 + 664);
      while ((long long *)v36 != v37)
      {
        if (*(double *)(v36 + 8) < v35)
        {
          if ((long long *)v36 != v37)
          {
            double v40 = (long long *)(v36 + 40);
            if ((long long *)(v36 + 40) != v37)
            {
              do
              {
                if (*((double *)v40 + 1) >= v35)
                {
                  long long v41 = *v40;
                  long long v42 = v40[1];
                  *(_WORD *)(v36 + 32) = *((_WORD *)v40 + 16);
                  *(_OWORD *)uint64_t v36 = v41;
                  *(_OWORD *)(v36 + 1objc_destroyWeak((id *)this + 6) = v42;
                  v36 += 40;
                }
                double v40 = (long long *)((char *)v40 + 40);
              }
              while (v40 != v37);
              BOOL v37 = *(long long **)(a1 + 664);
            }
          }
          if ((long long *)v36 != v37) {
            *(void *)(a1 + 664) = v36;
          }
          break;
        }
        v36 += 40;
      }
    }
  }
  unint64_t v38 = *(void *)(a1 + 656);
  unint64_t v39 = *(void *)(a1 + 664);
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 65objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 664) = 0;
  if (![v68 count]) {
    goto LABEL_60;
  }
LABEL_47:
  id v43 = v68;
  long long __p = (void *)v38;
  if (v43)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v44 = v43;
    uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v70;
      while (2)
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v70 != v46) {
            objc_enumerationMutation(v44);
          }
          id v48 = *(id *)(*((void *)&v69 + 1) + 8 * j);
          int v49 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v48, v67);

          if (!v49)
          {

            goto LABEL_70;
          }
        }
        uint64_t v45 = [v44 countByEnumeratingWithState:&v69 objects:v73 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

LABEL_59:
    unint64_t v38 = (unint64_t)__p;
LABEL_60:
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v39 - v38) >> 3));
    if (v39 == v38) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    int v53 = 1;
    std::__introsort<std::_ClassicAlgPolicy,_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_addPendingSamples(std::vector<HDRawQuantitySample> &,NSError * {__autoreleasing}*)::{lambda(HDRawQuantitySample const&,HDRawQuantitySample const&)#1} &,HDRawQuantitySample*,false>(v38, v39, v52, 1);
    long long __p = (void *)v38;
    if (v39 != v38)
    {
      uint64_t v54 = v38;
      uint64_t v50 = v67;
      do
      {
        int v55 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveAddSample(a1, v54, 1, v50);
        int v53 = v55;
        v54 += 40;
        if (v54 == v39) {
          char v56 = 0;
        }
        else {
          char v56 = v55;
        }
        uint64_t v50 = v67;
      }
      while ((v56 & 1) != 0);
    }
  }
  else
  {
    if (_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, 0, v67))goto LABEL_59; {
LABEL_70:
    }
    int v53 = 0;
  }
  if (*(void *)(a1 + 40) && *(void *)(a1 + 600) != *(void *)(a1 + 592))
  {
    do
    {
      uint64_t v57 = objc_msgSend(*(id *)(a1 + 40), "dateIntervalAtIndex:", *(void *)(a1 + 112) + 1, v50, v65);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1 + 120);
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(a1 + 120, *(double *)(a1 + 128));
      unint64_t v58 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(a1, a1 + 120);
      long long v59 = [v57 startDate];
      [v59 timeIntervalSinceReferenceDate];
      double v61 = v60;
      uint64_t v62 = [v57 endDate];
      [v62 timeIntervalSinceReferenceDate];
      HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::advanceBucket(a1 + 112, v61, v63);

      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_didChangeBucket(a1, v58);
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
    }
    while (*(void *)(a1 + 600) != *(void *)(a1 + 592));
  }
  *(unsigned char *)(a1 + 62objc_destroyWeak((id *)this + 6) = 0;
  if (__p) {
    operator delete(__p);
  }

  if (v53)
  {
    if (*(unsigned char *)(a1 + 628))
    {
      *(unsigned char *)(a1 + 62_Block_object_dispose(&STACK[0x230], 8) = 0;
      id v6 = v65;
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_notifyForCurrentBucket(a1);
      uint64_t v7 = 1;
      goto LABEL_82;
    }
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v6 = v65;
LABEL_82:
  *(unsigned char *)(a1 + 62objc_destroyWeak((id *)this + 6) = 0;
LABEL_83:

  return v7;
}

void sub_1BD04EBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, void *a12)
{
  if (a2)
  {

    objc_begin_catch(exception_object);
    *(unsigned char *)(v13 + 62objc_destroyWeak((id *)this + 6) = 0;
    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::enableImmediateSampleInsertion(uint64_t result)
{
  *(unsigned char *)(result + 627) = 1;
  return result;
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::invalidateInterval(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 40);
  if (!v6)
  {

    goto LABEL_11;
  }
  if (!v5)
  {
LABEL_11:
    if (*(unsigned char *)(a1 + 626)) {
      goto LABEL_12;
    }
    uint64_t v7 = 0;
LABEL_14:
    uint64_t v11 = _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_primitiveInvalidateInterval((id *)a1, v7, a3);
    goto LABEL_15;
  }
  uint64_t v7 = [v6 dateIntervalForIntervalsContainingInterval:v5];

  if (!*(unsigned char *)(a1 + 626)) {
    goto LABEL_14;
  }
  if (!v7)
  {
LABEL_12:
    id v12 = *(void **)(a1 + 648);
    *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = 0;

    uint64_t v7 = 0;
    uint64_t v11 = 1;
    *(unsigned char *)(a1 + 625) = 1;
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 625))
  {
    int v8 = *(void **)(a1 + 648);
    if (!v8)
    {
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v10 = *(void **)(a1 + 648);
      *(void *)(a1 + 64_Block_object_dispose(&STACK[0x230], 8) = v9;

      int v8 = *(void **)(a1 + 648);
    }
    [v8 addObject:v7];
  }
  uint64_t v11 = 1;
LABEL_15:

  return v11;
}

void sub_1BD04EEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::queryForInitialStatistics(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  if (WeakRetained)
  {
    *(unsigned char *)(a1 + 624) = 1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    void v9[2] = ___ZN55_HDConcreteStatisticsCollectionCalculatorImplementationI20HDStatisticsRelativeI20HDStatisticsCombinedI22HDStatisticsCumulative24HDStatisticsTimeIntervalEEE25queryForInitialStatisticsEP32HDStatisticsCollectionCalculatorPU15__autoreleasingP7NSError_block_invoke;
    void v9[3] = &unk_1E63043E8;
    uint64_t v12 = a1;
    id v10 = v5;
    id v11 = WeakRetained;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 112))(a1, v9, a3);
    if (v7 && *(unsigned char *)(a1 + 624) && !*(void *)(a1 + 40)) {
      _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(a1);
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E4F28C58], "hk_assignError:code:format:", a3, 3, @"Unable to query for initial statistics: no data source available.");
    uint64_t v7 = 0;
  }

  return v7;
}

void sub_1BD04F018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::reset(uint64_t result)
{
  *(unsigned char *)(result + 624) = 1;
  return result;
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::encodeInternalsWithEncoder(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 encodeBool:*(unsigned __int8 *)(a1 + 624) forKey:@"needs_config"];
  id v12 = v3;
  int v32 = &unk_1F1726FA0;
  double v33 = 0;
  int v38 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v4 = *(void *)(a1 + 112);
  LOBYTE(v3_Block_object_dispose(&STACK[0x230], 8) = 1;
  uint64_t v34 = v4;
  uint64_t v35 = 0;
  statistics::StatisticsEngine::makeCurrentBucket((uint64_t)&v32);
  uint64_t v13 = &unk_1F171B9C8;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  int v31 = 511;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  int8x16_t v14 = vextq_s8(*(int8x16_t *)(a1 + 120), *(int8x16_t *)(a1 + 120), 8uLL);
  uint64_t v5 = *(void *)(a1 + 136);
  char v29 = *(unsigned char *)(a1 + 144);
  char v30 = *(unsigned char *)(a1 + 145);
  BOOL v28 = *(_DWORD *)(a1 + 148) == 0;
  int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 160), *(int8x16_t *)(a1 + 160), 8uLL);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v7 = *(int8x16_t **)(a1 + 216);
  if (v7 != *(int8x16_t **)(a1 + 224))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v7, *v7, 8uLL);
    int8x16_t v40 = v7[1];
    char v43 = 0;
    HIBYTE(v42) = v7[2].i8[9];
    LOBYTE(v42) = v7[2].i8[10];
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample&>();
  }
  statistics::StatisticsBucket::makeStatistics((uint64_t)&v13);
  HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(a1 + 240));
  statistics::Statistics::operator=(*((statistics **)&v22 + 1), (uint64_t)&v39);
  statistics::Statistics::~Statistics((statistics::Statistics *)&v39);
  uint64_t v8 = *(void *)(a1 + 384);
  if (v8 != a1 + 392)
  {
    HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::archive((uint64_t)&v39, (int *)(v8 + 40));
    uint64_t v9 = *(void *)(v8 + 32);
    v46 |= 0x200u;
    uint64_t v45 = v9;
    PB::PtrVector<statistics::Statistics>::emplace_back<statistics::Statistics&>();
  }
  id v10 = *(int8x16_t **)(a1 + 184);
  if (v10 != *(int8x16_t **)(a1 + 192))
  {
    unint64_t v39 = (char *)&unk_1F1727540;
    v41.i32[0] = 3;
    int8x16_t v40 = vextq_s8(*v10, *v10, 8uLL);
    PB::PtrVector<statistics::Interval>::emplace_back<statistics::Interval&>();
  }
  statistics::StatisticsBucket::operator=(v33, (uint64_t)&v13);
  statistics::StatisticsBucket::~StatisticsBucket((statistics::StatisticsBucket *)&v13);
  id v11 = *(int8x16_t **)(a1 + 592);
  if (v11 != *(int8x16_t **)(a1 + 600))
  {
    unint64_t v39 = (char *)&unk_1F17206F8;
    int v44 = 127;
    int8x16_t v41 = vextq_s8(*v11, *v11, 8uLL);
    int8x16_t v40 = v11[1];
    __int16 v42 = 0;
    char v43 = 0;
    PB::PtrVector<statistics::RawQuantitySample>::emplace_back<statistics::RawQuantitySample>();
  }
  PB::Writer::Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::writeTo((uint64_t)&v32, (PB::Writer *)&v39);
  [v12 encodeBytes:v40.i64[0] length:&v39[-v40.i64[0]] forKey:@"hdsce_archived_representation"];
  PB::Writer::~Writer((PB::Writer *)&v39);
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v32);
}

void sub_1BD04F418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&a35);

  _Unwind_Resume(a1);
}

void _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::decodeInternalsWithDecoder(uint64_t a1, void *a2)
{
  id v60 = a2;
  *(unsigned char *)(a1 + 624) = [v60 decodeBoolForKey:@"needs_config"];
  id v3 = v60;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v64.n128_i64[1], 0, -1.79769313e308, 1.79769313e308);
  *(_OWORD *)uint64_t v65 = 0u;
  long long v66 = 0u;
  unint64_t v109 = 0;
  id v63 = v3;
  PB::Reader::Reader((PB::Reader *)v108, (const unsigned __int8 *)[v63 decodeBytesForKey:@"hdsce_archived_representation" returnedLength:&v109]);
  uint64_t v62 = a1;
  long long v101 = &unk_1F1726FA0;
  uint64_t v102 = 0;
  uint64_t v106 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  int v107 = 0;
  statistics::StatisticsEngine::readFrom((statistics::StatisticsEngine *)&v101, (PB::Reader *)v108);
  v64.n128_u64[0] = v103;
  if (v102)
  {
    uint64_t v71 = 0;
    memset(v74, 0, sizeof(v74));
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    LOWORD(v82) = 0;
    memset(v83, 0, 74);
    uint64_t v86 = 0;
    long long __p = 0;
    int v78 = 0;
    long long v76 = 0;
    unint64_t v77 = 0;
    int64_t v85 = 0;
    uint64_t v84 = &v85;
    long long v87 = 0u;
    long long v88 = 0u;
    int v89 = 1065353216;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    uint64_t v93 = 0;
    int v94 = 1065353216;
    long long v95 = 0u;
    long long v96 = 0u;
    int v97 = 1065353216;
    long long v98 = 0u;
    long long v99 = 0u;
    int v100 = 1065353216;
    int8x16_t v67 = vextq_s8(*(int8x16_t *)(v102 + 8), *(int8x16_t *)(v102 + 8), 8uLL);
    uint64_t v4 = *(void *)(v102 + 72);
    uint64_t v68 = *(void *)(v102 + 64);
    char v69 = *(unsigned char *)(v102 + 185);
    char v70 = *(unsigned char *)(v102 + 186);
    int8x16_t v72 = vextq_s8(*(int8x16_t *)(v102 + 24), *(int8x16_t *)(v102 + 24), 8uLL);
    uint64_t v73 = v4;
    uint64_t v5 = *(void *)(v102 + 80);
    uint64_t v6 = *(void *)(v102 + 88);
    double v61 = (void *)v102;
    if (v5 != v6)
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v5 + 24);
        uint64_t v9 = *(void *)(*(void *)v5 + 32);
        uint64_t v10 = *(void *)(*(void *)v5 + 8);
        uint64_t v11 = *(void *)(*(void *)v5 + 16);
        char v12 = *(unsigned char *)(*(void *)v5 + 41);
        char v13 = *(unsigned char *)(*(void *)v5 + 40);
        if ((unint64_t)v7 >= v77)
        {
          int8x16_t v14 = (char *)__p;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)__p) >> 4);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0x555555555555555) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4) > v16) {
            unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v77 - (void)__p) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - (void)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v17 = 0x555555555555555;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17)
          {
            unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v17);
            uint64_t v7 = v76;
            int8x16_t v14 = (char *)__p;
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (void *)(v17 + 48 * v15);
          *uint64_t v19 = v9;
          v19[1] = v8;
          void v19[2] = v10;
          void v19[3] = v11;
          *((_WORD *)v19 + 1objc_destroyWeak((id *)this + 6) = 1;
          *((unsigned char *)v19 + 40) = 0;
          *((unsigned char *)v19 + 41) = v12;
          *((unsigned char *)v19 + 42) = v13;
          uint64_t v20 = (char *)v19;
          if (v7 != v14)
          {
            do
            {
              long long v21 = *((_OWORD *)v7 - 3);
              long long v22 = *((_OWORD *)v7 - 2);
              *(_OWORD *)(v20 - 21) = *(_OWORD *)(v7 - 21);
              *((_OWORD *)v20 - 3) = v21;
              *((_OWORD *)v20 - 2) = v22;
              v20 -= 48;
              v7 -= 48;
            }
            while (v7 != v14);
            int8x16_t v14 = (char *)__p;
          }
          uint64_t v7 = (char *)(v19 + 6);
          long long __p = v20;
          long long v76 = (char *)(v19 + 6);
          unint64_t v77 = v17 + 48 * v18;
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)uint64_t v7 = v9;
          *((void *)v7 + 1) = v8;
          *((void *)v7 + 2) = v10;
          *((void *)v7 + 3) = v11;
          *((_WORD *)v7 + 1objc_destroyWeak((id *)this + 6) = 1;
          v7[40] = 0;
          v7[41] = v12;
          v7[42] = v13;
          v7 += 48;
        }
        long long v76 = v7;
        v5 += 8;
      }
      while (v5 != v6);
    }
    long long v23 = (void *)v61[13];
    if (v23)
    {
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, v23);
      int v78 = v110;
      uint64_t v82 = v114;
      long long v79 = v111;
      long long v80 = v112;
      long long v81 = v113;
      v83[0] = v115;
      if (v83[1])
      {
        v83[2] = v83[1];
        operator delete((void *)v83[1]);
      }
      *(_OWORD *)&v83[1] = v116;
      v83[3] = v117;
      uint64_t v117 = 0;
      long long v116 = 0uLL;
      v83[4] = v118;
      *(_OWORD *)&v83[5] = v119;
      *(_OWORD *)&v83[7] = v120;
      LOWORD(v83[9]) = v121;
    }
    long long v25 = (void **)v61[17];
    for (uint64_t i = (void **)v61[18]; v25 != i; ++v25)
    {
      uint64_t v26 = (uint64_t)*v25;
      HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::unarchive((uint64_t)&v110, *v25);
      uint64_t v27 = *(void *)(v26 + 144);
      BOOL v28 = v85;
      for (j = &v85; ; BOOL v28 = *j)
      {
        char v30 = j;
        if (!v28) {
          break;
        }
        while (1)
        {
          uint64_t j = (uint64_t **)v28;
          uint64_t v31 = v28[4];
          if (v31 > v27) {
            break;
          }
          if (v31 >= v27)
          {
            int v32 = (char *)j;
            goto LABEL_37;
          }
          BOOL v28 = j[1];
          if (!v28)
          {
            char v30 = j + 1;
            goto LABEL_34;
          }
        }
      }
LABEL_34:
      int v32 = (char *)operator new(0xB8uLL);
      *((void *)v32 + 4) = v27;
      *(_OWORD *)(v32 + 40) = 0u;
      *(_OWORD *)(v32 + 5objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_OWORD *)(v32 + 120) = 0u;
      *(_OWORD *)(v32 + 13objc_destroyWeak((id *)this + 6) = 0u;
      *(_OWORD *)(v32 + 152) = 0u;
      *(_OWORD *)(v32 + 16_Block_object_dispose(&STACK[0x230], 8) = 0u;
      *(void *)int v32 = 0;
      *((void *)v32 + 1) = 0;
      *((void *)v32 + 2) = j;
      *char v30 = (uint64_t *)v32;
      double v33 = (uint64_t *)v32;
      if (*v84)
      {
        uint64_t v84 = (uint64_t **)*v84;
        double v33 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v85, v33);
      ++v86;
LABEL_37:
      uint64_t v34 = (void *)*((void *)v32 + 14);
      *((_DWORD *)v32 + 10) = v110;
      uint64_t v35 = v114;
      long long v37 = v112;
      long long v36 = v113;
      *((_OWORD *)v32 + 3) = v111;
      *((_OWORD *)v32 + 4) = v37;
      *((_OWORD *)v32 + 5) = v36;
      *((void *)v32 + 12) = v35;
      *((void *)v32 + 13) = v115;
      if (v34)
      {
        *((void *)v32 + 15) = v34;
        operator delete(v34);
        *((void *)v32 + 14) = 0;
        *((void *)v32 + 15) = 0;
        *((void *)v32 + 1objc_destroyWeak((id *)this + 6) = 0;
      }
      *((_OWORD *)v32 + 7) = v116;
      *((void *)v32 + 1objc_destroyWeak((id *)this + 6) = v117;
      uint64_t v117 = 0;
      long long v116 = 0uLL;
      *((void *)v32 + 17) = v118;
      long long v38 = v120;
      *((_OWORD *)v32 + 9) = v119;
      *((_OWORD *)v32 + 10) = v38;
      *((_WORD *)v32 + 8_Block_object_dispose(&STACK[0x230], 8) = v121;
    }
    uint64_t v39 = v61[5];
    for (uint64_t k = v61[6]; v39 != k; v39 += 8)
    {
      double v42 = *(double *)(*(void *)v39 + 8);
      double v41 = *(double *)(*(void *)v39 + 16);
      if (v42 >= v41) {
        double v43 = *(double *)(*(void *)v39 + 16);
      }
      else {
        double v43 = *(double *)(*(void *)v39 + 8);
      }
      if (v41 < v42) {
        double v41 = *(double *)(*(void *)v39 + 8);
      }
      HKIntervalMask<double>::_insertInterval(v74, v43, v41);
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((uint64_t)&v64.n128_i64[1], (uint64_t)&v67);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v67);
  }
  uint64_t v44 = v104;
  uint64_t v45 = v105;
  if (v104 != v105)
  {
    int v46 = (char *)v65[1];
    do
    {
      uint64_t v47 = *(void *)(*(void *)v44 + 24);
      uint64_t v48 = *(void *)(*(void *)v44 + 32);
      uint64_t v49 = *(void *)(*(void *)v44 + 8);
      uint64_t v50 = *(void *)(*(void *)v44 + 16);
      if ((unint64_t)v46 >= (unint64_t)v66)
      {
        unint64_t v51 = (char *)v65[0];
        unint64_t v52 = 0xCCCCCCCCCCCCCCCDLL * ((v46 - (char *)v65[0]) >> 3);
        unint64_t v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) > v53) {
          unint64_t v53 = 0x999999999999999ALL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (unint64_t)v65[0]) >> 3) >= 0x333333333333333) {
          unint64_t v54 = 0x666666666666666;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54)
        {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDRawQuantitySample>>(v54);
          int v46 = (char *)v65[1];
          unint64_t v51 = (char *)v65[0];
        }
        else
        {
          uint64_t v55 = 0;
        }
        unint64_t v56 = v54 + 40 * v52;
        *(void *)unint64_t v56 = v48;
        *(void *)(v56 + _Block_object_dispose(&STACK[0x230], 8) = v47;
        *(void *)(v56 + 1objc_destroyWeak((id *)this + 6) = v49;
        *(void *)(v56 + 24) = v50;
        *(_WORD *)(v56 + 32) = 1;
        uint64_t v57 = (char *)v56;
        if (v46 != v51)
        {
          do
          {
            long long v58 = *(_OWORD *)(v46 - 40);
            long long v59 = *(_OWORD *)(v46 - 24);
            *((_WORD *)v57 - 4) = *((_WORD *)v46 - 4);
            *(_OWORD *)(v57 - 24) = v59;
            *(_OWORD *)(v57 - 40) = v58;
            v57 -= 40;
            v46 -= 40;
          }
          while (v46 != v51);
          unint64_t v51 = (char *)v65[0];
        }
        int v46 = (char *)(v56 + 40);
        v65[0] = v57;
        v65[1] = (void *)(v56 + 40);
        *(void *)&long long v66 = v54 + 40 * v55;
        if (v51) {
          operator delete(v51);
        }
      }
      else
      {
        *(void *)int v46 = v48;
        *((void *)v46 + 1) = v47;
        *((void *)v46 + 2) = v49;
        *((void *)v46 + 3) = v50;
        *((_WORD *)v46 + 1objc_destroyWeak((id *)this + 6) = 1;
        v46 += 40;
      }
      v65[1] = v46;
      v44 += 8;
    }
    while (v44 != v45);
  }
  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&v101);

  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((void *)(v62 + 112), &v64);
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v64.n128_i64[1]);
}

void sub_1BD04FBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table((uint64_t)&STACK[0x3F0]);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a3);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x3A0]);
  uint64_t v10 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v10;
    operator delete(v10);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table((uint64_t)&STACK[0x360]);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy((void *)STACK[0x350]);
  uint64_t v11 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v11;
    operator delete(v11);
  }
  char v12 = (void *)STACK[0x2A0];
  if (STACK[0x2A0])
  {
    STACK[0x2A8] = (unint64_t)v12;
    operator delete(v12);
  }
  objc_destroyWeak((id *)&STACK[0x298]);
  char v13 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v13;
    operator delete(v13);
  }

  statistics::StatisticsEngine::~StatisticsEngine((statistics::StatisticsEngine *)&STACK[0x420]);
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, void *a2, double a3, double a4)
{
  *(double *)a1 = a3;
  *(double *)(a1 + _Block_object_dispose(&STACK[0x230], 8) = a4;
  *(void *)(a1 + 1objc_destroyWeak((id *)this + 6) = 0;
  *(_WORD *)(a1 + 24) = 256;
  *(_DWORD *)(a1 + 2_Block_object_dispose(&STACK[0x230], 8) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  objc_initWeak((id *)(a1 + 88), a2);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_WORD *)(a1 + 17objc_destroyWeak((id *)this + 6) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 21objc_destroyWeak((id *)this + 6) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 242) = 0u;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 32_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 37objc_destroyWeak((id *)this + 6) = 0;
  *(_DWORD *)(a1 + 384) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 44_Block_object_dispose(&STACK[0x230], 8) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  return a1;
}

uint64_t HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsCollectionEngine(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 480);
  if (v2)
  {
    *(void *)(a1 + 48_Block_object_dispose(&STACK[0x230], 8) = v2;
    operator delete(v2);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(a1 + 8);
  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::~__hash_table(a1 + 432);
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(a1 + 392);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 352);
  uint64_t v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(void *)(a1 + 33objc_destroyWeak((id *)this + 6) = v2;
    operator delete(v2);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(a1 + 288);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 272));
  id v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(void *)(a1 + 200) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  objc_destroyWeak((id *)(a1 + 88));
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }

  return a1;
}

void std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*a1);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[14];
    if (v2)
    {
      a1[15] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t _HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_configureForStartTime(uint64_t a1)
{
  unint64_t v28 = 0;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v3 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:");
    uint64_t v4 = [v2 dateIntervalContainingDate:v3 index:&v28];

    uint64_t v5 = [v4 startDate];
    [v5 timeIntervalSinceReferenceDate];
    double v7 = v6;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
LABEL_5:
    double v13 = v9;

    goto LABEL_6;
  }
  id v10 = *(id *)(a1 + 64);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v11 = [v10 startDate];
    [v11 timeIntervalSinceReferenceDate];
    double v7 = v12;

    uint64_t v8 = [v4 endDate];
    [v8 timeIntervalSinceReferenceDate];
    goto LABEL_5;
  }
  double v7 = -1.79769313e308;
  double v13 = 1.79769313e308;
LABEL_6:

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v21, WeakRetained, v7, v13);

  if (*(void *)(a1 + 32) == 1) {
    char v23 = 1;
  }
  uint64_t v22 = *(void *)(a1 + 56);
  char v24 = *(unsigned char *)(a1 + 24) & 1;
  if (v27 != (char *)(a1 + 72)) {
    std::vector<HKRawInterval<double>>::__assign_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v27, *(char **)(a1 + 72), *(void *)(a1 + 80), (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4);
  }
  objc_storeStrong(&v26, *(id *)(a1 + 640));
  if (!*(void *)(a1 + 40)) {
    int v25 = 0;
  }
  unint64_t v15 = v28;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)v17, (uint64_t)v21);
  v18.n128_u64[0] = v15;
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket((uint64_t)&v18.n128_i64[1], (uint64_t)v17);
  long long __p = 0u;
  long long v20 = 0u;
  HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((void *)(a1 + 112), &v18);

  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)&v18.n128_i64[1]);
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v17);
  *(unsigned char *)(a1 + 624) = 0;
  return HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::~HDStatisticsBucket((uint64_t)v21);
}

void sub_1BD0501B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *HDStatisticsCollectionEngine<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=(void *a1, __n128 *a2)
{
  *a1 = a2->n128_u64[0];
  HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=((uint64_t)(a1 + 1), (uint64_t)&a2->n128_i64[1]);
  std::vector<HKRawInterval<double>>::__move_assign((uint64_t)(a1 + 60), a2 + 30);
  unint64_t v4 = a2[31].n128_u64[1];
  a2[31].n128_u64[1] = 0;
  uint64_t v5 = (void *)a1[63];
  a1[63] = v4;

  return a1;
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::HDStatisticsBucket(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  *(void *)(a1 + 32) = *(id *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = v5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 64), *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 4);
  objc_copyWeak((id *)(a1 + 88), (id *)(a2 + 88));
  *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v8 = *(unsigned char **)(a2 + 96);
  double v7 = *(unsigned char **)(a2 + 104);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v9 >> 4) >= 0x555555555555556) {
      std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
    }
    id v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(0xAAAAAAAAAAAAAAABLL * (v9 >> 4));
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v10;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = &v10[48 * v11];
    memmove(v10, v8, v9 - 5);
    *(void *)(a1 + 104) = &v10[16 * (v9 >> 4)];
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v12 = *(_OWORD *)(a2 + 128);
  long long v13 = *(_OWORD *)(a2 + 144);
  long long v14 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 17objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 160) = v14;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = v12;
  uint64_t v15 = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = v15;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 20_Block_object_dispose(&STACK[0x230], 8) = 0;
  std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>((void *)(a1 + 192), *(const void **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 4);
  *(void *)(a1 + 21objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 216);
  long long v16 = *(_OWORD *)(a2 + 240);
  uint64_t v17 = *(void *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v16;
  __n128 v18 = (void *)(a1 + 272);
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 25objc_destroyWeak((id *)this + 6) = v17;
  *(void *)(a1 + 264) = a1 + 272;
  uint64_t v19 = *(void **)(a2 + 264);
  if (v19 != (void *)(a2 + 272))
  {
    long long v20 = 0;
    long long v21 = (void *)(a1 + 272);
    while (1)
    {
      uint64_t v22 = (void *)(a1 + 272);
      if (v21 == v18) {
        goto LABEL_12;
      }
      char v23 = v20;
      char v24 = (void *)(a1 + 272);
      if (v20)
      {
        do
        {
          uint64_t v22 = v23;
          char v23 = (void *)v23[1];
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v24[2];
          BOOL v25 = *v22 == (void)v24;
          char v24 = v22;
        }
        while (v25);
      }
      uint64_t v26 = v19[4];
      if (v22[4] < v26)
      {
LABEL_12:
        if (v20) {
          uint64_t v27 = (uint64_t **)v22;
        }
        else {
          uint64_t v27 = (uint64_t **)(a1 + 272);
        }
        if (v20) {
          unint64_t v28 = (uint64_t **)(v22 + 1);
        }
        else {
          unint64_t v28 = (uint64_t **)(a1 + 272);
        }
        if (!*v28)
        {
LABEL_28:
          uint64_t v31 = operator new(0xB8uLL);
          void v31[4] = v19[4];
          *((_DWORD *)v31 + 10) = *((_DWORD *)v19 + 10);
          long long v32 = *((_OWORD *)v19 + 3);
          long long v33 = *((_OWORD *)v19 + 4);
          long long v34 = *((_OWORD *)v19 + 5);
          v31[12] = v19[12];
          *((_OWORD *)v31 + 4) = v33;
          *((_OWORD *)v31 + 5) = v34;
          *((_OWORD *)v31 + 3) = v32;
          uint64_t v35 = v19[13];
          v31[14] = 0;
          v31[13] = v35;
          v31[15] = 0;
          v31[16] = 0;
          std::vector<HKRawInterval<double>>::__init_with_size[abi:ne180100]<HKRawInterval<double>*,HKRawInterval<double>*>(v31 + 14, (const void *)v19[14], v19[15], (uint64_t)(v19[15] - v19[14]) >> 4);
          v31[17] = v19[17];
          long long v36 = *((_OWORD *)v19 + 9);
          long long v37 = *((_OWORD *)v19 + 10);
          v31[22] = v19[22];
          *((_OWORD *)v31 + 9) = v36;
          *((_OWORD *)v31 + 10) = v37;
          std::__tree<unsigned long long>::__insert_node_at((uint64_t **)(a1 + 264), (uint64_t)v27, v28, v31);
        }
      }
      else
      {
        unint64_t v28 = (uint64_t **)(a1 + 272);
        uint64_t v27 = (uint64_t **)(a1 + 272);
        if (!v20) {
          goto LABEL_28;
        }
        char v29 = v20;
        while (1)
        {
          while (1)
          {
            uint64_t v27 = (uint64_t **)v29;
            uint64_t v30 = v29[4];
            if (v30 <= v26) {
              break;
            }
            char v29 = *v27;
            unint64_t v28 = v27;
            if (!*v27) {
              goto LABEL_28;
            }
          }
          if (v30 >= v26) {
            break;
          }
          char v29 = v27[1];
          if (!v29)
          {
            unint64_t v28 = v27 + 1;
            goto LABEL_28;
          }
        }
      }
      long long v38 = (void *)v19[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          long long v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (void *)v19[2];
          BOOL v25 = *v39 == (void)v19;
          uint64_t v19 = v39;
        }
        while (!v25);
      }
      if (v39 == (void *)(a2 + 272)) {
        break;
      }
      long long v20 = (void *)*v18;
      long long v21 = *(void **)(a1 + 264);
      uint64_t v19 = v39;
    }
  }
  std::unordered_set<long long>::unordered_set(a1 + 288, a2 + 288);
  *(void *)(a1 + 32_Block_object_dispose(&STACK[0x230], 8) = 0;
  *(void *)(a1 + 33objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a1 + 344) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 328), *(const void **)(a2 + 328), *(void *)(a2 + 336), (uint64_t)(*(void *)(a2 + 336) - *(void *)(a2 + 328)) >> 3);
  std::unordered_map<long long,long long>::unordered_map(a1 + 352, a2 + 352);
  std::unordered_map<NSString * {__strong},long long,HDStringHash,HDStringEqual,std::allocator<std::pair<NSString * const {__strong},long long>>>::unordered_map(a1 + 392, a2 + 392);
  std::unordered_map<long long,NSString * {__strong}>::unordered_map(a1 + 432, a2 + 432);
  return a1;
}

void sub_1BD0505C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, id *location, void **a12)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::~__hash_table(v17);
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v16);
  uint64_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 33objc_destroyWeak((id *)this + 6) = v19;
    operator delete(v19);
  }
  std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::~__hash_table(v14);
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*v13);
  long long v20 = *a9;
  if (*a9)
  {
    *(void *)(v12 + 200) = v20;
    operator delete(v20);
  }
  long long v21 = *a10;
  if (*a10)
  {
    *(void *)(v12 + 104) = v21;
    operator delete(v21);
  }
  objc_destroyWeak(location);
  uint64_t v22 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 72) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  long long v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v5;

  long long v7 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 5objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 64, (__n128 *)(a2 + 64));
  id WeakRetained = objc_loadWeakRetained((id *)(a2 + 88));
  objc_storeWeak((id *)(a1 + 88), WeakRetained);

  uint64_t v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(void *)(a1 + 104) = v9;
    operator delete(v9);
    *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 9objc_destroyWeak((id *)this + 6) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 9objc_destroyWeak((id *)this + 6) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v10 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 144);
  long long v12 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 17objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x230], 8) = v10;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 192, (__n128 *)(a2 + 192));
  *(void *)(a1 + 21objc_destroyWeak((id *)this + 6) = *(void *)(a2 + 216);
  long long v13 = *(_OWORD *)(a2 + 224);
  long long v14 = *(_OWORD *)(a2 + 240);
  *(_WORD *)(a1 + 25objc_destroyWeak((id *)this + 6) = *(_WORD *)(a2 + 256);
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 240) = v14;
  uint64_t v15 = a1 + 272;
  std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::destroy(*(void **)(a1 + 272));
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v16 = *(void *)(a2 + 272);
  *(void *)(a1 + 272) = v16;
  uint64_t v17 = *(void *)(a2 + 280);
  *(void *)(a1 + 280) = v17;
  if (v17)
  {
    *(void *)(v16 + 1objc_destroyWeak((id *)this + 6) = v15;
    *(void *)(a2 + 264) = a2 + 272;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
  }
  else
  {
    *(void *)(a1 + 264) = v15;
  }
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 288, (uint64_t *)(a2 + 288));
  std::vector<HKRawInterval<double>>::__move_assign(a1 + 328, (__n128 *)(a2 + 328));
  std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__move_assign(a1 + 352, (uint64_t *)(a2 + 352));
  std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__move_assign(a1 + 392, (uint64_t *)(a2 + 392));
  std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__move_assign(a1 + 432, (uint64_t *)(a2 + 432));
  return a1;
}

id *_HDConcreteStatisticsCollectionCalculatorImplementation<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsFromFinishedBucket(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)a2;
  id v4 = objc_alloc(MEMORY[0x1E4F1C9C8]);
  uint64_t v5 = (double *)(a2 + 40);
  if (v3 != -1.79769313e308) {
    uint64_t v5 = (double *)a2;
  }
  unint64_t v77 = (void *)[v4 initWithTimeIntervalSinceReferenceDate:*v5];
  uint64_t v81 = a2;
  if (*(double *)(a2 + 8) == 1.79769313e308) {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
  }
  else {
    uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 8)];
  }
  long long v7 = (void *)v6;
  id v8 = *(id *)(a1 + 16);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = *(id *)(a1 + 16);
    if ([v9 shouldUseUnderlyingTypeForStatistics])
    {
      uint64_t v10 = [v9 underlyingSampleType];

      id v8 = (id)v10;
    }
  }
  long long v11 = (void *)[objc_alloc(MEMORY[0x1E4F2B5B0]) initWithDataType:v8 startDate:v77 endDate:v7];
  if (*(unsigned char *)(a1 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));

    if (WeakRetained)
    {
      id v13 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v14 = *(uint64_t **)(a2 + 328);
      uint64_t v15 = *(uint64_t **)(v81 + 336);
      while (v14 != v15)
      {
        uint64_t v16 = *v14;
        id v17 = objc_loadWeakRetained((id *)(a1 + 48));
        __n128 v18 = [v17 sourceForSourceID:v16];

        if (v18)
        {
          if (([v13 containsObject:v18] & 1) == 0) {
            [v13 addObject:v18];
          }
        }

        ++v14;
      }
      uint64_t v19 = (void *)[v13 copy];
      [v11 _setSources:v19];
    }
  }

  v88[0] = &unk_1F1722750;
  v88[3] = v88;
  id v78 = v11;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v90, (uint64_t)v88);
  long long v92 = 0;
  long long v20 = operator new(0x28uLL);
  *long long v20 = &unk_1F1722630;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v20 + 1), (uint64_t)v90);
  long long v92 = v20;
  uint64_t j = (id *)v78;
  uint64_t v22 = (void *)MEMORY[0x1E4F2B370];
  char v23 = j;
  char v24 = [MEMORY[0x1E4F2B618] secondUnit];
  __n128 v25 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v84, v81);
  if (!v92) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v26 = (*(uint64_t (**)(void *, unsigned char *, __n128))(*v92 + 48))(v92, v84, v25);
  uint64_t v27 = *(double **)(v26 + 8);
  double v28 = 0.0;
  while (v27 != *(double **)(v26 + 16))
  {
    double v30 = *v27;
    double v29 = v27[1];
    v27 += 2;
    double v28 = v28 + v29 - v30;
  }
  uint64_t v31 = [v22 quantityWithUnit:v24 doubleValue:v28 + *(double *)(v26 + 32)];
  [j setDuration:v31];

  if (__p)
  {
    long long v87 = __p;
    operator delete(__p);
  }

  __n128 v32 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v84, v81);
  if (!v92) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  objc_msgSend(j, "setDataCount:", *(void *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v92 + 48))(v92, v84, v32));
  if (__p)
  {
    long long v87 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v34 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v84, v81);
    for (uint64_t i = v85; i; uint64_t i = (id *)*i)
    {
      id v36 = i[2];
      long long v37 = (void *)MEMORY[0x1E4F2B370];
      long long v38 = [MEMORY[0x1E4F2B618] secondUnit];
      if (!v92) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v39 = (*(uint64_t (**)(void *, id *))(*v92 + 48))(v92, i + 3);
      int8x16_t v40 = *(double **)(v39 + 8);
      double v41 = 0.0;
      while (v40 != *(double **)(v39 + 16))
      {
        double v43 = *v40;
        double v42 = v40[1];
        v40 += 2;
        double v41 = v41 + v42 - v43;
      }
      uint64_t v44 = [v37 quantityWithUnit:v38 doubleValue:v41 + *(double *)(v39 + 32)];
      [v33 setObject:v44 forKeyedSubscript:v36];

      if (!v92) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v45 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)(*(uint64_t (**)(void *, id *))(*v92 + 48))(v92, i + 3));
      [v34 setObject:v45 forKeyedSubscript:v36];

      uint64_t j = v23;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v84);
    [j setDurationBySource:v33];
    [j setDataCountBySource:v34];
  }
  std::__function::__value_func<HDStatisticsTimeInterval const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v91);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v90);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)v89, (uint64_t)v88);
  long long v92 = 0;
  int v46 = operator new(0x28uLL);
  void *v46 = &unk_1F17226C0;
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::__value_func[abi:ne180100]((uint64_t)(v46 + 1), (uint64_t)v89);
  long long v92 = v46;
  uint64_t v83 = j;
  uint64_t v47 = [*(id *)(a1 + 16) canonicalUnit];
  __n128 v48 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::overallStatistics((uint64_t)v84, v81);
  if (!v92) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v49 = (double *)(*(uint64_t (**)(void *, unsigned char *, __n128))(*v92 + 48))(v92, v84, v48);
  double v50 = *v49;
  id v51 = (id)*((void *)v49 + 1);
  double v53 = v49[2];
  double v52 = v49[3];
  double v54 = v49[4];
  if (__p)
  {
    long long v87 = __p;
    operator delete(__p);
  }
  uint64_t v55 = [MEMORY[0x1E4F2B370] quantityWithUnit:v47 doubleValue:v50];
  [v83 setSumQuantity:v55];

  [v83 setDataCount:v51];
  uint64_t v56 = *(void *)(a1 + 24);
  LOBYTE(v57) = v56;
  if ((v56 & 0x20) != 0)
  {
    long long v58 = [MEMORY[0x1E4F2B370] quantityWithUnit:v47 doubleValue:v53];
    [v83 setMostRecentQuantity:v58];

    long long v59 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v52, v54);
    [v83 setMostRecentQuantityDateInterval:v59];

    uint64_t v57 = *(void *)(a1 + 24);
  }
  if (v57)
  {
    id v51 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v60 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    if ((v56 & 0x20) != 0)
    {
      id v79 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v80 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    }
    else
    {
      id v79 = 0;
      id v80 = 0;
    }
    HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::statisticsByBundleIdentifier((uint64_t)v84, v81);
    for (uint64_t j = v85; j; uint64_t j = (id *)*j)
    {
      id v61 = j[2];
      if (!v92
        || (objc_msgSend(MEMORY[0x1E4F2B370], "quantityWithUnit:doubleValue:", v47, *(double *)(*(uint64_t (**)(void *, id *))(*v92 + 48))(v92, j + 3)), uint64_t v62 = objc_claimAutoreleasedReturnValue(), objc_msgSend(v51, "setObject:forKeyedSubscript:", v62, v61), v62, !v92))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      id v63 = objc_msgSend(NSNumber, "numberWithLongLong:", *(void *)((*(uint64_t (**)(void *, id *))(*v92 + 48))(v92, j + 3) + 8));
      [v60 setObject:v63 forKeyedSubscript:v61];

      if ((v56 & 0x20) != 0)
      {
        if (!v92) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        uint64_t v64 = (*(uint64_t (**)(void *, id *))(*v92 + 48))(v92, j + 3);
        double v65 = *(double *)(v64 + 24);
        double v66 = *(double *)(v64 + 32);
        int8x16_t v67 = [MEMORY[0x1E4F2B370] quantityWithUnit:v47 doubleValue:*(double *)(v64 + 16)];
        [v79 setObject:v67 forKeyedSubscript:v61];

        uint64_t v68 = objc_msgSend(MEMORY[0x1E4F28C18], "hk_dateIntervalWithStart:end:", v65, v66);
        [v80 setObject:v68 forKeyedSubscript:v61];
      }
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::~__hash_table((uint64_t)v84);
    [v83 setSumQuantityBySource:v51];
    [v83 setDataCountBySource:v60];
    if ((v56 & 0x20) != 0)
    {
      [v83 setMostRecentQuantityBySource:v79];
      [v83 setMostRecentQuantityDateIntervalBySource:v80];
    }
  }
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v91);
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v89);

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](v88);
  char v69 = [*(id *)(a1 + 16) _unitForChangeInCanonicalUnit];
  char v70 = [v83 averageQuantity];
  if (v70)
  {
    id v51 = [v83 averageQuantity];
    if (([v51 isCompatibleWithUnit:v69] & 1) == 0)
    {

LABEL_70:
      [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8], @"Expected compatibility with %@", v69 format];
      goto LABEL_71;
    }
  }
  uint64_t v71 = [v83 minimumQuantity];
  if (v71)
  {
    uint64_t j = [v83 minimumQuantity];
    if (![j isCompatibleWithUnit:v69])
    {
      int v72 = 1;
      goto LABEL_64;
    }
  }
  uint64_t v73 = [v83 maximumQuantity];
  if (v73)
  {
    uint64_t v74 = [v83 maximumQuantity];
    int v75 = [v74 isCompatibleWithUnit:v69];

    int v72 = v75 ^ 1;
    if (v71) {
      goto LABEL_64;
    }
  }
  else
  {
    int v72 = 0;
    if (v71)
    {
LABEL_64:

      if (v70) {
        goto LABEL_65;
      }
LABEL_69:

      if (!v72) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
  if (!v70) {
    goto LABEL_69;
  }
LABEL_65:

  if (v72) {
    goto LABEL_70;
  }
LABEL_71:

  return v83;
}

void sub_1BD0512D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::__function::__value_func<HDStatisticsCumulative const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v38 - 160));
  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100]((void *)(v38 - 224));

  std::__function::__value_func<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval> const& ()(HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>> const&)>::~__value_func[abi:ne180100](&a35);
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 312);
  uint64_t v2 = *(void *)(a1 + 328);
  if (v1 != (*(void *)(a1 + 336) - v2) >> 3)
  {
    id v4 = (void **)(a1 + 328);
    *(void *)(a1 + 33objc_destroyWeak((id *)this + 6) = v2;
    std::vector<long long>::reserve((void **)(a1 + 328), v1);
    uint64_t v5 = *(void **)(a1 + 304);
    if (v5)
    {
      uint64_t v6 = *(char **)(a1 + 336);
      do
      {
        uint64_t v7 = v5[2];
        unint64_t v8 = *(void *)(a1 + 344);
        if ((unint64_t)v6 >= v8)
        {
          uint64_t v10 = (char *)*v4;
          uint64_t v11 = (v6 - (unsigned char *)*v4) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry,std::default_delete<health::TransactionalCache<unsigned long long,health::FilePage>::CacheEntry>>>>(v14);
            uint64_t v10 = *(char **)(a1 + 328);
            uint64_t v6 = *(char **)(a1 + 336);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void *)(v14 + 8 * v11);
          void *v16 = v7;
          id v9 = (char *)(v16 + 1);
          while (v6 != v10)
          {
            uint64_t v17 = *((void *)v6 - 1);
            v6 -= 8;
            *--uint64_t v16 = v17;
          }
          *(void *)(a1 + 32_Block_object_dispose(&STACK[0x230], 8) = v16;
          *(void *)(a1 + 33objc_destroyWeak((id *)this + 6) = v9;
          *(void *)(a1 + 344) = v14 + 8 * v15;
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(void *)uint64_t v6 = v7;
          id v9 = v6 + 8;
        }
        *(void *)(a1 + 33objc_destroyWeak((id *)this + 6) = v9;
        uint64_t v5 = (void *)*v5;
        uint64_t v6 = v9;
      }
      while (v5);
    }
    __n128 v18 = (id *)(a1 + 88);
    id WeakRetained = objc_loadWeakRetained(v18);

    if (WeakRetained)
    {
      id v20 = objc_loadWeakRetained(v18);
      [v20 orderSourceIDs:v4];
    }
  }
}

void sub_1BD05176C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeThroughTime(uint64_t a1, double a2)
{
  double v4 = *(double *)(a1 + 16);
  if (v4 > 0.0 && *(double *)(a1 + 8) > a2) {
    a2 = v4 * floor(a2 / v4);
  }
  double v5 = *(double *)(a1 + 56);
  if (v5 < a2)
  {
    uint64_t v125 = (void **)(a1 + 96);
    __int16 v121 = (double **)(a1 + 64);
    long long v119 = (uint64_t *)(a1 + 120);
    location = (id *)(a1 + 88);
    uint64_t v115 = (double **)(a1 + 192);
    uint64_t v114 = (void *)(a1 + 272);
    while (1)
    {
      unint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = *(long long **)(a1 + 104);
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v7 - v6) >> 4);
      if (v8) {
        break;
      }
LABEL_124:
      *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = a2;
LABEL_125:
      double v111 = *(double *)(a1 + 56);
      if (v111 == v5)
      {
        long long v112 = [MEMORY[0x1E4F28B00] currentHandler];
        long long v113 = objc_msgSend(NSString, "stringWithUTF8String:", "void HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>>>::_mergeThroughTime(double) [Statistics = HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative, HDStatisticsTimeInterval>>]");
        [v112 handleFailureInFunction:v113 file:@"HDStatisticsBucket.hpp" lineNumber:234 description:@"Failed to make forward progress during statistics merge."];

        double v111 = *(double *)(a1 + 56);
      }
      double v5 = v111;
      if (v111 >= a2) {
        return;
      }
    }
    if (v8 != 1)
    {
      double v20 = a2;
      double v21 = a2;
      double v22 = v5;
      uint64_t v23 = *(void *)(a1 + 96);
      if ((long long *)v6 != v7)
      {
        do
        {
          double v24 = *(double *)(v23 + 8);
          double v25 = *(double *)(v23 + 16);
          if (v24 > v22 && v24 < v21) {
            double v21 = *(double *)(v23 + 8);
          }
          if (v25 > v5) {
            double v27 = *(double *)(v23 + 16);
          }
          else {
            double v27 = v20;
          }
          if (v25 < v20)
          {
            double v22 = v5;
            double v20 = v27;
          }
          v23 += 48;
        }
        while ((long long *)v23 != v7);
      }
      if (v20 >= v21) {
        double v28 = v21;
      }
      else {
        double v28 = v20;
      }
      double v29 = *(double *)(a1 + 16);
      if (v29 > 0.0)
      {
        double v30 = v29 * floor(v28 / v29);
        double v31 = v29 * floor((v29 + v5) / v29);
        if (v30 >= v31) {
          double v28 = v30;
        }
        else {
          double v28 = v31;
        }
      }
      *uint64_t v125 = 0;
      v125[1] = 0;
      v125[2] = 0;
      if ((long long *)v6 != v7)
      {
        if (v8 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        __n128 v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v8);
        uint64_t v35 = *(char **)(a1 + 96);
        id v34 = *(char **)(a1 + 104);
        id v36 = v32;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 3);
            long long v38 = *((_OWORD *)v34 - 2);
            *(_OWORD *)(v36 - 21) = *(_OWORD *)(v34 - 21);
            *((_OWORD *)v36 - 3) = v37;
            *((_OWORD *)v36 - 2) = v38;
            v36 -= 48;
            v34 -= 48;
          }
          while (v34 != v35);
          id v34 = (char *)*v125;
        }
        *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v36;
        *(void *)(a1 + 104) = v32;
        *(void *)(a1 + 112) = &v32[48 * v33];
        if (v34) {
          operator delete(v34);
        }
      }
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_updateSourceOrder(a1);
      id WeakRetained = objc_loadWeakRetained(location);

      if (WeakRetained)
      {
        *(void *)&v127.double var0 = a1;
        unint64_t v40 = 126 - 2 * __clz(v8);
        if ((long long *)v6 == v7) {
          uint64_t v41 = 0;
        }
        else {
          uint64_t v41 = v40;
        }
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(v6, v7, (uint64_t)&v127, v41, 1);
      }
      if (*(unsigned char *)(a1 + 25)) {
        id v118 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      else {
        id v118 = 0;
      }
      uint64_t v117 = (void *)v6;
      if ((long long *)v6 == v7)
      {
LABEL_106:
        *(double *)(a1 + 21objc_destroyWeak((id *)this + 6) = HKIntervalMask<double>::removeIntervalsBefore(v115, v28) + *(double *)(a1 + 216);
        long long v96 = *(void **)(a1 + 264);
        if (v96 != v114)
        {
          do
          {
            *((double *)v96 + 17) = HKIntervalMask<double>::removeIntervalsBefore((double **)v96 + 14, v28)
                                  + *((double *)v96 + 17);
            int v97 = (void *)v96[1];
            if (v97)
            {
              do
              {
                long long v98 = v97;
                int v97 = (void *)*v97;
              }
              while (v97);
            }
            else
            {
              do
              {
                long long v98 = (void *)v96[2];
                BOOL v99 = *v98 == (void)v96;
                long long v96 = v98;
              }
              while (!v99);
            }
            long long v96 = v98;
          }
          while (v98 != v114);
        }
        *(double *)(a1 + 5objc_destroyWeak((id *)this + 6) = v28;

        if (v117) {
          operator delete(v117);
        }
        goto LABEL_125;
      }
      int64_t v120 = 0;
      char v44 = 0;
      unint64_t v45 = v6;
      while (2)
      {
        long long v46 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)&v127.double var0 = *(_OWORD *)v45;
        *(_OWORD *)&v127.double var2 = v46;
        *(void *)&v127.BOOL var4 = *(void *)(v45 + 32);
        uint64_t v47 = v46;
        double v48 = v28 - v127.var1;
        double v49 = *(double *)&v46 - v127.var1;
        if (v49 - (v28 - v127.var1) < 0.01)
        {
          int64_t v50 = 0;
          BOOL var4 = 0;
          BOOL var5 = 0;
          double v53 = 0.0;
          uint64_t v47 = 0;
          double v54 = 0.0;
          if (!v127.var4) {
            goto LABEL_59;
          }
LABEL_54:
          BOOL v123 = var5;
          int64_t v124 = v50;
          HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
          int v56 = *(unsigned __int8 *)(v45 + 42);
          int v57 = *(unsigned __int8 *)(v45 + 41);
          char v122 = *(unsigned char *)(v45 + 40);
          if (!v127.var4) {
            goto LABEL_87;
          }
          if (v44)
          {
            unint64_t var3 = v127.var3;
            if (v120 == v127.var3 || *(unsigned char *)(a1 + 24))
            {
              HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
              int v56 = 1;
            }
          }
          else
          {
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v119, &v127, v56 == 0);
            int v56 = 1;
            unint64_t var3 = v127.var3;
            int64_t v120 = v127.var3;
          }
          if (!*(unsigned char *)(a1 + 25)) {
            goto LABEL_86;
          }
          char v69 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, var3);
          if (!v69) {
            goto LABEL_85;
          }
          char v70 = [v118 objectForKeyedSubscript:v69];
          uint64_t v71 = v70;
          if (v70)
          {
            if ([v70 longLongValue] != var3 && !*(unsigned char *)(a1 + 24))
            {
LABEL_84:

LABEL_85:
LABEL_86:
              char v44 = 1;
LABEL_87:
              if (var4)
              {
                BOOL v84 = v56 != 0;
                uint64_t v86 = *(char **)(a1 + 104);
                unint64_t v85 = *(void *)(a1 + 112);
                if ((unint64_t)v86 < v85)
                {
                  *(double *)uint64_t v86 = v54;
                  *((double *)v86 + 1) = v53;
                  *((void *)v86 + 2) = v47;
                  *((void *)v86 + 3) = v124;
                  v86[32] = var4;
                  v86[33] = v123;
                  v86[40] = v122;
                  v86[41] = v57;
                  id v63 = v86 + 48;
                  v86[42] = v84;
                  goto LABEL_104;
                }
                id v80 = (char *)*v125;
                unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * ((v86 - (unsigned char *)*v125) >> 4);
                unint64_t v88 = v87 + 1;
                if (v87 + 1 > 0x555555555555555) {
                  std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v80) >> 4);
                if (2 * v89 > v88) {
                  unint64_t v88 = 2 * v89;
                }
                if (v89 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v90 = 0x555555555555555;
                }
                else {
                  unint64_t v90 = v88;
                }
                if (v90)
                {
                  unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v90);
                  id v80 = *(char **)(a1 + 96);
                  uint64_t v86 = *(char **)(a1 + 104);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                unint64_t v92 = v90 + 48 * v87;
                *(double *)unint64_t v92 = v54;
                *(double *)(v92 + _Block_object_dispose(&STACK[0x230], 8) = v53;
                *(void *)(v92 + 1objc_destroyWeak((id *)this + 6) = v47;
                *(void *)(v92 + 24) = v124;
                *(unsigned char *)(v92 + 32) = var4;
                *(unsigned char *)(v92 + 33) = v123;
                *(unsigned char *)(v92 + 40) = v122;
                *(unsigned char *)(v92 + 41) = v57;
                *(unsigned char *)(v92 + 42) = v84;
                unint64_t v93 = v92;
                if (v86 != v80)
                {
                  do
                  {
                    long long v94 = *((_OWORD *)v86 - 3);
                    long long v95 = *((_OWORD *)v86 - 2);
                    *(_OWORD *)(v93 - 21) = *(_OWORD *)(v86 - 21);
                    *(_OWORD *)(v93 - 4_Block_object_dispose(&STACK[0x230], 8) = v94;
                    *(_OWORD *)(v93 - 32) = v95;
                    v93 -= 48;
                    v86 -= 48;
                  }
                  while (v86 != v80);
                  id v80 = (char *)*v125;
                }
                id v63 = (_OWORD *)(v92 + 48);
                *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v93;
                *(void *)(a1 + 104) = v92 + 48;
                *(void *)(a1 + 112) = v90 + 48 * v91;
                if (v80) {
LABEL_103:
                }
                  operator delete(v80);
                goto LABEL_104;
              }
              goto LABEL_105;
            }
          }
          else
          {
            uint64_t v81 = [NSNumber numberWithLongLong:var3];
            [v118 setObject:v81 forKeyedSubscript:v69];
          }
          unint64_t v82 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, var3);
          uint64_t v83 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v82);
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v83, &v127, v57 == 0);
          LOBYTE(v57) = 1;
          goto LABEL_84;
        }
        if (v48 < 0.01)
        {
          v127.BOOL var4 = 0;
          goto LABEL_59;
        }
        double v55 = v48 / v49 * v127.var0;
        int64_t v50 = v127.var3;
        BOOL var5 = v127.var5;
        double v54 = v127.var0 - v55;
        v127.double var0 = v55;
        v127.double var2 = v28;
        double v53 = v28;
        BOOL var4 = v127.var4;
        if (v127.var4) {
          goto LABEL_54;
        }
LABEL_59:
        long long v59 = *(_OWORD **)(a1 + 104);
        unint64_t v60 = *(void *)(a1 + 112);
        if ((unint64_t)v59 < v60)
        {
          long long v61 = *(_OWORD *)v45;
          long long v62 = *(_OWORD *)(v45 + 32);
          v59[1] = *(_OWORD *)(v45 + 16);
          v59[2] = v62;
          *long long v59 = v61;
          id v63 = v59 + 3;
          goto LABEL_104;
        }
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59 - (unsigned char *)*v125) >> 4);
        unint64_t v65 = v64 + 1;
        if (v64 + 1 > 0x555555555555555) {
          std::vector<std::unique_ptr<statistics::Interval>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v125) >> 4);
        if (2 * v66 > v65) {
          unint64_t v65 = 2 * v66;
        }
        if (v66 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v67 = 0x555555555555555;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67) {
          unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsDiscrete,HDStatisticsTimeInterval>>>::_SampleRemainder>>(v67);
        }
        else {
          uint64_t v68 = 0;
        }
        int v72 = (_OWORD *)(v67 + 48 * v64);
        long long v73 = *(_OWORD *)v45;
        long long v74 = *(_OWORD *)(v45 + 32);
        v72[1] = *(_OWORD *)(v45 + 16);
        v72[2] = v74;
        *int v72 = v73;
        long long v76 = *(char **)(a1 + 96);
        int v75 = *(char **)(a1 + 104);
        unint64_t v77 = v72;
        if (v75 != v76)
        {
          do
          {
            long long v78 = *((_OWORD *)v75 - 3);
            long long v79 = *((_OWORD *)v75 - 2);
            *(_OWORD *)((char *)v77 - 21) = *(_OWORD *)(v75 - 21);
            *(v77 - 3) = v78;
            *(v77 - 2) = v79;
            v77 -= 3;
            v75 -= 48;
          }
          while (v75 != v76);
          int v75 = (char *)*v125;
        }
        id v63 = v72 + 3;
        *(void *)(a1 + 9objc_destroyWeak((id *)this + 6) = v77;
        *(void *)(a1 + 104) = v72 + 3;
        *(void *)(a1 + 112) = v67 + 48 * v68;
        if (v75)
        {
          id v80 = v75;
          goto LABEL_103;
        }
LABEL_104:
        *(void *)(a1 + 104) = v63;
LABEL_105:
        v45 += 48;
        if ((long long *)v45 == v7) {
          goto LABEL_106;
        }
        continue;
      }
    }
    double v10 = *(double *)v6;
    double v9 = *(double *)(v6 + 8);
    double v11 = *(double *)(v6 + 16);
    int64_t v12 = *(void *)(v6 + 24);
    char v13 = *(unsigned char *)(v6 + 32);
    char v14 = *(unsigned char *)(v6 + 33);
    double v15 = a2 - v9;
    if (a2 - v9 >= 0.01)
    {
      if (v11 - v9 - v15 < 0.01)
      {
        uint64_t v42 = 0;
        char v43 = 0;
        double v18 = 0.0;
        double v17 = *(double *)(v6 + 16);
        char v16 = *(unsigned char *)(v6 + 32);
        double v19 = 0.0;
        double v11 = 0.0;
        char v13 = 0;
LABEL_117:
        int v101 = *(unsigned __int8 *)(v6 + 42);
        int v102 = *(unsigned __int8 *)(v6 + 41);
        int v103 = *(unsigned __int8 *)(v6 + 40);
        v127.double var0 = v10;
        v127.double var1 = v9;
        v127.double var2 = v17;
        v127.unint64_t var3 = v12;
        v127.BOOL var4 = v16;
        v127.BOOL var5 = v14;
        *(_DWORD *)(&v127.var5 + 1) = *(_DWORD *)(v6 + 34);
        *(_WORD *)(&v127.var5 + 5) = *(_WORD *)(v6 + 38);
        *(double *)&long long v128 = v18;
        *((double *)&v128 + 1) = v19;
        *(double *)&long long v129 = v11;
        *((void *)&v129 + 1) = v42;
        LOBYTE(v130) = v13;
        HIBYTE(v130) = v43;
        HDRawQuantitySample::applyMask((uint64_t)&v127, v121);
        BOOL v104 = v103 != 0;
        BOOL v105 = v102 != 0;
        BOOL v106 = v101 != 0;
        if (v127.var4)
        {
          HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v119, &v127, v101 == 0);
          if (*(unsigned char *)(a1 + 25))
          {
            unint64_t v107 = HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(a1, v127.var3);
            uint64_t v108 = (uint64_t *)HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(a1, v107);
            HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(v108, &v127, v102 == 0);
          }
          BOOL v104 = 1;
          BOOL v105 = 1;
          BOOL v106 = 1;
        }
        if ((_BYTE)v130)
        {
          LOWORD(v12objc_destroyWeak((id *)this + 6) = v130;
          long long v109 = v129;
          int v110 = (char *)*v125;
          *(_OWORD *)int v110 = v128;
          *((_OWORD *)v110 + 1) = v109;
          *((void *)v110 + 4) = v126;
          v110[40] = v104;
          v110[41] = v105;
          v110[42] = v106;
        }
        else
        {
          *(void *)(a1 + 104) = *(void *)(a1 + 96);
        }
        goto LABEL_124;
      }
      double v100 = v10 * (v15 / (v11 - v9));
      double v17 = a2;
      char v16 = *(unsigned char *)(v6 + 32);
      double v18 = v10 - v100;
      double v10 = v100;
      double v19 = a2;
    }
    else
    {
      char v16 = 0;
      double v17 = *(double *)(v6 + 16);
      double v18 = *(double *)v6;
      double v19 = *(double *)(v6 + 8);
    }
    uint64_t v42 = *(void *)(v6 + 24);
    char v43 = *(unsigned char *)(v6 + 33);
    goto LABEL_117;
  }
}

void sub_1BD0520F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>::addSample(uint64_t *result, HDRawQuantitySample *a2, int a3)
{
  double v4 = a2;
  double v5 = result;
  double var0 = a2->var0;
  int v7 = 2 * (a2->var0 != -1.79769313e308);
  if (a2->var0 == 1.79769313e308) {
    int v7 = 1;
  }
  if (!v7)
  {
    if (*(_DWORD *)result || result[2]) {
      return result;
    }
    *((double *)result + 1) = var0 + *((double *)result + 1);
    if (a3) {
      result[2] = 1;
    }
    unint64_t v8 = result + 8;
    goto LABEL_26;
  }
  if (v7 == 1)
  {
    if (*(_DWORD *)result) {
      return result;
    }
    int v10 = 1;
LABEL_17:
    *(_DWORD *)BOOL result = v10;
    *(_OWORD *)(result + 1) = 0u;
    double v11 = (double *)(result + 1);
    char v13 = result + 9;
    int64_t v12 = (void *)result[9];
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    if (v12)
    {
      v5[10] = (uint64_t)v12;
      operator delete(v12);
      int v14 = *((unsigned __int8 *)v5 + 56);
      _OWORD *v13 = 0u;
      *(_OWORD *)(v5 + 11) = 0u;
      if (v14 && *((double *)v5 + 4) > *((double *)v5 + 14)) {
        goto LABEL_23;
      }
    }
    else
    {
      _OWORD *v13 = 0uLL;
      *(_OWORD *)(v5 + 11) = 0uLL;
    }
    *(_OWORD *)(v5 + 3) = *(_OWORD *)(v5 + 13);
    *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 15);
    *((_WORD *)v5 + 2_Block_object_dispose(&STACK[0x230], 8) = *((_WORD *)v5 + 68);
LABEL_23:
    *double v11 = v4->var0 + *v11;
    if (a3) {
      ++v5[2];
    }
    unint64_t v8 = v5 + 8;
LABEL_26:
    a2 = v4;
    int v9 = a3;
    goto LABEL_27;
  }
  if (v7 != 2) {
    return result;
  }
  if (*(_DWORD *)result != 2)
  {
    int v10 = 2;
    goto LABEL_17;
  }
  *((double *)result + 1) = var0 + *((double *)result + 1);
  ++result[2];
  unint64_t v8 = result + 8;
  int v9 = 1;
LABEL_27:

  return HDStatisticsTimeInterval::addSample(v8, a2, v9);
}

uint64_t **HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_statisticsForSource(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  double v3 = *(void **)(a1 + 272);
  if (!v3) {
    goto LABEL_11;
  }
  double v4 = (uint64_t **)(a1 + 272);
  do
  {
    uint64_t v5 = v3[4];
    BOOL v6 = v5 < a2;
    if (v5 >= a2) {
      int v7 = v3;
    }
    else {
      int v7 = v3 + 1;
    }
    if (!v6) {
      double v4 = (uint64_t **)v3;
    }
    double v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t **)(a1 + 272) || (uint64_t)v4[4] > a2)
  {
LABEL_11:
    unint64_t v8 = (uint64_t **)(a1 + 264);
    std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t **)(a1 + 264), a2, &v10);
    double v4 = std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(v8, a2, &v10);
  }
  return v4 + 5;
}

unint64_t HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_canonicalSourceIDForSourceID(uint64_t a1, unint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>((void *)(a1 + 352), a2);
    if (v5)
    {
      return v5[3];
    }
    else
    {
      HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(a1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = v6;
      int v7 = (void *)(a1 + 392);
      unint64_t v8 = std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::find<NSString * {__strong}>(v7, &v10);
      if (v8)
      {
        a2 = (unint64_t)v8[3];
      }
      else
      {
        double v11 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<NSString * {__strong},long long>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringHash,HDStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},long long>,HDStringEqual,HDStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},long long>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * const {__strong}&>,std::tuple<>>((uint64_t)v7, &v10, &v11)+ 3) = a2;
        id v6 = v10;
      }
    }
  }
  return a2;
}

void sub_1BD052484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_bundleIdentifierForSourceID(uint64_t a1, unint64_t a2)
{
  unint64_t v12 = a2;
  double v4 = (id *)(a1 + 88);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));

  if (WeakRetained)
  {
    id v6 = (void *)(a1 + 432);
    int v7 = std::__hash_table<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,health::TransactionalCache<unsigned long long,health::FilePage>::CacheLine>>>::find<unsigned long long>(v6, a2);
    if (v7)
    {
      id v8 = (id)v7[3];
    }
    else
    {
      id v9 = objc_loadWeakRetained(v4);
      id v8 = [v9 bundleIdentifierForSourceID:a2];

      if (v8)
      {
        id v10 = (id *)std::__hash_table<std::__hash_value_type<long long,NSString * {__strong}>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,NSString * {__strong}>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,NSString * {__strong}>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v6, a2, &v12);
        objc_storeStrong(v10 + 3, v8);
      }
    }
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_1BD052568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::__map_value_compare<long long,std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>,std::less<long long>,true>,std::allocator<std::__value_type<long long,HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, void *a3)
{
  id v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        uint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        id v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        id v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    id v9 = (char *)operator new(0xB8uLL);
    *((void *)v9 + 4) = *a3;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 5objc_destroyWeak((id *)this + 6) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 8_Block_object_dispose(&STACK[0x230], 8) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 13objc_destroyWeak((id *)this + 6) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 16_Block_object_dispose(&STACK[0x230], 8) = 0u;
    std::__tree<unsigned long long>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 3;
    unint64_t v13 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = (uint64_t)a2 - v13;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 4);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v103 = *((void *)a2 - 3);
                uint64_t v104 = *(void *)(v13 + 24);
                if (v103 == v104) {
                  return;
                }
                BOOL v105 = *(char **)(*(void *)a3 + 328);
                BOOL v106 = *(char **)(*(void *)a3 + 336);
                unint64_t v107 = v105;
                uint64_t v108 = v105;
                if (v105 == v106) {
                  goto LABEL_171;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)v13, (long long *)(v13 + 48), a2 - 3, a3);
                return;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, (uint64_t)(a2 - 3), a3);
                return;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, v13 + 48, v13 + 96, v13 + 144, (uint64_t)(a2 - 3), a3);
                return;
              default:
                JUMPOUT(0);
            }
            do
            {
              if (*(void *)v108 == v103) {
                goto LABEL_168;
              }
              v108 += 8;
            }
            while (v108 != v106);
            uint64_t v108 = *(char **)(*(void *)a3 + 336);
LABEL_168:
            while (*(void *)v107 != v104)
            {
              v107 += 8;
              if (v107 == v106)
              {
                unint64_t v107 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
LABEL_171:
            if (v108 - v105 < v107 - v105)
            {
              *(_OWORD *)v226 = *(_OWORD *)(v13 + 16);
              *(_OWORD *)&v226[16] = *(_OWORD *)(v13 + 32);
              long long v218 = *(_OWORD *)v13;
              long long v109 = *v12;
              long long v110 = *(a2 - 2);
              *(_OWORD *)(v13 + 27) = *(long long *)((char *)a2 - 21);
              *(_OWORD *)unint64_t v13 = v109;
              *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v110;
              *(long long *)((char *)a2 - 21) = *(_OWORD *)&v226[11];
              *unint64_t v12 = v218;
              *(a2 - 2) = *(_OWORD *)v226;
            }
            return;
          }
          if (v14 <= 1151)
          {
            double v111 = (long long *)(v13 + 48);
            BOOL v113 = (long long *)v13 == a2 || v111 == a2;
            if (a5)
            {
              if (!v113)
              {
                unint64_t v114 = v13;
                do
                {
                  unint64_t v115 = v114;
                  unint64_t v114 = (unint64_t)v111;
                  uint64_t v116 = *(void *)(v115 + 72);
                  uint64_t v117 = *(void *)(v115 + 24);
                  if (v116 != v117)
                  {
                    id v118 = *(char **)(*(void *)a3 + 328);
                    long long v119 = *(char **)(*(void *)a3 + 336);
                    int64_t v120 = v118;
                    __int16 v121 = v118;
                    if (v118 != v119)
                    {
                      do
                      {
                        if (*(void *)v121 == v116) {
                          goto LABEL_196;
                        }
                        v121 += 8;
                      }
                      while (v121 != v119);
                      __int16 v121 = *(char **)(*(void *)a3 + 336);
LABEL_196:
                      while (*(void *)v120 != v117)
                      {
                        v120 += 8;
                        if (v120 == v119)
                        {
                          int64_t v120 = *(char **)(*(void *)a3 + 336);
                          break;
                        }
                      }
                    }
                    if (v121 - v118 < v120 - v118)
                    {
                      uint64_t v227 = *(void *)(v114 + 16);
                      long long v219 = *(_OWORD *)v114;
                      long long v236 = *(_OWORD *)(v115 + 80);
                      unint64_t v122 = v114;
                      while (1)
                      {
                        long long v123 = *(_OWORD *)(v115 + 16);
                        *(_OWORD *)unint64_t v122 = *(_OWORD *)v115;
                        *(_OWORD *)(v122 + 1objc_destroyWeak((id *)this + 6) = v123;
                        *(_OWORD *)(v122 + 27) = *(_OWORD *)(v115 + 27);
                        if (v115 == v13) {
                          break;
                        }
                        unint64_t v122 = v115;
                        uint64_t v124 = *(void *)(v115 - 24);
                        if (v116 != v124)
                        {
                          uint64_t v125 = *(char **)(*(void *)a3 + 328);
                          uint64_t v126 = *(char **)(*(void *)a3 + 336);
                          HDRawQuantitySample v127 = v125;
                          long long v128 = v125;
                          if (v125 != v126)
                          {
                            do
                            {
                              if (*(void *)v128 == v116) {
                                goto LABEL_208;
                              }
                              v128 += 8;
                            }
                            while (v128 != v126);
                            long long v128 = *(char **)(*(void *)a3 + 336);
LABEL_208:
                            while (*(void *)v127 != v124)
                            {
                              v127 += 8;
                              if (v127 == v126)
                              {
                                HDRawQuantitySample v127 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                          unint64_t v115 = v122 - 48;
                          if (v128 - v125 < v127 - v125) {
                            continue;
                          }
                        }
                        goto LABEL_212;
                      }
                      unint64_t v122 = v13;
LABEL_212:
                      *(_OWORD *)unint64_t v122 = v219;
                      *(void *)(v122 + 1objc_destroyWeak((id *)this + 6) = v227;
                      *(void *)(v122 + 24) = v116;
                      *(void *)(v122 + 32) = v236;
                      *(_DWORD *)(v122 + 39) = *(_DWORD *)((char *)&v236 + 7);
                    }
                  }
                  double v111 = (long long *)(v114 + 48);
                }
                while ((long long *)(v114 + 48) != a2);
              }
            }
            else if (!v113)
            {
              do
              {
                unint64_t v201 = a1;
                a1 = (unint64_t)v111;
                uint64_t v202 = *(void *)(v201 + 72);
                uint64_t v203 = *(void *)(v201 + 24);
                if (v202 != v203)
                {
                  v204 = *(char **)(*(void *)a3 + 328);
                  v205 = *(char **)(*(void *)a3 + 336);
                  v206 = v204;
                  v207 = v204;
                  if (v204 != v205)
                  {
                    do
                    {
                      if (*(void *)v207 == v202) {
                        goto LABEL_312;
                      }
                      v207 += 8;
                    }
                    while (v207 != v205);
                    v207 = *(char **)(*(void *)a3 + 336);
LABEL_312:
                    while (*(void *)v206 != v203)
                    {
                      v206 += 8;
                      if (v206 == v205)
                      {
                        v206 = *(char **)(*(void *)a3 + 336);
                        break;
                      }
                    }
                  }
                  if (v207 - v204 < v206 - v204)
                  {
                    uint64_t v230 = *(void *)(a1 + 16);
                    long long v222 = *(_OWORD *)a1;
                    long long v239 = *(_OWORD *)(v201 + 80);
                    unint64_t v208 = a1;
                    do
                    {
                      v209 = (_OWORD *)v208;
                      unint64_t v208 = v201;
                      long long v210 = *(_OWORD *)(v201 + 16);
                      _OWORD *v209 = *(_OWORD *)v201;
                      v209[1] = v210;
                      *(_OWORD *)((char *)v209 + 27) = *(_OWORD *)(v201 + 27);
                      uint64_t v211 = *(void *)(v201 - 24);
                      if (v202 == v211) {
                        break;
                      }
                      v212 = *(char **)(*(void *)a3 + 328);
                      v213 = *(char **)(*(void *)a3 + 336);
                      v214 = v212;
                      v215 = v212;
                      if (v212 != v213)
                      {
                        do
                        {
                          if (*(void *)v215 == v202) {
                            goto LABEL_322;
                          }
                          v215 += 8;
                        }
                        while (v215 != v213);
                        v215 = *(char **)(*(void *)a3 + 336);
LABEL_322:
                        while (*(void *)v214 != v211)
                        {
                          v214 += 8;
                          if (v214 == v213)
                          {
                            v214 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      unint64_t v201 = v208 - 48;
                    }
                    while (v215 - v212 < v214 - v212);
                    *(_OWORD *)unint64_t v208 = v222;
                    *(void *)(v208 + 1objc_destroyWeak((id *)this + 6) = v230;
                    *(void *)(v208 + 24) = v202;
                    *(void *)(v208 + 32) = v239;
                    *(_DWORD *)(v208 + 39) = *(_DWORD *)((char *)&v239 + 7);
                  }
                }
                double v111 = (long long *)(a1 + 48);
              }
              while ((long long *)(a1 + 48) != a2);
            }
            return;
          }
          if (!a4)
          {
            if ((long long *)v13 != a2)
            {
              int64_t v129 = (v15 - 2) >> 1;
              int64_t v130 = v129;
              do
              {
                int64_t v131 = v130;
                if (v129 >= v130)
                {
                  uint64_t v132 = (2 * v130) | 1;
                  unint64_t v133 = v13 + 48 * v132;
                  if (2 * v131 + 2 < (uint64_t)v15)
                  {
                    uint64_t v134 = *(void *)(v133 + 24);
                    uint64_t v135 = *(void *)(v133 + 72);
                    if (v134 != v135)
                    {
                      uint64_t v137 = *(char **)(*(void *)a3 + 328);
                      v136 = *(char **)(*(void *)a3 + 336);
                      uint64_t v138 = v137;
                      v139 = v137;
                      if (v137 != v136)
                      {
                        do
                        {
                          if (*(void *)v139 == v134) {
                            goto LABEL_224;
                          }
                          v139 += 8;
                        }
                        while (v139 != v136);
                        v139 = *(char **)(*(void *)a3 + 336);
LABEL_224:
                        while (*(void *)v138 != v135)
                        {
                          v138 += 8;
                          if (v138 == v136)
                          {
                            uint64_t v138 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      v133 += 48 * (v139 - v137 < v138 - v137);
                      if (v139 - v137 < v138 - v137) {
                        uint64_t v132 = 2 * v131 + 2;
                      }
                    }
                  }
                  unint64_t v140 = v13 + 48 * v131;
                  uint64_t v141 = *(void *)(v133 + 24);
                  uint64_t v142 = *(void *)(v140 + 24);
                  if (v141 == v142) {
                    goto LABEL_238;
                  }
                  v144 = *(char **)(*(void *)a3 + 328);
                  uint64_t v143 = *(char **)(*(void *)a3 + 336);
                  unint64_t v145 = v144;
                  uint64_t v146 = v144;
                  if (v144 != v143)
                  {
                    do
                    {
                      if (*(void *)v146 == v141) {
                        goto LABEL_234;
                      }
                      v146 += 8;
                    }
                    while (v146 != v143);
                    uint64_t v146 = *(char **)(*(void *)a3 + 336);
LABEL_234:
                    while (*(void *)v145 != v142)
                    {
                      v145 += 8;
                      if (v145 == v143)
                      {
                        unint64_t v145 = *(char **)(*(void *)a3 + 336);
                        break;
                      }
                    }
                  }
                  if (v146 - v144 >= v145 - v144)
                  {
LABEL_238:
                    uint64_t v228 = *(void *)(v140 + 16);
                    long long v220 = *(_OWORD *)v140;
                    long long v237 = *(_OWORD *)(v140 + 32);
                    long long v147 = *(_OWORD *)v133;
                    long long v148 = *(_OWORD *)(v133 + 16);
                    *(_OWORD *)(v140 + 27) = *(_OWORD *)(v133 + 27);
                    *(_OWORD *)unint64_t v140 = v147;
                    *(_OWORD *)(v140 + 1objc_destroyWeak((id *)this + 6) = v148;
                    if (v129 >= v132)
                    {
                      while (1)
                      {
                        uint64_t v150 = 2 * v132;
                        uint64_t v132 = (2 * v132) | 1;
                        unint64_t v149 = v13 + 48 * v132;
                        uint64_t v151 = v150 + 2;
                        if (v151 < (uint64_t)v15)
                        {
                          uint64_t v152 = *(void *)(v149 + 24);
                          uint64_t v153 = *(void *)(v149 + 72);
                          if (v152 != v153)
                          {
                            uint64_t v154 = *(char **)(*(void *)a3 + 328);
                            uint64_t v155 = *(char **)(*(void *)a3 + 336);
                            v156 = v154;
                            v157 = v154;
                            if (v154 != v155)
                            {
                              do
                              {
                                if (*(void *)v157 == v152) {
                                  goto LABEL_246;
                                }
                                v157 += 8;
                              }
                              while (v157 != v155);
                              v157 = *(char **)(*(void *)a3 + 336);
LABEL_246:
                              while (*(void *)v156 != v153)
                              {
                                v156 += 8;
                                if (v156 == v155)
                                {
                                  v156 = *(char **)(*(void *)a3 + 336);
                                  break;
                                }
                              }
                            }
                            v149 += 48 * (v157 - v154 < v156 - v154);
                            if (v157 - v154 < v156 - v154) {
                              uint64_t v132 = v151;
                            }
                          }
                        }
                        uint64_t v158 = *(void *)(v149 + 24);
                        if (v158 != v142)
                        {
                          v160 = *(char **)(*(void *)a3 + 328);
                          v159 = *(char **)(*(void *)a3 + 336);
                          char v161 = v160;
                          v162 = v160;
                          if (v160 != v159)
                          {
                            do
                            {
                              if (*(void *)v162 == v158) {
                                goto LABEL_256;
                              }
                              v162 += 8;
                            }
                            while (v162 != v159);
                            v162 = *(char **)(*(void *)a3 + 336);
LABEL_256:
                            while (*(void *)v161 != v142)
                            {
                              v161 += 8;
                              if (v161 == v159)
                              {
                                char v161 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                          if (v162 - v160 < v161 - v160) {
                            break;
                          }
                        }
                        long long v163 = *(_OWORD *)v149;
                        long long v164 = *(_OWORD *)(v149 + 16);
                        *(_OWORD *)(v133 + 27) = *(_OWORD *)(v149 + 27);
                        *(_OWORD *)unint64_t v133 = v163;
                        *(_OWORD *)(v133 + 1objc_destroyWeak((id *)this + 6) = v164;
                        unint64_t v133 = v149;
                        if (v129 < v132) {
                          goto LABEL_261;
                        }
                      }
                    }
                    unint64_t v149 = v133;
LABEL_261:
                    *(_OWORD *)unint64_t v149 = v220;
                    *(void *)(v149 + 1objc_destroyWeak((id *)this + 6) = v228;
                    *(void *)(v149 + 24) = v142;
                    *(void *)(v149 + 32) = v237;
                    *(_DWORD *)(v149 + 39) = *(_DWORD *)((char *)&v237 + 7);
                  }
                }
                int64_t v130 = v131 - 1;
              }
              while (v131);
              int64_t v165 = v14 / 0x30uLL;
              do
              {
                uint64_t v166 = 0;
                *(_OWORD *)v229 = *(_OWORD *)(v13 + 16);
                *(_OWORD *)&v229[16] = *(_OWORD *)(v13 + 32);
                long long v221 = *(_OWORD *)v13;
                uint64_t v167 = v165 - 2;
                if (v165 < 2) {
                  uint64_t v167 = v165 - 1;
                }
                uint64_t v168 = v167 >> 1;
                unint64_t v169 = v13;
                do
                {
                  v170 = (_OWORD *)v169;
                  v169 += 48 * v166 + 48;
                  uint64_t v171 = 2 * v166;
                  uint64_t v166 = (2 * v166) | 1;
                  uint64_t v172 = v171 + 2;
                  if (v171 + 2 < v165)
                  {
                    uint64_t v173 = *(void *)(v169 + 24);
                    uint64_t v174 = *(void *)(v169 + 72);
                    if (v173 != v174)
                    {
                      v176 = *(char **)(*(void *)a3 + 328);
                      v175 = *(char **)(*(void *)a3 + 336);
                      v177 = v176;
                      v178 = v176;
                      if (v176 != v175)
                      {
                        do
                        {
                          if (*(void *)v178 == v173) {
                            goto LABEL_273;
                          }
                          v178 += 8;
                        }
                        while (v178 != v175);
                        v178 = *(char **)(*(void *)a3 + 336);
LABEL_273:
                        while (*(void *)v177 != v174)
                        {
                          v177 += 8;
                          if (v177 == v175)
                          {
                            v177 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      v169 += 48 * (v178 - v176 < v177 - v176);
                      if (v178 - v176 < v177 - v176) {
                        uint64_t v166 = v172;
                      }
                    }
                  }
                  long long v179 = *(_OWORD *)v169;
                  long long v180 = *(_OWORD *)(v169 + 16);
                  *(_OWORD *)((char *)v170 + 27) = *(_OWORD *)(v169 + 27);
                  _OWORD *v170 = v179;
                  v170[1] = v180;
                }
                while (v166 <= v168);
                a2 -= 3;
                if ((long long *)v169 == a2)
                {
                  *(_OWORD *)(v169 + 27) = *(_OWORD *)&v229[11];
                  *(_OWORD *)unint64_t v169 = v221;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v229;
                }
                else
                {
                  long long v181 = *a2;
                  long long v182 = a2[1];
                  *(_OWORD *)(v169 + 27) = *(long long *)((char *)a2 + 27);
                  *(_OWORD *)unint64_t v169 = v181;
                  *(_OWORD *)(v169 + 1objc_destroyWeak((id *)this + 6) = v182;
                  *(long long *)((char *)a2 + 27) = *(_OWORD *)&v229[11];
                  *a2 = v221;
                  a2[1] = *(_OWORD *)v229;
                  uint64_t v183 = v169 - v13 + 48;
                  if (v183 >= 49)
                  {
                    unint64_t v184 = (v183 / 0x30uLL - 2) >> 1;
                    unint64_t v185 = v13 + 48 * v184;
                    uint64_t v186 = *(void *)(v185 + 24);
                    uint64_t v187 = *(void *)(v169 + 24);
                    if (v186 != v187)
                    {
                      v189 = *(char **)(*(void *)a3 + 328);
                      v188 = *(char **)(*(void *)a3 + 336);
                      v190 = v189;
                      v191 = v189;
                      if (v189 != v188)
                      {
                        do
                        {
                          if (*(void *)v191 == v186) {
                            goto LABEL_286;
                          }
                          v191 += 8;
                        }
                        while (v191 != v188);
                        v191 = *(char **)(*(void *)a3 + 336);
LABEL_286:
                        while (*(void *)v190 != v187)
                        {
                          v190 += 8;
                          if (v190 == v188)
                          {
                            v190 = *(char **)(*(void *)a3 + 336);
                            break;
                          }
                        }
                      }
                      if (v191 - v189 < v190 - v189)
                      {
                        uint64_t v242 = *(void *)(v169 + 16);
                        long long v238 = *(_OWORD *)v169;
                        long long v233 = *(_OWORD *)(v169 + 32);
                        do
                        {
                          v192 = (_OWORD *)v169;
                          unint64_t v169 = v185;
                          long long v193 = *(_OWORD *)v185;
                          long long v194 = *(_OWORD *)(v185 + 16);
                          *(_OWORD *)((char *)v192 + 27) = *(_OWORD *)(v185 + 27);
                          _OWORD *v192 = v193;
                          v192[1] = v194;
                          if (!v184) {
                            break;
                          }
                          unint64_t v184 = (v184 - 1) >> 1;
                          unint64_t v185 = v13 + 48 * v184;
                          uint64_t v195 = *(void *)(v185 + 24);
                          if (v195 == v187) {
                            break;
                          }
                          v197 = *(char **)(*(void *)a3 + 328);
                          v196 = *(char **)(*(void *)a3 + 336);
                          v198 = v197;
                          v199 = v197;
                          if (v197 != v196)
                          {
                            do
                            {
                              if (*(void *)v199 == v195) {
                                goto LABEL_297;
                              }
                              v199 += 8;
                            }
                            while (v199 != v196);
                            v199 = *(char **)(*(void *)a3 + 336);
LABEL_297:
                            while (*(void *)v198 != v187)
                            {
                              v198 += 8;
                              if (v198 == v196)
                              {
                                v198 = *(char **)(*(void *)a3 + 336);
                                break;
                              }
                            }
                          }
                        }
                        while (v199 - v197 < v198 - v197);
                        *(_OWORD *)unint64_t v169 = v238;
                        *(void *)(v169 + 1objc_destroyWeak((id *)this + 6) = v242;
                        *(void *)(v169 + 24) = v187;
                        *(void *)(v169 + 32) = v233;
                        *(_DWORD *)(v169 + 39) = *(_DWORD *)((char *)&v233 + 7);
                      }
                    }
                  }
                }
              }
              while (v165-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          double v17 = (long long *)(v13 + 48 * (v15 >> 1));
          if ((unint64_t)v14 >= 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48 * (v15 >> 1)), a2 - 3, a3);
            uint64_t v18 = 3 * v16;
            double v19 = (long long *)(a1 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48), v19, a2 - 6, a3);
            double v20 = (long long *)(a1 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 96), v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v19, v17, v20, a3);
            *(_OWORD *)v223 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v223[16] = *(_OWORD *)(a1 + 32);
            long long v216 = *(_OWORD *)a1;
            long long v21 = *(long long *)((char *)v17 + 27);
            long long v22 = v17[1];
            *(_OWORD *)a1 = *v17;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v22;
            *(_OWORD *)(a1 + 27) = v21;
            *(long long *)((char *)v17 + 27) = *(_OWORD *)&v223[11];
            *double v17 = v216;
            v17[1] = *(_OWORD *)v223;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)(a1 + 48 * (v15 >> 1)), (long long *)a1, a2 - 3, a3);
          }
          --a4;
          if (a5)
          {
            uint64_t v23 = *(void *)(a1 + 24);
            uint64_t v24 = *(void *)a3;
            break;
          }
          uint64_t v25 = *(void *)(a1 - 24);
          uint64_t v23 = *(void *)(a1 + 24);
          if (v25 != v23)
          {
            uint64_t v24 = *(void *)a3;
            uint64_t v26 = *(char **)(*(void *)a3 + 328);
            double v27 = *(char **)(*(void *)a3 + 336);
            double v28 = v26;
            double v29 = v26;
            if (v26 != v27)
            {
              do
              {
                if (*(void *)v29 == v25) {
                  goto LABEL_16;
                }
                v29 += 8;
              }
              while (v29 != v27);
              double v29 = *(char **)(*(void *)a3 + 336);
LABEL_16:
              while (*(void *)v28 != v23)
              {
                v28 += 8;
                if (v28 == v27)
                {
                  double v28 = *(char **)(*(void *)a3 + 336);
                  break;
                }
              }
            }
            if (v29 - v26 < v28 - v26) {
              break;
            }
          }
          uint64_t v241 = *(void *)(a1 + 16);
          long long v232 = *(_OWORD *)(a1 + 32);
          long long v235 = *(_OWORD *)a1;
          uint64_t v67 = *((void *)a2 - 3);
          if (v23 == v67) {
            goto LABEL_107;
          }
          uint64_t v68 = *(char **)(*(void *)a3 + 328);
          char v69 = *(char **)(*(void *)a3 + 336);
          if (v68 == v69)
          {
            uint64_t v71 = *(char **)(*(void *)a3 + 328);
            char v70 = v71;
          }
          else
          {
            char v70 = *(char **)(*(void *)a3 + 328);
            while (*(void *)v70 != v23)
            {
              v70 += 8;
              if (v70 == v69)
              {
                char v70 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
            uint64_t v71 = *(char **)(*(void *)a3 + 328);
            while (*(void *)v71 != v67)
            {
              v71 += 8;
              if (v71 == v69)
              {
                uint64_t v71 = *(char **)(*(void *)a3 + 336);
                break;
              }
            }
          }
          if (v70 - v68 >= v71 - v68)
          {
LABEL_107:
            unint64_t v13 = a1 + 48;
            if (a1 + 48 < (unint64_t)a2)
            {
              uint64_t v75 = *(void *)a3;
              unint64_t v76 = a1;
              do
              {
                uint64_t v77 = *(void *)(v76 + 72);
                unint64_t v76 = v13;
                if (v23 != v77)
                {
                  long long v78 = *(char **)(v75 + 328);
                  long long v79 = *(char **)(v75 + 336);
                  id v80 = v78;
                  uint64_t v81 = v78;
                  if (v78 != v79)
                  {
                    do
                    {
                      if (*(void *)v81 == v23) {
                        goto LABEL_114;
                      }
                      v81 += 8;
                    }
                    while (v81 != v79);
                    uint64_t v81 = *(char **)(v75 + 336);
LABEL_114:
                    while (*(void *)v80 != v77)
                    {
                      v80 += 8;
                      if (v80 == v79)
                      {
                        id v80 = *(char **)(v75 + 336);
                        break;
                      }
                    }
                  }
                  if (v81 - v78 < v80 - v78) {
                    break;
                  }
                }
                v13 += 48;
              }
              while (v76 + 48 < (unint64_t)a2);
            }
          }
          else
          {
            unint64_t v13 = a1;
            do
            {
              do
              {
                uint64_t v72 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v72);
              if (v68 == v69)
              {
                long long v74 = *(char **)(*(void *)a3 + 328);
                long long v73 = v74;
              }
              else
              {
                long long v73 = *(char **)(*(void *)a3 + 328);
                while (*(void *)v73 != v23)
                {
                  v73 += 8;
                  if (v73 == v69)
                  {
                    long long v73 = *(char **)(*(void *)a3 + 336);
                    break;
                  }
                }
                long long v74 = *(char **)(*(void *)a3 + 328);
                while (*(void *)v74 != v72)
                {
                  v74 += 8;
                  if (v74 == v69)
                  {
                    long long v74 = *(char **)(*(void *)a3 + 336);
                    break;
                  }
                }
              }
            }
            while (v73 - v68 >= v74 - v68);
          }
          unint64_t v82 = a2;
          if (v13 < (unint64_t)a2)
          {
            uint64_t v83 = *(void *)a3;
            unint64_t v82 = a2;
            do
            {
              uint64_t v84 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v84) {
                break;
              }
              unint64_t v85 = *(char **)(v83 + 328);
              uint64_t v86 = *(char **)(v83 + 336);
              unint64_t v87 = v85;
              unint64_t v88 = v85;
              if (v85 != v86)
              {
                do
                {
                  if (*(void *)v88 == v23) {
                    goto LABEL_126;
                  }
                  v88 += 8;
                }
                while (v88 != v86);
                unint64_t v88 = *(char **)(v83 + 336);
LABEL_126:
                while (*(void *)v87 != v84)
                {
                  v87 += 8;
                  if (v87 == v86)
                  {
                    unint64_t v87 = *(char **)(v83 + 336);
                    break;
                  }
                }
              }
            }
            while (v88 - v85 < v87 - v85);
          }
          while (v13 < (unint64_t)v82)
          {
            *(_OWORD *)v225 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v13 + 32);
            long long v217 = *(_OWORD *)v13;
            long long v89 = *v82;
            long long v90 = v82[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v82 + 27);
            *(_OWORD *)unint64_t v13 = v89;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v90;
            *(long long *)((char *)v82 + 27) = *(_OWORD *)&v225[11];
            *unint64_t v82 = v217;
            v82[1] = *(_OWORD *)v225;
            uint64_t v91 = *(void *)a3;
            do
            {
              do
              {
                uint64_t v92 = *(void *)(v13 + 72);
                v13 += 48;
              }
              while (v23 == v92);
              unint64_t v93 = *(char **)(v91 + 328);
              long long v94 = *(char **)(v91 + 336);
              if (v93 == v94)
              {
                long long v96 = *(char **)(v91 + 328);
                long long v95 = v96;
              }
              else
              {
                long long v95 = *(char **)(v91 + 328);
                while (*(void *)v95 != v23)
                {
                  v95 += 8;
                  if (v95 == v94)
                  {
                    long long v95 = *(char **)(v91 + 336);
                    break;
                  }
                }
                long long v96 = *(char **)(v91 + 328);
                while (*(void *)v96 != v92)
                {
                  v96 += 8;
                  if (v96 == v94)
                  {
                    long long v96 = *(char **)(v91 + 336);
                    break;
                  }
                }
              }
            }
            while (v95 - v93 >= v96 - v93);
            do
            {
              uint64_t v97 = *((void *)v82 - 3);
              v82 -= 3;
              if (v23 == v97) {
                break;
              }
              if (v93 == v94)
              {
                BOOL v99 = v93;
                long long v98 = v93;
              }
              else
              {
                long long v98 = v93;
                while (*(void *)v98 != v23)
                {
                  v98 += 8;
                  if (v98 == v94)
                  {
                    long long v98 = v94;
                    break;
                  }
                }
                BOOL v99 = v93;
                while (*(void *)v99 != v97)
                {
                  v99 += 8;
                  if (v99 == v94)
                  {
                    BOOL v99 = v94;
                    break;
                  }
                }
              }
            }
            while (v98 - v93 < v99 - v93);
          }
          double v100 = (long long *)(v13 - 48);
          BOOL v5 = v13 - 48 >= a1;
          BOOL v6 = v13 - 48 == a1;
          if (v13 - 48 != a1)
          {
            long long v101 = *v100;
            long long v102 = *(_OWORD *)(v13 - 32);
            *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
            *(_OWORD *)a1 = v101;
            *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v102;
          }
          a5 = 0;
          *double v100 = v235;
          *(void *)(v13 - 32) = v241;
          *(void *)(v13 - 24) = v23;
          *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v232 + 7);
          *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v232;
        }
        uint64_t v240 = *(void *)(a1 + 16);
        long long v231 = *(_OWORD *)(a1 + 32);
        long long v234 = *(_OWORD *)a1;
        unint64_t v30 = a1;
        do
        {
          unint64_t v31 = v30;
          v30 += 48;
          uint64_t v32 = *(void *)(v31 + 72);
          if (v32 == v23) {
            break;
          }
          uint64_t v33 = *(char **)(v24 + 328);
          id v34 = *(char **)(v24 + 336);
          uint64_t v35 = v33;
          id v36 = v33;
          if (v33 != v34)
          {
            do
            {
              if (*(void *)v36 == v32) {
                goto LABEL_26;
              }
              v36 += 8;
            }
            while (v36 != v34);
            id v36 = *(char **)(v24 + 336);
LABEL_26:
            while (*(void *)v35 != v23)
            {
              v35 += 8;
              if (v35 == v34)
              {
                uint64_t v35 = *(char **)(v24 + 336);
                break;
              }
            }
          }
        }
        while (v36 - v33 < v35 - v33);
        long long v37 = a2;
        if (v31 == a1)
        {
          long long v37 = a2;
          if (v30 < (unint64_t)a2)
          {
            long long v37 = a2;
            do
            {
              uint64_t v43 = *((void *)v37 - 3);
              v37 -= 3;
              if (v43 != v23)
              {
                char v44 = *(char **)(v24 + 328);
                unint64_t v45 = *(char **)(v24 + 336);
                long long v46 = v44;
                uint64_t v47 = v44;
                if (v44 != v45)
                {
                  do
                  {
                    if (*(void *)v47 == v43) {
                      goto LABEL_48;
                    }
                    v47 += 8;
                  }
                  while (v47 != v45);
                  uint64_t v47 = *(char **)(v24 + 336);
LABEL_48:
                  while (*(void *)v46 != v23)
                  {
                    v46 += 8;
                    if (v46 == v45)
                    {
                      long long v46 = *(char **)(v24 + 336);
                      break;
                    }
                  }
                }
                if (v47 - v44 < v46 - v44) {
                  break;
                }
              }
            }
            while (v30 < (unint64_t)v37);
          }
        }
        else
        {
          do
          {
            do
            {
              uint64_t v38 = *((void *)v37 - 3);
              v37 -= 3;
            }
            while (v38 == v23);
            uint64_t v39 = *(char **)(v24 + 328);
            unint64_t v40 = *(char **)(v24 + 336);
            uint64_t v41 = v39;
            uint64_t v42 = v39;
            if (v39 != v40)
            {
              do
              {
                if (*(void *)v42 == v38) {
                  goto LABEL_36;
                }
                v42 += 8;
              }
              while (v42 != v40);
              uint64_t v42 = *(char **)(v24 + 336);
LABEL_36:
              while (*(void *)v41 != v23)
              {
                v41 += 8;
                if (v41 == v40)
                {
                  uint64_t v41 = *(char **)(v24 + 336);
                  break;
                }
              }
            }
          }
          while (v42 - v39 >= v41 - v39);
        }
        unint64_t v13 = v30;
        if (v30 < (unint64_t)v37)
        {
          double v48 = v37;
          do
          {
            *(_OWORD *)v224 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)&v224[16] = *(_OWORD *)(v13 + 32);
            long long v49 = *(_OWORD *)v13;
            long long v51 = *v48;
            long long v50 = v48[1];
            *(_OWORD *)(v13 + 27) = *(long long *)((char *)v48 + 27);
            *(_OWORD *)unint64_t v13 = v51;
            *(_OWORD *)(v13 + 1objc_destroyWeak((id *)this + 6) = v50;
            *(long long *)((char *)v48 + 27) = *(_OWORD *)&v224[11];
            long long *v48 = v49;
            v48[1] = *(_OWORD *)v224;
            uint64_t v52 = *(void *)a3;
            do
            {
              uint64_t v53 = *(void *)(v13 + 72);
              v13 += 48;
              if (v53 == v23) {
                break;
              }
              double v54 = *(char **)(v52 + 328);
              double v55 = *(char **)(v52 + 336);
              int v56 = v54;
              int v57 = v54;
              if (v54 != v55)
              {
                do
                {
                  if (*(void *)v57 == v53) {
                    goto LABEL_61;
                  }
                  v57 += 8;
                }
                while (v57 != v55);
                int v57 = *(char **)(v52 + 336);
LABEL_61:
                while (*(void *)v56 != v23)
                {
                  v56 += 8;
                  if (v56 == v55)
                  {
                    int v56 = *(char **)(v52 + 336);
                    break;
                  }
                }
              }
            }
            while (v57 - v54 < v56 - v54);
            do
            {
              do
              {
                uint64_t v58 = *((void *)v48 - 3);
                v48 -= 3;
              }
              while (v58 == v23);
              long long v59 = *(char **)(v52 + 328);
              unint64_t v60 = *(char **)(v52 + 336);
              long long v61 = v59;
              long long v62 = v59;
              if (v59 != v60)
              {
                do
                {
                  if (*(void *)v62 == v58) {
                    goto LABEL_70;
                  }
                  v62 += 8;
                }
                while (v62 != v60);
                long long v62 = *(char **)(v52 + 336);
LABEL_70:
                while (*(void *)v61 != v23)
                {
                  v61 += 8;
                  if (v61 == v60)
                  {
                    long long v61 = *(char **)(v52 + 336);
                    break;
                  }
                }
              }
            }
            while (v62 - v59 >= v61 - v59);
          }
          while (v13 < (unint64_t)v48);
        }
        id v63 = (long long *)(v13 - 48);
        if (v13 - 48 != a1)
        {
          long long v64 = *v63;
          long long v65 = *(_OWORD *)(v13 - 32);
          *(_OWORD *)(a1 + 27) = *(_OWORD *)(v13 - 21);
          *(_OWORD *)a1 = v64;
          *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v65;
        }
        *id v63 = v234;
        *(void *)(v13 - 32) = v240;
        *(void *)(v13 - 24) = v23;
        *(_DWORD *)(v13 - 9) = *(_DWORD *)((char *)&v231 + 7);
        *(void *)(v13 - 1objc_destroyWeak((id *)this + 6) = v231;
        if (v30 >= (unint64_t)v37) {
          break;
        }
LABEL_80:
        std::__introsort<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*,false>(a1, v13 - 48, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v66 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, v13 - 48, a3);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(v13, (uint64_t)a2, a3))
      {
        break;
      }
      if (!v66) {
        goto LABEL_80;
      }
    }
    a2 = (long long *)(v13 - 48);
    if (!v66) {
      continue;
    }
    break;
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a1 + 3);
  if (v4 == v5) {
    goto LABEL_23;
  }
  BOOL v6 = *(char **)(*(void *)a4 + 328);
  int v7 = *(char **)(*(void *)a4 + 336);
  if (v6 == v7)
  {
    id v9 = *(char **)(*(void *)a4 + 328);
    uint64_t v8 = v9;
  }
  else
  {
    uint64_t v8 = *(char **)(*(void *)a4 + 328);
    while (*(void *)v8 != v4)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(*(void *)a4 + 336);
        break;
      }
    }
    id v9 = *(char **)(*(void *)a4 + 328);
    while (*(void *)v9 != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        id v9 = *(char **)(*(void *)a4 + 336);
        break;
      }
    }
  }
  if (v8 - v6 >= v9 - v6)
  {
LABEL_23:
    uint64_t v13 = *((void *)a3 + 3);
    if (v13 != v4)
    {
      uint64_t v14 = *(char **)(*(void *)a4 + 328);
      unint64_t v15 = *(char **)(*(void *)a4 + 336);
      unint64_t v16 = v14;
      double v17 = v14;
      if (v14 != v15)
      {
        do
        {
          if (*(void *)v17 == v13) {
            goto LABEL_28;
          }
          v17 += 8;
        }
        while (v17 != v15);
        double v17 = *(char **)(*(void *)a4 + 336);
LABEL_28:
        while (*(void *)v16 != v4)
        {
          v16 += 8;
          if (v16 == v15)
          {
            unint64_t v16 = *(char **)(*(void *)a4 + 336);
            break;
          }
        }
      }
      if (v17 - v14 < v16 - v14)
      {
        long long v18 = *a2;
        *(_OWORD *)long long v46 = a2[1];
        *(_OWORD *)&v46[16] = a2[2];
        long long v19 = *(long long *)((char *)a3 + 27);
        long long v20 = a3[1];
        *a2 = *a3;
        a2[1] = v20;
        *(long long *)((char *)a2 + 27) = v19;
        *a3 = v18;
        a3[1] = *(_OWORD *)v46;
        __n128 result = *(__n128 *)&v46[11];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v46[11];
        uint64_t v22 = *((void *)a2 + 3);
        uint64_t v23 = *((void *)a1 + 3);
        if (v22 != v23)
        {
          uint64_t v24 = *(char **)(*(void *)a4 + 328);
          uint64_t v25 = *(char **)(*(void *)a4 + 336);
          uint64_t v26 = v24;
          double v27 = v24;
          if (v24 != v25)
          {
            do
            {
              if (*(void *)v27 == v22) {
                goto LABEL_37;
              }
              v27 += 8;
            }
            while (v27 != v25);
            double v27 = *(char **)(*(void *)a4 + 336);
LABEL_37:
            while (*(void *)v26 != v23)
            {
              v26 += 8;
              if (v26 == v25)
              {
                uint64_t v26 = *(char **)(*(void *)a4 + 336);
                break;
              }
            }
          }
          if (v27 - v24 < v26 - v24)
          {
            long long v28 = *a1;
            *(_OWORD *)uint64_t v47 = a1[1];
            *(_OWORD *)&v47[16] = a1[2];
            long long v29 = *(long long *)((char *)a2 + 27);
            long long v30 = a2[1];
            *a1 = *a2;
            a1[1] = v30;
            *(long long *)((char *)a1 + 27) = v29;
            *a2 = v28;
            a2[1] = *(_OWORD *)v47;
            __n128 result = *(__n128 *)&v47[11];
            *(long long *)((char *)a2 + 27) = *(_OWORD *)&v47[11];
          }
        }
      }
    }
  }
  else
  {
    uint64_t v10 = *((void *)a3 + 3);
    if (v10 != v4)
    {
      if (v6 == v7)
      {
        unint64_t v12 = *(char **)(*(void *)a4 + 328);
        double v11 = v12;
      }
      else
      {
        double v11 = *(char **)(*(void *)a4 + 328);
        while (*(void *)v11 != v10)
        {
          v11 += 8;
          if (v11 == v7)
          {
            double v11 = *(char **)(*(void *)a4 + 336);
            break;
          }
        }
        unint64_t v12 = *(char **)(*(void *)a4 + 328);
        while (*(void *)v12 != v4)
        {
          v12 += 8;
          if (v12 == v7)
          {
            unint64_t v12 = *(char **)(*(void *)a4 + 336);
            break;
          }
        }
      }
      if (v11 - v6 < v12 - v6)
      {
        long long v31 = a1[1];
        long long v32 = *a1;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a1[2];
        long long v33 = *(long long *)((char *)a3 + 27);
        long long v34 = a3[1];
        *a1 = *a3;
        a1[1] = v34;
        *(long long *)((char *)a1 + 27) = v33;
LABEL_55:
        *a3 = v32;
        a3[1] = v31;
        __n128 result = *(__n128 *)&v49[3];
        *(long long *)((char *)a3 + 27) = *(_OWORD *)&v49[3];
        return result;
      }
    }
    long long v35 = *a1;
    *(_OWORD *)double v48 = a1[1];
    *(_OWORD *)&v48[16] = a1[2];
    long long v36 = *(long long *)((char *)a2 + 27);
    long long v37 = a2[1];
    *a1 = *a2;
    a1[1] = v37;
    *(long long *)((char *)a1 + 27) = v36;
    *a2 = v35;
    a2[1] = *(_OWORD *)v48;
    __n128 result = *(__n128 *)&v48[11];
    *(long long *)((char *)a2 + 27) = *(_OWORD *)&v48[11];
    uint64_t v38 = *((void *)a3 + 3);
    uint64_t v39 = *((void *)a2 + 3);
    if (v38 != v39)
    {
      unint64_t v40 = *(char **)(*(void *)a4 + 328);
      uint64_t v41 = *(char **)(*(void *)a4 + 336);
      uint64_t v42 = v40;
      uint64_t v43 = v40;
      if (v40 != v41)
      {
        do
        {
          if (*(void *)v43 == v38) {
            goto LABEL_50;
          }
          v43 += 8;
        }
        while (v43 != v41);
        uint64_t v43 = *(char **)(*(void *)a4 + 336);
LABEL_50:
        while (*(void *)v42 != v39)
        {
          v42 += 8;
          if (v42 == v41)
          {
            uint64_t v42 = *(char **)(*(void *)a4 + 336);
            break;
          }
        }
      }
      if (v43 - v40 < v42 - v40)
      {
        long long v31 = a2[1];
        long long v32 = *a2;
        *(void *)long long v49 = *((void *)&v31 + 1);
        *(_OWORD *)&v49[8] = a2[2];
        long long v44 = *(long long *)((char *)a3 + 27);
        long long v45 = a3[1];
        *a2 = *a3;
        a2[1] = v45;
        *(long long *)((char *)a2 + 27) = v44;
        goto LABEL_55;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 - 24);
      uint64_t v9 = *(void *)(a1 + 24);
      if (v8 == v9) {
        return result;
      }
      uint64_t v10 = *(char **)(*(void *)a3 + 328);
      double v11 = *(char **)(*(void *)a3 + 336);
      unint64_t v12 = v10;
      uint64_t v13 = v10;
      if (v10 == v11) {
        goto LABEL_10;
      }
      do
      {
        if (*(void *)v13 == v8) {
          goto LABEL_7;
        }
        v13 += 8;
      }
      while (v13 != v11);
      uint64_t v13 = *(char **)(*(void *)a3 + 336);
      do
      {
LABEL_7:
        if (*(void *)v12 == v9) {
          goto LABEL_10;
        }
        v12 += 8;
      }
      while (v12 != v11);
      unint64_t v12 = *(char **)(*(void *)a3 + 336);
LABEL_10:
      if (v13 - v10 < v12 - v10)
      {
        uint64_t v14 = (long long *)(a2 - 48);
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)long long v35 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 32);
        long long v16 = *(_OWORD *)(a2 - 21);
        long long v17 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v17;
        *(_OWORD *)(a1 + 27) = v16;
        long long *v14 = v15;
        v14[1] = *(_OWORD *)v35;
        *(long long *)((char *)v14 + 27) = *(_OWORD *)&v35[11];
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v19 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      int v20 = 0;
      break;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(v19 + 24);
    uint64_t v22 = *(void *)(v18 + 24);
    if (v21 != v22)
    {
      uint64_t v23 = *(char **)(*(void *)a3 + 328);
      uint64_t v24 = *(char **)(*(void *)a3 + 336);
      uint64_t v25 = v23;
      uint64_t v26 = v23;
      if (v23 != v24)
      {
        do
        {
          if (*(void *)v26 == v21) {
            goto LABEL_19;
          }
          v26 += 8;
        }
        while (v26 != v24);
        uint64_t v26 = *(char **)(*(void *)a3 + 336);
LABEL_19:
        while (*(void *)v25 != v22)
        {
          v25 += 8;
          if (v25 == v24)
          {
            uint64_t v25 = *(char **)(*(void *)a3 + 336);
            break;
          }
        }
      }
      if (v26 - v23 < v25 - v23)
      {
        long long v34 = *(_OWORD *)v19;
        uint64_t v36 = *(void *)(v19 + 16);
        long long v37 = *(_OWORD *)(v19 + 32);
        uint64_t v27 = v19;
        while (1)
        {
          long long v28 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v18;
          *(_OWORD *)(v27 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(v27 + 27) = *(_OWORD *)(v18 + 27);
          if (v18 == a1) {
            break;
          }
          uint64_t v27 = v18;
          uint64_t v29 = *(void *)(v18 - 24);
          if (v21 != v29)
          {
            long long v30 = *(char **)(*(void *)a3 + 328);
            long long v31 = *(char **)(*(void *)a3 + 336);
            long long v32 = v30;
            long long v33 = v30;
            if (v30 != v31)
            {
              do
              {
                if (*(void *)v33 == v21) {
                  goto LABEL_30;
                }
                v33 += 8;
              }
              while (v33 != v31);
              long long v33 = *(char **)(*(void *)a3 + 336);
LABEL_30:
              while (*(void *)v32 != v29)
              {
                v32 += 8;
                if (v32 == v31)
                {
                  long long v32 = *(char **)(*(void *)a3 + 336);
                  break;
                }
              }
            }
            v18 -= 48;
            if (v33 - v30 < v32 - v30) {
              continue;
            }
          }
          goto LABEL_36;
        }
        uint64_t v27 = a1;
LABEL_36:
        *(_OWORD *)uint64_t v27 = v34;
        *(void *)(v27 + 1objc_destroyWeak((id *)this + 6) = v36;
        *(void *)(v27 + 24) = v21;
        *(void *)(v27 + 32) = v37;
        *(_DWORD *)(v27 + 39) = *(_DWORD *)((char *)&v37 + 7);
        if (++v20 == 8) {
          return v19 + 48 == a2;
        }
      }
    }
    uint64_t v18 = v19;
    v19 += 48;
    if (v19 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>((long long *)a1, (long long *)a2, (long long *)a3, a5).n128_u64[0];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = *(void *)(a3 + 24);
  if (v11 != v12)
  {
    uint64_t v13 = *(char **)(*(void *)a5 + 328);
    uint64_t v14 = *(char **)(*(void *)a5 + 336);
    long long v15 = v13;
    long long v16 = v13;
    if (v13 != v14)
    {
      do
      {
        if (*(void *)v16 == v11) {
          goto LABEL_6;
        }
        v16 += 8;
      }
      while (v16 != v14);
      long long v16 = *(char **)(*(void *)a5 + 336);
LABEL_6:
      while (*(void *)v15 != v12)
      {
        v15 += 8;
        if (v15 == v14)
        {
          long long v15 = *(char **)(*(void *)a5 + 336);
          break;
        }
      }
    }
    if (v16 - v13 < v15 - v13)
    {
      long long v17 = *(_OWORD *)a3;
      *(_OWORD *)uint64_t v38 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&v38[16] = *(_OWORD *)(a3 + 32);
      long long v18 = *(_OWORD *)(a4 + 27);
      long long v19 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v19;
      *(_OWORD *)(a3 + 27) = v18;
      *(_OWORD *)a4 = v17;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v38;
      __n128 result = *(__n128 *)&v38[11];
      *(_OWORD *)(a4 + 27) = *(_OWORD *)&v38[11];
      uint64_t v20 = *(void *)(a3 + 24);
      uint64_t v21 = *(void *)(a2 + 24);
      if (v20 != v21)
      {
        uint64_t v22 = *(char **)(*(void *)a5 + 328);
        uint64_t v23 = *(char **)(*(void *)a5 + 336);
        uint64_t v24 = v22;
        uint64_t v25 = v22;
        if (v22 != v23)
        {
          do
          {
            if (*(void *)v25 == v20) {
              goto LABEL_15;
            }
            v25 += 8;
          }
          while (v25 != v23);
          uint64_t v25 = *(char **)(*(void *)a5 + 336);
LABEL_15:
          while (*(void *)v24 != v21)
          {
            v24 += 8;
            if (v24 == v23)
            {
              uint64_t v24 = *(char **)(*(void *)a5 + 336);
              break;
            }
          }
        }
        if (v25 - v22 < v24 - v22)
        {
          long long v26 = *(_OWORD *)a2;
          *(_OWORD *)uint64_t v39 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&v39[16] = *(_OWORD *)(a2 + 32);
          long long v27 = *(_OWORD *)(a3 + 27);
          long long v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v28;
          *(_OWORD *)(a2 + 27) = v27;
          *(_OWORD *)a3 = v26;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v39;
          __n128 result = *(__n128 *)&v39[11];
          *(_OWORD *)(a3 + 27) = *(_OWORD *)&v39[11];
          uint64_t v29 = *(void *)(a2 + 24);
          uint64_t v30 = *(void *)(a1 + 24);
          if (v29 != v30)
          {
            long long v31 = *(char **)(*(void *)a5 + 328);
            long long v32 = *(char **)(*(void *)a5 + 336);
            long long v33 = v31;
            long long v34 = v31;
            if (v31 != v32)
            {
              do
              {
                if (*(void *)v34 == v29) {
                  goto LABEL_24;
                }
                v34 += 8;
              }
              while (v34 != v32);
              long long v34 = *(char **)(*(void *)a5 + 336);
LABEL_24:
              while (*(void *)v33 != v30)
              {
                v33 += 8;
                if (v33 == v32)
                {
                  long long v33 = *(char **)(*(void *)a5 + 336);
                  break;
                }
              }
            }
            if (v34 - v31 < v33 - v31)
            {
              long long v35 = *(_OWORD *)a1;
              *(_OWORD *)unint64_t v40 = *(_OWORD *)(a1 + 16);
              *(_OWORD *)&v40[16] = *(_OWORD *)(a1 + 32);
              long long v36 = *(_OWORD *)(a2 + 27);
              long long v37 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v37;
              *(_OWORD *)(a1 + 27) = v36;
              *(_OWORD *)a2 = v35;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v40;
              __n128 result = *(__n128 *)&v40[11];
              *(_OWORD *)(a2 + 27) = *(_OWORD *)&v40[11];
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_mergeTowardTime(double)::{lambda(HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder const&)#1} &,HDStatisticsBucket<HDStatisticsRelative<HDStatisticsCombined<HDStatisticsCumulative,HDStatisticsTimeInterval>>>::_SampleRemainder*>(a1, a2, a3, a4, a6).n128_u64[0];
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a4 + 24);
  if (v13 != v14)
  {
    long long v15 = *(char **)(*(void *)a6 + 328);
    long long v16 = *(char **)(*(void *)a6 + 336);
    long long v17 = v15;
    long long v18 = v15;
    if (v15 != v16)
    {
      do
      {
        if (*(void *)v18 == v13) {
          goto LABEL_6;
        }
        v18 += 8;
      }
      while (v18 != v16);
      long long v18 = *(char **)(*(void *)a6 + 336);
LABEL_6:
      while (*(void *)v17 != v14)
      {
        v17 += 8;
        if (v17 == v16)
        {
          long long v17 = *(char **)(*(void *)a6 + 336);
          break;
        }
      }
    }
    if (v18 - v15 < v17 - v15)
    {
      long long v19 = *(_OWORD *)a4;
      *(_OWORD *)long long v49 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)&v49[16] = *(_OWORD *)(a4 + 32);
      long long v20 = *(_OWORD *)(a5 + 27);
      long long v21 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = v21;
      *(_OWORD *)(a4 + 27) = v20;
      *(_OWORD *)a5 = v19;
      *(_OWORD *)(a5 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v49;
      __n128 result = *(__n128 *)&v49[11];
      *(_OWORD *)(a5 + 27) = *(_OWORD *)&v49[11];
      uint64_t v22 = *(void *)(a4 + 24);
      uint64_t v23 = *(void *)(a3 + 24);
      if (v22 != v23)
      {
        uint64_t v24 = *(char **)(*(void *)a6 + 328);
        uint64_t v25 = *(char **)(*(void *)a6 + 336);
        long long v26 = v24;
        long long v27 = v24;
        if (v24 != v25)
        {
          do
          {
            if (*(void *)v27 == v22) {
              goto LABEL_15;
            }
            v27 += 8;
          }
          while (v27 != v25);
          long long v27 = *(char **)(*(void *)a6 + 336);
LABEL_15:
          while (*(void *)v26 != v23)
          {
            v26 += 8;
            if (v26 == v25)
            {
              long long v26 = *(char **)(*(void *)a6 + 336);
              break;
            }
          }
        }
        if (v27 - v24 < v26 - v24)
        {
          long long v28 = *(_OWORD *)a3;
          *(_OWORD *)long long v50 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&v50[16] = *(_OWORD *)(a3 + 32);
          long long v29 = *(_OWORD *)(a4 + 27);
          long long v30 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = v30;
          *(_OWORD *)(a3 + 27) = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v50;
          __n128 result = *(__n128 *)&v50[11];
          *(_OWORD *)(a4 + 27) = *(_OWORD *)&v50[11];
          uint64_t v31 = *(void *)(a3 + 24);
          uint64_t v32 = *(void *)(a2 + 24);
          if (v31 != v32)
          {
            long long v33 = *(char **)(*(void *)a6 + 328);
            long long v34 = *(char **)(*(void *)a6 + 336);
            long long v35 = v33;
            long long v36 = v33;
            if (v33 != v34)
            {
              do
              {
                if (*(void *)v36 == v31) {
                  goto LABEL_24;
                }
                v36 += 8;
              }
              while (v36 != v34);
              long long v36 = *(char **)(*(void *)a6 + 336);
LABEL_24:
              while (*(void *)v35 != v32)
              {
                v35 += 8;
                if (v35 == v34)
                {
                  long long v35 = *(char **)(*(void *)a6 + 336);
                  break;
                }
              }
            }
            if (v36 - v33 < v35 - v33)
            {
              long long v37 = *(_OWORD *)a2;
              *(_OWORD *)long long v51 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&v51[16] = *(_OWORD *)(a2 + 32);
              long long v38 = *(_OWORD *)(a3 + 27);
              long long v39 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = v39;
              *(_OWORD *)(a2 + 27) = v38;
              *(_OWORD *)a3 = v37;
              *(_OWORD *)(a3 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v51;
              __n128 result = *(__n128 *)&v51[11];
              *(_OWORD *)(a3 + 27) = *(_OWORD *)&v51[11];
              uint64_t v40 = *(void *)(a2 + 24);
              uint64_t v41 = *(void *)(a1 + 24);
              if (v40 != v41)
              {
                uint64_t v42 = *(char **)(*(void *)a6 + 328);
                uint64_t v43 = *(char **)(*(void *)a6 + 336);
                long long v44 = v42;
                long long v45 = v42;
                if (v42 != v43)
                {
                  do
                  {
                    if (*(void *)v45 == v40) {
                      goto LABEL_33;
                    }
                    v45 += 8;
                  }
                  while (v45 != v43);
                  long long v45 = *(char **)(*(void *)a6 + 336);
LABEL_33:
                  while (*(void *)v44 != v41)
                  {
                    v44 += 8;
                    if (v44 == v43)
                    {
                      long long v44 = *(char **)(*(void *)a6 + 336);
                      break;
                    }
                  }
                }
                if (v45 - v42 < v44 - v42)
                {
                  long long v46 = *(_OWORD *)a1;
                  *(_OWORD *)uint64_t v52 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)&v52[16] = *(_OWORD *)(a1 + 32);
                  long long v47 = *(_OWORD *)(a2 + 27);
                  long long v48 = *(_OWORD *)(a2 + 16);
                  *(_OWORD *)a1 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 1objc_destroyWeak((id *)this + 6) = v48;
                  *(_OWORD *)(a1 + 27) = v47;
                  *(_OWORD *)a2 = v46;
                  *(_OWORD *)(a2 + 1objc_destroyWeak((id *)this + 6) = *(_OWORD *)v52;
                  __n128 result = *(__n128 *)&v52[11];
                  *(_OWORD *)(a2 + 27) = *(_OWORD *)&v52[11];
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}