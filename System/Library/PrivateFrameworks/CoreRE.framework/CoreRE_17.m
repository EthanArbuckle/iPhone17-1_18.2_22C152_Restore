uint64_t re::ecs2::PhysicsConstraint::PhysicsConstraint(uint64_t a1, int a2, uint64_t *a3, id *a4, _OWORD *a5, id *a6, _OWORD *a7, char a8)
{
  unint64_t *v11;
  re::ecs2::EntityHandle *v12;
  _anonymous_namespace_ *v13;
  _anonymous_namespace_ *v14;
  long long v15;
  long long v16;

  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 16) = "";
  *(void *)(a1 + 8) = 0;
  v11 = (unint64_t *)(a1 + 8);
  *(unsigned char *)(a1 + 24) = 0;
  v12 = (re::ecs2::EntityHandle *)(a1 + 32);
  objc_initWeak((id *)(a1 + 32), 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset(v12);
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0x3F80000000000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = "";
  objc_initWeak((id *)(a1 + 112), 0);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 112));
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 240) = xmmword_2343A9E50;
  *(_OWORD *)(a1 + 256) = xmmword_2343A9E60;
  *(_OWORD *)(a1 + 272) = xmmword_2343A9E70;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = "";
  *(_DWORD *)a1 = a2;
  re::StringID::operator=(v11, a3);
  re::ecs2::EntityHandle::operator=(v12, a4);
  v15 = a5[1];
  *(_OWORD *)(a1 + 64) = *a5;
  *(_OWORD *)(a1 + 80) = v15;
  re::ecs2::EntityHandle::operator=((re::ecs2::EntityHandle *)(a1 + 112), a6);
  v16 = a7[1];
  *(_OWORD *)(a1 + 144) = *a7;
  *(_OWORD *)(a1 + 160) = v16;
  *(unsigned char *)(a1 + 24) = a8;
  return a1;
}

re::Constraint *re::ecs2::PhysicsConstraint::makeJoint(re::ecs2::PhysicsConstraint *this, re::ecs2::Scene *a2)
{
  v4 = re::ecs2::EntityHandle::resolve((id *)this + 4, (uint64_t)a2);
  uint64_t v5 = *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 336);
  v6 = re::ecs2::EntityHandle::resolve((id *)this + 14, (uint64_t)a2);
  uint64_t v7 = *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 336);
  v8 = 0;
  if (v5) {
    BOOL v9 = v7 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    switch(*(_DWORD *)this)
    {
      case 1:
        v8 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                                            + 56))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        break;
      case 2:
        float v10 = *((float *)this + 69);
        float v11 = *((float *)this + 71);
        v12 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                                    + 72))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        v8 = (re::Constraint *)v12;
        float v13 = 3.1416;
        if (v10 <= 3.1416) {
          float v14 = v10;
        }
        else {
          float v14 = 3.1416;
        }
        if (v14 < -1.0) {
          float v14 = -1.0;
        }
        if (v11 <= 3.1416) {
          float v13 = v11;
        }
        if (v13 < -1.0) {
          float v13 = -1.0;
        }
        v12[14] = v14;
        v12[15] = v13;
        (*(void (**)(float *))(*(void *)v12 + 56))(v12);
        break;
      case 3:
        v8 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                                            + 48))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        LODWORD(v15) = *((_DWORD *)this + 70);
        re::HingeJoint::setAngularLimit((uint64_t)v8, v15, *((float *)this + 71));
        break;
      case 4:
        v8 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                                            + 64))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        *((void *)v8 + 7) = *((void *)this + 30);
        (*(void (**)(re::Constraint *))(*(void *)v8 + 56))(v8);
        break;
      case 6:
        v8 = (re::Constraint *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)re::PhysicsFactory::m_defaultFactory
                                                                                            + 88))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v5, (char *)this + 64);
        uint64_t v16 = *(void *)v8;
        uint64_t v17 = *((void *)this + 31);
        uint64_t v18 = *((void *)this + 32);
        uint64_t v19 = *((void *)this + 33);
        uint64_t v20 = *((void *)this + 34);
        uint64_t v21 = *((void *)this + 35);
        *((void *)v8 + 7) = *((void *)this + 30);
        (*(void (**)(void))(v16 + 56))();
        *((void *)v8 + 8) = v17;
        (*(void (**)(re::Constraint *))(*(void *)v8 + 56))(v8);
        *((void *)v8 + 9) = v18;
        (*(void (**)(re::Constraint *))(*(void *)v8 + 56))(v8);
        *((void *)v8 + 10) = v19;
        (*(void (**)(re::Constraint *))(*(void *)v8 + 56))(v8);
        *((void *)v8 + 11) = v20;
        (*(void (**)(re::Constraint *))(*(void *)v8 + 56))(v8);
        *((void *)v8 + 12) = v21;
        (*(void (**)(re::Constraint *))(*(void *)v8 + 56))(v8);
        break;
      default:
        break;
    }
    re::StringID::StringID((re::StringID *)&v30, (const StringID *)((char *)this + 8));
    uint64_t v22 = v30;
    v23 = v31;
    uint64_t v30 = 0;
    v31 = "";
    uint64_t v24 = *((void *)v8 + 3);
    uint64_t v25 = *((void *)v8 + 4);
    *((void *)v8 + 3) = v22;
    *((void *)v8 + 4) = v23;
    v32[0] = v22 & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
    v32[1] = v25;
    re::StringID::destroyString((re::StringID *)v32);
    re::StringID::destroyString((re::StringID *)&v30);
    uint64_t v26 = (*(uint64_t (**)(void))(**((void **)a2 + 7) + 32))(*((void *)a2 + 7));
    v27 = (re::ecs2::PhysicsSimulationService *)re::ServiceLocator::service<re::ecs2::PhysicsSimulationService>(v26);
    v28 = re::ecs2::PhysicsSimulationService::physicsSimulationForEntity(v27, (const re::ecs2::Entity *)v4);
    if (v28) {
      re::PhysicsJointCollection::add((re::ecs2::PhysicsSimulationData *)((char *)v28 + 136), v8);
    }
  }
  return v8;
}

void *re::IntrospectionInfo<float [2]>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [2]>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    int v3 = re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v14);
    if (v3) {
      return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
    }
    uint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized)
    {
LABEL_14:
      float v11 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v11);
      return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<float [2]>::get(BOOL)::isInitialized = 1;
  uint64_t v7 = (const re::IntrospectionBase *)re::introspect_float((re *)1, a2);
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [2]>::get(BOOL)::info, v7, 2);
  re::IntrospectionRegistry::add(v8, v9);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<float [2]>::get(BOOL)::info, (const re::IntrospectionBase *)&v14);
  if (BYTE8(v14)) {
    float v10 = v15;
  }
  else {
    float v10 = (char *)&v14 + 9;
  }
  if (void)v14 && (BYTE8(v14)) {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  long long v14 = *((_OWORD *)v7 + 2);
  xmmword_268774F10 = v13;
  re::StringID::destroyString((re::StringID *)v16);
  if ((a1 & 1) == 0) {
    goto LABEL_14;
  }
  return &re::IntrospectionInfo<float [2]>::get(BOOL)::info;
}

void *re::ecs2::allocInfo_PhysicsConstraint(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91458, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91458))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91460, "PhysicsConstraint");
    __cxa_guard_release(&qword_26AF91458);
  }
  return &unk_26AF91460;
}

void re::ecs2::initInfo_PhysicsConstraint(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v70[0] = 0x12E83513C6A856C8;
  v70[1] = "PhysicsConstraint";
  re::StringID::destroyString((re::StringID *)v70);
  *((_OWORD *)this + 2) = v71;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_339, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_339);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_PhysicsJointType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "m_type";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF914D8 = v8;
      BOOL v9 = re::introspectionAllocator((re *)v8);
      float v11 = re::IntrospectionInfo<re::StringID>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_name";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF914E0 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      double v15 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_entityHandleA";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x2000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF914E8 = v16;
      uint64_t v17 = re::introspectionAllocator((re *)v16);
      uint64_t v18 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_localAnchorPoseA";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x4000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF914F0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::IntrospectionInfo<re::StringID>::get(1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "m_pinNameA";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x6000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF914F8 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "m_entityHandleB";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x7000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF91500 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      uint64_t v29 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "m_localAnchorPoseB";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x9000000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF91508 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::StringID>::get(1, v32);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "m_pinNameB";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x12000000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF91510 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::introspect_BOOL((re *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "m_collisionEnabled";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x1800000009;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF91518 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::IntrospectionInfo<float [2]>::get(1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "m_xLinearLimits";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xF00000000ALL;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF91520 = v42;
      v43 = re::introspectionAllocator((re *)v42);
      v45 = re::IntrospectionInfo<float [2]>::get(1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "m_yLinearLimits";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xF80000000BLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF91528 = v46;
      v47 = re::introspectionAllocator((re *)v46);
      v49 = re::IntrospectionInfo<float [2]>::get(1, v48);
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + 8) = "m_zLinearLimits";
      *(void *)(v50 + 16) = v49;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + 32) = 0x1000000000CLL;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF91530 = v50;
      v51 = re::introspectionAllocator((re *)v50);
      v53 = re::IntrospectionInfo<float [2]>::get(1, v52);
      uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 72, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *(void *)(v54 + 8) = "m_xAngularLimits";
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 24) = 0;
      *(void *)(v54 + 32) = 0x1080000000DLL;
      *(_DWORD *)(v54 + 40) = 0;
      *(void *)(v54 + 48) = 0;
      *(void *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_26AF91538 = v54;
      v55 = re::introspectionAllocator((re *)v54);
      v57 = re::IntrospectionInfo<float [2]>::get(1, v56);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + 8) = "m_yAngularLimits";
      *(void *)(v58 + 16) = v57;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + 32) = 0x1100000000ELL;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 48) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26AF91540 = v58;
      v59 = re::introspectionAllocator((re *)v58);
      v61 = re::IntrospectionInfo<float [2]>::get(1, v60);
      uint64_t v62 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
      *(_DWORD *)uint64_t v62 = 1;
      *(void *)(v62 + 8) = "m_zAngularLimits";
      *(void *)(v62 + 16) = v61;
      *(void *)(v62 + 24) = 0;
      *(void *)(v62 + 32) = 0x1180000000FLL;
      *(_DWORD *)(v62 + 40) = 0;
      *(void *)(v62 + 48) = 0;
      *(void *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_26AF91548 = v62;
      v63 = re::introspectionAllocator((re *)v62);
      uint64_t v64 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v65 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 72, 8);
      *(_DWORD *)uint64_t v65 = 1;
      *(void *)(v65 + 8) = "m_offsetPoseA";
      *(void *)(v65 + 16) = v64;
      *(void *)(v65 + 24) = 0;
      *(void *)(v65 + 32) = 0xB000000010;
      *(_DWORD *)(v65 + 40) = 0;
      *(void *)(v65 + 48) = 0;
      *(void *)(v65 + 56) = 0;
      *(_DWORD *)(v65 + 64) = 0;
      qword_26AF91550 = v65;
      v66 = re::introspectionAllocator((re *)v65);
      uint64_t v67 = re::introspect_PoseF((re::IntrospectionBase **)1);
      uint64_t v68 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v66 + 32))(v66, 72, 8);
      *(_DWORD *)uint64_t v68 = 1;
      *(void *)(v68 + 8) = "m_offsetPoseB";
      *(void *)(v68 + 16) = v67;
      *(void *)(v68 + 24) = 0;
      *(void *)(v68 + 32) = 0xD000000011;
      *(_DWORD *)(v68 + 40) = 0;
      *(void *)(v68 + 48) = 0;
      *(void *)(v68 + 56) = 0;
      *(_DWORD *)(v68 + 64) = 0;
      qword_26AF91558 = v68;
      __cxa_guard_release(&_MergedGlobals_339);
    }
  }
  *((void *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 17;
  *((void *)this + 8) = &qword_26AF914D8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsConstraint>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsConstraint>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsConstraint>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsConstraint>;
  re::IntrospectionRegistry::add(this, v3);
  long long v69 = v71;
}

re::ecs2::PhysicsConstraint *re::internal::defaultConstruct<re::ecs2::PhysicsConstraint>(int a1, int a2, re::ecs2::PhysicsConstraint *this)
{
  return re::ecs2::PhysicsConstraint::PhysicsConstraint(this);
}

void re::internal::defaultDestruct<re::ecs2::PhysicsConstraint>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 288));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 112));
  objc_destroyWeak((id *)(a3 + 112));
  *(void *)(a3 + 112) = 0;
  re::StringID::destroyString((re::StringID *)(a3 + 96));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 32));
  objc_destroyWeak((id *)(a3 + 32));
  *(void *)(a3 + 32) = 0;
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

void re::internal::defaultDestructV2<re::ecs2::PhysicsConstraint>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 288));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 112));
  objc_destroyWeak((id *)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  re::StringID::destroyString((re::StringID *)(a1 + 96));
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 32));
  objc_destroyWeak((id *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

uint64_t re::ecs2::introspect_PhysicsConstraint(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsConstraint", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsConstraint, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsConstraint, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsConstraint>, this);
}

void *re::ecs2::allocInfo_VisualProxyScopeService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_340))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91568, "VisualProxyScopeService");
    __cxa_guard_release(&_MergedGlobals_340);
  }
  return &unk_26AF91568;
}

void re::ecs2::initInfo_VisualProxyScopeService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x532BCA60CD03F79ELL;
  v5[1] = "VisualProxyScopeService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VisualProxyScopeService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_VisualProxyScopeService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyScopeService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyScopeService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyScopeService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyScopeService>, this);
}

void *re::ecs2::allocInfo_PhysicsJointsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF915E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF915E8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91600, "PhysicsJointsComponent");
    __cxa_guard_release(&qword_26AF915E8);
  }
  return &unk_26AF91600;
}

void re::ecs2::initInfo_PhysicsJointsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x19C0EC21209AF15ALL;
  v12[1] = "PhysicsJointsComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_341, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_341);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF915F0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::ecs2::introspect_PhysicsJointDefinitionAndRuntimeCollection((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "m_joints";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF915F8 = v10;
      __cxa_guard_release(&_MergedGlobals_341);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF915F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsJointsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsJointsComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsJointsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsJointsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsJointsComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  int v3 = (void *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)uint64_t v4 = &unk_26E70B030;
  *int v3 = &unk_26E703A38;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_DWORD *)(v4 + 104) = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsJointsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsJointsComponent>(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v1 = (void *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E70B030;
  void *v1 = &unk_26E703A38;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_DWORD *)(v2 + 104) = 0;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 112) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsJointsComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsJointsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsJointsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsJointsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsJointsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsJointsComponent>, this);
}

void re::ecs2::PhysicsJointsComponent::~PhysicsJointsComponent(re::ecs2::PhysicsJointsComponent *this)
{
  *(void *)this = &unk_26E70B030;
  *((void *)this + 4) = &unk_26E703A38;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 80);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)this + 40);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E70B030;
  *((void *)this + 4) = &unk_26E703A38;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 80);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)this + 40);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::PhysicsJointsComponent::addJoint(re::ecs2::PhysicsJointsComponent *this, const re::ecs2::PhysicsJointDefinition *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      uint64_t v3 = *(void *)(v3 + 24);
    }
    while (v3);
    uint64_t v5 = *(const re::ecs2::Scene **)(v4 + 16);
  }
  else
  {
    uint64_t v5 = 0;
  }
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::addJoint((re::ecs2::PhysicsJointsComponent *)((char *)this + 32), a2, v5);
  return re::ecs2::Component::markDirty(this);
}

void *re::ecs2::PhysicsJointsComponent::setJoints(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 24);
    }
    while (v4);
    uint64_t v6 = *(char **)(v5 + 16);
  }
  else
  {
    uint64_t v6 = 0;
  }
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::setJoints((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)(a1 + 4), a2, a3, v6);
  return re::ecs2::Component::markDirty(a1);
}

void *re::ecs2::PhysicsJointsComponent::removeFromSimulation(re::ecs2::PhysicsJointsComponent *this)
{
  if (*((void *)this + 12))
  {
    unint64_t v2 = 0;
    do
      re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint((re::ecs2::PhysicsJointsComponent *)((char *)this + 32), v2++, 0);
    while (*((void *)this + 12) > v2);
  }
  return re::ecs2::Component::markDirty(this);
}

uint64_t re::ecs2::PhysicsJointsComponentStateImpl::deleteDeferredDeletedJoints(uint64_t this, re::ecs2::PhysicsSimulationService *a2, const re::ecs2::Scene *a3)
{
  if (a2)
  {
    this = (*(uint64_t (**)(uint64_t, re::ecs2::PhysicsSimulationService *, const re::ecs2::Scene *))(*(void *)this + 32))(this, a2, a3);
    if (this)
    {
      uint64_t v3 = this;
      this = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v9, this, 0);
      BOOL v4 = v3 == v9 && (unsigned __int16)v10 == 0xFFFFLL;
      if (!v4 || (v10 & 0xFFFF0000) != 4294901760)
      {
        do
        {
          uint64_t v6 = *(void *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v9)
                         + 8);
          if (v6) {
            re::PhysicsJointCollection::deleteDeferredDeletedJoints((re::PhysicsJointCollection *)(v6 + 136));
          }
          this = (uint64_t)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v9);
        }
        while (v9 != v3 || (unsigned __int16)v10 != 0xFFFF || WORD1(v10) != 0xFFFF);
      }
    }
  }
  return this;
}

BOOL re::ecs2::PhysicsJointsComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9),
        (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11)))
  {
    re::ecs2::PhysicsJointsComponentStateImpl::deleteDeferredDeletedJoints(v10, *(re::ecs2::PhysicsSimulationService **)(a3 + 8), v12);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v36, a5, 0);
    unint64_t v15 = v36;
    unint64_t v14 = v37;
    unint64_t v36 = a4;
    unint64_t v37 = v15;
    unint64_t v38 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
        uint64_t v17 = *(void *)v16;
        uint64_t v18 = *(void *)(*(void *)v16 + 16);
        if (v18)
        {
          uint64_t v19 = *(void *)(*(void *)v16 + 16);
          do
          {
            uint64_t v20 = v19;
            uint64_t v19 = *(void *)(v19 + 24);
          }
          while (v19);
          uint64_t v21 = *(re::ecs2::Scene **)(v20 + 16);
          do
          {
            uint64_t v22 = v18;
            uint64_t v18 = *(void *)(v18 + 24);
          }
          while (v18);
          uint64_t v23 = *(void *)(v22 + 16);
          if (v23)
          {
            uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(v23 + 56) + 32))(*(void *)(v23 + 56));
            uint64_t v25 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v24);
            if (v25)
            {
              uint64_t v26 = v25;
              uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24))(v25);
              uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 40))(v26, v23);
              v40[0] = v27;
              v40[1] = v28;
              if (v28)
              {
                uint64_t v29 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v40, *(void *)(v17 + 16));
                if (v29)
                {
                  uint64_t v30 = (re::PhysicsSimulation *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v29);
                  int v31 = 0;
                  if (v30 && v21) {
                    int v31 = *(unsigned char *)(*(void *)(v17 + 16) + 288) & 1;
                  }
                  goto LABEL_21;
                }
              }
            }
          }
          uint64_t v30 = 0;
        }
        else
        {
          uint64_t v30 = 0;
          uint64_t v21 = 0;
        }
        int v31 = 0;
LABEL_21:
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::auditAndSyncRuntimeJoints((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)(v17 + 32), v31, v30, v21);
        unint64_t v32 = v36;
        unint64_t v33 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v37);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v32, v33, *(void *)(a3 + 48));
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v37);
      }
      while (v37 != a5 || (unsigned __int16)v38 != 0xFFFF || WORD1(v38) != 0xFFFF);
    }
    re::ecs2::PhysicsJointsComponentStateImpl::deleteDeferredDeletedJoints(v10, *(re::ecs2::PhysicsSimulationService **)(a3 + 8), v13);
    BOOL v34 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v34 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
  return v34;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsJointsComponent>::processUpdatingComponents()
{
  return 0;
}

void *re::ecs2::allocInfo_TimebaseComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_342, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_342))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF916A0, "TimebaseComponent");
    __cxa_guard_release(&_MergedGlobals_342);
  }
  return &unk_26AF916A0;
}

void re::ecs2::initInfo_TimebaseComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v12[0] = 0x3115163BF759E6BELL;
  v12[1] = "TimebaseComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91680, memory_order_acquire) & 1) == 0)
  {
    BOOL v4 = (re *)__cxa_guard_acquire(&qword_26AF91680);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF91690 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_TimebaseTree((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "tree";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF91698 = v10;
      __cxa_guard_release(&qword_26AF91680);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF91690;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::TimebaseComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::TimebaseComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TimebaseComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TimebaseComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

double re::internal::defaultConstruct<re::ecs2::TimebaseComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  *(void *)&double result = re::make::shared::unsafelyInplace<re::ecs2::TimebaseComponent>(a3).n128_u64[0];
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::TimebaseComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TimebaseComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_TimebaseComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TimebaseComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TimebaseComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TimebaseComponent>, this);
}

void *re::ecs2::allocInfo_TimebaseSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91688))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91718, "TimebaseSystem");
    __cxa_guard_release(&qword_26AF91688);
  }
  return &unk_26AF91718;
}

void re::ecs2::initInfo_TimebaseSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xA77DDFB789D60E1ALL;
  v5[1] = "TimebaseSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_TimebaseSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::TimebaseSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::TimebaseSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TimebaseSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TimebaseSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::TimebaseSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1);
  *uint64_t v3 = &unk_26E70B120;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::TimebaseSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::TimebaseSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1);
  void *v1 = &unk_26E70B120;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::TimebaseSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_TimebaseSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TimebaseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TimebaseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TimebaseSystem>, this);
}

uint64_t re::ecs2::TimebaseComponent::getTimebaseService(re::ecs2::TimebaseComponent *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 0;
  }
  do
  {
    uint64_t v2 = v1;
    uint64_t v1 = *(void *)(v1 + 24);
  }
  while (v1);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 56);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
  return re::ServiceLocator::serviceOrNull<re::TimebaseService>(v5);
}

uint64_t re::ecs2::TimebaseSystem::willAddSystemToECSService(re::ecs2::TimebaseSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v2);
  *((void *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::TimebaseSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  return this;
}

double re::ecs2::TimebaseSystem::willAddSceneToECSService(re::ecs2::TimebaseSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    uint64_t v5 = this;
    long long v6 = re::ecs2::TimebaseSystem::willRemoveComponents;
    uint64_t v7 = 0;
    unint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)&v5);
    uint64_t v5 = this;
    long long v6 = re::ecs2::TimebaseSystem::didAddComponents;
    uint64_t v7 = 0;
    unint64_t v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 128), (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::TimebaseSystem::willRemoveSceneFromECSService(re::ecs2::TimebaseSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(void *)&long long v4 = this;
    *((void *)&v4 + 1) = re::ecs2::TimebaseSystem::willRemoveComponents;
    uint64_t v5 = 0;
    long long v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v4);
    *(void *)&long long v4 = this;
    *((void *)&v4 + 1) = re::ecs2::TimebaseSystem::didAddComponents;
    uint64_t v5 = 0;
    long long v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 128, &v4);
  }
}

uint64_t re::ecs2::TimebaseSystem::willRemoveComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 104)) {
      BOOL v5 = a4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v7 = 8 * a4;
      do
      {
        uint64_t v8 = *a3++;
        (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 104) + 56))(*(void *)(a1 + 104), v8 + 32, 0);
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 104) + 88))(*(void *)(a1 + 104), v8 + 32);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return 0;
}

uint64_t re::ecs2::TimebaseSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 104)) {
      BOOL v5 = a4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v7 = MEMORY[0x263EF8330];
      uint64_t v8 = 8 * a4;
      do
      {
        uint64_t v9 = *a3++;
        uint64_t v10 = *(void *)(a1 + 104);
        v12[0] = v7;
        v12[1] = 3221225472;
        void v12[2] = ___ZN2re4ecs214TimebaseSystem16didAddComponentsEPNS0_24SceneComponentCollectionINS0_17TimebaseComponentEEENS_5SliceIPS3_EE_block_invoke;
        v12[3] = &__block_descriptor_40_e9_v16__0_v8l;
        v12[4] = v9;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 56))(v10, v9 + 32, v12);
        v8 -= 8;
      }
      while (v8);
    }
  }
  return 0;
}

void ___ZN2re4ecs214TimebaseSystem16didAddComponentsEPNS0_24SceneComponentCollectionINS0_17TimebaseComponentEEENS_5SliceIPS3_EE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const re::ecs2::Component **)(a1 + 32);
  re::ecs2::Component::markDirty(v1);
  uint64_t v2 = *((void *)v1 + 2);
  if (v2)
  {
    uint64_t v3 = *(re::ecs2::NetworkComponent **)(v2 + 200);
    if (v3)
    {
      re::ecs2::NetworkComponent::markDirty(v3, v1);
    }
  }
}

uint64_t re::ecs2::TimebaseSystem::update(uint64_t result, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 40))
  {
    uint64_t v2 = result;
    if (*(void *)(result + 104))
    {
      long long v4 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v33);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v4);
      if (isStatisticCollectionEnabled)
      {
        uint64_t v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
        uint64_t v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        unint64_t v8 = v7 ? *(void *)(v7 + 24) : 0;
        uint64_t v9 = *(int64x2_t **)(v6 + 152);
        if (v9)
        {
          unint64_t v10 = v9[592].u64[0];
          if (v10 >= v8) {
            unint64_t v10 = v8;
          }
          v9[592].i64[0] = v10;
          unint64_t v11 = v9[592].u64[1];
          if (v11 <= v8) {
            unint64_t v11 = v8;
          }
          v9[592].i64[1] = v11;
          int64x2_t v12 = vdupq_n_s64(1uLL);
          v12.i64[0] = v8;
          v9[593] = vaddq_s64(v9[593], v12);
          *(unsigned char *)(v6 + 184) = 0;
        }
      }
      long long v13 = (re::ecs2::SceneComponentTable *)(a2 + 200);
      re::ecs2::SceneComponentTable::get(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v32, 3119, v2);
      unint64_t v14 = (re *)re::ecs2::SceneComponentTable::get(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      uint64_t v15 = *((void *)v14 + 3);
      if (v15)
      {
        uint64_t v16 = (uint64_t *)*((void *)v14 + 5);
        for (uint64_t i = 8 * v15; i; i -= 8)
        {
          uint64_t v18 = *v16;
          uint64_t v19 = *(void *)(*v16 + 16);
          if (v19)
          {
            unint64_t v20 = *(re::ecs2::NetworkComponent **)(v19 + 200);
            if (v20)
            {
              if (*((void *)v20 + 4)) {
                uint64_t OwnerPeerID = RESyncableGetOwnerPeerID();
              }
              else {
                uint64_t OwnerPeerID = 0;
              }
              unint64_t v14 = (re *)re::ecs2::NetworkComponent::owningProcessType(v20);
              LOBYTE(v20) = (_BYTE)v14;
            }
            else
            {
              uint64_t OwnerPeerID = 0;
            }
          }
          else
          {
            uint64_t OwnerPeerID = 0;
            LOBYTE(v20) = 0;
          }
          if (*(void *)(v18 + 168) != *(void *)(v18 + 80) && *(unsigned char *)(v18 + 160))
          {
            uint64_t v22 = re::TimebaseLog(v14);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v23 = *(void *)(v18 + 168);
              uint64_t v24 = *(void *)(v18 + 80);
              *(_DWORD *)buf = 134218752;
              uint64_t v35 = v18;
              __int16 v36 = 2048;
              uint64_t v37 = OwnerPeerID;
              __int16 v38 = 2048;
              uint64_t v39 = v23;
              __int16 v40 = 2048;
              uint64_t v41 = v24;
              _os_log_impl(&dword_233120000, v22, OS_LOG_TYPE_DEFAULT, "removing timebase component %p (owner %llu) with registered parent ID %llu and desired parent ID %llu", buf, 0x2Au);
            }

            unint64_t v14 = (re *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 104) + 88))(*(void *)(v2 + 104), v18 + 32);
            *(unsigned char *)(v18 + 160) = 0;
            *(void *)(v18 + 168) = 0;
          }
          if (!OwnerPeerID && !*(void *)(v18 + 80))
          {
LABEL_40:
            if (*(unsigned char *)(v18 + 160))
            {
              uint64_t v30 = re::TimebaseLog(v14);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v31 = *(void *)(v18 + 168);
                *(_DWORD *)buf = 134218240;
                uint64_t v35 = v18;
                __int16 v36 = 2048;
                uint64_t v37 = v31;
                _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "removing locally-owned timebase component %p with registered parent ID %llu", buf, 0x16u);
              }

              unint64_t v14 = (re *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 104) + 88))(*(void *)(v2 + 104), v18 + 32);
              *(unsigned char *)(v18 + 160) = 0;
              *(void *)(v18 + 168) = 0;
            }
            goto LABEL_44;
          }
          if (*(unsigned char *)(v18 + 160))
          {
            if (OwnerPeerID) {
              goto LABEL_44;
            }
          }
          else
          {
            (*(void (**)(void, uint64_t))(**(void **)(v2 + 104) + 88))(*(void *)(v2 + 104), v18 + 32);
            uint64_t v25 = (re *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 104) + 80))(*(void *)(v2 + 104), v18 + 32);
            *(unsigned char *)(v18 + 160) = (_BYTE)v25;
            if (v25) {
              uint64_t v26 = *(void *)(v18 + 80);
            }
            else {
              uint64_t v26 = 0;
            }
            *(void *)(v18 + 168) = v26;
            uint64_t v27 = re::TimebaseLog(v25);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v28 = *(void *)(v18 + 168);
              uint64_t v29 = *(void *)(v18 + 80);
              *(_DWORD *)buf = 134218752;
              uint64_t v35 = v18;
              __int16 v36 = 2048;
              uint64_t v37 = OwnerPeerID;
              __int16 v38 = 2048;
              uint64_t v39 = v28;
              __int16 v40 = 2048;
              uint64_t v41 = v29;
              _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "removed and re-added timebase component %p (owner %llu) with new registered parent ID %llu and desired parent ID %llu", buf, 0x2Au);
            }

            if (OwnerPeerID) {
              goto LABEL_44;
            }
          }
          if (!*(void *)(v18 + 80)) {
            goto LABEL_40;
          }
LABEL_44:
          *(unsigned char *)(v18 + 152) = (_BYTE)v20;
          ++v16;
        }
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v32);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v33);
    }
  }
  return result;
}

void re::ecs2::TimebaseSystem::~TimebaseSystem(re::ecs2::TimebaseSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::TimebaseSystem::typeInfo(re::ecs2::TimebaseSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TimebaseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TimebaseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TimebaseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TimebaseSystem>, 0);
}

__n128 re::make::shared::unsafelyInplace<re::ecs2::TimebaseComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F3838;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(void *)(v1 + 68) = 0x7FFFFFFFLL;
  *(void *)(v1 + 80) = 0;
  uint64_t v2 = MEMORY[0x263F010E0];
  __n128 result = *(__n128 *)MEMORY[0x263F010E0];
  *(_OWORD *)(v1 + 88) = *MEMORY[0x263F010E0];
  uint64_t v4 = *(void *)(v2 + 16);
  *(void *)(v1 + 104) = v4;
  *(__n128 *)(v1 + 112) = result;
  *(unsigned char *)(v1 + 152) = 0;
  *(void *)(v1 + 128) = v4;
  *(void *)(v1 + 136) = 0;
  *(void *)(v1 + 144) = 0;
  *(unsigned char *)(v1 + 160) = 0;
  *(void *)(v1 + 168) = 0;
  return result;
}

id re::internal::defaultRetain<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::TimebaseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::createSubscription<re::ecs2::TimebaseSystem>(re::ecs2::TimebaseSystem *,REEventHandlerResult (re::ecs2::TimebaseSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Slice<re::ecs2::TimebaseComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::TimebaseComponent>,re::Slice<re::ecs2::TimebaseComponent*>>::Subscription const&,re::Slice<re::ecs2::TimebaseComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::introspect_RenderPassGroupActiveState(re *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91798, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF91798);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Always";
      qword_26AF917D8 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Never";
      qword_26AF917E0 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "DuringFade";
      qword_26AF917E8 = v30;
      __cxa_guard_release(&qword_26AF91798);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF917A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF917A0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF91808, "RenderPassGroupActiveState", 1, 1, 1, 1);
    qword_26AF91808 = (uint64_t)&unk_26E715E00;
    qword_26AF91848 = (uint64_t)&re::introspect_RenderPassGroupActiveState(BOOL)::enumTable;
    dword_26AF91818 = 9;
    __cxa_guard_release(&qword_26AF917A0);
  }
  if ((_MergedGlobals_343 & 1) == 0)
  {
    _MergedGlobals_343 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF91808, a2);
    uint64_t v32 = 0xB4A8E64523292C66;
    unint64_t v33 = "RenderPassGroupActiveState";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF91848;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  int64x2_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF91828 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RenderPassGroupActiveState", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

re::ecs2::RenderPassGroupComponent *re::ecs2::RenderPassGroupComponent::RenderPassGroupComponent(re::ecs2::RenderPassGroupComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E70B1A8;
  *(_WORD *)(v2 + 25) = 0;
  *(void *)(v2 + 32) = 0;
  re::ecs2::EntityFactory::instance((re::ecs2::EntityFactory *)v2);
  uuid_generate_random((unsigned __int8 *)v4);
  *((void *)this + 4) = (v4[1] + (v4[0] << 6) + (v4[0] >> 2) - 0x61C8864680B583E9) ^ v4[0];
  return this;
}

void *re::ecs2::allocInfo_RenderPassGroupComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF917A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF917A8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91850, "RenderPassGroupComponent");
    __cxa_guard_release(&qword_26AF917A8);
  }
  return &unk_26AF91850;
}

void re::ecs2::initInfo_RenderPassGroupComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x58E548ED432D180ALL;
  v16[1] = "RenderPassGroupComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF917B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF917B0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF917F0 = v7;
      uint64_t v8 = (re *)re::introspectionAllocator((re *)v7);
      re::introspect_RenderPassGroupActiveState(v8, v9);
      uint64_t v10 = (*(uint64_t (**)(re *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "activeState";
      *(void *)(v10 + 16) = &qword_26AF91808;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x1900000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF917F8 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      int v13 = re::introspect_BOOL((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "renderOnTop";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1A00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF91800 = v14;
      __cxa_guard_release(&qword_26AF917B0);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF917F0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderPassGroupComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderPassGroupComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderPassGroupComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderPassGroupComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

re::ecs2::RenderPassGroupComponent *re::internal::defaultConstruct<re::ecs2::RenderPassGroupComponent>(int a1, int a2, re::ecs2::RenderPassGroupComponent *this)
{
  return re::ecs2::RenderPassGroupComponent::RenderPassGroupComponent(this);
}

void *re::internal::defaultDestruct<re::ecs2::RenderPassGroupComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::RenderPassGroupComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RenderPassGroupComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderPassGroupComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderPassGroupComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderPassGroupComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderPassGroupComponent>, this);
}

void *re::ecs2::allocInfo_RenderPassGroupReferenceComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF917B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF917B8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF918C8, "RenderPassGroupReferenceComponent");
    __cxa_guard_release(&qword_26AF917B8);
  }
  return &unk_26AF918C8;
}

void re::ecs2::initInfo_RenderPassGroupReferenceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x60306C480623F7D4;
  v13[1] = "RenderPassGroupReferenceComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF917C0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF917C0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF917C8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "owner";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF917D0 = v11;
      __cxa_guard_release(&qword_26AF917C0);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF917C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderPassGroupReferenceComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderPassGroupReferenceComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderPassGroupReferenceComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderPassGroupReferenceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::RenderPassGroupReferenceComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v4 = (id *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *(void *)this = &unk_26E6F6F48;
  objc_initWeak(v4, 0);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v4);
}

void *re::internal::defaultDestruct<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (id *)(a3 + 4);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a3 + 4));
  objc_destroyWeak(v4);
  a3[4] = 0;
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::RenderPassGroupReferenceComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6F48;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v2);
}

void *re::internal::defaultDestructV2<re::ecs2::RenderPassGroupReferenceComponent>(void *a1)
{
  uint64_t v2 = (id *)(a1 + 4);
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)(a1 + 4));
  objc_destroyWeak(v2);
  a1[4] = 0;
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RenderPassGroupReferenceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderPassGroupReferenceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderPassGroupReferenceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderPassGroupReferenceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderPassGroupReferenceComponent>, this);
}

void re::ecs2::RenderPassGroupComponent::~RenderPassGroupComponent(re::ecs2::RenderPassGroupComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::MaterialParameterVariant::alloc(re::ecs2::MaterialParameterVariant *this)
{
  int v1 = *(unsigned __int8 *)this;
  if (v1 == 50) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  if (v1 == 49) {
    unsigned int v3 = 9;
  }
  else {
    unsigned int v3 = v2;
  }
  if (v1 == 48) {
    int v4 = 4;
  }
  else {
    int v4 = 0;
  }
  if (v1 == 34) {
    int v5 = 4;
  }
  else {
    int v5 = v4;
  }
  if (*(unsigned __int8 *)this <= 0x30u) {
    unsigned int v3 = v5;
  }
  if (v1 == 33) {
    int v6 = 3;
  }
  else {
    int v6 = 0;
  }
  if (v1 == 32) {
    int v7 = 2;
  }
  else {
    int v7 = v6;
  }
  if (v1 == 1) {
    unsigned int v8 = 1;
  }
  else {
    unsigned int v8 = v7;
  }
  if (*(unsigned __int8 *)this <= 0x21u) {
    return v8;
  }
  else {
    return v3;
  }
}

void *re::ecs2::allocInfo_MaterialParameterVariant(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91950, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91950))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91A70, "MaterialParameterVariant");
    __cxa_guard_release(&qword_26AF91950);
  }
  return &unk_26AF91A70;
}

void re::ecs2::initInfo_MaterialParameterVariant(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x54BED66A81F5A806;
  v18[1] = "MaterialParameterVariant";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91948, memory_order_acquire) & 1) == 0)
  {
    int v4 = (re *)__cxa_guard_acquire(&qword_26AF91948);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      int v7 = re::introspect_MaterialParameterType((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "ValueType";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF919B0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<float [16]>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "m_floatValues";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF919B8 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_AssetHandle((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "m_assetHandleValue";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x4800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF919C0 = v16;
      __cxa_guard_release(&qword_26AF91948);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF919B0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialParameterVariant>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialParameterVariant>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialParameterVariant>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialParameterVariant>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::MaterialParameterVariant>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 72) = 0;
}

void re::internal::defaultDestruct<re::ecs2::MaterialParameterVariant>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t re::internal::defaultConstructV2<re::ecs2::MaterialParameterVariant>(uint64_t result)
{
  *(unsigned char *)__n128 result = 0;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 72) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::MaterialParameterVariant>(uint64_t a1)
{
}

uint64_t re::ecs2::MaterialOverride::MaterialOverride(uint64_t a1, const re::AssetHandle *a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v4, a2);
  re::ecs2::MaterialOverride::setMaterialOrDefinition((void *)a1, v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
  return a1;
}

void re::ecs2::MaterialOverride::setMaterialOrDefinition(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (a1[7] == v2 || a1[10] == v2) {
    return;
  }
  int v5 = (re::AssetHandle *)(a1 + 6);
  int v6 = a1 + 9;
  if (v2)
  {
    int v7 = *(uint64_t **)(v2 + 264);
    uint64_t v8 = re::MaterialAsset::assetType((re::MaterialAsset *)a1);
    if (v7 == v8)
    {
      re::AssetHandle::operator=((uint64_t)(a1 + 6), a2);
      if (*v6)
      {

        void *v6 = 0;
      }
      a1[10] = 0;
      uint64_t v9 = a1[7];
      if (v9)
      {
        unsigned int v10 = atomic_load((unsigned int *)(v9 + 704));
        goto LABEL_20;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v8 = re::MaterialAsset::assetType((re::MaterialAsset *)a1);
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = *(uint64_t **)(v11 + 264);
    if (v12 != re::MaterialDefinitionAsset::assetType((re::MaterialDefinitionAsset *)v8) || a1[10] == a2[1]) {
      return;
    }
    uint64_t v13 = a1[7];
    if (v13)
    {
      unsigned int v14 = atomic_load((unsigned int *)(v13 + 704));
      if (v14 == 2)
      {
        if (*(void *)v5)
        {

          *(void *)int v5 = 0;
        }
        a1[7] = 0;
      }
    }
    re::AssetHandle::operator=((uint64_t)(a1 + 9), a2);
    uint64_t v15 = a1[10];
    if (v15)
    {
      unsigned int v10 = atomic_load((unsigned int *)(v15 + 704));
      int v5 = (re::AssetHandle *)(a1 + 9);
LABEL_20:
      if (v10 == 2) {
        return;
      }
      goto LABEL_26;
    }
    int v5 = (re::AssetHandle *)(a1 + 9);
LABEL_26:
    re::AssetHandle::loadAsync(v5);
    return;
  }
  re::MaterialDefinitionAsset::assetType((re::MaterialDefinitionAsset *)v8);
}

void re::ecs2::MaterialOverride::setFloat(re::ecs2::MaterialOverride *this, const char *a2, float a3)
{
  float __src = a3;
  *(void *)&v9.var0 = 0;
  v9.var1 = "";
  memset(v8, 0, sizeof(v8));
  v6[0] = 1;
  int v5 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v6);
  if (v5) {
    memcpy(&v7, &__src, (4 * v5));
  }
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)this, &v9, (uint64_t)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::StringID::destroyString((re::StringID *)&v9);
}

uint64_t re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6 = 0xBF58476D1CE4E5B9 * ((*(void *)&a2->var0 >> 31) ^ (*(void *)&a2->var0 >> 1));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  unint64_t v8 = v7 % *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v8);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v11 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 120 * v11;
    return v12 + 24;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v10 + 120 * v9 + 8), a2))
  {
    uint64_t v9 = *(_DWORD *)(v10 + 120 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v14 = v10 + 120 * v9;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a3;
  long long v15 = *(_OWORD *)(a3 + 16);
  long long v16 = *(_OWORD *)(a3 + 32);
  long long v17 = *(_OWORD *)(a3 + 48);
  *(_DWORD *)(v14 + 88) = *(_DWORD *)(a3 + 64);
  *(_OWORD *)(v14 + 72) = v17;
  *(_OWORD *)(v14 + 56) = v16;
  *(_OWORD *)(v14 + 40) = v15;
  re::AssetHandle::operator=(v14 + 96, (uint64_t *)(a3 + 72));
  ++*(_DWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 16) + 120 * v9;
  return v12 + 24;
}

void re::ecs2::MaterialOverride::floatValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        unint64_t v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v22 = 2 * v6;
  uint64_t v23 = a2;
  uint64_t v10 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v22);
  re::StringID::destroyString((re::StringID *)&v22);
  if (v10 && (int v11 = *v10, v11 == 1))
  {
    int v12 = *((_DWORD *)v10 + 1);
  }
  else
  {
    uint64_t v13 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (!v13) {
      goto LABEL_23;
    }
    uint64_t v14 = *(re::MaterialParameterBlock **)(v13 + 1672);
    if (a2)
    {
      uint64_t v15 = *a2;
      if (*a2)
      {
        char v16 = a2[1];
        if (v16)
        {
          long long v17 = a2 + 2;
          do
          {
            uint64_t v15 = 31 * v15 + v16;
            int v18 = *(unsigned __int8 *)v17++;
            char v16 = v18;
          }
          while (v18);
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    v20[0] = 2 * v15;
    v20[1] = a2;
    uint64_t v21 = v15 & 0x7FFFFFFFFFFFFFFFLL;
    re::MaterialParameterBlock::handle(v14, &v21, (uint64_t)&v22);
    uint64_t v21 = 0;
    re::StringID::destroyString((re::StringID *)v20);
    if ((BYTE4(v23) & 7) != 1 || v24 != 1)
    {
LABEL_23:
      *(unsigned char *)a3 = 0;
      return;
    }
    int v12 = *(_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v14, (uint64_t)&v22);
    LOBYTE(v11) = 1;
  }
  *(unsigned char *)a3 = v11;
  *(_DWORD *)(a3 + 4) = v12;
}

uint64_t re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, void *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (!re::StringID::operator==((void *)(v5 + 120 * v4 + 8), a2))
  {
    uint64_t v4 = *(_DWORD *)(v5 + 120 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v5 + 120 * v4 + 24;
}

void re::ecs2::MaterialOverride::setVector2F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  *(void *)&v9.var0 = 0;
  v9.var1 = "";
  uint64_t __src = a3;
  memset(v8, 0, sizeof(v8));
  v6[0] = 32;
  int v5 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v6);
  if (v5) {
    memcpy(&v7, &__src, (4 * v5));
  }
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v9, (uint64_t)v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::StringID::destroyString((re::StringID *)&v9);
}

void re::ecs2::MaterialOverride::vector2FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  v19[0] = 0;
  v19[1] = "";
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        unint64_t v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v16 = 2 * v6;
  long long v17 = a2;
  uint64_t v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v16);
  re::StringID::destroyString((re::StringID *)&v16);
  if (v10 && *(unsigned char *)v10 == 32)
  {
    uint64_t v11 = *(void *)(v10 + 4);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v11;
  }
  else
  {
    uint64_t v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v12
      && (uint64_t v13 = *(re::MaterialParameterBlock **)(v12 + 1672),
          uint64_t v15 = v19[0] >> 1,
          re::MaterialParameterBlock::handle(v13, &v15, (uint64_t)&v16),
          uint64_t v15 = 0,
          (BYTE4(v17) & 7) == 1)
      && v18 == 32)
    {
      uint64_t v14 = *(void *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)&v16);
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + 8) = v14;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v19);
}

void re::ecs2::MaterialOverride::setVector3F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __src[0] = a3;
  __src[1] = a4;
  *(void *)&v10.var0 = 0;
  v10.var1 = "";
  memset(v9, 0, sizeof(v9));
  v7[0] = 33;
  int v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6) {
    memcpy(&v8, __src, (4 * v6));
  }
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::vector3FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  v21[0] = 0;
  v21[1] = "";
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        int v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v18 = 2 * v6;
  long long v19 = a2;
  uint64_t v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v18);
  re::StringID::destroyString((re::StringID *)&v18);
  if (v10 && *(unsigned char *)v10 == 33)
  {
    *(void *)&long long v11 = *(void *)(v10 + 4);
    DWORD2(v11) = *(_DWORD *)(v10 + 12);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    uint64_t v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v12
      && (uint64_t v13 = *(re::MaterialParameterBlock **)(v12 + 1672),
          uint64_t v17 = v21[0] >> 1,
          re::MaterialParameterBlock::handle(v13, &v17, (uint64_t)&v18),
          uint64_t v17 = 0,
          (BYTE4(v19) & 7) == 1)
      && v20 == 33)
    {
      Constant = (uint64_t *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)&v18);
      uint64_t v15 = *Constant;
      uint64_t v16 = Constant[1];
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + 16) = v15;
      *(void *)(a3 + 24) = v16;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v21);
}

void re::ecs2::MaterialOverride::setVector4F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __src[0] = a3;
  __src[1] = a4;
  *(void *)&v10.var0 = 0;
  v10.var1 = "";
  memset(v9, 0, sizeof(v9));
  v7[0] = 34;
  int v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6) {
    memcpy(&v8, __src, (4 * v6));
  }
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::vector4FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  v21[0] = 0;
  v21[1] = "";
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        int v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v18 = 2 * v6;
  long long v19 = a2;
  uint64_t v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v18);
  re::StringID::destroyString((re::StringID *)&v18);
  if (v10 && *(unsigned char *)v10 == 34)
  {
    long long v11 = *(_OWORD *)(v10 + 4);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    uint64_t v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v12
      && (uint64_t v13 = *(re::MaterialParameterBlock **)(v12 + 1672),
          uint64_t v17 = v21[0] >> 1,
          re::MaterialParameterBlock::handle(v13, &v17, (uint64_t)&v18),
          uint64_t v17 = 0,
          (BYTE4(v19) & 7) == 1)
      && (v20 == 48 || v20 == 34))
    {
      Constant = (uint64_t *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)&v18);
      uint64_t v15 = *Constant;
      uint64_t v16 = Constant[1];
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + 16) = v15;
      *(void *)(a3 + 24) = v16;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v21);
}

void re::ecs2::MaterialOverride::setMatrix2x2F(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void __src[2] = *MEMORY[0x263EF8340];
  __src[0] = a3;
  __src[1] = a4;
  *(void *)&v10.var0 = 0;
  v10.var1 = "";
  memset(v9, 0, sizeof(v9));
  v7[0] = 48;
  int v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6) {
    memcpy(&v8, __src, (4 * v6));
  }
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::matrix2x2FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  v20[0] = 0;
  v20[1] = "";
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        int v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v17 = 2 * v6;
  uint64_t v18 = a2;
  uint64_t v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v17);
  re::StringID::destroyString((re::StringID *)&v17);
  if (v10 && *(unsigned char *)v10 == 48)
  {
    uint64_t v11 = *(void *)(v10 + 4);
    uint64_t v12 = *(void *)(v10 + 12);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v11;
    *(void *)(a3 + 16) = v12;
  }
  else
  {
    uint64_t v13 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v13
      && (uint64_t v14 = *(re::MaterialParameterBlock **)(v13 + 1672),
          uint64_t v16 = v20[0] >> 1,
          re::MaterialParameterBlock::handle(v14, &v16, (uint64_t)&v17),
          uint64_t v16 = 0,
          (BYTE4(v18) & 7) == 1)
      && (v19 == 48 || v19 == 34))
    {
      Constant = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v14, (uint64_t)&v17);
      *(unsigned char *)a3 = 1;
      *(_OWORD *)(a3 + 8) = *Constant;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v20);
}

void re::ecs2::MaterialOverride::setMatrix3x3F(_anonymous_namespace_ *a1, const char *a2, const void *a3)
{
  *(void *)&v10.var0 = 0;
  v10.var1 = "";
  memset(v9, 0, sizeof(v9));
  v7[0] = 49;
  int v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6) {
    memcpy(&v8, a3, (4 * v6));
  }
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::matrix3x3FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  v22[0] = 0;
  v22[1] = "";
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        int v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v19 = 2 * v6;
  char v20 = a2;
  uint64_t v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v19);
  re::StringID::destroyString((re::StringID *)&v19);
  if (v10 && *(unsigned char *)v10 == 49)
  {
    *(void *)&long long v11 = *(void *)(v10 + 4);
    *(void *)&long long v12 = *(void *)(v10 + 16);
    *(void *)&long long v13 = *(void *)(v10 + 28);
    DWORD2(v11) = *(_DWORD *)(v10 + 12);
    DWORD2(v12) = *(_DWORD *)(v10 + 24);
    DWORD2(v13) = *(_DWORD *)(v10 + 36);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a3 + 48) = v13;
  }
  else
  {
    uint64_t v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v14
      && (uint64_t v15 = *(re::MaterialParameterBlock **)(v14 + 1672),
          uint64_t v18 = v22[0] >> 1,
          re::MaterialParameterBlock::handle(v15, &v18, (uint64_t)&v19),
          uint64_t v18 = 0,
          (BYTE4(v20) & 7) == 1)
      && v21 == 49)
    {
      Constant = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v15, (uint64_t)&v19);
      long long v17 = Constant[1];
      *(_OWORD *)(a3 + 16) = *Constant;
      *(_OWORD *)(a3 + 32) = v17;
      *(_OWORD *)(a3 + 48) = Constant[2];
      *(unsigned char *)a3 = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v22);
}

void re::ecs2::MaterialOverride::setMatrix4x4F(_anonymous_namespace_ *a1, const char *a2, const void *a3)
{
  *(void *)&v10.var0 = 0;
  v10.var1 = "";
  memset(v9, 0, sizeof(v9));
  v7[0] = 50;
  int v6 = re::ecs2::MaterialParameterVariant::alloc((re::ecs2::MaterialParameterVariant *)v7);
  if (v6) {
    memcpy(&v8, a3, (4 * v6));
  }
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v10, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::MaterialOverride::matrix4x4FValue(re::ecs2::MaterialOverride *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  v24[0] = 0;
  v24[1] = "";
  if (a2)
  {
    uint64_t v6 = *a2;
    if (*a2)
    {
      char v7 = a2[1];
      if (v7)
      {
        int v8 = a2 + 2;
        do
        {
          uint64_t v6 = 31 * v6 + v7;
          int v9 = *(unsigned __int8 *)v8++;
          char v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v21 = 2 * v6;
  uint64_t v22 = a2;
  uint64_t v10 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this, &v21);
  re::StringID::destroyString((re::StringID *)&v21);
  if (v10 && *(unsigned char *)v10 == 50)
  {
    long long v11 = *(_OWORD *)(v10 + 4);
    long long v12 = *(_OWORD *)(v10 + 20);
    long long v13 = *(_OWORD *)(v10 + 36);
    long long v14 = *(_OWORD *)(v10 + 52);
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v11;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a3 + 48) = v13;
    *(_OWORD *)(a3 + 64) = v14;
  }
  else
  {
    uint64_t v15 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 48));
    if (v15
      && (uint64_t v16 = *(re::MaterialParameterBlock **)(v15 + 1672),
          uint64_t v20 = v24[0] >> 1,
          re::MaterialParameterBlock::handle(v16, &v20, (uint64_t)&v21),
          uint64_t v20 = 0,
          (BYTE4(v22) & 7) == 1)
      && v23 == 50)
    {
      Constant = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)v16, (uint64_t)&v21);
      long long v18 = Constant[1];
      *(_OWORD *)(a3 + 16) = *Constant;
      *(_OWORD *)(a3 + 32) = v18;
      long long v19 = Constant[3];
      *(_OWORD *)(a3 + 48) = Constant[2];
      *(_OWORD *)(a3 + 64) = v19;
      *(unsigned char *)a3 = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
  }
  re::StringID::destroyString((re::StringID *)v24);
}

void re::ecs2::MaterialOverride::setTexture(_anonymous_namespace_ *a1, const char *a2, const re::AssetHandle *a3)
{
  *(void *)&v9.var0 = 0;
  v9.var1 = "";
  re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a3);
  memset(v8, 0, sizeof(v8));
  v7[0] = 64;
  re::AssetHandle::operator=((uint64_t)v8, v6);
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)a1, &v9, (uint64_t)v7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  re::StringID::destroyString((re::StringID *)&v9);
}

void re::ecs2::MaterialOverride::clearMarkedMaterial(re::ecs2::MaterialOverride *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (v1)
  {
    unint64_t v3 = (char *)this + 96;
    unsigned int v4 = atomic_load((unsigned int *)(v1 + 704));
    if (v4 == 2)
    {
      uint64_t v5 = *((void *)this + 13);
      if (v5)
      {
        unsigned int v6 = atomic_load((unsigned int *)(v5 + 704));
        if (v6 == 2)
        {
          ++*(_DWORD *)(*((void *)this + 13) + 260);
          uint64_t v7 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::MaterialOverride *)((char *)this + 96));
          if (v7) {
            *(unsigned char *)(v7 + 1656) = 0;
          }
        }
      }
    }
    if (*(void *)v3)
    {

      *(void *)unint64_t v3 = 0;
    }
    *((void *)this + 13) = 0;
  }
}

void *re::ecs2::allocInfo_MaterialOverride(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91968))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91AE8, "MaterialOverride");
    __cxa_guard_release(&qword_26AF91968);
  }
  return &unk_26AF91AE8;
}

void re::ecs2::initInfo_MaterialOverride(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v41 = 0x4BDA5D82C822466;
  uint64_t v42 = "MaterialOverride";
  re::StringID::destroyString((re::StringID *)&v41);
  *((_OWORD *)this + 2) = v34;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91960, memory_order_acquire) & 1) == 0)
  {
    unsigned int v4 = (re *)__cxa_guard_acquire(&qword_26AF91960);
    if (v4)
    {
      unsigned int v6 = re::introspectionAllocator(v4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91990, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF91990))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_26AF91A20);
        qword_26AF91A20 = (uint64_t)&unk_26E70B2B8;
        __cxa_guard_release(&qword_26AF91990);
      }
      if ((_MergedGlobals_344 & 1) == 0)
      {
        uint64_t v7 = (re::ecs2 *)re::IntrospectionInfo<re::StringID>::get(1, v5);
        uint64_t v8 = (uint64_t)v7;
        StringID v9 = (void *)qword_26AF91958;
        if (!qword_26AF91958)
        {
          StringID v9 = re::ecs2::allocInfo_MaterialParameterVariant(v7);
          qword_26AF91958 = (uint64_t)v9;
          re::ecs2::initInfo_MaterialParameterVariant((re::ecs2 *)v9, v10);
        }
        if ((_MergedGlobals_344 & 1) == 0)
        {
          _MergedGlobals_344 = 1;
          int v11 = *((_DWORD *)v9 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF91A20, 0);
          qword_26AF91A30 = 0x3000000007;
          dword_26AF91A38 = v11;
          word_26AF91A3C = 0;
          *(void *)&xmmword_26AF91A40 = 0;
          *((void *)&xmmword_26AF91A40 + 1) = 0xFFFFFFFFLL;
          qword_26AF91A50 = v8;
          unk_26AF91A58 = 0;
          qword_26AF91A60 = (uint64_t)v9;
          unk_26AF91A68 = 0;
          qword_26AF91A20 = (uint64_t)&unk_26E70B2B8;
          re::IntrospectionRegistry::add(v12, v13);
          re::getPrettyTypeName((re *)&qword_26AF91A20, (const re::IntrospectionBase *)&v41);
          if (v42) {
            long long v14 = v43;
          }
          else {
            long long v14 = (char *)&v42 + 1;
          }
          if (v41 && (v42 & 1) != 0) {
            (*(void (**)(void))(*(void *)v41 + 40))();
          }
          long long v15 = *(_OWORD *)(v8 + 32);
          long long v36 = *((_OWORD *)v9 + 2);
          long long v37 = v15;
          uint64_t v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
          if (v16)
          {
            uint64_t v17 = *v16;
            *((void *)&v35 + 1) = v17;
          }
          else
          {
            uint64_t v41 = 0x449AD97C4B77BED4;
            uint64_t v42 = "_CompareFunc";
            long long v18 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v41);
            if (v18)
            {
              uint64_t v19 = *v18;
              re::StringID::destroyString((re::StringID *)&v41);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v41);
              *(void *)&v46.var0 = 0x449AD97C4B77BED4;
              v46.var1 = "_CompareFunc";
              uint64_t v20 = (void *)v41;
              uint64_t v19 = (uint64_t)v42;
              re::StringID::destroyString((re::StringID *)&v46);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v46, (uint64_t)&v42);
            if (!v20
              || (uint64_t v21 = *v47,
                  uint64_t v41 = v19,
                  uint64_t v42 = v21,
                  LODWORD(v43) = -1,
                  (uint64_t v22 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v46.var0 + 768, &v41)) == 0)|| !*(void *)v22)
            {
              long long v45 = v37;
              v44[0] = v20;
              v44[1] = v19;
            }
            long long v39 = v36;
            long long v40 = v37;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v41, v38, 1, 0x30uLL, 8uLL, &v40, &v39);
            re::TypeBuilder::setConstructor((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v41, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v41, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v41, v23);
          }
          xmmword_26AF91A40 = v35;
          re::StringID::destroyString((re::StringID *)v38);
        }
      }
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "parameters";
      *(void *)(v24 + 16) = &qword_26AF91A20;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 1;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF919C8 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v27 = re::introspect_AssetHandle((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "m_material";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x3000000002;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF919D0 = v28;
      uint64_t v29 = re::introspectionAllocator((re *)v28);
      uint64_t v31 = re::introspect_AssetHandle((re *)1, v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "m_materialDefinition";
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x4800000003;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF919D8 = v32;
      __cxa_guard_release(&qword_26AF91960);
    }
  }
  *((void *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF919C8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialOverride>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialOverride>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialOverride>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialOverride>;
  re::IntrospectionRegistry::add(this, v3);
  long long v33 = v34;
}

double re::internal::defaultConstruct<re::ecs2::MaterialOverride>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 112) = 0;
  return result;
}

double re::internal::defaultDestruct<re::ecs2::MaterialOverride>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 12));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 6));
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::MaterialOverride>(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::ecs2::MaterialOverride>(uint64_t *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 12));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 6));
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

void *re::ecs2::allocInfo_MaterialOverrideComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91978, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91978))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91B60, "MaterialOverrideComponent");
    __cxa_guard_release(&qword_26AF91978);
  }
  return &unk_26AF91B60;
}

void re::ecs2::initInfo_MaterialOverrideComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v11[0] = 0xBB3DCAB0B6EBE814;
  v11[1] = "MaterialOverrideComponent";
  re::StringID::destroyString((re::StringID *)v11);
  *((_OWORD *)this + 2) = v12;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91980, memory_order_acquire) & 1) == 0)
  {
    unsigned int v4 = (re *)__cxa_guard_acquire(&qword_26AF91980);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "ecs2::Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF919A0 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::MaterialOverride>>::get(v8);
      uint64_t v9 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v9 = 1;
      *(void *)(v9 + 8) = "materialOverrides";
      *(void *)(v9 + 16) = &qword_26AF919E0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0x2000000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_26AF919A8 = v9;
      __cxa_guard_release(&qword_26AF91980);
    }
  }
  *((void *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF919A0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialOverrideComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialOverrideComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialOverrideComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialOverrideComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v10 = v12;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::MaterialOverride>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91998, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF91998);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF919E0);
      qword_26AF919E0 = (uint64_t)&unk_26E70B358;
      __cxa_guard_release(&qword_26AF91998);
    }
  }
  if ((byte_26AF91941 & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF91970;
    if (qword_26AF91970
      || (uint64_t v1 = re::ecs2::allocInfo_MaterialOverride(a1),
          qword_26AF91970 = (uint64_t)v1,
          re::ecs2::initInfo_MaterialOverride((re::ecs2 *)v1, v2),
          (byte_26AF91941 & 1) == 0))
    {
      byte_26AF91941 = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF919E0, 0);
      *(void *)&algn_26AF919E8[8] = 0x2800000003;
      *(_DWORD *)&algn_26AF919E8[16] = v3;
      *(_WORD *)&algn_26AF919E8[20] = 0;
      *(void *)&xmmword_26AF91A00 = 0;
      *((void *)&xmmword_26AF91A00 + 1) = 0xFFFFFFFFLL;
      *(void *)algn_26AF91A10 = v1;
      *(void *)&algn_26AF91A10[8] = 0;
      qword_26AF919E0 = (uint64_t)&unk_26E70B358;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF919E0, (const re::IntrospectionBase *)&v14);
      if (v15) {
        uint64_t v6 = *(const char **)&v16[7];
      }
      else {
        uint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF91A00 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::MaterialOverrideComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F6FD0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MaterialOverrideComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialOverrideComponent>(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F6FD0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MaterialOverrideComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MaterialOverrideComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialOverrideComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialOverrideComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialOverrideComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialOverrideComponent>, this);
}

uint64_t re::ecs2::MaterialOverrideSystem::willRemoveComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a3;
    uint64_t v5 = a3 + 8 * a4;
    do
    {
      uint64_t v6 = *(void *)(*(void *)v4 + 48);
      if (v6)
      {
        uint64_t v7 = *(re::ecs2::MaterialOverride **)(*(void *)v4 + 64);
        uint64_t v8 = 120 * v6;
        do
        {
          re::ecs2::MaterialOverride::clearMarkedMaterial(v7);
          uint64_t v7 = (re::ecs2::MaterialOverride *)((char *)v7 + 120);
          v8 -= 120;
        }
        while (v8);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  return 0;
}

uint64_t re::ecs2::MaterialOverrideSystem::willAddSystemToECSService(re::ecs2::MaterialOverrideSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  *((void *)this + 15) = result;
  return result;
}

void *re::ecs2::MaterialOverrideSystem::willRemoveSystemFromECSService(void *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

double re::ecs2::MaterialOverrideSystem::willAddSceneToECSService(re::ecs2::MaterialOverrideSystem *this, re::ecs2::Scene *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v5[0] = this;
  v5[1] = re::ecs2::MaterialOverrideSystem::willRemoveComponent;
  void v5[2] = 0;
  v5[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::createSubscription<re::ecs2::MaterialOverrideSystem>(re::ecs2::MaterialOverrideSystem *,REEventHandlerResult (re::ecs2::MaterialOverrideSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Slice<re::ecs2::MaterialOverrideComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialOverrideComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)v5);
}

void re::ecs2::MaterialOverrideSystem::willRemoveSceneFromECSService(re::ecs2::MaterialOverrideSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v4 = this;
  *((void *)&v4 + 1) = re::ecs2::MaterialOverrideSystem::willRemoveComponent;
  uint64_t v5 = 0;
  uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::createSubscription<re::ecs2::MaterialOverrideSystem>(re::ecs2::MaterialOverrideSystem *,REEventHandlerResult (re::ecs2::MaterialOverrideSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Slice<re::ecs2::MaterialOverrideComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialOverrideComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v4);
}

uint64_t re::ecs2::MaterialOverrideSystem::update(uint64_t result, uint64_t a2)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = result;
    if (*(void *)(result + 120))
    {
      uint64_t v5 = *(void *)(result + 104);
      if (v5) {
        int v6 = (*(unsigned __int8 *)(v5 + 424) >> 4) & 1;
      }
      else {
        int v6 = 1;
      }
      int v73 = v6;
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v95);
      uint64_t v7 = (re::ecs2::SceneComponentTable *)(a2 + 200);
      re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      uint64_t v72 = v3;
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v94, 3027, v3);
      uint64_t v8 = re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 24);
        if (v9)
        {
          unint64_t v2 = *(void *)(v8 + 40);
          unint64_t v10 = v2 + 8 * v9;
          do
          {
            uint64_t v11 = *(void *)(*(void *)v2 + 48);
            if (v11)
            {
              long long v12 = *(re::ecs2::MaterialOverride **)(*(void *)v2 + 64);
              uint64_t v13 = 120 * v11;
              do
              {
                re::ecs2::MaterialOverride::clearMarkedMaterial(v12);
                long long v12 = (re::ecs2::MaterialOverride *)((char *)v12 + 120);
                v13 -= 120;
              }
              while (v13);
            }
            v2 += 8;
          }
          while (v2 != v10);
        }
      }
      uint64_t v14 = re::ecs2::SceneComponentTable::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v14) {
        goto LABEL_87;
      }
      uint64_t v15 = *(void *)(v14 + 24);
      if (!v15) {
        goto LABEL_87;
      }
      uint64_t v16 = *(uint64_t **)(v14 + 40);
      v70 = &v16[v15];
      while (1)
      {
        uint64_t v17 = *v16;
        unint64_t v18 = *(void *)(*v16 + 48);
        uint64_t v19 = *(void **)(*(void *)(*v16 + 16) + 176);
        if (v19 && v19[9] < v18)
        {
          long long v71 = v16;
          re::DynamicArray<re::AssetHandle>::resize((uint64_t)(v19 + 7), v18);
          int v20 = 1;
        }
        else
        {
          if (!v18) {
            goto LABEL_86;
          }
          long long v71 = v16;
          int v20 = 0;
        }
        unint64_t v21 = 0;
        uint64_t v79 = v17;
        v80 = v19;
        unint64_t v74 = v18;
        do
        {
          unint64_t v22 = *(void *)(v17 + 48);
          if (v22 <= v21)
          {
            v82[0] = 0;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v101 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__s2 = 136315906;
            *(void *)&__s2[4] = "operator[]";
            *(_WORD *)&__s2[12] = 1024;
            *(_DWORD *)&__s2[14] = 789;
            __int16 v97 = 2048;
            unint64_t v98 = v21;
            __int16 v99 = 2048;
            unint64_t v100 = v22;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_90:
            v82[0] = 0;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v101 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__s2 = 136315906;
            *(void *)&__s2[4] = "operator[]";
            *(_WORD *)&__s2[12] = 1024;
            *(_DWORD *)&__s2[14] = 789;
            __int16 v97 = 2048;
            unint64_t v98 = v21;
            __int16 v99 = 2048;
            unint64_t v100 = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_91:
            re::internal::assertLog((re::internal *)4, v52, "assertion failure: '%s' (%s:line %i) Unsupported m_material parameter type", "!\"Unreachable code\"", "update", 686);
            _os_crash();
            __break(1u);
LABEL_92:
            std::__throw_bad_variant_access[abi:nn180100]();
          }
          uint64_t v23 = *(void *)(v17 + 64);
          uint64_t v24 = v23 + 120 * v21;
          uint64_t v25 = *(void *)(v24 + 80);
          if (v25)
          {
            unsigned int v26 = atomic_load((unsigned int *)(v25 + 704));
            if (v26 == 2)
            {
              uint64_t v27 = v23 + 120 * v21;
              uint64_t v29 = *(void *)(v27 + 56);
              uint64_t v28 = (uint64_t *)(v27 + 56);
              int v30 = v73;
              if (v29) {
                int v30 = 0;
              }
              if (v30 == 1)
              {
                unint64_t v2 = *(void *)(v72 + 112);
                if (v2)
                {
                  int v76 = v20;
                  uint64_t v31 = v28 - 1;
                  uint64_t v32 = *(void *)(v72 + 120);
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v93, (const re::AssetHandle *)(v24 + 72));
                  re::AssetHelper::makeMutableMaterialMemoryAsset(v32, v2, (re::AssetHandle *)v93, 2);
                  uint64_t v33 = *v28;
                  uint64_t *v28 = *((void *)&v101 + 1);
                  *((void *)&v101 + 1) = v33;
                  uint64_t v34 = *(v28 - 1);
                  uint64_t *v31 = 0;
                  uint64_t *v31 = v101;
                  int v20 = v76;
                  *(void *)&long long v101 = v34;
                  uint64_t v35 = v23 + 120 * v21;
                  uint64_t v36 = *(void *)(v35 + 64);
                  *(void *)(v35 + 64) = v102;
                  *(void *)&long long v102 = v36;
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v101);
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v93);
                }
              }
            }
            else
            {
              re::AssetHandle::loadAsync((re::AssetHandle *)(v24 + 72));
            }
          }
          if (v19)
          {
            unint64_t v2 = v19[9];
            if (v2 <= v21) {
              goto LABEL_90;
            }
            uint64_t v37 = v19[11];
            if (*(void *)(v37 + 24 * v21 + 8) != *(void *)(v23 + 120 * v21 + 56))
            {
              re::AssetHandle::operator=(v37 + 24 * v21, (uint64_t *)(v23 + 120 * v21 + 48));
              int v20 = 1;
            }
          }
          uint64_t v81 = v23;
          uint64_t v38 = v23 + 120 * v21;
          uint64_t v41 = *(void *)(v38 + 56);
          uint64_t v39 = v38 + 56;
          uint64_t v40 = v41;
          if (!v41) {
            goto LABEL_83;
          }
          unsigned int v42 = atomic_load((unsigned int *)(v40 + 704));
          if (v42 != 2) {
            goto LABEL_83;
          }
          unint64_t v2 = v39 - 8;
          ++*(_DWORD *)(*(void *)v39 + 260);
          uint64_t v43 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v39 - 8));
          uint64_t v44 = *(unsigned int *)(v24 + 32);
          if (v44)
          {
            uint64_t v45 = 0;
            StringID v46 = *(int **)(v24 + 16);
            do
            {
              int v47 = *v46;
              v46 += 30;
              if (v47 < 0) {
                goto LABEL_43;
              }
              ++v45;
            }
            while (v44 != v45);
            LODWORD(v45) = *(_DWORD *)(v24 + 32);
          }
          else
          {
            LODWORD(v45) = 0;
          }
LABEL_43:
          if (v44 == v45) {
            goto LABEL_83;
          }
          v75 = (uint64_t *)v2;
          int v77 = v20;
          char v78 = 0;
          unint64_t v2 = v45;
          do
          {
            uint64_t v48 = *(void *)(v24 + 16);
            uint64_t v49 = v48 + 120 * v2;
            uint64_t v50 = (unsigned __int8 *)(v49 + 24);
            v51 = *(re::MaterialParameterBlock **)(v43 + 1672);
            re::MaterialParameterBlock::handle(v51, *(const char **)(v49 + 16), (uint64_t)&v101);
            int v56 = BYTE12(v101) & 7;
            if ((v56 - 2) < 3 || v56 == 1 && BYTE8(v102))
            {
              int v57 = *v50;
              if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v101, v57)) {
                goto LABEL_47;
              }
            }
            else
            {
              int v57 = *v50;
            }
            if (v57 > 47)
            {
              if (v57 > 49)
              {
                if (v57 == 50)
                {
                  uint64_t v66 = v48 + 120 * v2;
                  long long v67 = *(_OWORD *)(v66 + 44);
                  long long v68 = *(_OWORD *)(v66 + 60);
                  long long v69 = *(_OWORD *)(v66 + 76);
                  v84[0] = *(_OWORD *)(v66 + 28);
                  v84[1] = v67;
                  v84[2] = v68;
                  v84[3] = v69;
                  re::MaterialParameterBlock::setConstant(0x40uLL, v84, v51, (uint64_t *)&v101, 50, (uint64_t)v85);
                  v85[0] = 0;
                }
                else
                {
                  if (v57 != 64) {
                    goto LABEL_91;
                  }
                  v61 = re::AssetHandle::AssetHandle((re::AssetHandle *)__s2, (const re::AssetHandle *)(v48 + 120 * v2 + 96));
                  if (*(void *)&__s2[8]
                    && (unsigned int v62 = atomic_load((unsigned int *)(*(void *)&__s2[8] + 704)), v62 == 2))
                  {
                    uint64_t v63 = re::AssetHandle::asset<re::TextureAsset>(v61);
                    if (*(_DWORD *)(v63 + 240)) {
                      goto LABEL_92;
                    }
                    re::TextureManager::registerTexture(*(os_unfair_lock_s **)(*((void *)v51 + 121) + 64), (void **)(v63 + 160), v82);
                    re::MaterialParameterBlock::setTextureHandle(v51, (uint64_t)&v101, (re::TextureHandle *)v82, (uint64_t)v83);
                    v83[0] = 0;
                    re::TextureHandle::invalidate((re::TextureHandle *)v82);
                  }
                  else
                  {
                    re::AssetHandle::loadAsync(v61);
                    char v78 = 1;
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)__s2);
                }
              }
              else
              {
                uint64_t v60 = v48 + 120 * v2;
                if (v57 == 48)
                {
                  uint64_t v64 = *(void *)(v60 + 36);
                  *(void *)__s2 = *(void *)(v60 + 28);
                  *(void *)&__s2[8] = v64;
                  re::MaterialParameterBlock::setConstant(0x10uLL, __s2, v51, (uint64_t *)&v101, 48, (uint64_t)v88);
                  v88[0] = 0;
                }
                else
                {
                  *(void *)&long long v53 = *(void *)(v60 + 28);
                  *(void *)&long long v54 = *(void *)(v60 + 40);
                  *(void *)&long long v55 = *(void *)(v60 + 52);
                  DWORD2(v53) = *(_DWORD *)(v60 + 36);
                  DWORD2(v54) = *(_DWORD *)(v60 + 48);
                  DWORD2(v55) = *(_DWORD *)(v60 + 60);
                  v86[0] = v53;
                  v86[1] = v54;
                  v86[2] = v55;
                  re::MaterialParameterBlock::setConstant(0x30uLL, v86, v51, (uint64_t *)&v101, 49, (uint64_t)v87);
                  v87[0] = 0;
                }
              }
            }
            else if (v57 > 32)
            {
              if (v57 == 33)
              {
                uint64_t v65 = v48 + 120 * v2;
                *(void *)&long long v53 = *(void *)(v65 + 28);
                DWORD2(v53) = *(_DWORD *)(v65 + 36);
                *(_OWORD *)__s2 = v53;
                re::MaterialParameterBlock::setConstant(0x10uLL, __s2, v51, (uint64_t *)&v101, 33, (uint64_t)v90);
                v90[0] = 0;
              }
              else
              {
                if (v57 != 34) {
                  goto LABEL_91;
                }
                *(_OWORD *)__s2 = *(_OWORD *)(v48 + 120 * v2 + 28);
                re::MaterialParameterBlock::setConstant(0x10uLL, __s2, v51, (uint64_t *)&v101, 34, (uint64_t)v89);
                v89[0] = 0;
              }
            }
            else if (v57 == 1)
            {
              *(_DWORD *)__s2 = *(_DWORD *)(v48 + 120 * v2 + 28);
              re::MaterialParameterBlock::setConstant(4uLL, __s2, v51, (uint64_t *)&v101, 1, (uint64_t)v92);
              v92[0] = 0;
            }
            else
            {
              if (v57 != 32) {
                goto LABEL_91;
              }
              *(void *)__s2 = *(void *)(v48 + 120 * v2 + 28);
              re::MaterialParameterBlock::setConstant(8uLL, __s2, v51, (uint64_t *)&v101, 32, (uint64_t)v91);
              v91[0] = 0;
            }
LABEL_47:
            unsigned int v58 = *(_DWORD *)(v24 + 32);
            if (v58 <= (int)v45 + 1) {
              unsigned int v58 = v45 + 1;
            }
            while (1)
            {
              unint64_t v2 = (v45 + 1);
              if (v58 - 1 == v45) {
                break;
              }
              LODWORD(v45) = v45 + 1;
              int v59 = v2;
              if ((*(_DWORD *)(*(void *)(v24 + 16) + 120 * v2) & 0x80000000) != 0) {
                goto LABEL_53;
              }
            }
            int v59 = v58;
LABEL_53:
            LODWORD(v45) = v59;
          }
          while (v44 != v59);
          unint64_t v18 = v74;
          int v20 = v77;
          if (v78)
          {
            *(unsigned char *)(v43 + 1656) = 1;
            re::AssetHandle::operator=(v81 + 120 * v21 + 96, v75);
          }
LABEL_83:
          ++v21;
          uint64_t v17 = v79;
          uint64_t v19 = v80;
        }
        while (v21 != v18);
        uint64_t v16 = v71;
        if (v20) {
          re::ecs2::Component::markDirty(v80);
        }
LABEL_86:
        if (++v16 == v70)
        {
LABEL_87:
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v94);
          return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v95);
        }
      }
    }
  }
  return result;
}

void *re::ecs2::allocInfo_MaterialOverrideSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91988, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91988))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91BD8, "MaterialOverrideSystem");
    __cxa_guard_release(&qword_26AF91988);
  }
  return &unk_26AF91BD8;
}

void re::ecs2::initInfo_MaterialOverrideSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xD2A25A77E0157C84;
  v5[1] = "MaterialOverrideSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MaterialOverrideSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialOverrideSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialOverrideSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialOverrideSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialOverrideSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::MaterialOverrideSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1);
  *uint64_t v3 = &unk_26E70B230;
  v3[14] = 0;
  v3[15] = 0;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::MaterialOverrideSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialOverrideSystem>(_OWORD *a1)
{
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1);
  void *v1 = &unk_26E70B230;
  v1[14] = 0;
  v1[15] = 0;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::MaterialOverrideSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MaterialOverrideSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialOverrideSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialOverrideSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialOverrideSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialOverrideSystem>, this);
}

void re::ecs2::MaterialOverrideSystem::~MaterialOverrideSystem(re::ecs2::MaterialOverrideSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MaterialOverrideSystem::typeInfo(re::ecs2::MaterialOverrideSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialOverrideSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialOverrideSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialOverrideSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialOverrideSystem>, 0);
}

uint64_t re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 120 * v9);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 120 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 120 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14) = *(_DWORD *)(*(void *)(a1 + 16) + 120 * v9) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(void *)(a1 + 16) + 120 * v9 + 8), a4);
  uint64_t v15 = *(void *)(a1 + 16) + 120 * v9;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a5;
  long long v16 = *(_OWORD *)(a5 + 16);
  long long v17 = *(_OWORD *)(a5 + 32);
  long long v18 = *(_OWORD *)(a5 + 48);
  *(_DWORD *)(v15 + 88) = *(_DWORD *)(a5 + 64);
  *(_OWORD *)(v15 + 72) = v18;
  *(_OWORD *)(v15 + 56) = v17;
  *(_OWORD *)(v15 + 40) = v16;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(v15 + 96), (const re::AssetHandle *)(a5 + 72));
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(void *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v16, v4, a2);
      long long v5 = *(_OWORD *)v16;
      *(_OWORD *)long long v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v16[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v16[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        uint64_t v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * ((*(void *)(v12 - 16) >> 31) ^ (*(void *)(v12 - 16) >> 1));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 120;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2) {
      signed int v15 = a2;
    }
    else {
      signed int v15 = 3;
    }
  }
}

void *re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  memset(v10, 0, sizeof(v10));
  unsigned int v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, (uint64_t)v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v10[4] + 8));
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = *(int **)(a2 + 16);
    while (1)
    {
      int v8 = *v7;
      v7 += 30;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 120 * v10 + 8, *(void *)(a2 + 16) + 120 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 120 * v10) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
}

void re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(void *)(a1 + 16) + v3));
        ++v4;
        v3 += 120;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, StringID *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 120 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = *(int **)(v2 + 16);
        while (1)
        {
          int v7 = *v6;
          v6 += 30;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 120 * *(unsigned int *)(a1 + 32) + 8;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 120 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::MaterialOverride>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::MaterialOverride>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::MaterialOverride>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  memset(v10, 0, sizeof(v10));
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  DWORD1(v11) = 0x7FFFFFFF;
  long long v13 = 0u;
  uint64_t v14 = 0;
  re::DynamicArray<re::ecs2::MaterialOverride>::add(this, (uint64_t *)v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v12[1] + 8));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v10);
  uint64_t v8 = (re::IntrospectionBase *)(*((void *)this + 4) + 120 * *((void *)this + 2) - 120);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::MaterialOverride>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 120 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 120 * a3;
}

void *re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x78uLL))
        {
          uint64_t v2 = 120 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 120 * a2, 8);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 120, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = &v8[15 * v9];
        long long v11 = v7;
        do
        {
          *((_DWORD *)v11 + 8) = 0;
          *(_OWORD *)long long v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          *(void *)((char *)v11 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11, v8);
          v11[6] = 0;
          v11[7] = 0;
          v11[8] = 0;
          v11[7] = v8[7];
          v8[7] = 0;
          uint64_t v12 = v11[6];
          v11[6] = 0;
          v11[6] = v8[6];
          v8[6] = v12;
          uint64_t v13 = v11[8];
          v11[8] = v8[8];
          v8[8] = v13;
          v11[9] = 0;
          v11[10] = 0;
          v11[11] = 0;
          v11[10] = v8[10];
          v8[10] = 0;
          uint64_t v14 = v11[9];
          v11[9] = 0;
          v11[9] = v8[9];
          v8[9] = v14;
          uint64_t v15 = v11[11];
          v11[11] = v8[11];
          v8[11] = v15;
          v11[12] = 0;
          v11[13] = 0;
          v11[14] = 0;
          v11[13] = v8[13];
          v8[13] = 0;
          uint64_t v16 = v11[12];
          v11[12] = 0;
          v11[12] = v8[12];
          v8[12] = v16;
          uint64_t v17 = v11[14];
          v11[14] = v8[14];
          v8[14] = v17;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + 12));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + 9));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + 6));
          re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v8);
          v8 += 15;
          v11 += 15;
        }
        while (v8 != v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::DynamicArray<re::ecs2::MaterialOverride>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 120 * a2;
    unint64_t v9 = a2;
    do
    {
      unint64_t v10 = (uint64_t *)(*(void *)(a1 + 32) + v8);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 12));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 9));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 6));
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10);
      ++v9;
      v8 += 120;
    }
    while (v9 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 120 * v4;
      do
      {
        uint64_t v7 = *(void *)(a1 + 32) + v6;
        *(void *)(v7 + 112) = 0;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_DWORD *)(v7 + 36) = 0x7FFFFFFF;
        v6 += 120;
        --v5;
      }
      while (v5);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t *re::DynamicArray<re::ecs2::MaterialOverride>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 120 * v4;
  *(_DWORD *)(v5 + 32) = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 36) = 0x7FFFFFFFLL;
  uint64_t result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, a2);
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 56) = 0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 56) = a2[7];
  a2[7] = 0;
  uint64_t v7 = *(void *)(v5 + 48);
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 48) = a2[6];
  a2[6] = v7;
  uint64_t v8 = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = a2[8];
  a2[8] = v8;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 80) = a2[10];
  a2[10] = 0;
  uint64_t v9 = *(void *)(v5 + 72);
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 72) = a2[9];
  a2[9] = v9;
  uint64_t v10 = *(void *)(v5 + 88);
  *(void *)(v5 + 88) = a2[11];
  a2[11] = v10;
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 104) = a2[13];
  a2[13] = 0;
  uint64_t v11 = *(void *)(v5 + 96);
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 96) = a2[12];
  a2[12] = v11;
  uint64_t v12 = *(void *)(v5 + 112);
  *(void *)(v5 + 112) = a2[14];
  a2[14] = v12;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::ecs2::MaterialOverride>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::MaterialOverride>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::MaterialOverride>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::MaterialOverride>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 120 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 120;
        v11 -= 120;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::MaterialOverride>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(a1 + 32);
    uint64_t v4 = 120 * v2;
    do
    {
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 12));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 9));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + 6));
      re::HashTable<re::StringID,re::ecs2::MaterialParameterVariant,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v3);
      v3 += 15;
      v4 -= 120;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 120 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 120 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::MaterialOverride>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::createSubscription<re::ecs2::MaterialOverrideSystem>(re::ecs2::MaterialOverrideSystem *,REEventHandlerResult (re::ecs2::MaterialOverrideSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Slice<re::ecs2::MaterialOverrideComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::MaterialOverrideComponent>,re::Slice<re::ecs2::MaterialOverrideComponent*>>::Subscription const&,re::Slice<re::ecs2::MaterialOverrideComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  BOOL v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

id re::internal::defaultRetain<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MaterialOverrideSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

re *re::ecs2::ECSStateCommand::commandEntity(re::ecs2::ECSStateCommand *this, const re::BindPoint *a2)
{
  v27[4] = *(re::BindNode **)MEMORY[0x263EF8340];
  if (!*((void *)this + 6)
    || !re::BindPoint::isAlive((re::ecs2::ECSStateCommand *)((char *)this + 24))
    || (unint64_t v4 = (re *)re::BindPoint::valueUntyped((re::ecs2::ECSStateCommand *)((char *)this + 24))) == 0)
  {
    if (*((void *)a2 + 3) && re::BindPoint::isAlive(a2))
    {
      uint64_t v5 = (re *)re::BindPoint::valueUntyped(a2);
      unint64_t v4 = v5;
      if (*((void *)this + 1) <= 1uLL)
      {
        BOOL v6 = (unsigned char *)*((void *)this + 2);
        if (v6)
        {
          if (!*v6)
          {
            *((void *)this + 3) = *(void *)a2;
            re::DynamicArray<re::BindPoint::BindPointData>::operator=((uint64_t)this + 32, (uint64_t *)a2 + 1);
            return v4;
          }
        }
      }
      re::makeBindNode(v5, (uint64_t)v27);
      size_t v7 = strlen(*((const char **)this + 2));
      *(void *)&buf[0] = *((void *)this + 2);
      *((void *)&buf[0] + 1) = v7;
      {
        re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
      }
      re::BindNode::bindPoint(v27, re::introspect<re::ecs2::Entity>(void)::info, (uint64_t *)buf, (uint64_t)&v24);
      if (!v25[2]
        || (uint64_t isAlive = re::BindPoint::isAlive((re::BindPoint *)&v24), !isAlive)
        || (isAlive = re::BindPoint::valueUntyped((re::BindPoint *)&v24), (uint64_t v9 = isAlive) == 0))
      {
        if (!v4) {
          goto LABEL_49;
        }
        uint64_t v10 = *((void *)v4 + 41);
        if (!v10) {
          goto LABEL_49;
        }
        uint64_t v11 = (uint64_t *)*((void *)v4 + 43);
        uint64_t v12 = 8 * v10;
        while (1)
        {
          uint64_t v9 = *v11;
          uint64_t isAlive = re::StringID::operator==((void *)(*v11 + 272), (void *)this + 1);
          if (isAlive) {
            break;
          }
          ++v11;
          v12 -= 8;
          if (!v12) {
            goto LABEL_21;
          }
        }
        if (!v9)
        {
LABEL_49:
          do
          {
LABEL_21:
            uint64_t v13 = v4;
            unint64_t v4 = (re *)*((void *)v4 + 3);
          }
          while (v4);
          uint64_t v14 = *((void *)v13 + 2);
          uint64_t v15 = *(void *)(v14 + 128);
          if (!v15) {
            goto LABEL_37;
          }
          uint64_t v16 = *(uint64_t **)(v14 + 144);
          uint64_t v17 = &v16[v15];
          while (1)
          {
            uint64_t v9 = *v16;
            uint64_t isAlive = re::StringID::operator==((void *)(*v16 + 272), (void *)this + 1);
            if (isAlive) {
              break;
            }
            if ((*(unsigned char *)(v9 + 288) & 0x20) != 0)
            {
              uint64_t v18 = *(void *)(v9 + 328);
              if (v18)
              {
                uint64_t v19 = *(uint64_t **)(v9 + 344);
                uint64_t v20 = 8 * v18;
                while (1)
                {
                  uint64_t v9 = *v19;
                  uint64_t isAlive = re::StringID::operator==((void *)(*v19 + 272), (void *)this + 1);
                  if (isAlive) {
                    break;
                  }
                  ++v19;
                  v20 -= 8;
                  if (!v20) {
                    goto LABEL_32;
                  }
                }
                if (v9) {
                  goto LABEL_35;
                }
              }
            }
LABEL_32:
            if (++v16 == v17) {
              goto LABEL_37;
            }
          }
          if (!v9)
          {
LABEL_37:
            unint64_t v21 = *re::foundationCoreLogObjects((re *)isAlive);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              uint64_t v23 = *((void *)this + 2);
              LODWORD(buf[0]) = 136315138;
              *(void *)((char *)buf + 4) = v23;
              _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, "Cannot create targetEntityBindPoint from %s.", (uint8_t *)buf, 0xCu);
            }
            uint64_t v9 = 0;
LABEL_40:
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v25);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v25);
            re::BindNode::deinit((re::BindNode *)v27);
            return (re *)v9;
          }
        }
      }
LABEL_35:
      {
        re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
      }
      re::makeBindPoint((re *)re::introspect<re::ecs2::Entity>(void)::info, (const re::IntrospectionBase *)v9, (uint64_t)buf);
      *((void *)this + 3) = *(void *)&buf[0];
      re::DynamicArray<re::RigDataValue>::operator=((uint64_t)this + 32, (uint64_t)buf + 8);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)buf + 8);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)buf + 8);
      goto LABEL_40;
    }
    return 0;
  }
  return v4;
}

unint64_t *re::ecs2::AnimationPlayCommand::setParameter(unint64_t *this, const re::StringID *a2, const re::StringID *a3)
{
  if (*(void *)a2 >> 1 == 0x6E8A02F1A8ADD80FLL)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = (char *)*((void *)a2 + 1);
    if (v5 == "AnimationName" || (this = (unint64_t *)strcmp(v5, "AnimationName"), !this))
    {
      return re::StringID::operator=((unint64_t *)(v4 + 80), (uint64_t *)a3);
    }
  }
  return this;
}

char *re::ecs2::AnimationPlayCommand::setParameter(char *this, const re::StringID *a2, char a3)
{
  if (*(void *)a2 >> 1 == 0x1A4DFD60A1B7848DLL)
  {
    uint64_t v4 = this;
    this = (char *)*((void *)a2 + 1);
    if (this == "SetExitTimeFromAnimation" || (this = (char *)strcmp(this, "SetExitTimeFromAnimation"), !this)) {
      v4[96] = a3;
    }
  }
  return this;
}

unint64_t *re::ecs2::AnimationPlayCommand::getParameter(unint64_t *this, const re::StringID *a2, re::StringID *a3)
{
  if (*(void *)a2 >> 1 == 0x6E8A02F1A8ADD80FLL)
  {
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = (char *)*((void *)a2 + 1);
    if (v5 == "AnimationName" || (this = (unint64_t *)strcmp(v5, "AnimationName"), !this))
    {
      return re::StringID::operator=((unint64_t *)a3, (uint64_t *)(v4 + 80));
    }
  }
  return this;
}

char *re::ecs2::AnimationPlayCommand::getParameter(char *this, const re::StringID *a2, BOOL *a3)
{
  if (*(void *)a2 >> 1 == 0x1A4DFD60A1B7848DLL)
  {
    uint64_t v4 = this;
    this = (char *)*((void *)a2 + 1);
    if (this == "SetExitTimeFromAnimation" || (this = (char *)strcmp(this, "SetExitTimeFromAnimation"), !this)) {
      *a3 = v4[96];
    }
  }
  return this;
}

void re::ecs2::AnimationPlayCommand::executeCommand(uint64_t a1, uint64_t a2, uint64_t a3, int a4, re::BindPoint *a5)
{
  uint64_t v8 = re::ecs2::ECSStateCommand::commandEntity((re::ecs2::ECSStateCommand *)a1, a5);
  if (v8)
  {
    uint64_t v9 = (re *)((char *)v8 + 32);
    uint64_t v10 = (void *)re::ecs2::EntityComponentCollection::getOrAdd((re *)((char *)v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    uint64_t v11 = re::ecs2::EntityComponentCollection::get(v9, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v11)
    {
      uint64_t v12 = re::AssetHandle::asset<re::AnimationLibraryAsset>((re::AnimationLibraryAsset *)(v11 + 32));
      if (v12)
      {
        uint64_t v13 = (void *)v12;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        uint64_t v14 = *(void *)(v12 + 136);
        if (!v14) {
          goto LABEL_18;
        }
        uint64_t v15 = *(re::AssetHandle **)(v12 + 152);
        uint64_t v16 = 24 * v14;
        while (1)
        {
          uint64_t v17 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
          uint64_t v18 = (uint64_t *)*((void *)v15 + 1);
          if (v18) {
            uint64_t v18 = (uint64_t *)v18[33];
          }
          if (v17 == v18)
          {
            uint64_t v23 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(v15);
            if (!v23) {
              goto LABEL_17;
            }
            uint64_t v24 = re::AssetHandle::asset<re::TimelineAsset>(v23);
            if (!v24) {
              goto LABEL_17;
            }
            uint64_t v22 = *(void *)(v24 + 16);
            if (!v22) {
              goto LABEL_17;
            }
          }
          else
          {
            uint64_t v19 = re::TimelineAsset::assetType((re::TimelineAsset *)v17);
            uint64_t v20 = *((void *)v15 + 1);
            if (!v20) {
              goto LABEL_17;
            }
            if (v19 != *(uint64_t **)(v20 + 264)) {
              goto LABEL_17;
            }
            uint64_t v21 = re::AssetHandle::asset<re::TimelineAsset>(v15);
            if (!v21) {
              goto LABEL_17;
            }
            uint64_t v22 = *(void *)(v21 + 8);
          }
          if (re::StringID::operator==((void *)(v22 + 24), (void *)(a1 + 80)))
          {
            re::AssetHandle::operator=((uint64_t)&v65, (uint64_t *)v15);
            if (v66) {
              goto LABEL_38;
            }
LABEL_18:
            uint64_t v25 = v13[12];
            if (!v25) {
              goto LABEL_24;
            }
            unsigned int v26 = (void *)v13[14];
            uint64_t v27 = 40 * v25;
            while (!re::StringID::operator==((void *)(a1 + 80), v26))
            {
              v26 += 5;
              v27 -= 40;
              if (!v27) {
                goto LABEL_24;
              }
            }
            re::AssetHandle::operator=((uint64_t)&v65, v26 + 2);
            if (!v66)
            {
LABEL_24:
              uint64_t v28 = v13[7];
              if (!v28) {
                goto LABEL_30;
              }
              uint64_t v29 = (void *)v13[9];
              uint64_t v30 = 40 * v28;
              while (!re::StringID::operator==((void *)(a1 + 80), v29))
              {
                v29 += 5;
                v30 -= 40;
                if (!v30) {
                  goto LABEL_30;
                }
              }
              re::AssetHandle::operator=((uint64_t)&v65, v29 + 2);
              if (!v66)
              {
LABEL_30:
                uint64_t v31 = v13[2];
                if (!v31) {
                  goto LABEL_73;
                }
                uint64_t v32 = (uint64_t *)(v13[4] + 72);
                uint64_t v33 = 120 * v31;
                while (!re::StringID::operator==((void *)(a1 + 80), v32 - 2))
                {
                  v32 += 15;
                  v33 -= 120;
                  if (!v33) {
                    goto LABEL_73;
                  }
                }
                re::AssetHandle::operator=((uint64_t)&v65, v32);
                if (!v66)
                {
LABEL_73:
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v65);
                  return;
                }
              }
            }
LABEL_38:
            if (*(unsigned char *)(a1 + 96))
            {
              uint64_t v34 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
              uint64_t v35 = (uint64_t *)v66;
              if (v66) {
                uint64_t v35 = *(uint64_t **)(v66 + 264);
              }
              if (v34 == v35)
              {
                uint64_t v39 = (re::TimelineAsset *)re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>((re::AssetHandle *)&v65);
                float v37 = 0.0;
                if (v39)
                {
                  uint64_t v40 = v39;
                  uint64_t v41 = re::TimelineAsset::assetType(v39);
                  uint64_t v42 = *((void *)v40 + 1);
                  if (v42)
                  {
                    if (v41 == *(uint64_t **)(v42 + 264))
                    {
                      uint64_t v38 = v40;
LABEL_49:
                      uint64_t v43 = re::AssetHandle::asset<re::TimelineAsset>(v38);
                      if (v43)
                      {
                        uint64_t v44 = *(void *)(v43 + 16);
                        if (v44) {
                          float v37 = (*(double (**)(uint64_t))(*(void *)v44 + 40))(v44);
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                uint64_t v36 = re::TimelineAsset::assetType((re::TimelineAsset *)v34);
                float v37 = 0.0;
                if (v66 && v36 == *(uint64_t **)(v66 + 264))
                {
                  uint64_t v38 = (re::TimelineAsset *)&v65;
                  goto LABEL_49;
                }
              }
              uint64_t v45 = re::StateMachine::currentState((unint64_t *)a2, a3);
              uint64_t v46 = *(void *)(v45 + 24);
              float v47 = 0.0;
              float v48 = 0.0;
              if (v46)
              {
                uint64_t v49 = *(uint64_t **)(v45 + 40);
                uint64_t v50 = 8 * v46;
                do
                {
                  uint64_t v51 = *v49++;
                  float v52 = *(float *)(v51 + 72);
                  if (v48 < v52) {
                    float v48 = v52;
                  }
                  v50 -= 8;
                }
                while (v50);
              }
              if (v37 > v48) {
                float v47 = v37 - v48;
              }
              if (v47 >= 0.0) {
                *(float *)(v45 + 104) = v47;
              }
            }
            BYTE8(v63) = 0;
            HIDWORD(v63) = 0x80000000;
            uint64_t v64 = "";
            LODWORD(v63) = 0;
            DWORD1(v63) = *(_DWORD *)(a2 + 40);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v62, (const re::AssetHandle *)&v65);
            *(void *)(a1 + 72) = re::ecs2::AnimationComponent::play((uint64_t)v10, v62, &v63, 0, 0);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v62);
            re::ecs2::Component::markDirty(v10);
            uint64_t v53 = re::StateMachine::previousState(a2, a3);
            if (v53)
            {
              re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)&v59, (uint64_t *)(v53 + 48));
              long long v54 = v61;
              if (v60)
              {
                uint64_t v55 = 8 * v60;
                int v56 = v61;
                do
                {
                  if (*v56)
                  {
                    if (v57) {
                      v57[9] = 0;
                    }
                  }
                  ++v56;
                  v55 -= 8;
                }
                while (v55);
              }
              if (v59) {
                BOOL v58 = v54 == 0;
              }
              else {
                BOOL v58 = 1;
              }
              if (!v58) {
                (*(void (**)(void))(*(void *)v59 + 40))();
              }
            }
            goto LABEL_73;
          }
LABEL_17:
          uint64_t v15 = (re::AssetHandle *)((char *)v15 + 24);
          v16 -= 24;
          if (!v16) {
            goto LABEL_18;
          }
        }
      }
    }
  }
}

uint64_t re::AssetHandle::asset<re::AnimationLibraryAsset>(re::AnimationLibraryAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::AnimationLibraryAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      BOOL v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        size_t v7 = (char *)v6[18];
      }
      else {
        size_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

uint64_t re::AssetHandle::asset<re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>>(re::AssetHandle *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      BOOL v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        size_t v7 = (char *)v6[18];
      }
      else {
        size_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void *re::ecs2::AnimationStopCommand::executeCommand(re::ecs2::ECSStateCommand *a1, uint64_t a2, uint64_t a3, int a4, re::BindPoint *a5)
{
  uint64_t result = re::ecs2::ECSStateCommand::commandEntity(a1, a5);
  if (result)
  {
    uint64_t result = (void *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      int v8 = result;
      uint64_t result = (void *)re::StateMachine::previousState(a2, a3);
      if (result)
      {
        re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)&v14, result + 6);
        if (v15)
        {
          uint64_t v9 = v16;
          uint64_t v10 = 8 * v15;
          do
          {
            if (*v9)
            {
              if (v11)
              {
                uint64_t v12 = v11;
                uint64_t v13 = v11[9];
                if (v13)
                {
                  re::ecs2::AnimationComponent::stop((uint64_t)v8, v13, 0.0);
                  re::ecs2::Component::markDirty(v8);
                  v12[9] = 0;
                }
              }
            }
            ++v9;
            v10 -= 8;
          }
          while (v10);
        }
        uint64_t result = (void *)v14;
        if (v14)
        {
          if (v16) {
            return (void *)(*(uint64_t (**)(void))(*(void *)v14 + 40))();
          }
        }
      }
    }
  }
  return result;
}

re *re::ecs2::AnimationStopAllCommand::executeCommand(re::ecs2::ECSStateCommand *a1, int a2, int a3, int a4, re::BindPoint *a5)
{
  uint64_t result = re::ecs2::ECSStateCommand::commandEntity(a1, a5);
  if (result)
  {
    uint64_t result = (re *)re::ecs2::EntityComponentCollection::get((re *)((char *)result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      BOOL v6 = result;
      re::ecs2::AnimationComponent::stopAll(result);
      return (re *)re::ecs2::Component::markDirty(v6);
    }
  }
  return result;
}

char *re::ecs2::AnimationSetPlaybackTimeCommand::setParameter(char *this, const re::StringID *a2, double a3)
{
  if (*(void *)a2 >> 1 == 0x1D797F455A966BA8)
  {
    uint64_t v4 = this;
    this = (char *)*((void *)a2 + 1);
    if (this == "PlaybackTime" || (this = (char *)strcmp(this, "PlaybackTime"), !this)) {
      *((double *)v4 + 10) = a3;
    }
  }
  return this;
}

double re::ecs2::AnimationSetPlaybackTimeCommand::getParameter(re::ecs2::AnimationSetPlaybackTimeCommand *this, const re::StringID *a2, double *a3)
{
  if (*(void *)a2 >> 1 == 0x1D797F455A966BA8)
  {
    uint64_t v5 = (char *)*((void *)a2 + 1);
    if (v5 == "PlaybackTime" || !strcmp(v5, "PlaybackTime"))
    {
      double result = *((double *)this + 10);
      *a3 = result;
    }
  }
  return result;
}

uint64_t *re::ecs2::AnimationSetPlaybackTimeCommand::executeCommand(uint64_t a1, uint64_t a2, uint64_t a3, int a4, re::BindPoint *a5)
{
  double result = (uint64_t *)re::ecs2::ECSStateCommand::commandEntity((re::ecs2::ECSStateCommand *)a1, a5);
  if (result)
  {
    double result = (uint64_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      uint64_t v9 = (re::ecs2::AnimationComponent *)result;
      double result = (uint64_t *)re::StateMachine::previousState(a2, a3);
      if (result)
      {
        re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)&v15, result + 6);
        if (v16)
        {
          uint64_t v10 = v17;
          uint64_t v11 = 8 * v16;
          do
          {
            if (*v10)
            {
              if (v12)
              {
                unint64_t v13 = v12[9];
                if (v13)
                {
                  re::ecs2::AnimationComponent::setAnimationPlaybackTime(v9, v13, *(double *)(a1 + 80));
                  re::ecs2::Component::markDirty(v9);
                }
              }
            }
            ++v10;
            v11 -= 8;
          }
          while (v11);
        }
        double result = (uint64_t *)v15;
        if (v15 && v17) {
          double result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v15 + 40))();
        }
      }
      unint64_t v14 = *(void *)(a1 + 72);
      if (v14)
      {
        re::ecs2::AnimationComponent::setAnimationPlaybackTime(v9, v14, *(double *)(a1 + 80));
        return re::ecs2::Component::markDirty(v9);
      }
    }
  }
  return result;
}

void re::ecs2::AnimationPlayCommand::~AnimationPlayCommand(re::ecs2::AnimationPlayCommand *this)
{
  *(void *)this = &unk_26E70B408;
  uint64_t v2 = (re::ecs2::AnimationPlayCommand *)((char *)this + 8);
  re::StringID::destroyString((re::ecs2::AnimationPlayCommand *)((char *)this + 80));
  *(void *)this = &unk_26E6FFB38;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::StringID::destroyString(v2);
}

{
  re::StringID *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E70B408;
  uint64_t v2 = (re::ecs2::AnimationPlayCommand *)((char *)this + 8);
  re::StringID::destroyString((re::ecs2::AnimationPlayCommand *)((char *)this + 80));
  *(void *)this = &unk_26E6FFB38;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::StringID::destroyString(v2);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AnimationPlayCommand::commandID(re::ecs2::AnimationPlayCommand *this)
{
  return 1;
}

uint64_t re::ecs2::AnimationPlayCommand::getRequiredParameterCount(re::ecs2::AnimationPlayCommand *this)
{
  return 2;
}

void *re::ecs2::AnimationPlayCommand::getParameterNames(re::ecs2::AnimationPlayCommand *this)
{
  return &re::ecs2::AnimationPlayCommand::m_parameterNames;
}

void *re::ecs2::AnimationPlayCommand::getParameterDescriptions(re::ecs2::AnimationPlayCommand *this)
{
  return &re::ecs2::AnimationPlayCommand::m_parameterDescriptions;
}

void *re::ecs2::AnimationPlayCommand::getParameterTypes(re::ecs2::AnimationPlayCommand *this)
{
  return &re::ecs2::AnimationPlayCommand::m_parameterTypes;
}

void re::ecs2::AnimationStopCommand::~AnimationStopCommand(re::ecs2::AnimationStopCommand *this)
{
  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopCommand *)((char *)this + 8));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopCommand *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AnimationStopCommand::commandID(re::ecs2::AnimationStopCommand *this)
{
  return 2;
}

void re::ecs2::AnimationStopAllCommand::~AnimationStopAllCommand(re::ecs2::AnimationStopAllCommand *this)
{
  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopAllCommand *)((char *)this + 8));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationStopAllCommand *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AnimationStopAllCommand::commandID(re::ecs2::AnimationStopAllCommand *this)
{
  return 3;
}

void re::ecs2::AnimationSetPlaybackTimeCommand::~AnimationSetPlaybackTimeCommand(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationSetPlaybackTimeCommand *)((char *)this + 8));
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26E6FFB38;
  uint64_t v2 = (char *)this + 32;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 32);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::ecs2::AnimationSetPlaybackTimeCommand *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AnimationSetPlaybackTimeCommand::commandID(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return 4;
}

uint64_t re::ecs2::AnimationSetPlaybackTimeCommand::getRequiredParameterCount(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return 1;
}

void *re::ecs2::AnimationSetPlaybackTimeCommand::getParameterNames(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return &re::ecs2::AnimationSetPlaybackTimeCommand::m_parameterNames;
}

void *re::ecs2::AnimationSetPlaybackTimeCommand::getParameterDescriptions(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return &re::ecs2::AnimationSetPlaybackTimeCommand::m_parameterDescriptions;
}

void *re::ecs2::AnimationSetPlaybackTimeCommand::getParameterTypes(re::ecs2::AnimationSetPlaybackTimeCommand *this)
{
  return &re::ecs2::AnimationSetPlaybackTimeCommand::m_parameterTypes;
}

void re::ecs2::VideoPlayerComponent::~VideoPlayerComponent(re::ecs2::VideoPlayerComponent *this)
{
  *(void *)this = &unk_26E70B6E8;
  re::DynamicString::deinit((re::ecs2::VideoPlayerComponent *)((char *)this + 120));
  re::AssetHandle::~AssetHandle((re::ecs2::VideoPlayerComponent *)((char *)this + 40));
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {

    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::VideoPlayerComponent::~VideoPlayerComponent(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::VideoPlayerComponent::setVideoAsset(re *a1, uint64_t *a2)
{
  if (*((void *)a1 + 6) != a2[1])
  {
    uint64_t v4 = *re::videoLogObjects(a1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)size_t v7 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "Resetting VideoAsset load request.", v7, 2u);
    }
    uint64_t v5 = *((void *)a1 + 4);
    if (v5)
    {

      *((void *)a1 + 4) = 0;
    }
  }
  return re::AssetHandle::operator=((uint64_t)a1 + 40, a2);
}

void re::ecs2::VideoPlayerComponent::preloadVideoAsset(re::ecs2::VideoPlayerComponent *this, re::AssetManager *a2)
{
  if (*((void *)this + 6))
  {
    uint64_t v4 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::ecs2::VideoPlayerComponent *)((char *)this + 40));
    if (v4)
    {
      uint64_t v6 = *(void *)(v4 + 112);
      uint64_t v5 = (dispatch_once_t *)(v4 + 112);
      v7[0] = MEMORY[0x263EF8330];
      v7[1] = 3221225472;
      v7[2] = ___ZN2re4ecs220VideoPlayerComponent17preloadVideoAssetEPNS_12AssetManagerE_block_invoke;
      v7[3] = &__block_descriptor_48_e5_v8__0l;
      unsigned char v7[4] = this;
      v7[5] = a2;
      if (v6 != -1) {
        dispatch_once(v5, v7);
      }
    }
  }
}

void *___ZN2re4ecs220VideoPlayerComponent17preloadVideoAssetEPNS_12AssetManagerE_block_invoke(uint64_t a1)
{
  v9[4] = *(re::AssetLoadRequest **)MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  re::AssetManager::makeLoadRequest(*(re::AssetManager **)(a1 + 40), v9);
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = v9[0];
  *(re::AssetLoadRequest **)(v1 + 32) = v9[0];
  v9[0] = (re::AssetLoadRequest *)v2;
  if (v2)
  {

    uint64_t v3 = *(re::AssetLoadRequest **)(v1 + 32);
  }
  v9[0] = (re::AssetLoadRequest *)&unk_26E70B790;
  v9[1] = (re::AssetLoadRequest *)&__block_literal_global_27;
  void v9[3] = (re::AssetLoadRequest *)v9;
  re::AssetLoadRequest::setShouldLoadAndWaitForResourceSharingClients(v3, 1, 1, (uint64_t)v6);
  if (!v6[0]) {

  }
  re::AssetLoadRequest::addAsset(*(re::AssetLoadRequest::Data ***)(v1 + 32), (const re::AssetHandle *)(v1 + 40));
  uint64_t v4 = *(void *)(v1 + 32);
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:nn180100]((uint64_t)v8, (uint64_t)v9);
  re::AssetLoadRequest::setCompletionHandler(v4, (uint64_t)v8, 0);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:nn180100](v9);
}

void ___ZN2re4ecs220VideoPlayerComponent17preloadVideoAssetEPNS_12AssetManagerE_block_invoke_2(re *a1, int a2)
{
  uint64_t v3 = *re::videoLogObjects(a1);
  if (a2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "[REAssetManagerPreloadVideoAsset] Completed preloading video asset load request", buf, 2u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl(&dword_233120000, v3, OS_LOG_TYPE_ERROR, "[REAssetManagerPreloadVideoAsset] Failed to create an asset load request", v4, 2u);
  }
}

void *re::ecs2::allocInfo_VideoPlayerComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91C58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91C58))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91C60, "VideoPlayerComponent");
    __cxa_guard_release(&qword_26AF91C58);
  }
  return &unk_26AF91C60;
}

void re::ecs2::initInfo_VideoPlayerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v80[0] = 0xE22DC2D7425E8282;
  v80[1] = "VideoPlayerComponent";
  re::StringID::destroyString((re::StringID *)v80);
  *((_OWORD *)this + 2) = v81;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_345, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_345);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF91CD8 = v7;
      int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_videoAsset";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF91CE0 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      unint64_t v14 = re::introspect_BOOL((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "m_enableReflections";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x4800000004;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF91CE8 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_BOOL((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_screenRoundedCornerEnabled";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x4900000008;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF91CF0 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_BOOL((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "m_screenAspectRatioAnimationEnabled";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x4A00000009;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF91CF8 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      unsigned int v26 = re::introspect_uint64_t((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "m_guid";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x400000000DLL;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF91D00 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_BOOL((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "m_screenDeferAspectRatioTransitionToApp";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x4B0000000FLL;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF91D08 = v31;
      uint64_t v32 = re::introspectionAllocator((re *)v31);
      uint64_t v33 = re::ecs2::introspect_HDRDumpInfo((re::IntrospectionBase **)1);
      uint64_t v34 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "m_dumpInfo";
      *(void *)(v34 + 16) = v33;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x5800000010;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF91D10 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      float v37 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = "m_desiredViewingMode";
      *(void *)(v38 + 16) = v37;
      *(void *)(v38 + 24) = 0;
      *(void *)(v38 + 32) = 0x9800000011;
      *(_DWORD *)(v38 + 40) = 0;
      *(void *)(v38 + 48) = 0;
      *(void *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_26AF91D18 = v38;
      uint64_t v39 = re::introspectionAllocator((re *)v38);
      uint64_t v41 = re::introspect_BOOL((re *)1, v40);
      uint64_t v42 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 72, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *(void *)(v42 + 8) = "m_lowLatencyEnabled";
      *(void *)(v42 + 16) = v41;
      *(void *)(v42 + 24) = 0;
      *(void *)(v42 + 32) = 0xA000000018;
      *(_DWORD *)(v42 + 40) = 0;
      *(void *)(v42 + 48) = 0;
      *(void *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_26AF91D20 = v42;
      uint64_t v43 = re::introspectionAllocator((re *)v42);
      uint64_t v45 = re::introspect_float((re *)1, v44);
      uint64_t v46 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 72, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *(void *)(v46 + 8) = "m_screenWrapTheta";
      *(void *)(v46 + 16) = v45;
      *(void *)(v46 + 24) = 0;
      *(void *)(v46 + 32) = 0xA400000019;
      *(_DWORD *)(v46 + 40) = 0;
      *(void *)(v46 + 48) = 0;
      *(void *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_26AF91D28 = v46;
      float v47 = re::introspectionAllocator((re *)v46);
      uint64_t v49 = re::introspect_BOOL((re *)1, v48);
      uint64_t v50 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 72, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *(void *)(v50 + 8) = "m_screenWrapPositive";
      *(void *)(v50 + 16) = v49;
      *(void *)(v50 + 24) = 0;
      *(void *)(v50 + 32) = 0xAC0000001ALL;
      *(_DWORD *)(v50 + 40) = 0;
      *(void *)(v50 + 48) = 0;
      *(void *)(v50 + 56) = 0;
      *(_DWORD *)(v50 + 64) = 0;
      qword_26AF91D30 = v50;
      uint64_t v51 = re::introspectionAllocator((re *)v50);
      uint64_t v53 = re::introspect_BOOL((re *)1, v52);
      uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 72, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *(void *)(v54 + 8) = "m_screenWrapAnimation";
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 24) = 0;
      *(void *)(v54 + 32) = 0xAD0000001BLL;
      *(_DWORD *)(v54 + 40) = 0;
      *(void *)(v54 + 48) = 0;
      *(void *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_26AF91D38 = v54;
      uint64_t v55 = re::introspectionAllocator((re *)v54);
      int v57 = re::introspect_BOOL((re *)1, v56);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + 8) = "m_usesCurvedUIStyleSystemTreatments";
      *(void *)(v58 + 16) = v57;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + 32) = 0xAE0000001CLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 48) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26AF91D40 = v58;
      uint64_t v59 = re::introspectionAllocator((re *)v58);
      v61 = re::introspect_float((re *)1, v60);
      uint64_t v62 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
      *(_DWORD *)uint64_t v62 = 1;
      *(void *)(v62 + 8) = "m_videoBlurTargetAspectRatio";
      *(void *)(v62 + 16) = v61;
      *(void *)(v62 + 24) = 0;
      *(void *)(v62 + 32) = 0x4C0000001FLL;
      *(_DWORD *)(v62 + 40) = 0;
      *(void *)(v62 + 48) = 0;
      *(void *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_26AF91D48 = v62;
      long long v63 = re::introspectionAllocator((re *)v62);
      uint64_t v65 = re::introspect_float((re *)1, v64);
      uint64_t v66 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 72, 8);
      *(_DWORD *)uint64_t v66 = 1;
      *(void *)(v66 + 8) = "m_videoBlurFadeTime";
      *(void *)(v66 + 16) = v65;
      *(void *)(v66 + 24) = 0;
      *(void *)(v66 + 32) = 0x5000000020;
      *(_DWORD *)(v66 + 40) = 0;
      *(void *)(v66 + 48) = 0;
      *(void *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_26AF91D50 = v66;
      uint64_t v67 = re::introspectionAllocator((re *)v66);
      long long v69 = re::introspect_int((re *)1, v68);
      uint64_t v70 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v67 + 32))(v67, 72, 8);
      *(_DWORD *)uint64_t v70 = 1;
      *(void *)(v70 + 8) = "m_specifiedVideoBlurState";
      *(void *)(v70 + 16) = v69;
      *(void *)(v70 + 24) = 0;
      *(void *)(v70 + 32) = 0x5400000021;
      *(_DWORD *)(v70 + 40) = 0;
      *(void *)(v70 + 48) = 0;
      *(void *)(v70 + 56) = 0;
      *(_DWORD *)(v70 + 64) = 0;
      qword_26AF91D58 = v70;
      long long v71 = re::introspectionAllocator((re *)v70);
      int v73 = re::introspect_BOOL((re *)1, v72);
      uint64_t v74 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v71 + 32))(v71, 72, 8);
      *(_DWORD *)uint64_t v74 = 1;
      *(void *)(v74 + 8) = "m_enableScreenWarpCollisionModel";
      *(void *)(v74 + 16) = v73;
      *(void *)(v74 + 24) = 0;
      *(void *)(v74 + 32) = 0xAF00000022;
      *(_DWORD *)(v74 + 40) = 0;
      *(void *)(v74 + 48) = 0;
      *(void *)(v74 + 56) = 0;
      *(_DWORD *)(v74 + 64) = 0;
      qword_26AF91D60 = v74;
      v75 = re::introspectionAllocator((re *)v74);
      int v77 = re::introspect_float((re *)1, v76);
      uint64_t v78 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v75 + 32))(v75, 72, 8);
      *(_DWORD *)uint64_t v78 = 1;
      *(void *)(v78 + 8) = "m_screenAspectRatio";
      *(void *)(v78 + 16) = v77;
      *(void *)(v78 + 24) = 0;
      *(void *)(v78 + 32) = 0xA800000024;
      *(_DWORD *)(v78 + 40) = 0;
      *(void *)(v78 + 48) = 0;
      *(void *)(v78 + 56) = 0;
      *(_DWORD *)(v78 + 64) = 0;
      qword_26AF91D68 = v78;
      __cxa_guard_release(&_MergedGlobals_345);
    }
  }
  *((void *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 19;
  *((void *)this + 8) = &qword_26AF91CD8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoPlayerComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoPlayerComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoPlayerComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoPlayerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v79 = v81;
}

uint64_t re::internal::defaultConstruct<re::ecs2::VideoPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::VideoPlayerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoPlayerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoPlayerComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoPlayerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoPlayerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoPlayerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoPlayerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoPlayerComponent>, this);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::~__func(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::__clone()
{
  return 0;
}

void *std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E70B790;
  double result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<void({block_pointer} {__strong})(BOOL),std::allocator<void({block_pointer} {__strong})(BOOL)>,void ()(BOOL)>::target_type()
{
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::VideoPlayerComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E70B6E8;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 73) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(void *)(v2 + 144) = 0;
  re::DynamicString::setCapacity((void *)(a1 + 120), 0);
  *(unsigned char *)(a1 + 152) = 1;
  *(_DWORD *)(a1 + 156) = 1055286886;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  return a1;
}

void re::ecs2::ThrottleManager::update(re::ecs2::ThrottleManager *this, float a2)
{
  float v3 = *((float *)this + 29);
  if (v3 <= 0.0)
  {
    *((_DWORD *)this + 30) = 0;
    *((void *)this + 16) = 0;
  }
  else
  {
    float v4 = *((float *)this + 30) - a2;
    *((float *)this + 30) = v4;
    if (v4 <= 0.0)
    {
      ++*((void *)this + 16);
      *((float *)this + 30) = v3 + fmodf(v4, v3);
    }
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v5 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*((void *)this + 3));
    if (v5)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7)
      {
        uint64_t v8 = *(void *)(v6 + 40);
        uint64_t v9 = v8 + 8 * v7;
        do
        {
          uint64_t v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)v8 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v10)
          {
            uint64_t v11 = *(void *)(v10 + 24);
            if (v11)
            {
              uint64_t v12 = *(void ***)(v10 + 40);
              uint64_t v13 = 8 * v11;
              do
              {
                unint64_t v14 = *v12++;
                re::ecs2::Component::markDirty(v14);
                v13 -= 8;
              }
              while (v13);
            }
          }
          v8 += 8;
        }
        while (v8 != v9);
      }
    }
    *((unsigned char *)this + 112) = 0;
  }
}

void re::ecs2::ThrottleManager::init(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = a2;
  uint64_t v3 = re::ServiceLocator::service<re::AssetService>(a2);
  (*(void (**)(long long *__return_ptr))(*(void *)v3 + 8))(&v6);
  long long v4 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 88) = v6;
  long long v6 = v4;
  uint64_t v5 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v7;
  uint64_t v7 = v5;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
}

uint64_t re::ecs2::ThrottleManager::setEngineThrottle(uint64_t result, void *a2)
{
  *(void *)(result + 80) = *a2;
  return result;
}

uint64_t re::ecs2::ThrottleManager::engineThrottle(re::ecs2::ThrottleManager *this)
{
  return *((void *)this + 10);
}

uint64_t re::ecs2::ThrottleManager::setThrottleForPeer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v23 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = a1 + 32;
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v9 = v8 ^ (v8 >> 31);
  if (v7)
  {
    unint64_t v10 = v9 % *(unsigned int *)(a1 + 56);
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 40) + 4 * v10);
    if (v11 != 0x7FFFFFFF)
    {
      uint64_t v12 = *(void *)(a1 + 48);
      if (*(void *)(v12 + 32 * v11 + 16) == a2)
      {
LABEL_6:
        *(void *)(v12 + 32 * v11 + 24) = *(void *)a3;
        goto LABEL_9;
      }
      while (1)
      {
        uint64_t v11 = *(_DWORD *)(v12 + 32 * v11 + 8) & 0x7FFFFFFF;
        if (v11 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v12 + 32 * v11 + 16) == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>(v6, v10, v9, &v23, (void *)a3);
LABEL_9:
  ++*(_DWORD *)(a1 + 72);
  uint64_t v13 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*(void *)(a1 + 24));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 104))(v13);
  uint64_t v15 = *(void *)(result + 24);
  if (v15)
  {
    uint64_t v16 = *(void *)(result + 40);
    uint64_t v17 = v16 + 8 * v15;
    while (1)
    {
      uint64_t result = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(void *)v16 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (result)
      {
        uint64_t v18 = *(void *)(result + 24);
        if (v18) {
          break;
        }
      }
LABEL_26:
      v16 += 8;
      if (v16 == v17) {
        return result;
      }
    }
    uint64_t v19 = *(void *)(result + 40);
    uint64_t v20 = 8 * v18;
    while (1)
    {
      uint64_t result = *(void *)(*(void *)v19 + 32);
      if (result) {
        uint64_t result = RESyncableGetOwnerPeerID();
      }
      if (result != a2) {
        goto LABEL_25;
      }
      uint64_t v21 = *(void *)(*(void *)v19 + 16);
      int v22 = *(_DWORD *)(v21 + 288);
      if (*(_DWORD *)a3 == 2) {
        break;
      }
      if ((v22 & 0x40) != 0) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (*(_DWORD *)(result + 28) != *(_DWORD *)a3 || *(_DWORD *)(result + 32) != *(_DWORD *)(a3 + 4))
      {
        *(void *)(result + 28) = *(void *)a3;
        uint64_t result = (uint64_t)re::ecs2::Component::markDirty((void *)result);
      }
LABEL_25:
      v19 += 8;
      v20 -= 8;
      if (!v20) {
        goto LABEL_26;
      }
    }
    if ((v22 & 0x40) != 0) {
      goto LABEL_22;
    }
LABEL_21:
    re::ecs2::Entity::setGhosted(*(re::ecs2::Entity **)(*(void *)v19 + 16), *(_DWORD *)a3 == 2);
    goto LABEL_22;
  }
  return result;
}

uint64_t re::ecs2::ThrottleManager::throttleForPeer(re::ecs2::ThrottleManager *this, unint64_t a2)
{
  unint64_t v13 = a2;
  uint64_t v5 = *((void *)this + 4);
  uint64_t v3 = (char *)this + 32;
  LODWORD(v4) = v5;
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v7 = v6 ^ (v6 >> 31);
  if (!v5) {
    goto LABEL_4;
  }
  uint64_t v8 = *(unsigned int *)(*((void *)this + 5) + 4 * (v7 % *((unsigned int *)this + 14)));
  if (v8 != 0x7FFFFFFF)
  {
    uint64_t v11 = *((void *)this + 6);
    if (*(void *)(v11 + 32 * v8 + 16) == a2) {
      return *(void *)(v11 + 32 * v8 + 24);
    }
    while (1)
    {
      uint64_t v8 = *(_DWORD *)(v11 + 32 * v8 + 8) & 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v11 + 32 * v8 + 16) == a2) {
        return *(void *)(v11 + 32 * v8 + 24);
      }
    }
  }
  unint64_t v4 = v7 % *((unsigned int *)this + 14);
  uint64_t v9 = *(unsigned int *)(*((void *)this + 5) + 4 * v4);
  if (v9 == 0x7FFFFFFF)
  {
LABEL_4:
    uint64_t result = 0;
    ++*((_DWORD *)this + 18);
    return result;
  }
  uint64_t v12 = *((void *)this + 6);
  if (*(void *)(v12 + 32 * v9 + 16) != a2)
  {
    while (1)
    {
      uint64_t v9 = *(_DWORD *)(v12 + 32 * v9 + 8) & 0x7FFFFFFF;
      if (v9 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v12 + 32 * v9 + 16) == a2) {
        return 0;
      }
    }
    goto LABEL_4;
  }
  return 0;
}

uint64_t re::ecs2::ThrottleManager::resetThrottleForPeer(uint64_t this, unint64_t a2)
{
  if (*(void *)(this + 32))
  {
    unint64_t v2 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v3 = (v2 ^ (v2 >> 31)) % *(unsigned int *)(this + 56);
    uint64_t v4 = *(void *)(this + 40);
    uint64_t v5 = *(unsigned int *)(v4 + 4 * v3);
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v6 = *(void *)(this + 48);
      uint64_t v7 = v6 + 32 * v5;
      if (*(void *)(v7 + 16) == a2)
      {
        *(_DWORD *)(v4 + 4 * v3) = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
LABEL_9:
        uint64_t v10 = *(void *)(this + 48);
        uint64_t v11 = v10 + 32 * v5;
        int v14 = *(_DWORD *)(v11 + 8);
        unint64_t v13 = (int *)(v11 + 8);
        int v12 = v14;
        if (v14 < 0)
        {
          *unint64_t v13 = v12 & 0x7FFFFFFF;
          uint64_t v10 = *(void *)(this + 48);
          int v12 = *(_DWORD *)(v10 + 32 * v5 + 8);
        }
        int v15 = *(_DWORD *)(this + 72);
        *(_DWORD *)(v10 + 32 * v5 + 8) = *(_DWORD *)(this + 68) | v12 & 0x80000000;
        --*(_DWORD *)(this + 60);
        *(_DWORD *)(this + 68) = v5;
        *(_DWORD *)(this + 72) = v15 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v8 = v5;
          uint64_t v5 = *(_DWORD *)(v6 + 32 * v5 + 8) & 0x7FFFFFFF;
          if (v5 == 0x7FFFFFFF) {
            break;
          }
          uint64_t v9 = v6 + 32 * v5;
          if (*(void *)(v9 + 16) == a2)
          {
            *(_DWORD *)(v6 + 32 * v8 + 8) = *(_DWORD *)(v6 + 32 * v8 + 8) & 0x80000000 | *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
            goto LABEL_9;
          }
        }
      }
    }
  }
  return this;
}

void re::ecs2::ThrottleManager::~ThrottleManager(re::ecs2::ThrottleManager *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::AssetHandle::~AssetHandle((re::ecs2::ThrottleManager *)((char *)this + 88));
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ThrottleManager::ghostMaterialHandle(re::ecs2::ThrottleManager *this)
{
  return (uint64_t)this + 88;
}

float re::ecs2::ThrottleManager::deformationThrottleInterval(re::ecs2::ThrottleManager *this)
{
  return *((float *)this + 29);
}

uint64_t re::ecs2::ThrottleManager::setDeformationThrottleInterval(uint64_t this, float a2)
{
  *(float *)(this + 116) = a2;
  return this;
}

uint64_t re::ecs2::ThrottleManager::deformationThrottleCounter(re::ecs2::ThrottleManager *this)
{
  return *((void *)this + 16);
}

uint64_t re::ecs2::ThrottleManager::setThrottleForceSkinnedNormals(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 113) != a2)
  {
    *(unsigned char *)(this + 113) = a2;
    *(unsigned char *)(this + 112) = 1;
  }
  return this;
}

uint64_t re::ecs2::ThrottleManager::isThrottledUsingForceSkinnedNormals(re::ecs2::ThrottleManager *this)
{
  return *((unsigned __int8 *)this + 113);
}

void *re::ecs2::allocInfo_AllowsCASeparatedProxyComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_346, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_346))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91D90, "AllowsCASeparatedProxyComponent");
    __cxa_guard_release(&_MergedGlobals_346);
  }
  return &unk_26AF91D90;
}

void re::ecs2::initInfo_AllowsCASeparatedProxyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xEC25AF0849649990;
  v13[1] = "AllowsCASeparatedProxyComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91D78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF91D78);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91D80 = v7;
      unsigned int v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_uint32_t((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "validId";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91D88 = v11;
      __cxa_guard_release(&qword_26AF91D78);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 2;
  *((void *)this + 8) = &qword_26AF91D80;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AllowsCASeparatedProxyComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AllowsCASeparatedProxyComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AllowsCASeparatedProxyComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::AllowsCASeparatedProxyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::AllowsCASeparatedProxyComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6F3358;
}

void *re::internal::defaultDestruct<re::ecs2::AllowsCASeparatedProxyComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AllowsCASeparatedProxyComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6F3358;
}

void *re::internal::defaultDestructV2<re::ecs2::AllowsCASeparatedProxyComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AllowsCASeparatedProxyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AllowsCASeparatedProxyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AllowsCASeparatedProxyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AllowsCASeparatedProxyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AllowsCASeparatedProxyComponent>, this);
}

BOOL re::ecs2::DeferredActivationComponentStateImpl::processDirtyComponents(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*((void *)a1 + 1))
  {
    uint64_t v34 = 0;
    unint64_t v31 = 0;
    unint64_t v32 = 0;
    int v33 = 0;
    re::DynamicArray<float *>::setCapacity(buf, 0);
    ++v33;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
    uint64_t v9 = v27;
    uint64_t v8 = v28;
    uint64_t v27 = a4;
    uint64_t v28 = v9;
    uint64_t v29 = v8;
    if (v9 != a5 || (unsigned __int16)v8 != 0xFFFFLL || (v8 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
        uint64_t v11 = *(void *)v10;
        uint64_t v12 = *(void *)(*(void *)v10 + 32);
        if (!v12)
        {
          (*(void (**)(re::ecs2::ComponentHelper **__return_ptr))(**((void **)a1 + 1) + 208))(&v26);
          uint64_t v13 = *(void *)(v11 + 32);
          long long v14 = v26;
          *(void *)(v11 + 32) = v26;
          unsigned int v26 = (re::ecs2::ComponentHelper *)v13;
          if (v13)
          {

            long long v14 = *(re::ecs2::ComponentHelper **)(v11 + 32);
          }
          re::ecs2::ComponentHelper::addToLoadRequest(v14, *(re::AssetLoadRequest **)(v11 + 16), (re::ecs2::Entity *)1);
          uint64_t v12 = *(void *)(v11 + 32);
        }
        int v15 = *(os_unfair_lock_s **)(v12 + 24);
        uint64_t v16 = v15 + 48;
        os_unfair_lock_lock(v15 + 48);
        LODWORD(v15) = v15[84];
        os_unfair_lock_unlock(v16);
        if (v15)
        {
          uint64_t v17 = *(re::ecs2::Entity **)(v11 + 16);
          unint64_t v18 = v32;
          if (v32 >= v31)
          {
            re::DynamicArray<float *>::growCapacity(buf, v32 + 1);
            unint64_t v18 = v32;
          }
          v34[v18] = v17;
          unint64_t v32 = v18 + 1;
          ++v33;
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
      }
      while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
    }
    if (v32)
    {
      uint64_t v19 = v34;
      uint64_t v20 = 8 * v32;
      do
      {
        uint64_t v21 = *v19;
        re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)*v19 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        re::ecs2::Entity::setSelfEnabled(v21, 1);
        int v22 = (re::ecs2::NetworkComponent *)*((void *)v21 + 25);
        if (v22) {
          re::ecs2::NetworkComponent::markEntityDirty(v22, (re::ecs2::NetworkComponent *)0xFF);
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
    BOOL v23 = *(_DWORD *)(a5 + 40) != 0;
    if (*(void *)buf && v34) {
      (*(void (**)(void))(**(void **)buf + 40))();
    }
  }
  else
  {
    uint64_t v24 = *re::ecsComponentsLogObjects(a1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_233120000, v24, OS_LOG_TYPE_ERROR, "AssetService not found.", buf, 2u);
    }
    return 0;
  }
  return v23;
}

uint64_t re::ecs2::DeferredActivationSystem::willAddSystemToECSService(re::ecs2::DeferredActivationSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  if (v3) {
    int v4 = (*(unsigned __int8 *)(v3 + 424) >> 4) & 1;
  }
  else {
    LOBYTE(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  }
  *((unsigned char *)this + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v4;
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::AssetService>(v5);
  *((void *)this + 15) = result;
  return result;
}

uint64_t re::ecs2::DeferredActivationSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 120) = 0;
  return this;
}

void re::ecs2::DeferredActivationSystem::willAddSceneToECSService(re::ecs2::DeferredActivationSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  int v4 = (char *)this + 128;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::DeferredActivationSystem *)((char *)this + 248);
  unint64_t v6 = *((void *)this + 32);
  int v7 = *((_DWORD *)this + 66);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 272);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 35);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 272);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 35);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 248, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::DeferredActivationSystem *)((char *)this + 184), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    int v15 = (char *)this + 296;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 21);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 17);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 16, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 17);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    uint64_t v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 144)) {
    uint64_t v19 = (char *)this + 152;
  }
  else {
    uint64_t v19 = (char *)*((void *)this + 20);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 21);
  ++*((_DWORD *)this + 44);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 21);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 21) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::DeferredActivationSystem *)((char *)this + 184), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 21);
  unint64_t v29 = *((void *)this + 36);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 36) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 36) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 264)) {
      int v33 = (char *)this + 272;
    }
    else {
      int v33 = (char *)*((void *)this + 35);
    }
    *(void *)&v33[8 * *((void *)this + 32) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 21);
  unint64_t v35 = *((void *)this + 42);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 42) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::DeferredActivationSystem *)((char *)this + 296), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 42) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 312)) {
      uint64_t v39 = (char *)this + 320;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 41);
    }
    *(void *)&v39[8 * *((void *)this + 38) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  int v15 = (char *)this + 296;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 360)) {
    return;
  }
  unint64_t v40 = *((void *)this + 38);
  int v41 = *((_DWORD *)this + 78);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 320);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 41);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    float v48 = (re::ecs2::System *)*((void *)this + 43);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 320);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 41);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::DeferredActivationSystem::willRemoveSceneFromECSService(re::ecs2::DeferredActivationSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 184);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 23, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 24) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 296, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 128, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      void *v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        int v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      void *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::DeferredActivationSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v25[0] = a3;
  v25[1] = a4;
  if (!*(unsigned char *)(a1 + 104)) {
    return;
  }
  uint64_t v5 = a1 + 128;
  uint64_t v26 = a2;
  unint64_t v6 = *(void *)(*(void *)(a1 + 192)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 184), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 296, v6);
  int v7 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5, v6);
  uint64_t v8 = *(void *)(*v7 + 224);
  unint64_t v9 = v7[3];
  unint64_t v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
  if (*(_DWORD *)(v10 + 40)) {
    int v11 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 24))(v8, v25, v7, v9, v10, 0);
  }
  else {
    int v11 = 0;
  }
  unint64_t v12 = v7[5];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    v11 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v25, v7, v12, v13, 0);
  }
  unint64_t v14 = v7[6];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
  if (!*(_DWORD *)(v15 + 40))
  {
    if (!v11) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if ((v11 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v8 + 40))(v8, v25, v7, v14, v15, 0)))LABEL_9:re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 296, v6); {
LABEL_10:
  }
  if (!*(unsigned char *)(a1 + 360)) {
    return;
  }
  unint64_t v16 = *(void *)(a1 + 304);
  int v17 = *(_DWORD *)(a1 + 312);
  if (v16 >= 0xB)
  {
    if (v17) {
      unint64_t v18 = (void *)(a1 + 320);
    }
    else {
      unint64_t v18 = *(void **)(a1 + 328);
    }
    uint64_t v20 = 8 * v16;
    while (!*v18)
    {
      ++v18;
      v20 -= 8;
      if (!v20) {
        return;
      }
    }
LABEL_28:
    long long v24 = *(re::ecs2::System **)(a1 + 344);
    if (!*((unsigned char *)v24 + 86)) {
      re::ecs2::System::queueToRun(v24, 0.0);
    }
    return;
  }
  if (v17)
  {
    uint64_t v19 = (uint64_t *)(a1 + 320);
    if (!v16) {
      return;
    }
  }
  else
  {
    uint64_t v19 = *(uint64_t **)(a1 + 328);
    if (!v16) {
      return;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 8 * v16;
  do
  {
    uint64_t v23 = *v19++;
    v21 |= v23;
    v22 -= 8;
  }
  while (v22);
  if (v21) {
    goto LABEL_28;
  }
}

void *re::ecs2::allocInfo_DeferredActivationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_347, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_347))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91E10, "DeferredActivationSystem");
    __cxa_guard_release(&_MergedGlobals_347);
  }
  return &unk_26AF91E10;
}

void re::ecs2::initInfo_DeferredActivationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xE1E98252F161208;
  v5[1] = "DeferredActivationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_DeferredActivationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::DeferredActivationSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::DeferredActivationSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DeferredActivationSystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::DeferredActivationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::DeferredActivationSystem *re::internal::defaultConstruct<re::ecs2::DeferredActivationSystem>(int a1, int a2, re::ecs2::DeferredActivationSystem *this)
{
  return re::ecs2::DeferredActivationSystem::DeferredActivationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::DeferredActivationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 16);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::DeferredActivationSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 16);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DeferredActivationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeferredActivationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DeferredActivationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DeferredActivationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DeferredActivationSystem>, this);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::dependsOnComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DeferredActivationComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::DeferredActivationSystem::~DeferredActivationSystem(re::ecs2::DeferredActivationSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::DeferredActivationSystem::typeInfo(re::ecs2::DeferredActivationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeferredActivationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DeferredActivationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DeferredActivationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DeferredActivationSystem>, 0);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E70B910;
    v10[1] = a1;
    _OWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    unint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *unint64_t v16 = &unk_26E70B968;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E70B9C0;
    v22[1] = a1;
    void v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    int v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    uint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    void *v28 = &unk_26E70BA18;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    void *v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        long long v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        void *v37 = &unk_26E70B910;
        v37[1] = a1;
        v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        long long v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v41 = v38;
        v41[1] = v40;
        uint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E70B968;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v47 = v44;
        v47[1] = v46;
        float v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        void *v49 = &unk_26E70B9C0;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        void *v55 = &unk_26E70BA18;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    unint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    unint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70B910;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70B910;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70B968;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70B968;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70B9C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70B9C0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BA18;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BA18;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DeferredActivationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t checkFromNetworkComponent(re::ecs2::Entity *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v6 = *((void *)a1 + 25);
  if (v6)
  {
    uint64_t OwnerPeerID = *(void *)(v6 + 32);
    if (OwnerPeerID) {
      uint64_t OwnerPeerID = RESyncableGetOwnerPeerID();
    }
    if (OwnerPeerID == a2) {
      return 1;
    }
  }
  if (a3 > 4) {
    return 0;
  }
  uint64_t v9 = *((void *)a1 + 41);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (re::ecs2::Entity **)*((void *)a1 + 43);
  int v11 = a3 + 1;
  uint64_t v12 = 8 * v9 - 8;
  do
  {
    uint64_t v13 = *v10++;
    uint64_t result = checkFromNetworkComponent(v13, a2, v11);
    if (result) {
      break;
    }
    uint64_t v14 = v12;
    v12 -= 8;
  }
  while (v14);
  return result;
}

uint64_t enableCaptureDaemonEntities(void)
{
  v0 = (unsigned __int8 *)&unk_26879F000;
  {
    v0 = (unsigned char *)&unk_26879F000;
    if (v2)
    {
      enableCaptureDaemonEntities(void)::enable = enableCaptureDaemonEntities(void)::$_0::operator()(v2, v3);
      v0 = (unsigned char *)&unk_26879F000;
    }
  }
  return v0[2448];
}

BOOL enableCaptureDaemonEntities(void)::$_0::operator()(uint64_t a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"trace.captureDaemonEntities", a2, (char *)v6);
  if (LOBYTE(v6[0])) {
    unsigned __int8 v3 = BYTE1(v6[0]);
  }
  else {
    unsigned __int8 v3 = 1;
  }
  uint64_t v4 = *re::ecsComponentsLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "[StateRecorderSystem] CaptureDaemonEntities enabled: %d", (uint8_t *)v6, 8u);
  }
  return v3 != 0;
}

uint64_t isAppTLE(uint64_t result, const re::DynamicString *a2, unint64_t a3)
{
  if (result)
  {
    uint64_t v5 = (const char **)result;
    uint64_t result = 0;
    unint64_t v6 = *((void *)a2 + 1);
    unint64_t v7 = (v6 & 1) != 0 ? v6 >> 1 : v6 >> 1;
    if (a3 && v7)
    {
      size_t v8 = strlen(v5[35]);
      v15[0] = v5[35];
      v15[1] = v8;
      if (!enableCaptureDaemonEntities()) {
        return checkFromNetworkComponent((re::ecs2::Entity *)v5, a3, 0);
      }
      unint64_t v9 = *((void *)a2 + 1);
      uint64_t v10 = (char *)*((void *)a2 + 2);
      if ((v9 & 1) == 0) {
        uint64_t v10 = (char *)a2 + 9;
      }
      unint64_t v11 = v9 >> 1;
      unint64_t v12 = v9 >> 1;
      if (*((void *)a2 + 1)) {
        unint64_t v12 = v11;
      }
      v13[0] = v10;
      v13[1] = v12;
      re::StringSlice::findFirstOf(v15, (uint64_t)v13, 0, (uint64_t)v14);
      if (v14[0]) {
        return 1;
      }
      else {
        return checkFromNetworkComponent((re::ecs2::Entity *)v5, a3, 0);
      }
    }
  }
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::isAppTLE(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 23) + 104))(*((void *)this + 23));
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (unint64_t *)v3;
  unint64_t v6 = (unint64_t *)(v3 + 40 * v4);
  do
  {
    unint64_t v7 = (const re::DynamicString *)(v5 + 1);
    unint64_t v8 = *v5;
    v5 += 5;
    uint64_t result = isAppTLE((uint64_t)a2, v7, v8);
  }
  while ((result & 1) == 0 && v5 != v6);
  return result;
}

uint64_t re::ecs2::StateRecorderSystem::shouldEntityBeInAppEntitySet(re::ecs2::StateRecorderSystem *this, re::ecs2::Entity *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *((void *)a2 + 3);
  if (v4)
  {
    if ((*(unsigned char *)(v4 + 288) & 0x80) != 0) {
      goto LABEL_11;
    }
    uint64_t v6 = *(void *)(v4 + 296);
    if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 224, &v6))
    {
      return 1;
    }
    uint64_t v4 = *((void *)v2 + 3);
    if (v4)
    {
LABEL_11:
      do
      {
        if ((*(unsigned char *)(v4 + 288) & 0x80) != 0) {
          break;
        }
        uint64_t v2 = (re::ecs2::Entity *)v4;
        uint64_t v4 = *(void *)(v4 + 24);
      }
      while (v4);
    }
  }
  return re::ecs2::StateRecorderSystem::isAppTLE(this, v2);
}

uint64_t re::ecs2::StateRecorderSystem::processDeferredEntries(re::ecs2::StateRecorderSystem *this)
{
  uint64_t v2 = *((void *)this + 36);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 38);
    uint64_t v4 = v2 << 6;
    do
    {
      if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 224, (uint64_t *)v3))
      {
        int v5 = *(unsigned __int8 *)(v3 + 16);
        if (v5 == 3)
        {
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 224, (uint64_t *)v3);
        }
        else if (v5 == 1)
        {
          re::DynamicArray<re::TraceEntry>::add((_anonymous_namespace_ *)(*((void *)this + 21) + 16), (long long *)v3);
        }
      }
      v3 += 64;
      v4 -= 64;
    }
    while (v4);
  }
  return re::DynamicArray<re::TraceEntry>::clear((uint64_t)this + 272);
}

void re::ecs2::introspect_RayCastType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91E90, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF91E90);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      uint64_t v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "None";
      qword_26AF91EB0 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      unint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)unint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Once";
      qword_26AF91EB8 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Continuous";
      qword_26AF91EC0 = v30;
      __cxa_guard_release(&qword_26AF91E90);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91E98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91E98))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF91EE8, "RayCastType", 4, 4, 1, 1);
    qword_26AF91EE8 = (uint64_t)&unk_26E715E00;
    qword_26AF91F28 = (uint64_t)&re::ecs2::introspect_RayCastType(BOOL)::enumTable;
    dword_26AF91EF8 = 9;
    __cxa_guard_release(&qword_26AF91E98);
  }
  if ((_MergedGlobals_348 & 1) == 0)
  {
    _MergedGlobals_348 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF91EE8, a2);
    uint64_t v32 = 0x1F085B2B6C18286;
    uint64_t v33 = "RayCastType";
    v36[0] = 0x607DD0F01DCLL;
    v36[1] = "uint32_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF91F28;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            unint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              uint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    unint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF91F08 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "RayCastType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_RayCastComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91EA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91EA0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF91F30, "RayCastComponent");
    __cxa_guard_release(&qword_26AF91EA0);
  }
  return &unk_26AF91F30;
}

void re::ecs2::initInfo_RayCastComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0xD990FAE43A9F9128;
  v18[1] = "RayCastComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91EA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF91EA8);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91EC8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_RayF((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "ray";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
      *(void *)(v10 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91ED0 = v10;
      char v11 = (re::ecs2 *)re::introspectionAllocator((re *)v10);
      re::ecs2::introspect_RayCastType(v11, v12);
      uint64_t v13 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v13 = 1;
      *(void *)(v13 + 8) = "cast";
      *(void *)(v13 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF91EE8;
      *(void *)(v13 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v13 + 32) = 0x5000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91ED8 = v13;
      uint64_t v14 = re::introspectionAllocator((re *)v13);
      uint64_t v15 = re::introspect_CollisionCastConfiguration((re::IntrospectionBase **)1);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "castConfiguration";
      *(void *)(v16 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v15;
      *(void *)(v16 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v16 + 32) = 0x6000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91EE0 = v16;
      __cxa_guard_release(&qword_26AF91EA8);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 4;
  *((void *)this + 8) = &qword_26AF91EC8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayCastComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RayCastComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayCastComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::RayCastComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

double re::internal::defaultConstruct<re::ecs2::RayCastComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6EFB10;
  double result = 0.0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 80) = 2;
  *(_DWORD *)(v3 + 96) = 0;
  *(void *)(v3 + 100) = -1;
  *(void *)(v3 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(v3 + 108) = 0;
  *(_DWORD *)(v3 + 12re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RayCastComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::RayCastComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6EFB10;
  double result = 0.0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v1 + 80) = 2;
  *(_DWORD *)(v1 + 96) = 0;
  *(void *)(v1 + 100) = -1;
  *(void *)(v1 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(v1 + 108) = 0;
  *(_DWORD *)(v1 + 12re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RayCastComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RayCastComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastComponent>, this);
}

void re::ecs2::deepCopyMaterialParameterBlock(re::MaterialParameterBlock *a1, re::MaterialParameterBlock *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v165 = *MEMORY[0x263EF8340];
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 16) + 56) + 32))(*(void *)(*(void *)(a4 + 16) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v8);
  re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(a2, &v157);
  uint64_t v10 = v157;
  if (!v157) {
    return;
  }
  v154 = (char *)v157 + 200;
  unint64_t v11 = *((void *)v157 + 27);
  if (v11 < 0x10) {
    goto LABEL_96;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *((void *)v157 + 25);
  unint64_t v14 = v11 >> 4;
  do
  {
    unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
    uint64_t v155 = (unsigned __int16)~v15;
    if (v15 != 0xFFFF)
    {
      uint64_t v16 = __clz(__rbit64((unsigned __int16)~v15)) + v12;
      uint64_t v156 = v16;
      if (v16 == -1) {
        break;
      }
      while (1)
      {
        long long v17 = (uint64_t *)(*((void *)v154 + 1) + 16 * v16);
        uint64_t v150 = *v17;
        re::MaterialParameterBlock::handle(a1, &v150, (uint64_t)v151);
        uint64_t v150 = 0;
        uint64_t v146 = *v17;
        re::MaterialParameterBlock::handle(a2, &v146, (uint64_t)&v147);
        uint64_t v146 = 0;
        int v18 = v148 & 7;
        if ((v148 & 7) == 0) {
          goto LABEL_94;
        }
        int v19 = v18 - 1;
        if (v18 != 1) {
          goto LABEL_57;
        }
        if (v149 <= 0x1Fu)
        {
          switch(v149)
          {
            case 1u:
              if ((v152 & 7) == 1 && v153 == 1) {
                goto LABEL_57;
              }
              Constant = (_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v21 = *v17;
              LODWORD(v119[0]) = *Constant;
              *(void *)buf = v21;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 4uLL, v119, 1, (uint64_t)v137);
              v137[0] = 0;
              break;
            case 3u:
              if ((v152 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v151, 3)) {
                goto LABEL_57;
              }
              uint64_t v25 = (_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v26 = *v17;
              LODWORD(v119[0]) = *v25;
              *(void *)buf = v26;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 4uLL, v119, 3, (uint64_t)v133);
              v133[0] = 0;
              break;
            case 4u:
              if ((v152 & 7) == 1 && v153 == 4) {
                goto LABEL_57;
              }
              uint64_t v29 = (void *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v30 = (os_unfair_lock_s *)*v17;
              *(void *)buf = *v29;
              v119[0] = v30;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 8uLL, buf, 4, (uint64_t)v134);
              v134[0] = 0;
              break;
            case 5u:
              if ((v152 & 7) == 1 && v153 == 5) {
                goto LABEL_57;
              }
              uint64_t v31 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v32 = (os_unfair_lock_s *)*v17;
              *(_OWORD *)buf = *v31;
              v119[0] = v32;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 0x10uLL, buf, 5, (uint64_t)v135);
              v135[0] = 0;
              break;
            case 6u:
              if ((v152 & 7) == 1 && v153 == 6) {
                goto LABEL_57;
              }
              uint64_t v33 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              StringID v34 = (os_unfair_lock_s *)*v17;
              *(_OWORD *)buf = *v33;
              v119[0] = v34;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 0x10uLL, buf, 6, (uint64_t)v136);
              v136[0] = 0;
              break;
            case 9u:
              if ((v152 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v151, 9)) {
                goto LABEL_57;
              }
              uint64_t v35 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v36 = (os_unfair_lock_s *)*v17;
              *(_OWORD *)buf = *v35;
              v119[0] = v36;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 0x10uLL, buf, 9, (uint64_t)v131);
              v131[0] = 0;
              break;
            case 0xAu:
              if ((v152 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v151, 10)) {
                goto LABEL_57;
              }
              uint64_t v37 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v38 = (os_unfair_lock_s *)*v17;
              *(_OWORD *)buf = *v37;
              v119[0] = v38;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 0x10uLL, buf, 10, (uint64_t)v132);
              v132[0] = 0;
              break;
            default:
              goto LABEL_57;
          }
          goto LABEL_94;
        }
        if (v149 > 0x2Fu)
        {
          if (v149 == 48) {
            goto LABEL_26;
          }
          if (v149 == 49)
          {
            if ((v152 & 7) == 1 && v153 == 49)
            {
LABEL_57:
              if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v147, 8)
                || (v152 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v151, 8))
              {
                if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v147, 7)
                  || (v152 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v151, 7))
                {
                  if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v147, 2)
                    || (v152 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v151, 2))
                  {
                    if (!re::MaterialParameterHandle::isParameterType((uint64_t)&v147, 21)
                      || (v152 & 7) != 0 && re::MaterialParameterHandle::isParameterType((uint64_t)v151, 21))
                    {
                      BOOL isParameterType = re::MaterialParameterHandle::isParameterType((uint64_t)&v147, 20);
                      if (!isParameterType
                        || (v152 & 7) != 0
                        && (BOOL isParameterType = re::MaterialParameterHandle::isParameterType((uint64_t)v151, 20)))
                      {
                        uint64_t v45 = *re::graphicsLogObjects((re *)isParameterType);
                        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                        {
                          if (v147 == 0x7FFFFFFFFFFFFFFFLL)
                          {
                            uint64_t v46 = 0;
                          }
                          else if (v147)
                          {
                            snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v147);
                            uint64_t v46 = re::WeakStringID::debugStr(void)const::msg;
                          }
                          else
                          {
                            uint64_t v46 = "";
                          }
                          int v60 = 64;
                          switch(v19)
                          {
                            case 0:
                              int v60 = v149;
                              break;
                            case 1:
                              break;
                            case 2:
                              int v60 = 128;
                              break;
                            case 3:
                              int v60 = 192;
                              break;
                            default:
                              int v60 = 0;
                              break;
                          }
                          *(_DWORD *)buf = 136315394;
                          *(void *)&uint8_t buf[4] = v46;
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v60;
                          _os_log_error_impl(&dword_233120000, v45, OS_LOG_TYPE_ERROR, "deepCopyMaterialParameterBlock - parameter handle with name %s, parameterType %hhu not supported.", buf, 0x12u);
                        }
                      }
                      else
                      {
                        uint64_t v53 = re::MaterialParameterBlock::colorGamut3FValue((uint64_t)a2, (uint64_t)&v147);
                        uint64_t v122 = *v17;
                        re::MaterialParameterBlock::setColorGamut3F(a1, &v122, v53, v54, (uint64_t)v123);
                        uint64_t v122 = 0;
                        v123[0] = 0;
                      }
                    }
                    else
                    {
                      re::MaterialParameterBlock::colorGamut4FValue((uint64_t)a2, (uint64_t)&v147, (uint64_t)buf);
                      uint64_t v126 = *v17;
                      long long v124 = *(_OWORD *)buf;
                      int v125 = *(_DWORD *)&buf[16];
                      re::MaterialParameterBlock::setColorGamut4F(a1, &v126, (uint64_t)&v124, (uint64_t)v127);
                      uint64_t v126 = 0;
                      v127[0] = 0;
                    }
                  }
                  else
                  {
                    uint64_t v51 = (unsigned char *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
                    uint64_t v52 = *v17;
                    LOBYTE(v119[0]) = *v51;
                    *(void *)buf = v52;
                    re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 1uLL, v119, 2, (uint64_t)v128);
                    v128[0] = 0;
                  }
                }
                else
                {
                  long long v49 = (_DWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
                  uint64_t v50 = *v17;
                  LODWORD(v119[0]) = *v49;
                  *(void *)buf = v50;
                  re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 4uLL, v119, 7, (uint64_t)v129);
                  v129[0] = 0;
                }
              }
              else
              {
                uint64_t v47 = (void *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
                float v48 = (os_unfair_lock_s *)*v17;
                *(void *)buf = *v47;
                v119[0] = v48;
                re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 8uLL, buf, 8, (uint64_t)v130);
                v130[0] = 0;
              }
              goto LABEL_94;
            }
            uint64_t v39 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
            long long v40 = v39[1];
            v142[0] = *v39;
            v142[1] = v40;
            v142[2] = v39[2];
            *(void *)buf = *v17;
            re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 0x30uLL, v142, 49, (uint64_t)v143);
            v143[0] = 0;
          }
          else
          {
            if (v149 != 50 || (v152 & 7) == 1 && v153 == 50) {
              goto LABEL_57;
            }
            uint64_t v22 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
            long long v23 = v22[1];
            v144[0] = *v22;
            v144[1] = v23;
            long long v24 = v22[3];
            v144[2] = v22[2];
            v144[3] = v24;
            *(void *)buf = *v17;
            re::MaterialParameterBlock::setConstant(a1, (uint64_t *)buf, 0x40uLL, v144, 50, (uint64_t)v145);
            v145[0] = 0;
          }
        }
        else
        {
          switch(v149)
          {
            case ' ':
              if ((v152 & 7) == 1 && v153 == 32) {
                goto LABEL_57;
              }
              long long v55 = (void *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v56 = (os_unfair_lock_s *)*v17;
              *(void *)buf = *v55;
              v119[0] = v56;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 8uLL, buf, 32, (uint64_t)v138);
              v138[0] = 0;
              break;
            case '!':
              if ((v152 & 7) == 1 && v153 == 33) {
                goto LABEL_57;
              }
              int v41 = (void *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
              uint64_t v42 = v41[1];
              uint64_t v43 = (os_unfair_lock_s *)*v17;
              *(void *)buf = *v41;
              *(void *)&uint8_t buf[8] = v42;
              v119[0] = v43;
              re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 0x10uLL, buf, 33, (uint64_t)v139);
              v139[0] = 0;
              break;
            case '""':
LABEL_26:
              if ((v152 & 7) == 1 && (v153 == 34 || v153 == 48))
              {
                if ((v152 & 7) == 1 && (v153 == 34 || v153 == 48)) {
                  goto LABEL_57;
                }
                uint64_t v57 = (void *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
                uint64_t v58 = v57[1];
                uint64_t v59 = (os_unfair_lock_s *)*v17;
                *(void *)buf = *v57;
                *(void *)&uint8_t buf[8] = v58;
                v119[0] = v59;
                re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 0x10uLL, buf, 34, (uint64_t)v140);
                v140[0] = 0;
              }
              else
              {
                uint64_t v27 = (_OWORD *)re::ShaderGraphMaterial::getConstant((uint64_t)a2, (uint64_t)&v147);
                unint64_t v28 = (os_unfair_lock_s *)*v17;
                *(_OWORD *)buf = *v27;
                v119[0] = v28;
                re::MaterialParameterBlock::setConstant(a1, (uint64_t *)v119, 0x10uLL, buf, 48, (uint64_t)v141);
                v141[0] = 0;
              }
              break;
            default:
              goto LABEL_57;
          }
        }
LABEL_94:
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v154);
        uint64_t v16 = v156;
        if (v156 == -1)
        {
          uint64_t v10 = v157;
          goto LABEL_96;
        }
      }
    }
    v12 += 16;
    --v14;
  }
  while (v14);
LABEL_96:
  v154 = (char *)v10 + 688;
  unint64_t v61 = *((void *)v10 + 88);
  if (v61 >= 0x10)
  {
    uint64_t v62 = 0;
    uint64_t v63 = *((void *)v10 + 86);
    unint64_t v64 = v61 >> 4;
    while (1)
    {
      unsigned __int16 v65 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v63 + v62)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      uint64_t v155 = (unsigned __int16)~v65;
      if (v65 != 0xFFFF) {
        break;
      }
      v62 += 16;
      if (!--v64) {
        goto LABEL_144;
      }
    }
    uint64_t v66 = __clz(__rbit64((unsigned __int16)~v65)) + v62;
    uint64_t v156 = v66;
    if (v66 != -1)
    {
      uint64_t v103 = v9;
      do
      {
        uint64_t v67 = (uint64_t *)(*((void *)v154 + 1) + 16 * v66);
        uint64_t v121 = *v67;
        re::MaterialParameterBlock::handle(a1, &v121, (uint64_t)v151);
        uint64_t v121 = 0;
        int v68 = v152 & 7;
        if ((v152 & 7) == 0 || v68 != 2 && (v68 != 1 || v153 != 64))
        {
          uint64_t v120 = *v67;
          re::MaterialParameterBlock::handle(a2, &v120, (uint64_t)&v147);
          uint64_t v120 = 0;
          int v69 = v148 & 7;
          if ((v148 & 7) != 0 && (v69 == 2 || v69 == 1 && v149 == 64))
          {
            re::MaterialParameterBlock::textureHandleValue((uint64_t)a2, (uint64_t)&v147, (re::TextureHandle *)v119);
            uint64_t v117 = *v67;
            re::MaterialParameterBlock::setTextureHandle(a1, &v117, (re::TextureHandle *)v119, (uint64_t)v118);
            uint64_t v117 = 0;
            v118[0] = 0;
            if (re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains(a3, v67))
            {
              uint64_t v115 = *v67;
              re::MaterialParameterBlock::setTextureHandle(a1, &v115, (re::TextureHandle *)v119, (uint64_t)v116);
              uint64_t v115 = 0;
              v116[0] = 0;
            }
            else
            {
              uint64_t v70 = a3;
              uint64_t v71 = v4;
              uint64_t v72 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v4 + 16) + 56) + 32))(*(void *)(*(void *)(v4 + 16) + 56));
              uint64_t v73 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v72);
              long long v104 = *(os_unfair_lock_s **)(v73 + 64);
              re::TextureHandle::metalTexture(v119, &v163);
              id v162 = *(id *)(v73 + 184);
              uint64_t v74 = v163;
              unint64_t v75 = (unint64_t)objc_msgSend(v163, sel_usage) | 4;
              unint64_t v161 = v75;
              id v76 = objc_msgSend(v74, sel_pixelFormat);
              uint64_t v159 = 0;
              id v160 = v76;
              uint64_t TextureCompressionType = re::mtl::getTextureCompressionType(&v162, &v159, &v160, &v161);
              id v78 = objc_msgSend(objc_msgSend(MEMORY[0x263F12A50], sel_alloc), sel_init);
              if (((unint64_t)objc_msgSend(v74, sel_sampleCount) & 0xFFFFFFFE) != 0) {
                uint64_t v79 = 4;
              }
              else {
                uint64_t v79 = 2;
              }
              objc_msgSend(v78, sel_setTextureType_, v79);
              objc_msgSend(v78, sel_setWidth_, objc_msgSend(v74, sel_width));
              objc_msgSend(v78, sel_setHeight_, objc_msgSend(v74, sel_height));
              objc_msgSend(v78, sel_setMipmapLevelCount_, 1);
              objc_msgSend(v78, sel_setUsage_, v75);
              objc_msgSend(v78, sel_setStorageMode_, 0);
              objc_msgSend(v78, sel_setPixelFormat_, v76);
              if ((objc_msgSend(v78, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
                || objc_msgSend(v78, sel_methodSignatureForSelector_, sel_setCompressionType_))
              {
                objc_msgSend(v78, sel_setCompressionType_, TextureCompressionType);
              }
              objc_msgSend(v78, sel_setSampleCount_, objc_msgSend(v74, sel_sampleCount));
              objc_msgSend(v78, sel_setProtectionOptions_, objc_msgSend(v74, sel_protectionOptions));
              re::mtl::Device::makeTexture(v78, &v162, &v158);
              *(void *)buf = 0;
              *(void *)&uint8_t buf[8] = 0;
              NS::SharedPtr<MTL::Texture>::operator=((void **)buf, &v163);
              v80 = NS::SharedPtr<MTL::Texture>::operator=((void **)&buf[8], &v158);
              uint64_t v4 = v71;
              uint64_t v81 = *(void *)(v71 + 24);
              unint64_t v82 = *(void *)(v81 + 8);
              unint64_t v83 = *(void *)(v81 + 16);
              a3 = v70;
              if (v83 >= v82)
              {
                unint64_t v84 = v83 + 1;
                if (v82 < v83 + 1)
                {
                  if (*(void *)v81)
                  {
                    uint64_t v85 = 2 * v82;
                    BOOL v86 = v82 == 0;
                    unint64_t v87 = 8;
                    if (!v86) {
                      unint64_t v87 = v85;
                    }
                    if (v87 <= v84) {
                      unint64_t v88 = v84;
                    }
                    else {
                      unint64_t v88 = v87;
                    }
                    re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity(*(void **)(v71 + 24), v88);
                  }
                  else
                  {
                    re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity((void *)v81, v84);
                    ++*(_DWORD *)(v81 + 24);
                  }
                }
                unint64_t v83 = *(void *)(v81 + 16);
              }
              v89 = (void *)(*(void *)(v81 + 32) + 16 * v83);
              void *v89 = *(id *)buf;
              v89[1] = *(id *)&buf[8];
              ++*(void *)(v81 + 16);
              ++*(_DWORD *)(v81 + 24);
              re::TextureManager::registerTexture(v104, &v158, v114);
              if (*(void *)&buf[8])
              {

                *(void *)&uint8_t buf[8] = 0;
              }
              if (*(void *)buf) {

              }
              if (v158) {
              if (v78)
              }

              if (v163) {
              uint64_t v112 = *v67;
              }
              re::MaterialParameterBlock::setTextureHandle(a1, &v112, (re::TextureHandle *)v114, (uint64_t)v113);
              uint64_t v112 = 0;
              v113[0] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)v114);
            }
            re::TextureHandle::invalidate((re::TextureHandle *)v119);
          }
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v154);
        uint64_t v66 = v156;
      }
      while (v156 != -1);
      uint64_t v10 = v157;
      uint64_t v9 = v103;
    }
  }
LABEL_144:
  v154 = (char *)v10 + 264;
  unint64_t v90 = *((void *)v10 + 35);
  if (v90 >= 0x10)
  {
    uint64_t v91 = 0;
    uint64_t v92 = *((void *)v10 + 33);
    unint64_t v93 = v90 >> 4;
    while (1)
    {
      unsigned __int16 v94 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v92 + v91)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      uint64_t v155 = (unsigned __int16)~v94;
      if (v94 != 0xFFFF) {
        break;
      }
      v91 += 16;
      if (!--v93) {
        goto LABEL_166;
      }
    }
    uint64_t v95 = __clz(__rbit64((unsigned __int16)~v94)) + v91;
    uint64_t v156 = v95;
    if (v95 != -1)
    {
      do
      {
        v96 = (uint64_t *)(*((void *)v154 + 1) + 16 * v95);
        uint64_t v111 = *v96;
        re::MaterialParameterBlock::handle(a1, &v111, (uint64_t)v151);
        uint64_t v111 = 0;
        int v97 = v152 & 7;
        if ((v152 & 7) == 0 || v97 != 3 && (v97 != 1 || v153 != 128))
        {
          uint64_t v110 = *v96;
          re::MaterialParameterBlock::handle(a2, &v110, (uint64_t)&v147);
          uint64_t v110 = 0;
          int v98 = v148 & 7;
          if ((v148 & 7) != 0 && (v98 == 3 || v98 == 1 && v149 == 128))
          {
            id v99 = *(id *)re::MaterialParameterBlock::bufferValue((uint64_t)a2, (uint64_t)&v147);
            id v100 = *(id *)(v9 + 184);
            id v101 = objc_msgSend(v100, sel_newBufferWithLength_options_, objc_msgSend(v99, sel_length), 0);
            memcpy(objc_msgSend(v101, sel_contents), objc_msgSend(v99, sel_contents), (size_t)objc_msgSend(v99, sel_length));
            objc_msgSend(v99, sel_length);
            uint64_t v108 = *v96;
            id v102 = v101;
            id v105 = v102;
            int v106 = 0;
            unsigned int v107 = objc_msgSend(v101, sel_length);
            re::MaterialParameterBlock::setBuffer(a1, &v108, (uint64_t)&v105, (uint64_t)v109);
            v109[0] = 0;
            if (v102)
            {

              id v105 = 0;
            }
            uint64_t v108 = 0;
            if (v101) {

            }
            if (v99) {
          }
            }
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v154);
        uint64_t v95 = v156;
      }
      while (v156 != -1);
      uint64_t v10 = v157;
    }
  }
LABEL_166:
  if (v10) {
}
  }

unint64_t re::ecs2::ensureParametersBlockIndexExists(re::ecs2 *this, unint64_t a2, uint64_t a3, re::RenderManager *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v11 = a3;
  unint64_t v6 = *((void *)this + 11);
  if (v6 <= a2)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)this + 72, a2 + 1);
    unint64_t v6 = *((void *)this + 11);
  }
  if (v6 <= a2)
  {
    uint64_t v12 = 0;
    long long v25 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    unint64_t v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 789;
    __int16 v17 = 2048;
    unint64_t v18 = a2;
    __int16 v19 = 2048;
    unint64_t v20 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  if (!*(void *)(*((void *)this + 13) + 8 * a2))
  {
    re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)&v11, &v10);
    unint64_t v6 = *((void *)this + 11);
    if (v6 <= a2) {
      goto LABEL_12;
    }
    uint64_t v7 = *((void *)this + 13);
    uint64_t v8 = *(void *)(v7 + 8 * a2);
    *(void *)(v7 + 8 * a2) = v10;
    uint64_t v10 = (re::MaterialParameterBlock *)v8;
    if (v8)
    {

      unint64_t v6 = *((void *)this + 11);
    }
  }
  if (v6 <= a2)
  {
LABEL_11:
    uint64_t v12 = 0;
    long long v25 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    unint64_t v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 789;
    __int16 v17 = 2048;
    unint64_t v18 = a2;
    __int16 v19 = 2048;
    unint64_t v20 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    uint64_t v12 = 0;
    long long v25 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v13 = 136315906;
    unint64_t v14 = "operator[]";
    __int16 v15 = 1024;
    int v16 = 789;
    __int16 v17 = 2048;
    unint64_t v18 = a2;
    __int16 v19 = 2048;
    unint64_t v20 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 13) + 8 * a2;
}

uint64_t re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(re::ecs2 *this, re::ecs2::Entity *a2)
{
  uint64_t v3 = *((void *)this + 24);
  if (!v3) {
    uint64_t v3 = re::ecs2::EntityComponentCollection::add((re::ecs2 *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  if (*(void *)(v3 + 88) < (unint64_t)a2) {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize(v3 + 72, (unint64_t)a2);
  }
  return v3;
}

void re::ecs2::deepCopyMaterialParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)a1;
  int v5 = *(re::ecs2 **)(a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 176);
  if (v6)
  {
    uint64_t v44 = *(re::ecs2::Entity **)(v6 + 72);
    if (v44)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = *(void **)(v4 + 192);
      int v41 = *(re::ecs2 **)(a1 + 8);
      uint64_t v42 = *(void *)a1;
      uint64_t v43 = *(void *)(*(void *)a1 + 176);
      do
      {
        unint64_t v10 = *(void *)(v6 + 72);
        if (v10 <= v8)
        {
          *(void *)buf = 0;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v47[0]) = 136315906;
          *(void *)((char *)v47 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
          WORD6(v47[0]) = 1024;
          *(_DWORD *)((char *)v47 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 789;
          WORD1(v47[1]) = 2048;
          *(void *)((char *)&v47[1] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          WORD6(v47[1]) = 2048;
          *(void *)((char *)&v47[1] + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_60:
          uint64_t v46 = 0;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "operator[]";
          __int16 v49 = 1024;
          int v50 = 789;
          __int16 v51 = 2048;
          unint64_t v52 = v8;
          __int16 v53 = 2048;
          unint64_t v54 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_61:
          uint64_t v46 = 0;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "operator[]";
          __int16 v49 = 1024;
          int v50 = 789;
          __int16 v51 = 2048;
          unint64_t v52 = v8;
          __int16 v53 = 2048;
          unint64_t v54 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        uint64_t v11 = re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(*(void *)(v6 + 88) + 24 * v8));
        memset(v47, 0, sizeof(v47));
        DWORD1(v47[2]) = 0x7FFFFFFF;
        if (v11)
        {
          uint64_t v13 = v11;
          unint64_t v14 = *(re::MaterialParameterBlock **)(v11 + 1672);
          if (v14)
          {
            if (!re::MaterialParameterBlock::isEmpty(v14))
            {
              if (!v7) {
                uint64_t v7 = (re::ecs2 *)re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(v5, v44);
              }
              __int16 v15 = (re::MaterialParameterBlock **)re::ecs2::ensureParametersBlockIndexExists(v7, v8, a2, v12);
              re::ecs2::deepCopyMaterialParameterBlock(*v15, *(re::MaterialParameterBlock **)(v13 + 1672), (uint64_t)v47, a1);
            }
          }
        }
        if (v9 && v8 < v9[11] && *(void *)(v9[13] + 8 * v8))
        {
          if (!v7) {
            uint64_t v7 = (re::ecs2 *)re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(v5, v44);
          }
          unint64_t v10 = v9[6];
          if (v10 <= v8) {
            goto LABEL_60;
          }
          uint64_t v16 = v9[8];
          uint64_t v17 = *(void *)(v16 + 24 * v8);
          if (!v17) {
            uint64_t v17 = *(void *)(v16 + 24 * v8 + 8);
          }
          uint64_t v18 = *(unsigned int *)(v17 + 336);
          if (v18)
          {
            uint64_t v19 = 0;
            unint64_t v20 = *(_DWORD **)(v17 + 320);
            while ((*v20 & 0x80000000) == 0)
            {
              v20 += 80;
              if (v18 == ++v19)
              {
                LODWORD(v19) = *(_DWORD *)(v17 + 336);
                break;
              }
            }
          }
          else
          {
            LODWORD(v19) = 0;
          }
          if (v18 != v19)
          {
            uint64_t v21 = v19;
            unsigned int v22 = *(_DWORD *)(v17 + 336);
            do
            {
              uint64_t v23 = *(void *)(v17 + 320) + 320 * v21;
              int v25 = *(unsigned __int8 *)(v23 + 32);
              uint64_t v24 = v23 + 32;
              if (v25 == 64)
              {
                uint64_t v26 = re::AssetHandle::AssetHandle((re::AssetHandle *)&v55, (const re::AssetHandle *)(v24 + 80));
                if (*((void *)&v55 + 1)
                  && (unsigned int v27 = atomic_load((unsigned int *)(*((void *)&v55 + 1) + 704)), v27 == 2))
                {
                  if (*(unsigned char *)(*((void *)&v55 + 1) + 312))
                  {
                    *(void *)buf = *(void *)(v24 - 24) >> 1;
                    re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)v47, (uint64_t *)buf);
                  }
                }
                else
                {
                  unint64_t v28 = *re::ecsComponentsLogObjects(v26);
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v29 = re::AssetHandle::assetInfo((re::AssetHandle *)&v55);
                    if (v29[17]) {
                      uint64_t v30 = (char *)v29[18];
                    }
                    else {
                      uint64_t v30 = (char *)v29 + 137;
                    }
                    *(_DWORD *)buf = 136315138;
                    *(void *)&uint8_t buf[4] = v30;
                    _os_log_impl(&dword_233120000, v28, OS_LOG_TYPE_DEFAULT, "Texture asset handle %s is not loaded and can't be cached", buf, 0xCu);
                  }
                }
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v55);
                unsigned int v22 = *(_DWORD *)(v17 + 336);
              }
              if (v22 <= (int)v19 + 1) {
                unsigned int v31 = v19 + 1;
              }
              else {
                unsigned int v31 = v22;
              }
              while (1)
              {
                uint64_t v21 = (v19 + 1);
                if (v31 - 1 == v19) {
                  break;
                }
                LODWORD(v19) = v19 + 1;
                unsigned int v32 = v21;
                if ((*(_DWORD *)(*(void *)(v17 + 320) + 320 * v21) & 0x80000000) != 0) {
                  goto LABEL_45;
                }
              }
              unsigned int v32 = v31;
LABEL_45:
              LODWORD(v19) = v32;
            }
            while (v18 != v32);
          }
          uint64_t v33 = (re::MaterialParameterBlock **)re::ecs2::ensureParametersBlockIndexExists(v7, v8, a2, v12);
          unint64_t v10 = v9[11];
          if (v10 <= v8) {
            goto LABEL_61;
          }
          re::ecs2::deepCopyMaterialParameterBlock(*v33, *(re::MaterialParameterBlock **)(v9[13] + 8 * v8), (uint64_t)v47, a1);
          int v5 = v41;
          uint64_t v4 = v42;
        }
        StringID v34 = *(re::RenderManager ***)(a2 + 24);
        *(void *)&long long v55 = *(void *)(v4 + 296);
        if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v34 + 129), (uint64_t *)&v55))
        {
          if (!v7) {
            uint64_t v7 = (re::ecs2 *)re::ecs2::getOrAddMaterialParameterBlockArrayComponentWithMaterialCount(v5, v44);
          }
          uint64_t v35 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v34, *(void *)(v4 + 296));
          uint64_t v37 = *(re::MaterialParameterBlock **)re::ecs2::ensureParametersBlockIndexExists(v7, v8, a2, v36);
          long long v56 = 0u;
          long long v57 = 0u;
          long long v55 = 0u;
          DWORD1(v57) = 0x7FFFFFFF;
          re::ecs2::deepCopyMaterialParameterBlock(v37, v35, (uint64_t)&v55, a1);
          re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v55);
        }
        re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v47);
        ++v8;
        uint64_t v6 = v43;
      }
      while ((re::ecs2::Entity *)v8 != v44);
      if (v7) {
        re::ecs2::Component::markDirty(v7);
      }
    }
  }
  uint64_t v38 = *((void *)v5 + 41);
  if (v38)
  {
    for (unint64_t i = 0; i != v38; ++i)
    {
      *(void *)(a1 + 8) = *(void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v5 + 304, i);
      *(void *)a1 = *(void *)re::ecs2::EntityComponentCollection::operator[](v4 + 304, i);
      long long v40 = *(_OWORD *)(a1 + 16);
      v45[0] = *(_OWORD *)a1;
      v45[1] = v40;
      re::ecs2::deepCopyMaterialParameter(v45, a2);
    }
  }
}

double re::ecs2::VisualCopyHelper::makeVisualCopyEntity@<D0>(re::ecs2::ECSHelper *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, re::ecs2::Entity **a6@<X8>)
{
  uint64_t v17 = a5;
  re::ecs2::ECSHelper::deepCopyEntity(a1, (const re::ecs2::Entity *)1, (BOOL (*)(void *, void *))&v17, 0, (uint64_t (*)(uint64_t, uint64_t))re::ecs2::isComponentTypeExcludedForVisualCopy, a6);
  uint64_t v11 = *a6;
  int v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v16 = 0x7FFFFFFFLL;
  re::internal::MeshSortGroupFixupTable::fixupMeshSortGroupsForEntity((re::internal::MeshSortGroupFixupTable *)v14, v11);
  v13[0] = a1;
  v13[1] = v11;
  void v13[2] = a3;
  v13[3] = a2;
  re::ecs2::deepCopyMaterialParameter((uint64_t)v13, a4);
  return re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v14);
}

BOOL re::ecs2::isComponentTypeExcludedForVisualCopy(re::ecs2 *this, uint64_t *a2, void *a3)
{
  BOOL v3 = 0;
  if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::StaticTextComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::ThrottleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::MaterialOverrideComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this
    && re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)this)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = *(unsigned int *)(*a2 + 32);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (int *)(*(void *)(v4 + 16) + 8);
      while (1)
      {
        int v8 = *v7;
        v7 += 6;
        if (v8 < 0) {
          break;
        }
        if (v5 == ++v6)
        {
          LODWORD(v6) = *(_DWORD *)(*a2 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      uint64_t v9 = v6;
      uint64_t v10 = *(void *)(v4 + 16);
      do
      {
        uint64_t v11 = *(re::ecs2 **)(v10 + 24 * v9 + 16);
        BOOL v12 = v11 == this;
        BOOL v3 = v11 != this;
        if (v12) {
          break;
        }
        int v13 = v5 <= (int)v6 + 1 ? v6 + 1 : *(_DWORD *)(*a2 + 32);
        while (1)
        {
          uint64_t v9 = (v6 + 1);
          if (v13 - 1 == v6) {
            break;
          }
          LODWORD(v6) = v6 + 1;
          int v14 = v9;
          if ((*(_DWORD *)(v10 + 24 * v9 + 8) & 0x80000000) != 0) {
            goto LABEL_32;
          }
        }
        int v14 = v13;
LABEL_32:
        LODWORD(v6) = v14;
      }
      while (v5 != v14);
    }
  }
  return v3;
}

void *re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      double result = (void *)*result;
      if (!*v5)
      {
        double result = (void *)re::DynamicArray<re::VisualProxyHighFidelityTextureCopyRequest>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          double result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        double result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 16 * v9;
        uint64_t v11 = v7;
        do
        {
          *uint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          v11[1] = *(void *)(v8 + 8);
          *(void *)(v8 + 8) = 0;
          if (*(void *)v8)
          {

            *(void *)uint64_t v8 = 0;
          }
          v8 += 16;
          v11 += 2;
          v10 -= 16;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      double result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

re::ecs2::ClippingParameterDataStateTracking *re::ecs2::ClippingParameterDataStateTracking::ClippingParameterDataStateTracking(re::ecs2::ClippingParameterDataStateTracking *this)
{
  v14[10] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E70BC58;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_DWORD *)this + 10) = 0;
  *(void *)((char *)this + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v2 = (char *)this + 56;
  *(void *)((char *)this + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)((char *)this + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  uint64_t v3 = (char *)this + 104;
  *(void *)((char *)this + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v4 = (char *)this + 152;
  *(void *)((char *)this + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *((_DWORD *)this + 58) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  uint64_t v5 = (char *)this + 200;
  *(void *)((char *)this + 236) = 0x7FFFFFFFLL;
  *(void *)this = &unk_26E70BB20;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 86) = 0;
  *(_OWORD *)((char *)this + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(void *)((char *)this + 348) = 0x1FFFFFFFFLL;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 42re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 50re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 58re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 6re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 0;
  *(void *)((char *)this + 652) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 66re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(void *)((char *)this + 700) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 17re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  re::ecs2::ClippingParametersRegistry::ClippingParametersRegistry((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 712));
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  v14[0] = re::ecs2::ComponentImpl<re::ecs2::BillboardComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[1] = re::ecs2::ComponentImpl<re::ecs2::ClippingPrimitiveComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  _OWORD v14[2] = re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v14[3] = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[4] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v14[5] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[6] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[7] = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[8] = re::ecs2::ComponentImpl<re::ecs2::PortalComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v14[9] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v11 = (void **)v14;
  uint64_t v12 = 10;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 248), (uint64_t)&v11);
  uint64_t v11 = &v13;
  uint64_t v12 = 1;
  int v13 = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  uint64_t v9 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 272), (uint64_t)&v11);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)this + 37, 0);
  ++*((_DWORD *)this + 80);
  *((_DWORD *)this + 85) = 8;
  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::allocBlock((void *)this + 37);
  return this;
}

uint64_t re::ecs2::ClippingParameterDataStateTracking::invalidateTransformEventHandler<REBillboardTransformChangedEvent>(re::ecs2::ClippingParameterDataStateTracking *a1, re::ecs2::Entity *a2)
{
  uint64_t v4 = a2;
  if (a2)
  {
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)a1 + 104, (uint64_t *)&v4);
    re::ecs2::ClippingParameterDataStateTracking::clearEntityHierarchyStateData(a1, v4);
  }
  return 0;
}

uint64_t re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (unsigned int v3 = *(_DWORD *)(a1 + 44)) : (unsigned int v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((uint64_t v4 = *(void *)(a1 + 32),
          (int v5 = *(_DWORD *)(*(void *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (BOOL v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (BOOL v6 = 0),
         v6)))
  {
    return *(void *)(v4 + 16 * WORD1(a2)) + 208 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

void re::ecs2::ClippingParameterDataStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v398 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = 0;
    BOOL v6 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 6;
      if (v7 < 0) {
        break;
      }
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  uint64_t v8 = &v335;
  if (v4 != v5)
  {
    uint64_t v15 = v5;
    uint64_t v16 = *(void *)(a2 + 16);
    v323 = (void *)(a1 + 56);
    unint64_t v17 = (unint64_t)&v361.u64[1];
    uint64_t v310 = a1 + 712;
    uint64_t v289 = a1 + 616;
    v292 = (_anonymous_namespace_ *)(a1 + 552);
    uint64_t v288 = a1 + 664;
    int32x4_t v325 = vdupq_n_s32(0x7F800000u);
    int v286 = *(_DWORD *)(a2 + 32);
    do
    {
      unint64_t v18 = *(void *)(v16 + 24 * v15 + 16);
      uint64_t v19 = *(void *)(v18 + 24);
      if (v19 && (*(unsigned char *)(v19 + 288) & 0x80) == 0)
      {
        buf.i64[0] = *(void *)(v18 + 24);
        if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(v2, (uint64_t *)&buf))
        {
          goto LABEL_94;
        }
        while (1)
        {
          uint64_t v20 = *(void *)(buf.i64[0] + 24);
          if (!v20 || (*(unsigned char *)(v20 + 288) & 0x80) != 0) {
            break;
          }
          buf.i64[0] = *(void *)(buf.i64[0] + 24);
          if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(v2, (uint64_t *)&buf))
          {
            goto LABEL_94;
          }
        }
      }
      uint64_t v21 = *(void *)(v3 + 840);
      v314 = *(re::ecs2::RenderOptions **)(v3 + 848);
      if (!re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)v323, v18))
      {
        (*(void (**)(float32x4_t *__return_ptr))(**(void **)v21 + 8))(&buf);
        if (buf.i8[0]) {
          uint64_t v22 = buf.i64[1];
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v23 = *(void *)(v18 + 24);
        if (v23 && (*(unsigned char *)(v23 + 288) & 0x80) == 0)
        {
          while (!re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v323, v23))
          {
            (*(void (**)(float32x4_t *__return_ptr))(**(void **)v21 + 8))(&buf);
            uint64_t v24 = buf.i8[0] ? buf.i64[1] : 0;
            if (v22 != v24) {
              break;
            }
            uint64_t v25 = *(void *)(v23 + 144);
            if (v25)
            {
              uint64_t v26 = v23;
              if (!*(unsigned char *)(v25 + 100))
              {
                if (*(void *)(v23 + 176)) {
                  uint64_t v26 = v23;
                }
                else {
                  uint64_t v26 = v18;
                }
              }
            }
            else
            {
              uint64_t v27 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v23 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v27)
              {
                if (*(unsigned char *)(v27 + 68) || (uint64_t v26 = v18, *(void *)(v23 + 176))) {
                  uint64_t v26 = v23;
                }
              }
              else
              {
                uint64_t v26 = v18;
              }
            }
            unint64_t v23 = *(void *)(v23 + 24);
            if (v23)
            {
              unint64_t v18 = v26;
              if ((*(unsigned char *)(v23 + 288) & 0x80) == 0) {
                continue;
              }
            }
            goto LABEL_46;
          }
        }
        uint64_t v26 = v18;
LABEL_46:
        uint64_t v318 = v22;
        uint64_t v351 = 0;
        uint64_t v352 = 0;
        int v353 = 1;
        uint64_t v354 = 0;
        uint64_t v355 = 0;
        v397.columns[0] = (simd_float4)xmmword_23435FD50;
        v397.columns[1] = (simd_float4)xmmword_23435FD60;
        v397.columns[2] = (simd_float4)xmmword_23435FD80;
        v397.columns[3] = (simd_float4)xmmword_23435FBB0;
        (*(void (**)(float32x4_t *__return_ptr))(**(void **)v21 + 8))(&buf);
        if (buf.i8[0]) {
          uint64_t v28 = buf.i64[1];
        }
        else {
          uint64_t v28 = 0;
        }
        (*(void (**)(float32x4_t *__return_ptr))(**(void **)v21 + 8))(&buf);
        if (buf.i8[0]) {
          uint64_t v29 = buf.i64[1];
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = v26;
        if (v28 == v29
          && ((uint64_t v31 = *(void *)(v26 + 24)) == 0
            ? (v33 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v323, 0), v32 = 0): ((*(_DWORD *)(v31 + 288) & 0x80) != 0 ? (v32 = 0) : (v32 = *(void *)(v26 + 24)), v33 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v323, v32)), uint64_t v30 = v26, v33))
        {
          uint64_t v306 = v33;
          uint64_t v34 = v33;
          while (!*(unsigned char *)(v34 + 190))
          {
            (*(void (**)(float32x4_t *__return_ptr))(**(void **)v21 + 8))(&buf);
            uint64_t v35 = buf.i8[0] ? buf.i64[1] : 0;
            (*(void (**)(float32x4_t *__return_ptr))(**(void **)v21 + 8))(&buf);
            uint64_t v36 = buf.i8[0] ? buf.i64[1] : 0;
            if (v35 != v36) {
              break;
            }
            uint64_t v37 = *(void *)(v32 + 24);
            if (v37)
            {
              if ((*(unsigned char *)(v37 + 288) & 0x80) != 0) {
                unint64_t v38 = 0;
              }
              else {
                unint64_t v38 = *(void *)(v32 + 24);
              }
            }
            else
            {
              unint64_t v38 = 0;
            }
            uint64_t v34 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v323, v38);
            if (!v34)
            {
              v39.i64[0] = 0x7F0000007FLL;
              v39.i64[1] = 0x7F0000007FLL;
              simd_float4 v315 = v39;
              simd_float4 v40 = (simd_float4)v325;
              goto LABEL_90;
            }
          }
          if (&v351 != (uint64_t *)(v34 + 144))
          {
            uint64_t v44 = *(void *)(v34 + 144);
            if (v351)
            {
              if (v44) {
                re::DynamicOverflowArray<unsigned short,8ul>::copy((uint64_t)&v351, v34 + 144);
              }
              else {
                uint64_t v352 = 0;
              }
              v353 += 2;
            }
            else if (v44)
            {
              unint64_t v45 = *(void *)(v34 + 152);
              uint64_t v351 = *(void *)(v34 + 144);
              re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(&v351, v45);
              v353 += 2;
              re::DynamicOverflowArray<unsigned short,8ul>::copy((uint64_t)&v351, v34 + 144);
            }
          }
          simd_float4 v315 = *(simd_float4 *)(v34 + 80);
          simd_float4 v40 = *(simd_float4 *)(v34 + 96);
LABEL_90:
          simd_float4 v311 = v40;
          simd_float4x4 v42 = __invert_f4(*(simd_float4x4 *)(v306 + 16));
          simd_float4x4 v397 = v42;
        }
        else
        {
          while (!re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v30 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
          {
            uint64_t v30 = *(void *)(v30 + 24);
            if (!v30 || (*(unsigned char *)(v30 + 288) & 0x80) != 0)
            {
              v41.i64[0] = 0x7F0000007FLL;
              v41.i64[1] = 0x7F0000007FLL;
              simd_float4 v315 = v41;
              simd_float4 v311 = (simd_float4)v325;
              simd_float4x4 v42 = v397;
              goto LABEL_91;
            }
          }
          re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(a1 + 864), (re::ecs2::TransformComponent **)v30, &buf);
          v399.columns[2] = v362.columns[0];
          v399.columns[3] = v362.columns[1];
          v399.columns[0] = (simd_float4)buf;
          v399.columns[1] = v361;
          simd_float4x4 v42 = __invert_f4(v399);
          simd_float4x4 v397 = v42;
          v43.i64[0] = 0x7F0000007FLL;
          v43.i64[1] = 0x7F0000007FLL;
          simd_float4 v315 = v43;
          simd_float4 v311 = (simd_float4)v325;
        }
LABEL_91:
        simd_float4x4 v350 = __invert_f4(v42);
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v373);
        v344[0] = 0;
        v344[1] = 0;
        int v345 = 1;
        uint64_t v347 = 0;
        uint64_t v348 = 0;
        uint64_t v346 = 0;
        int v349 = 0;
        re::BucketArray<re::Matrix4x4<float>,8ul>::init((uint64_t)v344, (uint64_t)&v373, 1uLL);
        unint64_t v337 = 0;
        uint64_t v338 = 0;
        int v339 = 1;
        uint64_t v341 = 0;
        unint64_t v342 = 0;
        uint64_t v340 = 0;
        int v343 = 0;
        re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::init((uint64_t)&v337, (uint64_t)&v373, 1uLL);
        buf.i64[0] = (uint64_t)&v397;
        buf.i64[1] = (uint64_t)&v350;
        v361.i64[0] = v26;
        re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)&v361.i64[1], &v351);
        v362.columns[2] = v315;
        v362.columns[3] = v311;
        v363.i64[0] = v318;
        __n128 v46 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::add((uint64_t)&v337, (long long *)&buf);
        uint64_t v47 = v361.i64[1];
        if (v361.i64[1] && (v362.columns[0].i8[8] & 1) == 0)
        {
          uint64_t v48 = v362.columns[1].i64[1];
LABEL_103:
          (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v47 + 40))(v47, v48, v46);
        }
        while (2)
        {
          if (!v342)
          {
            while (v338)
              re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)&v337);
            uint64_t v3 = a1;
            LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v286;
            uint64_t v2 = a2;
            if (v337 && (v339 & 1) == 0) {
              (*(void (**)(__n128))(*(void *)v337 + 40))(v46);
            }
            re::BucketArray<re::Matrix4x4<float>,8ul>::deinit((uint64_t)v344);
            if (v344[0] && (v345 & 1) == 0) {
              (*(void (**)(void))(*(void *)v344[0] + 40))();
            }
            re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v373);
            if (v351 && (v353 & 1) == 0) {
              (*(void (**)(void))(*(void *)v351 + 40))();
            }
            goto LABEL_94;
          }
          unint64_t v51 = v342 - 1;
          uint64_t v52 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::operator[]((uint64_t)&v337, v342 - 1);
          __int16 v53 = *(re::ecs2::TransformComponent ***)(v52 + 16);
          long long v385 = *(_OWORD *)v52;
          v386 = v53;
          re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v387, (uint64_t *)(v52 + 24));
          float32x4_t v54 = *(float32x4_t *)(v52 + 64);
          float32x4_t v55 = *(float32x4_t *)(v52 + 80);
          v392[0] = *(void *)(v52 + 96);
          simd_float4 v390 = (simd_float4)v54;
          simd_float4 v391 = (simd_float4)v55;
          uint64_t v56 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::operator[]((uint64_t)&v337, v51);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v56 + 24);
          unint64_t v342 = v51;
          ++v343;
          long long v57 = v386;
          if (((_BYTE)v386[36] & 1) == 0
            || re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)v323, (unint64_t)v386))
          {
            goto LABEL_202;
          }
          unint64_t v59 = *((void *)&v385 + 1);
          long long v58 = (float32x4_t *)v385;
          if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v57 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
          {
            long long v298 = *(_OWORD *)(v59 + 16);
            float32x4_t v302 = *(float32x4_t *)v59;
            float32x4_t v293 = *(float32x4_t *)(v59 + 48);
            float32x4_t v295 = *(float32x4_t *)(v59 + 32);
            re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(a1 + 864), v386, &v356);
            uint64_t v60 = re::BucketArray<re::Matrix4x4<float>,8ul>::addUninitialized((uint64_t)v344);
            float32x4_t v62 = v359;
            float32x4_t v64 = v356;
            float32x4_t v63 = v357;
            *(float32x4_t *)(v60 + 32) = v358;
            *(float32x4_t *)(v60 + 48) = v62;
            *(float32x4_t *)uint64_t v60 = v64;
            *(float32x4_t *)(v60 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v63;
            if (!v348)
            {
              re::internal::assertLog((re::internal *)4, v61, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
              _os_crash();
              __break(1u);
LABEL_365:
              re::internal::assertLog((re::internal *)4, v66, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
              _os_crash();
              __break(1u);
LABEL_366:
              v350.columns[0].i64[0] = 0;
              float32x4_t v395 = 0u;
              long long v396 = 0u;
              float32x4_t v394 = 0u;
              memset(v393, 0, sizeof(v393));
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              v397.columns[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v397.columns[0].i64 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
              v397.columns[0].i16[6] = 1024;
              *(__int32 *)((char *)&v397.columns[0].i32[3] + 2) = 789;
              v397.columns[1].i16[1] = 2048;
              *(uint64_t *)((char *)v397.columns[1].i64 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17;
              v397.columns[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v397.columns[1].i64[1] + 6) = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_367:
              v350.columns[0].i64[0] = 0;
              float32x4_t v395 = 0u;
              long long v396 = 0u;
              float32x4_t v394 = 0u;
              memset(v393, 0, sizeof(v393));
              uint64_t v237 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              v397.columns[0].i32[0] = 136315906;
              *(uint64_t *)((char *)v397.columns[0].i64 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
              v397.columns[0].i16[6] = 1024;
              *(__int32 *)((char *)&v397.columns[0].i32[3] + 2) = 789;
              v397.columns[1].i16[1] = 2048;
              *(uint64_t *)((char *)v397.columns[1].i64 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17;
              v397.columns[1].i16[6] = 2048;
              *(uint64_t *)((char *)&v397.columns[1].i64[1] + 6) = (uint64_t)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_368:
              re::internal::assertLog((re::internal *)5, v234, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v237);
              _os_crash();
              __break(1u);
LABEL_369:
              re::internal::assertLog((re::internal *)4, v102, "assertion failure: '%s' (%s:line %i) The row index is out of range. Allowed values are 0 to 3.", "!\"Unreachable code\"", "row", 587);
              _os_crash();
              __break(1u);
            }
            unint64_t v59 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)v344, v348 - 1);
            v400.columns[0] = (simd_float4)v356;
            v400.columns[1] = (simd_float4)v357;
            v400.columns[2] = (simd_float4)v358;
            v400.columns[3] = (simd_float4)v359;
            simd_float4x4 v401 = __invert_f4(v400);
            simd_float4 v316 = v401.columns[1];
            simd_float4 v319 = v401.columns[0];
            simd_float4 v312 = v401.columns[2];
            simd_float4 v307 = v401.columns[3];
            unsigned __int16 v65 = (_OWORD *)re::BucketArray<re::Matrix4x4<float>,8ul>::addUninitialized((uint64_t)v344);
            *unsigned __int16 v65 = v319;
            v65[1] = v316;
            v65[2] = v312;
            v65[3] = v307;
            if (!v348) {
              goto LABEL_365;
            }
            uint64_t v67 = (float32x4_t *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)v344, v348 - 1);
            long long v58 = v67;
            v68.i64[0] = 0x7F0000007FLL;
            v68.i64[1] = 0x7F0000007FLL;
            uint32x4_t v69 = (uint32x4_t)vceqq_f32((float32x4_t)v390, v68);
            v69.i32[3] = v69.i32[2];
            if ((vminvq_u32(v69) & 0x80000000) == 0
              || (uint32x4_t v70 = (uint32x4_t)vceqq_f32((float32x4_t)v391, (float32x4_t)vdupq_n_s32(0x7F800000u)),
                  v70.i32[3] = v70.i32[2],
                  (vminvq_u32(v70) & 0x80000000) == 0))
            {
              uint64_t v71 = 0;
              float32x4_t v72 = *v67;
              float32x4_t v73 = v67[1];
              float32x4_t v74 = v67[2];
              float32x4_t v75 = v67[3];
              *(float32x4_t *)v393 = v302;
              *(_OWORD *)&v393[16] = v298;
              float32x4_t v394 = v295;
              float32x4_t v395 = v293;
              do
              {
                *(float32x4_t *)((char *)&buf + v71) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*(_OWORD *)&v393[v71])), v73, *(float32x2_t *)&v393[v71], 1), v74, *(float32x4_t *)&v393[v71], 2), v75, *(float32x4_t *)&v393[v71], 3);
                v71 += 16;
              }
              while (v71 != 64);
              re::AABB::transform((float32x4_t *)&v390, &buf, (uint64_t)v393);
              simd_float4 v390 = *(simd_float4 *)v393;
              simd_float4 v391 = *(simd_float4 *)&v393[16];
            }
          }
          float32x4_t v335 = (float32x4_t)v325;
          v76.i64[0] = 0x7F0000007FLL;
          v76.i64[1] = 0x7F0000007FLL;
          float32x4_t v336 = v76;
          int v77 = v386[18];
          if (v77)
          {
            _S1 = *((_DWORD *)v77 + 16);
            _S2 = *((_DWORD *)v77 + 17);
            __asm
            {
              FCVT            H10, S1
              FCVT            H9, S2
            }
            float32x4_t v85 = (float32x4_t)vdupq_lane_s64(*((void *)v77 + 10), 0);
            v85.i32[0] = *((_DWORD *)v77 + 18);
            v85.i32[1] = *((_DWORD *)v77 + 24);
            _S0 = *((void *)v77 + 11);
            __asm { FCVT            H0, S0 }
            uint64_t v317 = (uint64_t)vcvt_f16_f32(v85);
            unsigned __int16 v320 = _S0;
            if (re::s_debugSettingsManager)
            {
              *(_DWORD *)v393 = 0;
              buf.i64[0] = 0x417EAC0DEDDBE5AELL;
              buf.i64[1] = (uint64_t)"clipping:featherOverride";
              int v87 = re::DebugSettingsManager::getWithErrorCode<float>(re::s_debugSettingsManager, &buf, v393);
              re::StringID::destroyString((re::StringID *)&buf);
              if (!v87)
              {
                _S0 = *(_DWORD *)v393;
                __asm { FCVT            H1, S0 }
                int16x4_t v90 = vdup_lane_s16((int16x4_t)_H1, 0);
                v90.i16[1] = 0;
                uint64_t v317 = (uint64_t)v90;
                unsigned __int16 v320 = _H1;
                _H9 = _H1;
                _H10 = _H1;
              }
            }
            float32x4_t v91 = *((float32x4_t *)v77 + 2);
            simd_float4 v361 = *((simd_float4 *)v77 + 3);
            float32x4_t v335 = v91;
            float32x4_t v336 = (float32x4_t)v361;
            uint64_t v92 = (char *)v77 + 100;
            BOOL v93 = *((unsigned char *)v77 + 101) != 0;
LABEL_122:
            int v98 = *v92;
            BOOL v313 = *v92 != 0;
            float32x4_t v333 = (float32x4_t)v390;
            float32x4_t v334 = (float32x4_t)v391;
            re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v331, v387);
            char v99 = !v93;
            if (!v386[22]) {
              char v99 = 1;
            }
            if (!v98 && (v99 & 1) != 0)
            {
              char v100 = 0;
              goto LABEL_155;
            }
            re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(a1 + 864), v386, &v356);
            v402.columns[2] = (simd_float4)v358;
            v402.columns[3] = (simd_float4)v359;
            v402.columns[0] = (simd_float4)v356;
            v402.columns[1] = (simd_float4)v357;
            simd_float4x4 v107 = __invert_f4(v402);
            simd_float4 v104 = v107.columns[0];
            simd_float4 v105 = v107.columns[1];
            simd_float4 v106 = v107.columns[2];
            v107.columns[0] = (simd_float4)vsubq_f32(v336, v335);
            v107.columns[0].i32[3] = 0;
            float32x4_t v330 = vmaxnmq_f32((float32x4_t)v107.columns[0], (float32x4_t)0);
            BOOL v308 = v93;
            if (vmulq_laneq_f32(vmulq_lane_f32(v330, *(float32x2_t *)v330.f32, 1), v330, 2).f32[0] <= 0.00001
              || (v103.i32[1] = v333.i32[1],
                  float32x4_t v108 = vsubq_f32(v334, v333),
                  v108.i32[3] = 0,
                  float32x4_t v109 = vmaxnmq_f32(v108, (float32x4_t)0),
                  vmulq_laneq_f32(vmulq_lane_f32(v109, *(float32x2_t *)v109.f32, 1), v109, 2).f32[0] <= 0.00001))
            {
              if ((atomic_exchange((atomic_uchar *volatile)&_MergedGlobals_349, 1u) & 1) == 0)
              {
                simd_float4 v300 = v105;
                simd_float4 v304 = v104;
                simd_float4 v297 = v107.columns[2];
                uint64_t v122 = *re::ecsComponentsLogObjects(v101);
                BOOL v123 = os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT);
                simd_float4 v106 = v297;
                simd_float4 v105 = v300;
                simd_float4 v104 = v304;
                if (v123)
                {
                  long long v124 = v386[35];
                  buf.i32[0] = 136315138;
                  *(uint64_t *)((char *)buf.i64 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)v124;
                  _os_log_impl(&dword_233120000, v122, OS_LOG_TYPE_DEFAULT, "Warning entity '%s'will be culled as the bounding clip volume is zero", (uint8_t *)&buf, 0xCu);
                  simd_float4 v106 = v297;
                  simd_float4 v105 = v300;
                  simd_float4 v104 = v304;
                }
              }
              float32x4_t v333 = 0u;
              float32x4_t v334 = 0u;
              float32x4_t v121 = v335;
              float32x4_t v120 = v336;
              v119 = v292;
              char v100 = v313;
            }
            else
            {
              float32x4_t v283 = v333;
              float32x4_t v284 = v334;
              float32x4_t v285 = v335;
              float32x4_t v294 = v336;
              simd_float4 v296 = v107.columns[2];
              simd_float4 v299 = v105;
              simd_float4 v303 = v104;
              uint64_t v110 = 0;
              float32x4_t v111 = *v58;
              float32x4_t v112 = v58[1];
              float32x4_t v113 = v58[2];
              float32x4_t v114 = v58[3];
              *(float32x4_t *)v393 = v356;
              *(float32x4_t *)&v393[16] = v357;
              float32x4_t v394 = v358;
              float32x4_t v395 = v359;
              do
              {
                *(float32x4_t *)((char *)&buf + v110) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v111, COERCE_FLOAT(*(_OWORD *)&v393[v110])), v112, *(float32x2_t *)&v393[v110], 1), v113, *(float32x4_t *)&v393[v110], 2), v114, *(float32x4_t *)&v393[v110], 3);
                v110 += 16;
              }
              while (v110 != 64);
              re::AABB::transform(&v335, &buf, (uint64_t)v393);
              float32x4_t v116 = v283;
              float32x4_t v115 = v284;
              v116.i32[3] = 0;
              float32x4_t v117 = *(float32x4_t *)v393;
              float32x4_t v118 = *(float32x4_t *)&v393[16];
              v117.i32[3] = 0;
              v115.i32[3] = 0;
              v118.i32[3] = 0;
              float32x4_t v333 = vmaxnmq_f32(v116, v117);
              float32x4_t v334 = vminnmq_f32(v115, v118);
              v119 = v292;
              char v100 = v313;
              simd_float4 v105 = v299;
              simd_float4 v104 = v303;
              float32x4_t v120 = v294;
              simd_float4 v106 = v296;
              float32x4_t v121 = v285;
            }
            uint32x4_t v125 = (uint32x4_t)vcgtq_f32(v121, v120);
            v125.i32[3] = v125.i32[2];
            if ((vmaxvq_u32(v125) & 0x80000000) != 0)
            {
              float32x4_t v128 = 0uLL;
            }
            else
            {
              float32x4_t v126 = vaddq_f32(v120, v121);
              v127.i64[0] = 0x3F0000003F000000;
              v127.i64[1] = 0x3F0000003F000000;
              float32x4_t v128 = vmulq_f32(v126, v127);
            }
            uint64_t v129 = 0;
            float32x4_t v130 = vaddq_f32(v359, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v356, v128.f32[0]), v357, *(float32x2_t *)v128.f32, 1), v358, v128, 2));
            float32x4_t v329 = vdivq_f32(v130, (float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 3));
            simd_float4 v361 = 0u;
            v362.columns[0] = 0u;
            float32x4_t buf = 0u;
            v362.columns[1].i16[0] = _H10;
            v362.columns[1].i16[1] = _H9;
            *(uint64_t *)((char *)v362.columns[1].i64 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v317;
            v362.columns[1].i32[3] = v320;
            do
            {
              v103.i32[0] = v330.i32[v129];
              float32x4_t v131 = 0uLL;
              if (v103.f32[0] != 0.0)
              {
                v131.i32[0] = v104.i32[0];
                __int32 v132 = v105.i32[0];
                __int32 v133 = v106.i32[0];
                if (v129)
                {
                  v131.i32[0] = v104.i32[2];
                  __int32 v132 = v105.i32[2];
                  __int32 v133 = v106.i32[2];
                  if (v129 != 2)
                  {
                    v131.i32[0] = v104.i32[1];
                    __int32 v132 = v105.i32[1];
                    __int32 v133 = v106.i32[1];
                    if (v129 != 1) {
                      goto LABEL_369;
                    }
                  }
                }
                v131.i32[1] = v132;
                v131.i32[2] = v133;
                float32x4_t v103 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 0);
                float32x4_t v131 = vdivq_f32(v131, v103);
              }
              v131.i32[3] = v329.i32[v129];
              *(&buf + v129++) = v131;
            }
            while (v129 != 3);
            re::ecs2::ClippingParametersRegistry::add(v310, (long long *)&buf, (uint64_t)v327);
            if (v327[0])
            {
              if (v308) {
                re::DynamicOverflowArray<unsigned short,8ul>::add(v331, &v328);
              }
              if (v98)
              {
                re::DynamicOverflowArray<unsigned short,8ul>::add(v387, &v328);
                simd_float4 v390 = (simd_float4)v333;
                simd_float4 v391 = (simd_float4)v334;
              }
            }
            else if ((atomic_exchange(byte_26AF91FA9, 1u) & 1) == 0)
            {
              v135 = *re::ecsComponentsLogObjects(v134);
              if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
              {
                v136 = v386[35];
                *(_DWORD *)v393 = 134218242;
                *(void *)&v393[4] = 1024;
                *(_WORD *)&v393[12] = 2080;
                *(void *)&v393[14] = v136;
                _os_log_impl(&dword_233120000, v135, OS_LOG_TYPE_DEFAULT, "Current frame has more than %zu unique clip primitives. Unable to add clip primitive for entity '%s'.", v393, 0x16u);
              }
            }
          }
          else
          {
            uint64_t v94 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v386 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ClippingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v94)
            {
              _S0 = *(_DWORD *)(v94 + 64);
              __asm { FCVT            H2, S0 }
              float32x4_t v97 = *(float32x4_t *)(v94 + 32);
              simd_float4 v361 = *(simd_float4 *)(v94 + 48);
              float32x4_t v335 = v97;
              float32x4_t v336 = (float32x4_t)v361;
              *(int16x4_t *)v97.f32 = vdup_lane_s16((int16x4_t)_H2, 0);
              uint64_t v92 = (unsigned char *)(v94 + 68);
              v97.i16[1] = 0;
              uint64_t v317 = v97.i64[0];
              unsigned __int16 v320 = _H2;
              BOOL v93 = 1;
              _H9 = _H2;
              _H10 = _H2;
              goto LABEL_122;
            }
            float32x4_t v333 = (float32x4_t)v390;
            float32x4_t v334 = (float32x4_t)v391;
            re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v331, v387);
            char v100 = 1;
LABEL_155:
            v119 = v292;
          }
          v137 = re::ecs2::RenderOptions::forEntity(v314, (unint64_t)v386);
          if (v137[18]) {
            _ZF = v137[19] == 0;
          }
          else {
            _ZF = 1;
          }
          if (_ZF)
          {
            if (v331[1]) {
              goto LABEL_170;
            }
            goto LABEL_183;
          }
          unint64_t v139 = v392[0];
          uint64_t v140 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v119, v392[0]);
          if (v140 == -1)
          {
            simd_float4 v361 = 0u;
            v362.columns[0] = 0u;
            float32x4_t buf = 0u;
            v362.columns[0].i32[1] = 0x7FFFFFFF;
            uint64_t v142 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v119, v139);
            if (v142 == -1) {
              v141 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(v119, (uint64_t *)v392, (uint64_t)&buf);
            }
            else {
              v141 = (void *)(*(void *)(a1 + 560) + 56 * v142 + 8);
            }
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf);
          }
          else
          {
            v141 = (void *)(*(void *)(a1 + 560) + 56 * v140 + 8);
          }
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v141, (uint64_t *)&v386);
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v289, (uint64_t *)&v386);
LABEL_170:
          buf.i64[0] = v392[0];
          simd_float4 v143 = *(simd_float4 *)v59;
          simd_float4 v144 = *(simd_float4 *)(v59 + 16);
          simd_float4 v145 = *(simd_float4 *)(v59 + 48);
          v362.columns[1] = *(simd_float4 *)(v59 + 32);
          v362.columns[2] = v145;
          simd_float4 v361 = v143;
          v362.columns[0] = v144;
          v362.columns[3] = (simd_float4)v333;
          float32x4_t v363 = v334;
          re::AABB::transform(&v333, (float32x4_t *)v59, (uint64_t)&v364);
          re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)&v366, v331);
          int v369 = 0;
          __int16 v370 = 0;
          char v371 = v100;
          unint64_t v146 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * ((unint64_t)v386 ^ ((unint64_t)v386 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v386 ^ ((unint64_t)v386 >> 30))) >> 27));
          unint64_t v147 = v146 ^ (v146 >> 31);
          if (*v323)
          {
            unint64_t v148 = v147 % *(unsigned int *)(a1 + 80);
            uint64_t v149 = *(unsigned int *)(*(void *)(a1 + 64) + 4 * v148);
            if (v149 != 0x7FFFFFFF)
            {
              uint64_t v150 = *(void *)(a1 + 72);
              while (*(re::ecs2::TransformComponent ***)(v150 + 224 * v149 + 16) != v386)
              {
                LODWORD(v149) = *(_DWORD *)(v150 + 224 * v149 + 8) & 0x7FFFFFFF;
                if (v149 == 0x7FFFFFFF) {
                  goto LABEL_177;
                }
              }
              uint64_t v152 = v150 + 224 * v149;
LABEL_179:
              uint64_t v153 = v152 + 32;
              if (v366.i64[0] && (v367[0] & 1) == 0) {
                (*(void (**)(void))(*(void *)v366.i64[0] + 40))();
              }
              re::ecs2::ClippingParametersRegistry::registerClippingParameterDataRefs(v310, v153);
LABEL_183:
              v154 = v386;
              uint64_t v155 = v386[26];
              *(void *)v393 = v155;
              if (v155 && *((unsigned char *)v155 + 131))
              {
                re::HashSetBase<re::ecs2::PortalComponent const*,re::ecs2::PortalComponent const*,re::internal::ValueAsKey<re::ecs2::PortalComponent const*>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>::add(v288, (uint64_t *)v393);
                v154 = v386;
              }
              uint64_t v156 = v154[41];
              if (v156)
              {
                v157 = v154[43];
                uint64_t v158 = 8 * (void)v156;
                do
                {
                  uint64_t v159 = *(void *)v157;
                  (*(void (**)(float32x4_t *__return_ptr))(**(void **)v21 + 8))(&buf);
                  if (buf.i8[0]) {
                    uint64_t v160 = buf.i64[1];
                  }
                  else {
                    uint64_t v160 = 0;
                  }
                  buf.i64[0] = (uint64_t)v58;
                  buf.i64[1] = v59;
                  v361.i64[0] = v159;
                  if (v392[0] == v160)
                  {
                    re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)&v361.i64[1], v387);
                    v362.columns[2] = v390;
                    v362.columns[3] = v391;
                    uint64_t v160 = v392[0];
                  }
                  else
                  {
                    v361.i64[1] = 0;
                    v362.columns[0].i64[0] = 0;
                    v362.columns[0].i32[2] = 1;
                    v362.columns[1] = 0uLL;
                    v161.i64[0] = 0x7F0000007FLL;
                    v161.i64[1] = 0x7F0000007FLL;
                    v362.columns[2] = v161;
                    v362.columns[3] = (simd_float4)v325;
                  }
                  v363.i64[0] = v160;
                  __n128 v46 = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::add((uint64_t)&v337, (long long *)&buf);
                  if (v361.i64[1] && (v362.columns[0].i8[8] & 1) == 0) {
                    (*(void (**)(__n128))(*(void *)v361.i64[1] + 40))(v46);
                  }
                  v157 = (re::ecs2::TransformComponent *)((char *)v157 + 8);
                  v158 -= 8;
                }
                while (v158);
              }
              if (v331[0] && (v332 & 1) == 0) {
                (*(void (**)(void))(*(void *)v331[0] + 40))();
              }
              uint64_t v8 = &v335;
LABEL_202:
              uint64_t v47 = v387[0];
              if (v387[0] && (v388 & 1) == 0)
              {
                uint64_t v48 = v389;
                goto LABEL_103;
              }
              continue;
            }
          }
          else
          {
            LODWORD(v148) = 0;
          }
          break;
        }
LABEL_177:
        unsigned int v151 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove((uint64_t)v323, v148, v147, &v386, (uint64_t)&buf);
        ++*(_DWORD *)(a1 + 96);
        uint64_t v152 = *(void *)(a1 + 72) + 224 * v151;
        goto LABEL_179;
      }
LABEL_94:
      uint64_t v16 = *(void *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1)) {
        int v49 = v5 + 1;
      }
      else {
        int v49 = *(_DWORD *)(v2 + 32);
      }
      while (1)
      {
        uint64_t v15 = (v5 + 1);
        if (v49 - 1 == v5) {
          break;
        }
        LODWORD(v5) = v5 + 1;
        int v50 = v15;
        if ((*(_DWORD *)(v16 + 24 * v15 + 8) & 0x80000000) != 0) {
          goto LABEL_101;
        }
      }
      int v50 = v49;
LABEL_101:
      LODWORD(v5) = v50;
    }
    while (v4 != v50);
  }
  uint64_t v9 = *(void **)(v3 + 840);
  uint64_t v10 = *(void *)(v3 + 856);
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v385);
  v358.i32[0] = 0;
  float32x4_t v356 = 0u;
  float32x4_t v357 = 0u;
  *(uint64_t *)((char *)v358.i64 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x7FFFFFFFLL;
  re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::init((uint64_t)&v356, (uint64_t)&v385, 3);
  uint64_t v11 = *(unsigned int *)(v3 + 648);
  if (v11)
  {
    uint64_t v12 = 0;
    int v13 = (int *)(*(void *)(v3 + 632) + 8);
    while (1)
    {
      int v14 = *v13;
      v13 += 6;
      if (v14 < 0) {
        break;
      }
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(v3 + 648);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if (v11 != v12)
  {
    uint64_t v162 = v12;
    uint64_t v163 = *(void *)(v3 + 632);
    do
    {
      uint64_t v164 = *(void *)(v163 + 24 * v162 + 16);
      (*(void (**)(float32x4_t *__return_ptr))(*(void *)*v9 + 8))(&buf);
      if (buf.i8[0]) {
        uint64_t v165 = buf.i64[1];
      }
      else {
        uint64_t v165 = 0;
      }
      uint64_t v166 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 32))(*v9, v165);
      uint64_t v167 = v166;
      uint64_t v168 = *(unsigned int *)(v166 + 32);
      if (v168)
      {
        uint64_t v169 = 0;
        v170 = (int *)(*(void *)(v166 + 16) + 8);
        while (1)
        {
          int v171 = *v170;
          v170 += 6;
          if (v171 < 0) {
            break;
          }
          if (v168 == ++v169)
          {
            LODWORD(v169) = *(_DWORD *)(v166 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v169) = 0;
      }
      if (v168 != v169)
      {
        uint64_t v172 = v169;
        uint64_t v173 = *(void *)(v166 + 16);
        unsigned int v174 = *(_DWORD *)(v166 + 32);
        do
        {
          uint64_t v175 = *(void *)(v173 + 24 * v172 + 16);
          if (*(unsigned char *)(v175 + 131))
          {
            buf.i64[0] = v164;
            buf.i64[1] = v175;
            re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::add((uint64_t)&v356, (uint64_t *)&buf);
            unsigned int v174 = *(_DWORD *)(v167 + 32);
            uint64_t v173 = *(void *)(v167 + 16);
          }
          if (v174 <= (int)v169 + 1) {
            unsigned int v176 = v169 + 1;
          }
          else {
            unsigned int v176 = v174;
          }
          while (1)
          {
            uint64_t v172 = (v169 + 1);
            if (v176 - 1 == v169) {
              break;
            }
            LODWORD(v169) = v169 + 1;
            unsigned int v177 = v172;
            if ((*(_DWORD *)(v173 + 24 * v172 + 8) & 0x80000000) != 0) {
              goto LABEL_239;
            }
          }
          unsigned int v177 = v176;
LABEL_239:
          LODWORD(v169) = v177;
        }
        while (v168 != v177);
      }
      uint64_t v3 = a1;
      uint64_t v163 = *(void *)(a1 + 632);
      if (*(_DWORD *)(a1 + 648) <= (v12 + 1)) {
        int v178 = v12 + 1;
      }
      else {
        int v178 = *(_DWORD *)(a1 + 648);
      }
      while (1)
      {
        uint64_t v162 = (v12 + 1);
        if (v178 - 1 == v12) {
          break;
        }
        LODWORD(v12) = v12 + 1;
        int v179 = v162;
        if ((*(_DWORD *)(v163 + 24 * v162 + 8) & 0x80000000) != 0) {
          goto LABEL_247;
        }
      }
      int v179 = v178;
LABEL_247:
      LODWORD(v12) = v179;
    }
    while (v11 != v179);
  }
  uint64_t v180 = *(unsigned int *)(v3 + 696);
  if (v180)
  {
    uint64_t v181 = 0;
    v182 = (int *)(*(void *)(v3 + 680) + 8);
    while (1)
    {
      int v183 = *v182;
      v182 += 6;
      if (v183 < 0) {
        break;
      }
      if (v180 == ++v181)
      {
        LODWORD(v181) = *(_DWORD *)(v3 + 696);
        break;
      }
    }
  }
  else
  {
    LODWORD(v181) = 0;
  }
  if (v180 != v181)
  {
    uint64_t v184 = v181;
    v185 = (void *)(v3 + 552);
    uint64_t v186 = *(void *)(v3 + 680);
    do
    {
      uint64_t v187 = *(void *)(v186 + 24 * v184 + 16);
      v188 = re::ecs2::PortalComponent::targetWorldRootToken(v187, v10);
      uint64_t v189 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v185, (unint64_t)v188);
      if (v189 != -1)
      {
        uint64_t v190 = *(void *)(a1 + 560) + 56 * v189;
        uint64_t v191 = v190 + 8;
        uint64_t v192 = *(unsigned int *)(v190 + 40);
        if (v192)
        {
          uint64_t v193 = 0;
          v194 = (int *)(*(void *)(v190 + 24) + 8);
          while (1)
          {
            int v195 = *v194;
            v194 += 6;
            if (v195 < 0) {
              break;
            }
            if (v192 == ++v193)
            {
              LODWORD(v193) = v192;
              break;
            }
          }
        }
        else
        {
          LODWORD(v193) = 0;
        }
        if (v192 != v193)
        {
          uint64_t v196 = v193;
          do
          {
            buf.i64[0] = *(void *)(*(void *)(v191 + 16) + 24 * v196 + 16);
            buf.i64[1] = v187;
            re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::add((uint64_t)&v356, (uint64_t *)&buf);
            if (*(_DWORD *)(v191 + 32) <= (v193 + 1)) {
              int v197 = v193 + 1;
            }
            else {
              int v197 = *(_DWORD *)(v191 + 32);
            }
            int v198 = v193;
            while (1)
            {
              uint64_t v196 = (v198 + 1);
              if (v197 - 1 == v198) {
                break;
              }
              ++v198;
              LODWORD(v193) = v196;
              if ((*(_DWORD *)(*(void *)(v191 + 16) + 24 * v196 + 8) & 0x80000000) != 0) {
                goto LABEL_273;
              }
            }
            LODWORD(v193) = v197;
LABEL_273:
            ;
          }
          while (v192 != v193);
        }
      }
      uint64_t v3 = a1;
      uint64_t v186 = *(void *)(a1 + 680);
      if (*(_DWORD *)(a1 + 696) <= (v181 + 1)) {
        int v199 = v181 + 1;
      }
      else {
        int v199 = *(_DWORD *)(a1 + 696);
      }
      while (1)
      {
        uint64_t v184 = (v181 + 1);
        if (v199 - 1 == v181) {
          break;
        }
        LODWORD(v181) = v181 + 1;
        int v200 = v184;
        if ((*(_DWORD *)(v186 + 24 * v184 + 8) & 0x80000000) != 0) {
          goto LABEL_281;
        }
      }
      int v200 = v199;
LABEL_281:
      LODWORD(v181) = v200;
    }
    while (v180 != v200);
  }
  __int32 v326 = v358.i32[0];
  uint64_t v201 = 0;
  if (v358.i32[0])
  {
    v202 = (int *)(v357.i64[0] + 8);
    while (1)
    {
      int v203 = *v202;
      v202 += 8;
      if (v203 < 0) {
        break;
      }
      if (v358.u32[0] == ++v201)
      {
        LODWORD(v201) = v358.i32[0];
        break;
      }
    }
  }
  if (v358.i32[0] == v201)
  {
LABEL_288:
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v356);
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v385);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v3 + 616);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v3 + 664);
    return;
  }
  uint64_t v204 = v201;
  uint64_t v321 = v3 + 56;
  uint64_t v301 = v3 + 712;
  v305 = (void *)(v3 + 296);
  v290 = (_anonymous_namespace_ *)(v3 + 424);
  v291 = (_anonymous_namespace_ *)(v3 + 360);
  v324 = (uint64_t *)(v3 + 488);
  uint64_t v205 = v357.i64[0];
  int32x4_t v309 = vdupq_n_s32(0x7F800000u);
  while (1)
  {
    uint64_t v206 = v205 + 32 * v204;
    unint64_t v207 = *(void *)(v206 + 16);
    v344[0] = v207;
    unint64_t v337 = *(void *)(v206 + 24);
    uint64_t v208 = v337;
    uint64_t v209 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v321, v207);
    uint64_t v210 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v321, *(void *)(v208 + 16));
    uint64_t v211 = v210;
    v374.columns[0] = (simd_float4)xmmword_23435FD50;
    v374.columns[1] = (simd_float4)xmmword_23435FD60;
    v374.columns[2] = (simd_float4)xmmword_23435FD80;
    v374.columns[3] = (simd_float4)xmmword_23435FBB0;
    v212.i64[0] = 0x7F0000007FLL;
    v212.i64[1] = 0x7F0000007FLL;
    float32x4_t v375 = v212;
    float32x4_t v376 = (float32x4_t)v309;
    float32x4_t v377 = v212;
    float32x4_t v378 = (float32x4_t)v309;
    uint64_t v379 = 0;
    uint64_t v380 = 0;
    int v381 = 1;
    uint64_t v382 = 0;
    uint64_t v383 = 0;
    *(_DWORD *)v384 = 0;
    v384[6] = 1;
    if (v209)
    {
      v373.i64[0] = *(void *)v209;
      simd_float4 v213 = *(simd_float4 *)(v209 + 16);
      simd_float4 v214 = *(simd_float4 *)(v209 + 32);
      simd_float4 v215 = *(simd_float4 *)(v209 + 64);
      v374.columns[2] = *(simd_float4 *)(v209 + 48);
      v374.columns[3] = v215;
      v374.columns[0] = v213;
      v374.columns[1] = v214;
      float32x4_t v216 = *(float32x4_t *)(v209 + 96);
      float32x4_t v375 = *(float32x4_t *)(v209 + 80);
      float32x4_t v376 = v216;
      float32x4_t v217 = *(float32x4_t *)(v209 + 128);
      float32x4_t v377 = *(float32x4_t *)(v209 + 112);
      float32x4_t v378 = v217;
      v384[6] = *(unsigned char *)(v209 + 190);
      unint64_t v218 = *(void *)(v209 + 152);
      if (v210) {
        goto LABEL_292;
      }
    }
    else
    {
      unint64_t v218 = 0;
      if (v210)
      {
LABEL_292:
        unint64_t v219 = *(void *)(v210 + 152);
        re::DynamicOverflowArray<unsigned short,8ul>::resize((_anonymous_namespace_ *)&v379, v219 + v218);
        simd_float4x4 v403 = __invert_f4(v374);
        uint64_t v220 = 0;
        long long v221 = *(_OWORD *)(v211 + 32);
        float32x4_t v222 = *(float32x4_t *)(v211 + 48);
        float32x4_t v223 = *(float32x4_t *)(v211 + 64);
        *(_OWORD *)v393 = *(_OWORD *)(v211 + 16);
        *(_OWORD *)&v393[16] = v221;
        float32x4_t v394 = v222;
        float32x4_t v395 = v223;
        do
        {
          *(float32x4_t *)((char *)&buf + v220) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v403.columns[0], COERCE_FLOAT(*(_OWORD *)&v393[v220])), (float32x4_t)v403.columns[1], *(float32x2_t *)&v393[v220], 1), (float32x4_t)v403.columns[2], *(float32x4_t *)&v393[v220], 2), (float32x4_t)v403.columns[3], *(float32x4_t *)&v393[v220], 3);
          v220 += 16;
        }
        while (v220 != 64);
        re::AABB::transform((float32x4_t *)(v211 + 80), &buf, (uint64_t)v393);
        float32x4_t v224 = v375;
        float32x4_t v225 = v376;
        v224.i32[3] = 0;
        float32x4_t v226 = *(float32x4_t *)v393;
        float32x4_t v227 = *(float32x4_t *)&v393[16];
        v226.i32[3] = 0;
        v225.i32[3] = 0;
        v227.i32[3] = 0;
        float32x4_t v375 = vmaxnmq_f32(v224, v226);
        float32x4_t v376 = vminnmq_f32(v225, v227);
        float32x4_t v228 = v377;
        float32x4_t v229 = v378;
        v228.i32[3] = 0;
        float32x4_t v230 = *(float32x4_t *)(v211 + 112);
        float32x4_t v231 = *(float32x4_t *)(v211 + 128);
        v230.i32[3] = 0;
        v229.i32[3] = 0;
        v231.i32[3] = 0;
        float32x4_t v377 = vmaxnmq_f32(v228, v230);
        float32x4_t v378 = vminnmq_f32(v229, v231);
        if (*(unsigned char *)(v211 + 160)) {
          v232 = (char *)(v211 + 168);
        }
        else {
          v232 = *(char **)(v211 + 176);
        }
        re::DynamicOverflowArray<unsigned short,8ul>::copy((char *)&v379, 0, v232, v219);
        if (!v209) {
          goto LABEL_305;
        }
        goto LABEL_301;
      }
    }
    re::DynamicOverflowArray<unsigned short,8ul>::resize((_anonymous_namespace_ *)&v379, v218);
    unint64_t v219 = 0;
    if (!v209) {
      goto LABEL_305;
    }
LABEL_301:
    v233 = (*(unsigned char *)(v209 + 160) & 1) != 0 ? (char *)(v209 + 168) : *(char **)(v209 + 176);
    re::DynamicOverflowArray<unsigned short,8ul>::copy((char *)&v379, v219, v233, v218);
LABEL_305:
    uint64_t v8 = &v335;
    uint64_t v3 = a1;
    if (v380) {
      break;
    }
LABEL_345:
    if (v379 && (v381 & 1) == 0) {
      (*(void (**)(void))(*(void *)v379 + 40))();
    }
    uint64_t v205 = v357.i64[0];
    if (v358.i32[0] <= (v201 + 1)) {
      __int32 v281 = v201 + 1;
    }
    else {
      __int32 v281 = v358.i32[0];
    }
    while (1)
    {
      uint64_t v204 = (v201 + 1);
      if (v281 - 1 == v201) {
        break;
      }
      LODWORD(v201) = v201 + 1;
      __int32 v282 = v204;
      if ((*(_DWORD *)(v357.i64[0] + 32 * v204 + 8) & 0x80000000) != 0) {
        goto LABEL_355;
      }
    }
    __int32 v282 = v281;
LABEL_355:
    LODWORD(v201) = v282;
    if (v326 == v282) {
      goto LABEL_288;
    }
  }
  re::ecs2::ClippingParametersRegistry::registerClippingParameterDataRefs(v301, (uint64_t)&v373);
  buf.i64[0] = v208;
  buf.i64[1] = v207;
  float32x4_t v364 = v376;
  float32x4_t v365 = v377;
  float32x4_t v366 = v378;
  simd_float4x4 v362 = v374;
  float32x4_t v363 = v375;
  simd_float4 v361 = v373;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray((uint64_t)v367, (uint64_t)&v379);
  v372[0] = *(_DWORD *)v384;
  *(_DWORD *)((char *)v372 + 3) = *(_DWORD *)&v384[3];
  int v235 = *(_DWORD *)(a1 + 352);
  if ((v235 + 1) >> 24) {
    int v236 = 1;
  }
  else {
    int v236 = v235 + 1;
  }
  *(_DWORD *)(a1 + 352) = v236;
  uint64_t v237 = *(unsigned __int16 *)(a1 + 348);
  unint64_t v17 = *(unsigned __int16 *)(a1 + 350);
  if (v237 == 0xFFFF && v17 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 344) >= *(_DWORD *)(a1 + 340)) {
      re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::allocBlock(v305);
    }
    uint64_t v238 = *(void *)(a1 + 312);
    unint64_t v17 = (unsigned __int16)(v238 - 1);
    if (!v238) {
      goto LABEL_366;
    }
    uint64_t v237 = *(unsigned int *)(a1 + 344);
    if (v237 >= 0x10000) {
      goto LABEL_368;
    }
    v239 = (void *)(*(void *)(a1 + 328) + 16 * v17);
    *(_DWORD *)(a1 + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v237 + 1;
    *(_DWORD *)(v239[1] + 4 * v237) = *(_DWORD *)(a1 + 352);
    uint64_t v240 = *v239 + 208 * v237;
  }
  else
  {
    uint64_t v8 = *(float32x4_t **)(a1 + 312);
    if ((unint64_t)v8 <= v17) {
      goto LABEL_367;
    }
    v241 = (void *)(*(void *)(a1 + 328) + 16 * v17);
    *(_DWORD *)(v241[1] + 4 * v237) = v236;
    uint64_t v240 = *v241 + 208 * v237;
    *(_DWORD *)(a1 + 348) = *(_DWORD *)v240;
  }
  ++*(_DWORD *)(a1 + 336);
  *(float32x4_t *)uint64_t v240 = buf;
  simd_float4 v242 = v362.columns[3];
  simd_float4 v244 = v362.columns[0];
  simd_float4 v243 = v362.columns[1];
  *(simd_float4 *)(v240 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v362.columns[2];
  *(simd_float4 *)(v240 + 80) = v242;
  *(simd_float4 *)(v240 + 32) = v244;
  *(simd_float4 *)(v240 + 48) = v243;
  float32x4_t v245 = v366;
  float32x4_t v247 = v363;
  float32x4_t v246 = v364;
  *(float32x4_t *)(v240 + 128) = v365;
  *(float32x4_t *)(v240 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v245;
  *(float32x4_t *)(v240 + 96) = v247;
  *(float32x4_t *)(v240 + 112) = v246;
  *(simd_float4 *)(v240 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v361;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(v240 + 160, (uint64_t)v367);
  int v248 = v372[0];
  *(_DWORD *)(v240 + 203) = *(_DWORD *)((char *)v372 + 3);
  *(_DWORD *)(v240 + 200) = v248;
  *(void *)v393 = (v17 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 352) & 0xFFFFFF) << 32) | v237;
  if (v367[0] && (v368 & 1) == 0) {
    (*(void (**)(void))(*(void *)v367[0] + 40))();
  }
  unint64_t v249 = v344[0];
  uint64_t v250 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v291, v344[0]);
  if (v250 != -1
    || (float32x4_t buf = 0uLL,
        v361.i32[0] = 1,
        v361.i64[1] = 0,
        v362.columns[0].i64[0] = 0,
        uint64_t v250 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v291, v249), v250 != -1))
  {
    v251 = (int *)(*(void *)(a1 + 368) + 96 * v250 + 8);
    goto LABEL_324;
  }
  v251 = (int *)re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(v291, v344, (uint64_t)&buf);
  if (buf.i64[0])
  {
    v252 = v290;
    if ((v361.i8[0] & 1) == 0) {
      (*(void (**)(void))(*(void *)buf.i64[0] + 40))();
    }
  }
  else
  {
LABEL_324:
    v252 = v290;
  }
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::add(v251, v393);
  unint64_t v253 = v337;
  uint64_t v254 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v252, v337);
  if (v254 == -1
    && (float32x4_t buf = 0uLL,
        v361.i32[0] = 1,
        v361.i64[1] = 0,
        v362.columns[0].i64[0] = 0,
        uint64_t v254 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v252, v253), v254 == -1))
  {
    v255 = (int *)re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::internalAdd(v252, (uint64_t *)&v337, (uint64_t)&buf);
    if (buf.i64[0] && (v361.i8[0] & 1) == 0) {
      (*(void (**)(void))(*(void *)buf.i64[0] + 40))();
    }
  }
  else
  {
    v255 = (int *)(*(void *)(a1 + 432) + 96 * v254 + 8);
  }
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::add(v255, v393);
  unint64_t v256 = v344[0];
  unint64_t v257 = v337;
  uint64_t v258 = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(v324, v344[0], v337);
  if (v258 != -1)
  {
    unint64_t v259 = *(void *)(*(void *)(a1 + 496) + 24 * v258 + 16);
    if (re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet((uint64_t)v305, v259)) {
      re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy((uint64_t)v305, v259);
    }
  }
  uint64_t v260 = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(v324, v256, v257);
  if (v260 != -1)
  {
    *(void *)(*(void *)(a1 + 496) + 24 * v260 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(void *)v393;
    goto LABEL_345;
  }
  if (!*(void *)(a1 + 544))
  {
  }
  uint64_t v262 = *(void *)(a1 + 520);
  if (!v262 || (unint64_t v263 = *(void *)(a1 + 504), v263 > 8 * v262))
  {
    re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(v324, 1u);
    unint64_t v263 = *(void *)(a1 + 504);
  }
  unint64_t v264 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v256 ^ (v256 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v256 ^ (v256 >> 30))) >> 27));
  unint64_t v265 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v257 ^ (v257 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v257 ^ (v257 >> 30))) >> 27));
  unint64_t v266 = ((v265 ^ (v265 >> 31)) - 0x61C8864680B583E9 + ((v264 ^ (v264 >> 31)) << 6) + ((v264 ^ (v264 >> 31)) >> 2)) ^ v264 ^ (v264 >> 31);
  unint64_t v267 = v263 >> 4;
  unint64_t v268 = v266 % (v263 >> 4);
  uint64_t v269 = *v324;
  unint64_t v270 = v268;
  do
  {
    unint64_t v271 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v269 + 16 * v270)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v271 < 0x40)
    {
      uint64_t v272 = v269 + 16 * v270;
      int v273 = *(unsigned __int8 *)(v272 + v271);
      *(unsigned char *)(v272 + v271) = v266 & 0x7F;
      uint64_t v274 = v273 == 255;
      unint64_t v275 = *(void *)v393;
      uint64_t v276 = 3 * (v271 + 16 * v270);
      v277 = (unint64_t *)(*(void *)(a1 + 496) + 8 * v276);
      unint64_t *v277 = v256;
      v277[1] = v257;
      v277[2] = v275;
      ++*(void *)(a1 + 512);
      *(void *)(a1 + 520) -= v274;
      v278 = (void *)(*(void *)(a1 + 496) + 8 * v276);
      unint64_t v279 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (*v278 ^ (*v278 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v278 ^ (*v278 >> 30))) >> 27));
      unint64_t v280 = 0xBF58476D1CE4E5B9 * (v278[1] ^ (v278[1] >> 30));
      *(void *)(a1 + 528) ^= v279 ^ (v279 >> 31) ^ (((0x94D049BB133111EBLL * (v280 ^ (v280 >> 27))) ^ ((0x94D049BB133111EBLL * (v280 ^ (v280 >> 27))) >> 31))
                                                    - 0x61C8864680B583E9
                                                    + ((v279 ^ (v279 >> 31)) << 6)
                                                    + ((v279 ^ (v279 >> 31)) >> 2));
      goto LABEL_345;
    }
    if (v270 + 1 == v267) {
      unint64_t v270 = 0;
    }
    else {
      ++v270;
    }
  }
  while (v270 != v268);
  re::internal::assertLog((re::internal *)4, v261, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
  _os_crash();
  __break(1u);
}

void re::ecs2::ClippingParameterDataStateTracking::clearEntityHierarchyStateData(re::ecs2::ClippingParameterDataStateTracking *this, const re::ecs2::Entity *a2)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 21))
  {
    uint64_t v3 = this;
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v93);
    v87[0] = 0;
    v87[1] = 0;
    int v88 = 1;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v89 = 0;
    int v92 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v87, (uint64_t)v93, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v87) = a2;
    uint64_t v4 = v91;
    if (v91)
    {
      uint64_t v5 = (uint64_t)v3 + 712;
      unint64_t v83 = (long long *)((char *)v3 + 360);
      uint64_t v6 = (uint64_t)v3 + 296;
      unint64_t v84 = (long long *)((char *)v3 + 424);
      int v7 = (uint64_t *)((char *)v3 + 488);
      uint64_t v74 = (uint64_t)v3 + 616;
      uint64_t v75 = (uint64_t)v3 + 56;
      uint64_t v72 = (uint64_t)v3 + 664;
      float32x4_t v73 = (long long *)((char *)v3 + 552);
      id v78 = (char *)v3 + 712;
      uint64_t v79 = v3;
      v80 = (uint64_t *)((char *)v3 + 488);
      do
      {
        unint64_t v86 = 0;
        unint64_t v86 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v87, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v87, --v91);
        ++v92;
        uint64_t v8 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v75, v86);
        if (v8)
        {
          uint64_t v9 = (unint64_t *)v8;
          re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(v5, v8);
          re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v75, v86);
          unint64_t v10 = *v9;
          uint64_t v11 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v73, v10);
          if (v11 != -1)
          {
            uint64_t v12 = *((void *)v3 + 70) + 56 * v11;
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v12 + 8, (uint64_t *)&v86);
            if (!*(_DWORD *)(v12 + 36))
            {
              uint64_t v13 = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(v73, v10);
              if (v13 != -1)
              {
                int v14 = (int8x16_t *)(*((void *)v3 + 69) + (v13 & 0xFFFFFFFFFFFFFFF0));
                v15.i64[0] = -1;
                v15.i64[1] = -1;
                int8x8_t v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v14, v15), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
                if (v16) {
                  char v17 = -1;
                }
                else {
                  char v17 = 0x80;
                }
                v14->i8[v13 & 0xF] = v17;
                unint64_t v18 = (void *)(*((void *)v3 + 70) + 56 * v13);
                unint64_t v19 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (*v18 ^ (*v18 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v18 ^ (*v18 >> 30))) >> 27));
                *((void *)v3 + 74) ^= (v19 >> 31) ^ v19;
                re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v18 + 1);
                uint64_t v20 = *((void *)v3 + 73);
                if (v16) {
                  ++v20;
                }
                unint64_t v21 = *((void *)v3 + 72) - 1;
                *((void *)v3 + 72) = v21;
                *((void *)v3 + 73) = v20;
                unint64_t v22 = *((void *)v3 + 71);
                if (v22 >= 0x11 && v21 < v22 >> 2) {
                  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v73, 0);
                }
              }
            }
          }
        }
        unint64_t v23 = v86;
        uint64_t v24 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v83, v86);
        if (v24 != -1)
        {
          uint64_t v25 = *((void *)v3 + 46);
          if (*(unsigned char *)(v25 + 96 * v24 + 24)) {
            uint64_t v26 = (uint64_t *)(v25 + 96 * v24 + 32);
          }
          else {
            uint64_t v26 = *(uint64_t **)(v25 + 96 * v24 + 40);
          }
          uint64_t v27 = *(void *)(v25 + 96 * v24 + 16);
          uint64_t v28 = &v26[v27];
          float32x4_t v76 = v28;
          if (v27)
          {
            do
            {
              uint64_t v29 = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *v26);
              if (v29)
              {
                uint64_t v30 = (unint64_t *)v29;
                re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(v5, v29 + 16);
                re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy(v6, *v26);
                unint64_t v31 = *v30;
                uint64_t v32 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v84, v31);
                if (v32 != -1)
                {
                  uint64_t v33 = *((void *)v3 + 54);
                  uint64_t v34 = v33 + 96 * v32;
                  unint64_t v37 = *(void *)(v34 + 16);
                  uint64_t v36 = (unint64_t *)(v34 + 16);
                  unint64_t v35 = v37;
                  if ((int)v37 >= 1)
                  {
                    unint64_t v81 = v31;
                    uint64_t v38 = v33 + 96 * v32;
                    simd_float4 v39 = (unsigned char *)(v38 + 24);
                    uint64_t v40 = v38 + 32;
                    simd_float4 v41 = (uint64_t *)(v38 + 40);
                    unint64_t v42 = v35 + 1;
                    do
                    {
                      unint64_t v43 = (v42 - 2);
                      unint64_t v44 = *v36;
                      if (*v36 <= v43)
                      {
                        uint64_t v94 = 0;
                        long long v106 = 0u;
                        long long v107 = 0u;
                        long long v104 = 0u;
                        long long v105 = 0u;
                        long long v103 = 0u;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        int v95 = 136315906;
                        v96 = "operator[]";
                        __int16 v97 = 1024;
                        int v98 = 858;
                        __int16 v99 = 2048;
                        unint64_t v100 = (v42 - 2);
                        __int16 v101 = 2048;
                        unint64_t v102 = v44;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_72:
                        uint64_t v94 = 0;
                        long long v106 = 0u;
                        long long v107 = 0u;
                        long long v104 = 0u;
                        long long v105 = 0u;
                        long long v103 = 0u;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        int v95 = 136315906;
                        v96 = "operator[]";
                        __int16 v97 = 1024;
                        int v98 = 858;
                        __int16 v99 = 2048;
                        unint64_t v100 = v43;
                        __int16 v101 = 2048;
                        unint64_t v102 = v44;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
                      }
                      uint64_t v45 = v40;
                      if ((*v39 & 1) == 0) {
                        uint64_t v45 = *v41;
                      }
                      if (!re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *(void *)(v45 + 8 * v43)))re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::removeAt((uint64_t)(v36 - 1), (v42 - 2)); {
                      --v42;
                      }
                    }
                    while (v42 > 1);
                    unint64_t v35 = *v36;
                    uint64_t v5 = (uint64_t)v78;
                    uint64_t v3 = v79;
                    int v7 = v80;
                    unint64_t v31 = v81;
                    uint64_t v28 = v76;
                  }
                  if (!v35) {
                    re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::remove(v84, v31);
                  }
                }
                re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::remove(v7, v86, v31);
              }
              ++v26;
            }
            while (v26 != v28);
            unint64_t v23 = v86;
          }
          re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::remove(v83, v23);
        }
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v74, (uint64_t *)&v86);
        unint64_t v46 = v86;
        unint64_t v47 = *(void *)(v86 + 208);
        unint64_t v85 = v47;
        if (v47)
        {
          uint64_t v48 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v84, v47);
          if (v48 != -1)
          {
            uint64_t v49 = *((void *)v3 + 54);
            if (*(unsigned char *)(v49 + 96 * v48 + 24)) {
              int v50 = (uint64_t *)(v49 + 96 * v48 + 32);
            }
            else {
              int v50 = *(uint64_t **)(v49 + 96 * v48 + 40);
            }
            uint64_t v51 = *(void *)(v49 + 96 * v48 + 16);
            uint64_t v52 = &v50[v51];
            int v77 = v52;
            if (v51)
            {
              do
              {
                uint64_t v53 = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *v50);
                if (v53)
                {
                  uint64_t v54 = v53;
                  re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(v5, v53 + 16);
                  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy(v6, *v50);
                  unint64_t v55 = *(void *)(v54 + 8);
                  uint64_t v56 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v83, v55);
                  if (v56 != -1)
                  {
                    uint64_t v57 = *((void *)v3 + 46);
                    uint64_t v58 = v57 + 96 * v56;
                    unint64_t v61 = *(void *)(v58 + 16);
                    uint64_t v60 = (unint64_t *)(v58 + 16);
                    unint64_t v59 = v61;
                    if ((int)v61 >= 1)
                    {
                      unint64_t v82 = v55;
                      uint64_t v62 = v57 + 96 * v56;
                      float32x4_t v63 = (unsigned char *)(v62 + 24);
                      uint64_t v64 = v62 + 32;
                      unsigned __int16 v65 = (uint64_t *)(v62 + 40);
                      unint64_t v66 = v59 + 1;
                      do
                      {
                        unint64_t v43 = (v66 - 2);
                        unint64_t v44 = *v60;
                        if (*v60 <= v43) {
                          goto LABEL_72;
                        }
                        uint64_t v67 = v64;
                        if ((*v63 & 1) == 0) {
                          uint64_t v67 = *v65;
                        }
                        if (!re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(v6, *(void *)(v67 + 8 * v43)))re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::removeAt((uint64_t)(v60 - 1), (v66 - 2)); {
                        --v66;
                        }
                      }
                      while (v66 > 1);
                      unint64_t v59 = *v60;
                      uint64_t v5 = (uint64_t)v78;
                      uint64_t v3 = v79;
                      int v7 = v80;
                      unint64_t v55 = v82;
                      uint64_t v52 = v77;
                    }
                    if (!v59) {
                      re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::remove(v83, v55);
                    }
                  }
                  re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::remove(v7, v55, v85);
                }
                ++v50;
              }
              while (v50 != v52);
              unint64_t v47 = v85;
            }
            re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::remove(v84, v47);
          }
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v72, (uint64_t *)&v85);
          unint64_t v46 = v86;
        }
        uint64_t v68 = *(void *)(v46 + 328);
        if (v68)
        {
          uint32x4_t v69 = *(uint64_t **)(v46 + 344);
          uint64_t v70 = 8 * v68;
          do
          {
            uint64_t v71 = *v69++;
            *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v87) = v71;
            v70 -= 8;
          }
          while (v70);
        }
        uint64_t v4 = v91;
        int v7 = v80;
      }
      while (v91);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v87);
    if (v87[0])
    {
      if ((v88 & 1) == 0) {
        (*(void (**)(void))(*(void *)v87[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v93);
  }
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 224 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 224 * v3 + 8) & 0x7FFFFFFF;
      if (v3 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v5 + 224 * v3 + 16) == a2) {
        return v5 + 224 * v3 + 32;
      }
    }
    return 0;
  }
  return v5 + 224 * v3 + 32;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(uint64_t result, unint64_t a2)
{
  if (*(void *)result)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(result + 24);
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = *(unsigned int *)(v5 + 4 * v4);
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(result + 16);
      if (*(void *)(v7 + 224 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_DWORD *)(v7 + 224 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        uint64_t v10 = *(void *)(result + 16);
        uint64_t v11 = v10 + 224 * v6;
        int v14 = *(_DWORD *)(v11 + 8);
        uint64_t v13 = (int *)(v11 + 8);
        int v12 = v14;
        if (v14 < 0)
        {
          *uint64_t v13 = v12 & 0x7FFFFFFF;
          double result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v10 + 224 * v6 + 176);
          uint64_t v10 = *(void *)(v2 + 16);
          int v12 = *(_DWORD *)(v10 + 224 * v6 + 8);
        }
        int v15 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)(v10 + 224 * v6 + 8) = *(_DWORD *)(v2 + 36) | v12 & 0x80000000;
        --*(_DWORD *)(v2 + 28);
        *(_DWORD *)(v2 + 36) = v6;
        *(_DWORD *)(v2 + 40) = v15 + 1;
      }
      else
      {
        while (1)
        {
          unsigned int v8 = v6;
          int v9 = *(_DWORD *)(v7 + 224 * v6 + 8);
          uint64_t v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v7 + 224 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 224 * v8 + 8) = *(_DWORD *)(v7 + 224 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 224 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v4 = a2 >> 16;
  uint64_t result = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    uint64_t v6 = (_DWORD *)result;
    uint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(result + 160);
    if (*(void *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    _DWORD *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 5re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::removeAt(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = v2 - 1;
  if (v2 - 1 > a2)
  {
    if (*(unsigned char *)(result + 16)) {
      uint64_t v4 = result + 24;
    }
    else {
      uint64_t v4 = *(void *)(result + 32);
    }
    *(void *)(v4 + 8 * a2) = *(void *)(v4 + 8 * v2 - 8);
    uint64_t v3 = *(void *)(result + 8) - 1;
  }
  int v5 = *(_DWORD *)(result + 16);
  *(void *)(result + 8) = v3;
  *(_DWORD *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v5 + 2;
  return result;
}

void re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::remove(long long *a1, unint64_t a2)
{
  uint64_t v3 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    uint64_t v4 = (int8x16_t *)(*(void *)a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    int8x8_t v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    char v7 = *(void *)&v6 ? -1 : 0x80;
    v4->i8[v3 & 0xF] = v7;
    unsigned int v8 = (void *)(*((void *)a1 + 1) + 96 * v3);
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) >> 27));
    *((void *)a1 + 5) ^= (v9 >> 31) ^ v9;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v8 + 1));
    uint64_t v10 = *(void *)&v6 ? *((void *)a1 + 4) + 1 : *((void *)a1 + 4);
    unint64_t v11 = *((void *)a1 + 2);
    unint64_t v12 = *((void *)a1 + 3) - 1;
    *((void *)a1 + 3) = v12;
    *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2)
    {
      re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::resize(a1, 0);
    }
  }
}

uint64_t re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::remove(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t result = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(a1, a2, a3);
  if (result != -1)
  {
    int8x16_t v5 = (int8x16_t *)(*a1 + (result & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[result & 0xF] = v8;
    unint64_t v9 = a1[2];
    uint64_t v10 = (unint64_t *)(a1[1] + 24 * result);
    unint64_t v11 = *v10;
    unint64_t v12 = 0xBF58476D1CE4E5B9 * (v10[1] ^ (v10[1] >> 30));
    unint64_t v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
    a1[5] ^= v13 ^ (v13 >> 31) ^ (((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v12 ^ (v12 >> 27))) >> 31))
                                + ((v13 ^ (v13 >> 31)) << 6)
                                + ((v13 ^ (v13 >> 31)) >> 2)
                                - 0x61C8864680B583E9);
    uint64_t v14 = a1[4];
    if (v7) {
      ++v14;
    }
    unint64_t v15 = a1[3] - 1;
    a1[3] = v15;
    a1[4] = v14;
    if (v9 >= 0x11 && v15 < v9 >> 2)
    {
      return re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(a1, 0);
    }
  }
  return result;
}

void re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::remove(long long *a1, unint64_t a2)
{
  uint64_t v3 = re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    uint64_t v4 = (int8x16_t *)(*(void *)a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    int8x8_t v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    char v7 = *(void *)&v6 ? -1 : 0x80;
    v4->i8[v3 & 0xF] = v7;
    char v8 = (void *)(*((void *)a1 + 1) + 96 * v3);
    unint64_t v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*v8 ^ (*v8 >> 30))) >> 27));
    *((void *)a1 + 5) ^= (v9 >> 31) ^ v9;
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(v8 + 1));
    uint64_t v10 = *(void *)&v6 ? *((void *)a1 + 4) + 1 : *((void *)a1 + 4);
    unint64_t v11 = *((void *)a1 + 2);
    unint64_t v12 = *((void *)a1 + 3) - 1;
    *((void *)a1 + 3) = v12;
    *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    if (v11 >= 0x11 && v12 < v11 >> 2)
    {
      re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(a1, 0);
    }
  }
}

BOOL re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 224 * v3 + 16) == a2) {
    return 1;
  }
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 224 * v3 + 8) & 0x7FFFFFFF;
    BOOL result = v3 != 0x7FFFFFFF;
  }
  while (v3 != 0x7FFFFFFF && *(void *)(v5 + 224 * v3 + 16) != a2);
  return result;
}

__n128 re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::add(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::setBucketsCapacity((void *)a1, (v4 + 32) >> 5);
    unint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v6 = a1 + 24;
  }
  else {
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(void *)(v6 + 8 * (v4 >> 5));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  uint64_t v8 = v7 + 112 * (v4 & 0x1F);
  long long v9 = *a2;
  *(void *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v8 = v9;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(v8 + 24, (uint64_t)a2 + 24);
  __n128 result = (__n128)a2[4];
  long long v11 = a2[5];
  *(void *)(v8 + 96) = *((void *)a2 + 12);
  *(__n128 *)(v8 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = result;
  *(_OWORD *)(v8 + 80) = v11;
  return result;
}

void *re::DynamicOverflowArray<unsigned short,8ul>::add(void *result, _WORD *a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    unint64_t v4 = result[1];
    int v5 = *((_DWORD *)result + 4);
    if (v5) {
      unint64_t v6 = 8;
    }
    else {
      unint64_t v6 = result[3];
    }
    if (v4 >= v6)
    {
      __n128 result = re::DynamicOverflowArray<unsigned short,8ul>::growCapacity((_anonymous_namespace_ *)result, v4 + 1);
      int v5 = v3[4];
    }
  }
  else
  {
    unint64_t v7 = *((void *)v3 + 1) + 1;
    __n128 result = re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, v7);
    int v5 = v3[4] + 2;
    v3[4] = v5;
  }
  if (v5) {
    uint64_t v8 = (char *)(v3 + 6);
  }
  else {
    uint64_t v8 = (char *)*((void *)v3 + 4);
  }
  uint64_t v9 = *((void *)v3 + 1);
  *(_WORD *)&v8[2 * v9] = *a2;
  *((void *)v3 + 1) = v9 + 1;
  v3[4] += 2;
  return result;
}

uint64_t re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  unint64_t v6 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
  unint64_t v9 = ((v8 ^ (v8 >> 31)) + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
  unint64_t v10 = *(unsigned int *)(result + 24);
  if (!v10)
  {
    LODWORD(v11) = 0;
    goto LABEL_15;
  }
  unint64_t v11 = v9 % v10;
  uint64_t v12 = *(unsigned int *)(*(void *)(result + 8) + 4 * (v9 % v10));
  if (v12 == 0x7FFFFFFF)
  {
LABEL_15:
    __n128 result = re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::addAsMove(result, v11, v9, a2);
    ++*(_DWORD *)(v3 + 40);
    return result;
  }
  uint64_t v13 = *(void *)(result + 16);
  uint64_t v14 = v13 + 32 * v12;
  uint64_t v16 = *(void *)(v14 + 16);
  uint64_t v15 = *(void *)(v14 + 24);
  if (v16 != v4 || v15 != v5)
  {
    while (1)
    {
      uint64_t v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
      if (v12 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v18 = v13 + 32 * v12;
      uint64_t v20 = *(void *)(v18 + 16);
      uint64_t v19 = *(void *)(v18 + 24);
      if (v20 == v4 && v19 == v5) {
        return result;
      }
    }
    goto LABEL_15;
  }
  return result;
}

int *re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::add(int *result, void *a2)
{
  uint64_t v3 = result;
  if (!*(void *)result)
  {
    unint64_t v10 = *((void *)v3 + 1) + 1;
    __n128 result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, v10);
    int v5 = v3[4] + 2;
    v3[4] = v5;
    goto LABEL_15;
  }
  unint64_t v4 = *((void *)result + 1);
  int v5 = result[4];
  if (v5)
  {
    if (v4 - 8 >= 0xFFFFFFFFFFFFFFF7) {
      goto LABEL_15;
    }
    unint64_t v7 = v4 + 1;
    unint64_t v9 = 16;
    goto LABEL_11;
  }
  unint64_t v6 = *((void *)result + 3);
  BOOL v8 = v4 >= v6;
  unint64_t v7 = v4 + 1;
  BOOL v8 = !v8 || v6 >= v7;
  if (!v8)
  {
    unint64_t v9 = 2 * v6;
LABEL_11:
    if (v9 <= v7) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v9;
    }
    __n128 result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(result, v11);
    int v5 = v3[4];
  }
LABEL_15:
  if (v5) {
    uint64_t v12 = v3 + 6;
  }
  else {
    uint64_t v12 = (void *)*((void *)v3 + 4);
  }
  v12[(*((void *)v3 + 1))++] = *a2;
  v3[4] += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned short,8ul>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  if (v4 < a2)
  {
    if (*(void *)result)
    {
      if ((*((_DWORD *)result + 4) & 1) == 0)
      {
LABEL_4:
        unint64_t v5 = *((void *)v3 + 3);
LABEL_9:
        if (v5 < a2) {
          __n128 result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, a2);
        }
        unint64_t v7 = *((void *)v3 + 1);
        if (v7 < a2)
        {
          do
          {
            BOOL v8 = (void *)((char *)v3 + 24);
            if ((*((unsigned char *)v3 + 16) & 1) == 0) {
              BOOL v8 = (void *)*((void *)v3 + 4);
            }
            *((_WORD *)v8 + v7++) = 0;
          }
          while (a2 != v7);
        }
        goto LABEL_15;
      }
    }
    else
    {
      __n128 result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, a2);
      int v6 = *((_DWORD *)v3 + 4) + 2;
      *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
      if ((v6 & 1) == 0) {
        goto LABEL_4;
      }
    }
    unint64_t v5 = 8;
    goto LABEL_9;
  }
  if (v4 > a2)
  {
LABEL_15:
    *((void *)v3 + 1) = a2;
    *((_DWORD *)v3 + 4) += 2;
  }
  return result;
}

char *re::DynamicOverflowArray<unsigned short,8ul>::copy(char *result, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return result;
  }
  int v6 = result;
  unint64_t v7 = *((void *)result + 1);
  if (v7 + 1 <= a2)
  {
    uint64_t v17 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v18) = 136315906;
    *(void *)((char *)&v18 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "copy";
    WORD6(v18) = 1024;
    HIWORD(v18) = 678;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 682, v7, a2, v4, v17, v18);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_21;
  }
  if (v7 >= v8)
  {
    if (result[16]) {
      uint64_t v14 = result + 24;
    }
    else {
      uint64_t v14 = (char *)*((void *)result + 4);
    }
    __n128 result = (char *)memmove(&v14[2 * a2], __src, 2 * a4);
  }
  else
  {
    re::DynamicOverflowArray<unsigned short,8ul>::growCapacity((_anonymous_namespace_ *)result, a2 + a4);
    uint64_t v10 = v6[1];
    uint64_t v11 = v10 - a2;
    int v12 = *((_DWORD *)v6 + 4);
    if (v12) {
      uint64_t v13 = (char *)(v6 + 3);
    }
    else {
      uint64_t v13 = (char *)v6[4];
    }
    uint64_t v15 = &__src[2 * v11];
    if (v10 != a2)
    {
      memmove(&v13[2 * a2], __src, 2 * v11);
      int v12 = *((_DWORD *)v6 + 4);
    }
    if (v12) {
      uint64_t v16 = (char *)(v6 + 3);
    }
    else {
      uint64_t v16 = (char *)v6[4];
    }
    __n128 result = (char *)memcpy(&v16[2 * v6[1]], v15, &__src[2 * v4] - v15);
    v6[1] = v8;
  }
  *((_DWORD *)v6 + 4) += 2;
  return result;
}

uint64_t re::ecs2::ClippingManager::updateClippingParameterData(uint64_t a1, re::RenderManager *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v9 = a1 + 8;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = (_OWORD *)(a1 + 848);
  *(void *)(a1 + 848) = a3;
  *(void *)(a1 + 856) = a4;
  uint64_t v11 = (_OWORD *)(a1 + 864);
  *(void *)(a1 + 86re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a5;
  *(void *)(a1 + 872) = a6;
  uint64_t v12 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v12);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v9 + 200);
  *uint64_t v11 = 0u;
  *uint64_t v10 = 0u;
  uint64_t v35 = 0;
  v32[1] = 0;
  uint64_t v33 = 0;
  int v34 = 0;
  v32[0] = re::RenderManager::perFrameAllocator(a2);
  re::DynamicArray<unsigned short>::setCapacity(v32, 0);
  ++v34;
  re::DynamicArray<unsigned short>::setCapacity(v32, *(void *)(v9 + 872));
  uint64_t v13 = *(unsigned int *)(v9 + 88);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = (int *)(*(void *)(a1 + 80) + 8);
    while (1)
    {
      int v16 = *v15;
      v15 += 56;
      if (v16 < 0) {
        break;
      }
      if (v13 == ++v14)
      {
        LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v13;
        break;
      }
    }
  }
  else
  {
    LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  }
  if (v13 != v14)
  {
    uint64_t v17 = v14;
    do
    {
      re::ecs2::ClippingManager::updateClippingParameterDataInternal((re *)a1, *(void *)(a1 + 80) + 224 * v17 + 32, (_anonymous_namespace_ *)v32, *(void *)(*(void *)(a1 + 80) + 224 * v17 + 16));
      unsigned int v18 = *(_DWORD *)(a1 + 96);
      if (v18 <= (int)v14 + 1) {
        int v19 = v14 + 1;
      }
      else {
        int v19 = *(_DWORD *)(a1 + 96);
      }
      int v20 = v14;
      while (1)
      {
        uint64_t v17 = (v20 + 1);
        if (v19 - 1 == v20) {
          break;
        }
        ++v20;
        LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17;
        if ((*(_DWORD *)(*(void *)(a1 + 80) + 224 * v17 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v19;
LABEL_17:
      ;
    }
    while (v18 != v14);
  }
  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::DataArrayIterator<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData,re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData&>::DataArrayIterator((uint64_t)v42, a1 + 304);
  uint64_t v21 = *(void *)&v42[0];
  long long v31 = v42[0];
  uint64_t v22 = WORD4(v42[0]);
  if (a1 + 304 != *(void *)&v42[0] || WORD4(v42[0]) != 0xFFFFLL || (DWORD2(v42[0]) & 0xFFFF0000) != 0xFFFF0000)
  {
    unint64_t v23 = WORD5(v42[0]);
    do
    {
      unint64_t v24 = *(void *)(v21 + 16);
      if (v24 <= v23)
      {
        uint64_t v36 = 0;
        memset(v42, 0, sizeof(v42));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v37 = 136315906;
        *(void *)&v37[4] = "operator[]";
        *(_WORD *)&v37[12] = 1024;
        *(_DWORD *)&v37[14] = 797;
        __int16 v38 = 2048;
        unint64_t v39 = v23;
        __int16 v40 = 2048;
        unint64_t v41 = v24;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v25 = *(void *)(*(void *)(v21 + 32) + 16 * v23) + 208 * v22;
      re::ecs2::ClippingManager::updateClippingParameterDataInternal((re *)a1, v25 + 16, (_anonymous_namespace_ *)v32, *(void *)(v25 + 8));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v31);
      uint64_t v21 = v31;
      uint64_t v22 = WORD4(v31);
      unint64_t v23 = WORD5(v31);
    }
    while ((void)v31 != a1 + 304 || WORD4(v31) != 0xFFFFLL || WORD5(v31) != 0xFFFFLL);
  }
  *(void *)(a1 + 880) = v33;
  uint64_t v28 = re::RenderFrameBox::get(*((void *)a2 + 13) + 344, 0xFFFFFFFFFFFFFFFuLL);
  *(void *)&v42[0] = re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries((_anonymous_namespace_ *)(a1 + 720), *(void *)(v28 + 376));
  *((void *)&v42[0] + 1) = v29;
  if (v29)
  {
    (*(void (**)(void, _OWORD *))(**(void **)(v28 + 320) + 80))(*(void *)(v28 + 320), v42);
    *(void *)unint64_t v37 = v35;
    *(void *)&v37[8] = v33;
    (*(void (**)(void, unsigned char *))(**(void **)(v28 + 320) + 112))(*(void *)(v28 + 320), v37);
  }
  uint64_t result = v32[0];
  if (v32[0])
  {
    if (v35) {
      return (*(uint64_t (**)(void))(*(void *)v32[0] + 40))();
    }
  }
  return result;
}

void re::ecs2::ClippingManager::updateClippingParameterDataInternal(re *a1, uint64_t a2, _anonymous_namespace_ *this, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 2);
  if (v4 == 0x4000)
  {
    if ((atomic_exchange(re::ecs2::ClippingManager::updateClippingParameterDataInternal(re::ecs2::ClippingParameterData &,re::DynamicArray<unsigned short> &,re::ecs2::Entity const*)::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      int v6 = *re::ecsComponentsLogObjects(a1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a4 + 280);
        LODWORD(buf[0]) = 134218242;
        *(void *)((char *)buf + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x4000;
        WORD6(buf[0]) = 2080;
        *(void *)((char *)buf + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v7;
        _os_log_impl(&dword_233120000, v6, OS_LOG_TYPE_DEFAULT, "Current frame has more than %zu unique clipping indices in the indirection buffer. Unable to add clipping indices for entity '%s'.", (uint8_t *)buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v10 = a2 + 168;
    if (*(unsigned char *)(a2 + 160)) {
      uint64_t v11 = (unsigned __int16 *)(a2 + 168);
    }
    else {
      uint64_t v11 = *(unsigned __int16 **)(a2 + 176);
    }
    unint64_t v12 = *(void *)(a2 + 152);
    if (v12)
    {
      uint64_t v13 = *((void *)a1 + 94);
      unint64_t v14 = *((void *)a1 + 92);
      uint64_t v15 = &v11[v12];
LABEL_10:
      int v16 = v11;
      while (1)
      {
        unint64_t v17 = *v16;
        if (v14 <= v17) {
          goto LABEL_38;
        }
        uint64_t v18 = v13 + (v17 << 6);
        if (!(*(_DWORD *)(v18 + 56) | *(unsigned __int16 *)(v18 + 60))
          && !(*(_DWORD *)(v18 + 48) | *(unsigned __int16 *)(v18 + 52)))
        {
          break;
        }
        if (++v16 == v15)
        {
          LODWORD(v11) = v15;
          goto LABEL_23;
        }
      }
      int v19 = v15 - 1;
      while (v19 != v16)
      {
        uint64_t v15 = v19;
        unint64_t v20 = *v19;
        if (v14 <= v20) {
          goto LABEL_39;
        }
        uint64_t v21 = v13 + (v20 << 6);
        if (!(*(_DWORD *)(v21 + 56) | *(unsigned __int16 *)(v21 + 60)))
        {
          int v22 = *(_DWORD *)(v21 + 48);
          int v23 = *(unsigned __int16 *)(v21 + 52);
          int v19 = v15 - 1;
          if (!(v22 | v23)) {
            continue;
          }
        }
        *int v16 = v20;
        uint64_t v11 = v16 + 1;
        *uint64_t v15 = v17;
        if (v15 == v16 + 1)
        {
          LODWORD(v11) = v16 + 2;
          goto LABEL_23;
        }
        goto LABEL_10;
      }
      LODWORD(v11) = v16;
    }
LABEL_23:
    if (*(_DWORD *)(a2 + 160)) {
      int v24 = a2 + 168;
    }
    else {
      int v24 = *(_DWORD *)(a2 + 176);
    }
    *(_WORD *)(a2 + 188) = (v11 - v24) >> 1;
    *(_WORD *)(a2 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v4;
    unint64_t v25 = 0x4000 - v4;
    if (v12 < v25) {
      LOWORD(v25) = v12;
    }
    *(_WORD *)(a2 + 186) = v25;
    if ((_WORD)v25)
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      while (*(void *)(a2 + 152) > v27)
      {
        if (*(_DWORD *)(a2 + 160)) {
          uint64_t v28 = v10;
        }
        else {
          uint64_t v28 = *(void *)(a2 + 176);
        }
        re::DynamicArray<unsigned short>::add(this, (_WORD *)(v28 + v26));
        ++v27;
        v26 += 2;
        if (v27 >= *(unsigned __int16 *)(a2 + 186)) {
          return;
        }
      }
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v17, v14);
      _os_crash();
      __break(1u);
LABEL_39:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v14);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::ecs2::ClippingManager::clippingParameters(re::ecs2::ClippingManager *this)
{
  return *((void *)this + 94);
}

re *re::ecs2::ClippingManager::registerScene(re::ecs2::ClippingManager *this, unint64_t a2)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  unint64_t v50 = a2;
  unint64_t v2 = *(re::EventBus **)(a2 + 288);
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100, v50);
    _os_crash();
    __break(1u);
  }
  unint64_t v5 = (re::ecs2::ClippingManager *)((char *)this + 8);
  v51[0] = 0;
  v51[1] = 0;
  int v52 = 1;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  int v56 = 0;
  int v6 = (re *)(*(uint64_t (**)(re *))(*(void *)v5 + 16))(v5);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)v6;
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8++;
      uint64_t v58 = re::globalAllocators(v6)[2];
      uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v58 + 32))(v58, 32, 0);
      *uint64_t v11 = &unk_26E70BC98;
      v11[1] = v5;
      void v11[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      v11[3] = 0;
      unint64_t v59 = v11;
      uint64_t v12 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v57, v10, 0);
      uint64_t v14 = v13;
      uint64_t v15 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
      *uint64_t v15 = v12;
      v15[1] = v14;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v57);
      re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v5, v2, (uint64_t)v51, v10);
      int v6 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v5, v2, (uint64_t)v51, v10);
      v9 -= 8;
    }
    while (v9);
  }
  int v16 = (re *)(*(uint64_t (**)(re *))(*(void *)v5 + 24))(v5);
  if (v17)
  {
    uint64_t v18 = (uint64_t *)v16;
    uint64_t v19 = 8 * v17;
    do
    {
      uint64_t v20 = *v18++;
      re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v5, v2, (uint64_t)v51, v20);
      int v16 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v5, v2, (uint64_t)v51, v20);
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v58 = re::globalAllocators(v16)[2];
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v58 + 32))(v58, 32, 0);
  *uint64_t v21 = &unk_26E70BDA0;
  v21[1] = v5;
  void v21[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  v21[3] = 0;
  unint64_t v59 = v21;
  uint64_t v22 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v57, 0, 0);
  uint64_t v24 = v23;
  unint64_t v25 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
  *unint64_t v25 = v22;
  v25[1] = v24;
  uint64_t v26 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::destroyCallable((uint64_t)v57);
  uint64_t v58 = re::globalAllocators(v26)[2];
  unint64_t v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v58 + 32))(v58, 32, 0);
  void *v27 = &unk_26E70BDF8;
  v27[1] = v5;
  v27[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  v27[3] = 0;
  unint64_t v59 = v27;
  uint64_t v28 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v57, 0, 0);
  uint64_t v30 = v29;
  long long v31 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
  void *v31 = v28;
  v31[1] = v30;
  uint64_t v32 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::destroyCallable((uint64_t)v57);
  uint64_t v58 = re::globalAllocators(v32)[2];
  uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v58 + 32))(v58, 32, 0);
  void *v33 = &unk_26E70BE50;
  v33[1] = v5;
  uint64_t v33[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  v33[3] = 0;
  unint64_t v59 = v33;
  uint64_t v34 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v57, 0, 0);
  uint64_t v36 = v35;
  unint64_t v37 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v51);
  void *v37 = v34;
  v37[1] = v36;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::destroyCallable((uint64_t)v57);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v50, (uint64_t)v51);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v50);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v51);
  uint64_t result = (re *)v51[0];
  if (v51[0] && (v52 & 1) == 0) {
    uint64_t result = (re *)(*(uint64_t (**)(void))(*(void *)v51[0] + 40))();
  }
  unint64_t v39 = *(re::EventBus **)(a2 + 288);
  if (v39)
  {
    LODWORD(v40) = 0x7FFFFFFF;
    if (*((void *)this + 20))
    {
      unint64_t v41 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      uint64_t v42 = *(unsigned int *)(*((void *)this + 21) + 4 * ((v41 ^ (v41 >> 31)) % *((unsigned int *)this + 46)));
      if (v42 != 0x7FFFFFFF)
      {
        uint64_t v43 = *((void *)this + 22);
        if (*(void *)(v43 + 80 * v42 + 16) == a2)
        {
          LODWORD(v40) = v42;
        }
        else
        {
          uint64_t v40 = v42;
          while (1)
          {
            LODWORD(v40) = *(_DWORD *)(v43 + 80 * v40 + 8) & 0x7FFFFFFF;
            if (v40 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v43 + 80 * v40 + 16) == a2) {
              goto LABEL_21;
            }
          }
          LODWORD(v40) = 0x7FFFFFFF;
        }
      }
    }
LABEL_21:
    uint64_t v44 = *((void *)this + 22) + 80 * v40 + 24;
    uint64_t v53 = re::globalAllocators(result)[2];
    uint64_t v45 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v53 + 32))(v53, 32, 0);
    void *v45 = &unk_26E70BC00;
    v45[1] = v5;
    _OWORD v45[2] = re::ecs2::ClippingParameterDataStateTracking::invalidateTransformEventHandler<REBillboardTransformChangedEvent>;
    v45[3] = 0;
    uint64_t v54 = v45;
    uint64_t v46 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(v39, (uint64_t)v51, 0, 0);
    uint64_t v48 = v47;
    uint64_t v49 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v44);
    void *v49 = v46;
    v49[1] = v48;
    return (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::destroyCallable((uint64_t)v51);
  }
  return result;
}

uint64_t re::ecs2::ClippingManager::unregisterScene(re::ecs2::ClippingManager *this, re::ecs2::Scene *a2)
{
  uint64_t v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  uint64_t v3 = *((void *)v14 + 13);
  uint64_t v4 = *(void *)(v3 + 328);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 344);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(unsigned char *)(*(void *)v5 + 288)) {
        (*(void (**)(char *))(*((void *)this + 1) + 40))((char *)this + 8);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v7 = (char *)this + 160;
  uint64_t result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    uint64_t v9 = *((void *)v14 + 36);
    if (v9)
    {
      uint64_t v10 = result;
      uint64_t v11 = *(void *)(result + 40);
      if (v11)
      {
        for (unint64_t i = 0; i != v11; ++i)
        {
          uint64_t v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(void *)v13, *(void *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

void re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking(re::ecs2::ClippingParameterDataStateTracking *this)
{
  re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking(this);
  JUMPOUT(0x237DBCBD0);
}

{
  unint64_t v1;
  re::ecs2::ClippingParameterDataStateTracking *v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  long long v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;

  unint64_t v2 = this;
  uint64_t v28 = *MEMORY[0x263EF8340];
  re::ecs2::ClippingParametersRegistry::~ClippingParametersRegistry((re::ecs2::ClippingParameterDataStateTracking *)((char *)this + 712));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 83);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 77);
  v3.n128_f64[0] = re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v2 + 552);
  uint64_t v4 = *((void *)v2 + 68);
  if (v4)
  {
    if (*((void *)v2 + 62)) {
      *((void *)v2 + 62) = 0;
    }
    if (*((void *)v2 + 61))
    {
      (*(void (**)(uint64_t, __n128))(*(void *)v4 + 40))(v4, v3);
      *((void *)v2 + 61) = 0;
    }
    *(_OWORD *)((char *)v2 + 520) = 0u;
    *(_OWORD *)((char *)v2 + 536) = 0u;
    *(_OWORD *)((char *)v2 + 50re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  }
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)v2 + 424);
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)v2 + 360);
  uint64_t v5 = (uint64_t)v2 + 296;
  if (!*((_DWORD *)v2 + 85)) {
    goto LABEL_27;
  }
  re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::DataArrayIterator<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData,re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData&>::DataArrayIterator((uint64_t)&v23, (uint64_t)v2 + 296);
  uint64_t v6 = v23;
  uint64_t v13 = v23;
  uint64_t v7 = WORD4(v23);
  if (v5 != (void)v23 || WORD4(v23) != 0xFFFFLL || (DWORD2(v23) & 0xFFFF0000) != 0xFFFF0000)
  {
    uint64_t v8 = WORD5(v23);
    while (1)
    {
      uint64_t v9 = *(void *)(v6 + 16);
      if (v9 <= v8) {
        break;
      }
      re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::destroy((uint64_t)v2 + 296, ((unint64_t)(*(_DWORD *)(*(void *)(*(void *)(v6 + 32) + 16 * v8 + 8) + 4 * v7) & 0xFFFFFF) << 32) | (v8 << 16) | v7);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
      uint64_t v6 = v13;
      uint64_t v7 = WORD4(v13);
      uint64_t v8 = WORD5(v13);
      if ((void)v13 == v5 && WORD4(v13) == 0xFFFFLL && WORD5(v13) == 0xFFFFLL) {
        goto LABEL_16;
      }
    }
LABEL_30:
    uint64_t v14 = 0;
    unint64_t v27 = 0u;
    unint64_t v25 = 0u;
    uint64_t v26 = 0u;
    uint64_t v23 = 0u;
    uint64_t v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    uint64_t v15 = 136315906;
    int v16 = "operator[]";
    uint64_t v17 = 1024;
    uint64_t v18 = 797;
    uint64_t v19 = 2048;
    uint64_t v20 = v8;
    uint64_t v21 = 2048;
    uint64_t v22 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_16:
  uint64_t v10 = *((void *)v2 + 39);
  uint64_t v8 = v10 - 1;
  if (v10 == 1) {
    goto LABEL_25;
  }
  uint64_t v9 = 16 * v10 - 16;
  do
  {
    if (v10 <= v8)
    {
      *(void *)&uint64_t v13 = 0;
      unint64_t v27 = 0u;
      unint64_t v25 = 0u;
      uint64_t v26 = 0u;
      uint64_t v23 = 0u;
      uint64_t v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      uint64_t v15 = 136315906;
      int v16 = "operator[]";
      uint64_t v17 = 1024;
      uint64_t v18 = 789;
      uint64_t v19 = 2048;
      uint64_t v20 = v8;
      uint64_t v21 = 2048;
      uint64_t v22 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      *(void *)&uint64_t v13 = 0;
      unint64_t v27 = 0u;
      unint64_t v25 = 0u;
      uint64_t v26 = 0u;
      uint64_t v23 = 0u;
      uint64_t v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      uint64_t v15 = 136315906;
      int v16 = "removeAt";
      uint64_t v17 = 1024;
      uint64_t v18 = 931;
      uint64_t v19 = 2048;
      uint64_t v20 = v8;
      uint64_t v21 = 2048;
      uint64_t v22 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v11 = (void *)(*((void *)v2 + 41) + v9);
    (*(void (**)(void, void))(**((void **)v2 + 37) + 40))(*((void *)v2 + 37), *v11);
    (*(void (**)(void, void))(**((void **)v2 + 37) + 40))(*((void *)v2 + 37), v11[1]);
    uint64_t v1 = *((void *)v2 + 39);
    if (v1 <= v8) {
      goto LABEL_29;
    }
    uint64_t v10 = v1 - 1;
    if (v1 - 1 > v8)
    {
      *(_OWORD *)(*((void *)v2 + 41) + v9) = *(_OWORD *)(*((void *)v2 + 41) + 16 * v1 - 16);
      uint64_t v10 = *((void *)v2 + 39) - 1;
    }
    *((void *)v2 + 39) = v10;
    ++*((_DWORD *)v2 + 80);
    v9 -= 16;
    --v8;
  }
  while (v8);
  *((void *)v2 + 43) = 0xFFFFFFFF00000000;
  if (!v10)
  {
    *(void *)&uint64_t v13 = 0;
    unint64_t v27 = 0u;
    unint64_t v25 = 0u;
    uint64_t v26 = 0u;
    uint64_t v23 = 0u;
    uint64_t v24 = 0u;
    unint64_t v2 = (re::ecs2::ClippingParameterDataStateTracking *)&_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    uint64_t v15 = 136315906;
    int v16 = "operator[]";
    uint64_t v17 = 1024;
    uint64_t v18 = 789;
    uint64_t v19 = 2048;
    uint64_t v20 = 0;
    uint64_t v21 = 2048;
    uint64_t v22 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    *((void *)v2 + 43) = 0xFFFFFFFF00000000;
  }
  uint64_t v12 = (void *)*((void *)v2 + 41);
  (*(void (**)(void, void))(**((void **)v2 + 37) + 40))(*((void *)v2 + 37), *v12);
  (*(void (**)(void, void))(**((void **)v2 + 37) + 40))(*((void *)v2 + 37), v12[1]);
  re::DynamicArray<unsigned long>::deinit(v5);
  *((_DWORD *)v2 + 85) = 0;
LABEL_27:
  re::DynamicArray<unsigned long>::deinit(v5);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v2 + 34);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)v2 + 31);
  *(void *)unint64_t v2 = &unk_26E70BC58;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v2 + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 13);
  re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v2 + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 1);
}

uint64_t re::ecs2::ClippingParameterDataStateTracking::trackedComponents(re::ecs2::ClippingParameterDataStateTracking *this)
{
  return *((void *)this + 33);
}

uint64_t re::ecs2::ClippingParameterDataStateTracking::trackedActivationComponents(re::ecs2::ClippingParameterDataStateTracking *this)
{
  return *((void *)this + 36);
}

void re::ecs2::ClippingManager::~ClippingManager(re::ecs2::ClippingManager *this)
{
}

{
  uint64_t vars8;

  re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking((re::ecs2::ClippingManager *)((char *)this + 8));
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ClippingManager::clippingDataPerEntity(re::ecs2::ClippingManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::ClippingManager::clippingDataForPortalCrossingPair(re::ecs2::ClippingManager *this, const re::ecs2::Entity *a2, const re::ecs2::PortalComponent *a3)
{
  uint64_t v4 = re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find((uint64_t *)this + 62, (unint64_t)a2, (unint64_t)a3);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v5 = re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::tryGet((uint64_t)this + 304, *(void *)(*((void *)this + 63) + 24 * v4 + 16));
  if (v5) {
    return v5 + 16;
  }
  else {
    return 0;
  }
}

void re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BC00;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BC00;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ClippingParameterDataStateTracking,REEventHandlerResult (re::ecs2::ClippingParameterDataStateTracking::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::size()
{
  return 32;
}

void re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 601);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  unint64_t v4 = (char *)(a1 + 24);
  *(void *)(a1 + 32) = 0;
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    *(_DWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 3;
    uint64_t v5 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v5;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v6;
    *(_DWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFFE | *(_DWORD *)(a1 + 16) & 1;
    *(_DWORD *)(a1 + 16) &= ~1u;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a2 + 24);
    *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v7;
LABEL_18:
    int v14 = 2;
    goto LABEL_19;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  if (!v8)
  {
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
    *(void *)a1 = *(void *)a2;
    goto LABEL_18;
  }
  *(void *)a1 = *(void *)a2;
  re::DynamicOverflowArray<unsigned short,8ul>::setCapacity((void *)a1, v8);
  if (*(unsigned char *)(a2 + 16)) {
    signed int v9 = (const void *)(a2 + 24);
  }
  else {
    signed int v9 = *(const void **)(a2 + 32);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = *(_DWORD *)(a1 + 16);
  uint64_t v12 = v4;
  if ((v11 & 1) == 0) {
    uint64_t v12 = *(void **)(a1 + 32);
  }
  if (v10)
  {
    memmove(v12, v9, 2 * v10);
    int v11 = *(_DWORD *)(a1 + 16);
  }
  if ((v11 & 1) == 0) {
    unint64_t v4 = *(char **)(a1 + 32);
  }
  if (*(_DWORD *)(a2 + 16)) {
    uint64_t v13 = a2 + 24;
  }
  else {
    uint64_t v13 = *(void *)(a2 + 32);
  }
  memcpy(&v4[2 * *(void *)(a1 + 8)], (const void *)(v13 + 2 * *(void *)(a1 + 8)), 2 * v8 - 2 * *(void *)(a1 + 8));
  *(void *)(a1 + 8) = v8;
  *(void *)(a2 + 8) = 0;
  int v14 = 4;
LABEL_19:
  *(_DWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = ((*(_DWORD *)(a2 + 16) & 0xFFFFFFFE) + v14) | *(_DWORD *)(a2 + 16) & 1;
  *(_DWORD *)(a1 + 16) += 2;
  return a1;
}

void *re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        int v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          int v16 = v4 + 3;
        }
        else {
          int v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 2 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if ((a2 & 0x8000000000000000) != 0)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 2, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 2 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 2 * a2, 2);
        if (v10)
        {
          uint64_t v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 2 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17 & 0xFFFFFFFE;
          uint64_t v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

double re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (v3)
      {
        uint64_t v4 = 96 * v3;
        uint64_t v5 = v2 + 8;
        do
        {
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v5);
          v5 += 96;
          v4 -= 96;
        }
        while (v4);
      }
      *(void *)(a1 + 8) = 0;
    }
    if (*(void *)a1)
    {
      (*(void (**)(void))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56));
      *(void *)a1 = 0;
    }
    double result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::trackedActivationComponents()
{
  return 0;
}

void re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    int v12 = 1;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    int v16 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = a2;
    uint64_t v4 = v15;
    if (v15)
    {
      uint64_t v5 = a1 + 56;
      do
      {
        unint64_t v6 = *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
        ++v16;
        re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v5, v6);
        uint64_t v7 = *(void *)(v6 + 328);
        if (v7)
        {
          uint64_t v8 = *(uint64_t **)(v6 + 344);
          uint64_t v9 = 8 * v7;
          do
          {
            uint64_t v10 = *v8++;
            *(void *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v11) = v10;
            v9 -= 8;
          }
          while (v9);
        }
        uint64_t v4 = v15;
      }
      while (v15);
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0])
    {
      if ((v12 & 1) == 0) {
        (*(void (**)(void))(*(void *)v11[0] + 40))();
      }
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

double re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 + 176);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 224;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_anonymous_namespace_ *re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::allocBlock(void *a1)
{
  uint64_t v3 = 208 * *((unsigned int *)a1 + 11);
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(void *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = v4;
  uint64_t v1 = 4 * *((unsigned int *)a1 + 11);
  double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(void *)(*a1 + 8));
    double result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  uint64_t v9 = result;
  unint64_t v11 = a1[1];
  unint64_t v10 = a1[2];
  if (v10 >= v11)
  {
    unint64_t v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        unint64_t v13 = 2 * v11;
        if (!v11) {
          unint64_t v13 = 8;
        }
        if (v13 <= v12) {
          unint64_t v14 = v12;
        }
        else {
          unint64_t v14 = v13;
        }
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    unint64_t v10 = a1[2];
  }
  uint64_t v15 = (uint64_t *)(a1[4] + 16 * v10);
  *uint64_t v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  void *v8 = &unk_26E70BCF0;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  void v8[3] = 0;
  int v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  unint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  void *v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t (***re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4))(void)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v15 = re::globalAllocators(a1)[2];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v15 + 32))(v15, 32, 0);
  void *v8 = &unk_26E70BD48;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  void v8[3] = 0;
  int v16 = v8;
  uint64_t v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  uint64_t v11 = v10;
  unint64_t v12 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  void *v12 = v9;
  v12[1] = v11;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v14);
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BC98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BC98;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BCF0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BCF0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BD48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BD48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!*(unsigned char *)(a2 + 371)
    && (*(unsigned char *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BDA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BDA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!*(unsigned char *)(a2 + 371))
  {
    uint64_t v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BDF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BDF8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70BE50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E70BE50;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::ClippingParameterData>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::find(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v4 = a1[2];
  if (v4 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  unint64_t v9 = ((v8 ^ (v8 >> 31)) + ((v7 ^ (v7 >> 31)) << 6) + ((v7 ^ (v7 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v7 ^ (v7 >> 31);
  unint64_t v10 = v4 >> 4;
  unint64_t v11 = v9 % (v4 >> 4);
  uint64_t v12 = *a1;
  int8x16_t v13 = vdupq_n_s8(v9 & 0x7F);
  int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
  v15.i64[0] = -1;
  for (v15.i64[1] = -1; ; v15.i64[1] = -1)
  {
    int8x16_t v16 = *(int8x16_t *)(v12 + 16 * v11);
    unint64_t v17 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v16), v14)))), (int8x8_t)0x3830282018100800);
    unint64_t v18 = __clz(__rbit64(v17));
    if (v18 <= 0x3F) {
      break;
    }
LABEL_13:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v16, v15), v14)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    int8x16_t v26 = v14;
    int8x16_t v27 = v13;
    if (++v11 == v10) {
      unint64_t v11 = 0;
    }
    unint64_t v25 = re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>::operator()(a2, a3) % v10;
    uint64_t result = -1;
    int8x16_t v14 = v26;
    int8x16_t v13 = v27;
    v15.i64[0] = -1;
    if (v11 == v25) {
      return result;
    }
  }
  uint64_t v19 = 16 * v11;
  while (1)
  {
    uint64_t result = v18 + v19;
    uint64_t v21 = (uint64_t *)(a1[1] + 24 * (v18 + v19));
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    if (v23 == a2 && v22 == a3) {
      return result;
    }
    if (v18 <= 0x3E)
    {
      unint64_t v18 = __clz(__rbit64((-2 << v18) & v17));
      if (v18 < 0x40) {
        continue;
      }
    }
    goto LABEL_13;
  }
}

uint64_t re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>::operator()(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a1 ^ (a1 >> 30))) >> 27));
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  return ((v3 ^ (v3 >> 31)) + ((v2 ^ (v2 >> 31)) << 6) + ((v2 ^ (v2 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v2 ^ (v2 >> 31);
}

void re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(long long *a1, unsigned int a2)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3) + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = *((void *)a1 + 7);
  long long v27 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v27, v8, v9);
  unint64_t v10 = *((void *)a1 + 2);
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *((void *)a1 + 1) + 56 * v15, *((void *)a1 + 1) + 56 * v15 + 8);
      unint64_t v22 = v15 >> 4;
      unint64_t v10 = *((void *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        uint64_t v24 = 16 * v22;
        unint64_t v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v24 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            unint64_t v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      unint64_t v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)&v28[40];
  *(void *)&v28[40] = *((void *)a1 + 7);
  long long v17 = v27;
  long long v18 = *(_OWORD *)v28;
  long long v27 = *a1;
  *(void *)uint64_t v28 = v10;
  long long v19 = *(_OWORD *)&v28[16];
  long long v20 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v28[32];
  *((void *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  long long v21 = *(long long *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<unsigned long long,re::HashSet<re::ecs2::PortalComponent const*,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

void *re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::HashSet<re::ecs2::Entity const*,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((long long *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  uint64_t v18 = *(void *)a3;
  uint64_t v19 = *(void *)(a3 + 8);
  uint64_t v36 = *a2;
  uint64_t v17 = v36;
  uint64_t v37 = v18;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v38 = v19;
  uint64_t v39 = v20;
  *(void *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  int v22 = *(_DWORD *)(a3 + 24);
  int v21 = *(_DWORD *)(a3 + 28);
  int v40 = v22;
  int v41 = v21;
  int v24 = *(_DWORD *)(a3 + 32);
  int v23 = *(_DWORD *)(a3 + 36);
  int v42 = v24;
  int v43 = v23;
  int v44 = 0;
  *(_OWORD *)(a3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_23436F740;
  unint64_t v25 = (uint64_t *)(*((void *)a1 + 1) + 56 * v16);
  BOOL v28 = v25 == &v36;
  *unint64_t v25 = v17;
  uint64_t v26 = (uint64_t)(v25 + 1);
  if (!v28)
  {
    uint64_t v27 = *(void *)v26;
    if (*(void *)v26) {
      BOOL v28 = v27 == v18;
    }
    else {
      BOOL v28 = 1;
    }
    if (v28)
    {
      *(void *)uint64_t v26 = v18;
      uint64_t v37 = v27;
      uint64_t v29 = *(void *)(v26 + 8);
      *(void *)(v26 + 8) = v19;
      uint64_t v38 = v29;
      uint64_t v30 = *(void *)(v26 + 16);
      *(void *)(v26 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v20;
      uint64_t v39 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 24);
      *(_DWORD *)(v26 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v22;
      int v40 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 28);
      *(_DWORD *)(v26 + 28) = v21;
      int v41 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 32);
      *(_DWORD *)(v26 + 32) = v24;
      int v42 = v30;
      LODWORD(v30) = *(_DWORD *)(v26 + 36);
      *(_DWORD *)(v26 + 36) = v23;
      int v43 = v30;
    }
    else if (v18)
    {
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::copy(v26, (uint64_t)&v37);
      ++*(_DWORD *)(v26 + 40);
    }
    else
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v26);
    }
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(&v37);
  uint64_t v31 = *((void *)a1 + 4) - (v15 == 255);
  ++*((void *)a1 + 3);
  *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v31;
  uint64_t v32 = (unint64_t *)(*((void *)a1 + 1) + 56 * v16);
  unint64_t v34 = *v32;
  uint64_t result = v32 + 1;
  unint64_t v35 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v35 >> 31) ^ v35;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(void *a1, unint64_t a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  unint64_t v5 = v4 ^ (v4 >> 31);
  unint64_t v6 = v5 % v3;
  int8x16_t v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  unint64_t v9 = v5 % v3;
  while (1)
  {
    int8x16_t v10 = *(int8x16_t *)(*a1 + 16 * v9);
    unint64_t v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3) {
      unint64_t v9 = 0;
    }
    else {
      ++v9;
    }
    uint64_t v14 = -1;
    if (v9 == v6) {
      return v14;
    }
  }
  uint64_t v13 = 16 * v9;
  while (1)
  {
    uint64_t v14 = v12 + v13;
    if (*(void *)(a1[1] + 96 * (v12 + v13)) == a2) {
      return v14;
    }
    if (v12 <= 0x3E)
    {
      unint64_t v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

void re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::resize(long long *a1, unsigned int a2)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3) + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = *((void *)a1 + 7);
  long long v27 = 0u;
  *(_OWORD *)BOOL v28 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v28[16], 0, 32);
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::init(&v27, v8, v9);
  unint64_t v10 = *((void *)a1 + 2);
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::internalAdd(&v27, *((void *)a1 + 1) + 96 * v15, *((void *)a1 + 1) + 96 * v15 + 8);
      unint64_t v22 = v15 >> 4;
      unint64_t v10 = *((void *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        uint64_t v24 = 16 * v22;
        unint64_t v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v24 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            unint64_t v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      unint64_t v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)&v28[40];
  *(void *)&v28[40] = *((void *)a1 + 7);
  long long v17 = v27;
  long long v18 = *(_OWORD *)v28;
  long long v27 = *a1;
  *(void *)BOOL v28 = v10;
  long long v19 = *(_OWORD *)&v28[16];
  long long v20 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v28[32];
  *((void *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  long long v21 = *(long long *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)&v27);
}

void *re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::resize((long long *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  uint64_t v23 = *a2;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::DynamicOverflowArray((uint64_t)v24, a3);
  long long v17 = (void *)(*((void *)a1 + 1) + 96 * v16);
  *long long v17 = v23;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::operator=((uint64_t)(v17 + 1), (uint64_t)v24);
  if (v24[0] && (v25 & 1) == 0) {
    (*(void (**)(void))(*(void *)v24[0] + 40))();
  }
  uint64_t v18 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v18 - (v15 == 255);
  long long v19 = (unint64_t *)(*((void *)a1 + 1) + 96 * v16);
  unint64_t v21 = *v19;
  uint64_t result = v19 + 1;
  unint64_t v22 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

void *re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 97 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = v3[1] + v9;
        *(void *)uint64_t v11 = 0;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
        *(_DWORD *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        ++v10;
        unint64_t v12 = v3[2];
        v9 += 96;
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

uint64_t re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    if (*(void *)(a2 + 8))
    {
      re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::move(a1, a2);
    }
    else
    {
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a2 + 16) += 2;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
  }
  return a1;
}

void *re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::move(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((void *)a1, v4);
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v7 = (const void *)(a2 + 24);
    }
    else {
      uint64_t v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (void *)(v11 + 8 * v12);
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v14 = a2 + 24;
        }
        else {
          uint64_t v14 = *(void *)(a2 + 32);
        }
        uint64_t result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 8 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    unint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  uint64_t result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    uint64_t result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(void *)(a1 + 8) = v4;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) += 4;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

uint64_t re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    if (*(void *)a1)
    {
      if (*(void *)a2 && *(void *)a1 != *(void *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        uint64_t result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if (*(unsigned char *)(a2 + 16))
    {
      if (*(void *)(a2 + 8))
      {
        re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

uint64_t re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v53 = 0u;
  *(_OWORD *)uint64_t v54 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v54[16], 0, 32);
  unint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::init(&v53, v8, v9);
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 4;
    int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v13) {
        goto LABEL_12;
      }
    }
    unint64_t v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      uint64_t v28 = a1[1];
      if (!*(void *)&v54[40])
      {
        int8x16_t v52 = v14;
        int8x16_t v14 = v52;
      }
      if (!*(void *)&v54[16]
        || (unint64_t v29 = *(void *)v54, *(void *)v54 > (unint64_t)(8 * *(void *)&v54[16])))
      {
        int8x16_t v51 = v14;
        unint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::resize(&v53, 1);
        int8x16_t v14 = v51;
        unint64_t v29 = *(void *)v54;
      }
      uint64_t v30 = (void *)(v28 + 24 * v17);
      unint64_t v31 = 0xBF58476D1CE4E5B9 * (*v30 ^ (*v30 >> 30));
      unint64_t v32 = (0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) ^ ((0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) >> 31);
      unint64_t v33 = 0xBF58476D1CE4E5B9 * (v30[1] ^ (v30[1] >> 30));
      unint64_t v34 = (((0x94D049BB133111EBLL * (v33 ^ (v33 >> 27))) ^ ((0x94D049BB133111EBLL * (v33 ^ (v33 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v32 << 6)
           + (v32 >> 2)) ^ v32;
      unint64_t v35 = v29 >> 4;
      unint64_t v36 = v34 % (v29 >> 4);
      unint64_t v37 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v53 + 16 * v36)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v37 >= 0x40)
      {
        do
        {
          if (v36 + 1 == v35) {
            unint64_t v36 = 0;
          }
          else {
            ++v36;
          }
          unint64_t v37 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v53 + 16 * v36)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v37 > 0x3F);
      }
      uint64_t v38 = v53 + 16 * v36;
      int v39 = *(unsigned __int8 *)(v38 + v37);
      *(unsigned char *)(v38 + v37) = v34 & 0x7F;
      uint64_t v40 = v30[2];
      long long v41 = *(_OWORD *)v30;
      uint64_t v42 = *(void *)&v54[8];
      uint64_t v43 = *((void *)&v53 + 1) + 24 * (v37 + 16 * v36);
      *(_OWORD *)uint64_t v43 = v41;
      *(void *)(v43 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v40;
      *(void *)&v54[8] = v42 + 1;
      *(void *)&v54[16] -= v39 == 255;
      unint64_t v44 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (*(void *)v43 ^ (*(void *)v43 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                  * (*(void *)v43 ^ (*(void *)v43 >> 30))) >> 27));
      unint64_t v45 = 0xBF58476D1CE4E5B9 * (*(void *)(v43 + 8) ^ (*(void *)(v43 + 8) >> 30));
      *(void *)&v54[24] ^= v44 ^ (v44 >> 31) ^ (((0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                                  * (v45 ^ (v45 >> 27))) >> 31))
                                                - 0x61C8864680B583E9
                                                + ((v44 ^ (v44 >> 31)) << 6)
                                                + ((v44 ^ (v44 >> 31)) >> 2));
      unint64_t v46 = v17 >> 4;
      unint64_t v11 = a1[2];
      if (v17 >> 4 >= v11 >> 4) {
        break;
      }
      unint64_t v47 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v47 >= 0x40)
      {
        uint64_t v48 = 16 * v46;
        unint64_t v49 = ~v46 + (v11 >> 4);
        while (v49)
        {
          unint64_t v16 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v48 + 16)), v14)))), (int8x8_t)0x3830282018100800);
          unint64_t v50 = __clz(__rbit64(v16));
          v48 += 16;
          --v49;
          if (v50 <= 0x3F)
          {
            unint64_t v17 = v50 + v48;
            goto LABEL_32;
          }
        }
        break;
      }
      unint64_t v17 = v47 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_32:
      ;
    }
  }
LABEL_12:
  uint64_t v19 = *(void *)&v54[40];
  *(void *)&v54[40] = a1[7];
  uint64_t result = *(void *)&v54[40];
  long long v20 = v53;
  long long v21 = *(_OWORD *)v54;
  *(void *)uint64_t v54 = v11;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  *(void *)&long long v53 = *a1;
  *((void *)&v53 + 1) = v23;
  long long v24 = *(_OWORD *)&v54[16];
  long long v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v54[32];
  a1[7] = v19;
  *(_OWORD *)&v54[24] = v25;
  long long v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v54[8] = v26;
  if (result)
  {
    if (v23) {
      *((void *)&v53 + 1) = 0;
    }
    if (v22)
    {
      long long v27 = *(uint64_t (**)(void))(*(void *)result + 40);
      return v27();
    }
  }
  return result;
}

void *re::HashBrown<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v6 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 25 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v7 = 0;
      *(void *)&long long v8 = -1;
      *((void *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        unint64_t v11 = (void *)(v3[1] + v9);
        *unint64_t v11 = 0;
        v11[1] = 0;
        void v11[2] = 0xFFFFFFFFLL;
        ++v10;
        unint64_t v12 = v3[2];
        v9 += 24;
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    unint64_t v12 = 0;
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

void re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(long long *a1, unsigned int a2)
{
  unint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = *((void *)a1 + 3) + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = *((void *)a1 + 7);
  long long v27 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v28[16], 0, 32);
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::init(&v27, v8, v9);
  unint64_t v10 = *((void *)a1 + 2);
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(&v27, *((void *)a1 + 1) + 96 * v15, *((void *)a1 + 1) + 96 * v15 + 8);
      unint64_t v22 = v15 >> 4;
      unint64_t v10 = *((void *)a1 + 2);
      if (v15 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v23 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v23 >= 0x40)
      {
        uint64_t v24 = 16 * v22;
        unint64_t v25 = ~v22 + (v10 >> 4);
        while (v25)
        {
          unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v24 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v26 = __clz(__rbit64(v14));
          v24 += 16;
          --v25;
          if (v26 <= 0x3F)
          {
            unint64_t v15 = v26 + v24;
            goto LABEL_20;
          }
        }
        break;
      }
      unint64_t v15 = v23 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_12:
  uint64_t v16 = *(void *)&v28[40];
  *(void *)&v28[40] = *((void *)a1 + 7);
  long long v17 = v27;
  long long v18 = *(_OWORD *)v28;
  long long v27 = *a1;
  *(void *)uint64_t v28 = v10;
  long long v19 = *(_OWORD *)&v28[16];
  long long v20 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 6) = *(void *)&v28[32];
  *((void *)a1 + 7) = v16;
  *(_OWORD *)&v28[24] = v20;
  long long v21 = *(long long *)((char *)a1 + 24);
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v19;
  *(_OWORD *)&v28[8] = v21;
  re::HashBrown<re::ecs2::PortalComponent const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::PortalComponent const*>,re::EqualTo<re::ecs2::PortalComponent const*>,void,false>::deinit((uint64_t)&v27);
}

void *re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || (unint64_t v7 = *((void *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Entity const*,re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize((long long *)a1, 1u);
    unint64_t v7 = *((void *)a1 + 2);
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = v7 >> 4;
  unint64_t v11 = v9 % (v7 >> 4);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10) {
        unint64_t v11 = 0;
      }
      else {
        ++v11;
      }
      unint64_t v13 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  uint64_t v14 = v12 + 16 * v11;
  int v15 = *(unsigned __int8 *)(v14 + v13);
  *(unsigned char *)(v14 + v13) = v9 & 0x7F;
  unint64_t v16 = v13 + 16 * v11;
  uint64_t v23 = *a2;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::DynamicOverflowArray((uint64_t)v24, a3);
  long long v17 = (void *)(*((void *)a1 + 1) + 96 * v16);
  *long long v17 = v23;
  re::DynamicOverflowArray<re::DataArrayHandle<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>,8ul>::operator=((uint64_t)(v17 + 1), (uint64_t)v24);
  if (v24[0] && (v25 & 1) == 0) {
    (*(void (**)(void))(*(void *)v24[0] + 40))();
  }
  uint64_t v18 = *((void *)a1 + 4);
  ++*((void *)a1 + 3);
  *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v18 - (v15 == 255);
  long long v19 = (unint64_t *)(*((void *)a1 + 1) + 96 * v16);
  unint64_t v21 = *v19;
  uint64_t result = v19 + 1;
  unint64_t v22 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
  *((void *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

void *re::DynamicOverflowArray<unsigned short,8ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 >= *(void *)(a1 + 8))
  {
    re::DynamicOverflowArray<unsigned short,8ul>::setCapacity((void *)a1, *(void *)(a2 + 8));
    if (*(unsigned char *)(a2 + 16)) {
      unint64_t v7 = (const void *)(a2 + 24);
    }
    else {
      unint64_t v7 = *(const void **)(a2 + 32);
    }
    uint64_t v8 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      unint64_t v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if (v9) {
          uint64_t v11 = a1 + 24;
        }
        else {
          uint64_t v11 = *(void *)(a1 + 32);
        }
        uint64_t v12 = *(void *)(a1 + 8);
        unint64_t v13 = (void *)(v11 + 2 * v12);
        if (*(_DWORD *)(a2 + 16)) {
          uint64_t v14 = a2 + 24;
        }
        else {
          uint64_t v14 = *(void *)(a2 + 32);
        }
        uint64_t result = memcpy(v13, (const void *)(v14 + 2 * v12), 2 * v4 - 2 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      unint64_t v10 = *(void **)(a1 + 32);
      if (!v8) {
        goto LABEL_18;
      }
    }
    memmove(v10, v7, 2 * v8);
    int v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v5 = (const void *)(a2 + 24);
  }
  else {
    unint64_t v5 = *(const void **)(a2 + 32);
  }
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t result = *(void **)(a1 + 32);
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  uint64_t result = (void *)(a1 + 24);
  if (v4) {
LABEL_15:
  }
    uint64_t result = memmove(result, v5, 2 * v4);
LABEL_25:
  *(void *)(a1 + 8) = v4;
  return result;
}

uint64_t re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        unint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 3584, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          int v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            int v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::ClippingParameterDataStateTracking::buildClippingParameterDataStateForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&,re::ecs2::RenderOptions const&)::EntityClippingData,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 5) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 5)) + 112 * (a2 & 0x1F);
}

uint64_t re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[1];
    *(void *)a1 = v3;
    re::DynamicOverflowArray<unsigned short,8ul>::setCapacity((void *)a1, v5);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<unsigned short,8ul>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DebugSettingsManager::getWithErrorCode<float>(uint64_t a1, void *a2, _DWORD *a3)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 3;
  }
  if (!a3) {
    return 4;
  }
  uint64_t v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v7 = re::DebugSettingsManager::contains<float>(a1, a2);
  if (!v7)
  {
    uint64_t v8 = 0x7FFFFFFFLL;
    if (*(void *)a1)
    {
      unint64_t v9 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if (v10 != 0x7FFFFFFF)
      {
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v8 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((void *)(v11 + 40 * v10 + 8), a2))
        {
          uint64_t v10 = *(_DWORD *)(v11 + 40 * v10) & 0x7FFFFFFF;
          if (v10 == 0x7FFFFFFF) {
            goto LABEL_13;
          }
        }
        uint64_t v8 = v10;
      }
    }
LABEL_13:
    uint64_t v12 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v12 + 40 * v8 + 24))
    {
      uint64_t v13 = v12 + 40 * v8;
      int v14 = *(_DWORD *)(v13 + 32);
      if (v14 == 1) {
        *a3 = *(_DWORD *)(v13 + 28);
      }
      uint64_t v7 = v14 != 1;
    }
    else
    {
      uint64_t v7 = 5;
    }
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::DebugSettingsManager::contains<float>(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 112)) {
    return 3;
  }
  uint64_t v2 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1, a2);
  if (!v2) {
    return 1;
  }
  if (*(unsigned char *)v2 && *(_DWORD *)(v2 + 8) != 1) {
    return 2;
  }
  return 0;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned short,8ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  if (!*(void *)result)
  {
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if (*((unsigned char *)result + 16))
  {
    if (a2 <= 8) {
      return result;
    }
    unint64_t v5 = 16;
  }
  else
  {
    unint64_t v4 = *((void *)result + 3);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned short,8ul>::setCapacity(result, a2);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v35, 0, 36);
          *(void *)&v35[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::MeshSortingCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v35, v14, v13);
          long long v16 = *(_OWORD *)v35;
          *(_OWORD *)unint64_t v35 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v35[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v35[16] = v18;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v17;
          long long v20 = *(_OWORD *)&v35[24];
          *(_OWORD *)&v35[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v35[32];
          *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 16);
              }
              v22 += 224;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::ecs2::Entity const*,re::ecs2::ClippingParameterData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v35);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 224 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 224 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 224 * v10 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 224 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 224 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 224 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 224 * v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + 224 * v10;
  *(_OWORD *)(v26 + 32) = *(_OWORD *)a5;
  long long v27 = *(_OWORD *)(a5 + 16);
  long long v28 = *(_OWORD *)(a5 + 32);
  long long v29 = *(_OWORD *)(a5 + 64);
  *(_OWORD *)(v26 + 80) = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(v26 + 96) = v29;
  *(_OWORD *)(v26 + 48) = v27;
  *(_OWORD *)(v26 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v28;
  long long v30 = *(_OWORD *)(a5 + 80);
  long long v31 = *(_OWORD *)(a5 + 96);
  long long v32 = *(_OWORD *)(a5 + 128);
  *(_OWORD *)(v26 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(v26 + 160) = v32;
  *(_OWORD *)(v26 + 112) = v30;
  *(_OWORD *)(v26 + 128) = v31;
  re::DynamicOverflowArray<unsigned short,8ul>::DynamicOverflowArray(v26 + 176, a5 + 144);
  int v33 = *(_DWORD *)(a5 + 184);
  *(_DWORD *)(v26 + 219) = *(_DWORD *)(a5 + 187);
  *(_DWORD *)(v26 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v33;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 36);
  if (v7 == 0x7FFFFFFF)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    int v8 = v7;
    if (v7 == *(_DWORD *)(a1 + 24))
    {
      int v9 = *(_DWORD *)(a1 + 28);
      signed int v10 = 2 * v9;
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v10) {
          BOOL v12 = v7 == v10;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12 && (v9 & 0x80000000) == 0)
        {
          memset(v24, 0, 36);
          *(void *)&v24[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::init((uint64_t)v24, v11, v10);
          long long v13 = *(_OWORD *)v24;
          *(_OWORD *)int v24 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v13;
          uint64_t v14 = *(void *)&v24[16];
          uint64_t v15 = *(void *)(a1 + 16);
          *(void *)&v24[16] = v15;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14;
          long long v17 = *(_OWORD *)&v24[24];
          *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
          unsigned int v16 = *(_DWORD *)&v24[32];
          *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17;
          uint64_t v18 = v16;
          if (v16)
          {
            uint64_t v19 = v15 + 16;
            do
            {
              if ((*(_DWORD *)(v19 - 8) & 0x80000000) != 0) {
                re::HashSetBase<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>,re::internal::ValueAsKey<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::Hash<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,re::EqualTo<re::Pair<re::ecs2::Entity const*,re::ecs2::PortalComponent const*,true>>,true,false>::addAsMove(a1, *(void *)(v19 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v19 - 16), v19);
              }
              v19 += 32;
              --v18;
            }
            while (v18);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
        }
      }
      else
      {
        if (v10) {
          signed int v22 = v10;
        }
        else {
          signed int v22 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(v20 + 32 * v7 + 8);
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 16);
    int v21 = *(_DWORD *)(v20 + 32 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v20 + 32 * v7 + 8) = v21 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v7 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v7) = a3;
  *(_OWORD *)(*(void *)(a1 + 16) + 32 * v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

uint64_t re::DataArray<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData>::DataArrayIterator<re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData,re::ecs2::ClippingParameterDataStateTracking::PortalCrossingData&>::DataArrayIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  if (*(_DWORD *)(a2 + 40))
  {
    *(_DWORD *)(a1 + 8) = 0;
    if (!*(void *)(a2 + 16))
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (!**(_DWORD **)(*(void *)(a2 + 32) + 8)) {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)a1);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = -1;
  }
  return a1;
}

void *re::ecs2::allocInfo_RenderGraphFileProviderEntry(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91FB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91FB8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92078, "RenderGraphFileProviderEntry");
    __cxa_guard_release(&qword_26AF91FB8);
  }
  return &unk_26AF92078;
}

void re::ecs2::initInfo_RenderGraphFileProviderEntry(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v26[0] = 0xB11ACD09D60D6D1ALL;
  v26[1] = "RenderGraphFileProviderEntry";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91FC0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF91FC0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "renderGraph";
      *(void *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v7;
      *(void *)(v8 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92010 = v8;
      int v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "typeScope";
      *(void *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v11;
      *(void *)(v12 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v12 + 32) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92018 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      uint64_t v15 = re::introspect_int((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "order";
      *(void *)(v16 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v15;
      *(void *)(v16 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v16 + 32) = 0x3800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92020 = v16;
      long long v17 = re::introspectionAllocator((re *)v16);
      uint64_t v19 = re::introspect_uint64_t((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "token";
      *(void *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v19;
      *(void *)(v20 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v20 + 32) = 0x4000000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92028 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "removed";
      *(void *)(v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
      *(void *)(v24 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v24 + 32) = 0x4800000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92030 = v24;
      __cxa_guard_release(&qword_26AF91FC0);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 5;
  *((void *)this + 8) = &qword_26AF92010;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderEntry>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderEntry>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderEntry>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderEntry>;
  re::IntrospectionRegistry::add(this, v3);
  long long v25 = v27;
}

void *re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderEntry>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v3 += 24;
  uint64_t result = re::DynamicString::setCapacity((void *)v3, 0);
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderEntry>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a3);
}

void *re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderEntry>(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v1 += 24;
  uint64_t result = re::DynamicString::setCapacity((void *)v1, 0);
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderEntry>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 24));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

void *re::ecs2::allocInfo_RenderGraphFileProviderArrayComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91FD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91FD8))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF920F0, "RenderGraphFileProviderArrayComponent");
    __cxa_guard_release(&qword_26AF91FD8);
  }
  return &unk_26AF920F0;
}

void re::ecs2::initInfo_RenderGraphFileProviderArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v34 = 0x5223CBB28538BDD2;
  v35[0] = "RenderGraphFileProviderArrayComponent";
  re::StringID::destroyString((re::StringID *)&v34);
  *((_OWORD *)this + 2) = v29;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91FD0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF91FD0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91FF0 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      int v9 = v8;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91FE8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v8 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF91FE8);
        if (v8)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF92038);
          qword_26AF92038 = (uint64_t)&unk_26E70BF38;
          __cxa_guard_release(&qword_26AF91FE8);
        }
      }
      if ((_MergedGlobals_350 & 1) == 0)
      {
        signed int v10 = (void *)qword_26AF91FC8;
        if (qword_26AF91FC8
          || (signed int v10 = re::ecs2::allocInfo_RenderGraphFileProviderEntry(v8),
              qword_26AF91FC8 = (uint64_t)v10,
              re::ecs2::initInfo_RenderGraphFileProviderEntry((re::ecs2 *)v10, v11),
              (_MergedGlobals_350 & 1) == 0))
        {
          _MergedGlobals_350 = 1;
          int v12 = *((_DWORD *)v10 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF92038, 0);
          qword_26AF92048 = 0x2800000003;
          dword_26AF92050 = v12;
          word_26AF92054 = 0;
          *(void *)&xmmword_26AF92058 = 0;
          *((void *)&xmmword_26AF92058 + 1) = 0xFFFFFFFFLL;
          qword_26AF92068 = (uint64_t)v10;
          unk_26AF92070 = 0;
          qword_26AF92038 = (uint64_t)&unk_26E70BF38;
          re::IntrospectionRegistry::add(v13, v14);
          re::getPrettyTypeName((re *)&qword_26AF92038, (const re::IntrospectionBase *)&v34);
          if (v35[0]) {
            uint64_t v15 = (const char *)v35[1];
          }
          else {
            uint64_t v15 = (char *)v35 + 1;
          }
          if (v34 && (v35[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v34 + 40))();
          }
          long long v31 = *((_OWORD *)v10 + 2);
          uint64_t v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v32);
          if (v16)
          {
            uint64_t v17 = *v16;
            *((void *)&v30 + 1) = v17;
          }
          else
          {
            long long v33 = v31;
            re::TypeBuilder::beginListType((uint64_t)&v34, v32, 1, 0x28uLL, 8uLL, &v33);
            re::TypeBuilder::setConstructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v34, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v34, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v34, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v34, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v34, v18);
          }
          xmmword_26AF92058 = v30;
          re::StringID::destroyString((re::StringID *)v32);
        }
      }
      uint64_t v19 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "m_entries";
      *(void *)(v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF92038;
      *(void *)(v19 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v19 + 32) = 0x2800000001;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF91FF8 = v19;
      uint64_t v20 = re::introspectionAllocator((re *)v19);
      signed int v22 = re::introspect_uint64_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "m_currentProviderToken";
      *(void *)(v23 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v22;
      *(void *)(v23 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v23 + 32) = 0x2000000002;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92000 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      uint64_t v26 = re::introspect_BOOL((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "m_useForScene";
      *(void *)(v27 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v26;
      *(void *)(v27 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v27 + 32) = 0x5000000003;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92008 = v27;
      __cxa_guard_release(&qword_26AF91FD0);
    }
  }
  *((void *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 4;
  *((void *)this + 8) = &qword_26AF91FF0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArrayComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArrayComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArrayComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v29;
}

void re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_WORD *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6EC058;
  *(void *)(v3 + 72) = 0;
  *(void *)(v3 + 32) = 1000;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(unsigned char *)(v3 + 80) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArrayComponent>(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_WORD *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6EC058;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 32) = 1000;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(unsigned char *)(v1 + 80) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArrayComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RenderGraphFileProviderArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFileProviderArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderGraphFileProviderArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderGraphFileProviderArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderGraphFileProviderArrayComponent>, this);
}

void *re::ecs2::allocInfo_RenderGraphFileProviderArraySystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF91FE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF91FE0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92168, "RenderGraphFileProviderArraySystem");
    __cxa_guard_release(&qword_26AF91FE0);
  }
  return &unk_26AF92168;
}

void re::ecs2::initInfo_RenderGraphFileProviderArraySystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x5B49CEE5C618AF86;
  v5[1] = "RenderGraphFileProviderArraySystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_RenderGraphFileProviderArraySystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArraySystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArraySystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArraySystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArraySystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RenderGraphFileProviderArraySystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)uint64_t v3 = &unk_26E70BEA8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::RenderGraphFileProviderArraySystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::RenderGraphFileProviderArraySystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)uint64_t v1 = &unk_26E70BEA8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::RenderGraphFileProviderArraySystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RenderGraphFileProviderArraySystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFileProviderArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderGraphFileProviderArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderGraphFileProviderArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderGraphFileProviderArraySystem>, this);
}

uint64_t re::ecs2::RenderGraphFileProviderArrayComponent::add(uint64_t a1, uint64_t *a2, const char *a3, int a4)
{
  *(unsigned char *)(a1 + 25) = 2;
  uint64_t v15 = 0;
  memset(&v16[1], 0, 24);
  long long v14 = 0u;
  re::DynamicString::setCapacity(v16, 0);
  uint64_t v18 = 0;
  char v19 = 0;
  re::AssetHandle::operator=((uint64_t)&v14, a2);
  size_t v8 = strlen(a3);
  v20[0] = a3;
  v20[1] = v8;
  re::DynamicString::operator=((re::DynamicString *)v16, (uint64_t)v20);
  int v17 = a4;
  uint64_t v9 = *(void *)(a1 + 32) + 1;
  do
  {
    uint64_t v10 = v9;
    uint64_t v9 = 1;
  }
  while (!v10);
  *(void *)(a1 + 32) = v10;
  uint64_t v18 = v10;
  __n128 v11 = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::add((_anonymous_namespace_ *)(a1 + 40), (re::AssetHandle *)&v14);
  uint64_t v12 = v18;
  if (v16[0])
  {
    if (v16[1]) {
      (*(void (**)(__n128))(*(void *)v16[0] + 40))(v11);
    }
    memset(v16, 0, sizeof(v16));
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  return v12;
}

__n128 re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::add(_anonymous_namespace_ *this, re::AssetHandle *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 80 * v4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, a2);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 24), (re::AssetHandle *)((char *)a2 + 24));
  __n128 result = *(__n128 *)((char *)a2 + 56);
  *(unsigned char *)(v5 + 72) = *((unsigned char *)a2 + 72);
  *(__n128 *)(v5 + 56) = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

unint64_t re::ecs2::RenderGraphFileProviderArrayComponent::entry(re::ecs2::RenderGraphFileProviderArrayComponent *this, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!v6[0]) {
    return 0;
  }
  unint64_t v3 = v7;
  unint64_t v4 = *((void *)this + 7);
  if (v4 <= v7)
  {
    uint64_t v8 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v9 = 136315906;
    uint64_t v10 = "operator[]";
    __int16 v11 = 1024;
    int v12 = 797;
    __int16 v13 = 2048;
    unint64_t v14 = v3;
    __int16 v15 = 2048;
    unint64_t v16 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 9) + 80 * v7;
}

uint64_t anonymous namespace'::providerTokenIndex<re::ecs2::RenderGraphFileProviderEntry>(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    goto LABEL_12;
  }
  uint64_t v4 = a3 + 80 * a2;
  uint64_t v5 = a3;
  do
  {
    uint64_t v6 = v5 + 80 * (a2 >> 1);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = v6 + 80;
    if (v7 >= a4) {
      a2 >>= 1;
    }
    else {
      a2 += ~(a2 >> 1);
    }
    if (v7 < a4) {
      uint64_t v5 = v8;
    }
  }
  while (a2);
  if (v5 != v4 && *(void *)(v5 + 64) == a4)
  {
    *(unsigned char *)__n128 result = 1;
    *(void *)(result + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v5 - a3) >> 4);
  }
  else
  {
LABEL_12:
    *(unsigned char *)__n128 result = 0;
  }
  return result;
}

uint64_t re::ecs2::RenderGraphFileProviderArrayComponent::setRenderGraph(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (v9[0])
  {
    unint64_t v6 = v10;
    unint64_t v7 = *(void *)(a1 + 56);
    if (v7 <= v10)
    {
      uint64_t v11 = 0;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v12 = 136315906;
      __int16 v13 = "operator[]";
      __int16 v14 = 1024;
      int v15 = 789;
      __int16 v16 = 2048;
      unint64_t v17 = v6;
      __int16 v18 = 2048;
      unint64_t v19 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = *(void *)(a1 + 72) + 80 * v10;
    return re::AssetHandle::operator=(v8, a3);
  }
  return result;
}

re::DynamicString *re::ecs2::RenderGraphFileProviderArrayComponent::setTypeScope(re::ecs2::RenderGraphFileProviderArrayComponent *this, unint64_t a2, const char *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (v10[0])
  {
    unint64_t v6 = v11;
    unint64_t v7 = *((void *)this + 7);
    if (v7 <= v11)
    {
      uint64_t v12 = 0;
      memset(v21, 0, sizeof(v21));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v13 = 136315906;
      __int16 v14 = "operator[]";
      __int16 v15 = 1024;
      int v16 = 789;
      __int16 v17 = 2048;
      unint64_t v18 = v6;
      __int16 v19 = 2048;
      unint64_t v20 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v8 = (re::DynamicString *)(*((void *)this + 9) + 80 * v11 + 24);
    size_t v9 = strlen(a3);
    *(void *)&v21[0] = a3;
    *((void *)&v21[0] + 1) = v9;
    return re::DynamicString::operator=(v8, (uint64_t)v21);
  }
  return result;
}

uint64_t re::ecs2::RenderGraphFileProviderArrayComponent::setOrder(re::ecs2::RenderGraphFileProviderArrayComponent *this, unint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (v8[0])
  {
    unint64_t v6 = v9;
    unint64_t v7 = *((void *)this + 7);
    if (v7 <= v9)
    {
      uint64_t v10 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v11 = 136315906;
      uint64_t v12 = "operator[]";
      __int16 v13 = 1024;
      int v14 = 789;
      __int16 v15 = 2048;
      unint64_t v16 = v6;
      __int16 v17 = 2048;
      unint64_t v18 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*((void *)this + 9) + 80 * v9 + 56) = a3;
  }
  return result;
}

uint64_t re::ecs2::RenderGraphFileProviderArraySystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v4 = result;
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(result + 104);
  if (v5 && (*(unsigned char *)(v5 + 424) & 0x10) == 0) {
    return result;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    return result;
  }
  unint64_t v7 = *(re::ecs2::RenderingSubsystem ***)a2;
  uint64_t v49 = *(void *)a2 + 8 * v6;
  uint64_t v48 = result;
  do
  {
    int8x16_t v52 = *v7;
    if (!*v7) {
      goto LABEL_84;
    }
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v58);
    uint64_t v9 = *(void *)(v4 + 112);
    if (!v9) {
      goto LABEL_87;
    }
    uint64_t v10 = *(void *)(v9 + 104);
    unint64_t v50 = v7;
    if (v10) {
      uint64_t v11 = re::RenderFrameBox::get(v10 + 344, 0xFFFFFFFFFFFFFFFuLL);
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(re::Allocator **)(v11 + 376);
    v54[1] = 0;
    uint64_t v55 = 0;
    int v56 = 0;
    uint64_t v57 = 0;
    int8x16_t v51 = v12;
    v54[0] = v12;
    re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(v54, 0);
    ++v56;
    uint64_t v53 = (*(uint64_t (**)(void))(**(void **)(v4 + 136) + 24))(*(void *)(v4 + 136));
    uint64_t v13 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v52 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (!v13) {
      goto LABEL_57;
    }
    uint64_t v14 = *(void *)(v13 + 24);
    if (!v14) {
      goto LABEL_57;
    }
    __int16 v15 = *(uint64_t **)(v13 + 40);
    unint64_t v16 = &v15[v14];
    do
    {
      uint64_t v3 = *v15;
      uint64_t v17 = *(void *)(*v15 + 16);
      if (!v17 || (~*(_DWORD *)(v17 + 288) & 0x2008) != 0) {
        goto LABEL_56;
      }
      int v18 = *(unsigned __int8 *)(v3 + 25);
      if (!*(unsigned char *)(v3 + 25))
      {
        uint64_t v19 = *(void *)(v17 + 200);
        if (v19 && *(void *)(v19 + 32) && RESyncableGetOwnerPeerID()) {
          int v18 = 1;
        }
        else {
          int v18 = 2;
        }
        *(unsigned char *)(v3 + 25) = v18;
      }
      unint64_t v2 = *(void *)(v3 + 56);
      if (v18 != 2)
      {
        if (v2) {
          char v29 = 3;
        }
        else {
          char v29 = 1;
        }
        goto LABEL_41;
      }
      if (!v2) {
        goto LABEL_40;
      }
      unint64_t v20 = 0;
      do
      {
        uint64_t v21 = *(void *)(v3 + 72);
        if (*(unsigned char *)(v21 + 80 * v20 + 72))
        {
          if (v2 <= v20)
          {
            uint64_t v59 = 0;
            memset(v62, 0, 48);
            long long v60 = 0u;
            long long v61 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)unint64_t v66 = 136315906;
            *(void *)&v66[4] = "removeStableAt";
            __int16 v67 = 1024;
            int v68 = 969;
            __int16 v69 = 2048;
            unint64_t v70 = v20;
            __int16 v71 = 2048;
            unint64_t v72 = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_87:
            re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 193);
            _os_crash();
            __break(1u);
          }
          if (v2 - 1 > v20 && v21 + 80 * v20 + 80 != v21 + 80 * v2)
          {
            uint64_t v22 = 80 * v20;
            uint64_t v23 = 80 * v2 - 80;
            do
            {
              uint64_t v24 = v21 + v22;
              long long v25 = *(_OWORD *)(v21 + 80 * v20);
              *(_OWORD *)uint64_t v24 = *(_OWORD *)(v21 + v22 + 80);
              *(_OWORD *)(v24 + 80) = v25;
              uint64_t v26 = *(void *)(v21 + v22 + 16);
              *(void *)(v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(void *)(v21 + v22 + 96);
              *(void *)(v24 + 96) = v26;
              re::DynamicString::operator=((re::DynamicString *)(v21 + v22 + 24), (re::DynamicString *)(v21 + v22 + 104));
              *(_OWORD *)(v24 + 56) = *(_OWORD *)(v24 + 136);
              *(unsigned char *)(v24 + 72) = *(unsigned char *)(v24 + 152);
              v21 += 80;
              v23 -= 80;
            }
            while (v22 != v23);
            unint64_t v2 = *(void *)(v3 + 56);
            uint64_t v21 = *(void *)(v3 + 72);
          }
          uint64_t v27 = v21 + 80 * v2;
          long long v28 = (re::AssetHandle *)(v27 - 80);
          re::DynamicString::deinit((re::DynamicString *)(v27 - 56));
          re::AssetHandle::~AssetHandle(v28);
          unint64_t v2 = *(void *)(v3 + 56) - 1;
          *(void *)(v3 + 56) = v2;
          ++*(_DWORD *)(v3 + 64);
        }
        else
        {
          ++v20;
        }
      }
      while (v20 < v2);
      if (v2)
      {
        char v29 = 2;
        goto LABEL_41;
      }
LABEL_40:
      char v29 = 1;
LABEL_41:
      *(unsigned char *)(v3 + 25) = v29;
      if (*(unsigned char *)(v3 + 80) && v2)
      {
        uint64_t v30 = 0;
        uint64_t v3 = *(void *)(v3 + 72);
        uint64_t v31 = 80 * v2;
        do
        {
          unint64_t v2 = v3 + v30;
          if (!*(unsigned char *)(v3 + v30 + 72))
          {
            uint64_t v32 = *(void *)(v2 + 8);
            if (v32 && (unsigned int v33 = atomic_load((unsigned int *)(v32 + 704)), v33 == 2))
            {
              uint64_t v34 = v3 + v30;
              if (*(unsigned char *)(v3 + v30 + 32)) {
                unint64_t v35 = *(const char **)(v34 + 40);
              }
              else {
                unint64_t v35 = (const char *)(v34 + 33);
              }
              *(void *)&long long v60 = 0;
              re::DynamicString::DynamicString((re::DynamicString *)((char *)&v60 + 8), v35, v51);
              *(void *)&long long v60 = re::AssetHandle::asset<re::RenderGraphAsset>((re::RenderGraphAsset *)(v3 + v30)) + 8;
              DWORD2(v62[0]) = *(_DWORD *)(v3 + v30 + 56);
              re::DynamicArray<re::RenderGraphFileProvider>::add((_anonymous_namespace_ *)v54, (uint64_t)&v60);
              if (*((void *)&v60 + 1) && (v61 & 1) != 0) {
                (*(void (**)(void))(**((void **)&v60 + 1) + 40))();
              }
            }
            else
            {
              re::AssetHandle::loadAsync((re::AssetHandle *)(v3 + v30));
            }
          }
          v30 += 80;
        }
        while (v31 != v30);
      }
LABEL_56:
      ++v15;
    }
    while (v15 != v16);
LABEL_57:
    if (v55)
    {
      re::ecs2::WorldRootProvider::worldIds((re::ecs2::WorldRootProvider *)&v53, (uint64_t)&v60);
      int v36 = v64;
      if (v64)
      {
        LODWORD(v2) = v65;
        if (v65)
        {
          uint64_t v37 = 0;
          uint64_t v38 = (int *)v63[2];
          while (1)
          {
            int v39 = *v38;
            v38 += 4;
            if (v39 < 0) {
              break;
            }
            if (v65 == ++v37)
            {
              LODWORD(v37) = v65;
              break;
            }
          }
          LODWORD(v3) = v37;
        }
        else
        {
          LODWORD(v3) = 0;
        }
        long long v41 = (const re::ecs2::Scene **)v63;
        uint64_t v40 = (const re::ecs2::Scene **)v63;
      }
      else
      {
        uint64_t v40 = (const re::ecs2::Scene **)v62;
        long long v41 = (const re::ecs2::Scene **)v62 + v61;
      }
      BOOL v42 = v40 != v41;
      if (v64) {
        BOOL v42 = v2 != v3;
      }
      if (v42)
      {
        do
        {
          uint64_t v43 = v40;
          if (v36) {
            uint64_t v43 = (const re::ecs2::Scene **)((char *)v40[2] + 16 * v3 + 8);
          }
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v52, *v43, (re::DynamicString **)v11, v66);
          uint64_t v59 = *(void *)v66 >> 1;
          uint64_t v44 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v11 + 264), (const re::WeakStringID *)&v59)+ 48);
          (*(void (**)(void))(v44 + 808))();
          re::StringID::destroyString((re::StringID *)v66);
          if (v36)
          {
            unsigned int v45 = v3 + 1;
            do
            {
              LODWORD(v3) = v45;
              if (v45 >= *((_DWORD *)v40 + 8)) {
                break;
              }
              int v46 = *((_DWORD *)v40[2] + 4 * v45++);
            }
            while ((v46 & 0x80000000) == 0);
          }
          else
          {
            ++v40;
          }
          BOOL v47 = v40 != v41;
          if (v36) {
            BOOL v47 = v2 != v3;
          }
        }
        while (v47);
      }
      re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)&v60);
    }
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v54);
    uint64_t result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v58);
    uint64_t v4 = v48;
    unint64_t v7 = v50;
LABEL_84:
    ++v7;
  }
  while (v7 != (re::ecs2::RenderingSubsystem **)v49);
  return result;
}

void re::ecs2::RenderGraphFileProviderArraySystem::~RenderGraphFileProviderArraySystem(re::ecs2::RenderGraphFileProviderArraySystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::RenderGraphFileProviderArraySystem::typeInfo(re::ecs2::RenderGraphFileProviderArraySystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderGraphFileProviderArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderGraphFileProviderArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderGraphFileProviderArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderGraphFileProviderArraySystem>, 0);
}

void *re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  memset(v17, 0, sizeof(v17));
  uint64_t v14 = 0;
  long long v16 = 0u;
  long long v13 = 0u;
  re::DynamicString::setCapacity(&v15, 0);
  *(void *)&v17[1] = 0;
  BYTE8(v17[1]) = 0;
  unint64_t v8 = *(void *)(a4 + 16);
  if (v8 >= *(void *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::growCapacity((void *)a4, v8 + 1);
    unint64_t v8 = *(void *)(a4 + 16);
  }
  uint64_t v9 = *(void *)(a4 + 32) + 80 * v8;
  *(void *)(v9 + 8) = *((void *)&v13 + 1);
  *((void *)&v13 + 1) = 0;
  *(void *)uint64_t v9 = v13;
  *(void *)&long long v13 = 0;
  *(void *)(v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v14;
  uint64_t v14 = 0;
  *(void *)(v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v15;
  __int16 v15 = 0;
  *(void *)(v9 + 40) = *((void *)&v16 + 1);
  *((void *)&v16 + 1) = 0;
  *(void *)(v9 + 48) = *(void *)&v17[0];
  *(void *)&v17[0] = 0;
  *(void *)(v9 + 32) = v16;
  *(void *)&long long v16 = 0;
  char v10 = BYTE8(v17[1]);
  *(_OWORD *)(v9 + 56) = *(_OWORD *)((char *)v17 + 8);
  *(unsigned char *)(v9 + 72) = v10;
  ++*(void *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  uint64_t v11 = (re::IntrospectionBase *)(*(void *)(a4 + 32) + 80 * *(void *)(a4 + 16) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::RenderGraphFileProviderEntry>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 80 * a3;
}

void re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 80 * a2;
    unint64_t v9 = a2;
    do
    {
      uint64_t v10 = *((void *)v3 + 4) + v8;
      re::DynamicString::deinit((re::DynamicString *)(v10 + 24));
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
      ++v9;
      v8 += 80;
    }
    while (v9 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 80 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(void *)(v7 + 48) = 0;
        *(_OWORD *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        v7 += 24;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_DWORD *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        v6 += 80;
        *(unsigned char *)(v7 + 48) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = 80 * v8;
      do
      {
        re::DynamicString::deinit((re::DynamicString *)(v9 + 24));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
        v9 += 80;
        v10 -= 80;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12)
    {
      long long v13 = *(char **)(a1 + 32);
      uint64_t v14 = 80 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 80;
        v14 -= 80;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 80 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::RenderGraphFileProviderEntry>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RenderGraphFileProviderArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_ImageBasedLightService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_351, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_351))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF921E8, "ImageBasedLightService");
    __cxa_guard_release(&_MergedGlobals_351);
  }
  return &unk_26AF921E8;
}

void re::ecs2::initInfo_ImageBasedLightService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x16BB2D00FED2B82ELL;
  v5[1] = "ImageBasedLightService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ImageBasedLightService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_ImageBasedLightService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightService>, this);
}

void *re::ecs2::allocInfo_PbrMaterialParametersComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_352, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_352))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92288, "PbrMaterialParametersComponent");
    __cxa_guard_release(&_MergedGlobals_352);
  }
  return &unk_26AF92288;
}

void re::ecs2::initInfo_PbrMaterialParametersComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x3ABE975A155C7198;
  v16[1] = "PbrMaterialParametersComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92268, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF92268);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92270 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_PbrMaterialParameters((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "params";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
      *(void *)(v10 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92278 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      long long v13 = re::introspect_AssetHandle((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "materialAsset";
      *(void *)(v14 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v13;
      *(void *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v14 + 32) = 0x21000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92280 = v14;
      __cxa_guard_release(&qword_26AF92268);
    }
  }
  *((void *)this + 2) = 0x23000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 3;
  *((void *)this + 8) = &qword_26AF92270;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PbrMaterialParametersComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PbrMaterialParametersComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PbrMaterialParametersComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::PbrMaterialParametersComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

void *re::internal::defaultConstruct<re::ecs2::PbrMaterialParametersComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PbrMaterialParametersComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PbrMaterialParametersComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PbrMaterialParametersComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PbrMaterialParametersComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PbrMaterialParametersComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PbrMaterialParametersComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PbrMaterialParametersComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PbrMaterialParametersComponent>, this);
}

void *re::make::shared::unsafelyInplace<re::ecs2::PbrMaterialParametersComponent>(void *a1)
{
  a1[2] = 0;
  *((unsigned char *)a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *a1 = &unk_26E6EC908;
  re::PbrMaterialParameters::PbrMaterialParameters((re::PbrMaterialParameters *)(a1 + 4));
  a1[68] = 0;
  *((_OWORD *)a1 + 33) = 0u;
  return a1;
}

void *re::ecs2::allocInfo_VFXEmitterSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_353, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_353))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92308, "VFXEmitterSystem");
    __cxa_guard_release(&_MergedGlobals_353);
  }
  return &unk_26AF92308;
}

void re::ecs2::initInfo_VFXEmitterSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x49E29E8B3C4CC8EALL;
  v5[1] = "VFXEmitterSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_VFXEmitterSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXEmitterSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXEmitterSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXEmitterSystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::VFXEmitterSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::VFXEmitterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)uint64_t v3 = &unk_26E70BFD0;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(void *)(v3 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::VFXEmitterSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 224);
  if (v4)
  {

    *(void *)(a3 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  }
  long long v6 = (void **)(a3 + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 176));
  *(void *)a3 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a3 + 8));
}

double re::internal::defaultConstructV2<re::ecs2::VFXEmitterSystem>(uint64_t a1)
{
  *(void *)(a1 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)uint64_t v1 = &unk_26E70BFD0;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(void *)(v1 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::VFXEmitterSystem>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 224);
  if (v2)
  {

    *(void *)(a1 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  }
  uint64_t v4 = (void **)(a1 + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 176));
  *(void *)a1 = &unk_26E6DECE0;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VFXEmitterSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXEmitterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXEmitterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXEmitterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXEmitterSystem>, this);
}

void re::ecs2::VFXEmitterSystem::updateScenes(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  if ((!v4 || (*(unsigned char *)(v4 + 424) & 0x10) != 0)
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 168))(*(void *)(a1 + 40)) & 1) == 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if (!v5) {
      goto LABEL_27;
    }
    char v6 = 0;
    uint64_t v7 = *(void **)a2;
    uint64_t v8 = *(void *)a2 + 8 * v5;
    uint64_t v27 = (re::AssetHandle *)(a1 + 176);
    do
    {
      while (1)
      {
        uint64_t v9 = *v7;
        uint64_t v10 = (re::ecs2::SceneComponentTable *)(*v7 + 200);
        uint64_t v11 = (re *)re::ecs2::SceneComponentTable::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (!v11) {
          break;
        }
        uint64_t v12 = *((void *)v11 + 3);
        if (!v12) {
          break;
        }
        long long v13 = (re::ecs2::VFXEmitterComponent **)*((void *)v11 + 5);
        if ((v6 & 1) == 0)
        {
          if (*(void *)(a1 + 120) && !*(void *)(a1 + 184))
          {
            re::loadVFXAssetsFramework(v11);
            (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 120) + 8))(&v29);
            long long v14 = *(_OWORD *)(a1 + 176);
            *(_OWORD *)(a1 + 176) = v29;
            long long v29 = v14;
            uint64_t v15 = *(void *)(a1 + 192);
            *(void *)(a1 + 192) = v30;
            uint64_t v30 = v15;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v29);
            re::AssetHandle::loadAsync(v27);
          }
          if (!*(void *)(a1 + 224))
          {
            uint64_t v18 = *(void *)(a1 + 184);
            if (v18)
            {
              unsigned int v19 = atomic_load((unsigned int *)(v18 + 704));
              if (v19 == 2)
              {
                re::ecs2::VFXSceneComponent::createDetachedSceneComponent(&v29);
                uint64_t v20 = *(void *)(a1 + 224);
                uint64_t v21 = v29;
                *(void *)(a1 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v29;
                if (v20)
                {

                  uint64_t v21 = *(void *)(a1 + 224);
                }
                re::AssetHandle::AssetHandle((re::AssetHandle *)v28, v27);
                re::ecs2::VFXSceneComponent::setVFXFromParticleEmitter(v21, (const re::AssetHandle *)v28);
                re::AssetHandle::~AssetHandle((re::AssetHandle *)v28);
                re::ecs2::VFXSceneComponent::initializeBindings(*(re::ecs2::VFXSceneComponent **)(a1 + 224));
                re::ecs2::VFXSceneComponent::updateBindingStatesInitialValues(*(re::ecs2::VFXSceneComponent **)(a1 + 224));
                uint64_t v22 = *(re::ecs2::VFXEmitterComponent **)(a1 + 224);
                *((unsigned char *)v22 + 213) = 1;
                re::ecs2::VFXEmitterComponent::loadBindingValues(v22, &v29);
                std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__vdeallocate((void **)(a1 + 200));
                *(_OWORD *)(a1 + 200) = v29;
                *(void *)(a1 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v30;
                uint64_t v30 = 0;
                long long v29 = 0uLL;
                uint64_t v31 = (void **)&v29;
                std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v31);
              }
            }
          }
        }
        if (v9)
        {
          re::ecs2::SceneComponentTable::get(v10, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v29, 3142, a1);
          uint64_t v16 = 8 * v12;
          do
          {
            long long v17 = *v13++;
            re::ecs2::VFXEmitterComponent::loadAssetsIfNeeded((uint64_t)v17, *(AssetService **)(a1 + 120), *(void *)(a1 + 224), (uint64_t *)(a1 + 200));
            re::ecs2::VFXEmitterComponent::update(v17);
            v16 -= 8;
          }
          while (v16);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v29);
        }
        ++v7;
        char v6 = 1;
        if (v7 == (void *)v8) {
          return;
        }
      }
      ++v7;
    }
    while (v7 != (void *)v8);
    if ((v6 & 1) == 0)
    {
LABEL_27:
      uint64_t v23 = *(void *)(a1 + 224);
      if (v23)
      {
        uint64_t v25 = *(void *)(a1 + 200);
        uint64_t v24 = *(void *)(a1 + 208);
        if (v24 == v25) {
          goto LABEL_31;
        }
        do
        {
          uint64_t v26 = v24 - 64;
          re::DynamicArray<unsigned long>::deinit(v24 - 40);
          uint64_t v24 = v26;
        }
        while (v26 != v25);
        uint64_t v23 = *(void *)(a1 + 224);
        *(void *)(a1 + 208) = v25;
        if (v23)
        {
LABEL_31:

          *(void *)(a1 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
        }
      }
    }
  }
}

uint64_t emitterComponentDidChangeHandler(uint64_t a1, void *a2)
{
  uint64_t v3 = (const re::ecs2::ComponentTypeBase *)a2[1];
  if (v3 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    uint64_t v4 = (re::ecs2::VFXEmitterComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*a2 + 32), v3);
    if (v4) {
      re::ecs2::VFXEmitterComponent::update(v4);
    }
  }
  return 0;
}

re::EventBus *re::ecs2::VFXEmitterSystem::willAddSceneToECSService(re::ecs2::VFXEmitterSystem *this, re::ecs2::Scene *a2)
{
  double result = (re::EventBus *)*((void *)a2 + 36);
  if (result)
  {
    double result = (re::EventBus *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(result, 0, (uint64_t)emitterComponentDidChangeHandler, 0, 0);
    *((void *)this + 20) = result;
    *((void *)this + 21) = v4;
  }
  return result;
}

uint64_t re::ecs2::VFXEmitterSystem::willRemoveSceneFromECSService(re::ecs2::VFXEmitterSystem *this, re::ecs2::Scene *a2)
{
  uint64_t result = *((void *)a2 + 36);
  if (result) {
    return re::EventBus::unsubscribe(result, *((void *)this + 20), *((void *)this + 21));
  }
  return result;
}

void re::ecs2::VFXEmitterSystem::~VFXEmitterSystem(re::ecs2::VFXEmitterSystem *this)
{
  uint64_t v2 = *((void *)this + 28);
  if (v2)
  {

    *((void *)this + 28) = 0;
  }
  uint64_t v3 = (void **)((char *)this + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v3);
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterSystem *)((char *)this + 176));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  void **v3;

  uint64_t v2 = *((void *)this + 28);
  if (v2)
  {

    *((void *)this + 28) = 0;
  }
  uint64_t v3 = (void **)((char *)this + 200);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v3);
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterSystem *)((char *)this + 176));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  MEMORY[0x237DBCBD0](this, 0x10E1C4015C99197);
}

uint64_t re::ecs2::VFXEmitterSystem::typeInfo(re::ecs2::VFXEmitterSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXEmitterSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXEmitterSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXEmitterSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXEmitterSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VFXEmitterSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = v3 - 64;
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v3 - 40));
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL re::CollisionEventDelegate::hasCollisionEventSubscriptions(BOOL this, const re::EventBus *a2)
{
  if (this)
  {
    uint64_t v2 = this;
    Event = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidStartEvent>(this);
    if (Event) {
      uint64_t v4 = re::EventBus::EventInfo::subscriptionCount(Event);
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidStartEventEx>(v2);
    if (v5) {
      uint64_t v5 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v5);
    }
    char v6 = (char *)v5 + v4;
    uint64_t v7 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidStopEvent>(v2);
    if (v7) {
      uint64_t v7 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v7);
    }
    uint64_t v8 = (char *)v7 + (void)v6;
    uint64_t v9 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidUpdateEvent>(v2);
    if (v9) {
      uint64_t v9 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v9);
    }
    uint64_t v10 = (char *)v9 + (void)v8;
    uint64_t v11 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>(v2);
    if (v11) {
      uint64_t v11 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v11);
    }
    uint64_t v12 = (char *)v11 + (void)v10;
    long long v13 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionStartEvent>(v2);
    if (v13) {
      long long v13 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v13);
    }
    long long v14 = (char *)v13 + (void)v12;
    uint64_t v15 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionStopEvent>(v2);
    if (v15) {
      uint64_t v15 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v15);
    }
    uint64_t v16 = (char *)v15 + (void)v14;
    long long v17 = (re::EventBus::EventInfo *)re::EventBus::getEventInfo<RECollisionUpdateEvent>(v2);
    if (v17) {
      long long v17 = (re::EventBus::EventInfo *)re::EventBus::EventInfo::subscriptionCount(v17);
    }
    return (re::EventBus::EventInfo *)((char *)v17 + (void)v16) != 0;
  }
  return this;
}

void re::EngineCollisionEventDelegate::startCollision(re::EngineCollisionEventDelegate *this, const re::CollisionObject *a2, const re::CollisionObject *a3, float32x4_t *a4)
{
  uint64_t v8 = *((void *)a2 + 5);
  if (v8) {
    id v9 = (id)(v8 + 8);
  }
  uint64_t v10 = *((void *)a3 + 5);
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  if (v8)
  {
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 24);
    }
    while (v12);
    if (!*(void *)(v13 + 16)) {
      goto LABEL_12;
    }
    uint64_t v14 = v8;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 24);
    }
    while (v14);
    uint64_t v16 = *(re::EventBus **)(*(void *)(v15 + 16) + 288);
    if (!v16) {
LABEL_12:
    }
      uint64_t v16 = (re::EventBus *)*((void *)this + 1);
    uint64_t started = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEventEx>((uint64_t)v16, v8);
    uint64_t Event = re::EventBus::getEventInfo<RECollisionDidStartEventEx>((uint64_t)v16);
    if (Event) {
      uint64_t v19 = *(void *)(Event + 208);
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19 + started)
    {
      uint64_t v54 = a2;
      uint64_t v55 = a3;
      v56.i64[0] = (uint64_t)a4;
      Type = re::EventBus::getTypeId<RECollisionDidStartEventEx>();
      re::EventBus::publish(v16, v8, (uint64_t)Type, (uint64_t)&v54, 0x18uLL, 0);
    }
    uint64_t v21 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEvent>((uint64_t)v16, v8);
    uint64_t v22 = re::EventBus::getEventInfo<RECollisionDidStartEvent>((uint64_t)v16);
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 208);
    }
    else {
      uint64_t v23 = 0;
    }
    if (v23 + v21)
    {
      uint64_t v54 = a2;
      uint64_t v55 = a3;
      float32x4_t v24 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v25 = vmulq_f32(v24, v24);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
      uint64_t v26 = re::EventBus::getTypeId<RECollisionDidStartEvent>();
      re::EventBus::publish(v16, v8, (uint64_t)v26, (uint64_t)&v54, 0x30uLL, 0);
    }
    uint64_t v27 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStartEvent>((uint64_t)v16, v8);
    uint64_t v28 = re::EventBus::getEventInfo<RECollisionStartEvent>((uint64_t)v16);
    if (v28) {
      uint64_t v29 = *(void *)(v28 + 208);
    }
    else {
      uint64_t v29 = 0;
    }
    if (v29 + v27)
    {
      uint64_t v54 = a2;
      uint64_t v55 = a3;
      float32x4_t v30 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v31 = vmulq_f32(v30, v30);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
      __guard v32 = re::EventBus::getTypeId<RECollisionStartEvent>();
      re::EventBus::publish(v16, v8, v32, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v10)
  {
    uint64_t v33 = v10;
    do
    {
      uint64_t v34 = v33;
      uint64_t v33 = *(void *)(v33 + 24);
    }
    while (v33);
    if (!*(void *)(v34 + 16)) {
      goto LABEL_35;
    }
    uint64_t v35 = v10;
    do
    {
      uint64_t v36 = v35;
      uint64_t v35 = *(void *)(v35 + 24);
    }
    while (v35);
    uint64_t v37 = *(re::EventBus **)(*(void *)(v36 + 16) + 288);
    if (!v37) {
LABEL_35:
    }
      uint64_t v37 = (re::EventBus *)*((void *)this + 1);
    uint64_t v38 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEventEx>((uint64_t)v37, v10);
    uint64_t v39 = re::EventBus::getEventInfo<RECollisionDidStartEventEx>((uint64_t)v37);
    if (v39) {
      uint64_t v40 = *(void *)(v39 + 208);
    }
    else {
      uint64_t v40 = 0;
    }
    if (v40 + v38)
    {
      uint64_t v54 = a3;
      uint64_t v55 = a2;
      v56.i64[0] = (uint64_t)a4;
      long long v41 = re::EventBus::getTypeId<RECollisionDidStartEventEx>();
      re::EventBus::publish(v37, v10, (uint64_t)v41, (uint64_t)&v54, 0x18uLL, 0);
    }
    uint64_t v42 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEvent>((uint64_t)v37, v10);
    uint64_t v43 = re::EventBus::getEventInfo<RECollisionDidStartEvent>((uint64_t)v37);
    if (v43) {
      uint64_t v44 = *(void *)(v43 + 208);
    }
    else {
      uint64_t v44 = 0;
    }
    if (v44 + v42)
    {
      uint64_t v54 = a3;
      uint64_t v55 = a2;
      float32x4_t v45 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v46 = vmulq_f32(v45, v45);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
      BOOL v47 = re::EventBus::getTypeId<RECollisionDidStartEvent>();
      re::EventBus::publish(v37, v10, (uint64_t)v47, (uint64_t)&v54, 0x30uLL, 0);
    }
    uint64_t v48 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStartEvent>((uint64_t)v37, v10);
    uint64_t v49 = re::EventBus::getEventInfo<RECollisionStartEvent>((uint64_t)v37);
    if (v49) {
      uint64_t v50 = *(void *)(v49 + 208);
    }
    else {
      uint64_t v50 = 0;
    }
    if (v50 + v48)
    {
      uint64_t v54 = a3;
      uint64_t v55 = a2;
      float32x4_t v51 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v52 = vmulq_f32(v51, v51);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
      __guard v53 = re::EventBus::getTypeId<RECollisionStartEvent>();
      re::EventBus::publish(v37, v10, v53, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v8 && [(id)(v8 + 8) retainCount] == 1) {
    *((void *)a2 + 5) = 0;
  }
  if (v10)
  {
    if ([(id)(v10 + 8) retainCount] == 1) {
      *((void *)a3 + 5) = 0;
    }
  }
  if (v8) {
}
  }

void re::EngineCollisionEventDelegate::updateCollision(re::EngineCollisionEventDelegate *this, const re::CollisionObject *a2, const re::CollisionObject *a3, float32x4_t *a4)
{
  uint64_t v8 = *((void *)a2 + 5);
  if (v8) {
    id v9 = (id)(v8 + 8);
  }
  uint64_t v10 = *((void *)a3 + 5);
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  if (v8)
  {
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 24);
    }
    while (v12);
    if (!*(void *)(v13 + 16)) {
      goto LABEL_12;
    }
    uint64_t v14 = v8;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 24);
    }
    while (v14);
    uint64_t v16 = *(re::EventBus **)(*(void *)(v15 + 16) + 288);
    if (!v16) {
LABEL_12:
    }
      uint64_t v16 = (re::EventBus *)*((void *)this + 1);
    uint64_t updated = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEventEx>((uint64_t)v16, v8);
    uint64_t Event = re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>((uint64_t)v16);
    if (Event) {
      uint64_t v19 = *(void *)(Event + 208);
    }
    else {
      uint64_t v19 = 0;
    }
    if (v19 + updated)
    {
      uint64_t v54 = a2;
      uint64_t v55 = a3;
      v56.i64[0] = (uint64_t)a4;
      __guard Type = re::EventBus::getTypeId<RECollisionDidUpdateEventEx>();
      re::EventBus::publish(v16, v8, Type, (uint64_t)&v54, 0x18uLL, 0);
    }
    uint64_t v21 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEvent>((uint64_t)v16, v8);
    uint64_t v22 = re::EventBus::getEventInfo<RECollisionDidUpdateEvent>((uint64_t)v16);
    if (v22) {
      uint64_t v23 = *(void *)(v22 + 208);
    }
    else {
      uint64_t v23 = 0;
    }
    if (v23 + v21)
    {
      uint64_t v54 = a2;
      uint64_t v55 = a3;
      float32x4_t v24 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v25 = vmulq_f32(v24, v24);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
      __guard v26 = re::EventBus::getTypeId<RECollisionDidUpdateEvent>();
      re::EventBus::publish(v16, v8, v26, (uint64_t)&v54, 0x30uLL, 0);
    }
    uint64_t v27 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionUpdateEvent>((uint64_t)v16, v8);
    uint64_t v28 = re::EventBus::getEventInfo<RECollisionUpdateEvent>((uint64_t)v16);
    if (v28) {
      uint64_t v29 = *(void *)(v28 + 208);
    }
    else {
      uint64_t v29 = 0;
    }
    if (v29 + v27)
    {
      uint64_t v54 = a2;
      uint64_t v55 = a3;
      float32x4_t v30 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v31 = vmulq_f32(v30, v30);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]);
      __guard v32 = re::EventBus::getTypeId<RECollisionUpdateEvent>();
      re::EventBus::publish(v16, v8, v32, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v10)
  {
    uint64_t v33 = v10;
    do
    {
      uint64_t v34 = v33;
      uint64_t v33 = *(void *)(v33 + 24);
    }
    while (v33);
    if (!*(void *)(v34 + 16)) {
      goto LABEL_35;
    }
    uint64_t v35 = v10;
    do
    {
      uint64_t v36 = v35;
      uint64_t v35 = *(void *)(v35 + 24);
    }
    while (v35);
    uint64_t v37 = *(re::EventBus **)(*(void *)(v36 + 16) + 288);
    if (!v37) {
LABEL_35:
    }
      uint64_t v37 = (re::EventBus *)*((void *)this + 1);
    uint64_t v38 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEventEx>((uint64_t)v37, v10);
    uint64_t v39 = re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>((uint64_t)v37);
    if (v39) {
      uint64_t v40 = *(void *)(v39 + 208);
    }
    else {
      uint64_t v40 = 0;
    }
    if (v40 + v38)
    {
      uint64_t v54 = a3;
      uint64_t v55 = a2;
      v56.i64[0] = (uint64_t)a4;
      __guard v41 = re::EventBus::getTypeId<RECollisionDidUpdateEventEx>();
      re::EventBus::publish(v37, v10, v41, (uint64_t)&v54, 0x18uLL, 0);
    }
    uint64_t v42 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEvent>((uint64_t)v37, v10);
    uint64_t v43 = re::EventBus::getEventInfo<RECollisionDidUpdateEvent>((uint64_t)v37);
    if (v43) {
      uint64_t v44 = *(void *)(v43 + 208);
    }
    else {
      uint64_t v44 = 0;
    }
    if (v44 + v42)
    {
      uint64_t v54 = a3;
      uint64_t v55 = a2;
      float32x4_t v45 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v46 = vmulq_f32(v45, v45);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
      __guard v47 = re::EventBus::getTypeId<RECollisionDidUpdateEvent>();
      re::EventBus::publish(v37, v10, v47, (uint64_t)&v54, 0x30uLL, 0);
    }
    uint64_t v48 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionUpdateEvent>((uint64_t)v37, v10);
    uint64_t v49 = re::EventBus::getEventInfo<RECollisionUpdateEvent>((uint64_t)v37);
    if (v49) {
      uint64_t v50 = *(void *)(v49 + 208);
    }
    else {
      uint64_t v50 = 0;
    }
    if (v50 + v48)
    {
      uint64_t v54 = a3;
      uint64_t v55 = a2;
      float32x4_t v51 = a4[5];
      float32x4_t v56 = a4[4];
      float32x4_t v52 = vmulq_f32(v51, v51);
      float v57 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]);
      __guard v53 = re::EventBus::getTypeId<RECollisionUpdateEvent>();
      re::EventBus::publish(v37, v10, v53, (uint64_t)&v54, 0x30uLL, 0);
    }
  }
  if (v8 && [(id)(v8 + 8) retainCount] == 1) {
    *((void *)a2 + 5) = 0;
  }
  if (v10)
  {
    if ([(id)(v10 + 8) retainCount] == 1) {
      *((void *)a3 + 5) = 0;
    }
  }
  if (v8) {
}
  }

void re::EngineCollisionEventDelegate::stopCollision(re::EngineCollisionEventDelegate *this, const re::CollisionObject *a2, const re::CollisionObject *a3)
{
  uint64_t v6 = *((void *)a2 + 5);
  if (v6) {
    id v7 = (id)(v6 + 8);
  }
  uint64_t v8 = *((void *)a3 + 5);
  if (v8) {
    id v9 = (id)(v8 + 8);
  }
  if (v6)
  {
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = *(void *)(v10 + 24);
    }
    while (v10);
    if (!*(void *)(v11 + 16)) {
      goto LABEL_12;
    }
    uint64_t v12 = v6;
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 24);
    }
    while (v12);
    uint64_t v14 = *(re::EventBus **)(*(void *)(v13 + 16) + 288);
    if (!v14) {
LABEL_12:
    }
      uint64_t v14 = (re::EventBus *)*((void *)this + 1);
    uint64_t v15 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStopEvent>((uint64_t)v14, v6);
    uint64_t Event = re::EventBus::getEventInfo<RECollisionDidStopEvent>((uint64_t)v14);
    if (Event) {
      uint64_t v17 = *(void *)(Event + 208);
    }
    else {
      uint64_t v17 = 0;
    }
    if (v17 + v15)
    {
      uint64_t v36 = a2;
      uint64_t v37 = a3;
      __guard Type = re::EventBus::getTypeId<RECollisionDidStopEvent>();
      re::EventBus::publish(v14, v6, (uint64_t)Type, (uint64_t)&v36, 0x10uLL, 0);
    }
    uint64_t v19 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStopEvent>((uint64_t)v14, v6);
    uint64_t v20 = re::EventBus::getEventInfo<RECollisionStopEvent>((uint64_t)v14);
    if (v20) {
      uint64_t v21 = *(void *)(v20 + 208);
    }
    else {
      uint64_t v21 = 0;
    }
    if (v21 + v19)
    {
      uint64_t v36 = a2;
      uint64_t v37 = a3;
      __guard v22 = re::EventBus::getTypeId<RECollisionStopEvent>();
      re::EventBus::publish(v14, v6, v22, (uint64_t)&v36, 0x10uLL, 0);
    }
  }
  if (v8)
  {
    uint64_t v23 = v8;
    do
    {
      uint64_t v24 = v23;
      uint64_t v23 = *(void *)(v23 + 24);
    }
    while (v23);
    if (!*(void *)(v24 + 16)) {
      goto LABEL_30;
    }
    uint64_t v25 = v8;
    do
    {
      uint64_t v26 = v25;
      uint64_t v25 = *(void *)(v25 + 24);
    }
    while (v25);
    uint64_t v27 = *(re::EventBus **)(*(void *)(v26 + 16) + 288);
    if (!v27) {
LABEL_30:
    }
      uint64_t v27 = (re::EventBus *)*((void *)this + 1);
    uint64_t v28 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStopEvent>((uint64_t)v27, v8);
    uint64_t v29 = re::EventBus::getEventInfo<RECollisionDidStopEvent>((uint64_t)v27);
    if (v29) {
      uint64_t v30 = *(void *)(v29 + 208);
    }
    else {
      uint64_t v30 = 0;
    }
    if (v30 + v28)
    {
      uint64_t v36 = a3;
      uint64_t v37 = a2;
      float32x4_t v31 = re::EventBus::getTypeId<RECollisionDidStopEvent>();
      re::EventBus::publish(v27, v8, (uint64_t)v31, (uint64_t)&v36, 0x10uLL, 0);
    }
    uint64_t v32 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStopEvent>((uint64_t)v27, v8);
    uint64_t v33 = re::EventBus::getEventInfo<RECollisionStopEvent>((uint64_t)v27);
    if (v33) {
      uint64_t v34 = *(void *)(v33 + 208);
    }
    else {
      uint64_t v34 = 0;
    }
    if (v34 + v32)
    {
      uint64_t v36 = a3;
      uint64_t v37 = a2;
      __guard v35 = re::EventBus::getTypeId<RECollisionStopEvent>();
      re::EventBus::publish(v27, v8, v35, (uint64_t)&v36, 0x10uLL, 0);
    }
  }
  if (v6 && [(id)(v6 + 8) retainCount] == 1) {
    *((void *)a2 + 5) = 0;
  }
  if (v8)
  {
    if ([(id)(v8 + 8) retainCount] == 1) {
      *((void *)a3 + 5) = 0;
    }
  }
  if (v6) {
}
  }

void re::EngineCollisionEventDelegate::~EngineCollisionEventDelegate(re::EngineCollisionEventDelegate *this)
{
}

uint64_t re::EventBus::getEventInfo<RECollisionDidStartEvent>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionDidStartEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), (uint64_t *)&Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

uint64_t re::EventBus::EventInfo::subscriptionCount(re::EventBus::EventInfo *this)
{
  uint64_t v1 = *((void *)this + 26);
  v9[0] = (char *)this + 216;
  unint64_t v2 = *((void *)this + 29);
  if (v2 >= 0x10)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *((void *)this + 27);
    unint64_t v5 = v2 >> 4;
    while (1)
    {
      unsigned __int16 v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v4 + v3)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v9[1] = (unsigned __int16)~v6;
      if (v6 != 0xFFFF) {
        break;
      }
      v3 += 16;
      if (!--v5) {
        return v1;
      }
    }
    uint64_t v7 = __clz(__rbit64((unsigned __int16)~v6)) + v3;
    for (i = v7; i != -1; uint64_t v7 = i)
    {
      v1 += *(void *)(*(void *)(v9[0] + 8) + 144 * v7 + 136);
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v9);
    }
  }
  return v1;
}

char *re::EventBus::getTypeId<RECollisionDidStartEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionDidStartEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24RECollisionDidStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[507];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidStartEventEx>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionDidStartEventEx>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), (uint64_t *)&Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

char *re::EventBus::getTypeId<RECollisionDidStartEventEx>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionDidStartEventEx>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26RECollisionDidStartEventEx" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[509];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidStopEvent>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionDidStopEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), (uint64_t *)&Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

char *re::EventBus::getTypeId<RECollisionDidStopEvent>()
{
  v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  {
    v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionDidStopEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"23RECollisionDidStopEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
      v0 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    }
  }
  return v0[511];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidUpdateEvent>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionDidUpdateEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

__guard re::EventBus::getTypeId<RECollisionDidUpdateEvent>()
{
  {
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionDidUpdateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25RECollisionDidUpdateEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
    }
  }
  return v0[1];
}

uint64_t re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionDidUpdateEventEx>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

__guard re::EventBus::getTypeId<RECollisionDidUpdateEventEx>()
{
  {
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionDidUpdateEventEx>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"27RECollisionDidUpdateEventEx" & 0x7FFFFFFFFFFFFFFFLL), v3);
    }
  }
  return v0[3];
}

uint64_t re::EventBus::getEventInfo<RECollisionStartEvent>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionStartEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

__guard re::EventBus::getTypeId<RECollisionStartEvent>()
{
  {
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionStartEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"21RECollisionStartEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
    }
  }
  return v0[5];
}

uint64_t re::EventBus::getEventInfo<RECollisionStopEvent>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionStopEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

__guard re::EventBus::getTypeId<RECollisionStopEvent>()
{
  {
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionStopEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"20RECollisionStopEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
    }
  }
  return v0[7];
}

uint64_t re::EventBus::getEventInfo<RECollisionUpdateEvent>(uint64_t a1)
{
  __guard Type = re::EventBus::getTypeId<RECollisionUpdateEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

__guard re::EventBus::getTypeId<RECollisionUpdateEvent>()
{
  {
    if (v2)
    {
      re::EventBus::getTypeId<RECollisionUpdateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"22RECollisionUpdateEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
    }
  }
  return v0[9];
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEventEx>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionDidStartEventEx>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStartEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionDidStartEvent>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStartEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionStartEvent>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEventEx>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionDidUpdateEventEx>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidUpdateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionDidUpdateEvent>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionUpdateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionUpdateEvent>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionDidStopEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionDidStopEvent>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Entity,RECollisionStopEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t result = re::EventBus::getEventInfo<RECollisionStopEvent>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (!a2)
    {
      uint64_t v6 = result + 88;
      return *(void *)(v6 + 120);
    }
    v7[0] = a2;
    v7[1] = 0;
    uint64_t v5 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(result + 216), v7);
    if (v5 != -1)
    {
      uint64_t v6 = *(void *)(v4 + 224) + 144 * v5 + 16;
      return *(void *)(v6 + 120);
    }
    return 0;
  }
  return result;
}

void *re::ecs2::allocInfo_ThrottleComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_354, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_354))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92398, "ThrottleComponent");
    __cxa_guard_release(&_MergedGlobals_354);
  }
  return &unk_26AF92398;
}

void re::ecs2::initInfo_ThrottleComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x7C4A073DE665C1A6;
  v9[1] = "ThrottleComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92390, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF92390);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92388 = v7;
      __cxa_guard_release(&qword_26AF92390);
    }
  }
  *((void *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((void *)this + 8) = &qword_26AF92388;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ThrottleComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ThrottleComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ThrottleComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::ThrottleComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::ThrottleComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6F3698;
  *(_DWORD *)(v3 + 28) = 0;
  *(_DWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ThrottleComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ThrottleComponent>(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6F3698;
  *(_DWORD *)(v1 + 28) = 0;
  *(_DWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ThrottleComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ThrottleComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ThrottleComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ThrottleComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ThrottleComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ThrottleComponent>, this);
}

BOOL re::SRTNetworkSyncHelper::readSnapshot()
{
  unsigned int v0 = RESyncBitReaderBytesLeft();
  if (v0 >= 0x30) {
    RESyncBitReaderReadData();
  }
  return v0 > 0x2F;
}

uint64_t re::SRTNetworkSyncHelper::read(uint64_t a1, uint64_t a2)
{
  v4[0] = 0x3F8000003F800000;
  v4[1] = 1065353216;
  void v4[2] = 0;
  uint64_t v4[3] = 0x3F80000000000000;
  v4[4] = 0;
  v4[5] = 0;
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  RESyncBitReaderReadData();
  return MEMORY[0x237DBB060](a2, v4, 48);
}

uint64_t re::SRTNetworkSyncHelper::readDelta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v9 = 0x3F8000003F800000;
  *((void *)&v9 + 1) = 1065353216;
  *(void *)&long long v10 = 0;
  *((void *)&v10 + 1) = 0x3F80000000000000;
  long long v11 = 0uLL;
  uint64_t result = re::SRTNetworkSyncHelper::readSnapshot();
  if (result)
  {
    char v8 = 0;
    RESyncBitReaderReadBool();
    char v7 = 0;
    RESyncBitReaderReadBool();
    char v6 = 0;
    RESyncBitReaderReadBool();
    v5[0] = v9;
    v5[1] = v10;
    void v5[2] = v11;
    return MEMORY[0x237DBB060](a3, v5, 48);
  }
  return result;
}

BOOL re::SRTNetworkSyncHelper::write(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0x3F8000003F800000;
  uint64_t v9 = 1065353216;
  uint64_t v10 = 0;
  uint64_t v11 = 0x3F80000000000000;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  BOOL Snapshot = re::SRTNetworkSyncHelper::readSnapshot();
  if (Snapshot)
  {
    if ((*(float *)&v8 == 1.0
       || fabsf(*(float *)&v8 + -1.0) < (float)((float)((float)(fabsf(*(float *)&v8) + 1.0) + 1.0) * 0.00001))
      && (*((float *)&v8 + 1) == 1.0
       || fabsf(*((float *)&v8 + 1) + -1.0) < (float)((float)((float)(fabsf(*((float *)&v8 + 1)) + 1.0) + 1.0) * 0.00001)))
    {
      if (*(float *)&v9 == 1.0)
      {
        RESyncBitWriterWriteBool();
LABEL_19:
        MEMORY[0x237DBB060](a2, &v10, 4);
        MEMORY[0x237DBB060](a2, (char *)&v10 + 4, 4);
        MEMORY[0x237DBB060](a2, &v11, 4);
        MEMORY[0x237DBB060](a2, (char *)&v11 + 4, 4);
        MEMORY[0x237DBB060](a2, &v12, 4);
        MEMORY[0x237DBB060](a2, (char *)&v12 + 4, 4);
        MEMORY[0x237DBB060](a2, &v13, 4);
        return Snapshot;
      }
      RESyncBitWriterWriteBool();
      if (fabsf(*(float *)&v9 + -1.0) < (float)((float)((float)(fabsf(*(float *)&v9) + 1.0) + 1.0) * 0.00001)) {
        goto LABEL_19;
      }
    }
    else
    {
      RESyncBitWriterWriteBool();
    }
    if (*(float *)&v8 == *((float *)&v8 + 1)
      || vabds_f32(*(float *)&v8, *((float *)&v8 + 1)) < (float)((float)((float)(fabsf(*(float *)&v8)
                                                                               + fabsf(*((float *)&v8 + 1)))
                                                                       + 1.0)
                                                               * 0.00001))
    {
      if (*(float *)&v8 == *(float *)&v9)
      {
        RESyncBitWriterWriteBool();
        uint64_t v4 = &v8;
LABEL_18:
        MEMORY[0x237DBB060](a2, v4, 4);
        goto LABEL_19;
      }
      float v5 = (float)((float)(fabsf(*(float *)&v8) + fabsf(*(float *)&v9)) + 1.0) * 0.00001;
      float v6 = vabds_f32(*(float *)&v8, *(float *)&v9);
      RESyncBitWriterWriteBool();
      MEMORY[0x237DBB060](a2, &v8, 4);
      if (v6 < v5) {
        goto LABEL_19;
      }
    }
    else
    {
      RESyncBitWriterWriteBool();
      MEMORY[0x237DBB060](a2, &v8, 4);
    }
    MEMORY[0x237DBB060](a2, (char *)&v8 + 4, 4);
    uint64_t v4 = &v9;
    goto LABEL_18;
  }
  return Snapshot;
}

BOOL re::SRTNetworkSyncHelper::writeDelta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17.i64[0] = 0x3F8000003F800000;
  v17.i64[1] = 1065353216;
  v18.i64[0] = 0;
  v18.i64[1] = 0x3F80000000000000;
  float32x4_t v19 = 0uLL;
  if (!re::SRTNetworkSyncHelper::readSnapshot()) {
    return 0;
  }
  v14.i64[0] = 0x3F8000003F800000;
  v14.i64[1] = 1065353216;
  v15.i64[0] = 0;
  v15.i64[1] = 0x3F80000000000000;
  float32x4_t v16 = 0uLL;
  BOOL Snapshot = re::SRTNetworkSyncHelper::readSnapshot();
  if (Snapshot)
  {
    uint32x4_t v5 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v14, v17));
    v5.i32[3] = v5.i32[2];
    unsigned int v6 = vmaxvq_u32(v5);
    RESyncBitWriterWriteBool();
    unsigned int v7 = vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v15, v18)));
    RESyncBitWriterWriteBool();
    uint32x4_t v8 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v16, v19));
    v8.i32[3] = v8.i32[2];
    unsigned int v9 = vmaxvq_u32(v8);
    RESyncBitWriterWriteBool();
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    if ((v14.f32[0] == 1.0
       || fabsf(v14.f32[0] + -1.0) < (float)((float)((float)(fabsf(v14.f32[0]) + 1.0) + 1.0) * 0.00001))
      && (v14.f32[1] == 1.0
       || fabsf(v14.f32[1] + -1.0) < (float)((float)((float)(fabsf(v14.f32[1]) + 1.0) + 1.0) * 0.00001)))
    {
      if (v14.f32[2] == 1.0)
      {
        RESyncBitWriterWriteBool();
        goto LABEL_4;
      }
      RESyncBitWriterWriteBool();
      if (fabsf(v14.f32[2] + -1.0) < (float)((float)((float)(fabsf(v14.f32[2]) + 1.0) + 1.0) * 0.00001))
      {
LABEL_4:
        if ((v7 & 0x80000000) != 0)
        {
          MEMORY[0x237DBB060](a3, &v15, 4);
          MEMORY[0x237DBB060](a3, &v15.i32[1], 4);
          MEMORY[0x237DBB060](a3, &v15.u32[2], 4);
          MEMORY[0x237DBB060](a3, (char *)&v15.u64[1] + 4, 4);
          if ((v9 & 0x80000000) != 0)
          {
LABEL_16:
            MEMORY[0x237DBB060](a3, &v16, 4);
            MEMORY[0x237DBB060](a3, &v16.i32[1], 4);
            MEMORY[0x237DBB060](a3, &v16.u32[2], 4);
            return Snapshot;
          }
        }
        else if ((v9 & 0x80000000) != 0)
        {
          goto LABEL_16;
        }
        return Snapshot;
      }
    }
    else
    {
      RESyncBitWriterWriteBool();
    }
    if (v14.f32[0] == v14.f32[1]
      || vabds_f32(v14.f32[0], v14.f32[1]) < (float)((float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[1])) + 1.0)
                                                   * 0.00001))
    {
      if (v14.f32[0] == v14.f32[2])
      {
        RESyncBitWriterWriteBool();
        uint64_t v11 = &v14;
LABEL_27:
        MEMORY[0x237DBB060](a3, v11, 4);
        goto LABEL_4;
      }
      float v12 = (float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[2])) + 1.0) * 0.00001;
      float v13 = vabds_f32(v14.f32[0], v14.f32[2]);
      RESyncBitWriterWriteBool();
      MEMORY[0x237DBB060](a3, &v14, 4);
      if (v13 < v12) {
        goto LABEL_4;
      }
    }
    else
    {
      RESyncBitWriterWriteBool();
      MEMORY[0x237DBB060](a3, &v14, 4);
    }
    MEMORY[0x237DBB060](a3, &v14.i32[1], 4);
    uint64_t v11 = (float32x4_t *)&v14.u32[2];
    goto LABEL_27;
  }
  return Snapshot;
}

uint64_t re::ecs2::System::setDefaultTaskOptions(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 60) = *((unsigned char *)a2 + 8);
  *(void *)(result + 52) = v2;
  if (!*(unsigned char *)(result + 68))
  {
    uint64_t v3 = result;
    if (*(void *)(result + 96) != -1)
    {
      uint64_t result = *(void *)(result + 40);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 80))(result);
        if (result)
        {
          unint64_t v5 = *(void *)(v3 + 96);
          return re::Scheduler::setTaskOptions((re::Scheduler *)result, v5, (float *)a2);
        }
      }
    }
  }
  return result;
}

void *re::ecs2::System::setTaskOptions(void *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v4 = result + 9;
  if (*((unsigned char *)result + 68))
  {
    uint64_t v5 = *a2;
    *((unsigned char *)result + 80) = *((unsigned char *)a2 + 8);
    void *v4 = v5;
  }
  else
  {
    *((unsigned char *)result + 68) = 1;
    void *v4 = v7;
    *((_DWORD *)result + 20) = v8;
  }
  if (result[12] != -1)
  {
    uint64_t result = (void *)result[5];
    if (result)
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 80))(result);
      if (result)
      {
        unint64_t v6 = v3[12];
        return (void *)re::Scheduler::setTaskOptions((re::Scheduler *)result, v6, (float *)a2);
      }
    }
  }
  return result;
}

float *re::ecs2::System::resetTaskOptions(float *this)
{
  uint64_t v1 = this;
  if (*((unsigned char *)this + 68)) {
    *((unsigned char *)this + 68) = 0;
  }
  if (*((void *)this + 12) != -1)
  {
    this = (float *)*((void *)this + 5);
    if (this)
    {
      this = (float *)(*(uint64_t (**)(float *))(*(void *)this + 80))(this);
      if (this)
      {
        unint64_t v2 = *((void *)v1 + 12);
        return (float *)re::Scheduler::setTaskOptions((re::Scheduler *)this, v2, v1 + 13);
      }
    }
  }
  return this;
}

void re::ecs2::System::queueToRun(re::ecs2::System *this, float a2)
{
  *((unsigned char *)this + 86) = 1;
  *((float *)this + 22) = a2;
  uint64_t v3 = *((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = (re::Scheduler *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 80))(v3);
    if (v5)
    {
      unint64_t v6 = *((void *)this + 12);
      if (*((void *)v5 + 5) > v6)
      {
        re::Scheduler::enqueueTaskWithDeadline(v5, v6, a2);
      }
    }
  }
}

void re::ecs2::System::setTaskEnabled(re::ecs2::System *this, int a2)
{
  if (*((unsigned __int8 *)this + 64) != a2)
  {
    *((unsigned char *)this + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a2;
    if (*((void *)this + 12) != -1)
    {
      uint64_t v4 = *((void *)this + 5);
      if (v4)
      {
        uint64_t v5 = (re::Scheduler *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4);
        if (v5)
        {
          unint64_t v6 = *((void *)this + 12);
          re::Scheduler::setEnabled(v5, v6, a2);
        }
      }
    }
  }
}

void re::ecs2::System::update(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1[5] + 120))(a1[5]);
  if (v7)
  {
    int v8 = (id *)v6;
    uint64_t v9 = 8 * v7;
    do
    {
      id WeakRetained = objc_loadWeakRetained(v8);
      if (WeakRetained)
      {
        uint64_t v11 = WeakRetained;
        ((void (*)(void **, uint64_t, uint64_t, uint64_t))(*a1)[11])(a1, (uint64_t)WeakRetained - 8, a2, a3);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
}

void *re::ecs2::allocInfo_ECSService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_355, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_355))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92418, "ECSService");
    __cxa_guard_release(&_MergedGlobals_355);
  }
  return &unk_26AF92418;
}

void re::ecs2::initInfo_ECSService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xD62AE5A64EB00;
  v5[1] = "ECSService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_ECSService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_ECSService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ECSService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ECSService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ECSService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ECSService>, this);
}

id re::internal::defaultRetain<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ECSService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::ecs2::SceneComponentCollectionBase::remove(re::ecs2::SceneComponentCollectionBase *this, re::ecs2::Component *a2)
{
  uint64_t v11 = a2;
  uint64_t v3 = (void *)((char *)this + 56);
  uint64_t v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 7, &v11);
  if (v4 == -1) {
    return 0;
  }
  if (*(void *)(*((void *)this + 8) + 16 * v4 + 8) >= *((void *)this + 3)) {
    return 0;
  }
  (*(void (**)(re::ecs2::SceneComponentCollectionBase *))(*(void *)this + 32))(this);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v3, &v11);
  if (v5 == -1) {
    return 0;
  }
  uint64_t v6 = *((void *)this + 8) + 16 * v5;
  unint64_t v9 = *(void *)(v6 + 8);
  int v8 = (void *)(v6 + 8);
  unint64_t v7 = v9;
  if (v9 >= *((void *)this + 3)) {
    return 0;
  }
  re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt((uint64_t)this + 8, v7);
  (*(void (**)(re::ecs2::SceneComponentCollectionBase *, void, re::ecs2::Component **))(*(void *)this + 56))(this, *v8, &v11);
  return 1;
}

uint64_t re::ecs2::SceneComponentCollectionBase::add(re::ecs2::SceneComponentCollectionBase *this, re::ecs2::Component *a2)
{
  uint64_t v5 = a2;
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 7, &v5);
  if (result == -1)
  {
    unint64_t v4 = *((void *)this + 3);
    goto LABEL_5;
  }
  unint64_t v4 = *((void *)this + 3);
  if (*(void *)(*((void *)this + 8) + 16 * result + 8) >= v4)
  {
LABEL_5:
    (*(void (**)(re::ecs2::SceneComponentCollectionBase *, unint64_t, re::ecs2::Component **))(*(void *)this + 24))(this, v4, &v5);
    re::DynamicArray<re::TransitionCondition *>::add((void *)this + 1, &v5);
    return (*(uint64_t (**)(re::ecs2::SceneComponentCollectionBase *, unint64_t, re::ecs2::Component **))(*(void *)this + 48))(this, v4, &v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollectionBase::~SceneComponentCollectionBase(re::ecs2::SceneComponentCollectionBase *this)
{
  *(void *)this = &unk_26E70C148;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 56);
  *(void *)this = &unk_26E70C200;
  *((void *)this + 3) = 0;
  ++*((_DWORD *)this + 8);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
}

uint64_t re::ecs2::SceneComponentCollectionBase::setScene(uint64_t result, uint64_t a2)
{
  *(void *)(result + 120) = a2;
  return result;
}

uint64_t *re::ecs2::SceneComponentCollectionBase::willClear(uint64_t *this)
{
  if (*(void *)(this[15] + 56))
  {
    uint64_t v1 = this;
    unint64_t v2 = this + 1;
    unint64_t v3 = this[3];
    uint64_t v9 = 0;
    v7[1] = 0;
    void v7[2] = 0;
    int v8 = 0;
    re::DynamicArray<float *>::setCapacity(v7, v3);
    ++v8;
    uint64_t v4 = v1[3];
    if (v4)
    {
      uint64_t v5 = (void *)v1[5];
      uint64_t v6 = 8 * v4;
      do
      {
        re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove(v1 + 7, v5);
        if (*(unsigned char *)(*(void *)(*v5 + 16) + 288)) {
          re::DynamicArray<re::TransitionCondition *>::add(v7, v5);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
    (*(void (**)(uint64_t *, void *))(*v1 + 88))(v1, v7);
    (*(void (**)(uint64_t *, void *))(*v1 + 96))(v1, v2);
    this = (uint64_t *)v7[0];
    if (v7[0])
    {
      if (v9) {
        return (uint64_t *)(*(uint64_t (**)(void))(*(void *)v7[0] + 40))();
      }
    }
  }
  return this;
}

uint64_t re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result != -1)
  {
    uint64_t v4 = (int8x16_t *)(*a1 + (result & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    int8x8_t v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v6) {
      char v7 = -1;
    }
    else {
      char v7 = 0x80;
    }
    v4->i8[result & 0xF] = v7;
    unint64_t v8 = a1[2];
    unint64_t v9 = *(void *)(a1[1] + 16 * result);
    unint64_t v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    a1[5] ^= (v10 >> 31) ^ v10;
    uint64_t v11 = a1[4];
    if (v6) {
      ++v11;
    }
    unint64_t v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v11;
    if (v8 >= 0x11 && v12 < v8 >> 2)
    {
      return re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(a1, 0);
    }
  }
  return result;
}

uint64_t *re::ecs2::SceneComponentCollectionBase::didInsert(uint64_t *this, unint64_t a2, re::ecs2::Component **a3)
{
  uint64_t v4 = this;
  v8[0] = a2;
  if (this[3] > a2)
  {
    unint64_t v5 = a2;
    do
    {
      int8x8_t v6 = (void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v4, v5);
      this = (uint64_t *)re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace(v4 + 7, v6, v8);
      v8[0] = ++v5;
    }
    while (v5 < v4[3]);
  }
  if (*(void *)(v4[15] + 56))
  {
    re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)v8, a3);
    (*(void (**)(uint64_t *, uint64_t *))(*v4 + 72))(v4, v8);
    uint64_t v7 = *((void *)*a3 + 2);
    if ((*(unsigned char *)(v7 + 288) & 1) != 0 && !*(unsigned char *)(v7 + 370)) {
      (*(void (**)(uint64_t *, uint64_t *))(*v4 + 80))(v4, v8);
    }
    this = (uint64_t *)v8[0];
    if (v8[0])
    {
      if (v8[4]) {
        return (uint64_t *)(*(uint64_t (**)(void))(*(void *)v8[0] + 40))();
      }
    }
  }
  return this;
}

uint64_t re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace(uint64_t *a1, void *a2, uint64_t *a3)
{
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result == -1)
  {
    if (!a1[7])
    {
    }
    uint64_t v8 = a1[4];
    if (!v8 || (unint64_t v9 = a1[2], v9 > 8 * v8))
    {
      uint64_t result = re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(a1, 1u);
      unint64_t v9 = a1[2];
    }
    unint64_t v10 = 0xBF58476D1CE4E5B9;
    unint64_t v11 = 0x94D049BB133111EBLL;
    unint64_t v12 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
    unint64_t v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
    unint64_t v14 = v9 >> 4;
    uint64_t v15 = *a1;
    unint64_t v16 = v13 % v14;
    while (1)
    {
      unint64_t v17 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
      if (v17 < 0x40) {
        break;
      }
      if (v16 + 1 == v14) {
        unint64_t v16 = 0;
      }
      else {
        ++v16;
      }
      if (v16 == v13 % v14)
      {
        re::internal::assertLog((re::internal *)4, v7, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
        uint64_t result = _os_crash();
        __break(1u);
        break;
      }
    }
    unint64_t v18 = v15 + 16 * v16;
    BOOL v19 = *(unsigned __int8 *)(v18 + v17) == 255;
    *(unsigned char *)(v18 + v17) = v13 & 0x7F;
    unint64_t v20 = v17 + 16 * v16;
    uint64_t v21 = *a3;
    uint64_t v22 = 16 * v20;
    uint64_t v23 = (void *)(a1[1] + 16 * v20);
    void *v23 = *a2;
    v23[1] = v21;
    uint64_t v24 = a1[4] - v19;
    ++a1[3];
    a1[4] = v24;
    uint64_t v25 = *(void *)(a1[1] + v22) ^ (*(void *)(a1[1] + v22) >> 30);
    unint64_t v26 = ((v25 * v10) ^ ((v25 * v10) >> 27)) * v11;
    a1[5] ^= (v26 >> 31) ^ v26;
  }
  else
  {
    *(void *)(a1[1] + 16 * result + 8) = *a3;
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionBase::didRemoveAt(re::ecs2::SceneComponentCollectionBase *this, unint64_t a2, re::ecs2::Component **a3)
{
  unint64_t v5 = (uint64_t *)((char *)this + 56);
  uint64_t result = re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove((uint64_t *)this + 7, a3);
  if (*((void *)this + 3) > a2)
  {
    uint64_t v7 = (void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, a2);
    uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v5, v7);
    uint64_t v8 = *((void *)this + 8) + 16 * result;
    uint64_t v10 = *(void *)(v8 + 8);
    unint64_t v9 = (unint64_t *)(v8 + 8);
    unint64_t v11 = *((void *)this + 3);
    if (v10 == v11)
    {
      *unint64_t v9 = a2;
    }
    else
    {
      unint64_t v13 = a2;
      if (v11 > a2)
      {
        do
        {
          unint64_t v12 = (void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, a2);
          uint64_t result = re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace(v5, v12, (uint64_t *)&v13);
          unint64_t v13 = ++a2;
        }
        while (a2 < *((void *)this + 3));
      }
    }
  }
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionBase::didSet(re::ecs2::SceneComponentCollectionBase *this, uint64_t a2, re::ecs2::Component **a3, re::ecs2::Component **a4)
{
  uint64_t v7 = a2;
  unint64_t v5 = (uint64_t *)((char *)this + 56);
  re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::addOrReplace((uint64_t *)this + 7, a4, &v7);
  return re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::remove(v5, a3);
}

uint64_t re::ecs2::SceneComponentCollectionBase::willRemoveAt(uint64_t this, unint64_t a2, re::ecs2::Component **a3)
{
  if (*(void *)(*(void *)(this + 120) + 56))
  {
    uint64_t v4 = this;
    re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)v6, a3);
    uint64_t v5 = *((void *)*a3 + 2);
    if ((*(unsigned char *)(v5 + 288) & 1) != 0 && !*(unsigned char *)(v5 + 370)) {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 88))(v4, v6);
    }
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 96))(v4, v6);
    this = v6[0];
    if (v6[0])
    {
      if (v6[4]) {
        return (*(uint64_t (**)(void))(*(void *)v6[0] + 40))();
      }
    }
  }
  return this;
}

void re::ecs2::SceneComponentCollectionBase::willSet(re::ecs2::SceneComponentCollectionBase *this, uint64_t a2, re::ecs2::Component **a3)
{
}

uint64_t re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(uint64_t a1)
{
  *(void *)a1 = &unk_26E70C200;
  uint64_t v2 = a1 + 8;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  ++*(_DWORD *)(a1 + 32);
  re::DynamicArray<unsigned long>::deinit(a1 + 8);
  re::DynamicArray<unsigned long>::deinit(v2);
  return a1;
}

void re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(uint64_t a1)
{
  *(void *)a1 = &unk_26E70C200;
  uint64_t v1 = a1 + 8;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  ++*(_DWORD *)(a1 + 32);
  re::DynamicArray<unsigned long>::deinit(a1 + 8);
  re::DynamicArray<unsigned long>::deinit(v1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3 = a1[2];
  uint64_t v4 = a1[3] + a2;
  unint64_t v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7) {
    unint64_t v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v7 = (v6 << 7) / 0x97;
  uint64_t v8 = a1[7];
  long long v51 = 0u;
  *(_OWORD *)float32x4_t v52 = 0u;
  if (v5 > v3) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v4;
  }
  memset(&v52[16], 0, 32);
  uint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v51, v8, v9);
  unint64_t v11 = a1[2];
  if (v11 >= 0x10)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 >> 4;
    int8x16_t v14 = (int8x16_t)xmmword_2343680E0;
    while (1)
    {
      unsigned __int16 v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF) {
        break;
      }
      v12 += 16;
      if (!--v13) {
        goto LABEL_12;
      }
    }
    unint64_t v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      uint64_t v28 = a1[1];
      if (!*(void *)&v52[40])
      {
        int8x16_t v50 = v14;
        int8x16_t v14 = v50;
      }
      if (!*(void *)&v52[16]
        || (unint64_t v29 = *(void *)v52, *(void *)v52 > (unint64_t)(8 * *(void *)&v52[16])))
      {
        int8x16_t v49 = v14;
        uint64_t v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Component *,unsigned long,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,void,false>::resize(&v51, 1);
        int8x16_t v14 = v49;
        unint64_t v29 = *(void *)v52;
      }
      uint64_t v30 = (unint64_t *)(v28 + 16 * v17);
      unint64_t v31 = 0xBF58476D1CE4E5B9 * (*v30 ^ (*v30 >> 30));
      unint64_t v32 = (0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) ^ ((0x94D049BB133111EBLL * (v31 ^ (v31 >> 27))) >> 31);
      unint64_t v33 = v29 >> 4;
      unint64_t v34 = v32 % (v29 >> 4);
      unint64_t v35 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v51 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v35 >= 0x40)
      {
        do
        {
          if (v34 + 1 == v33) {
            unint64_t v34 = 0;
          }
          else {
            ++v34;
          }
          unint64_t v35 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v51 + 16 * v34)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v35 > 0x3F);
      }
      uint64_t v36 = (uint64_t *)(v30 + 1);
      uint64_t v37 = v51 + 16 * v34;
      uint64_t v38 = *(unsigned __int8 *)(v37 + v35) == 255;
      *(unsigned char *)(v37 + v35) = v32 & 0x7F;
      unint64_t v39 = *v30;
      uint64_t v40 = *v36;
      uint64_t v41 = *(void *)&v52[8];
      uint64_t v42 = (unint64_t *)(*((void *)&v51 + 1) + 16 * (v35 + 16 * v34));
      *uint64_t v42 = v39;
      v42[1] = v40;
      *(void *)&v52[8] = v41 + 1;
      *(void *)&v52[16] -= v38;
      unint64_t v43 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v39 ^ (v39 >> 30))) >> 27));
      *(void *)&v52[24] ^= (v43 >> 31) ^ v43;
      unint64_t v44 = v17 >> 4;
      unint64_t v11 = a1[2];
      if (v17 >> 4 >= v11 >> 4) {
        break;
      }
      unint64_t v45 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v45 >= 0x40)
      {
        uint64_t v46 = 16 * v44;
        unint64_t v47 = ~v44 + (v11 >> 4);
        while (v47)
        {
          unint64_t v16 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v46 + 16)), v14)))), (int8x8_t)0x3830282018100800);
          unint64_t v48 = __clz(__rbit64(v16));
          v46 += 16;
          --v47;
          if (v48 <= 0x3F)
          {
            unint64_t v17 = v48 + v46;
            goto LABEL_32;
          }
        }
        break;
      }
      unint64_t v17 = v45 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_32:
      ;
    }
  }
LABEL_12:
  uint64_t v19 = *(void *)&v52[40];
  *(void *)&v52[40] = a1[7];
  uint64_t result = *(void *)&v52[40];
  long long v20 = v51;
  long long v21 = *(_OWORD *)v52;
  *(void *)float32x4_t v52 = v11;
  uint64_t v22 = *a1;
  uint64_t v23 = a1[1];
  *(void *)&long long v51 = *a1;
  *((void *)&v51 + 1) = v23;
  long long v24 = *(_OWORD *)&v52[16];
  long long v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v52[32];
  a1[7] = v19;
  *(_OWORD *)&v52[24] = v25;
  long long v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v52[8] = v26;
  if (result)
  {
    if (v23) {
      *((void *)&v51 + 1) = 0;
    }
    if (v22)
    {
      uint64_t v27 = *(uint64_t (**)(void))(*(void *)result + 40);
      return v27();
    }
  }
  return result;
}

uint64_t re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray(uint64_t a1, void *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  re::DynamicArray<float *>::setCapacity((void *)a1, 1uLL);
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::TransitionCondition *>::add((void *)a1, a2);
  return a1;
}

void re::ecs2::AnchoringComponent::adjustedIntroReleaseVersion(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void re::ecs2::introspect_AnchoringAlignment(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92498, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF92498);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 1;
      *((void *)v26 + 2) = "Horizontal";
      qword_26AF92548 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 2;
      *((void *)v28 + 2) = "Vertical";
      qword_26AF92550 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 255;
      *(void *)(v30 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Any";
      qword_26AF92558 = v30;
      __cxa_guard_release(&qword_26AF92498);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF924A0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF92638, "AnchoringAlignment", 1, 1, 1, 1);
    qword_26AF92638 = (uint64_t)&unk_26E715E00;
    qword_26AF92678 = (uint64_t)&re::ecs2::introspect_AnchoringAlignment(BOOL)::enumTable;
    dword_26AF92648 = 9;
    __cxa_guard_release(&qword_26AF924A0);
  }
  if ((_MergedGlobals_356 & 1) == 0)
  {
    _MergedGlobals_356 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF92638, a2);
    uint64_t v32 = 0x21BB132D812DFEECLL;
    unint64_t v33 = "AnchoringAlignment";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF92678;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF92658 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringAlignment", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_AnchoringClassification(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924A8, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF924A8);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 1;
      *((void *)v26 + 2) = "Wall";
      qword_26AF92598 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 2;
      *((void *)v28 + 2) = "Floor";
      qword_26AF925A0 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 4;
      *((void *)v30 + 2) = "Ceiling";
      qword_26AF925A8 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 8;
      *((void *)v32 + 2) = "Table";
      qword_26AF925B0 = (uint64_t)v32;
      unint64_t v33 = re::introspectionAllocator(v32);
      StringID v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)StringID v34 = 1;
      *((void *)v34 + 1) = 16;
      *((void *)v34 + 2) = "Seat";
      qword_26AF925B8 = (uint64_t)v34;
      unint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *(void *)(v36 + 8) = -1;
      *(void *)(v36 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Any";
      qword_26AF925C0 = v36;
      __cxa_guard_release(&qword_26AF924A8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF924B0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF92680, "AnchoringClassification", 8, 8, 1, 1);
    qword_26AF92680 = (uint64_t)&unk_26E715E00;
    qword_26AF926C0 = (uint64_t)&re::ecs2::introspect_AnchoringClassification(BOOL)::enumTable;
    dword_26AF92690 = 9;
    __cxa_guard_release(&qword_26AF924B0);
  }
  if ((byte_26AF92491 & 1) == 0)
  {
    byte_26AF92491 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF92680, a2);
    uint64_t v38 = 0xBAF40396AEFAB466;
    unint64_t v39 = "AnchoringClassification";
    v42[0] = 0x607DD11CB1ALL;
    v42[1] = "uint64_t";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v42);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v42);
      uint64_t v4 = (unsigned int *)qword_26AF926C0;
      v41[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v40.var0 = 2 * v10;
            v40.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v14, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v40.var0 = 2 * v18;
              v40.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v22, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v23);
      xmmword_26AF926A0 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringClassification", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_AnchoringDescriptorType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924B8, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF924B8);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Camera";
      qword_26AF92830 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "World";
      qword_26AF92838 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Anchor";
      qword_26AF92840 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "Plane";
      qword_26AF92848 = (uint64_t)v32;
      unint64_t v33 = re::introspectionAllocator(v32);
      StringID v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)StringID v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "Image";
      qword_26AF92850 = (uint64_t)v34;
      unint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *((void *)v36 + 1) = 5;
      *((void *)v36 + 2) = "Object";
      qword_26AF92858 = (uint64_t)v36;
      uint64_t v37 = re::introspectionAllocator(v36);
      uint64_t v38 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *((void *)v38 + 1) = 6;
      *((void *)v38 + 2) = "Face";
      qword_26AF92860 = (uint64_t)v38;
      unint64_t v39 = re::introspectionAllocator(v38);
      StringID v40 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 24, 8);
      *(_DWORD *)StringID v40 = 1;
      *((void *)v40 + 1) = 7;
      *((void *)v40 + 2) = "Body";
      qword_26AF92868 = (uint64_t)v40;
      uint64_t v41 = re::introspectionAllocator(v40);
      uint64_t v42 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 24, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *((void *)v42 + 1) = 8;
      *((void *)v42 + 2) = "Hand";
      qword_26AF92870 = (uint64_t)v42;
      unint64_t v43 = re::introspectionAllocator(v42);
      unint64_t v44 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 24, 8);
      *(_DWORD *)unint64_t v44 = 1;
      *((void *)v44 + 1) = 9;
      *((void *)v44 + 2) = "Reserved1";
      qword_26AF92878 = (uint64_t)v44;
      unint64_t v45 = re::introspectionAllocator(v44);
      uint64_t v46 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 24, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *((void *)v46 + 1) = 10;
      *((void *)v46 + 2) = "Head";
      qword_26AF92880 = (uint64_t)v46;
      unint64_t v47 = re::introspectionAllocator(v46);
      uint64_t v48 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 24, 8);
      *(_DWORD *)uint64_t v48 = 2;
      *(void *)(v48 + 8) = 8;
      *(void *)(v48 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Reserved0";
      qword_26AF92888 = v48;
      __cxa_guard_release(&qword_26AF924B8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF924C0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF926C8, "AnchoringDescriptorType", 4, 4, 1, 1);
    qword_26AF926C8 = (uint64_t)&unk_26E715E00;
    qword_26AF92708 = (uint64_t)&re::ecs2::introspect_AnchoringDescriptorType(BOOL)::enumTable;
    dword_26AF926D8 = 9;
    __cxa_guard_release(&qword_26AF924C0);
  }
  if ((byte_26AF92492 & 1) == 0)
  {
    byte_26AF92492 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF926C8, a2);
    uint64_t v50 = 0xD3F8AB5ECB755B2CLL;
    long long v51 = "AnchoringDescriptorType";
    v54[0] = 208862;
    v54[1] = "int";
    uint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v54);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v54);
      uint64_t v4 = (unsigned int *)qword_26AF92708;
      v53[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v54, &v50, 1, 1, (uint64_t)v53);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v52.var0 = 2 * v10;
            v52.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v54, v14, &v52);
            re::StringID::destroyString((re::StringID *)&v52);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v52.var0 = 2 * v18;
              v52.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v54, v22, &v52);
              re::StringID::destroyString((re::StringID *)&v52);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v54, v23);
      xmmword_26AF926E8 = (__int128)v52;
      re::StringID::destroyString((re::StringID *)&v50);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v54);
      re::internal::assertLog((re::internal *)5, v49, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringDescriptorType", v50, v51);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::introspect_AnchoringOrientation(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  {
    if (v9)
    {
      uint64_t v10 = re::introspectionAllocator(v9);
      char v11 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 24, 8);
      *(_DWORD *)char v11 = 1;
      *((void *)v11 + 1) = 1;
      *((void *)v11 + 2) = "Right";
      re::ecs2::introspect_AnchoringOrientation(BOOL)::enumAttributes = (uint64_t)v11;
      uint64_t v12 = re::introspectionAllocator(v11);
      int v13 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 24, 8);
      *(_DWORD *)int v13 = 1;
      *((void *)v13 + 1) = 2;
      *((void *)v13 + 2) = "Left";
      qword_26879F9A8 = (uint64_t)v13;
      uint64_t v14 = re::introspectionAllocator(v13);
      unsigned __int16 v15 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 24, 8);
      *(_DWORD *)unsigned __int16 v15 = 2;
      *((void *)v15 + 1) = 1;
      *((void *)v15 + 2) = "Orientation0";
      qword_26879F9B0 = (uint64_t)v15;
      uint64_t v16 = re::introspectionAllocator(v15);
      unint64_t v17 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 24, 8);
      *(_DWORD *)unint64_t v17 = 2;
      *((void *)v17 + 1) = 2;
      *((void *)v17 + 2) = "Orientation1";
      qword_26879F9B8 = (uint64_t)v17;
      uint64_t v18 = re::introspectionAllocator(v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 24, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = 255;
      *(void *)(v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Any";
      qword_26879F9C0 = v19;
    }
  }
  {
    long long v20 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_AnchoringOrientation(BOOL)::info, "AnchoringOrientation", 1, 1, 1, 1);
    *(void *)long long v20 = &unk_26E715E00;
    *((void *)v20 + 8) = &re::ecs2::introspect_AnchoringOrientation(BOOL)::enumTable;
    *((_DWORD *)v20 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 9;
  }
  if (v2)
  {
    if (re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized) {
      return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    char v3 = re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    if (v3) {
      return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
    }
    unint64_t v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized)
    {
LABEL_9:
      unint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
    }
  }
  re::ecs2::introspect_AnchoringOrientation(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_AnchoringOrientation(BOOL)::info, a2);
  v21[0] = 0x9F95A6D022127546;
  v21[1] = (uint64_t)"AnchoringOrientation";
  xmmword_26879F9F0 = v22;
  re::StringID::destroyString((re::StringID *)v21);
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
  return &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
}

void re::ecs2::introspect_AnchoringLocation(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924C8, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF924C8);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Origin";
      qword_26AF929E0 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Palm";
      qword_26AF929E8 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "IndexFingerTip";
      qword_26AF929F0 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "ThumbTip";
      qword_26AF929F8 = (uint64_t)v32;
      unint64_t v33 = re::introspectionAllocator(v32);
      StringID v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)StringID v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "AboveHand";
      qword_26AF92A00 = (uint64_t)v34;
      unint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *((void *)v36 + 1) = 5;
      *((void *)v36 + 2) = "ThumbKnuckle";
      qword_26AF92A08 = (uint64_t)v36;
      uint64_t v37 = re::introspectionAllocator(v36);
      uint64_t v38 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *((void *)v38 + 1) = 6;
      *((void *)v38 + 2) = "ThumbIntermediateBase";
      qword_26AF92A10 = (uint64_t)v38;
      unint64_t v39 = re::introspectionAllocator(v38);
      StringID v40 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v39 + 32))(v39, 24, 8);
      *(_DWORD *)StringID v40 = 1;
      *((void *)v40 + 1) = 7;
      *((void *)v40 + 2) = "ThumbIntermediateTip";
      qword_26AF92A18 = (uint64_t)v40;
      uint64_t v41 = re::introspectionAllocator(v40);
      uint64_t v42 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 24, 8);
      *(_DWORD *)uint64_t v42 = 1;
      *((void *)v42 + 1) = 8;
      *((void *)v42 + 2) = "IndexFingerMetacarpal";
      qword_26AF92A20 = (uint64_t)v42;
      unint64_t v43 = re::introspectionAllocator(v42);
      unint64_t v44 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v43 + 32))(v43, 24, 8);
      *(_DWORD *)unint64_t v44 = 1;
      *((void *)v44 + 1) = 9;
      *((void *)v44 + 2) = "IndexFingerKnuckle";
      qword_26AF92A28 = (uint64_t)v44;
      unint64_t v45 = re::introspectionAllocator(v44);
      uint64_t v46 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v45 + 32))(v45, 24, 8);
      *(_DWORD *)uint64_t v46 = 1;
      *((void *)v46 + 1) = 10;
      *((void *)v46 + 2) = "IndexFingerIntermediateBase";
      qword_26AF92A30 = (uint64_t)v46;
      unint64_t v47 = re::introspectionAllocator(v46);
      uint64_t v48 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v47 + 32))(v47, 24, 8);
      *(_DWORD *)uint64_t v48 = 1;
      *((void *)v48 + 1) = 11;
      *((void *)v48 + 2) = "IndexFingerIntermediateTip";
      qword_26AF92A38 = (uint64_t)v48;
      uint64_t v49 = re::introspectionAllocator(v48);
      uint64_t v50 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 24, 8);
      *(_DWORD *)uint64_t v50 = 1;
      *((void *)v50 + 1) = 12;
      *((void *)v50 + 2) = "MiddleFingerMetacarpal";
      qword_26AF92A40 = (uint64_t)v50;
      long long v51 = re::introspectionAllocator(v50);
      StringID v52 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v51 + 32))(v51, 24, 8);
      *(_DWORD *)StringID v52 = 1;
      *((void *)v52 + 1) = 13;
      *((void *)v52 + 2) = "MiddleFingerKnuckle";
      qword_26AF92A48 = (uint64_t)v52;
      __guard v53 = re::introspectionAllocator(v52);
      uint64_t v54 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v53 + 32))(v53, 24, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *((void *)v54 + 1) = 14;
      *((void *)v54 + 2) = "MiddleFingerIntermediateBase";
      qword_26AF92A50 = (uint64_t)v54;
      uint64_t v55 = re::introspectionAllocator(v54);
      float32x4_t v56 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 24, 8);
      *(_DWORD *)float32x4_t v56 = 1;
      *((void *)v56 + 1) = 15;
      *((void *)v56 + 2) = "MiddleFingerIntermediateTip";
      qword_26AF92A58 = (uint64_t)v56;
      float v57 = re::introspectionAllocator(v56);
      uint64_t v58 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v57 + 32))(v57, 24, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *((void *)v58 + 1) = 16;
      *((void *)v58 + 2) = "MiddleFingerTip";
      qword_26AF92A60 = (uint64_t)v58;
      uint64_t v59 = re::introspectionAllocator(v58);
      long long v60 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 24, 8);
      *(_DWORD *)long long v60 = 1;
      *((void *)v60 + 1) = 17;
      *((void *)v60 + 2) = "RingFingerMetacarpal";
      qword_26AF92A68 = (uint64_t)v60;
      long long v61 = re::introspectionAllocator(v60);
      uint64_t v62 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v61 + 32))(v61, 24, 8);
      *(_DWORD *)uint64_t v62 = 1;
      *((void *)v62 + 1) = 18;
      *((void *)v62 + 2) = "RingFingerKnuckle";
      qword_26AF92A70 = (uint64_t)v62;
      float32x4_t v63 = re::introspectionAllocator(v62);
      int v64 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v63 + 32))(v63, 24, 8);
      *(_DWORD *)int v64 = 1;
      *((void *)v64 + 1) = 19;
      *((void *)v64 + 2) = "RingFingerIntermediateBase";
      qword_26AF92A78 = (uint64_t)v64;
      int v65 = re::introspectionAllocator(v64);
      unint64_t v66 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v65 + 32))(v65, 24, 8);
      *(_DWORD *)unint64_t v66 = 1;
      *((void *)v66 + 1) = 20;
      *((void *)v66 + 2) = "RingFingerIntermediateTip";
      qword_26AF92A80 = (uint64_t)v66;
      __int16 v67 = re::introspectionAllocator(v66);
      int v68 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v67 + 32))(v67, 24, 8);
      *(_DWORD *)int v68 = 1;
      *((void *)v68 + 1) = 21;
      *((void *)v68 + 2) = "RingFingerTip";
      qword_26AF92A88 = (uint64_t)v68;
      __int16 v69 = re::introspectionAllocator(v68);
      unint64_t v70 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v69 + 32))(v69, 24, 8);
      *(_DWORD *)unint64_t v70 = 1;
      *((void *)v70 + 1) = 22;
      *((void *)v70 + 2) = "LittleFingerMetacarpal";
      qword_26AF92A90 = (uint64_t)v70;
      __int16 v71 = re::introspectionAllocator(v70);
      unint64_t v72 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v71 + 32))(v71, 24, 8);
      *(_DWORD *)unint64_t v72 = 1;
      *((void *)v72 + 1) = 23;
      *((void *)v72 + 2) = "LittleFingerKnuckle";
      qword_26AF92A98 = (uint64_t)v72;
      uint64_t v73 = re::introspectionAllocator(v72);
      uint64_t v74 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v73 + 32))(v73, 24, 8);
      *(_DWORD *)uint64_t v74 = 1;
      *((void *)v74 + 1) = 24;
      *((void *)v74 + 2) = "LittleFingerIntermediateBase";
      qword_26AF92AA0 = (uint64_t)v74;
      uint64_t v75 = re::introspectionAllocator(v74);
      float32x4_t v76 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v75 + 32))(v75, 24, 8);
      *(_DWORD *)float32x4_t v76 = 1;
      *((void *)v76 + 1) = 25;
      *((void *)v76 + 2) = "LittleFingerIntermediateTip";
      qword_26AF92AA8 = (uint64_t)v76;
      int v77 = re::introspectionAllocator(v76);
      id v78 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v77 + 32))(v77, 24, 8);
      *(_DWORD *)id v78 = 1;
      *((void *)v78 + 1) = 26;
      *((void *)v78 + 2) = "LittleFingerTip";
      qword_26AF92AB0 = (uint64_t)v78;
      uint64_t v79 = re::introspectionAllocator(v78);
      v80 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v79 + 32))(v79, 24, 8);
      *(_DWORD *)v80 = 1;
      *((void *)v80 + 1) = 27;
      *((void *)v80 + 2) = "ForearmWrist";
      qword_26AF92AB8 = (uint64_t)v80;
      unint64_t v81 = re::introspectionAllocator(v80);
      unint64_t v82 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v81 + 32))(v81, 24, 8);
      *(_DWORD *)unint64_t v82 = 1;
      *((void *)v82 + 1) = 28;
      *((void *)v82 + 2) = "ForearmArm";
      qword_26AF92AC0 = (uint64_t)v82;
      unint64_t v83 = re::introspectionAllocator(v82);
      unint64_t v84 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v83 + 32))(v83, 24, 8);
      *(_DWORD *)unint64_t v84 = 2;
      *((void *)v84 + 1) = 1;
      *((void *)v84 + 2) = "ReservedLocation0";
      qword_26AF92AC8 = (uint64_t)v84;
      unint64_t v85 = re::introspectionAllocator(v84);
      unint64_t v86 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v85 + 32))(v85, 24, 8);
      *(_DWORD *)unint64_t v86 = 2;
      *((void *)v86 + 1) = 2;
      *((void *)v86 + 2) = "ReservedLocation1";
      qword_26AF92AD0 = (uint64_t)v86;
      int v87 = re::introspectionAllocator(v86);
      int v88 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v87 + 32))(v87, 24, 8);
      *(_DWORD *)int v88 = 2;
      *((void *)v88 + 1) = 3;
      *((void *)v88 + 2) = "ReservedLocation2";
      qword_26AF92AD8 = (uint64_t)v88;
      uint64_t v89 = re::introspectionAllocator(v88);
      uint64_t v90 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v89 + 32))(v89, 24, 8);
      *(_DWORD *)uint64_t v90 = 2;
      *(void *)(v90 + 8) = 4;
      *(void *)(v90 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "ReservedLocation3";
      qword_26AF92AE0 = v90;
      __cxa_guard_release(&qword_26AF924C8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF924D0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF92710, "AnchoringLocation", 4, 4, 1, 1);
    qword_26AF92710 = (uint64_t)&unk_26E715E00;
    qword_26AF92750 = (uint64_t)&re::ecs2::introspect_AnchoringLocation(BOOL)::enumTable;
    dword_26AF92720 = 9;
    __cxa_guard_release(&qword_26AF924D0);
  }
  if ((byte_26AF92493 & 1) == 0)
  {
    byte_26AF92493 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF92710, a2);
    uint64_t v92 = 0x119AAE97CF798784;
    BOOL v93 = "AnchoringLocation";
    v96[0] = 208862;
    v96[1] = "int";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v96);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v96);
      uint64_t v4 = (unsigned int *)qword_26AF92750;
      v95[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v96, &v92, 1, 1, (uint64_t)v95);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v94.var0 = 2 * v10;
            v94.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v96, v14, &v94);
            re::StringID::destroyString((re::StringID *)&v94);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v94.var0 = 2 * v18;
              v94.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v96, v22, &v94);
              re::StringID::destroyString((re::StringID *)&v94);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v96, v23);
      xmmword_26AF92730 = (__int128)v94;
      re::StringID::destroyString((re::StringID *)&v92);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v96);
      re::internal::assertLog((re::internal *)5, v91, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringLocation", v92, v93);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_AnchoringResourceStyle(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924E8, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF924E8);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "None";
      qword_26AF92578 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "GroupName";
      qword_26AF92580 = (uint64_t)v28;
      unint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "BundleName";
      qword_26AF92588 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = 3;
      *(void *)(v32 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "URL";
      qword_26AF92590 = v32;
      __cxa_guard_release(&qword_26AF924E8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF924F0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF927A0, "AnchoringResourceStyle", 4, 4, 1, 1);
    qword_26AF927A0 = (uint64_t)&unk_26E715E00;
    qword_26AF927E0 = (uint64_t)&re::ecs2::introspect_AnchoringResourceStyle(BOOL)::enumTable;
    dword_26AF927B0 = 9;
    __cxa_guard_release(&qword_26AF924F0);
  }
  if ((byte_26AF92495 & 1) == 0)
  {
    byte_26AF92495 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF927A0, a2);
    uint64_t v34 = 0x496E67FA88263CACLL;
    unint64_t v35 = "AnchoringResourceStyle";
    v38[0] = 0x607DD0F01DCLL;
    v38[1] = "uint32_t";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      uint64_t v4 = (unsigned int *)qword_26AF927E0;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF927C0 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringResourceStyle", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_AnchoringPhysicsSimulation(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924F8, memory_order_acquire) & 1) == 0)
  {
    long long v24 = (re *)__cxa_guard_acquire(&qword_26AF924F8);
    if (v24)
    {
      long long v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "None";
      qword_26AF92538 = (uint64_t)v26;
      uint64_t v27 = re::introspectionAllocator(v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = 1;
      *(void *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Isolated";
      qword_26AF92540 = v28;
      __cxa_guard_release(&qword_26AF924F8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92500, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF92500))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF927E8, "AnchoringPhysicsSimulation", 4, 4, 1, 1);
    qword_26AF927E8 = (uint64_t)&unk_26E715E00;
    qword_26AF92828 = (uint64_t)&re::ecs2::introspect_AnchoringPhysicsSimulation(BOOL)::enumTable;
    dword_26AF927F8 = 9;
    __cxa_guard_release(&qword_26AF92500);
  }
  if ((byte_26AF92496 & 1) == 0)
  {
    byte_26AF92496 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF927E8, a2);
    uint64_t v30 = 0x1F203909CD802C82;
    uint64_t v31 = "AnchoringPhysicsSimulation";
    v34[0] = 208862;
    v34[1] = "int";
    int v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v34);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v34);
      uint64_t v4 = (unsigned int *)qword_26AF92828;
      v33[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v34, &v30, 1, 1, (uint64_t)v33);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  uint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v32.var0 = 2 * v10;
            v32.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v34, v14, &v32);
            re::StringID::destroyString((re::StringID *)&v32);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    long long v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v32.var0 = 2 * v18;
              v32.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v34, v22, &v32);
              re::StringID::destroyString((re::StringID *)&v32);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v34, v23);
      xmmword_26AF92808 = (__int128)v32;
      re::StringID::destroyString((re::StringID *)&v30);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v34);
      re::internal::assertLog((re::internal *)5, v29, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringPhysicsSimulation", v30, v31);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_AnchoringDescriptor(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF92508))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF928F0, "AnchoringDescriptor");
    __cxa_guard_release(&qword_26AF92508);
  }
  return &unk_26AF928F0;
}

void re::ecs2::initInfo_AnchoringDescriptor(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v45[0] = 0x15A7D86CC6325078;
  v45[1] = "AnchoringDescriptor";
  re::StringID::destroyString((re::StringID *)v45);
  *((_OWORD *)this + 2) = v46;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92510, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF92510);
    if (v4)
    {
      unint64_t v5 = (re::ecs2 *)re::introspectionAllocator(v4);
      re::ecs2::introspect_AnchoringDescriptorType(v5, v6);
      uint64_t v7 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "type";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF926C8;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92890 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "transform";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
      *(void *)(v10 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v10 + 32) = 0x1000000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92898 = v10;
      char v11 = re::introspectionAllocator((re *)v10);
      int v13 = re::IntrospectionInfo<unsigned char [16]>::get(1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "anchorIdentifier";
      *(void *)(v14 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v13;
      *(void *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v14 + 32) = 0x5000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928A0 = v14;
      unsigned __int16 v15 = (re::ecs2 *)re::introspectionAllocator((re *)v14);
      re::ecs2::introspect_AnchoringAlignment(v15, v16);
      uint64_t v17 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 72, 8);
      *(_DWORD *)uint64_t v17 = 1;
      *(void *)(v17 + 8) = "alignment";
      *(void *)(v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF92638;
      *(void *)(v17 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v17 + 32) = 0x6000000004;
      *(_DWORD *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928A8 = v17;
      uint64_t v18 = (re::ecs2 *)re::introspectionAllocator((re *)v17);
      re::ecs2::introspect_AnchoringClassification(v18, v19);
      uint64_t v20 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v18 + 32))(v18, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "classification";
      *(void *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF92680;
      *(void *)(v20 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v20 + 32) = 0x6800000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928B0 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v22 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "bounds";
      *(void *)(v23 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v22;
      *(void *)(v23 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v23 + 32) = 0x7000000006;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928B8 = v23;
      long long v24 = re::introspectionAllocator((re *)v23);
      re::ecs2::introspect_AnchoringOrientation((re::ecs2 *)1, v25);
      uint64_t v26 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v26 = 1;
      *(void *)(v26 + 8) = "orientation";
      *(void *)(v26 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &re::ecs2::introspect_AnchoringOrientation(BOOL)::info;
      *(void *)(v26 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v26 + 32) = 0x7800000007;
      *(_DWORD *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(void *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928C0 = v26;
      uint64_t v27 = (re::ecs2 *)re::introspectionAllocator((re *)v26);
      re::ecs2::introspect_AnchoringLocation(v27, v28);
      uint64_t v29 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 72, 8);
      *(_DWORD *)uint64_t v29 = 1;
      *(void *)(v29 + 8) = "location";
      *(void *)(v29 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF92710;
      *(void *)(v29 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v29 + 32) = 0x7C00000008;
      *(_DWORD *)(v29 + 40) = 0;
      *(void *)(v29 + 48) = 0;
      *(void *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928C8 = v29;
      uint64_t v30 = re::introspectionAllocator((re *)v29);
      StringID v32 = re::IntrospectionInfo<re::DynamicString>::get(1, v31);
      uint64_t v33 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v30 + 32))(v30, 72, 8);
      *(_DWORD *)uint64_t v33 = 1;
      *(void *)(v33 + 8) = "resourceGroup";
      *(void *)(v33 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v32;
      *(void *)(v33 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v33 + 32) = 0x8000000009;
      *(_DWORD *)(v33 + 40) = 0;
      *(void *)(v33 + 48) = 0;
      *(void *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928D0 = v33;
      uint64_t v34 = re::introspectionAllocator((re *)v33);
      StringID v36 = re::IntrospectionInfo<re::DynamicString>::get(1, v35);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v34 + 32))(v34, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "resourceName";
      *(void *)(v37 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v36;
      *(void *)(v37 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v37 + 32) = 0xA00000000ALL;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928D8 = v37;
      uint64_t v38 = (re::ecs2 *)re::introspectionAllocator((re *)v37);
      re::ecs2::introspect_AnchoringResourceStyle(v38, v39);
      uint64_t v40 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "resourceType";
      *(void *)(v40 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF927A0;
      *(void *)(v40 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v40 + 32) = 0xD00000000DLL;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928E0 = v40;
      uint64_t v41 = (re::ecs2 *)re::introspectionAllocator((re *)v40);
      re::ecs2::introspect_AnchoringPhysicsSimulation(v41, v42);
      uint64_t v43 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "physicsSimulation";
      *(void *)(v43 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF927E8;
      *(void *)(v43 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v43 + 32) = 0xD40000000ELL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF928E8 = v43;
      __cxa_guard_release(&qword_26AF92510);
    }
  }
  *((void *)this + 2) = 0xE000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 12;
  *((void *)this + 8) = &qword_26AF92890;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchoringDescriptor>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchoringDescriptor>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchoringDescriptor>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::AnchoringDescriptor>;
  re::IntrospectionRegistry::add(this, v3);
  long long v44 = v46;
}

double re::internal::defaultConstruct<re::ecs2::AnchoringDescriptor>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = xmmword_23435FD50;
  *(_OWORD *)(a3 + 32) = xmmword_23435FD60;
  *(_OWORD *)(a3 + 48) = xmmword_23435FD80;
  *(_OWORD *)(a3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_23435FBB0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 96) = -1;
  *(_OWORD *)(a3 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_234378E20;
  *(unsigned char *)(a3 + 120) = -1;
  *(_OWORD *)(a3 + 12re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a3 + 140) = 0u;
  *(_DWORD *)(a3 + 156) = 0;
  uint64_t v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v3 + 128), 0);
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  v3 += 160;
  re::DynamicString::setCapacity((void *)v3, 0);
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)&double result = 0x100000001;
  *(void *)(v3 + 48) = 0x100000001;
  return result;
}

double re::internal::defaultDestruct<re::ecs2::AnchoringDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 160));
  return re::DynamicString::deinit((re::DynamicString *)(a3 + 128));
}

double re::internal::defaultConstructV2<re::ecs2::AnchoringDescriptor>(uint64_t a1)
{
  uint64_t v1 = a1;
  *(_DWORD *)a1 = 1;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = xmmword_23435FD50;
  *(_OWORD *)(a1 + 32) = xmmword_23435FD60;
  *(_OWORD *)(a1 + 48) = xmmword_23435FD80;
  *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_23435FBB0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = -1;
  *(_OWORD *)(a1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_234378E20;
  *(unsigned char *)(a1 + 120) = -1;
  *(_OWORD *)(a1 + 12re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_DWORD *)(a1 + 156) = 0;
  int v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v1 + 128), 0);
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  v1 += 160;
  re::DynamicString::setCapacity((void *)v1, 0);
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)&double result = 0x100000001;
  *(void *)(v1 + 48) = 0x100000001;
  return result;
}

double re::internal::defaultDestructV2<re::ecs2::AnchoringDescriptor>(uint64_t a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 160));
  return re::DynamicString::deinit((re::DynamicString *)(a1 + 128));
}

void *re::ecs2::allocInfo_AnchoringComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF92528))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92968, "AnchoringComponent");
    __cxa_guard_release(&qword_26AF92528);
  }
  return &unk_26AF92968;
}

void re::ecs2::initInfo_AnchoringComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v71 = 0x21BB1670078CF520;
  v72[0] = "AnchoringComponent";
  re::StringID::destroyString((re::StringID *)&v71);
  *((_OWORD *)this + 2) = v66;
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92520, memory_order_acquire)) {
    goto LABEL_2;
  }
  uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF92520);
  if (!v4) {
    goto LABEL_2;
  }
  unint64_t v5 = re::introspectionAllocator(v4);
  uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
  *(_DWORD *)uint64_t v7 = 1;
  *(void *)(v7 + 8) = "Component";
  *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
  *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 3;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  qword_26AF925C8 = v7;
  uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
  uint64_t v9 = v8;
  uint64_t v10 = (re::ecs2 *)qword_26AF92518;
  if (!qword_26AF92518)
  {
    uint64_t v10 = (re::ecs2 *)re::ecs2::allocInfo_AnchoringDescriptor(v8);
    qword_26AF92518 = (uint64_t)v10;
    re::ecs2::initInfo_AnchoringDescriptor(v10, v11);
  }
  uint64_t v12 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
  *(_DWORD *)uint64_t v12 = 1;
  *(void *)(v12 + 8) = "descriptor";
  *(void *)(v12 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
  *(void *)(v12 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v12 + 32) = 0x2000000001;
  *(_DWORD *)(v12 + 40) = 0;
  *(void *)(v12 + 48) = 0;
  *(void *)(v12 + 56) = 0;
  *(_DWORD *)(v12 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  qword_26AF925D0 = v12;
  int v13 = re::introspectionAllocator((re *)v12);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92530, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF92530))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_26AF925F8);
    qword_26AF925F8 = (uint64_t)&unk_26E70C2E0;
    __cxa_guard_release(&qword_26AF92530);
  }
  if ((byte_26AF92497 & 1) == 0)
  {
    uint64_t v14 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
    if ((byte_26AF92497 & 1) == 0)
    {
      uint64_t v15 = v14;
      byte_26AF92497 = 1;
      int v16 = *(_DWORD *)(v14 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF925F8, 0);
      qword_26AF92608 = 0x500000000DLL;
      dword_26AF92610 = v16;
      word_26AF92614 = 0;
      *(void *)&xmmword_26AF92618 = 0;
      *((void *)&xmmword_26AF92618 + 1) = 0xFFFFFFFFLL;
      qword_26AF92628 = v15;
      unk_26AF92630 = 0;
      qword_26AF925F8 = (uint64_t)&unk_26E70C2E0;
      re::IntrospectionRegistry::add(v17, v18);
      re::getPrettyTypeName((re *)&qword_26AF925F8, (const re::IntrospectionBase *)&v71);
      if (v72[0]) {
        char v19 = (const char *)v72[1];
      }
      else {
        char v19 = (char *)v72 + 1;
      }
      if (v71 && (v72[0] & 1) != 0) {
        (*(void (**)(void))(*(void *)v71 + 40))();
      }
      long long v68 = *(_OWORD *)(v15 + 32);
      uint64_t v20 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v69);
      if (v20)
      {
        uint64_t v21 = *v20;
        *((void *)&v67 + 1) = v21;
      }
      else
      {
        long long v70 = v68;
        re::TypeBuilder::beginOptionalType((uint64_t)&v71, (uint64_t *)&v69, 0x50uLL, 0x10uLL, &v70);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v71, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v71, v22);
      }
      xmmword_26AF92618 = v67;
      re::StringID::destroyString((re::StringID *)&v69);
    }
  }
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)(v23 + 8) = "previousWorldTransform";
  *(void *)(v23 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF925F8;
  *(void *)(v23 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v23 + 32) = 0x11000000002;
  *(_DWORD *)(v23 + 40) = 0;
  *(void *)(v23 + 48) = 0;
  *(void *)(v23 + 56) = 0;
  *(_DWORD *)(v23 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  qword_26AF925D8 = v23;
  long long v24 = re::introspectionAllocator((re *)v23);
  uint64_t v26 = re::introspect_BOOL((re *)1, v25);
  uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
  *(_DWORD *)uint64_t v27 = 1;
  *(void *)(v27 + 8) = "isRequired";
  *(void *)(v27 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v26;
  *(void *)(v27 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v27 + 32) = 0x16000000003;
  *(_DWORD *)(v27 + 40) = 0;
  *(void *)(v27 + 48) = 0;
  *(void *)(v27 + 56) = 0;
  *(_DWORD *)(v27 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  qword_26AF925E0 = v27;
  uint64_t v28 = re::introspectionAllocator((re *)v27);
  uint64_t v30 = re::introspect_float((re *)1, v29);
  uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
  *(_DWORD *)uint64_t v31 = 1;
  *(void *)(v31 + 8) = "scaleFactor";
  *(void *)(v31 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v30;
  *(void *)(v31 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v31 + 32) = 0x16400000004;
  *(_DWORD *)(v31 + 40) = 0;
  *(void *)(v31 + 48) = 0;
  *(void *)(v31 + 56) = 0;
  *(_DWORD *)(v31 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  qword_26AF925E8 = v31;
  uint64_t v33 = re::introspectionAllocator((re *)v31);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924D8, memory_order_acquire) & 1) == 0)
  {
    float v57 = (re *)__cxa_guard_acquire(&qword_26AF924D8);
    if (v57)
    {
      uint64_t v58 = re::introspectionAllocator(v57);
      uint64_t v59 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v58 + 32))(v58, 24, 8);
      *(_DWORD *)uint64_t v59 = 1;
      *((void *)v59 + 1) = 0;
      *((void *)v59 + 2) = "Once";
      qword_26AF92560 = (uint64_t)v59;
      long long v60 = re::introspectionAllocator(v59);
      long long v61 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 24, 8);
      *(_DWORD *)long long v61 = 1;
      *((void *)v61 + 1) = 1;
      *((void *)v61 + 2) = "Continuous";
      qword_26AF92568 = (uint64_t)v61;
      uint64_t v62 = re::introspectionAllocator(v61);
      uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 24, 8);
      *(_DWORD *)uint64_t v63 = 1;
      *(void *)(v63 + 8) = 2;
      *(void *)(v63 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = "Predicted";
      qword_26AF92570 = v63;
      __cxa_guard_release(&qword_26AF924D8);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF924E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF924E0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF92758, "AnchoringMode", 4, 4, 1, 1);
    qword_26AF92758 = (uint64_t)&unk_26E715E00;
    qword_26AF92798 = (uint64_t)&re::ecs2::introspect_AnchoringMode(BOOL)::enumTable;
    dword_26AF92768 = 9;
    __cxa_guard_release(&qword_26AF924E0);
  }
  if (byte_26AF92494)
  {
LABEL_48:
    uint64_t v56 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
    *(_DWORD *)uint64_t v56 = 1;
    *(void *)(v56 + 8) = "mode";
    *(void *)(v56 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &qword_26AF92758;
    *(void *)(v56 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *(void *)(v56 + 32) = 0x10000000005;
    *(_DWORD *)(v56 + 40) = 0;
    *(void *)(v56 + 48) = 0;
    *(void *)(v56 + 56) = 0;
    *(_DWORD *)(v56 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    qword_26AF925F0 = v56;
    __cxa_guard_release(&qword_26AF92520);
LABEL_2:
    *((void *)this + 2) = 0x22000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 6;
    *((void *)this + 8) = &qword_26AF925C8;
    *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchoringComponent>;
    *((void *)this + 11) = 0;
    *((void *)this + 12) = 0;
    *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchoringComponent>;
    *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchoringComponent>;
    *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::AnchoringComponent>;
    re::IntrospectionRegistry::add(this, v3);
    long long v65 = v66;
    return;
  }
  byte_26AF92494 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF92758, v32);
  *(void *)&long long v68 = 0xDCF039AB5F8CD860;
  *((void *)&v68 + 1) = "AnchoringMode";
  uint64_t v71 = 208862;
  v72[0] = "int";
  uint64_t v34 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v71);
  if (v34)
  {
    uint64_t v35 = *v34;
    re::StringID::destroyString((re::StringID *)&v71);
    StringID v36 = (unsigned int *)qword_26AF92798;
    *((void *)&v70 + 1) = v35;
    re::TypeBuilder::beginEnumType((uint64_t)&v71, (uint64_t *)&v68, 1, 1, (uint64_t)&v70);
    unint64_t v38 = *v36;
    if (v38)
    {
      for (unint64_t i = 0; i < v38; ++i)
      {
        uint64_t v40 = *(void *)(*((void *)v36 + 1) + 8 * i);
        if (*(_DWORD *)v40 == 1)
        {
          uint64_t v41 = *(char **)(v40 + 16);
          if (v41)
          {
            uint64_t v42 = *v41;
            if (*v41)
            {
              char v43 = v41[1];
              if (v43)
              {
                long long v44 = (unsigned __int8 *)(v41 + 2);
                do
                {
                  uint64_t v42 = 31 * v42 + v43;
                  int v45 = *v44++;
                  char v43 = v45;
                }
                while (v45);
              }
            }
          }
          else
          {
            uint64_t v42 = 0;
          }
          uint64_t v46 = *(void *)(v40 + 8);
          *(void *)&v69.var0 = 2 * v42;
          v69.var1 = v41;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v71, v46, &v69);
          re::StringID::destroyString((re::StringID *)&v69);
          unint64_t v38 = *v36;
        }
      }
      if (v38)
      {
        for (unint64_t j = 0; j < v38; ++j)
        {
          uint64_t v48 = *(void *)(*((void *)v36 + 1) + 8 * j);
          if (*(_DWORD *)v48 == 2)
          {
            uint64_t v49 = *(char **)(v48 + 16);
            if (v49)
            {
              uint64_t v50 = *v49;
              if (*v49)
              {
                char v51 = v49[1];
                if (v51)
                {
                  StringID v52 = (unsigned __int8 *)(v49 + 2);
                  do
                  {
                    uint64_t v50 = 31 * v50 + v51;
                    int v53 = *v52++;
                    char v51 = v53;
                  }
                  while (v53);
                }
              }
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v54 = *(void *)(v48 + 8);
            *(void *)&v69.var0 = 2 * v50;
            v69.var1 = v49;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v71, v54, &v69);
            re::StringID::destroyString((re::StringID *)&v69);
            unint64_t v38 = *v36;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v71, v55);
    xmmword_26AF92778 = (__int128)v69;
    re::StringID::destroyString((re::StringID *)&v68);
    goto LABEL_48;
  }
  re::StringID::destroyString((re::StringID *)&v71);
  re::internal::assertLog((re::internal *)5, v64, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AnchoringMode");
  _os_crash();
  __break(1u);
}

void *re::internal::defaultConstruct<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AnchoringComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::AnchoringComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::DynamicString::deinit((re::DynamicString *)(a3 + 24));
  re::DynamicString::deinit((re::DynamicString *)(a3 + 20));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnchoringComponent>(void *a1)
{
  re::DynamicString::deinit((re::DynamicString *)(a1 + 24));
  re::DynamicString::deinit((re::DynamicString *)(a1 + 20));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchoringComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchoringComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchoringComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchoringComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchoringComponent>, this);
}

void re::ecs2::AnchoringComponent::~AnchoringComponent(re::ecs2::AnchoringComponent *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::DynamicString::deinit((re::ecs2::AnchoringComponent *)((char *)this + 192));
  re::DynamicString::deinit((re::ecs2::AnchoringComponent *)((char *)this + 160));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void *re::IntrospectionOptional<re::Matrix4x4<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Matrix4x4<float>>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<re::Matrix4x4<float>>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Matrix4x4<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Matrix4x4<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
    *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Matrix4x4<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  double result = a1 + 16;
  if (!v2) {
    return 0;
  }
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, long long *a2)
{
  if (a2)
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    long long v9 = a2[2];
    long long v10 = a2[3];
    int v2 = (_OWORD *)(a1 + 16);
    if (*(unsigned char *)a1)
    {
      long long v3 = *a2;
      long long v4 = a2[1];
      long long v5 = a2[3];
      *(_OWORD *)(a1 + 48) = a2[2];
      *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v5;
      *int v2 = v3;
      *(_OWORD *)(a1 + 32) = v4;
    }
    else
    {
      *(unsigned char *)a1 = 1;
      *int v2 = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(void *)&long long v3 = v9;
      *(_OWORD *)(a1 + 48) = v9;
      *(_OWORD *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    }
  }
  else if (*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
  }
  return *(double *)&v3;
}

void *re::make::shared::unsafelyInplace<re::ecs2::AnchoringComponent>(void *a1)
{
  bzero(a1, 0x220uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((unsigned char *)a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *a1 = &unk_26E70C258;
  *((_DWORD *)a1 + 8) = 1;
  *((_OWORD *)a1 + 3) = xmmword_23435FD50;
  *((_OWORD *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_23435FD60;
  *((_OWORD *)a1 + 5) = xmmword_23435FD80;
  *((_OWORD *)a1 + 6) = xmmword_23435FBB0;
  a1[14] = 0;
  a1[15] = 0;
  *((unsigned char *)a1 + 128) = -1;
  *(_OWORD *)(a1 + 17) = xmmword_234378E20;
  *((unsigned char *)a1 + 152) = -1;
  *(_OWORD *)((char *)a1 + 156) = 0u;
  *(_OWORD *)((char *)a1 + 172) = 0u;
  *((_DWORD *)a1 + 47) = 0;
  long long v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 20, 0);
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  re::DynamicString::setCapacity(a1 + 24, 0);
  a1[28] = 0;
  a1[29] = 0;
  a1[30] = 0x100000001;
  *((_DWORD *)a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((unsigned char *)a1 + 272) = 0;
  *((unsigned char *)a1 + 352) = 1;
  *((_DWORD *)a1 + 89) = 1065353216;
  *((unsigned char *)a1 + 368) = 0;
  *((unsigned char *)a1 + 448) = 0;
  *((unsigned char *)a1 + 528) = 0;
  return a1;
}

void re::ecs2::ComponentTypeRegistry::init(os_unfair_lock_s *this)
{
  int v2 = this + 29;
  os_unfair_lock_lock(this + 29);
  if (!LOBYTE(this->_os_unfair_lock_opaque))
  {
    long long v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    {
      long long v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      if (v10)
      {
        re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
        long long v3 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      }
    }
    long long v4 = v3[297];
    long long v5 = (void *)*((void *)v4 + 8);
    uint64_t v6 = (_DWORD *)*v5;
    if (*(_DWORD *)*v5 != 2)
    {
      long long v7 = (_DWORD **)(v5 + 1);
      uint64_t v8 = *((unsigned int *)v4 + 14) - 1;
      do
      {
        long long v9 = *v7++;
        uint64_t v6 = v9;
        --v8;
      }
      while (*v9 != 2);
    }
    *(void *)&this[26]._os_unfair_lock_opaque = v6;
    *((void *)v6 + 1) = this + 22;
    LOBYTE(this->_os_unfair_lock_opaque) = 1;
  }
  os_unfair_lock_unlock(v2);
}

void re::ecs2::ComponentTypeRegistry::deinit(re::ecs2::ComponentTypeRegistry *this)
{
  int v2 = (os_unfair_lock_s *)((char *)this + 116);
  os_unfair_lock_lock((os_unfair_lock_t)this + 29);
  if (*(unsigned char *)this)
  {
    re::CustomPolymorphicTable::clear((uint64_t)this + 48);
    long long v3 = (re *)re::DynamicArray<re::IntrospectionPolymorphicType>::deinit((uint64_t)this + 48);
    long long v4 = re::introspectionSharedMutex(v3);
    std::__shared_mutex_base::lock(v4);
    *(void *)&long long v12 = 0x6DAE480279BALL;
    *((void *)&v12 + 1) = "Component";
    re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)&v16);
    re::StringID::destroyString((re::StringID *)&v12);
    unint64_t v5 = (*(_DWORD *)(v21 + 80) - 1);
    char v19 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(&v15, v5);
    ++v18;
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        re::TypeInfo::derivedClass((re::TypeInfo *)v20, i, (uint64_t)&v12);
        unint64_t v8 = *v13;
        v14.n128_u64[0] = v12;
        v14.n128_u64[1] = v8;
        re::DynamicArray<re::TypeID>::add((_anonymous_namespace_ *)&v15, &v14);
      }
    }
    if (v17)
    {
      long long v9 = v19;
      uint64_t v10 = 16 * v17;
      do
      {
        long long v11 = *v9++;
        long long v12 = v11;
        v10 -= 16;
      }
      while (v10);
    }
    if (v15 && v19) {
      (*(void (**)(void))(*v15 + 40))();
    }
    std::__shared_mutex_base::unlock(v4);
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
    atomic_store(1u, (unsigned __int16 *)this + 56);
    *(unsigned char *)this = 0;
  }
  os_unfair_lock_unlock(v2);
}

uint64_t re::DynamicArray<re::IntrospectionPolymorphicType>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 40 * v4;
        uint64_t v6 = v3 + 8;
        do
        {
          re::SerializedReference<re::IntrospectionBase const*>::reset(v6);
          v6 += 40;
          v5 -= 40;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

__n128 re::DynamicArray<re::TypeID>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::TypeID>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  __n128 result = *a2;
  *(__n128 *)(*((void *)this + 4) + 16 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *a2;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

char *re::ecs2::ComponentTypeRegistry::instance(re::ecs2::ComponentTypeRegistry *this)
{
  {
    re::ecs2::ComponentTypeRegistry::instance(void)::s_instance = 0;
    qword_26879FA38 = 0;
    unk_26879FA40 = 0;
    qword_26879FA30 = 0;
    dword_26879FA48 = 0;
    qword_26879FA78 = 0;
    dword_26879FA80 = 0;
    qword_26879FA88 = 0;
    unk_26879FA90 = 0;
    unk_26879FA50 = 0u;
    unk_26879FA60 = 0u;
    dword_26879FA70 = 0;
    word_26879FA98 = 1;
    dword_26879FA9C = 0;
    re::ecs2::ComponentTypeRegistry::init((os_unfair_lock_s *)&re::ecs2::ComponentTypeRegistry::instance(void)::s_instance);
  }
  return &re::ecs2::ComponentTypeRegistry::instance(void)::s_instance;
}

uint64_t re::ecs2::ComponentTypeRegistry::add(re::ecs2::ComponentTypeRegistry *this, re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v23 = a2;
  unint64_t v4 = (os_unfair_lock_s *)((char *)this + 116);
  os_unfair_lock_lock((os_unfair_lock_t)this + 29);
  uint64_t v5 = *((void *)this + 3);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = (uint64_t *)*((void *)this + 5);
  uint64_t v7 = 8 * v5;
  while (1)
  {
    uint64_t v8 = *v6;
    BOOL v9 = re::StringID::operator==((void *)(*v6 + 24), (void *)a2 + 3);
    if (v9) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      goto LABEL_9;
    }
  }
  if (v8)
  {
    uint64_t v10 = *re::ecsCoreLogObjects((re *)v9);
    uint64_t v11 = 0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *((void *)a2 + 4);
      buf[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315138;
      *(void *)(&buf[0].var0 + 1) = v12;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Cannot register component type '%s'. A different component type with the same name is already registered.", (uint8_t *)buf, 0xCu);
      uint64_t v11 = 0;
    }
  }
  else
  {
LABEL_9:
    unsigned __int16 add = atomic_fetch_add((atomic_ushort *volatile)this + 56, 1u);
    *((_WORD *)v23 + 8) = add;
    re::DynamicArray<re::TransitionCondition *>::add((void *)this + 1, &v23);
    __n128 v14 = (const char *)*((void *)v23 + 4);
    uint64_t v15 = *((void *)v23 + 3) >> 1;
    uint64_t v16 = (const re::IntrospectionBase *)(*(uint64_t (**)(re::ecs2::ComponentTypeBase *))(*(void *)v23 + 48))(v23);
    uint64_t v17 = (re *)re::CustomPolymorphicTable::addType((re::ecs2::ComponentTypeRegistry *)((char *)this + 48), v14, v16, v15, 0);
    int v18 = re::introspectionSharedMutex(v17);
    std::__shared_mutex_base::lock(v18);
    (*(void (**)(re **__return_ptr))(*(void *)v23 + 56))(v22);
    char v19 = re::TypeInfo::polymorphicObjectName((re::TypeInfo *)&buf[0].var1);
    uint64_t v20 = (const StringID *)((char *)v23 + 24);
    if (!re::StringID::operator==(v19, (void *)v23 + 3))
    {
      re::StringID::destroyString((re::StringID *)buf);
    }
    std::__shared_mutex_base::unlock(v18);
    uint64_t v11 = 1;
  }
  os_unfair_lock_unlock(v4);
  return v11;
}

uint64_t re::ecs2::ComponentTypeRegistry::remove(os_unfair_lock_s *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  unint64_t v6 = *(void *)&this[6]._os_unfair_lock_opaque;
  if (!v6) {
    goto LABEL_18;
  }
  uint64_t v7 = *(const re::ecs2::ComponentTypeBase ***)&this[10]._os_unfair_lock_opaque;
  long long v24 = (char *)&v7[v6];
  uint64_t v8 = 8 * v6;
  uint64_t v9 = 8 * v6;
  uint64_t v10 = v7;
  while (1)
  {
    uint64_t v11 = *v10;
    BOOL v5 = re::StringID::operator==((void *)*v10 + 3, (void *)a2 + 3);
    if (v5) {
      break;
    }
    ++v10;
    v9 -= 8;
    if (!v9) {
      goto LABEL_18;
    }
  }
  if (v11)
  {
    __n128 v14 = v7;
    while (*v14 != a2)
    {
      ++v14;
      v8 -= 8;
      if (!v8)
      {
        __n128 v14 = &v7[v6];
        break;
      }
    }
    unint64_t v15 = v14 - v7;
    if (v15 != v6)
    {
      if (v6 <= v15)
      {
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v16 = v6 - 1;
      if (v6 - 1 > v15)
      {
        uint64_t v17 = &v7[v15];
        uint64_t v12 = v17 + 1;
        size_t v13 = v24 - (char *)(v17 + 1);
        if (v24 != (char *)(v17 + 1))
        {
          memmove(v17, v12, v13);
          uint64_t v16 = *(void *)&this[6]._os_unfair_lock_opaque - 1;
        }
      }
      *(void *)&this[6]._os_unfair_lock_opaque = v16;
      ++this[8]._os_unfair_lock_opaque;
    }
    int v18 = (const re::IntrospectionBase *)(*(uint64_t (**)(const re::ecs2::ComponentTypeBase *, const void *, size_t))(*(void *)a2 + 48))(a2, v12, v13);
    char v19 = re::CustomPolymorphicTable::removeType((re *)&this[12], v18);
    uint64_t v20 = re::introspectionSharedMutex(v19);
    std::__shared_mutex_base::lock(v20);
    (*(void (**)(uint8_t *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(void *)a2 + 56))(buf, a2);
    std::__shared_mutex_base::unlock(v20);
  }
  else
  {
LABEL_18:
    uint64_t v21 = *re::ecsCoreLogObjects((re *)v5);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *((void *)a2 + 4);
      *(_DWORD *)float32x4_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl(&dword_233120000, v21, OS_LOG_TYPE_DEFAULT, "Cannot unregister component type '%s'. The component type is not registered.", buf, 0xCu);
    }
  }
  os_unfair_lock_unlock(v4);
  return 1;
}

uint64_t re::ecs2::ComponentTypeRegistry::componentTypeWithHash(os_unfair_lock_s *this, uint64_t a2)
{
  unint64_t v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  uint64_t v5 = *(void *)&this[6]._os_unfair_lock_opaque;
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)&this[10]._os_unfair_lock_opaque;
    uint64_t v7 = 8 * v5;
    while (1)
    {
      uint64_t v8 = *v6;
      if (a2 == *(void *)(*v6 + 24) >> 1) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v8;
}

uint64_t re::ecs2::ComponentTypeRegistry::componentTypeWithName(os_unfair_lock_s *this, const re::StringID *a2)
{
  unint64_t v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  uint64_t v5 = *(void *)&this[6]._os_unfair_lock_opaque;
  if (v5)
  {
    unint64_t v6 = *(uint64_t **)&this[10]._os_unfair_lock_opaque;
    uint64_t v7 = 8 * v5;
    while (1)
    {
      uint64_t v8 = *v6;
      if (re::StringID::operator==((void *)(*v6 + 24), a2)) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v8;
}

uint64_t re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo(os_unfair_lock_s *this, const re::IntrospectionBase *a2)
{
  unint64_t v4 = this + 29;
  os_unfair_lock_lock(this + 29);
  uint64_t v5 = *(void *)&this[6]._os_unfair_lock_opaque;
  if (v5)
  {
    unint64_t v6 = *(void **)&this[10]._os_unfair_lock_opaque;
    uint64_t v7 = 8 * v5;
    while (1)
    {
      uint64_t v8 = *v6;
      if ((const re::IntrospectionBase *)(*(uint64_t (**)(void))(*(void *)*v6 + 48))(*v6) == a2) {
        break;
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v8 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v8;
}

void *re::DynamicArray<re::TypeID>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::ecs2::EntityHandle::reset(re::ecs2::EntityHandle *this)
{
  objc_destroyWeak((id *)this);
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  unint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = *v2;
    double v4 = re::DynamicString::deinit(*((re::DynamicString **)this + 2));
    (*(void (**)(uint64_t, uint64_t *, double))(*(void *)v3 + 40))(v3, v2, v4);
    *((void *)this + 2) = 0;
  }
}

uint64_t re::ecs2::EntityHandle::EntityHandle(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)a1);
  objc_storeWeak((id *)a1, (id)(a2 + 8));
  *(void *)(a1 + 8) = *(void *)(a2 + 296);
  return a1;
}

{
  uint64_t v4;
  id to;

  objc_initWeak((id *)a1, 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  double v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v4;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  to = 0;
  objc_moveWeak(&to, (id *)a1);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a1, (id *)a2);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2, &to);
  objc_destroyWeak(&to);
  return a1;
}

id *re::ecs2::EntityHandle::EntityHandle(id *this, const re::ecs2::EntityHandle *a2)
{
  objc_initWeak(this, 0);
  this[1] = 0;
  this[2] = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    if (*(unsigned char *)(v4 + 8)) {
      uint64_t v5 = *(const char **)(v4 + 16);
    }
    else {
      uint64_t v5 = (const char *)(v4 + 9);
    }
    re::ecs2::EntityHandle::setString((re::ecs2::EntityHandle *)this, v5, *(re::Allocator **)v4);
  }
  else if (*(void *)a2)
  {
    id WeakRetained = (char *)objc_loadWeakRetained((id *)a2);
    unint64_t v7 = WeakRetained;
    if (WeakRetained) {
      uint64_t v8 = WeakRetained - 8;
    }
    else {
      uint64_t v8 = 0;
    }
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)this);
    objc_storeWeak(this, v8 + 8);
    this[1] = (id)*((void *)v8 + 37);
    if (v7) {
  }
    }
  else
  {
    uint64_t v10 = (void *)*((void *)a2 + 1);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)this);
    this[1] = v10;
  }
  return this;
}

re::DynamicString *re::ecs2::EntityHandle::setString(re::ecs2::EntityHandle *this, const char *a2, re::Allocator *a3)
{
  re::ecs2::EntityHandle::reset(this);
  BOOL v6 = (re::DynamicString *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 32, 8);
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 3) = 0;
  *(void *)BOOL v6 = a3;
  *((void *)v6 + 1) = 0;
  re::DynamicString::setCapacity(v6, 0);
  *((void *)this + 2) = v6;
  v8[0] = a2;
  v8[1] = strlen(a2);
  return re::DynamicString::operator=(v6, (uint64_t)v8);
}

re::ecs2::EntityHandle *re::ecs2::EntityHandle::operator=(re::ecs2::EntityHandle *this, id *location)
{
  uint64_t v3 = (char *)location[2];
  if (v3)
  {
    if (v3[8]) {
      uint64_t v4 = (const char *)*((void *)v3 + 2);
    }
    else {
      uint64_t v4 = v3 + 9;
    }
    re::ecs2::EntityHandle::setString(this, v4, *(re::Allocator **)v3);
  }
  else if (*location)
  {
    id WeakRetained = (char *)objc_loadWeakRetained(location);
    BOOL v6 = WeakRetained;
    if (WeakRetained) {
      unint64_t v7 = WeakRetained - 8;
    }
    else {
      unint64_t v7 = 0;
    }
    re::ecs2::EntityHandle::reset(this);
    objc_storeWeak((id *)this, v7 + 8);
    *((void *)this + 1) = *((void *)v7 + 37);
    if (v6) {
  }
    }
  else
  {
    id v9 = location[1];
    re::ecs2::EntityHandle::reset(this);
    *((void *)this + 1) = v9;
  }
  return this;
}

re::ecs2::EntityHandle *re::ecs2::EntityHandle::operator=(re::ecs2::EntityHandle *a1, uint64_t a2)
{
  if (a2)
  {
    objc_storeWeak((id *)a1, (id)(a2 + 8));
    *((void *)a1 + 1) = *(void *)(a2 + 296);
  }
  else
  {
    objc_destroyWeak((id *)a1);
    *(void *)a1 = 0;
  }
  return a1;
}

id *re::ecs2::EntityHandle::operator=(id *from, uint64_t a2)
{
  id v5 = from[1];
  id v4 = from[2];
  BOOL v6 = *(void **)(a2 + 16);
  from[1] = *(id *)(a2 + 8);
  from[2] = v6;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v4;
  id to = 0;
  objc_moveWeak(&to, from);
  re::ArcWeakPtr<re::VideoHistogram>::operator=(from, (id *)a2);
  re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)a2, &to);
  objc_destroyWeak(&to);
  return from;
}

BOOL re::ecs2::EntityHandle::isNull(id *this)
{
  id WeakRetained = objc_loadWeakRetained(this);
  if (WeakRetained)
  {

    return 0;
  }
  if (this[1]) {
    return 0;
  }
  id v4 = (char *)this[2];
  if (!v4) {
    return 1;
  }
  if (v4[8]) {
    id v5 = (unsigned __int8 *)*((void *)v4 + 2);
  }
  else {
    id v5 = (unsigned __int8 *)(v4 + 9);
  }
  return *v5 == 0;
}

char *re::ecs2::EntityHandle::resolve(id *location, uint64_t a2)
{
  if (*location)
  {
    id WeakRetained = (char *)objc_loadWeakRetained(location);
    if (!WeakRetained) {
      return 0;
    }
    uint64_t v3 = WeakRetained - 8;

    return v3;
  }
  else
  {
    id v4 = *(uint64_t (**)(uint64_t, id *))(*(void *)a2 + 128);
    return (char *)v4(a2, location);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  char *WeakRetained;
  char *v6;

  if (!*location)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t, id *))(*(void *)a2 + 128))(a2, location);
    if (!v3) {
      return 0;
    }
    id v4 = v3;
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
    objc_storeWeak(location, (id)(v4 + 8));
    location[1] = *(id *)(v4 + 296);
  }
  id WeakRetained = (char *)objc_loadWeakRetained(location);
  if (!WeakRetained) {
    return 0;
  }
  BOOL v6 = WeakRetained - 8;

  return v6;
}

{
  char *WeakRetained;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  id v9;

  if (!*location)
  {
    if (!a2) {
      return 0;
    }
    id v9 = location[1];
    BOOL v6 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 152, (uint64_t *)&v9);
    if (v6)
    {
      unint64_t v7 = *(void *)(v6 + 8);
      if (!v7) {
        return 0;
      }
    }
    else
    {
      unint64_t v7 = *(void *)(a2 + 104);
      if (*(id *)(v7 + 296) != v9) {
        return 0;
      }
    }
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
    objc_storeWeak(location, (id)(v7 + 8));
    location[1] = *(id *)(v7 + 296);
  }
  id WeakRetained = (char *)objc_loadWeakRetained(location);
  if (!WeakRetained) {
    return 0;
  }
  id v4 = WeakRetained - 8;

  return v4;
}

char *re::ecs2::EntityHandle::resolve(uint64_t a1, char *a2)
{
  if (*(void *)a1)
  {
    id WeakRetained = (char *)objc_loadWeakRetained((id *)a1);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained - 8;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v4 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)(a2 + 152), &v6);
      if (v4)
      {
        return *(char **)(v4 + 8);
      }
      else if (*(void *)(*((void *)v3 + 13) + 296) == v6)
      {
        return (char *)*((void *)v3 + 13);
      }
      else
      {
        return 0;
      }
    }
  }
  return v3;
}

char *re::ecs2::EntityHandle::resolve(id *a1, uint64_t a2)
{
  if (*a1)
  {
    id WeakRetained = (char *)objc_loadWeakRetained(a1);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained - 8;

      return v3;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  id v5 = *(char **)(v4 + 16);
  return re::ecs2::EntityHandle::resolve((uint64_t)a1, v5);
}

{
  char *WeakRetained;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  if (*a1)
  {
    id WeakRetained = (char *)objc_loadWeakRetained(a1);
    if (WeakRetained)
    {
      uint64_t v3 = WeakRetained - 8;

      return v3;
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  do
  {
    uint64_t v4 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  id v5 = *(void *)(v4 + 16);
  return re::ecs2::EntityHandle::resolve(a1, v5);
}

uint64_t *re::ecs2::introspect_EntityHandle(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92AF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF92AF0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF92AF8, "EntityHandle", 24, 8, 0, 0);
    qword_26AF92AF8 = (uint64_t)&unk_26E715E40;
    qword_26AF92B38 = (uint64_t)re::internal::defaultConstruct<re::ecs2::EntityHandle>;
    qword_26AF92B40 = (uint64_t)re::internal::entityHandleSerialize;
    qword_26AF92B48 = (uint64_t)re::internal::entityHandleDeserialize;
    qword_26AF92B58 = 0;
    unk_26AF92B60 = 0;
    qword_26AF92B50 = (uint64_t)re::internal::entityHandleDeepCopy;
    dword_26AF92B08 = 11;
    __cxa_guard_release(&qword_26AF92AF0);
  }
  if (v2)
  {
    if (_MergedGlobals_357) {
      return &qword_26AF92AF8;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v10);
    char v3 = _MergedGlobals_357;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v10);
    if (v3) {
      return &qword_26AF92AF8;
    }
    id v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
    if (_MergedGlobals_357)
    {
LABEL_8:
      unint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
      return &qword_26AF92AF8;
    }
  }
  _MergedGlobals_357 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF92AF8, a2);
  v9[0] = 0x334032F84381B816;
  v9[1] = "EntityHandle";
  xmmword_26AF92B18 = v10;
  re::StringID::destroyString((re::StringID *)v9);
  if ((v2 & 1) == 0) {
    goto LABEL_8;
  }
  return &qword_26AF92AF8;
}

void re::internal::defaultConstruct<re::ecs2::EntityHandle>(int a1, int a2, id *location)
{
  objc_initWeak(location, 0);
  location[1] = 0;
  location[2] = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
}

void re::internal::defaultConstructV2<re::ecs2::EntityHandle>(uint64_t a1)
{
  objc_initWeak((id *)a1, 0);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)a1);
}

void re::internal::defaultDestructV2<re::ecs2::EntityHandle>(re::ecs2::EntityHandle *a1)
{
  *(void *)a1 = 0;
}

uint64_t *re::ecsCoreLogObjects(re *this)
{
  {
    re::ecsCoreLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "ECS.Core");
  }
  return &re::ecsCoreLogObjects(void)::logObjects;
}

re::ecs2::HandleTable *re::ecs2::HandleTable::HandleTable(re::ecs2::HandleTable *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(void *)((char *)this + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0x7FFFFFFFLL;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  v3[0] = 0;
  v3[1] = -1;
  re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(this, v3);
  if (v3[0]) {

  }
  return this;
}

void *re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(void *this, void *a2)
{
  char v3 = this;
  unint64_t v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::growCapacity(this, v4 + 1);
    unint64_t v4 = v3[2];
  }
  id v5 = (void *)(v3[4] + 16 * v4);
  uint64_t v6 = a2[1];
  *id v5 = *a2;
  *a2 = 0;
  v5[1] = v6;
  void v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

unint64_t re::ecs2::HandleTable::getSlot(re::ecs2::HandleTable *this, unint64_t a2)
{
  if (*((void *)this + 2) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 4) + 16 * a2;
}

unint64_t re::ecs2::HandleTable::handleIndexAndGeneration(re::ecs2::HandleTable *this, re::ecs2::Component *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((void *)this + 10))
  {
    unint64_t v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    uint64_t v5 = *(unsigned int *)(*((void *)this + 11) + 4 * ((v4 ^ (v4 >> 31)) % *((unsigned int *)this + 26)));
    if (v5 != 0x7FFFFFFF)
    {
      uint64_t v9 = *((void *)this + 12);
      if (*(re::ecs2::Component **)(v9 + 32 * v5 + 16) == a2)
      {
LABEL_8:
        unint64_t v8 = *(void *)(v9 + 32 * v5 + 24);
        goto LABEL_11;
      }
      while (1)
      {
        uint64_t v5 = *(_DWORD *)(v9 + 32 * v5 + 8) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF) {
          break;
        }
        if (*(re::ecs2::Component **)(v9 + 32 * v5 + 16) == a2) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v6 = *((void *)this + 7);
  if (v6)
  {
    uint64_t v7 = v6 - 1;
    unint64_t v8 = *(void *)(*((void *)this + 9) + 8 * v7);
    *((void *)this + 7) = v7;
    ++*((_DWORD *)this + 16);
  }
  else
  {
    unint64_t v8 = *((void *)this + 2);
    long long v15 = 0uLL;
    re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::add(this, &v15);
    if ((void)v15) {
  }
    }
LABEL_11:
  unint64_t v10 = *((void *)this + 2);
  if (v10 <= v8)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = (re::ecs2::Component **)(*((void *)this + 4) + 16 * v8);
  uint64_t v12 = *v11;
  if (*v11 != a2)
  {
    if (a2)
    {
      size_t v13 = (char *)a2 + 8;
      uint64_t v12 = *v11;
    }
    if (v12) {

    }
    *uint64_t v11 = a2;
    unint64_t v10 = *((void *)this + 2);
  }
  if (v10 <= v8)
  {
LABEL_21:
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v8;
}

void *re::ecs2::HandleTable::garbageCollectIncremental(void *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unint64_t v1 = this[16];
  if (this[2] <= v1)
  {
    memset(v22, 0, sizeof(v22));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  int v2 = this;
  uint64_t v3 = this[4];
  unint64_t v4 = (unint64_t *)(v3 + 16 * v1);
  if (*v4)
  {
    this = objc_isUniquelyReferenced();
    if (this)
    {
      unint64_t v5 = *v4;
      if (v2[10])
      {
        unint64_t v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        unint64_t v7 = (v6 ^ (v6 >> 31)) % *((unsigned int *)v2 + 26);
        uint64_t v8 = v2[11];
        uint64_t v9 = *(unsigned int *)(v8 + 4 * v7);
        if (v9 != 0x7FFFFFFF)
        {
          uint64_t v10 = v2[12];
          uint64_t v11 = v10 + 32 * v9;
          if (*(void *)(v11 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
LABEL_11:
            uint64_t v14 = v2[12];
            uint64_t v15 = v14 + 32 * v9;
            int v18 = *(_DWORD *)(v15 + 8);
            long long v17 = (int *)(v15 + 8);
            int v16 = v18;
            if (v18 < 0)
            {
              *long long v17 = v16 & 0x7FFFFFFF;
              uint64_t v14 = v2[12];
              int v16 = *(_DWORD *)(v14 + 32 * v9 + 8);
            }
            *(_DWORD *)(v14 + 32 * v9 + 8) = *((_DWORD *)v2 + 29) | v16 & 0x80000000;
            --*((_DWORD *)v2 + 27);
            int v19 = *((_DWORD *)v2 + 30) + 1;
            *((_DWORD *)v2 + 29) = v9;
            *((_DWORD *)v2 + 30) = v19;
          }
          else
          {
            while (1)
            {
              unsigned int v12 = v9;
              uint64_t v9 = *(_DWORD *)(v10 + 32 * v9 + 8) & 0x7FFFFFFF;
              if (v9 == 0x7FFFFFFF) {
                break;
              }
              uint64_t v13 = v10 + 32 * v9;
              if (*(void *)(v13 + 16) == v5)
              {
                *(_DWORD *)(v10 + 32 * v12 + 8) = *(_DWORD *)(v10 + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
                goto LABEL_11;
              }
            }
          }
        }
      }
      ++*(void *)(v3 + 16 * v1 + 8);
      if (v5)
      {

        unint64_t *v4 = 0;
      }
      *(void *)&v22[0] = v2[16];
      this = re::DynamicArray<re::TransitionCondition *>::add(v2 + 5, v22);
    }
  }
  uint64_t v20 = v2[16];
  if ((unint64_t)(v20 + 1) < v2[2]) {
    uint64_t v21 = v20 + 1;
  }
  else {
    uint64_t v21 = 0;
  }
  v2[16] = v21;
  return this;
}

re::ecs2::HandleTable *re::ecs2::HandleTable::init(re::ecs2::HandleTable *this)
{
  unint64_t v1 = re::globalAllocators(this);
  int v2 = (re::ecs2::HandleTable *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 136, 8);
  __n128 result = re::ecs2::HandleTable::HandleTable(v2);
  re::ecs2::HandleTable::m_instance = (uint64_t)result;
  return result;
}

re *re::internal::destroyPersistent<re::ecs2::HandleTable>(re *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a3 + 80));
    re::DynamicArray<unsigned long>::deinit(a3 + 40);
    re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::deinit(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void *re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      __n128 result = (void *)*result;
      if (!*v5)
      {
        __n128 result = (void *)re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          uint64_t v2 = 16 * a2;
          __n128 result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_15;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        __n128 result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (void *)(v8 + 16 * v9);
        uint64_t v11 = v7;
        unsigned int v12 = (void *)v5[4];
        do
        {
          uint64_t v13 = v12[1];
          *uint64_t v11 = *v12;
          void *v12 = 0;
          v12 += 2;
          v11[1] = v13;
          v11 += 2;
        }
        while (v12 != v10);
      }
      __n128 result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::HandleTable::HandleSlot>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 16 * v4;
        do
        {
          if (*(void *)v3)
          {

            *(void *)uint64_t v3 = 0;
          }
          v3 += 16;
          v5 -= 16;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::ecs2::ComponentBucketsBase::init(re::ecs2::ComponentBucketsBase *this, re::Allocator *a2)
{
  *(void *)this = a2;
  uint64_t v4 = (char *)this + 120;
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::init((uint64_t)this + 8, (uint64_t)a2, 1uLL);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::init((uint64_t)this + 64, (uint64_t)a2, 1uLL);
  return re::BucketArray<unsigned long,8ul>::init((uint64_t)v4, (uint64_t)a2, 1uLL);
}

uint64_t *re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::ecs2::ComponentBucketsBase::deinit(re::ecs2::ComponentBucketsBase *this)
{
  re::BucketArray<unsigned long,8ul>::deinit((uint64_t)this + 120);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit((uint64_t)this + 64);
  uint64_t result = re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit((uint64_t)this + 8);
  *(void *)this = 0;
  return result;
}

unint64_t re::ecs2::ComponentBucketsBase::componentHandle(re::ecs2::ComponentBucketsBase *this, unint64_t a2, re::ecs2::Component *a3)
{
  unint64_t v3 = a2;
  uint64_t v6 = a3;
  uint64_t v4 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, a2);
  if (!re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v4, (uint64_t *)&v6))return -1; {
  return v3;
  }
}

uint64_t re::ecs2::ComponentBucketsBase::addBucket(re::ecs2::ComponentBucketsBase *this)
{
  uint64_t v2 = *((void *)this + 20);
  if (v2)
  {
    uint64_t v3 = *(void *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 120, v2 - 1);
    re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)this + 120, *((void *)this + 20) - 1);
    --*((void *)this + 20);
    ++*((_DWORD *)this + 42);
    return v3;
  }
  uint64_t v4 = re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::addUninitialized((uint64_t)this + 8);
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(void *)(v4 + 52) = 0x1FFFFFFFFLL;
  uint64_t v6 = *((void *)this + 6);
  if (v6)
  {
    unint64_t v7 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)this + 8, v6 - 1);
    *(void *)unint64_t v7 = *(void *)this;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((void *)v7, 0);
    ++*(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 32;
    re::DataArray<re::ecs2::Component *>::allocBlock((unsigned int *)v7);
    uint64_t v8 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::addUninitialized((uint64_t)this + 64);
    *(_OWORD *)(v8 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *(_DWORD *)(v8 + 36) = 0x7FFFFFFF;
    uint64_t v10 = *((void *)this + 13);
    if (v10)
    {
      uint64_t v11 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, v10 - 1);
      re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::init(v11, *(void *)this, 3);
      return *((void *)this + 6) - 1;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  unsigned int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &memset_pattern_11, 4 * v10);
    }
    *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = &v14[v11];
    *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::ecs2::ComponentBucketsBase::removeBucket(re::ecs2::ComponentBucketsBase *this, unint64_t a2)
{
  unint64_t v4 = (void *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)this + 8, a2);
  re::DataArray<re::ecs2::Component *>::clear(v4);
  uint64_t v5 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, a2);
  re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::clear(v5);
  uint64_t result = (void *)re::BucketArray<unsigned long,8ul>::addUninitialized((uint64_t)this + 120);
  *uint64_t result = a2;
  return result;
}

void re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_40, 4 * v2);
    }
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 32 * v3;
      do
      {
        uint64_t v6 = *(void *)(a1 + 16) + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0) {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        }
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

unint64_t re::ecs2::ComponentBucketsBase::addComponent(re::ecs2::ComponentBucketsBase *this, unint64_t a2, re::ecs2::Component *a3)
{
  unint64_t v3 = a2;
  uint64_t v10 = a3;
  uint64_t v5 = (char *)this + 64;
  uint64_t v6 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)this + 64, a2);
  if (!re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v6, (uint64_t *)&v10))
  {
    unint64_t v11 = v3;
    unint64_t v7 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)this + 8, v3);
    unint64_t v12 = re::DataArray<re::ecs2::Component *>::create<re::ecs2::Component *&>(v7, &v10);
    uint64_t v8 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[]((uint64_t)v5, v3);
    re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addNew<re::DataArrayHandle<re::ecs2::Component *>&>(v8, (uint64_t *)&v10, &v12);
    return v11;
  }
  return v3;
}

unint64_t re::DataArray<re::ecs2::Component *>::create<re::ecs2::Component *&>(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 56);
  if ((v4 + 1) >> 24) {
    int v5 = 1;
  }
  else {
    int v5 = v4 + 1;
  }
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = *(unsigned __int16 *)(a1 + 52);
  unint64_t v7 = *(unsigned __int16 *)(a1 + 54);
  if (v6 == 0xFFFF && v7 == 0xFFFF)
  {
    if (*(_DWORD *)(a1 + 48) >= *(_DWORD *)(a1 + 44)) {
      re::DataArray<re::ecs2::Component *>::allocBlock((unsigned int *)a1);
    }
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v7 = (unsigned __int16)(v11 - 1);
    if (v11)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 48);
      if (v6 < 0x10000)
      {
        unint64_t v12 = (void *)(*(void *)(a1 + 32) + 16 * v7);
        *(_DWORD *)(a1 + 48) = v6 + 1;
        *(_DWORD *)(v12[1] + 4 * v6) = *(_DWORD *)(a1 + 56);
        uint64_t v10 = (_DWORD *)(*v12 + 8 * v6);
        goto LABEL_15;
      }
LABEL_18:
      re::internal::assertLog((re::internal *)5, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v6, v14, v15);
      _os_crash();
      __break(1u);
    }
LABEL_17:
    uint64_t v14 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v15) = 136315906;
    *(void *)((char *)&v15 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
    WORD6(v15) = 1024;
    HIWORD(v15) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(a1 + 16) <= v7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  signed int v9 = (void *)(*(void *)(a1 + 32) + 16 * v7);
  *(_DWORD *)(v9[1] + 4 * v6) = v5;
  uint64_t v10 = (_DWORD *)(*v9 + 8 * v6);
  *(_DWORD *)(a1 + 52) = *v10;
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  *(void *)uint64_t v10 = *a2;
  return (v7 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 56) & 0xFFFFFF) << 32) | v6;
}

uint64_t re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addNew<re::DataArrayHandle<re::ecs2::Component *>&>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addEmplace<re::DataArrayHandle<re::ecs2::Component *>&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::ComponentBucketsBase::removeComponent(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result = 0;
  if (a2 != -1 && (a3 & 0xFFFFFF00000000) != 0)
  {
    unint64_t v7 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1 + 8, a2);
    uint64_t result = re::DataArray<re::ecs2::Component *>::tryGet(v7, a3);
    if (result)
    {
      uint64_t v10 = *(void *)result;
      unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1 + 8, a2);
      re::DataArray<re::ecs2::Component *>::destroy(v8, a3);
      uint64_t v9 = re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[](a1 + 64, a2);
      re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v9, &v10);
      return 1;
    }
  }
  return result;
}

unint64_t re::ecs2::ComponentBucketsBase::moveComponent(re::ecs2::ComponentBucketsBase *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != -1 && a2 != a4 && (a3 & 0xFFFFFF00000000) != 0)
  {
    unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[]((uint64_t)a1 + 8, a2);
    uint64_t v9 = (re::ecs2::Component **)re::DataArray<re::ecs2::Component *>::tryGet(v8, a3);
    if (v9)
    {
      uint64_t v10 = *v9;
      re::ecs2::ComponentBucketsBase::removeComponent((uint64_t)a1, v5, a3);
      return re::ecs2::ComponentBucketsBase::addComponent(a1, a4, v10);
    }
    else
    {
      return -1;
    }
  }
  return v5;
}

re::ecs2::ComponentBucketsBase *re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(re::ecs2::ComponentBucketsBase *this, re::ecs2::Component *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    int v4 = this;
    for (unint64_t i = 0; i != v2; ++i)
    {
      unint64_t v6 = re::ecs2::ComponentBucketsBase::componentHandle(v4, i, a2);
      this = (re::ecs2::ComponentBucketsBase *)re::ecs2::ComponentBucketsBase::removeComponent((uint64_t)v4, v6, v7);
    }
  }
  return this;
}

uint64_t *re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 512, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 384, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 3));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + ((v2 & 7) << 6);
}

void re::DataArray<re::ecs2::Component *>::allocBlock(unsigned int *a1)
{
  uint64_t v2 = 8 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    uint64_t v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(void, uint64_t, void))(**(void **)a1 + 32))(*(void *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(void *)(*(void *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(void *)(*(void *)a1 + 8));
  _os_crash();
  __break(1u);
}

uint64_t re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 3));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 48 * (v2 & 7);
}

uint64_t re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::addEmplace<re::DataArrayHandle<re::ecs2::Component *>&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 32 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  *(void *)(*(void *)(a1 + 16) + 32 * v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(void *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::init((uint64_t)v24, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v24;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)long long v24 = v5;
      *(void *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v9;
      unsigned int v10 = v8;
      if (v8)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
        uint64_t v13 = v7;
        int v14 = DWORD1(v9);
        do
        {
          long long v15 = (unint64_t *)(*(void *)&v24[16] + v11);
          if ((*(_DWORD *)(*(void *)&v24[16] + v11 + 8) & 0x80000000) != 0)
          {
            unint64_t v16 = *v15;
            unint64_t v17 = *(unsigned int *)(a1 + 24);
            unint64_t v18 = *v15 % v17;
            uint64_t v19 = *(unsigned int *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 32);
              int v20 = v19;
              if (v19 == v17)
              {
                re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>::setCapacity(a1, (2 * v14));
                unint64_t v18 = v16 % *(unsigned int *)(a1 + 24);
                int v20 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
            }
            else
            {
              uint64_t v21 = *(void *)(a1 + 16);
              int v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 32 * v19 + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v19 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(void *)(*(void *)(a1 + 16) + 32 * v19) = v16;
            *(void *)(*(void *)(a1 + 16) + 32 * v19 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v15[2];
            *(void *)(*(void *)(a1 + 16) + 32 * v19 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v15[3];
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            int v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            unsigned int v10 = *(_DWORD *)&v24[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2) {
      signed int v23 = a2;
    }
    else {
      signed int v23 = 3;
    }
  }
}

void *re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(void *a1)
{
  *a1 = &unk_26E70C3E0;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(a1 + 1));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  return a1;
}

void re::ecs2::EntityChildCollection::~EntityChildCollection(re::ecs2::EntityChildCollection *this)
{
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(this);
  JUMPOUT(0x237DBCBD0);
}

BOOL re::ecs2::EntityChildCollection::remove(re *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(*a2 + 376) == -1 || *(void *)(v2 + 24) != *((void *)a1 + 6)) {
    return 0;
  }
  uint64_t v10 = *a2;
  id v6 = (id)(v2 + 8);
  re::ecs2::EntityChildCollection::willRemoveAt(a1, v7, &v10);
  uint64_t v8 = v10;
  unint64_t v9 = *(void *)(v10 + 376);
  BOOL v4 = v9 != -1;
  if (v9 == -1
    || (re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::removeAt((uint64_t)a1 + 8, *(void *)(v10 + 376)),
        re::ecs2::EntityChildCollection::didRemoveAt(a1, v9, (uint64_t)&v10),
        (uint64_t v8 = v10) != 0))
  {
  }
  return v4;
}

void re::ecs2::EntityChildCollection::willRemoveAt(re *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*a3 + 371))
  {
    long long v5 = *re::ecsCoreLogObjects(a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 280);
      int v11 = 136315394;
      uint64_t v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = v6;
      _os_log_impl(&dword_233120000, v5, OS_LOG_TYPE_DEFAULT, "Unparenting '%s' (%p) a second time during an unparent operation", (uint8_t *)&v11, 0x16u);
    }
  }
  uint64_t v8 = *((void *)a1 + 6);
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = *(void *)(v8 + 24);
  }
  while (v8);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray((uint64_t)&v11, a3);
    re::ecs2::Scene::removeFromAllEntities(v10, (uint64_t)&v11);
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v11);
  }
  if (*(void *)(*a3 + 24)) {
    re::ecs2::EntityChildCollection::setEntityParentDirectly((uint64_t)a1, (re::ecs2::Entity **)a3, 0);
  }
}

void *re::ecs2::EntityChildCollection::didRemoveAt(void *result, unint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)a3 + 376) = -1;
  if (result[3] > a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = (uint64_t)result;
    uint64_t result = (void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)result, a2);
    unint64_t v5 = *(void *)(v4 + 24);
    if (*(void *)(*result + 376) == v5)
    {
      uint64_t result = (void *)re::ecs2::EntityComponentCollection::operator[](v4, v3);
      *(void *)(*result + 376) = v3;
    }
    else if (v5 > v3)
    {
      do
      {
        uint64_t result = (void *)re::ecs2::EntityComponentCollection::operator[](v4, v3);
        *(void *)(*result + 376) = v3++;
      }
      while (v3 < *(void *)(v4 + 24));
    }
  }
  return result;
}

re::ecs2::Entity *re::ecs2::EntityChildCollection::add(re::ecs2::EntityChildCollection *this)
{
  uint64_t v2 = re::ecs2::EntityFactory::instance(this);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v2, 4uLL, &v5);
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(this, (uint64_t *)&v5);
  unint64_t v3 = v5;
  if (v5) {

  }
  return v3;
}

re::ecs2::Entity *re::ecs2::EntityChildCollection::getOrAdd(re::ecs2::EntityChildCollection *this, const re::StringID *a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (!v4) {
    goto LABEL_7;
  }
  unint64_t v5 = (re::ecs2::Entity **)*((void *)this + 5);
  uint64_t v6 = 8 * v4;
  while (1)
  {
    uint64_t v7 = *v5;
    if (re::StringID::operator==((void *)*v5 + 34, a2)) {
      break;
    }
    ++v5;
    v6 -= 8;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (!v7)
  {
LABEL_7:
    uint64_t v7 = re::ecs2::EntityChildCollection::add(this);
    re::StringID::operator=((unint64_t *)v7 + 34, (uint64_t *)a2);
  }
  return v7;
}

void re::ecs2::EntityChildCollection::willClear(re::ecs2::EntityChildCollection *this)
{
  uint64_t v2 = *((void *)this + 6);
  do
  {
    uint64_t v3 = v2;
    uint64_t v2 = *(void *)(v2 + 24);
  }
  while (v2);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4) {
    re::ecs2::Scene::removeFromAllEntities(v4, (uint64_t)this + 8);
  }
  if (*((void *)this + 3))
  {
    unint64_t v5 = 0;
    do
    {
      *(void *)(*(void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, v5) + 376) = -1;
      uint64_t v6 = (re::ecs2::Entity **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)this, v5);
      re::ecs2::EntityChildCollection::setEntityParentDirectly((uint64_t)this, v6, 0);
      ++v5;
    }
    while (v5 < *((void *)this + 3));
  }
}

void re::ecs2::EntityChildCollection::setEntityParentDirectly(uint64_t a1, re::ecs2::Entity **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *((void *)*a2 + 3);
  if (v4 != a3)
  {
    *((void *)v3 + 3) = a3;
    uint64_t v7 = *(void *)(a1 + 48);
    if ((*(unsigned char *)(v7 + 288) & 0x80) != 0)
    {
      if (a3)
      {
        do
        {
          uint64_t v12 = v7;
          uint64_t v7 = *(void *)(v7 + 24);
        }
        while (v7);
        uint64_t v13 = *(void *)(v12 + 16);
        if (*((void *)v3 + 2)) {
          BOOL v14 = 1;
        }
        else {
          BOOL v14 = v13 == 0;
        }
        if (!v14)
        {
          re::ecs2::Entity::updateIsSelfAnchored_Subtree((uint64_t)v3);
          re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)v3);
          uint64_t v3 = *a2;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      *((void *)v3 + 2) = v13;
      uint64_t v15 = v3;
      do
      {
        unint64_t v16 = v15;
        uint64_t v15 = (re::ecs2::Entity *)*((void *)v15 + 3);
      }
      while (v15);
      uint64_t v17 = *((void *)v16 + 2);
      if (v17) {
        BOOL v18 = *(unsigned __int8 *)(v17 + 48) != 0;
      }
      else {
        BOOL v18 = 0;
      }
      re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree((uint64_t)v3, v18);
    }
    else
    {
      uint64_t v8 = v3;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (re::ecs2::Entity *)*((void *)v8 + 3);
      }
      while (v8);
      uint64_t v10 = *((void *)v9 + 2);
      if (v10) {
        BOOL v11 = *(unsigned __int8 *)(v10 + 48) != 0;
      }
      else {
        BOOL v11 = 0;
      }
      re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree((uint64_t)v3, v11);
      re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree((uint64_t)v3);
      re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)v3);
    }
    re::ecs2::Entity::updateIsActive_Subtree(v3);
    if ((a3 != 0) == (v4 == 0))
    {
      uint64_t v19 = *a2;
      re::ecs2::Entity::updateSwiftObjectOwnership(v19);
    }
  }
}

void re::ecs2::EntityChildCollection::willInsert(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = v5;
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = *(void *)(v6 + 24);
  }
  while (v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (*(unsigned char *)(v5 + 371)) {
    goto LABEL_4;
  }
  if ((*(unsigned char *)(v5 + 288) & 0x80) == 0)
  {
    if (v8)
    {
      v17[0] = *(void *)(v5 + 296);
      if (!re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v8 + 152, v17))
      {
        uint64_t v5 = *(void *)(a1 + 48);
LABEL_4:
        __CALLER_IS_PARENTING_AN_ENTITY_TO_AN_ENTITY_BEING_REMOVED__((unsigned __int8 *)v5, *a3);
      }
    }
  }
  uint64_t v9 = *a3;
  uint64_t v10 = *a3;
  do
  {
    uint64_t v11 = v10;
    uint64_t v10 = *(void *)(v10 + 24);
  }
  while (v10);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12) {
    BOOL v13 = v12 == v8;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    *(unsigned char *)(v8 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
    *(void *)(v8 + 312) = *(void *)(v9 + 24);
    int v14 = *(_DWORD *)(v9 + 288);
    *(unsigned char *)(v8 + 320) = v14 & 1;
    if ((v14 & 1) != 0 && (*(unsigned char *)(*(void *)(a1 + 48) + 288) & 0x81) == 0)
    {
      re::ecs2::Entity::sendDeactivateEvents((re::ecs2::Entity *)v9, (re::ecs2::Scene *)v8);
      uint64_t v9 = *a3;
    }
  }
  uint64_t v15 = (void *)(v9 + 8);
  id v16 = (id)(v9 + 8);
  if (*(void *)(*a3 + 24)) {
    re::ecs2::Entity::setParentInternal((re::ecs2::Entity *)*a3, 0, 0xFFFFFFFFFFFFFFFFLL);
  }
  re::ecs2::EntityChildCollection::setEntityParentDirectly(a1, (re::ecs2::Entity **)a3, *(void *)(a1 + 48));
  if (v8)
  {
    re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray((uint64_t)v17, a3);
    if (!*(unsigned char *)(v8 + 304)) {
      re::ecs2::Scene::addToAllEntitiesRecursively(v8, (uint64_t)v17);
    }
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v17);
  }
}

void re::ecs2::EntityChildCollection::willSet(re *a1, unint64_t a2, uint64_t *a3)
{
  if (*(void *)(*a3 + 24) == *((void *)a1 + 6))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Entity is already part of this collection.", "child->parentIncludingSceneEntity() != m_parent", "willSet", 216);
    _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v5 = (uint64_t *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)a1, a2);
    re::ecs2::EntityChildCollection::willRemoveAt(a1, v6, v5);
    re::ecs2::EntityChildCollection::willInsert((uint64_t)a1, v7, a3);
  }
}

void re::ecs2::EntityChildCollection::didInsert(uint64_t a1, unint64_t a2, re **a3)
{
  *(void *)(*(void *)re::ecs2::EntityComponentCollection::operator[](a1, a2) + 376) = a2;
  unint64_t v6 = a2 + 1;
  if (v6 < *(void *)(a1 + 24)
    && *(void *)(*(void *)re::ecs2::EntityComponentCollection::operator[](a1, v6) + 376) != v6)
  {
    while (v6 < *(void *)(a1 + 24))
    {
      *(void *)(*(void *)re::ecs2::EntityComponentCollection::operator[](a1, v6) + 376) = v6;
      ++v6;
    }
  }
  uint64_t v7 = *(void *)(a1 + 48);
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = *(void *)(v7 + 24);
  }
  while (v7);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    if (*(unsigned char *)(v9 + 304))
    {
      *(unsigned char *)(v9 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      uint64_t v10 = *(void *)(v9 + 312);
      if (*(unsigned char *)(v9 + 320) != (*((_DWORD *)*a3 + 72) & 1))
      {
        re::ecs2::Entity::onActivationChanged(*a3, v9);
        if (*((unsigned char *)*a3 + 288)) {
          re::ecs2::Entity::sendActivateEvents(*a3, (re::ecs2::Scene *)v9);
        }
      }
      uint64_t v11 = *(re::EventBus **)(v9 + 288);
      if (v11)
      {
        uint64_t v12 = *a3;
        v14[0] = v10;
        v14[1] = v12;
        uint64_t Type = re::EventBus::getTypeId<RESceneEntityDidReparentEvent>();
        re::EventBus::publish(v11, (uint64_t)v12, Type, (uint64_t)v14, 0x10uLL, 0);
      }
      *(void *)(v9 + 312) = 0;
      *(unsigned char *)(v9 + 320) = 0;
    }
    else
    {
      re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray((uint64_t)v14, (uint64_t *)a3);
      re::ecs2::Scene::sendAddAndActivateEvents(v9, (uint64_t)v14);
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v14);
    }
  }
}

void re::ecs2::EntityChildCollection::didSet(uint64_t a1, unint64_t a2, uint64_t a3, re **a4)
{
}

void re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(void *a1)
{
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ScratchDynamicArray<re::SharedPtr<re::ecs2::Entity>>::ScratchDynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)a1, 1uLL);
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add((void *)a1, a2);
  return a1;
}

re::ecs2::EntityComponentCollection *re::ecs2::EntityComponentCollection::EntityComponentCollection(re::ecs2::EntityComponentCollection *this, re::ecs2::Entity *a2, unint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)this + 1, a3);
  ++*((_DWORD *)this + 8);
  *((_DWORD *)this + 12) = 0;
  *((_WORD *)this + 26) = 16;
  *(void *)&long long v5 = -1;
  *((void *)&v5 + 1) = -1;
  *((_OWORD *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v5;
  *((void *)this + 7) = (char *)this + 64;
  *((_OWORD *)this + 5) = v5;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 28) = 0;
  return this;
}

uint64_t re::ecs2::EntityComponentCollection::add(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((unsigned __int16 *)this + 25);
  if (!*((_WORD *)this + 25)) {
    goto LABEL_10;
  }
  long long v5 = (const __int16 *)((char *)a2 + 16);
  unint64_t v6 = (int16x8_t *)*((void *)this + 7);
  int16x8_t v7 = vld1q_dup_s16(v5);
  int v8 = 1;
  while (1)
  {
    uint16x8_t v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_23436BBD0);
    v9.i16[0] = vmaxvq_u16(v9);
    if (v9.i32[0]) {
      break;
    }
    v8 -= 8;
    ++v6;
    if (!--v4) {
      goto LABEL_10;
    }
  }
  if (v9.u16[0] - v8 < *((unsigned __int16 *)this + 24))
  {
    uint64_t v10 = *re::ecsCoreLogObjects(this);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(*(void *)this + 280);
      uint64_t v12 = *((void *)a2 + 4);
      *(_DWORD *)float32x4_t buf = 136315394;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v18 = 2080;
      uint64_t v19 = v12;
      _os_log_impl(&dword_233120000, v10, OS_LOG_TYPE_DEFAULT, "Entity '%s' already contains a component of type '%s' - ignoring new one.", buf, 0x16u);
    }
    return 0;
  }
  else
  {
LABEL_10:
    (*(void (**)(unsigned char *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(void *)a2 + 32))(buf, a2);
    uint64_t v16 = *(void *)buf;
    if (*(void *)buf) {
      id v14 = (id)(*(void *)buf + 8);
    }
    re::ecs2::EntityComponentCollection::add((uint64_t)this, &v16, 1);
    if (v16)
    {

      uint64_t v16 = 0;
    }
    uint64_t v13 = *(void *)buf;
    if (*(void *)buf) {
  }
    }
  return v13;
}

void re::ecs2::EntityComponentCollection::add(uint64_t a1, uint64_t *a2, int a3)
{
  re::ecs2::EntityComponentCollection::willAdd((re::ecs2::Entity **)a1, a2);
  *(void *)(*a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(void *)a1;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add((void *)(a1 + 8), a2);
  __int16 v6 = *(_WORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 40))() + 16);
  re::ecs2::PackedTypeIDs::ensureCapacity((unsigned __int16 *)(a1 + 48), *(unsigned __int16 *)(a1 + 48) + 1);
  *(_WORD *)(*(void *)(a1 + 56) + 2 * *(unsigned __int16 *)(a1 + 4re::ecs2::ClippingParameterDataStateTracking::~ClippingParameterDataStateTracking((re::ecs2::ClippingManager *)((char *)this + 8)) = v6;
  unsigned __int16 v7 = *(_WORD *)(a1 + 48) + 1;
  *(_WORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 50) = (v7 + 7) >> 3;
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
  if (v8 != -1) {
    *(void *)(a1 + 8 * v8 + 96) = *a2;
  }
  re::ecs2::EntityComponentCollection::didAdd((re::ecs2::Entity **)a1, (re::ecs2::Component **)a2, a3);
}

void re::ecs2::EntityComponentCollection::willAdd(re::ecs2::Entity **a1, uint64_t *a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(*(void *)*a2 + 40))();
  if (v4 == re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    uint64_t v5 = *a2;
    __int16 v6 = *a1;
    char v7 = (!*(unsigned char *)(*a2 + 176) || *(unsigned char *)(v5 + 177)) && *(unsigned char *)(v5 + 178) == 0;
    re::ecs2::Entity::setSelfAnchored_Before(v6, v7);
  }
  else if (v4 == re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    if (*(unsigned char *)(*a2 + 352))
    {
      uint64_t v8 = *a1;
      if ((*((_DWORD *)*a1 + 72) & 0x131) == 0x11)
      {
        uint16x8_t v9 = *a1;
        do
        {
          uint64_t v10 = v9;
          uint16x8_t v9 = (re::ecs2::Entity *)*((void *)v9 + 3);
        }
        while (v9);
        uint64_t v11 = (re::ecs2::Scene *)*((void *)v10 + 2);
        re::ecs2::Entity::sendDeactivateEvents(v8, v11);
      }
    }
  }
}

void re::ecs2::EntityComponentCollection::didAdd(re::ecs2::Entity **a1, re::ecs2::Component **a2, int a3)
{
  __int16 v6 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(void))(*(void *)*a2 + 40))();
  char v7 = *a1;
  do
  {
    uint64_t v8 = v7;
    char v7 = (re::ecs2::Entity *)*((void *)v7 + 3);
  }
  while (v7);
  uint64_t v9 = *((void *)v8 + 2);
  if (v9)
  {
    if (!*((unsigned char *)*a1 + 371))
    {
      uint64_t v10 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v9 + 200), v6);
      re::ecs2::SceneComponentCollectionBase::add(v10, *a2);
      if (a3) {
        re::ecs2::Scene::sendAddAndActivateComponentEvents((re::ecs2::Scene *)v9, *a1, v6);
      }
    }
  }
  if (v6 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    uint64_t v11 = *a2;
    uint64_t v12 = *a1;
    int v13 = (!*((unsigned char *)*a2 + 176) || *((unsigned char *)v11 + 177)) && *((unsigned __int8 *)v11 + 178) == 0;
    re::ecs2::Entity::setSelfAnchored_After(v12, v13);
  }
  else if (v6 == (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    id v14 = *a1;
    int v15 = *((unsigned __int8 *)*a2 + 352);
    re::ecs2::Entity::setSelfRequiresAnchoring_After(v14, v15);
  }
}

void re::ecs2::EntityComponentCollection::removeAt(re::ecs2::EntityComponentCollection *this, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*((void *)this + 3) <= a2)
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v4 = *(void **)(*((void *)this + 5) + 8 * a2);
  if (v4) {
    uint64_t v5 = v4 + 1;
  }
  int v6 = *((_DWORD *)this + 8);
  uint64_t v7 = *(void *)this;
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = *(void *)(v7 + 24);
  }
  while (v7);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)(*(uint64_t (**)(void *))(*v4 + 40))(v4);
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)this;
    if (!*(unsigned char *)(*(void *)this + 371))
    {
      if (*(unsigned char *)(v12 + 288))
      {
        if (v10 != re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
          || (char v13 = re::ecs2::Entity::setSelfAnchored_Before(*(re::ecs2::Entity **)this, 0),
              uint64_t v12 = *(void *)this,
              (v13 & 1) == 0))
        {
          id v14 = *(re::EventBus **)(v9 + 288);
          *(void *)&long long v36 = v12;
          *((void *)&v36 + 1) = v11;
          uint64_t Type = re::EventBus::getTypeId<REComponentWillDeactivateEvent>();
          re::EventBus::publish(v14, v12, Type, (uint64_t)&v36, 0x10uLL, v11);
          uint64_t v12 = *(void *)this;
        }
      }
      uint64_t v16 = *(re::EventBus **)(v9 + 288);
      *(void *)&long long v36 = v12;
      *((void *)&v36 + 1) = v11;
      uint64_t v17 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
      re::EventBus::publish(v16, v12, (uint64_t)v17, (uint64_t)&v36, 0x10uLL, v11);
    }
    __int16 v18 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v9 + 200), (const re::ecs2::ComponentTypeBase *)v11);
    re::ecs2::SceneComponentCollectionBase::remove(v18, (re::ecs2::Component *)v4);
    int v19 = *((_DWORD *)this + 8);
    unint64_t v20 = *((void *)this + 3);
    if (v19 != v6)
    {
      uint64_t v21 = *((void *)this + 5);
      if (v20)
      {
        uint64_t v22 = 8 * v20;
        signed int v23 = (void *)*((void *)this + 5);
        while ((void *)*v23 != v4)
        {
          ++v23;
          v22 -= 8;
          if (!v22)
          {
            signed int v23 = (void *)(v21 + 8 * v20);
            break;
          }
        }
      }
      else
      {
        signed int v23 = (void *)*((void *)this + 5);
      }
      unint64_t v2 = ((uint64_t)v23 - v21) >> 3;
      if (v2 == v20)
      {
        if (!v4) {
          return;
        }
        goto LABEL_38;
      }
    }
  }
  else
  {
    unint64_t v20 = *((void *)this + 3);
    int v19 = *((_DWORD *)this + 8);
  }
  void v4[2] = 0;
  if (v20 <= v2)
  {
LABEL_42:
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v24 = v20 - 1;
  uint64_t v25 = *((void *)this + 5);
  if (v20 - 1 > v2)
  {
    long long v26 = (uint64_t *)(v25 + 8 * v2);
    long long v27 = v26 + 1;
    if (v26 + 1 != (uint64_t *)(v25 + 8 * v20))
    {
      uint64_t v28 = *v26;
      uint64_t v29 = 8 * v20 - 8 * v2 - 8;
      do
      {
        *(v27 - 1) = *v27;
        *v27++ = v28;
        v29 -= 8;
      }
      while (v29);
      uint64_t v25 = *((void *)this + 5);
    }
  }
  uint64_t v30 = v25 + 8 * v20;
  uint64_t v31 = *(void *)(v30 - 8);
  if (v31)
  {

    *(void *)(v30 - 8) = 0;
    uint64_t v24 = *((void *)this + 3) - 1;
    int v19 = *((_DWORD *)this + 8);
  }
  *((void *)this + 3) = v24;
  *((_DWORD *)this + 8) = v19 + 1;
  uint64_t v32 = *((void *)this + 7);
  memmove((void *)(v32 + 2 * v2), (const void *)(v32 + 2 * v2 + 2), 2 * (*((unsigned __int16 *)this + 24) + ~v2));
  *(_WORD *)(v32 + 2 * *((unsigned __int16 *)this + 24) - 2) = -1;
  unsigned __int16 v33 = *((_WORD *)this + 24) - 1;
  *((_WORD *)this + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v33;
  *((_WORD *)this + 25) = (v33 + 7) >> 3;
  uint64_t v34 = (*(uint64_t (**)(void *))(*v4 + 32))(v4);
  if (v34 != -1) {
    *((void *)this + v34 + 12) = 0;
  }
  uint64_t v35 = (void *)(*(uint64_t (**)(void *))(*v4 + 40))(v4);
  if (v35 == re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    re::ecs2::Entity::setSelfAnchored_After(*(re::ecs2::Entity **)this, 0);
  }
  else if (v35 == re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
  {
    re::ecs2::Entity::setSelfRequiresAnchoring_After(*(re::ecs2::Entity **)this, 0);
  }
LABEL_38:
}

void re::ecs2::EntityComponentCollection::remove(re::ecs2::EntityComponentCollection *this, re::ecs2::Component *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = 0;
    while (*(re::ecs2::Component **)(*((void *)this + 5) + 8 * v3) != a2)
    {
      if (v2 == ++v3) {
        return;
      }
    }
    re::ecs2::EntityComponentCollection::removeAt(this, v3);
  }
}

void re::ecs2::EntityComponentCollection::remove(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2 = *((unsigned __int16 *)this + 25);
  if (*((_WORD *)this + 25))
  {
    unint64_t v3 = (const __int16 *)((char *)a2 + 16);
    uint64_t v4 = (int16x8_t *)*((void *)this + 7);
    int16x8_t v5 = vld1q_dup_s16(v3);
    for (int i = 1; ; i -= 8)
    {
      uint16x8_t v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_23436BBD0);
      v7.i16[0] = vmaxvq_u16(v7);
      if (v7.i32[0]) {
        break;
      }
      ++v4;
      if (!--v2) {
        return;
      }
    }
    unint64_t v8 = v7.u16[0] - i;
    if ((int)v8 < *((unsigned __int16 *)this + 24)) {
      re::ecs2::EntityComponentCollection::removeAt(this, v8);
    }
  }
}

void re::ecs2::EntityComponentCollection::clear(uint64_t **this, uint64_t a2)
{
  re::ecs2::EntityComponentCollection::willClear((re::ecs2::EntityComponentCollection *)this, a2);
  unint64_t v3 = this[3];
  if (v3)
  {
    uint64_t v4 = this[5];
    uint64_t v5 = 8 * (void)v3;
    do
    {
      uint64_t v6 = *v4++;
      *(void *)(v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  if (*((_WORD *)this + 25))
  {
    unint64_t v7 = 0;
    uint64_t v8 = 16 * *((unsigned __int16 *)this + 25);
    *(void *)&long long v9 = -1;
    *((void *)&v9 + 1) = -1;
    do
    {
      *(_OWORD *)&this[7][v7 / 8] = v9;
      v7 += 16;
    }
    while (v8 != v7);
  }
  *((_DWORD *)this + 12) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  this[28] = 0;
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(this + 1));
}

void re::ecs2::EntityComponentCollection::willClear(re::ecs2::EntityComponentCollection *this, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)this;
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = *(void *)(v3 + 24);
  }
  while (v3);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(re::EventBus **)(v5 + 288);
    if (v6)
    {
      int v7 = 0;
      ++*((void *)v6 + 12);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  int v7 = 1;
LABEL_8:
  unint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    for (unint64_t i = 0; i < v8; ++i)
    {
      if (v8 <= i)
      {
        memset(v17, 0, sizeof(v17));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v5)
      {
        uint64_t v10 = *(re::ecs2::Component **)(*((void *)this + 5) + 8 * i);
        if (!v7)
        {
          uint64_t v11 = (const void *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)v10 + 40))(v10);
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)this;
          if (*(unsigned char *)(*(void *)this + 288))
          {
            *(void *)&v17[0] = *(void *)this;
            *((void *)&v17[0] + 1) = v11;
            re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v6, v13, v17, v11);
            uint64_t v13 = *(void *)this;
          }
          *(void *)&v17[0] = v13;
          *((void *)&v17[0] + 1) = v12;
          re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillRemoveEvent,void>(v6, v13, v17, v12);
        }
        id v14 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)v10 + 40))(v10);
        int v15 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v5 + 200), v14);
        re::ecs2::SceneComponentCollectionBase::remove(v15, v10);
        unint64_t v8 = *((void *)this + 3);
      }
    }
  }
  if ((v7 & 1) == 0) {
    re::EventBus::endBatch(v6, a2);
  }
  uint64_t v16 = *(re::ecs2::Entity **)this;
  re::ecs2::Entity::setSelfAnchored_Before(v16, 0);
  re::ecs2::Entity::setSelfAnchored_After(v16, 0);
}

uint64_t re::ecs2::EntityComponentCollection::get(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2 = *((unsigned __int16 *)this + 25);
  if (!*((_WORD *)this + 25)) {
    return 0;
  }
  uint64_t v3 = (const __int16 *)((char *)a2 + 16);
  uint64_t v4 = (int16x8_t *)*((void *)this + 7);
  int16x8_t v5 = vld1q_dup_s16(v3);
  for (int i = 1; ; i -= 8)
  {
    uint16x8_t v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_23436BBD0);
    v7.i16[0] = vmaxvq_u16(v7);
    if (v7.i32[0]) {
      break;
    }
    ++v4;
    if (!--v2) {
      return 0;
    }
  }
  uint64_t v8 = v7.u16[0] - i;
  if ((int)v8 >= *((unsigned __int16 *)this + 24)) {
    return 0;
  }
  if (*((void *)this + 3) <= (unint64_t)v8)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 5) + 8 * v8);
}

uint64_t re::ecs2::EntityComponentCollection::getOrAdd(re::ecs2::EntityComponentCollection *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t result = re::ecs2::EntityComponentCollection::get(this, a2);
  if (!result)
  {
    return re::ecs2::EntityComponentCollection::add(this, a2);
  }
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t result = (uint64_t *)re::EventBus::getEventInfo<REComponentWillDeactivateEvent>((uint64_t)a1);
  if (result)
  {
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 0x10uLL, a4);
  }
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillRemoveEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t result = (uint64_t *)re::EventBus::getEventInfo<REComponentWillRemoveEvent>((uint64_t)a1);
  if (result)
  {
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 0x10uLL, a4);
  }
  return result;
}

uint64_t re::EventBus::getEventInfo<REComponentWillDeactivateEvent>(uint64_t a1)
{
  uint64_t Type = re::EventBus::getTypeId<REComponentWillDeactivateEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

uint64_t re::EventBus::getEventInfo<REComponentWillRemoveEvent>(uint64_t a1)
{
  uint64_t v4 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), (uint64_t *)&v4);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

uint64_t *re::ecs2::EntityFactory::instance(re::ecs2::EntityFactory *this)
{
  {
    re::ecs2::EntityFactory::instance(void)::s_instance = 0;
    re::ecs2::EntityFactory::init((re::Allocator *)&re::ecs2::EntityFactory::instance(void)::s_instance, v2);
  }
  return &re::ecs2::EntityFactory::instance(void)::s_instance;
}

re::Allocator *re::ecs2::EntityFactory::init(re::Allocator *this, const char *a2)
{
  if (!*(void *)this)
  {
    uint64_t v2 = this;
    re::Defaults::BOOLValue((re::Defaults *)"enableEntityDebugAllocator", a2, v13);
    if (v13[0]) {
      BOOL v4 = v13[1] == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      int16x8_t v5 = (re *)re::Allocator::useMallocAllocator(v3);
      char v6 = (char)v5;
      uint16x8_t v7 = *(uint64_t (**)(void))(*(void *)re::globalAllocators(v5)[2] + 32);
      if (v6)
      {
        uint64_t v8 = (re::Allocator *)v7();
        this = re::Allocator::Allocator(v8, "Entity", 1);
        *(void *)this = &unk_26E6DEC70;
      }
      else
      {
        uint64_t v8 = (re::Allocator *)v7();
      }
    }
    else
    {
      long long v9 = *re::ecsCoreLogObjects(v3);
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "enableEntityDebugAllocator = true: Using PageDebugAllocator", v12, 2u);
      }
      uint64_t v11 = re::globalAllocators((re *)v10);
      uint64_t v8 = (re::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11[2] + 32))(v11[2], 72, 8);
      this = re::PageDebugAllocator::PageDebugAllocator(v8, "Entity", 1, 0x400uLL);
    }
    *(void *)uint64_t v2 = v8;
  }
  return this;
}

re *re::ecs2::EntityFactory::deinit(re *this)
{
  unint64_t v1 = *(void (****)(void))this;
  if (*(void *)this)
  {
    uint64_t v2 = this;
    uint64_t v3 = re::globalAllocators(this)[2];
    (**v1)(v1);
    this = (re *)(*(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40))(v3, v1);
    *(void *)uint64_t v2 = 0;
  }
  return this;
}

re::ecs2::Entity *re::ecs2::EntityFactory::make@<X0>(re::ecs2::EntityFactory *this@<X0>, unint64_t a2@<X1>, re::ecs2::Entity **a3@<X8>)
{
  int16x8_t v5 = (re::ecs2::Entity *)(*(uint64_t (**)(void, uint64_t, void))(**(void **)this + 32))(*(void *)this, 384, 0);
  uuid_generate_random((unsigned __int8 *)v7);
  uint64_t result = re::ecs2::Entity::Entity(v5, (v7[1] + (v7[0] << 6) + (v7[0] >> 2) - 0x61C8864680B583E9) ^ v7[0], a2);
  *a3 = v5;
  return result;
}

void re::make::shared::object<re::ecs2::RealityRendererSceneGroup>(re *a1@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  uint64_t v3 = re::globalAllocators(a1);
  BOOL v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 32, 8);
  ArcSharedObject::ArcSharedObject(v4, 0);
  *((void *)v4 + 3) = 0;
  *(void *)BOOL v4 = &unk_26E70C438;
  *a2 = v4;
}

void re::ecs2::RealityRendererSceneGroup::~RealityRendererSceneGroup(re::ecs2::RealityRendererSceneGroup *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t *re::internal::EntityHandleHookupTable::registerEntity(_anonymous_namespace_ *this, StringID *a2, uint64_t a3, uint64_t *a4)
{
  v10[5] = *MEMORY[0x263EF8340];
  uint64_t v8 = a3;
  long long v9 = a2;
  v10[4] = 0;
  v10[0] = 0;
  if (a4) {
    std::unique_ptr<re::internal::EntityHandleHookupTable,std::function<void ()(re::internal::EntityHandleHookupTable*)>>::operator=[abi:nn180100](v10, a4);
  }
  uint64_t v7 = *((void *)this + 2);
  re::DynamicArray<re::internal::EntityHandleHookupData>::add(this, &v9);
  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long &>((uint64_t)this + 40, &v8, &v7);
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)this + 88, a2 + 17, &v7);
  return std::unique_ptr<re::internal::EntityHandleHookupTable,std::function<void ()(re::internal::EntityHandleHookupTable*)>>::~unique_ptr[abi:nn180100](v10);
}

uint64_t *std::unique_ptr<re::internal::EntityHandleHookupTable,std::function<void ()(re::internal::EntityHandleHookupTable*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::internal::EntityHandleHookupTable *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::operator=[abi:nn180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t re::DynamicArray<re::internal::EntityHandleHookupData>::add(_anonymous_namespace_ *this, void *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::internal::EntityHandleHookupData>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = (void *)(*((void *)this + 4) + 48 * v4);
  *uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  v5[1] = v6;
  uint64_t result = std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::__value_func[abi:nn180100]((uint64_t)(v5 + 2), (uint64_t)(a2 + 2));
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<unsigned long &>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 32 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::internal::EntityHandleHookupTable::lookupEntity(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  uint64_t v46 = a2;
  size_t v47 = a3;
  uint64_t v6 = &a2[a3];
  unint64_t v7 = (char *)memchr(a2, 58, a3);
  if (v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = v8 - a2;
  uint64_t v10 = (unsigned __int8 *)re::Slice<char>::range(&v46, 0, v9);
  uint64_t v12 = (const char *)v10;
  size_t v13 = v11;
  long long v44 = (const char *)v10;
  size_t v45 = v11;
  if (v11 >= 2
    && *v10 == 35
    && ((char)v10[1] & 0x80000000) == 0
    && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v10[1] + 60) & 0x400) != 0)
  {
    uint64_t v10 = (unsigned __int8 *)re::Slice<char>::range(&v44, 1uLL, v11);
    int v15 = v10;
    uint64_t v16 = &v10[v14];
    if (!v14) {
      goto LABEL_19;
    }
    while (*v10 == 48)
    {
      ++v10;
      if (!--v14)
      {
        uint64_t v10 = v16;
        break;
      }
    }
    if (v10 == v16)
    {
LABEL_19:
      uint64_t v10 = v16;
    }
    else if (*v10 - 48 < 0xA)
    {
      uint64_t v10 = std::__itoa::__traits<unsigned long long>::__read[abi:nn180100](v10, v16, &v56, v49);
      if (v10 != v16 && *v10 - 48 <= 9 || __CFADD__((void)v56, *(void *)v49)) {
        goto LABEL_23;
      }
      uint64_t v17 = v56 + *(void *)v49;
LABEL_22:
      if (v16 != v10) {
        goto LABEL_23;
      }
      LOBYTE(v41) = 1;
      uint64_t v42 = v17;
      uint64_t v10 = (unsigned __int8 *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 40, &v42);
      if (v10)
      {
        unint64_t v25 = *(void *)v10;
        unint64_t v26 = *(void *)(a1 + 16);
        if (v26 <= *(void *)v10) {
          goto LABEL_61;
        }
        uint64_t v34 = *(void *)(a1 + 32);
        if (v9 == a3)
        {
          if (v34) {
            return *(void *)(v34 + 48 * v25);
          }
          goto LABEL_23;
        }
        if (v34)
        {
          uint64_t v35 = v34 + 48 * v25;
          uint64_t v37 = *(void *)(v35 + 8);
          long long v36 = (void *)(v35 + 8);
          if (v37)
          {
            uint64_t v38 = re::Slice<char>::range(&v46, v9 + 1, v47);
            return re::internal::EntityHandleHookupTable::lookupEntity(*v36, v38, v39);
          }
        }
      }
      else if (v9 == a3)
      {
        goto LABEL_23;
      }
      return 0;
    }
    if (v10 == v15)
    {
LABEL_23:
      uint64_t v12 = v44;
      size_t v13 = v45;
      goto LABEL_24;
    }
    uint64_t v17 = 0;
    goto LABEL_22;
  }
LABEL_24:
  uint64_t v18 = (char *)&v42 + 1;
  if (v42) {
    uint64_t v18 = v43;
  }
  if (v18)
  {
    uint64_t v19 = (char)*v18;
    if (*v18)
    {
      unint64_t v20 = (v42 & 1) != 0 ? (uint64_t *)(v43 + 1) : (uint64_t *)((char *)&v42 + 2);
      char v21 = *(unsigned char *)v20;
      if (*(unsigned char *)v20)
      {
        uint64_t v22 = (unsigned __int8 *)v20 + 1;
        do
        {
          uint64_t v19 = 31 * v19 + v21;
          int v23 = *v22++;
          char v21 = v23;
        }
        while (v23);
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(void *)&long long v56 = 2 * v19;
  *((void *)&v56 + 1) = v18;
  uint64_t v24 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 88, &v56);
  re::StringID::destroyString((re::StringID *)&v56);
  if (!v24) {
    goto LABEL_44;
  }
  unint64_t v25 = *v24;
  unint64_t v26 = *(void *)(a1 + 16);
  if (v26 <= v25)
  {
    uint64_t v48 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    __int16 v50 = 1024;
    int v51 = 789;
    __int16 v52 = 2048;
    unint64_t v53 = v25;
    __int16 v54 = 2048;
    unint64_t v55 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    uint64_t v48 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v56 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v49 = 136315906;
    *(void *)&v49[4] = "operator[]";
    __int16 v50 = 1024;
    int v51 = 789;
    __int16 v52 = 2048;
    unint64_t v53 = v25;
    __int16 v54 = 2048;
    unint64_t v55 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v27 = *(void *)(a1 + 32);
  if (v9 != a3)
  {
    if (v27)
    {
      uint64_t v29 = v27 + 48 * v25;
      uint64_t v31 = *(void *)(v29 + 8);
      uint64_t v30 = (void *)(v29 + 8);
      if (v31)
      {
        uint64_t v32 = re::Slice<char>::range(&v46, v9 + 1, v47);
        uint64_t v28 = re::internal::EntityHandleHookupTable::lookupEntity(*v30, v32, v33);
        goto LABEL_45;
      }
    }
LABEL_44:
    uint64_t v28 = 0;
    goto LABEL_45;
  }
  if (!v27) {
    goto LABEL_44;
  }
  uint64_t v28 = *(void *)(v27 + 48 * v25);
LABEL_45:
  if (v41 && (v42 & 1) != 0) {
    (*(void (**)(void))(*(void *)v41 + 40))();
  }
  return v28;
}

void *re::internal::EntityHandleHookupTable::hookupHandles(re::internal::EntityHandleHookupTable *this, const re::IntrospectionBase **a2)
{
  unsigned char v6[4] = *MEMORY[0x263EF8340];
  v6[0] = &unk_26E70C480;
  v6[1] = this;
  uint64_t v6[3] = v6;
  uint64_t v3 = (*((uint64_t (**)(const re::IntrospectionBase **))*a2 + 5))(a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  re::IntrospectionWalker::walk(v4, a2, (uint64_t)v6);
  return std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](v6);
}

re::internal::EntityHandleHookupTable *re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable(re::internal::EntityHandleHookupTable *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = this;
    uint64_t v3 = 48 * v1;
    uint64_t v4 = (re::internal::EntityHandleHookupTable **)(*((void *)this + 4) + 8);
    do
    {
      this = *v4;
      if (*v4) {
        this = (re::internal::EntityHandleHookupTable *)re::internal::EntityHandleHookupTable::hookupHandlesForAllEntitiesInTable(this);
      }
      v4 += 6;
      v3 -= 48;
    }
    while (v3);
    uint64_t v5 = *((void *)v2 + 2);
    if (v5)
    {
      uint64_t v6 = *((void *)v2 + 4);
      uint64_t v7 = v6 + 48 * v5;
      do
      {
        uint64_t v8 = *(void *)(*(void *)v6 + 56);
        if (v8)
        {
          unint64_t v9 = *(const re::IntrospectionBase ****)(*(void *)v6 + 72);
          uint64_t v10 = 8 * v8;
          do
          {
            unint64_t v11 = *v9++;
            this = (re::internal::EntityHandleHookupTable *)re::internal::EntityHandleHookupTable::hookupHandles(v2, v11);
            v10 -= 8;
          }
          while (v10);
        }
        v6 += 48;
      }
      while (v6 != v7);
    }
  }
  return this;
}

uint64_t re::internal::entityHandleSerialize(uint64_t a1, int a2, id *this, re::DynamicString *a4)
{
  if (re::ecs2::EntityHandle::isNull(this)) {
    goto LABEL_2;
  }
  unint64_t v9 = (const re::DynamicString *)this[2];
  if (v9)
  {
    re::DynamicString::DynamicString((re::DynamicString *)&v15, v9);
    re::DynamicString::operator=(a4, (re::DynamicString *)&v15);
    if (v15 && (v16 & 1) != 0) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    return 1;
  }
  id WeakRetained = (const char **)objc_loadWeakRetained(this);
  if (!WeakRetained)
  {
LABEL_2:
    int v15 = "";
    size_t v16 = 0;
    re::DynamicString::operator=(a4, (uint64_t)&v15);
    return 1;
  }
  unint64_t v11 = WeakRetained;
  if (a1
    && (uint64_t v12 = *(uint64_t (***)(const char **, re::DynamicString *))(a1 + 8)) != 0
    && (size_t v13 = *v12) != 0)
  {
    uint64_t v7 = v13(WeakRetained - 1, a4);
  }
  else
  {
    uint64_t v14 = WeakRetained[34];
    int v15 = v14;
    size_t v16 = strlen(v14);
    re::DynamicString::operator=(a4, (uint64_t)&v15);
    uint64_t v7 = 1;
  }

  return v7;
}

uint64_t re::internal::entityHandleDeserialize(re::Allocator *a1, uint64_t a2, int a3, id *this, char *a5)
{
  void (*v7)(id *__return_ptr, char *);
  id location[3];

  uint64_t v6 = *(void *)(a2 + 8);
  if (v6 && (uint64_t v7 = *(void (**)(id *__return_ptr, char *))(v6 + 8)) != 0)
  {
    v7(location, a5);
    re::ecs2::EntityHandle::operator=(this, (uint64_t)location);
    re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)location);
    objc_destroyWeak(location);
  }
  else
  {
    re::ecs2::EntityHandle::setString((re::ecs2::EntityHandle *)this, a5, a1);
  }
  return 1;
}

uint64_t re::internal::entityHandleDeepCopy(re::Allocator *a1, uint64_t a2, int a3, id *location, re::ecs2::EntityHandle *this)
{
  *(void *)&v14[15] = *MEMORY[0x263EF8340];
  if (a2
    && (uint64_t v7 = *(void *)(a2 + 8)) != 0
    && *(void *)(v7 + 24)
    && (unint64_t v11 = re::ecs2::EntityHandle::resolve((uint64_t)location, *(char **)(v7 + 16)),
        (unint64_t v9 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(void *)(v7 + 24), (uint64_t *)&v11)) != 0))
  {
    *(void *)uint64_t v14 = 0;
    uint64_t v13 = 0;
    *(void *)&v14[7] = 0;
    char v12 = 35;
    std::__itoa::__traits_base<unsigned long long,void>::__convert[abi:nn180100](&v13, *v9);
    re::ecs2::EntityHandle::setString(this, &v12, a1);
  }
  else
  {
    re::ecs2::EntityHandle::operator=(this, location);
  }
  return 1;
}

void *std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::operator=[abi:nn180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::operator=[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *re::DynamicArray<re::internal::EntityHandleHookupData>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::internal::EntityHandleHookupData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = (uint64_t *)(v8 + 48 * v9);
        uint64_t v11 = (uint64_t)(v7 + 2);
        char v12 = (uint64_t *)(v8 + 8);
        do
        {
          *(void *)(v11 - re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(v12 - 1);
          uint64_t v13 = *v12;
          uint64_t *v12 = 0;
          *(void *)(v11 - 8) = v13;
          std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::__value_func[abi:nn180100](v11, (uint64_t)(v12 + 1));
          std::unique_ptr<re::internal::EntityHandleHookupTable,std::function<void ()(re::internal::EntityHandleHookupTable*)>>::~unique_ptr[abi:nn180100](v12);
          v11 += 48;
          uint64_t v14 = v12 + 5;
          v12 += 6;
        }
        while (v14 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(re::internal::EntityHandleHookupTable *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v3;
      *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  }
  return a1;
}

void std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
}

void *std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26E70C480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E70C480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 16) == 11
    && *(uint64_t (**)(uint64_t, int, id *, re::DynamicString *))(a2 + 72) == re::internal::entityHandleSerialize)
  {
    uint64_t v3 = *a3;
    uint64_t v4 = *(const re::DynamicString **)(*a3 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(result + 8);
      re::DynamicString::DynamicString((re::DynamicString *)&v13, v4);
      uint64_t result = (uint64_t)v13;
      if (v14) {
        unint64_t v6 = v14 >> 1;
      }
      else {
        unint64_t v6 = v14 >> 1;
      }
      if (v13 && (v14 & 1) != 0) {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v13 + 40))();
      }
      if (v6)
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v13, *(const re::DynamicString **)(v3 + 16));
        if (v14) {
          unint64_t v7 = v15;
        }
        else {
          unint64_t v7 = (char *)&v14 + 1;
        }
        size_t v8 = strlen(v7);
        uint64_t v9 = re::internal::EntityHandleHookupTable::lookupEntity(v5, v7, v8);
        uint64_t v10 = v13;
        if (v13 && (v14 & 1) != 0) {
          uint64_t v10 = (re *)(*(uint64_t (**)(void))(*(void *)v13 + 40))();
        }
        if (v9)
        {
          re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v3);
          uint64_t result = (uint64_t)objc_storeWeak((id *)v3, (id)(v9 + 8));
          *(void *)(v3 + 8) = *(void *)(v9 + 296);
        }
        else
        {
          uint64_t v11 = *re::ecsCoreLogObjects(v10);
          uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          if (result)
          {
            re::DynamicString::DynamicString((re::DynamicString *)&v13, *(const re::DynamicString **)(v3 + 16));
            if (v14) {
              char v12 = v15;
            }
            else {
              char v12 = (char *)&v14 + 1;
            }
            *(_DWORD *)float32x4_t buf = 136315138;
            uint64_t v17 = v12;
            _os_log_impl(&dword_233120000, v11, OS_LOG_TYPE_DEFAULT, "EntityHandle points to unknown entity '%s'", buf, 0xCu);
            uint64_t result = (uint64_t)v13;
            if (v13)
            {
              if (v14) {
                return (*(uint64_t (**)(void))(*(void *)v13 + 40))();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0,std::allocator<re::internal::EntityHandleHookupTable::hookupHandles(re::ecs2::Component *)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

void re::ecs2::CustomSystem::~CustomSystem(re::ecs2::CustomSystem *this)
{
  uint64_t v2 = (const void *)*((void *)this + 13);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 14);
  if (v3) {
    _Block_release(v3);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 19);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::CustomSystem::~CustomSystem(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::CustomSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v14);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v13, 3071, a1);
  if ((a2 & 0x100000000) == 0)
  {
    if (*(void *)(a1 + 112))
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 120))(*(void *)(a1 + 40));
      if (v7)
      {
        size_t v8 = (id *)v6;
        uint64_t v9 = 8 * v7;
        do
        {
          id WeakRetained = objc_loadWeakRetained(v8);
          if (WeakRetained)
          {
            uint64_t v11 = WeakRetained;
            re::ecs2::CustomSystem::update(a1, (unint64_t)WeakRetained - 8, a2, a3);
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
    }
    else
    {
      (*(void (**)(void, void, float))(a1 + 128))(*(void *)(a1 + 120), *(void *)(a1 + 40), *(float *)&a2);
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v13);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)126>::end((uint64_t)v14);
}

uint64_t re::ecs2::CustomSystem::update(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4 = *(float *)&a3;
  void v18[2] = a3;
  v18[3] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v18);
  if (*(void *)(a1 + 112))
  {
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 3071, a1);
    if (!*(unsigned char *)(a2 + 50))
    {
      if (*(void *)(a1 + 152))
      {
        unint64_t v7 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
        uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 160) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(a1 + 176)));
        if (v8 != 0x7FFFFFFF)
        {
          uint64_t v9 = *(void *)(a1 + 168);
          if (*(void *)(v9 + 32 * v8 + 16) != a2)
          {
            uint64_t v10 = v8;
            do
              uint64_t v10 = *(_DWORD *)(v9 + 32 * v10 + 8) & 0x7FFFFFFF;
            while (v10 != 0x7FFFFFFF && *(void *)(v9 + 32 * v10 + 16) != a2);
          }
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 112) + 16))();
    }
  }
  else
  {
    float v11 = v4;
    char v12 = *(const re::ecs2::ComponentTypeBase **)(a1 + 144);
    if (v12)
    {
      uint64_t v13 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), v12);
      uint64_t v14 = *(void *)(v13 + 24);
      if (v14) {
        uint64_t v15 = *(void *)(v13 + 40);
      }
      else {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 3071, a1);
    (*(void (**)(void, unint64_t, uint64_t, uint64_t, float))(a1 + 136))(*(void *)(a1 + 120), a2, v15, v14, v11);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)126>::end((uint64_t)v18);
}

void *re::ecs2::CustomSystem::setTaskOptionsType(void *result, int a2)
{
  if (*((unsigned __int8 *)result + 200) != a2)
  {
    char v2 = a2;
    uint64_t v3 = result;
    if (!a2)
    {
      float v4 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)result[5] + 152))(result[5]);
      uint64_t result = re::ecs2::System::setTaskOptions(v3, v4);
    }
    *((unsigned char *)v3 + 200) = v2;
  }
  return result;
}

void re::ecs2::CustomSystem::willAddSceneToECSService(re::ecs2::CustomSystem *this, unint64_t a2)
{
  uint64_t v3 = *((void *)this + 13);
  if (v3 && !*(unsigned char *)(a2 + 50))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t, re::ecs2::CustomSystem *))(v3 + 16))(v3, a2, this);
    unint64_t v6 = *((void *)this + 19);
    unint64_t v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    unint64_t v8 = v7 ^ (v7 >> 31);
    if (v6)
    {
      unint64_t v6 = v8 % *((unsigned int *)this + 44);
      uint64_t v9 = *(unsigned int *)(*((void *)this + 20) + 4 * v6);
      if (v9 != 0x7FFFFFFF)
      {
        uint64_t v14 = *((void *)this + 21);
        if (*(void *)(v14 + 32 * v9 + 16) == a2) {
          return;
        }
        while (1)
        {
          uint64_t v9 = *(_DWORD *)(v14 + 32 * v9 + 8) & 0x7FFFFFFF;
          if (v9 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v14 + 32 * v9 + 16) == a2) {
            return;
          }
        }
      }
    }
    uint64_t v10 = *((unsigned int *)this + 47);
    if (v10 == 0x7FFFFFFF)
    {
      uint64_t v10 = *((unsigned int *)this + 46);
      int v11 = v10;
      if (v10 == *((_DWORD *)this + 44))
      {
        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)this + 152, 2 * *((_DWORD *)this + 45));
        LODWORD(v6) = v8 % *((unsigned int *)this + 44);
        int v11 = *((_DWORD *)this + 46);
      }
      *((_DWORD *)this + 46) = v11 + 1;
      uint64_t v12 = *((void *)this + 21);
      int v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
    }
    else
    {
      uint64_t v12 = *((void *)this + 21);
      int v13 = *(_DWORD *)(v12 + 32 * v10 + 8);
      *((_DWORD *)this + 47) = v13 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v12 + 32 * v10 + 8) = v13 | 0x80000000;
    *(_DWORD *)(*((void *)this + 21) + 32 * v10 + 8) = *(_DWORD *)(*((void *)this + 21) + 32 * v10 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 20) + 4 * v6);
    *(void *)(*((void *)this + 21) + 32 * v10) = v8;
    *(void *)(*((void *)this + 21) + 32 * v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = a2;
    *(void *)(*((void *)this + 21) + 32 * v10 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v5;
    *(_DWORD *)(*((void *)this + 20) + 4 * v6) = v10;
    ++*((_DWORD *)this + 45);
    ++*((_DWORD *)this + 48);
  }
}

void re::ecs2::CustomSystem::willRemoveSceneFromECSService(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 104) && !*(unsigned char *)(a2 + 50))
  {
    LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x7FFFFFFF;
    unint64_t v5 = a2 ^ (a2 >> 30);
    if (*(void *)(a1 + 152))
    {
      unint64_t v6 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27));
      uint64_t v7 = *(unsigned int *)(*(void *)(a1 + 160) + 4 * ((v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 176)));
      if (v7 != 0x7FFFFFFF)
      {
        uint64_t v8 = *(void *)(a1 + 168);
        if (*(void *)(v8 + 32 * v7 + 16) == a2)
        {
          LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v7;
        }
        else
        {
          uint64_t v4 = v7;
          while (1)
          {
            uint64_t v4 = *(_DWORD *)(v8 + 32 * v4 + 8) & 0x7FFFFFFF;
            if (v4 == 0x7FFFFFFF) {
              break;
            }
            if (*(void *)(v8 + 32 * v4 + 16) == a2) {
              goto LABEL_13;
            }
          }
          LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0x7FFFFFFF;
        }
      }
    }
LABEL_13:
    CFRelease(*(CFTypeRef *)(*(void *)(a1 + 168) + 32 * v4 + 24));
    if (*(void *)(a1 + 152))
    {
      unint64_t v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v5) ^ ((0xBF58476D1CE4E5B9 * v5) >> 27));
      unint64_t v10 = (v9 ^ (v9 >> 31)) % *(unsigned int *)(a1 + 176);
      uint64_t v11 = *(void *)(a1 + 160);
      uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)(a1 + 168);
        uint64_t v14 = v13 + 32 * v12;
        if (*(void *)(v14 + 16) == a2)
        {
          *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v14 + 8) & 0x7FFFFFFF;
LABEL_20:
          uint64_t v17 = *(void *)(a1 + 168);
          uint64_t v18 = v17 + 32 * v12;
          int v21 = *(_DWORD *)(v18 + 8);
          unint64_t v20 = (int *)(v18 + 8);
          int v19 = v21;
          if (v21 < 0)
          {
            *unint64_t v20 = v19 & 0x7FFFFFFF;
            uint64_t v17 = *(void *)(a1 + 168);
            int v19 = *(_DWORD *)(v17 + 32 * v12 + 8);
          }
          int v22 = *(_DWORD *)(a1 + 192);
          *(_DWORD *)(v17 + 32 * v12 + 8) = *(_DWORD *)(a1 + 188) | v19 & 0x80000000;
          --*(_DWORD *)(a1 + 180);
          *(_DWORD *)(a1 + 188) = v12;
          *(_DWORD *)(a1 + 192) = v22 + 1;
        }
        else
        {
          while (1)
          {
            unsigned int v15 = v12;
            uint64_t v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
            if (v12 == 0x7FFFFFFF) {
              break;
            }
            uint64_t v16 = v13 + 32 * v12;
            if (*(void *)(v16 + 16) == a2)
            {
              *(_DWORD *)(v13 + 32 * v15 + 8) = *(_DWORD *)(v13 + 32 * v15 + 8) & 0x80000000 | *(_DWORD *)(v16 + 8) & 0x7FFFFFFF;
              goto LABEL_20;
            }
          }
        }
      }
    }
  }
}

void *re::ecs2::allocInfo_CustomSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_358, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_358))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92B70, "CustomSystem");
    __cxa_guard_release(&_MergedGlobals_358);
  }
  return &unk_26AF92B70;
}

void re::ecs2::initInfo_CustomSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x31FFC470425E4A40;
  v5[1] = "CustomSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_CustomSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CustomSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CustomSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CustomSystem>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::CustomSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::CustomSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 2, 1);
  *(void *)uint64_t v3 = &unk_26E70C500;
  *(_OWORD *)(v3 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_DWORD *)(v3 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 188) = 0x7FFFFFFFLL;
  *(unsigned char *)(v3 + 200) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::CustomSystem>(int a1, int a2, re::ecs2::CustomSystem *this)
{
}

double re::internal::defaultConstructV2<re::ecs2::CustomSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 2, 1);
  *(void *)uint64_t v1 = &unk_26E70C500;
  *(_OWORD *)(v1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_DWORD *)(v1 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 188) = 0x7FFFFFFFLL;
  *(unsigned char *)(v1 + 200) = 0;
  return result;
}

uint64_t re::ecs2::CustomSystem::typeInfo(re::ecs2::CustomSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CustomSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CustomSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CustomSystem>, 0);
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)126>::end(uint64_t result)
{
  if (*(void *)result && *(void *)(*(void *)result + 152))
  {
    uint64_t v1 = (void *)result;
    double result = mach_absolute_time();
    uint64_t v2 = *v1;
    uint64_t v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      uint64_t v4 = result - v1[1];
      uint64_t v5 = v3[508].u64[0];
      if (v5 >= v4) {
        uint64_t v5 = result - v1[1];
      }
      v3[508].i64[0] = v5;
      unint64_t v6 = v3[508].u64[1];
      if (v6 <= v4) {
        unint64_t v6 = v4;
      }
      v3[508].i64[1] = v6;
      int64x2_t v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[509] = vaddq_s64(v3[509], v7);
      *(unsigned char *)(v2 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    }
    void *v1 = 0;
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::CustomSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

re::ecs2::AnchorComponent *re::ecs2::initECSCore(re::ecs2 *this)
{
  uint64_t v1 = re::ecs2::ComponentTypeRegistry::instance(this);
  re::ecs2::ComponentTypeRegistry::init((os_unfair_lock_s *)v1);
  uint64_t v3 = re::ecs2::CustomSystemRegistry::instance(v2);
  re::ecs2::CustomSystemRegistry::init((os_unfair_lock_s *)v3, 0);
  uint64_t v5 = re::ecs2::EntityFactory::instance(v4);
  double result = re::ecs2::EntityFactory::init((re::Allocator *)v5, v6);
  if (!re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    uint64_t SyncInfo = re::ecs2::AnchorComponent::makeSyncInfo(result);
    double result = (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(SyncInfo);
  }
  if (!re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
    double result = (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::initComponentType(0);
  }
  if (!re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) {
    double result = (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(0);
  }
  if (!re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    return (re::ecs2::AnchorComponent *)re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(0);
  }
  return result;
}

void re::ecs2::deinitECSCore(re::ecs2 *this)
{
  if (re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) {
    this = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(this);
  }
  if (re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
    this = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::deinitComponentType(this);
  }
  if (re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) {
    this = re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(this);
  }
  if (re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) {
    this = re::ecs2::ComponentImpl<re::ecs2::CoordinateSpaceDefinitionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::deinitComponentType(this);
  }
  uint64_t v1 = re::ecs2::EntityFactory::instance(this);
  uint64_t v2 = re::ecs2::EntityFactory::deinit((re *)v1);
  uint64_t v3 = re::ecs2::CustomSystemRegistry::instance(v2);
  re::ecs2::CustomSystemRegistry::deinit((os_unfair_lock_s *)v3);
  uint64_t v5 = re::ecs2::ComponentTypeRegistry::instance(v4);
  re::ecs2::ComponentTypeRegistry::deinit((re::ecs2::ComponentTypeRegistry *)v5);
}

void *re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(void *a1)
{
  *a1 = &unk_26E70C608;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(a1 + 1));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  return a1;
}

void re::ecs2::SceneCollection::~SceneCollection(re::ecs2::SceneCollection *this)
{
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(this);
  JUMPOUT(0x237DBCBD0);
}

re::ecs2::Entity *re::ecs2::SceneCollection::willClear(re::ecs2::Entity *this)
{
  if (*((void *)this + 3))
  {
    uint64_t v1 = this;
    unint64_t v2 = 0;
    do
      this = re::ecs2::Scene::setECSService(*(re::ecs2::Scene **)(*((void *)v1 + 5) + 8 * v2++), 0);
    while (v2 < *((void *)v1 + 3));
  }
  return this;
}

re::ecs2::Entity *re::ecs2::SceneCollection::willInsert(uint64_t a1, uint64_t a2, re::ecs2::Scene **a3)
{
  return re::ecs2::Scene::setECSService(*a3, *(re::ecs2::Entity **)(a1 + 48));
}

re::ecs2::Entity *re::ecs2::SceneCollection::willRemoveAt(uint64_t a1, uint64_t a2, re::ecs2::Scene **a3)
{
  return re::ecs2::Scene::setECSService(*a3, 0);
}

re::ecs2::Entity *re::ecs2::SceneCollection::willSet(uint64_t a1, unint64_t a2, re::ecs2::Scene **a3)
{
  uint64_t v5 = (re::ecs2::Scene **)re::ecs2::EntityComponentCollection::operator[](a1, a2);
  re::ecs2::Scene::setECSService(*v5, 0);
  unint64_t v6 = *a3;
  int64x2_t v7 = *(re::ecs2::Entity **)(a1 + 48);
  return re::ecs2::Scene::setECSService(v6, v7);
}

void re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(void *a1)
{
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(a1);
  JUMPOUT(0x237DBCBD0);
}

re::Allocator *re::ecs2::ComponentTypeBase::makeAllocator(re::ecs2::ComponentTypeBase *this, const char *a2)
{
  uint64_t v4 = re::Allocator::useMallocAllocator(this);
  if (v4)
  {
    uint64_t v5 = re::globalAllocators((re *)v4);
    unint64_t v6 = (re::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5[2] + 32))(v5[2], 24, 8);
    *(void *)re::Allocator::Allocator(v6, (const char *)this, 1) = &unk_26E6DEC70;
  }
  else
  {
    {
      if (v4)
      {
        re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::$_0::operator()(v4, v12);
      }
    }
    v13[0] = 0;
    v13[1] = "";
    BOOL v7 = re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey((uint64_t)&re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::types, v13);
    re::StringID::destroyString((re::StringID *)v13);
    uint64_t v9 = re::globalAllocators(v8)[2];
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 32);
    if (v7)
    {
      unint64_t v6 = (re::Allocator *)v10(v9, 72);
      re::PageDebugAllocator::PageDebugAllocator(v6, (const char *)this, 1, 0x400uLL);
    }
    else
    {
      unint64_t v6 = (re::Allocator *)v10(v9, 240);
    }
  }
  return v6;
}

void re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::$_0::operator()(uint64_t a1, const char *a2)
{
  dword_26879FAF0 = 0;
  re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::types = 0u;
  unk_26879FAE0 = 0u;
  *(void *)algn_26879FAF4 = 0x7FFFFFFFLL;
  re::Defaults::stringValue((re::Defaults *)"DebugComponentPools", a2, (uint64_t)v15);
  if (v15[0])
  {
    if (v17[0]) {
      unint64_t v2 = (char *)v17[1];
    }
    else {
      unint64_t v2 = (char *)v17 + 1;
    }
    if (v17[0]) {
      size_t v3 = v17[0] >> 1;
    }
    else {
      size_t v3 = LOBYTE(v17[0]) >> 1;
    }
    uint64_t v13 = v2;
    size_t v14 = v3;
    do
    {
      uint64_t v4 = (char *)memchr(v2, 44, v3);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = &v2[v3];
      }
      unint64_t v6 = v5 - v2;
      BOOL v7 = (_anonymous_namespace_ *)re::Slice<char>::range(&v13, 0, v6);
      size_t v9 = v8;
      v12[0] = 0;
      v12[1] = (uint64_t)"";
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)&re::ecs2::ComponentTypeBase::makeAllocator(char const*,unsigned long)::types, v12);
      re::StringID::destroyString((re::StringID *)v12);
      if (v6 == v3) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = v6 + 1;
      }
      unint64_t v2 = (char *)re::Slice<char>::range(&v13, v10, v14);
      size_t v3 = v11;
      uint64_t v13 = v2;
      size_t v14 = v11;
    }
    while (v11);
    if (v15[0] && v16 && (v17[0] & 1) != 0) {
      (*(void (**)(void))(*(void *)v16 + 40))();
    }
  }
}

BOOL re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(uint64_t a1, void *a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 24);
  uint64_t v3 = 0x7FFFFFFFLL;
  if (v2)
  {
    unint64_t v5 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 8)
                         + 4
                         * (((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
                          % v2));
    if (v6 != 0x7FFFFFFF)
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v3 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((void *)(v7 + 24 * v6 + 8), a2))
      {
        uint64_t v6 = *(_DWORD *)(v7 + 24 * v6) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF) {
          return v3 != 0x7FFFFFFF;
        }
      }
      uint64_t v3 = v6;
    }
  }
  return v3 != 0x7FFFFFFF;
}

void *re::ecs2::Component::markDirty(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = *(void *)(v2 + 24);
    }
    while (v2);
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      unint64_t v5 = (const void *)(*(uint64_t (**)(void *))(*this + 40))(this);
      uint64_t v6 = *(re::EventBus **)(v4 + 288);
      v8[0] = v1[2];
      v8[1] = (uint64_t)v5;
      uint64_t v7 = re::EventBus::getTypeId<REComponentDidChangeEvent>();
      this = (void *)re::EventBus::publish(v6, v8[0], v7, (uint64_t)v8, 0x10uLL, v5);
    }
  }
  *((unsigned char *)v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  return this;
}

uint64_t re::ecs2::Component::enqueueMarkDirty(uint64_t this)
{
  if (!*(unsigned char *)(this + 24))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(void *)(this + 16);
    if (v2)
    {
      do
      {
        uint64_t v3 = v2;
        uint64_t v2 = *(void *)(v2 + 24);
      }
      while (v2);
      uint64_t v4 = *(void *)(v3 + 16);
      if (v4)
      {
        this = *(void *)(v4 + 56);
        if (this)
        {
          this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)this + 192))(this, v1);
          *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::Component::isExcludedFromRealityFile(re::ecs2::Component *this)
{
  return (*(unsigned __int8 *)((*(uint64_t (**)(re::ecs2::Component *))(*(void *)this + 40))(this) + 40) >> 1) & 1;
}

uint64_t re::ecs2::Component::isIncludedInRealityFile(re::ecs2::Component *this)
{
  return (*(unsigned __int8 *)((*(uint64_t (**)(re::ecs2::Component *))(*(void *)this + 40))(this) + 40) >> 2) & 1;
}

uint64_t re::ecs2::Component::adjustedIntroReleaseVersion@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  *a2 = 0;
  return result;
}

void *re::ecs2::allocInfo_Component(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_359, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_359))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92C00, "Component");
    __cxa_guard_release(&_MergedGlobals_359);
  }
  return &unk_26AF92C00;
}

void re::ecs2::initInfo_Component(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v8[0] = 0x6DAE480279BALL;
  v8[1] = "Component";
  re::StringID::destroyString((re::StringID *)v8);
  *((_OWORD *)this + 2) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92BF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF92BF8);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 16, 8);
      *(_DWORD *)uint64_t v6 = 2;
      *(void *)(v6 + 8) = 0;
      qword_26AF92BF0 = v6;
      __cxa_guard_release(&qword_26AF92BF8);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((void *)this + 8) = &qword_26AF92BF0;
  re::IntrospectionRegistry::add(this, v3);
  long long v7 = v9;
}

uint64_t re::ecs2::introspect_Component(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Component", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Component, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Component, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Component>, this);
}

void *re::ecs2::allocInfo_SceneComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_360, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_360))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92C98, "SceneComponent");
    __cxa_guard_release(&_MergedGlobals_360);
  }
  return &unk_26AF92C98;
}

void re::ecs2::initInfo_SceneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x79292DCDFFD39BE2;
  v13[1] = "SceneComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92C80, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF92C80);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92C88 = v7;
      size_t v8 = re::introspectionAllocator((re *)v7);
      unint64_t v10 = re::introspect_BOOL((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "requiresAnchoring";
      *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      *(void *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92C90 = v11;
      __cxa_guard_release(&qword_26AF92C80);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 2;
  *((void *)this + 8) = &qword_26AF92C88;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::SceneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::SceneComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E6460;
  *(_WORD *)(v3 + 25) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::SceneComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::SceneComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E6460;
  *(_WORD *)(v1 + 25) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::SceneComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SceneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneComponent>, this);
}

re::ecs2::Scene *re::ecs2::Scene::Scene(re::ecs2::Scene *this, const StringID *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26E70C678;
  uint64_t v4 = re::StringID::StringID((re::ecs2::Scene *)((char *)this + 32), a2);
  *((_WORD *)this + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((unsigned char *)this + 50) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 12re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(void *)((char *)this + 188) = 0x7FFFFFFFLL;
  *((void *)this + 25) = this;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((_DWORD *)this + 58) = 0;
  *((void *)this + 35) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  re::make::shared::object<re::EventBus>(v4, (void *)this + 36);
  *((void *)this + 37) = 0;
  *((unsigned char *)this + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 39) = 0;
  *((unsigned char *)this + 320) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 47) = 0;
  uint64_t v6 = re::ecs2::EntityFactory::instance(v5);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v6, 4uLL, &v13);
  uint64_t v7 = *((void *)this + 13);
  size_t v8 = v13;
  *((void *)this + 13) = v13;
  if (v7)
  {

    size_t v8 = (re::ecs2::Entity *)*((void *)this + 13);
  }
  *((void *)v8 + 2) = this;
  *((_DWORD *)v8 + 72) |= 0x80u;
  re::ecs2::Entity::updateSwiftObjectOwnership(v8);
  re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*((void *)this + 13) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType) {
    re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*((void *)this + 13) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  uint64_t v9 = *((void *)this + 13);
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v13, a2->var1, *(void *)(v9 + 296));
  if (v14) {
    uint64_t v11 = *(const char **)&v15[7];
  }
  else {
    uint64_t v11 = v15;
  }
  v16[0] = 0;
  v16[1] = (uint64_t)"";
  re::StringID::operator=((unint64_t *)(v9 + 272), v16);
  re::StringID::destroyString((re::StringID *)v16);
  if (v13 && (v14 & 1) != 0) {
    (*(void (**)(void))(*(void *)v13 + 40))();
  }
  *(_DWORD *)(*((void *)this + 13) + 288) |= 0x400u;
  return this;
}

re::ecs2::Scene *re::ecs2::Scene::Scene(re::ecs2::Scene *this, re::ecs2::Entity *a2)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *((void *)this + 3) = 0;
  *(void *)this = &unk_26E70C678;
  uint64_t v4 = (const char *)*((void *)a2 + 35);
  re::DynamicString::rfind((uint64_t)&v22, 95, v20);
  if (v20[0])
  {
    uint64_t v6 = (_anonymous_namespace_ *)re::DynamicString::substr((re::DynamicString *)&v22, 0, v21, (re::DynamicString *)&v17);
    if (v18) {
      uint64_t v7 = *(const char **)&v19[7];
    }
    else {
      uint64_t v7 = v19;
    }
    *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *((void *)this + 5) = "";
    if (v17 && (v18 & 1) != 0) {
      (*(void (**)(void))(*(void *)v17 + 40))();
    }
  }
  else
  {
    *((void *)this + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *((void *)this + 5) = "";
  }
  if (v22 && (v23 & 1) != 0) {
    (*(void (**)(void))(*(void *)v22 + 40))();
  }
  *((_WORD *)this + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((unsigned char *)this + 50) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = a2;
  size_t v8 = (char *)a2 + 8;
  *((void *)this + 15) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(void *)((char *)this + 188) = 0x7FFFFFFFLL;
  *((void *)this + 25) = this;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((_DWORD *)this + 58) = 0;
  *((void *)this + 35) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *((_DWORD *)this + 68) = 0;
  re::make::shared::object<re::EventBus>((re *)v8, (void *)this + 36);
  *((void *)this + 37) = 0;
  *((unsigned char *)this + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 39) = 0;
  *((unsigned char *)this + 320) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 47) = 0;
  uint64_t v9 = (re::ecs2::Entity *)*((void *)this + 13);
  *((void *)v9 + 2) = this;
  re::ecs2::Entity::updateSwiftObjectOwnership(v9);
  uint64_t v10 = *((void *)this + 13);
  if (*(void *)(v10 + 56))
  {
    unint64_t v11 = 0;
    do
    {
      long long v12 = (re::ecs2::Component **)re::ecs2::EntityComponentCollection::operator[](v10 + 32, v11);
      uint64_t v13 = *v12;
      char v14 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)*v12
                                                                                                  + 40))(*v12);
      unsigned int v15 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)this + 200), v14);
      re::ecs2::SceneComponentCollectionBase::add(v15, v13);
      ++v11;
      uint64_t v10 = *((void *)this + 13);
    }
    while (v11 < *(void *)(v10 + 56));
  }
  return this;
}

void re::ecs2::Scene::~Scene(re::ecs2::Scene *this)
{
  uint64_t v2 = *((void *)this + 13);
  (*(void (**)(void))(*(void *)(v2 + 304) + 16))();
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(v2 + 312);
  uint64_t v3 = (re::ecs2::Entity *)*((void *)this + 13);
  *((void *)v3 + 2) = 0;
  re::ecs2::Entity::updateSwiftObjectOwnership(v3);
  re::ecs2::Entity::updateIsActive_Subtree(*((re::ecs2::Entity **)this + 13));
  re::ecs2::SceneComponentTable::clear((uint64_t)this + 200);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 64);
  uint64_t v4 = *((void *)this + 36);
  if (v4)
  {

    *((void *)this + 36) = 0;
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 248);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 208);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 19);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 112);
  uint64_t v5 = *((void *)this + 13);
  if (v5)
  {

    *((void *)this + 13) = 0;
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 64);
  re::StringID::destroyString((re::ecs2::Scene *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::Scene::~Scene(this);
  JUMPOUT(0x237DBCBD0);
}

re::ecs2::Entity *re::ecs2::Scene::setECSService(re::ecs2::Scene *a1, re::ecs2::Entity *a2)
{
  v115[5] = *MEMORY[0x263EF8340];
  uint64_t result = (re::ecs2::Entity *)*((void *)a1 + 7);
  if (result != a2)
  {
    if (result)
    {
      uint64_t v5 = (*(uint64_t (**)(re::ecs2::Entity *))(*(void *)result + 32))(result);
      uint64_t v6 = re::ServiceLocator::serviceOrNull<re::EventBus>(v5);
      if (v6)
      {
        uint64_t v7 = (re::EventBus *)v6;
        re::EventBus::unsubscribe(*((void *)a1 + 36), *((void *)a1 + 41), *((void *)a1 + 42));
        *((void *)a1 + 41) = 0;
        *((void *)a1 + 42) = 0;
        re::EventBus::unsubscribe(*((void *)a1 + 36), *((void *)a1 + 43), *((void *)a1 + 44));
        *((void *)a1 + 43) = 0;
        *((void *)a1 + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
        re::EventBus::unsubscribe(*((void *)a1 + 36), *((void *)a1 + 45), *((void *)a1 + 46));
        *((void *)a1 + 45) = 0;
        *((void *)a1 + 46) = 0;
        long long v105 = a1;
        uint64_t v8 = re::EventBus::getTypeId<RESceneWillRemoveEvent>();
        re::EventBus::publish(v7, (uint64_t)a1, v8, (uint64_t)&v105, 8uLL, 0);
      }
      uint64_t v9 = *((void *)a1 + 13);
      uint64_t v10 = *(void *)(v9 + 328);
      if (v10)
      {
        unint64_t v11 = *(re::ecs2::Entity ***)(v9 + 344);
        uint64_t v12 = 8 * v10;
        do
        {
          if (*((unsigned char *)*v11 + 288)) {
            re::ecs2::Entity::sendDeactivateEvents(*v11, a1);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      uint64_t v109 = 0;
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      long long v105 = 0;
      int v108 = 0;
      uint64_t v13 = *((void *)a1 + 33);
      if (v13)
      {
        char v14 = (void **)*((void *)a1 + 35);
        unsigned int v15 = &v14[v13];
        do
        {
          uint64_t v16 = *v14;
          uint64_t v107 = 0;
          ++v108;
          uint64_t v17 = v16[3];
          if (v17)
          {
            char v18 = (uint64_t *)v16[5];
            uint64_t v19 = 8 * v17;
            do
            {
              float32x4_t v111 = 0;
              float32x4_t v111 = (re::ecs2::Scene *)*v18;
              if (*(unsigned char *)(*((void *)v111 + 2) + 288)) {
                re::DynamicArray<re::TransitionCondition *>::add(&v105, &v111);
              }
              ++v18;
              v19 -= 8;
            }
            while (v19);
          }
          (*(void (**)(void *, re::ecs2::Entity **))(*v16 + 88))(v16, &v105);
          ++v14;
        }
        while (v14 != v15);
        uint64_t v20 = *((void *)a1 + 33);
        if (v20)
        {
          unint64_t v21 = (uint64_t *)*((void *)a1 + 35);
          uint64_t v22 = 8 * v20;
          do
          {
            uint64_t v23 = *v21++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 96))(v23, v23 + 8);
            v22 -= 8;
          }
          while (v22);
        }
      }
      if (*(void *)((*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7)) + 24))
      {
        for (unint64_t i = 0;
              i < *(void *)((*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7))
                            + 24);
              ++i)
        {
          uint64_t v25 = (*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7));
          unint64_t v26 = (unsigned __int8 **)re::ecs2::EntityComponentCollection::operator[](v25, i);
          uint64_t v27 = *v26;
          if (!(*(uint64_t (**)(void, unsigned __int8 *))(**((void **)a1 + 7) + 96))(*((void *)a1 + 7), *v26))
          {
            uint64_t v28 = (*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7));
            uint64_t v29 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v27 + 32))(v27);
            uint64_t SystemsForTypeID = re::ecs2::SystemCollection::getSystemsForTypeID(v28, v29 + 32);
            if (v31)
            {
              uint64_t v32 = (void *)SystemsForTypeID;
              uint64_t v33 = 8 * v31;
              while ((re::ecs2::Scene *)(*(uint64_t (**)(void, void))(**((void **)a1 + 7) + 96))(*((void *)a1 + 7), *v32) != a1)
              {
                ++v32;
                v33 -= 8;
                if (!v33) {
                  goto LABEL_30;
                }
              }
              continue;
            }
LABEL_30:
            uint64_t v34 = *((void *)a1 + 47);
            if (v34)
            {
              uint64_t v35 = *(void *)(v34 + 24);
              int v36 = v27[85];
              if (v35 != 1)
              {
                if (!v27[85]) {
                  continue;
                }
LABEL_36:
                (*(void (**)(unsigned __int8 *, re::ecs2::Scene *))(*(void *)v27 + 56))(v27, a1);
                continue;
              }
            }
            else
            {
              int v36 = v27[85];
            }
            if (v36 != 1) {
              goto LABEL_36;
            }
          }
        }
      }
      uint64_t v37 = *((void *)a1 + 10);
      if (v37)
      {
        uint64_t v38 = (uint64_t *)*((void *)a1 + 12);
        uint64_t v39 = 8 * v37;
        do
        {
          uint64_t v40 = *((void *)a1 + 7);
          uint64_t v41 = *v38;
          uint64_t v104 = v41;
          if (v41) {
            id v42 = (id)(v41 + 8);
          }
          (*(void (**)(uint64_t, uint64_t *, re::ecs2::Scene *))(*(void *)v40 + 56))(v40, &v104, a1);
          if (v104)
          {

            uint64_t v104 = 0;
          }
          ++v38;
          v39 -= 8;
        }
        while (v39);
      }
      uint64_t v43 = (*(uint64_t (**)(void))(**((void **)a1 + 7) + 32))(*((void *)a1 + 7));
      uint64_t v44 = *((void *)a1 + 13) + 272;
      {
        re::introspect<re::EventBus>(void)::info = re::introspect_EventBus(0);
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 16))(v43, re::introspect<re::EventBus>(void)::info, v44))
      {
        uint64_t v45 = (*(uint64_t (**)(void))(**((void **)a1 + 7) + 32))(*((void *)a1 + 7));
        uint64_t v46 = re::ServiceLocator::service<re::ServiceRegistry>(v45);
        re::StringID::StringID((re::StringID *)&v103, (const StringID *)(*((void *)a1 + 13) + 272));
        {
          re::introspect<re::EventBus>(void)::info = re::introspect_EventBus(0);
        }
        uint64_t v47 = re::introspect<re::EventBus>(void)::info;
        re::StringID::StringID((re::StringID *)&v110, &v103);
        float32x4_t v111 = (re::ecs2::Scene *)v47;
        re::StringID::StringID((re::StringID *)v112, &v110);
        re::StringID::destroyString((re::StringID *)&v110);
        re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v46 + 16, (uint64_t *)&v111);
        re::StringID::destroyString((re::StringID *)v112);
        re::StringID::destroyString((re::StringID *)&v103);
      }
      uint64_t result = v105;
      if (v105 && v109) {
        uint64_t result = (re::ecs2::Entity *)(*(uint64_t (**)(void))(*(void *)v105 + 40))();
      }
    }
    *((void *)a1 + 7) = a2;
    uint64_t v48 = *((void *)a1 + 13);
    uint64_t v49 = *(void *)(v48 + 328);
    if (v49)
    {
      __int16 v50 = *(re::ecs2::Entity ***)(v48 + 344);
      uint64_t v51 = 8 * v49;
      do
      {
        __int16 v52 = *v50++;
        uint64_t result = re::ecs2::Entity::updateIsActive_Subtree(v52);
        v51 -= 8;
      }
      while (v51);
    }
    if (a2)
    {
      uint64_t v53 = (*(uint64_t (**)(re::ecs2::Entity *))(*(void *)a2 + 32))(a2);
      uint64_t v54 = re::ServiceLocator::serviceOrNull<re::ServiceRegistry>(v53);
      if (v54)
      {
        re::ServiceRegistry::add<re::EventBus>(v54, *((void **)a1 + 36), (StringID *)(*((void *)a1 + 13) + 272));
        unint64_t v55 = (re::EventBus *)*((void *)a1 + 36);
        uint64_t v57 = re::globalAllocators(v56)[2];
        v115[0] = &unk_26E6FA188;
        v115[3] = v57;
        v115[4] = v115;
        *((void *)a1 + 41) = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v55, (uint64_t)v115, 0, 0);
        *((void *)a1 + 42) = v58;
        long long v59 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v115);
        long long v60 = (re::EventBus *)*((void *)a1 + 36);
        uint64_t v61 = re::globalAllocators(v59)[2];
        v114[0] = &unk_26E702F48;
        v114[3] = v61;
        v114[4] = v114;
        *((void *)a1 + 43) = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v60, (uint64_t)v114, 0, 0);
        *((void *)a1 + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v62;
        uint64_t v63 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v114);
        uint64_t v64 = (re::EventBus *)*((void *)a1 + 36);
        uint64_t v65 = re::globalAllocators(v63)[2];
        v113[0] = &unk_26E70A058;
        v113[3] = v65;
        void v113[4] = v113;
        *((void *)a1 + 45) = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v64, (uint64_t)v113, 0, 0);
        *((void *)a1 + 46) = v66;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v113);
      }
      uint64_t v67 = *((void *)a1 + 10);
      if (v67)
      {
        long long v68 = (uint64_t *)*((void *)a1 + 12);
        uint64_t v69 = 8 * v67;
        do
        {
          uint64_t v70 = *((void *)a1 + 7);
          uint64_t v71 = *v68;
          uint64_t v102 = v71;
          if (v71) {
            id v72 = (id)(v71 + 8);
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t, re::ecs2::Scene *))(*(void *)v70 + 48))(v70, &v102, 0xFFFFFFFFLL, a1);
          if (v102)
          {

            uint64_t v102 = 0;
          }
          ++v68;
          v69 -= 8;
        }
        while (v69);
      }
      if (*(void *)((*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7)) + 24))
      {
        for (unint64_t j = 0;
              j < *(void *)((*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7))
                            + 24);
              ++j)
        {
          uint64_t v74 = (*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7));
          uint64_t v75 = (unsigned __int8 **)re::ecs2::EntityComponentCollection::operator[](v74, j);
          float32x4_t v76 = *v75;
          uint64_t v77 = (*(uint64_t (**)(void, unsigned __int8 *))(**((void **)a1 + 7) + 96))(*((void *)a1 + 7), *v75);
          if ((re::ecs2::Scene *)v77 == a1) {
            goto LABEL_75;
          }
          if (!v77)
          {
            uint64_t v78 = (*(uint64_t (**)(void))(**((void **)a1 + 7) + 40))(*((void *)a1 + 7));
            uint64_t v79 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v76 + 32))(v76);
            uint64_t v80 = re::ecs2::SystemCollection::getSystemsForTypeID(v78, v79 + 32);
            if (v81)
            {
              unint64_t v82 = (void *)v80;
              uint64_t v83 = 8 * v81;
              while ((re::ecs2::Scene *)(*(uint64_t (**)(void, void))(**((void **)a1 + 7) + 96))(*((void *)a1 + 7), *v82) != a1)
              {
                ++v82;
                v83 -= 8;
                if (!v83) {
                  goto LABEL_72;
                }
              }
              continue;
            }
LABEL_72:
            uint64_t v84 = *((void *)a1 + 47);
            if (!v84)
            {
              int v86 = v76[85];
LABEL_79:
              if (v86 == 1) {
                continue;
              }
LABEL_75:
              (*(void (**)(unsigned __int8 *, re::ecs2::Scene *))(*(void *)v76 + 48))(v76, a1);
              continue;
            }
            uint64_t v85 = *(void *)(v84 + 24);
            int v86 = v76[85];
            if (v85 == 1) {
              goto LABEL_79;
            }
            if (v76[85]) {
              goto LABEL_75;
            }
          }
        }
      }
      uint64_t v109 = 0;
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      long long v105 = 0;
      int v108 = 0;
      uint64_t v87 = *((void *)a1 + 33);
      if (v87)
      {
        int v88 = (void *)*((void *)a1 + 35);
        uint64_t v89 = &v88[v87];
        do
        {
          uint64_t v90 = (void *)*v88;
          (*(void (**)(void, uint64_t))(*(void *)*v88 + 72))(*v88, *v88 + 8);
          uint64_t v107 = 0;
          ++v108;
          uint64_t v91 = v90[3];
          if (v91)
          {
            uint64_t v92 = (uint64_t *)v90[5];
            uint64_t v93 = 8 * v91;
            do
            {
              float32x4_t v111 = 0;
              float32x4_t v111 = (re::ecs2::Scene *)*v92;
              if (*(unsigned char *)(*((void *)v111 + 2) + 288)) {
                re::DynamicArray<re::TransitionCondition *>::add(&v105, &v111);
              }
              ++v92;
              v93 -= 8;
            }
            while (v93);
          }
          (*(void (**)(void *, re::ecs2::Entity **))(*v90 + 80))(v90, &v105);
          ++v88;
        }
        while (v88 != v89);
      }
      uint64_t v94 = *((void *)a1 + 13);
      uint64_t v95 = *(void *)(v94 + 328);
      if (v95)
      {
        v96 = *(re::ecs2::Entity ***)(v94 + 344);
        uint64_t v97 = 8 * v95;
        do
        {
          if (*((unsigned char *)*v96 + 288)) {
            re::ecs2::Entity::sendActivateEvents(*v96, a1);
          }
          ++v96;
          v97 -= 8;
        }
        while (v97);
      }
      if (!(*(unsigned int (**)(void))(**((void **)a1 + 7) + 136))(*((void *)a1 + 7))
        && re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
      {
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(*((void *)a1 + 13) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      uint64_t v98 = (*(uint64_t (**)(void))(**((void **)a1 + 7) + 32))(*((void *)a1 + 7));
      uint64_t v99 = re::ServiceLocator::serviceOrNull<re::EventBus>(v98);
      if (v99)
      {
        unint64_t v100 = (re::EventBus *)v99;
        float32x4_t v111 = a1;
        uint64_t Type = re::EventBus::getTypeId<RESceneDidAddEvent>();
        re::EventBus::publish(v100, (uint64_t)a1, Type, (uint64_t)&v111, 8uLL, 0);
      }
      uint64_t result = v105;
      if (v105)
      {
        if (v109) {
          return (re::ecs2::Entity *)(*(uint64_t (**)(void))(*(void *)v105 + 40))();
        }
      }
    }
  }
  return result;
}

uint64_t anonymous namespace'::sceneComponentDidChangeHandler(_anonymous_namespace_ *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t anonymous namespace'::sceneComponentwillDeactivateHandler(_anonymous_namespace_ *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t anonymous namespace'::sceneComponentDidActivateHandler(_anonymous_namespace_ *a1, re::ecs2::Entity *a2)
{
  return 0;
}

uint64_t re::ecs2::Scene::addToAllEntitiesRecursively(uint64_t result, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    uint64_t v5 = (void *)(result + 152);
    uint64_t v45 = (_anonymous_namespace_ *)(result + 112);
    uint64_t v6 = (re::ecs2::SceneComponentTable *)(result + 200);
    while (1)
    {
      uint64_t v47 = 0;
      uint64_t v47 = *(void *)(*(void *)(a2 + 32) + 8 * v4);
      *(void *)float32x4_t buf = *(void *)(v47 + 296);
      BOOL v7 = re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v5, (uint64_t *)buf);
      if (!v7)
      {
        uint64_t v14 = *(void *)(v3 + 128);
        re::DynamicArray<re::TransitionCondition *>::add(v45, &v47);
        unint64_t v15 = *(void *)(v47 + 296);
        unint64_t v46 = v15;
        *(void *)float32x4_t buf = v14;
        *(void *)&uint8_t buf[8] = v47;
        unint64_t v16 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
        unint64_t v17 = v16 ^ (v16 >> 31);
        if (*(void *)(v3 + 152))
        {
          unint64_t v18 = v17 % *(unsigned int *)(v3 + 176);
          uint64_t v19 = *(unsigned int *)(*(void *)(v3 + 160) + 4 * v18);
          if (v19 != 0x7FFFFFFF)
          {
            uint64_t v20 = *(void *)(v3 + 168);
            while (*(void *)(v20 + 40 * v19 + 16) != v15)
            {
              LODWORD(v19) = *(_DWORD *)(v20 + 40 * v19 + 8) & 0x7FFFFFFF;
              if (v19 == 0x7FFFFFFF) {
                goto LABEL_21;
              }
            }
            goto LABEL_25;
          }
        }
        else
        {
          LODWORD(v18) = 0;
        }
LABEL_21:
        re::HashTable<unsigned long long,re::Pair<unsigned long,re::ecs2::Entity *,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v5, v18, v17, &v46, (__n128 *)buf);
        ++*(_DWORD *)(v3 + 192);
        goto LABEL_25;
      }
      uint64_t v8 = v47;
      if (!*v5) {
        break;
      }
      unint64_t v9 = *(void *)(v47 + 296);
      unint64_t v10 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
      unint64_t v11 = (v10 ^ (v10 >> 31)) % *(unsigned int *)(v3 + 176);
      uint64_t v12 = *(void *)(v3 + 168);
      uint64_t v13 = *(unsigned int *)(*(void *)(v3 + 160) + 4 * v11);
      if (v13 == 0x7FFFFFFF) {
        goto LABEL_16;
      }
      while (*(void *)(v12 + 40 * v13 + 16) != v9)
      {
        uint64_t v13 = *(_DWORD *)(v12 + 40 * v13 + 8) & 0x7FFFFFFF;
        if (v13 == 0x7FFFFFFF) {
          goto LABEL_16;
        }
      }
LABEL_17:
      uint64_t v21 = v12 + 40 * v13;
      uint64_t v23 = *(void *)(v21 + 32);
      uint64_t v22 = v21 + 32;
      uint64_t v24 = *re::ecsCoreLogObjects((re *)v7);
      BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      if (v8 == v23)
      {
        if (v25)
        {
          uint64_t v32 = *(void *)(v47 + 280);
          uint64_t v33 = *(void *)(v47 + 296);
          *(_DWORD *)float32x4_t buf = 136315394;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v33;
          uint64_t v29 = v24;
          uint64_t v30 = "Trying to add an entity to a scene twice: '%s' id=%llu";
          uint32_t v31 = 22;
          goto LABEL_24;
        }
      }
      else if (v25)
      {
        uint64_t v26 = *(void *)(v47 + 280);
        uint64_t v27 = *(void *)(*(void *)v22 + 280);
        uint64_t v28 = *(void *)(v47 + 296);
        *(_DWORD *)float32x4_t buf = 136315650;
        *(void *)&uint8_t buf[4] = v26;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v27;
        __int16 v49 = 2048;
        uint64_t v50 = v28;
        uint64_t v29 = v24;
        uint64_t v30 = "Trying to add second entity to a scene with same id: '%s' '%s' id=%llu";
        uint32_t v31 = 32;
LABEL_24:
        _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, v31);
      }
LABEL_25:
      if (*(void *)(v3 + 128) != *(_DWORD *)(v3 + 180))
      {
        re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "m_allEntitiesById.size() == m_allEntities.size()", "addToAllEntitiesRecursively", 465);
        _os_crash();
        __break(1u);
      }
      uint64_t v34 = v47;
      *(unsigned char *)(v47 + 370) = 1;
      if (*(void *)(v34 + 56))
      {
        unint64_t v35 = 0;
        do
        {
          int v36 = (re::ecs2::Component **)re::ecs2::EntityComponentCollection::operator[](v34 + 32, v35);
          uint64_t v37 = *v36;
          uint64_t v38 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)*v36 + 40))(*v36);
          uint64_t v39 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get(v6, v38);
          re::ecs2::SceneComponentCollectionBase::add(v39, v37);
          ++v35;
          uint64_t v34 = v47;
          unint64_t v40 = *(void *)(v47 + 56);
        }
        while (v35 < v40);
        *(unsigned char *)(v47 + 370) = 0;
        if (v40) {
          BOOL v41 = (*(_DWORD *)(v34 + 288) & 1) == 0;
        }
        else {
          BOOL v41 = 1;
        }
        if (!v41)
        {
          unint64_t v42 = 0;
          do
          {
            unint64_t v46 = 0;
            unint64_t v46 = *(void *)re::ecs2::EntityComponentCollection::operator[](v34 + 32, v42);
            uint64_t v43 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(unint64_t))(*(void *)v46 + 40))(v46);
            uint64_t v44 = re::ecs2::SceneComponentTable::get(v6, v43);
            re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)buf, &v46);
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v44 + 80))(v44, buf);
            if (*(void *)buf)
            {
              if (v51) {
                (*(void (**)(void))(**(void **)buf + 40))();
              }
            }
            ++v42;
            uint64_t v34 = v47;
          }
          while (v42 < *(void *)(v47 + 56));
        }
      }
      else
      {
        *(unsigned char *)(v34 + 370) = 0;
      }
      uint64_t result = re::ecs2::Scene::addToAllEntitiesRecursively(v3, v34 + 312);
      if ((unint64_t)++v4 >= *(void *)(a2 + 16)) {
        return result;
      }
    }
    uint64_t v12 = *(void *)(v3 + 168);
LABEL_16:
    LODWORD(v13) = 0x7FFFFFFF;
    goto LABEL_17;
  }
  return result;
}

void re::ecs2::Scene::sendAddAndActivateEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(re::EventBus **)(a1 + 288);
  ++*((void *)v3 + 12);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(char ***)(a2 + 32);
    uint64_t v6 = &v5[v4];
    do
    {
      BOOL v7 = *v5;
      int v8 = *((_DWORD *)*v5 + 72);
      unint64_t v9 = *(re::EventBus **)(a1 + 288);
      uint64_t v28 = *v5;
      uint64_t Type = re::EventBus::getTypeId<RESceneEntityDidAddEvent>();
      uint64_t v10 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)v9 + 3, (uint64_t *)&Type);
      if (v10 != -1)
      {
        unint64_t v11 = *(re::EventBus::EventInfo **)(*((void *)v9 + 4) + 48 * v10 + 8);
        if (v11) {
          re::EventBus::EventInfo::addToBatch(v11, v9, (uint64_t)v7, &v28, 8uLL, 0);
        }
      }
      if (v8)
      {
        uint64_t v12 = *(re::EventBus **)(a1 + 288);
        uint64_t Type = v7;
        re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(v12, (uint64_t)v7, &Type, 0);
      }
      uint64_t v13 = *((void *)v7 + 7);
      if (v13)
      {
        uint64_t v14 = *((void *)v7 + 9);
        uint64_t v15 = 8 * v13;
        do
        {
          unint64_t v16 = (const void *)(*(uint64_t (**)(void))(**(void **)v14 + 40))();
          unint64_t v17 = *(re::EventBus **)(a1 + 288);
          uint64_t Type = v7;
          uint64_t v27 = v16;
          uint64_t v28 = re::EventBus::getTypeId<REComponentDidAddEvent>();
          uint64_t v18 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)v17 + 3, (uint64_t *)&v28);
          if (v18 != -1)
          {
            uint64_t v19 = *(re::EventBus::EventInfo **)(*((void *)v17 + 4) + 48 * v18 + 8);
            if (v19) {
              re::EventBus::EventInfo::addToBatch(v19, v17, (uint64_t)v7, &Type, 0x10uLL, v16);
            }
          }
          v14 += 8;
          v15 -= 8;
        }
        while (v15);
      }
      if (v8)
      {
        uint64_t v20 = *((void *)v7 + 7);
        if (v20)
        {
          uint64_t v21 = (uint64_t *)*((void *)v7 + 9);
          uint64_t v22 = 8 * v20;
          do
          {
            uint64_t v23 = *v21++;
            uint64_t v24 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
            BOOL v25 = *(re::EventBus **)(a1 + 288);
            uint64_t Type = v7;
            uint64_t v27 = v24;
            re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(v25, (uint64_t)v7, &Type, v24);
            v22 -= 8;
          }
          while (v22);
        }
      }
      if (*((void *)v7 + 41)) {
        re::ecs2::Scene::sendAddAndActivateEvents(a1, v7 + 312);
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v3 = *(re::EventBus **)(a1 + 288);
  }
  re::EventBus::endBatch(v3, a2);
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t result = (uint64_t *)re::EventBus::getEventInfo<RESceneEntityDidActivateEvent>((uint64_t)a1);
  if (result)
  {
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 8uLL, a4);
  }
  return result;
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t result = (uint64_t *)re::EventBus::getEventInfo<REComponentDidActivateEvent>((uint64_t)a1);
  if (result)
  {
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 0x10uLL, a4);
  }
  return result;
}

uint64_t re::ecs2::Scene::removeFromAllEntities(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 304))
  {
    uint64_t v3 = (uint64_t *)result;
    re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively(result, a2, 1);
    re::ecs2::Scene::sendDeactivateAndRemoveEvents((uint64_t)v3, a2);
    re::ecs2::Scene::removeFromAllEntitiesRecursively(v3, a2);
    return re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively((uint64_t)v3, a2, 0);
  }
  return result;
}

uint64_t re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(uint64_t **)(a2 + 32);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t result = re::ecs2::Scene::flagEntitiesAsBeingRemovedRecursively(v5, v8 + 312, a3);
      *(unsigned char *)(v8 + 371) = a3;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void re::ecs2::Scene::sendDeactivateAndRemoveEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(re::EventBus **)(a1 + 288);
  ++*((void *)v3 + 12);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)(a2 + 32);
    uint64_t v6 = &v5[v4];
    do
    {
      uint64_t v7 = *v5;
      int v8 = *(_DWORD *)(*v5 + 288);
      if (*(void *)(*v5 + 328)) {
        re::ecs2::Scene::sendDeactivateAndRemoveEvents(a1, v7 + 312);
      }
      if (v8)
      {
        uint64_t v9 = *(void *)(v7 + 56);
        if (v9)
        {
          uint64_t v10 = *(uint64_t **)(v7 + 72);
          uint64_t v11 = 8 * v9;
          do
          {
            uint64_t v12 = *v10++;
            uint64_t v13 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
            uint64_t v14 = *(re::EventBus **)(a1 + 288);
            BOOL v25 = (char *)v7;
            uint64_t v26 = v13;
            re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v14, v7, &v25, v13);
            v11 -= 8;
          }
          while (v11);
        }
      }
      uint64_t v15 = *(void *)(v7 + 56);
      if (v15)
      {
        unint64_t v16 = *(uint64_t **)(v7 + 72);
        uint64_t v17 = 8 * v15;
        do
        {
          uint64_t v18 = *v16++;
          uint64_t v19 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 40))(v18);
          uint64_t v20 = *(re::EventBus **)(a1 + 288);
          BOOL v25 = (char *)v7;
          uint64_t v26 = v19;
          re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillRemoveEvent,void>(v20, v7, &v25, v19);
          v17 -= 8;
        }
        while (v17);
      }
      uint64_t v21 = *(re::EventBus **)(a1 + 288);
      if (v8)
      {
        BOOL v25 = (char *)v7;
        re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v21, v7, &v25, 0);
        uint64_t v21 = *(re::EventBus **)(a1 + 288);
      }
      uint64_t v24 = v7;
      BOOL v25 = re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>();
      uint64_t v22 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)v21 + 3, (uint64_t *)&v25);
      if (v22 != -1)
      {
        uint64_t v23 = *(re::EventBus::EventInfo **)(*((void *)v21 + 4) + 48 * v22 + 8);
        if (v23) {
          re::EventBus::EventInfo::addToBatch(v23, v21, v7, &v24, 8uLL, 0);
        }
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v3 = *(re::EventBus **)(a1 + 288);
  }
  re::EventBus::endBatch(v3, a2);
}

uint64_t *re::ecs2::Scene::removeFromAllEntitiesRecursively(uint64_t *result, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v5 = (re::ecs2::SceneComponentTable *)(result + 25);
  uint64_t v6 = result + 19;
  uint64_t v45 = (uint64_t)(result + 14);
  while (1)
  {
    uint64_t v7 = *(void *)(*(void *)(a2 + 32) + 8 * v4);
    int v8 = (_anonymous_namespace_ *)re::ecs2::Scene::removeFromAllEntitiesRecursively(v3, v7 + 312);
    unint64_t v9 = *(void *)(v7 + 56);
    uint64_t v51 = 0;
    v48[1] = 0;
    uint64_t v49 = 0;
    v48[0] = 0;
    int v50 = 0;
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v48, v9);
    ++v50;
    if (v9)
    {
      for (unint64_t i = 0; i != v9; ++i)
      {
        uint64_t v11 = (uint64_t *)re::ecs2::EntityComponentCollection::operator[](v7 + 32, i);
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v48, v11);
      }
    }
    uint64_t v12 = v51;
    uint64_t v13 = v49;
    if ((*(unsigned char *)(v7 + 288) & 1) == 0) {
      goto LABEL_14;
    }
    if (v49)
    {
      uint64_t v14 = 8 * v49;
      do
      {
        uint64_t v47 = 0;
        uint64_t v47 = *v12;
        uint64_t v15 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)v47 + 40))(v47);
        uint64_t v16 = re::ecs2::SceneComponentTable::get(v5, v15);
        re::ScratchDynamicArray<re::ecs2::Component *>::ScratchDynamicArray((uint64_t)v46, &v47);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 88))(v16, v46);
        if (v46[0] && v46[4]) {
          (*(void (**)(void))(*(void *)v46[0] + 40))();
        }
        ++v12;
        v14 -= 8;
      }
      while (v14);
      uint64_t v12 = v51;
      uint64_t v13 = v49;
LABEL_14:
      *(unsigned char *)(v7 + 370) = 1;
      if (v13)
      {
        uint64_t v17 = 8 * v13;
        do
        {
          uint64_t v18 = *v12++;
          uint64_t v19 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::Component *))(*(void *)v18 + 40))(v18);
          uint64_t v20 = (re::ecs2::SceneComponentCollectionBase *)re::ecs2::SceneComponentTable::get(v5, v19);
          re::ecs2::SceneComponentCollectionBase::remove(v20, v18);
          v17 -= 8;
        }
        while (v17);
      }
      goto LABEL_19;
    }
    *(unsigned char *)(v7 + 370) = 1;
LABEL_19:
    *(unsigned char *)(v7 + 370) = 0;
    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    unint64_t v21 = *(void *)(v7 + 296);
    uint64_t v22 = (unint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v6, v21);
    if (v22)
    {
      unint64_t v23 = *v22;
      if (*v6)
      {
        unint64_t v24 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
        unint64_t v25 = (v24 ^ (v24 >> 31)) % *((unsigned int *)v3 + 44);
        uint64_t v26 = v3[20];
        uint64_t v27 = *(unsigned int *)(v26 + 4 * v25);
        if (v27 != 0x7FFFFFFF)
        {
          uint64_t v28 = v3[21];
          if (*(void *)(v28 + 40 * v27 + 16) == v21)
          {
            *(_DWORD *)(v26 + 4 * v25) = *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
LABEL_27:
            uint64_t v30 = v3[21];
            uint64_t v31 = v30 + 40 * v27;
            int v34 = *(_DWORD *)(v31 + 8);
            uint64_t v33 = (int *)(v31 + 8);
            int v32 = v34;
            if (v34 < 0)
            {
              int *v33 = v32 & 0x7FFFFFFF;
              uint64_t v30 = v3[21];
              int v32 = *(_DWORD *)(v30 + 40 * v27 + 8);
            }
            *(_DWORD *)(v30 + 40 * v27 + 8) = *((_DWORD *)v3 + 47) | v32 & 0x80000000;
            --*((_DWORD *)v3 + 45);
            int v35 = *((_DWORD *)v3 + 48) + 1;
            *((_DWORD *)v3 + 47) = v27;
            *((_DWORD *)v3 + 48) = v35;
          }
          else
          {
            while (1)
            {
              uint64_t v29 = v27;
              uint64_t v27 = *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
              if (v27 == 0x7FFFFFFF) {
                break;
              }
              if (*(void *)(v28 + 40 * v27 + 16) == v21)
              {
                *(_DWORD *)(v28 + 40 * v29 + 8) = *(_DWORD *)(v28 + 40 * v29 + 8) & 0x80000000 | *(_DWORD *)(v28 + 40 * v27 + 8) & 0x7FFFFFFF;
                goto LABEL_27;
              }
            }
          }
        }
      }
      re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt(v45, v23);
      if (v23 < v3[16])
      {
        int v36 = (void *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v6, *(void *)(*(void *)(v3[18] + 8 * v23) + 296));
        if (!v36)
        {
          re::internal::assertLog((re::internal *)4, v37, "assertion failure: '%s' (%s:line %i) ", "pair", "removeFromAllEntitiesRecursively", 660);
          _os_crash();
          __break(1u);
          goto LABEL_40;
        }
        void *v36 = v23;
      }
    }
    uint64_t v38 = *(void *)(v7 + 328);
    if (v38) {
      break;
    }
LABEL_37:
    uint64_t result = (uint64_t *)re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v48);
    if ((unint64_t)++v4 >= *(void *)(a2 + 16)) {
      return result;
    }
  }
  uint64_t v39 = *(unint64_t **)(v7 + 344);
  uint64_t v40 = 8 * v38;
  while (1)
  {
    unint64_t v23 = *v39;
    v46[0] = *(void *)(*v39 + 296);
    if (re::HashTable<unsigned long long,re::MeshSortingCollection::EntityRenderPassGroupData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v6, v46))
    {
      break;
    }
    ++v39;
    v40 -= 8;
    if (!v40) {
      goto LABEL_37;
    }
  }
LABEL_40:
  BOOL v41 = (re::EventBus *)__CALLER_IS_PARENTING_AN_ENTITY_TO_AN_ENTITY_BEING_REMOVED__((unsigned __int8 *)v7, v23);
  return re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v41, v42, v43, v44);
}

uint64_t *re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(re::EventBus *a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t result = (uint64_t *)re::EventBus::getEventInfo<RESceneEntityWillDeactivateEvent>((uint64_t)a1);
  if (result)
  {
    return re::EventBus::EventInfo::addToBatch((re::EventBus::EventInfo *)result, a1, a2, a3, 8uLL, a4);
  }
  return result;
}

uint64_t __CALLER_IS_PARENTING_AN_ENTITY_TO_AN_ENTITY_BEING_REMOVED__(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *re::ecsCoreLogObjects((re *)a1);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v5)
  {
    int v6 = a1[371];
    LODWORD(buf[0]) = 134218240;
    *(void *)((char *)buf + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a1;
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_INFO, "Parent (%p): isBeingRemovedFromScene=%d", (uint8_t *)buf, 0x12u);
  }
  uint64_t v7 = *re::ecsCoreLogObjects((re *)v5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a2 + 371);
    LODWORD(buf[0]) = 134218240;
    *(void *)((char *)buf + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a2;
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
    _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_INFO, "Child (%p): isBeingRemovedFromScene=%d", (uint8_t *)buf, 0x12u);
  }
  uint64_t v11 = 0;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  uint64_t result = _os_crash_msg();
  __break(1u);
  return result;
}

void re::ecs2::Scene::setRequiresAnchoring(re::ecs2::Scene *this, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)this + 48);
  if (v2 != a2)
  {
    char v3 = a2;
    if (a2)
    {
      BOOL v5 = (re::EventBus *)*((void *)this + 36);
      ++*((void *)v5 + 12);
      uint64_t v6 = *((void *)this + 13);
      uint64_t v7 = *(void *)(v6 + 328);
      if (v7)
      {
        int v8 = *(uint64_t ***)(v6 + 344);
        uint64_t v9 = 8 * v7;
        do
        {
          uint64_t v10 = *v8++;
          re::ecs2::Entity::sendWillDeactivateEventsOnSceneRequiresAnchoringChange(v10, (re::EventBus **)this, 0);
          v9 -= 8;
        }
        while (v9);
        BOOL v5 = (re::EventBus *)*((void *)this + 36);
      }
      re::EventBus::endBatch(v5, a2);
      LOBYTE(v2) = *((unsigned char *)this + 48);
    }
    *((unsigned char *)this + 49) = v2;
    *((unsigned char *)this + 48) = v3;
    uint64_t v11 = *((void *)this + 13);
    uint64_t v12 = *(void *)(v11 + 328);
    if (v12)
    {
      uint64_t v13 = *(re::ecs2::Entity *****)(v11 + 344);
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *v13++;
        re::ecs2::Entity::updateSceneDependentFlagsRecursively(v15);
        v14 -= 8;
      }
      while (v14);
    }
    if ((v3 & 1) == 0)
    {
      uint64_t v16 = (re::EventBus *)*((void *)this + 36);
      ++*((void *)v16 + 12);
      uint64_t v17 = *((void *)this + 13);
      uint64_t v18 = *(void *)(v17 + 328);
      if (v18)
      {
        uint64_t v19 = *(uint64_t ***)(v17 + 344);
        uint64_t v20 = 8 * v18;
        do
        {
          unint64_t v21 = *v19++;
          re::ecs2::Entity::sendDidActivateEventsOnSceneRequiresAnchoringChange(v21, this, 0);
          v20 -= 8;
        }
        while (v20);
        uint64_t v16 = (re::EventBus *)*((void *)this + 36);
      }
      re::EventBus::endBatch(v16, a2);
    }
    uint64_t v34 = 0;
    v31[1] = 0;
    uint64_t v32 = 0;
    v31[0] = 0;
    int v33 = 0;
    uint64_t v22 = *((void *)this + 33);
    if (v22)
    {
      unint64_t v23 = (uint64_t **)*((void *)this + 35);
      unint64_t v24 = &v23[v22];
      do
      {
        unint64_t v25 = *v23;
        uint64_t v26 = (*v23)[3];
        if (v26)
        {
          uint64_t v27 = (uint64_t *)v25[5];
          uint64_t v28 = 8 * v26;
          do
          {
            uint64_t v30 = 0;
            uint64_t v30 = *v27;
            if ((*(_DWORD *)(*(void *)(v30 + 16) + 288) & 0x86) == 2) {
              re::DynamicArray<re::TransitionCondition *>::add(v31, &v30);
            }
            ++v27;
            v28 -= 8;
          }
          while (v28);
          if (v32)
          {
            uint64_t v29 = *v25;
            if (*((unsigned char *)this + 48)) {
              (*(void (**)(uint64_t *, void *))(v29 + 88))(v25, v31);
            }
            else {
              (*(void (**)(uint64_t *, void *))(v29 + 80))(v25, v31);
            }
            uint64_t v32 = 0;
            ++v33;
          }
        }
        ++v23;
      }
      while (v23 != v24);
      if (v31[0])
      {
        if (v34) {
          (*(void (**)(void))(*(void *)v31[0] + 40))();
        }
      }
    }
  }
}

uint64_t re::ecs2::Scene::sendAddAndActivateComponentEvents(re::ecs2::Scene *this, re::ecs2::Entity *a2, const re::ecs2::ComponentTypeBase *a3)
{
  uint64_t v6 = (re::EventBus *)*((void *)this + 36);
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t Type = re::EventBus::getTypeId<REComponentDidAddEvent>();
  uint64_t result = re::EventBus::publish(v6, (uint64_t)a2, (uint64_t)Type, (uint64_t)&v11, 0x10uLL, a3);
  if (*((unsigned char *)a2 + 288))
  {
    uint64_t v9 = (re::EventBus *)*((void *)this + 36);
    uint64_t v11 = a2;
    uint64_t v12 = a3;
    uint64_t v10 = re::EventBus::getTypeId<REComponentDidActivateEvent>();
    return re::EventBus::publish(v9, (uint64_t)a2, v10, (uint64_t)&v11, 0x10uLL, a3);
  }
  return result;
}

uint64_t re::ecs2::Scene::setHiddenFromSwiftAPI(uint64_t this, uint64_t a2)
{
  if (!*(unsigned char *)(this + 50))
  {
    if (*(void *)(this + 56))
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Must hide a scene before adding it to an ECS service.", "m_ecsService == nullptr", "setHiddenFromSwiftAPI", 773);
      this = _os_crash();
      __break(1u);
    }
    else
    {
      *(unsigned char *)(this + 50) = 1;
    }
  }
  return this;
}

void re::ecs2::Scene::deprecatedAddSystem(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v12 = v3;
  if (v3) {
    id v4 = (id)(v3 + 8);
  }
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[10];
  if (v6)
  {
    uint64_t v7 = 8 * v6;
    int v8 = (void *)a1[12];
    while (*v8 != v3)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        int v8 = (void *)(v5 + 8 * v6);
        break;
      }
    }
  }
  else
  {
    int v8 = (void *)a1[12];
  }
  if (v6 == ((uint64_t)v8 - v5) >> 3) {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(a1 + 8, &v12);
  }
  uint64_t v9 = a1[7];
  if (v9)
  {
    uint64_t v11 = v12;
    if (v12) {
      id v10 = (id)(v12 + 8);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void *))(*(void *)v9 + 48))(v9, &v11, 0xFFFFFFFFLL, a1);
    if (v11)
    {

      uint64_t v11 = 0;
    }
  }
  if (v12) {
}
  }

uint64_t re::ecs2::Scene::containsDeprecatedSystem(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 96);
  uint64_t v5 = 8 * v2;
  while (1)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v4 + 32))();
    if (*(void *)(v6 + 32) == *a2)
    {
      uint64_t v7 = a2[1];
      if (*(unsigned __int16 *)(v6 + 40) == (unsigned __int16)v7
        && *(unsigned __int16 *)(v6 + 42) == WORD1(v7)
        && ((*(_DWORD *)(v6 + 44) ^ HIDWORD(v7)) & 0xFFFFFF) == 0)
      {
        break;
      }
    }
    v4 += 8;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return 1;
}

void *re::ecs2::allocInfo_Scene(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_361, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_361))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92D18, "Scene");
    __cxa_guard_release(&_MergedGlobals_361);
  }
  return &unk_26AF92D18;
}

void re::ecs2::initInfo_Scene(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 159404248;
  v5[1] = "Scene";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_Scene(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_Scene(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Scene", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Scene, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Scene, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Scene>, this);
}

void anonymous namespace'::enqueueECSLogicalUpdate(_anonymous_namespace_ *this, re::ecs2::Entity *a2)
{
  if (this && (*((unsigned char *)this + 288) & 1) != 0)
  {
    do
    {
      uint64_t v2 = this;
      this = (_anonymous_namespace_ *)*((void *)this + 3);
    }
    while (this);
    uint64_t v3 = *((void *)v2 + 2);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 56);
      if (v4)
      {
        uint64_t v5 = (*(uint64_t (**)(void, re::ecs2::Entity *))(*(void *)v4 + 80))(*(void *)(v3 + 56), a2);
        if (v5)
        {
          long long v6 = (re::Scheduler *)v5;
          if (!*(unsigned char *)(v5 + 844))
          {
            uint64_t v7 = *(void *)(v3 + 376);
            if (!v7 || *(void *)(v7 + 24) == 1)
            {
              uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
              uint64_t v9 = *(void *)(v8 + 24);
              if (v9)
              {
                uint64_t v10 = *(void *)(v8 + 40);
                uint64_t v11 = 8 * v9;
                while (1)
                {
                  if (!*(unsigned char *)(*(void *)v10 + 84))
                  {
                    unint64_t v12 = *(void *)(*(void *)v10 + 96);
                    if (*((void *)v6 + 5) > v12) {
                      break;
                    }
                  }
                  v10 += 8;
                  v11 -= 8;
                  if (!v11) {
                    return;
                  }
                }
                re::Scheduler::enqueueTaskWithDeadline(v6, v12, 0.0);
              }
            }
          }
        }
      }
    }
  }
}

__n128 re::HashTable<unsigned long long,re::Pair<unsigned long,re::ecs2::Entity *,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, __n128 *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(void *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v13, v12);
          long long v15 = *(_OWORD *)v26;
          *(_OWORD *)uint64_t v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v26[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v26[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::Pair<unsigned long,re::ecs2::Entity *,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 40;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 40 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 40 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 40 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  __n128 result = *a5;
  *(__n128 *)(*(void *)(a1 + 16) + 40 * v9 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::EventBus::getEventInfo<RESceneEntityDidActivateEvent>(uint64_t a1)
{
  uint64_t Type = re::EventBus::getTypeId<RESceneEntityDidActivateEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

uint64_t re::EventBus::getEventInfo<REComponentDidActivateEvent>(uint64_t a1)
{
  uint64_t Type = re::EventBus::getTypeId<REComponentDidActivateEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

uint64_t re::EventBus::getEventInfo<RESceneEntityWillDeactivateEvent>(uint64_t a1)
{
  uint64_t Type = re::EventBus::getTypeId<RESceneEntityWillDeactivateEvent>();
  uint64_t v2 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((void *)(a1 + 24), &Type);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1 + 32) + 48 * v2 + 8);
  }
}

void re::DynamicArray<re::SharedPtr<re::ecs2::System>>::removeStableAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = v2 - 1;
  if (v2 - 1 > a2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    long long v6 = (uint64_t *)(v5 + 8 * a2);
    uint64_t v7 = v6 + 1;
    if (v6 + 1 != (uint64_t *)(v5 + 8 * v2))
    {
      uint64_t v8 = *v6;
      uint64_t v9 = 8 * v2 - 8 * a2 - 8;
      do
      {
        *(v7 - 1) = *v7;
        *v7++ = v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  uint64_t v10 = *(void *)(a1 + 32) + 8 * v2;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v11)
  {

    *(void *)(v10 - 8) = 0;
    uint64_t v4 = *(void *)(a1 + 16) - 1;
  }
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v4;
  ++*(_DWORD *)(a1 + 24);
}

id re::internal::defaultRetain<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::Scene>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_CoordinateSpaceDefinitionComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_362, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_362))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92DA8, "CoordinateSpaceDefinitionComponent");
    __cxa_guard_release(&_MergedGlobals_362);
  }
  return &unk_26AF92DA8;
}

void re::ecs2::initInfo_CoordinateSpaceDefinitionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x31B0986B663F7F78;
  v9[1] = "CoordinateSpaceDefinitionComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92DA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF92DA0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92D98 = v7;
      __cxa_guard_release(&qword_26AF92DA0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((void *)this + 8) = &qword_26AF92D98;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CoordinateSpaceDefinitionComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CoordinateSpaceDefinitionComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CoordinateSpaceDefinitionComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::CoordinateSpaceDefinitionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::CoordinateSpaceDefinitionComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v3 = &unk_26E6E6600;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::CoordinateSpaceDefinitionComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6E6600;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CoordinateSpaceDefinitionComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CoordinateSpaceDefinitionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CoordinateSpaceDefinitionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CoordinateSpaceDefinitionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CoordinateSpaceDefinitionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CoordinateSpaceDefinitionComponent>, this);
}

uint64_t re::ecs2::SceneComponentTable::get(re::ecs2::SceneComponentTable *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v4 = *((unsigned __int16 *)a2 + 8);
  if (*((void *)this + 3) <= v4)
  {
    re::DynamicArray<double>::resize((uint64_t)this + 8, v4 + 1);
  }
  else
  {
    uint64_t result = *(void *)(*((void *)this + 5) + 8 * v4);
    if (result) {
      return result;
    }
  }
  uint64_t v6 = (*(uint64_t (**)(const re::ecs2::ComponentTypeBase *))(*(void *)a2 + 40))(a2);
  v8[0] = v6;
  (*(void (**)(uint64_t, void))(*(void *)v6 + 104))(v6, *(void *)this);
  unint64_t v7 = *((void *)this + 3);
  if (v7 <= v4)
  {
    v8[1] = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v9 = 136315906;
    long long v10 = "operator[]";
    __int16 v11 = 1024;
    int v12 = 789;
    __int16 v13 = 2048;
    unint64_t v14 = v4;
    __int16 v15 = 2048;
    unint64_t v16 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(void *)(*((void *)this + 5) + 8 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
  re::DynamicArray<re::TransitionCondition *>::add((void *)this + 6, v8);
  return v8[0];
}

uint64_t re::ecs2::SceneComponentTable::clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 64);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(this + 80);
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v6 = (re *)(*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 104))(v5, 0);
      uint64_t v7 = re::globalAllocators(v6)[2];
      (**(void (***)(uint64_t))v5)(v5);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *(void *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  ++*(_DWORD *)(v1 + 32);
  *(void *)(v1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  ++*(_DWORD *)(v1 + 72);
  return this;
}

void *re::allocInfo_EventBus(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_363, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_363))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92E28, "EventBus");
    __cxa_guard_release(&_MergedGlobals_363);
  }
  return &unk_26AF92E28;
}

void re::initInfo_EventBus(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3A628DB734CLL;
  v5[1] = "EventBus";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xC800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 8) = &re::initInfo_EventBus(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::EventBus>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::EventBus>;
  *((void *)this + 11) = re::internal::defaultRetain<re::EventBus>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::EventBus>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::EventBus>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::EventBus>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::EventBus>(int a1, int a2, re::EventBus *this)
{
  return re::EventBus::EventBus(this);
}

void re::internal::defaultDestruct<re::EventBus>(int a1, int a2, re::EventBus *this)
{
}

uint64_t re::introspect_EventBus(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EventBus", (uint64_t (*)(re::internal *))re::allocInfo_EventBus, (re::IntrospectionBase *(*)(void))re::initInfo_EventBus, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::EventBus>, this);
}

id re::internal::defaultRetain<re::EventBus>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::EventBus>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

re::ecs2::Entity *re::ecs2::Entity::Entity(re::ecs2::Entity *this, uint64_t a2, unint64_t a3)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  void *v6 = &unk_26E70C6C0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  re::ecs2::EntityComponentCollection::EntityComponentCollection((re::ecs2::EntityComponentCollection *)(v6 + 4), this, a3);
  *((void *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 35) = "";
  *((_DWORD *)this + 72) = 8202;
  *((void *)this + 43) = 0;
  *((void *)this + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = this;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 39) = 0;
  *((_DWORD *)this + 8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 37) = a2;
  *((void *)this + 38) = &unk_26E70C360;
  *((void *)this + 45) = 0;
  *((_DWORD *)this + 92) = 0;
  *((void *)this + 47) = -1;
  return this;
}

void re::ecs2::Entity::~Entity(re::ecs2::Entity *this)
{
  *((_DWORD *)this + 72) |= 0x800u;
  uint64_t v2 = (void *)((char *)this + 304);
  (*(void (**)(char *))(*((void *)this + 38) + 16))((char *)this + 304);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 312);
  re::ecs2::EntityComponentCollection::clear((uint64_t **)this + 4, v3);
  *((_DWORD *)this + 72) = 0;
  re::Collection<re::SharedPtr<re::ecs2::Entity>>::~Collection(v2);
  re::StringID::destroyString((re::ecs2::Entity *)((char *)this + 272));
  re::ecs2::PackedTypeIDs::~PackedTypeIDs((re::ecs2::Entity *)((char *)this + 80));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)this + 40);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::Entity::~Entity(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::Entity::setSwiftObject(re::ecs2::Entity *this, re *cf)
{
  uint64_t v3 = (re *)*((void *)this + 45);
  *((void *)this + 45) = cf;
  if (v3 != cf)
  {
    if (cf && v3)
    {
      uint64_t v5 = *re::ecsCoreLogObjects(v3);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v8 = 0;
        _os_log_error_impl(&dword_233120000, v5, OS_LOG_TYPE_ERROR, "Cannot assign Swift object to entity. Another Swift object is already set. New Swift object is ignored.", v8, 2u);
      }
    }
    else if ((*((unsigned char *)this + 289) & 2) != 0)
    {
      if (v3) {
        CFRelease(v3);
      }
      if (cf)
      {
        CFRetain(cf);
      }
    }
    else
    {
      long long v6 = (char *)this + 8;
      if (cf)
      {
        uint64_t v7 = v6;
      }
      else
      {
      }
    }
  }
}

void re::ecs2::Entity::updateSwiftObjectOwnership(re::ecs2::Entity *this)
{
  int v2 = *((_DWORD *)this + 72);
  if ((v2 & 0x80) != 0 && *((void *)this + 2) || (uint64_t v3 = *((void *)this + 3)) != 0)
  {
    unsigned int v4 = v2 | 0x200;
    LODWORD(v3) = 1;
  }
  else
  {
    unsigned int v4 = v2 & 0xFFFFFDFF;
  }
  *((_DWORD *)this + 72) = v4;
  uint64_t v5 = (const void *)*((void *)this + 45);
  if (v5)
  {
    if ((v2 & 0x200) != 0) {
      char v6 = v3;
    }
    else {
      char v6 = 1;
    }
    if (v6)
    {
      if (((v3 ^ 1 | ((unsigned __int16)(v2 & 0x200) >> 9)) & 1) == 0)
      {
        CFRetain(v5);
      }
    }
    else
    {
      uint64_t v7 = (char *)this + 8;
      long long v8 = (const void *)*((void *)this + 45);
      CFRelease(v8);
    }
  }
}

uint64_t re::ecs2::Entity::allocator(re::ecs2::Entity *this)
{
  return *re::ecs2::EntityFactory::instance(this);
}

void re::ecs2::Entity::setParentInternal(re::ecs2::Entity *this, re::ecs2::Entity *a2, unint64_t a3)
{
  if (*((re::ecs2::Entity **)this + 3) != a2)
  {
    __int16 v11 = this;
    char v6 = (char *)this + 8;
    if (!a2)
    {
      int v9 = dyld_program_sdk_at_least();
      long long v10 = (re *)(*((void *)this + 3) + 304);
      if (v9) {
        re::ecs2::EntityChildCollection::remove(v10, (uint64_t *)&v11);
      }
      else {
        re::Collection<re::SharedPtr<re::ecs2::Entity>>::removeStable((uint64_t)v10, (uint64_t *)&v11);
      }
      goto LABEL_13;
    }
LABEL_3:
    uint64_t v7 = (void *)((char *)a2 + 304);
    if (*((void *)a2 + 41) <= a3) {
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(v7, (uint64_t *)&v11);
    }
    else {
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::insert((uint64_t)v7, a3, (uint64_t *)&v11);
    }
LABEL_13:
    if (v11) {

    }
    return;
  }
  if (a2
    && *((void *)a2 + 41) > a3
    && *(re::ecs2::Entity **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)a2 + 304, a3) != this)
  {
    __int16 v11 = this;
    long long v8 = (char *)this + 8;
    goto LABEL_3;
  }
}

uint64_t re::Collection<re::SharedPtr<re::ecs2::Entity>>::removeStable(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    char v6 = *(void **)(a1 + 40);
    while (*v6 != *a2)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        char v6 = (void *)(v3 + 8 * v4);
        break;
      }
    }
  }
  else
  {
    char v6 = *(void **)(a1 + 40);
  }
  unint64_t v7 = ((uint64_t)v6 - v3) >> 3;
  if (v7 == v4) {
    return 0;
  }
  int v9 = *(_DWORD *)(a1 + 32);
  uint64_t v10 = *a2;
  uint64_t v17 = v10;
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v7, &v17);
  if (v9 == *(_DWORD *)(a1 + 32)) {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    __int16 v15 = *(void **)(a1 + 40);
    while (*v15 != v17)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
      {
        __int16 v15 = (void *)(v12 + 8 * v13);
        break;
      }
    }
  }
  else
  {
    __int16 v15 = *(void **)(a1 + 40);
  }
  unint64_t v7 = ((uint64_t)v15 - v12) >> 3;
  if (v7 != v13)
  {
LABEL_20:
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::removeStableAt(a1 + 8, v7);
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 56))(a1, v7, &v17);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v17) {

  }
  return v8;
}

void re::Collection<re::SharedPtr<re::ecs2::Entity>>::insert(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a3;
  v21[0] = v5;
  if (v5) {
    id v6 = (id)(v5 + 8);
  }
  unint64_t v7 = (re *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2, v21);
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >= a2)
  {
    unint64_t v10 = v8 + 1;
    if (v8 + 1 <= a2)
    {
      v21[1] = 0;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v22 = 136315906;
      int v23 = "insert";
      __int16 v24 = 1024;
      int v25 = 855;
      __int16 v26 = 2048;
      unint64_t v27 = a2;
      __int16 v28 = 2048;
      unint64_t v29 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v8 >= *(void *)(a1 + 16))
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity((void *)(a1 + 8), v8 + 1);
      unint64_t v8 = *(void *)(a1 + 24);
    }
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)(v11 + 8 * v8);
    if (v8 <= a2)
    {
      uint64_t v19 = v21[0];
      void *v12 = v21[0];
      if (v19) {
        id v20 = (id)(v19 + 8);
      }
    }
    else
    {
      uint64_t v13 = *(v12 - 1);
      *(v12 - 1) = 0;
      void *v12 = v13;
      uint64_t v14 = v12 - 1;
      if (v14 != (uint64_t *)(v11 + 8 * a2))
      {
        uint64_t v15 = *v14;
        unint64_t v16 = (uint64_t *)(v11 + 8 * v8 - 16);
        uint64_t v17 = 8 * a2 - 8 * v8 + 8;
        do
        {
          uint64_t v18 = *v16;
          *unint64_t v16 = v15;
          v16[1] = v18;
          --v16;
          v17 += 8;
        }
        while (v17);
        uint64_t v11 = *(void *)(a1 + 40);
      }
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v11 + 8 * a2), v21[0]);
    }
    ++*(void *)(a1 + 24);
    ++*(_DWORD *)(a1 + 32);
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 48))(a1, a2, v21);
  }
  else
  {
    int v9 = *re::foundationCoreLogObjects(v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "void re::Collection<re::SharedPtr<re::ecs2::Entity>>::insert(size_t, const T &) [T "
                                     "= re::SharedPtr<re::ecs2::Entity>]";
      WORD6(buf[0]) = 2048;
      *(void *)((char *)buf + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a2;
      _os_log_impl(&dword_233120000, v9, OS_LOG_TYPE_DEFAULT, "%s: index %zu invalid after willInsert(), not inserting", (uint8_t *)buf, 0x16u);
    }
  }
  if (v21[0]) {
}
  }

void re::ecs2::Entity::removeFromSceneOrParent(re::ecs2::Entity *this)
{
  if ((*((unsigned char *)this + 288) & 0x80) != 0)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 56);
      if (v3)
      {
        uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 104))(v3);
        uint64_t v5 = *((void *)this + 2);
        uint64_t v7 = v5;
        if (v5) {
          id v6 = (id)(v5 + 8);
        }
        re::Collection<re::SharedPtr<re::ecs2::Scene>>::remove(v4, &v7);
        if (v7) {
      }
        }
    }
  }
  if (*((void *)this + 3)) {
    re::ecs2::Entity::setParentInternal(this, 0, 0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t re::ecs2::Entity::findInHierarchyByName(uint64_t a1, StringID *a2)
{
  uint64_t v3 = a1;
  if (!re::StringID::operator==((void *)(a1 + 272), a2))
  {
    uint64_t v4 = *(void *)(v3 + 328);
    if (v4)
    {
      uint64_t v5 = *(uint64_t **)(v3 + 344);
      uint64_t v6 = 8 * v4;
      while (1)
      {
        uint64_t v7 = *v5;
        re::StringID::StringID((re::StringID *)v9, a2);
        uint64_t v3 = re::ecs2::Entity::findInHierarchyByName(v7, v9);
        re::StringID::destroyString((re::StringID *)v9);
        if (v3) {
          break;
        }
        ++v5;
        v6 -= 8;
        if (!v6) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void re::ecs2::Entity::setSelfEnabled(re::ecs2::Entity *this, int a2)
{
  int v3 = *((_DWORD *)this + 72) & 1;
  re::ecs2::Entity::setSelfEnabledForFlag(this, a2, 8);
  if (v3 != ((*((_DWORD *)this + 72) & 1) != 0)
    && re::internal::enableSignposts(0, 0)
    && re::internal::enableHighFrequencyTracing(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*((re **)this + 35), 0);
    kdebug_trace();
  }
}

void re::ecs2::Entity::setSelfEnabledForFlag(re::ecs2::Entity *this, int a2, int a3)
{
  int v3 = *((_DWORD *)this + 72);
  if (((a3 & ~v3) == 0) != a2)
  {
    int v7 = *((_DWORD *)this + 72);
    unint64_t v8 = this;
    do
    {
      int v9 = v8;
      unint64_t v8 = (re::ecs2::Entity *)*((void *)v8 + 3);
    }
    while (v8);
    unint64_t v10 = (re::ecs2::Scene *)*((void *)v9 + 2);
    if ((v3 & 1) != 0 && (a2 & 1) == 0)
    {
      re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v9 + 2));
      int v7 = *((_DWORD *)this + 72);
    }
    int v11 = v3 & 1;
    int v12 = v7 & ~a3;
    int v13 = v7 | a3;
    if (!a2) {
      int v13 = v12;
    }
    *((_DWORD *)this + 72) = v13;
    re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree((uint64_t)this);
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    int v14 = *((_DWORD *)this + 72);
    if (v11 != (v14 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v10);
      if (v14)
      {
        re::ecs2::Entity::sendActivateEvents(this, v10);
      }
    }
  }
}

void re::ecs2::Entity::sendDeactivateEvents(re::ecs2::Entity *this, re::ecs2::Scene *a2)
{
  if (a2 && (*((unsigned char *)this + 288) & 1) != 0 && !*((unsigned char *)this + 371))
  {
    uint64_t v4 = (re::EventBus *)*((void *)a2 + 36);
    ++*((void *)v4 + 12);
    uint64_t v5 = *((void *)this + 41);
    if (v5)
    {
      uint64_t v6 = (re::ecs2::Entity **)*((void *)this + 43);
      uint64_t v7 = 8 * v5;
      do
      {
        unint64_t v8 = *v6++;
        re::ecs2::Entity::sendDeactivateEvents(v8, a2);
        v7 -= 8;
      }
      while (v7);
      uint64_t v4 = (re::EventBus *)*((void *)a2 + 36);
    }
    v16[0] = this;
    re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v4, (uint64_t)this, v16, 0);
    uint64_t v10 = *((void *)this + 7);
    if (v10)
    {
      int v11 = (uint64_t *)*((void *)this + 9);
      uint64_t v12 = 8 * v10;
      do
      {
        uint64_t v13 = *v11++;
        int v14 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
        uint64_t v15 = (re::EventBus *)*((void *)a2 + 36);
        v16[0] = this;
        v16[1] = v14;
        re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v15, (uint64_t)this, v16, v14);
        v12 -= 8;
      }
      while (v12);
    }
    re::EventBus::endBatch(*((re::EventBus **)a2 + 36), v9);
  }
}

uint64_t re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 288);
  if ((~v1 & 0x2008) == 0
    && ((v2 = *(void *)(this + 24)) == 0 || (int v3 = *(_DWORD *)(v2 + 288), (v3 & 0x80) != 0) || (v3 & 2) != 0))
  {
    unsigned int v4 = v1 | 2;
  }
  else
  {
    unsigned int v4 = v1 & 0xFFFFFFFD;
  }
  *(_DWORD *)(this + 288) = v4;
  if (((v1 >> 1) & 1) != (v4 & 2) >> 1)
  {
    uint64_t v5 = *(void *)(this + 328);
    if (v5)
    {
      uint64_t v6 = *(void *)(this + 344);
      uint64_t v7 = 8 * v5;
      int v8 = (v4 >> 1) & 1;
      do
      {
        this = *(void *)v6;
        if ((~*(_DWORD *)(*(void *)v6 + 288) & 0x2008) == 0) {
          this = re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree(this, v8);
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return this;
}

uint64_t re::ecs2::Entity::updateIsActive_Self(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 288);
  BOOL v2 = (v1 & 0x42) != 2 || (v1 & 0x14) == 16;
  if (!v2
    && ((uint64_t v3 = *(void *)(this + 24)) != 0 && (*(_DWORD *)(v3 + 288) & 0x81) == 1
     || (uint64_t v4 = *(void *)(this + 16)) != 0 && *(void *)(v4 + 56)))
  {
    unsigned int v5 = v1 | 1;
  }
  else
  {
    unsigned int v5 = v1 & 0xFFFFFFFE;
  }
  *(_DWORD *)(this + 288) = v5;
  return this;
}

uint64_t re::ecs2::Entity::onActivationChanged(re *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = re::globalAllocators(a1)[2];
  uint64_t v25 = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  int v24 = 0;
  v22[0] = v4;
  re::DynamicArray<float *>::setCapacity(v22, 0x10uLL);
  ++v24;
  uint64_t v21 = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  int v20 = 0;
  v18[0] = v4;
  re::DynamicArray<float *>::setCapacity(v18, 1uLL);
  ++v20;
  int v5 = *((_DWORD *)v3 + 72);
  do
  {
    if (a2 && *((void *)v3 + 7))
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v17 = 0;
        uint64_t v17 = *(void *)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v3 + 32, v6);
        uint64_t v7 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
        int v8 = (uint64_t *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), v7);
        uint64_t v26 = v17;
        if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v8 + 7, &v26) != -1)
        {
          uint64_t v19 = 0;
          ++v20;
          re::DynamicArray<re::TransitionCondition *>::add(v18, &v17);
          uint64_t v9 = *v8;
          if (v5) {
            (*(void (**)(uint64_t *, void *))(v9 + 80))(v8, v18);
          }
          else {
            (*(void (**)(uint64_t *, void *))(v9 + 88))(v8, v18);
          }
        }
        ++v6;
      }
      while (v6 < *((void *)v3 + 7));
    }
    uint64_t v10 = *((void *)v3 + 41);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = (uint64_t)v3 + 304;
      unint64_t v12 = v10 + 1;
      do
      {
        uint64_t v13 = (uint64_t *)re::ecs2::EntityComponentCollection::operator[](v11, (v12 - 2));
        uint64_t v14 = *v13;
        if ((~*(_DWORD *)(*v13 + 288) & 0x2008) == 0
          && ((*(_DWORD *)(*v13 + 288) & 0x120) != 0x100 || *(unsigned char *)(a2 + 48) == 0))
        {
          re::ecs2::Entity::updateIsActive_Self(*v13);
          uint64_t v26 = v14;
          re::DynamicArray<re::TransitionCondition *>::add(v22, &v26);
        }
        --v12;
      }
      while (v12 > 1);
    }
    if (!v23) {
      break;
    }
    uint64_t v3 = *(re **)(v25 + 8 * --v23);
    ++v24;
  }
  while (v3);
  if (v18[0] && v21) {
    (*(void (**)(void))(*(void *)v18[0] + 40))();
  }
  uint64_t result = v22[0];
  if (v22[0])
  {
    if (v25) {
      return (*(uint64_t (**)(void))(*(void *)v22[0] + 40))();
    }
  }
  return result;
}

void re::ecs2::Entity::sendActivateEvents(re::ecs2::Entity *this, re::ecs2::Scene *a2)
{
  if (a2 && (*((unsigned char *)this + 288) & 1) != 0)
  {
    uint64_t v4 = (re::EventBus *)*((void *)a2 + 36);
    ++*((void *)v4 + 12);
    uint64_t v5 = *((void *)this + 7);
    if (v5)
    {
      unint64_t v6 = (uint64_t *)*((void *)this + 9);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        uint64_t v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
        uint64_t v10 = (re::EventBus *)*((void *)a2 + 36);
        v16[0] = this;
        v16[1] = v9;
        re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(v10, (uint64_t)this, v16, v9);
        v7 -= 8;
      }
      while (v7);
      uint64_t v4 = (re::EventBus *)*((void *)a2 + 36);
    }
    v16[0] = this;
    re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(v4, (uint64_t)this, v16, 0);
    uint64_t v12 = *((void *)this + 41);
    if (v12)
    {
      uint64_t v13 = (re::ecs2::Entity **)*((void *)this + 43);
      uint64_t v14 = 8 * v12;
      do
      {
        uint64_t v15 = *v13++;
        re::ecs2::Entity::sendActivateEvents(v15, a2);
        v14 -= 8;
      }
      while (v14);
    }
    re::EventBus::endBatch(*((re::EventBus **)a2 + 36), v11);
  }
}

uint64_t re::ecs2::Entity::setSelfAnchored_Before(re::ecs2::Entity *this, char a2)
{
  if (a2) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 72);
  if ((~v3 & 0x31) != 0) {
    return 0;
  }
  if (!*((unsigned char *)this + 371))
  {
    if ((v3 & 0x100) == 0)
    {
      uint64_t v4 = *((void *)this + 3);
      if (v4)
      {
        if ((*(_DWORD *)(v4 + 288) & 0x84) == 4) {
          return 0;
        }
      }
    }
    uint64_t v5 = this;
    do
    {
      unint64_t v6 = v5;
      uint64_t v5 = (re::ecs2::Entity *)*((void *)v5 + 3);
    }
    while (v5);
    re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v6 + 2));
  }
  return 1;
}

void re::ecs2::Entity::setSelfAnchored_After(re::ecs2::Entity *this, int a2)
{
  int v2 = *((_DWORD *)this + 72);
  if (a2 != (v2 & 0x20) >> 5)
  {
    char v3 = a2;
    uint64_t v5 = this;
    do
    {
      unint64_t v6 = v5;
      uint64_t v5 = (re::ecs2::Entity *)*((void *)v5 + 3);
    }
    while (v5);
    uint64_t v7 = (re::ecs2::Scene *)*((void *)v6 + 2);
    if (a2) {
      int v8 = 32;
    }
    else {
      int v8 = 0;
    }
    *((_DWORD *)this + 72) = v2 & 0xFFFFFFDF | v8;
    re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)this);
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    if (v7)
    {
      uint64_t v9 = (re::EventBus *)*((void *)v7 + 36);
      uint64_t v12 = this;
      char v13 = v3;
      uint64_t Type = re::EventBus::getTypeId<RESceneAnchoredStateChangedEvent>();
      re::EventBus::publish(v9, (uint64_t)this, Type, (uint64_t)&v12, 0x10uLL, 0);
    }
    int v11 = *((_DWORD *)this + 72);
    if ((v2 & 1) != (v11 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v7);
      if (v11) {
        re::ecs2::Entity::sendActivateEvents(this, v7);
      }
    }
  }
}

uint64_t re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree(uint64_t this)
{
  unsigned int v1 = *(_DWORD *)(this + 288);
  if ((v1 & 0x20) != 0
    || (v1 & 0x100) == 0
    && (uint64_t v2 = *(void *)(this + 24)) != 0
    && (int v3 = *(_DWORD *)(v2 + 288), (v3 & 0x80) == 0)
    && (v3 & 4) != 0)
  {
    unsigned int v4 = v1 | 4;
  }
  else
  {
    unsigned int v4 = v1 & 0xFFFFFFFB;
  }
  *(_DWORD *)(this + 288) = v4;
  if (((v1 >> 2) & 1) != (v4 & 4) >> 2)
  {
    uint64_t v5 = *(void *)(this + 328);
    if (v5)
    {
      uint64_t v6 = *(void *)(this + 344);
      uint64_t v7 = 8 * v5;
      int v8 = (v4 >> 2) & 1;
      do
      {
        this = *(void *)v6;
        if ((*(_WORD *)(*(void *)v6 + 288) & 0x120) == 0) {
          this = re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree(this, v8);
        }
        v6 += 8;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return this;
}

void re::ecs2::Entity::setSelfRequiresAnchoring(re::ecs2::Entity *this, int a2)
{
  if (a2 && (*((_DWORD *)this + 72) & 0x131) == 0x11)
  {
    unsigned int v4 = this;
    do
    {
      uint64_t v5 = v4;
      unsigned int v4 = (re::ecs2::Entity *)*((void *)v4 + 3);
    }
    while (v4);
    re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v5 + 2));
  }
  re::ecs2::Entity::setSelfRequiresAnchoring_After(this, a2);
}

void re::ecs2::Entity::setSelfRequiresAnchoring_After(re::ecs2::Entity *this, int a2)
{
  if (a2 != (*((_DWORD *)this + 72) & 0x100u) >> 8)
  {
    int v3 = this;
    do
    {
      unsigned int v4 = v3;
      int v3 = (re::ecs2::Entity *)*((void *)v3 + 3);
    }
    while (v3);
    int v5 = *((_DWORD *)this + 72) & 1;
    uint64_t v6 = (re::ecs2::Scene *)*((void *)v4 + 2);
    int v7 = a2 ? 256 : 0;
    *((_DWORD *)this + 72) = *((_DWORD *)this + 72) & 0xFFFFFEFF | v7;
    re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((uint64_t)this);
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    int v8 = *((_DWORD *)this + 72);
    if (v5 != (v8 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v6);
      if (v8)
      {
        re::ecs2::Entity::sendActivateEvents(this, v6);
      }
    }
  }
}

void re::ecs2::Entity::setGhosted(re::ecs2::Entity *this, int a2)
{
  int v2 = *((_DWORD *)this + 72);
  if ((v2 & 0x80) == 0 && ((((*((_DWORD *)this + 72) & 0x40) == 0) ^ a2) & 1) == 0)
  {
    int v5 = *((_DWORD *)this + 72);
    uint64_t v6 = this;
    do
    {
      int v7 = v6;
      uint64_t v6 = (re::ecs2::Entity *)*((void *)v6 + 3);
    }
    while (v6);
    int v8 = (re::ecs2::Scene *)*((void *)v7 + 2);
    if ((v2 & 1) != 0 && a2)
    {
      re::ecs2::Entity::sendDeactivateEvents(this, *((re::ecs2::Scene **)v7 + 2));
      int v5 = *((_DWORD *)this + 72);
    }
    int v9 = v2 & 1;
    unsigned int v10 = v5 & 0xFFFFFFBF;
    if (a2) {
      int v11 = 64;
    }
    else {
      int v11 = 0;
    }
    *((_DWORD *)this + 72) = v10 | v11;
    re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
    int v12 = *((_DWORD *)this + 72);
    if (v9 != (v12 & 1))
    {
      re::ecs2::Entity::onActivationChanged(this, (uint64_t)v8);
      if (v12)
      {
        re::ecs2::Entity::sendActivateEvents(this, v8);
      }
    }
  }
}

uint64_t re::ecs2::Entity::updateIsSelfAnchored_Subtree(uint64_t this)
{
  unsigned int v1 = *(unsigned char **)(this + 128);
  if (v1 && (!v1[176] || v1[177]))
  {
    BOOL v2 = v1[178] == 0;
    int v3 = (unsigned int *)(this + 288);
    unsigned int v4 = *(_DWORD *)(this + 288) & 0xFFFFFFDF | (32 * v2);
  }
  else
  {
    int v3 = (unsigned int *)(this + 288);
    unsigned int v4 = *(_DWORD *)(this + 288) & 0xFFFFFFDF;
  }
  *int v3 = v4;
  return this;
}

uint64_t re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree(uint64_t this, BOOL a2)
{
  if (a2) {
    int v2 = 16;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(this + 288) = *(_DWORD *)(this + 288) & 0xFFFFFFEF | v2;
  uint64_t v3 = *(void *)(this + 328);
  if (v3)
  {
    BOOL v4 = a2;
    int v5 = *(re::ecs2::Entity ***)(this + 344);
    uint64_t v6 = 8 * v3;
    do
    {
      int v7 = *v5++;
      this = re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree(v7, v4);
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree(uint64_t this, unsigned __int8 a2)
{
  int v2 = *(_DWORD *)(this + 288);
  int v3 = ((~v2 & 0x2008) == 0) & a2;
  unsigned int v4 = v2 & 0xFFFFFFFD;
  if (v3) {
    int v5 = 2;
  }
  else {
    int v5 = 0;
  }
  *(_DWORD *)(this + 288) = v5 | v4;
  uint64_t v6 = *(void *)(this + 328);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 344);
    uint64_t v8 = 8 * v6;
    BOOL v9 = v3 & 1;
    do
    {
      this = *(void *)v7;
      if ((~*(_DWORD *)(*(void *)v7 + 288) & 0x2008) == 0) {
        this = re::ecs2::Entity::updateIsEnabledInHierarchy_Subtree((re::ecs2::Entity *)this, v9);
      }
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  return this;
}

uint64_t re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree(uint64_t this, int a2)
{
  int v2 = *(_DWORD *)(this + 288);
  if ((v2 & 0x20) != 0 || (BOOL v3 = 0, v4 = v2 & 0xFFFFFFFB, (v2 & 0x100) == 0) && a2)
  {
    unsigned int v4 = v2 | 4;
    BOOL v3 = 1;
  }
  *(_DWORD *)(this + 288) = v4;
  uint64_t v5 = *(void *)(this + 328);
  if (v5)
  {
    uint64_t v6 = *(void *)(this + 344);
    uint64_t v7 = 8 * v5;
    do
    {
      this = *(void *)v6;
      if ((*(unsigned char *)(*(void *)v6 + 288) & 0x20) == 0) {
        this = re::ecs2::Entity::updateIsAnchoredInHierarchy_Subtree((re::ecs2::Entity *)this, v3);
      }
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  return this;
}

re::ecs2::Entity *re::ecs2::Entity::updateIsActive_Subtree(re::ecs2::Entity *this)
{
  int v2 = *((_DWORD *)this + 72) & 1;
  uint64_t result = (re::ecs2::Entity *)re::ecs2::Entity::updateIsActive_Self((uint64_t)this);
  if (v2 != (*((unsigned char *)this + 288) & 1))
  {
    uint64_t v4 = *((void *)this + 41);
    if (v4)
    {
      uint64_t v5 = (re::ecs2::Entity **)*((void *)this + 43);
      uint64_t v6 = 8 * v4;
      do
      {
        uint64_t result = *v5;
        if ((~*((_DWORD *)*v5 + 72) & 0x2008) == 0) {
          uint64_t result = (re::ecs2::Entity *)re::ecs2::Entity::updateIsActive_Subtree(result);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

re::ecs2::Entity *re::ecs2::Entity::updateSceneDependentFlagsRecursively(re::ecs2::Entity ***this)
{
  uint64_t result = re::ecs2::Entity::updateState<(re::ecs2::Entity::StateFlags)17>((re::ecs2::Entity *)this);
  BOOL v3 = this[41];
  if (v3)
  {
    uint64_t v4 = this[43];
    uint64_t v5 = 8 * (void)v3;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t result = (re::ecs2::Entity *)re::ecs2::Entity::updateSceneDependentFlagsRecursively(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

re::ecs2::Entity *re::ecs2::Entity::updateState<(re::ecs2::Entity::StateFlags)17>(re::ecs2::Entity *this)
{
  int v2 = this;
  do
  {
    BOOL v3 = v2;
    int v2 = (re::ecs2::Entity *)*((void *)v2 + 3);
  }
  while (v2);
  uint64_t v4 = *((void *)v3 + 2);
  if (v4) {
    BOOL v5 = *(unsigned __int8 *)(v4 + 48) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  re::ecs2::Entity::updateSceneRequiresAnchoring_Subtree((uint64_t)this, v5);
  return re::ecs2::Entity::updateIsActive_Subtree(this);
}

uint64_t *re::ecs2::Entity::sendDidActivateEventsOnSceneRequiresAnchoringChange(uint64_t *this, re::ecs2::Scene *a2, BOOL a3)
{
  int v3 = *((_DWORD *)this + 72);
  if (v3)
  {
    uint64_t v5 = (uint64_t)this;
    if ((v3 & 4) == 0) {
      a3 = 1;
    }
    if (a3)
    {
      uint64_t v7 = this[7];
      if (v7)
      {
        uint64_t v8 = (uint64_t *)this[9];
        uint64_t v9 = 8 * v7;
        do
        {
          uint64_t v10 = *v8++;
          int v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
          int v12 = (re::EventBus *)*((void *)a2 + 36);
          v18[0] = v5;
          v18[1] = v11;
          re::EventBus::addToBatch<re::ecs2::Entity,REComponentDidActivateEvent,void>(v12, v5, v18, v11);
          v9 -= 8;
        }
        while (v9);
      }
      char v13 = (re::EventBus *)*((void *)a2 + 36);
      v18[0] = v5;
      this = re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityDidActivateEvent,void>(v13, v5, v18, 0);
    }
    uint64_t v14 = *(void *)(v5 + 328);
    if (v14)
    {
      uint64_t v15 = *(re::ecs2::Entity ***)(v5 + 344);
      uint64_t v16 = 8 * v14;
      do
      {
        uint64_t v17 = *v15++;
        this = (uint64_t *)re::ecs2::Entity::sendDidActivateEventsOnSceneRequiresAnchoringChange(v17, a2, a3);
        v16 -= 8;
      }
      while (v16);
    }
  }
  return this;
}

uint64_t *re::ecs2::Entity::sendWillDeactivateEventsOnSceneRequiresAnchoringChange(uint64_t *this, re::EventBus **a2, BOOL a3)
{
  int v3 = *((_DWORD *)this + 72);
  if (v3)
  {
    uint64_t v5 = (uint64_t)this;
    if ((v3 & 4) == 0) {
      a3 = 1;
    }
    uint64_t v7 = this[41];
    if (v7)
    {
      uint64_t v8 = (re::ecs2::Entity **)this[43];
      uint64_t v9 = 8 * v7;
      do
      {
        uint64_t v10 = *v8++;
        this = (uint64_t *)re::ecs2::Entity::sendWillDeactivateEventsOnSceneRequiresAnchoringChange(v10, (re::ecs2::Scene *)a2, a3);
        v9 -= 8;
      }
      while (v9);
    }
    if (a3)
    {
      int v11 = a2[36];
      v18[0] = v5;
      this = re::EventBus::addToBatch<re::ecs2::Entity,RESceneEntityWillDeactivateEvent,void>(v11, v5, v18, 0);
      uint64_t v12 = *(void *)(v5 + 56);
      if (v12)
      {
        char v13 = *(uint64_t **)(v5 + 72);
        uint64_t v14 = 8 * v12;
        do
        {
          uint64_t v15 = *v13++;
          uint64_t v16 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
          uint64_t v17 = a2[36];
          v18[0] = v5;
          v18[1] = v16;
          this = re::EventBus::addToBatch<re::ecs2::Entity,REComponentWillDeactivateEvent,void>(v17, v5, v18, v16);
          v14 -= 8;
        }
        while (v14);
      }
    }
  }
  return this;
}

void re::ecs2::Entity::updateAfterComponentDeserialized(re::ecs2::Entity *this, const re::ecs2::Component *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const re::ecs2::Component *))(*(void *)a2 + 40))(a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  do
  {
    {
      uint64_t v22 = v5;
      uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      int v11 = v10;
      uint64_t v5 = v22;
      if (v11)
      {
        re::introspect<re::ecs2::AnchorComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchorComponent(0);
        uint64_t v6 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        uint64_t v5 = v22;
      }
    }
    if ((char *)v5 == v6[203])
    {
      BOOL v20 = (!*((unsigned char *)a2 + 176) || *((unsigned char *)a2 + 177)) && *((unsigned char *)a2 + 178) == 0;
      re::ecs2::Entity::setSelfAnchored_Before(this, v20);
      re::ecs2::Entity::setSelfAnchored_After(this, v20);
      return;
    }
    uint64_t v7 = *(unsigned int *)(v5 + 56);
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void **)(v5 + 64);
    while (1)
    {
      uint64_t v9 = (_DWORD *)*v8;
      if (*(_DWORD *)*v8 == 1 && v9[10] == 3) {
        break;
      }
      ++v8;
      if (!--v7) {
        goto LABEL_14;
      }
    }
    uint64_t v5 = *((void *)v9 + 2);
  }
  while (v5);
LABEL_14:
  uint64_t v12 = (*(uint64_t (**)(const re::ecs2::Component *))(*(void *)a2 + 40))(a2);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
  uint64_t v14 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
  while (1)
  {
    {
      uint64_t v23 = v13;
      uint64_t v14 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
      int v19 = v18;
      uint64_t v13 = v23;
      if (v19)
      {
        re::introspect<re::ecs2::AnchoringComponent>(void)::info = (_UNKNOWN *)re::ecs2::introspect_AnchoringComponent(0);
        uint64_t v14 = re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
        uint64_t v13 = v23;
      }
    }
    if ((char *)v13 == v14[205]) {
      break;
    }
    uint64_t v15 = *(unsigned int *)(v13 + 56);
    if (v15)
    {
      for (unint64_t i = *(void **)(v13 + 64); ; ++i)
      {
        uint64_t v17 = (_DWORD *)*i;
        if (*(_DWORD *)*i == 1 && v17[10] == 3) {
          break;
        }
        if (!--v15) {
          return;
        }
      }
      uint64_t v13 = *((void *)v17 + 2);
      if (v13) {
        continue;
      }
    }
    return;
  }
  int v21 = *((unsigned __int8 *)a2 + 352);
  re::ecs2::Entity::setSelfRequiresAnchoring(this, v21);
}

uint64_t *re::ecs2::Entity::debugDescription@<X0>(re::ecs2::Entity *this@<X0>, re::DynamicString *a2@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  BOOL v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  re::DynamicString::setCapacity(&v18, 0x20uLL);
  if (*((void *)this + 3))
  {
    __src[0] = 34;
    re::DynamicString::append((re::DynamicString *)&v18, __src, 1uLL);
    size_t v4 = strlen(*(const char **)(*((void *)this + 3) + 280));
    re::DynamicString::append((re::DynamicString *)&v18, *(const char **)(*((void *)this + 3) + 280), v4);
    __src[0] = 34;
    uint64_t v5 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)&v18, __src, 1uLL);
  }
  else
  {
    *(void *)uint64_t __src = "<null>";
    uint64_t v15 = 6;
    uint64_t v5 = re::DynamicString::operator=((re::DynamicString *)&v18, (uint64_t)__src);
  }
  unsigned int v7 = *((_DWORD *)this + 72);
  v6.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(v7) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFBFFFFFFFDLL) & 0xFF01FF01FF01FF01;
  unsigned __int32 v22 = vmovn_s16(v6).u32[0];
  BOOL v23 = (v7 & 0x10) != 0;
  BOOL v24 = (v7 & 0x40) != 0;
  char v25 = v7 & 1;
  __int16 v26 = (v7 & 0x80) != 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  re::DynamicString::setCapacity(__src, 0x40uLL);
  re::DynamicString::append((re::DynamicString *)__src, "{ ", 2uLL);
  uint64_t v8 = 0;
  char v9 = 1;
  do
  {
    if (*((unsigned char *)&v22 + v8))
    {
      if ((v9 & 1) == 0) {
        re::DynamicString::append((re::DynamicString *)__src, " | ", 3uLL);
      }
      size_t v10 = strlen(off_264BE5528[v8]);
      re::DynamicString::append((re::DynamicString *)__src, off_264BE5528[v8], v10);
      char v9 = 0;
    }
    ++v8;
  }
  while (v8 != 9);
  re::DynamicString::append((re::DynamicString *)__src, " }", 2uLL);
  if (v19) {
    int v11 = v20;
  }
  else {
    int v11 = (char *)&v19 + 1;
  }
  if (v15) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (char *)&v15 + 1;
  }
  re::DynamicString::format((re::DynamicString *)"<Entity { name = \"%s\", id = %llu, parent = %s, child count = %zu, state = %s }>", a2, *((void *)this + 35), *((void *)this + 37), v11, *((void *)this + 41), v12);
  if (*(void *)__src && (v15 & 1) != 0) {
    (*(void (**)(void))(**(void **)__src + 40))();
  }
  uint64_t result = v18;
  if (v18)
  {
    if (v19) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v18 + 40))();
    }
  }
  return result;
}

uint64_t *re::ecs2::Entity::debugDescriptionRecursive@<X0>(re::ecs2::Entity *this@<X0>, re::DynamicString *a2@<X8>)
{
  size_t v4 = (*((void *)this + 41) << 6) + 64;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 1) = 0;
  re::DynamicString::setCapacity(a2, v4);
  re::ecs2::Entity::debugDescription(this, (re::DynamicString *)&v15);
  uint64_t v5 = v16 & 1;
  if (v16) {
    int16x8_t v6 = v17;
  }
  else {
    int16x8_t v6 = (char *)&v16 + 1;
  }
  if (v16) {
    size_t v7 = v16 >> 1;
  }
  else {
    size_t v7 = v16 >> 1;
  }
  re::DynamicString::append(a2, v6, v7);
  uint64_t v8 = (_anonymous_namespace_ *)v15;
  if (v15 && v5) {
    uint64_t v8 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v15 + 40))();
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v16 = 0;
  re::DynamicString::setCapacity(&v15, 0x20uLL);
  re::DynamicString::append((re::DynamicString *)&v15, "    ", 4uLL);
  uint64_t v9 = *((void *)this + 41);
  if (v9)
  {
    size_t v10 = (re::ecs2::Entity **)*((void *)this + 43);
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v10;
      re::DynamicString::append(a2, "\n", 1uLL);
      re::DynamicString::DynamicString((re::DynamicString *)v14, (const re::DynamicString *)&v15);
      if (*(void *)&v14[0])
      {
        if (BYTE8(v14[0])) {
          (*(void (**)(void))(**(void **)&v14[0] + 40))();
        }
        memset(v14, 0, sizeof(v14));
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  uint64_t result = v15;
  if (v15)
  {
    if (v16) {
      return (uint64_t *)(*(uint64_t (**)(void))(*v15 + 40))();
    }
  }
  return result;
}

void *anonymous namespace'::debugDescriptionRecursiveHelper(re::ecs2::Entity *a1, re::DynamicString *a2, char *a3)
{
  unint64_t v6 = *((void *)a3 + 1);
  if (v6) {
    size_t v7 = (const char *)*((void *)a3 + 2);
  }
  else {
    size_t v7 = a3 + 9;
  }
  size_t v8 = v6 >> 1;
  size_t v9 = v6 >> 1;
  if (*((void *)a3 + 1)) {
    size_t v10 = v8;
  }
  else {
    size_t v10 = v9;
  }
  re::DynamicString::append(a2, v7, v10);
  re::ecs2::Entity::debugDescription(a1, (re::DynamicString *)&v20);
  uint64_t v11 = v21[0] & 1;
  if (v21[0]) {
    uint64_t v12 = (const char *)v21[1];
  }
  else {
    uint64_t v12 = (char *)v21 + 1;
  }
  if (v21[0]) {
    size_t v13 = v21[0] >> 1;
  }
  else {
    size_t v13 = LOBYTE(v21[0]) >> 1;
  }
  re::DynamicString::append(a2, v12, v13);
  if (v20 && v11) {
    (*(void (**)(void))(*(void *)v20 + 40))();
  }
  uint64_t result = re::DynamicString::append((re::DynamicString *)a3, "    ", 4uLL);
  uint64_t v15 = *((void *)a1 + 41);
  if (v15)
  {
    unint64_t v16 = (uint64_t *)*((void *)a1 + 43);
    uint64_t v17 = 8 * v15;
    do
    {
      uint64_t v18 = *v16;
      re::DynamicString::append(a2, "\n", 1uLL);
      re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)a3);
      uint64_t result = *(void **)&v19[0];
      if (*(void *)&v19[0])
      {
        if (BYTE8(v19[0])) {
          uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)&v19[0] + 40))();
        }
        memset(v19, 0, sizeof(v19));
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  return result;
}

uint64_t re::ecs2::Entity::isStateValid(uint64_t a1, __int16 a2)
{
  int v2 = *(_DWORD *)(a1 + 288);
  if ((v2 & 0x80) == 0)
  {
    int v5 = (~v2 & 0x2008) == 0;
    unint64_t v6 = *(unsigned char **)(a1 + 128);
    BOOL v7 = v6 && (!v6[176] || v6[177]) && v6[178] == 0;
    uint64_t v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v9) {
      BOOL v10 = *(unsigned char *)(v9 + 352) != 0;
    }
    else {
      BOOL v10 = 0;
    }
    unsigned int v11 = *(_DWORD *)(a1 + 288);
    int v12 = (v11 >> 6) & 1;
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13 || (int v14 = *(_DWORD *)(v13 + 288), (v14 & 0x80) != 0))
    {
      int v22 = 0;
      int v16 = v7;
      uint64_t v18 = (void *)a1;
    }
    else
    {
      BOOL v30 = v7;
      int v31 = *(_DWORD *)(a1 + 288);
      int v15 = 1;
      int v16 = v7;
      BOOL v29 = v10;
      char v17 = v10;
      do
      {
        uint64_t v18 = (void *)v13;
        if ((v17 & 1) == 0)
        {
          uint64_t v19 = *(unsigned char **)(v13 + 128);
          if (v19) {
            LODWORD(v19) = (!v19[176] || v19[177]) && v19[178] == 0;
          }
          v16 |= v19;
        }
        uint64_t v20 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v18 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v20) {
          BOOL v21 = *(unsigned char *)(v20 + 352) != 0;
        }
        else {
          BOOL v21 = 0;
        }
        v15 &= v14;
        int v5 = v5 & ((~v14 & 0x2008) == 0);
        v12 |= (v14 & 0x40) >> 6;
        uint64_t v13 = v18[3];
        if (!v13) {
          break;
        }
        v17 |= v21;
        int v14 = *(_DWORD *)(v13 + 288);
      }
      while ((v14 & 0x80) == 0);
      int v22 = v15 ^ 1;
      BOOL v7 = v30;
      LOBYTE(v11) = v31;
      BOOL v10 = v29;
    }
    uint64_t v23 = v18[2];
    if (v23)
    {
      char v24 = 0;
      BOOL v25 = *(void *)(v23 + 56) == 0;
      int v26 = *(unsigned __int8 *)(v23 + 48);
      LODWORD(v23) = *(unsigned char *)(v23 + 48) != 0;
      if (((v25 | v22 | v12) & 1) == 0 && ((v5 ^ 1) & 1) == 0) {
        char v24 = (v26 == 0) | v16;
      }
      if ((a2 & 2) == 0)
      {
LABEL_33:
        int v27 = 0;
        if ((a2 & 0x20) == 0)
        {
LABEL_38:
          if ((a2 & 4) != 0)
          {
            v27 |= v16 ^ ((*(unsigned char *)(a1 + 288) & 4) >> 2);
            if ((a2 & 0x100) == 0)
            {
LABEL_40:
              if ((a2 & 0x10) == 0) {
                goto LABEL_41;
              }
              goto LABEL_48;
            }
          }
          else if ((a2 & 0x100) == 0)
          {
            goto LABEL_40;
          }
          v27 |= v10 ^ *(unsigned __int8 *)(a1 + 289);
          if ((a2 & 0x10) == 0)
          {
LABEL_41:
            if ((a2 & 0x40) == 0) {
              goto LABEL_42;
            }
            goto LABEL_49;
          }
LABEL_48:
          v27 |= v23 ^ ((*(unsigned char *)(a1 + 288) & 0x10) >> 4);
          if ((a2 & 0x40) == 0)
          {
LABEL_42:
            if ((a2 & 1) == 0)
            {
LABEL_44:
              char v8 = v27 ^ 1;
              return v8 & 1;
            }
LABEL_43:
            LOBYTE(v27) = v27 | v24 ^ *(unsigned char *)(a1 + 288);
            goto LABEL_44;
          }
LABEL_49:
          v27 |= ((v11 ^ *(unsigned char *)(a1 + 288)) & 0x40) >> 6;
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_43;
        }
LABEL_37:
        v27 |= v7 ^ ((*(unsigned char *)(a1 + 288) & 0x20) >> 5);
        goto LABEL_38;
      }
    }
    else
    {
      char v24 = 0;
      if ((a2 & 2) == 0) {
        goto LABEL_33;
      }
    }
    int v27 = v5 ^ ((*(unsigned char *)(a1 + 288) & 2) >> 1);
    if ((a2 & 0x20) == 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  char v8 = 1;
  return v8 & 1;
}

void *re::ecs2::allocInfo_Entity(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_364, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_364))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92EA8, "Entity");
    __cxa_guard_release(&_MergedGlobals_364);
  }
  return &unk_26AF92EA8;
}

void re::ecs2::initInfo_Entity(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 4161118214;
  v5[1] = "Entity";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_Entity(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_Entity(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Entity", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Entity, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Entity, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Entity>, this);
}

uint64_t re::EventBus::getTypeId<RESceneAnchoredStateChangedEvent>()
{
  {
    if (v2)
    {
      re::EventBus::getTypeId<RESceneAnchoredStateChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32RESceneAnchoredStateChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v3);
    }
  }
  return v0[28];
}

void re::ecs2::PackedTypeIDs::~PackedTypeIDs(re::ecs2::PackedTypeIDs *this)
{
  unsigned int v1 = (re::ecs2::PackedTypeIDs *)*((void *)this + 1);
  if (v1 != (re::ecs2::PackedTypeIDs *)((char *)this + 16) && v1 != 0)
  {
    int v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, re::ecs2::PackedTypeIDs *))(*(void *)v3[2] + 40))(v3[2], v1);
  }
}

unsigned __int16 *re::ecs2::PackedTypeIDs::ensureCapacity(unsigned __int16 *this, unint64_t a2)
{
  if (this[2] < a2)
  {
    int v2 = this;
    uint64_t v3 = this[1];
    long long v4 = re::globalAllocators((re *)this);
    this = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 32 * v3, 16);
    int v5 = this;
    if (v3)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 2 * v3;
      do
      {
        *(_OWORD *)&this[v6] = *(_OWORD *)(*((void *)v2 + 1) + v6 * 2);
        v6 += 8;
      }
      while (8 * v3 != v6);
      char v8 = &this[8 * v3];
      if (v7 <= v3 + 1) {
        unint64_t v7 = v3 + 1;
      }
      this = (unsigned __int16 *)memset(v8, 255, 16 * (v7 - v3));
    }
    uint64_t v9 = (unsigned __int16 *)*((void *)v2 + 1);
    if (v9 != v2 + 8 && v9 != 0)
    {
      unsigned int v11 = re::globalAllocators((re *)this);
      this = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(void *)v11[2] + 40))(v11[2], v9);
    }
    *((void *)v2 + 1) = v5;
    v2[2] = 16 * v3;
  }
  return this;
}

uint64_t re::ecs2::AnchorComponent::makeSyncInfo(re::ecs2::AnchorComponent *this)
{
  uint64_t v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadDeltaCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadDeltaCb();
  return v1;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  RESyncBitReaderReadData();
  ReadOptional<unsigned long long>(v15);
  if (*(unsigned char *)(a3 + 184)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v15[0] == 0;
  }
  if (!v4)
  {
    if (*(unsigned char *)(a3 + 184)) {
      BOOL v5 = v15[0] == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      *(unsigned char *)(a3 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    }
    else
    {
      if (!*(unsigned char *)(a3 + 184) && v15[0]) {
        *(unsigned char *)(a3 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
      }
      *(void *)(a3 + 192) = v16;
    }
  }
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  if (*(unsigned char *)(a3 + 200) && *(unsigned char *)(a3 + 178) != 1)
  {
    *(unsigned char *)(a3 + 178) = 1;
    re::ecs2::AnchorComponent::onAnchorStateChanged((re::ecs2::AnchorComponent *)a3);
  }
  v14.i64[0] = 0x3F8000003F800000;
  v14.i64[1] = 1065353216;
  RESyncBitReaderReadData();
  float v6 = 0.0 * (float)(0.0 + 0.0);
  float v7 = (float)(0.0 + 0.0) * 0.0;
  float v8 = (float)(0.0 + 0.0) * 1.0;
  v9.i32[3] = 0;
  v9.f32[0] = 1.0 - (float)(v6 + v6);
  v9.f32[1] = v7 + v8;
  v9.f32[2] = v7 - v8;
  v10.i32[3] = 0;
  v10.f32[0] = v7 - v8;
  v10.f32[1] = v9.f32[0];
  v10.f32[2] = v7 + v8;
  v11.i32[3] = 0;
  v11.f32[0] = v7 + v8;
  v11.f32[1] = v7 - v8;
  v11.f32[2] = v9.f32[0];
  long long v12 = 0uLL;
  HIDWORD(v12) = 1.0;
  *(float32x4_t *)(a3 + 48) = vmulq_n_f32(v9, 1.0);
  *(float32x4_t *)(a3 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = vmulq_n_f32(v10, *(float *)vshrq_n_u64(v14, 0x20uLL).i32);
  *(float32x4_t *)(a3 + 80) = vmulq_laneq_f32(v11, (float32x4_t)v14, 2);
  *(_OWORD *)(a3 + 96) = v12;
  return 1;
}

uint64_t ReadOptional<unsigned long long>(unsigned char *a1)
{
  uint64_t result = RESyncBitReaderReadBool();
  *a1 = 0;
  return result;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x237DBB060](a2, a3 + 25, 16);
  v7[0] = *(unsigned char *)(a3 + 184);
  if (v7[0]) {
    uint64_t v8 = *(void *)(a3 + 192);
  }
  WriteOptional<unsigned long long>(a2, v7);
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteBool();
  long long v10 = xmmword_23435FBB0;
  int32x4_t v11 = 0u;
  long long v9 = 0u;
  re::decomposeScaleRotationTranslation<float>(a3 + 48, &v11, &v10, &v9);
  v6[0] = v11;
  v6[1] = v10;
  _DWORD v6[2] = v9;
  MEMORY[0x237DBB060](a2, v6, 48);
  return 1;
}

uint64_t WriteOptional<unsigned long long>(uint64_t a1, unsigned char *a2)
{
  uint64_t result = RESyncBitWriterWriteBool();
  if (*a2)
  {
    JUMPOUT(0x237DBB060);
  }
  return result;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a3, 0);
  if (RESyncObjectReadContextIsLocalSession())
  {
    uint64_t v5 = RESyncBitReaderDataPtr();
    uint64_t v6 = RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    MEMORY[0x237DBB060](a3, v5, v6);
    return 1;
  }
  else
  {
    return re::SRTNetworkSyncHelper::read(a2, a3);
  }
}

uint64_t re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __int16 v13 = 0;
  char v12 = 0;
  RESyncBitReaderReadData();
  ReadOptional<unsigned long long>(v10);
  int v5 = v10[0];
  uint64_t v6 = v11;
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  RESyncBitReaderReadBool();
  MEMORY[0x237DBB060](a2, v14, 16);
  v8[0] = v5;
  if (v5) {
    uint64_t v9 = v6;
  }
  WriteOptional<unsigned long long>(a2, v8);
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteBool();
  uint64_t result = RESyncBitWriterWriteBool();
  if (a3)
  {
    RESyncBitReaderReadData();
    ReadOptional<unsigned long long>(v10);
    RESyncBitReaderReadBool();
    RESyncBitReaderReadBool();
    return RESyncBitReaderReadBool();
  }
  return result;
}

uint64_t ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a4, a3);
  if (RESyncObjectReadContextIsLocalSession())
  {
    uint64_t v7 = RESyncBitReaderDataPtr();
    uint64_t v8 = RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    MEMORY[0x237DBB060](a4, v7, v8);
    return 1;
  }
  else
  {
    return re::SRTNetworkSyncHelper::readDelta(a2, a3, a4);
  }
}

BOOL ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a3, 0);
  if (RESyncObjectWriteContextIsLocalSession())
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x237DBB060);
  }
  return re::SRTNetworkSyncHelper::write(a2, a3);
}

BOOL ___ZN2re4ecs215AnchorComponent12makeSyncInfoEv_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  re::ecs2::AnchorComponent::makeSyncInfo(void)::$_0::operator()(a2, a4, a3);
  if (RESyncObjectWriteContextIsLocalSession())
  {
    RESyncBitReaderDataPtr();
    RESyncBitReaderBytesLeft();
    RESyncBitReaderSkipData();
    JUMPOUT(0x237DBB060);
  }
  return re::SRTNetworkSyncHelper::writeDelta(a2, a3, a4);
}

uint64_t re::ecs2::AnchorComponent::setWorldTransform(uint64_t result, float32x4_t *a2)
{
  if (vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(*a2), (int8x16_t)vcgezq_f32(*a2)), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[1]), (int8x16_t)vcgezq_f32(a2[1]))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[2]), (int8x16_t)vcgezq_f32(a2[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(a2[3]), (int8x16_t)vcgezq_f32(a2[3])))))))
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) AnchorComponent cannot have NaN worldTransform", "!transform.containsNaN()", "setWorldTransform", 203);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    float32x4_t v2 = *a2;
    float32x4_t v3 = a2[1];
    float32x4_t v4 = a2[3];
    *(float32x4_t *)(result + 80) = a2[2];
    *(float32x4_t *)(result + 96) = v4;
    *(float32x4_t *)(result + 48) = v2;
    *(float32x4_t *)(result + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v3;
    if (fabsf(*(float *)(result + 108) + -1.0) < 0.00001) {
      *(_DWORD *)(result + 108) = 1065353216;
    }
  }
  return result;
}

void re::ecs2::AnchorComponent::onAnchorStateChanged(re::ecs2::AnchorComponent *this)
{
  uint64_t v1 = (re::ecs2::Entity *)*((void *)this + 2);
  if (v1)
  {
    BOOL v2 = (!*((unsigned char *)this + 176) || *((unsigned char *)this + 177)) && *((unsigned char *)this + 178) == 0;
    re::ecs2::Entity::setSelfAnchored_Before(*((re::ecs2::Entity **)this + 2), v2);
    re::ecs2::Entity::setSelfAnchored_After(v1, v2);
  }
}

uint64_t *re::IntrospectionInfo<re::Optional<unsigned long long>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info = (uint64_t)&unk_26E70C748;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    int v3 = re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v3) {
      return &re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info;
    }
    int v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = (re *)re::introspect_uint64_t((re *)1, a2);
  if (re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      uint64_t v7 = re::introspectionSharedMutex(v6);
      std::__shared_mutex_base::unlock(v7);
    }
  }
  else
  {
    uint64_t v9 = (uint64_t)v6;
    re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized = 1;
    int v10 = *((_DWORD *)v6 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info, 0);
    qword_268775100 = 0x100000000DLL;
    dword_268775108 = v10;
    word_26877510C = 0;
    *(void *)&xmmword_268775110 = 0;
    *((void *)&xmmword_268775110 + 1) = 0xFFFFFFFFLL;
    qword_268775120 = v9;
    unk_268775128 = 0;
    re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info = (uint64_t)&unk_26E70C748;
    re::IntrospectionRegistry::add(v11, v12);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
    if (BYTE8(v15)) {
      __int16 v13 = v16;
    }
    else {
      __int16 v13 = (char *)&v15 + 9;
    }
    if (void)v15 && (BYTE8(v15)) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    long long v15 = *(_OWORD *)(v9 + 32);
    xmmword_268775110 = v14;
    re::StringID::destroyString((re::StringID *)v17);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info;
}

void *re::ecs2::allocInfo_AnchorComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92F28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF92F28))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF92F68, "AnchorComponent");
    __cxa_guard_release(&qword_26AF92F28);
  }
  return &unk_26AF92F68;
}

void re::ecs2::initInfo_AnchorComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v30[0] = 0x61C8416D6D70DB50;
  v30[1] = "AnchorComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_365, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_365);
    if (v4)
    {
      int v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92F30 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      int v10 = re::IntrospectionInfo<unsigned char [16]>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "anchorIdentifier";
      *(void *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v10;
      *(void *)(v11 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92F38 = v11;
      char v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "worldTransform";
      *(void *)(v14 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v13;
      *(void *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v14 + 32) = 0x3000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92F40 = v14;
      long long v15 = re::introspectionAllocator((re *)v14);
      uint64_t v16 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 24, 8);
      *(_DWORD *)uint64_t v16 = 5;
      *((void *)v16 + 1) = "m_transformInCoordinateSpace";
      *((void *)v16 + 2) = "worldTransform";
      qword_26AF92F48 = (uint64_t)v16;
      char v17 = re::introspectionAllocator(v16);
      uint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "requiresLocalAnchoring";
      *(void *)(v20 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v19;
      *(void *)(v20 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v20 + 32) = 0xB000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92F50 = v20;
      BOOL v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "enableShadows";
      *(void *)(v24 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v23;
      *(void *)(v24 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v24 + 32) = 0x2900000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92F58 = v24;
      BOOL v25 = re::introspectionAllocator((re *)v24);
      int v27 = re::IntrospectionInfo<re::Optional<unsigned long long>>::get(1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "lateLatchId";
      *(void *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v27;
      *(void *)(v28 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v28 + 32) = 0xB800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF92F60 = v28;
      __cxa_guard_release(&_MergedGlobals_365);
    }
  }
  *((void *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 7;
  *((void *)this + 8) = &qword_26AF92F30;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchorComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchorComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchorComponent>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::ecs2::AnchorComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v29 = v31;
}

double re::internal::defaultConstruct<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AnchorComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnchorComponent>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchorComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorComponent>, this);
}

void re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  uint64_t v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    uint64_t v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    long long v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 0x10uLL, 8uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

void *re::IntrospectionOptional<unsigned long long>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<unsigned long long>::~IntrospectionOptional(void *a1)
{
  *a1 = &unk_26E6CB2D8;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionOptional<unsigned long long>::construct(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<unsigned long long>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<unsigned long long>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(unsigned char *)a2) {
      *(unsigned char *)a2 = 1;
    }
    *(void *)(a2 + 8) = 0;
  }
  else if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<unsigned long long>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 8;
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    if (!*(unsigned char *)result) {
      *(unsigned char *)uint64_t result = 1;
    }
    *(void *)(result + 8) = v2;
  }
  else if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::AnchorComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(v1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)uint64_t v1 = &unk_26E6F71F0;
  *(_DWORD *)(v1 + 4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(v1 + 33) = 0;
  *(void *)(v1 + 25) = 0;
  *(unsigned char *)(v1 + 41) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(v1 + 48) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_23435FD60;
  *(_OWORD *)(v1 + 80) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 96) = xmmword_23435FBB0;
  *(_OWORD *)(v1 + 112) = xmmword_23435FD50;
  *(_OWORD *)(v1 + 128) = xmmword_23435FD60;
  *(_OWORD *)(v1 + 14re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = xmmword_23435FD80;
  *(_OWORD *)(v1 + 160) = xmmword_23435FBB0;
  *(unsigned char *)(v1 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v1 + 176) = 0;
  *(_WORD *)(v1 + 200) = 1;
  return result;
}

double re::ecs2::ECSHelper::deepCopyEntity@<D0>(re::ecs2::ECSHelper *this@<X0>, const re::ecs2::Entity *a2@<X1>, BOOL (*a3)(void *, void *)@<X4>, uint64_t a4@<X2>, uint64_t (*a5)(uint64_t, uint64_t)@<X3>, re::ecs2::Entity **a6@<X8>)
{
  int v10 = 0;
  memset(v9, 0, sizeof(v9));
  uint64_t v11 = 0x7FFFFFFFLL;
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v9);
}

void anonymous namespace'::deepCopyEntity(re::ecs2::EntityFactory *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, re::ecs2::Entity **a7@<X8>)
{
  uint64_t v37 = a1;
  if (!a1)
  {
    *a7 = 0;
    return;
  }
  uint64_t v13 = a1;
  unint64_t v14 = *((void *)a1 + 7);
  long long v15 = re::ecs2::EntityFactory::instance(a1);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v15, v14, a7);
  uint64_t v16 = *a7;
  int v36 = *a7;
  unint64_t v17 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)v13 ^ ((unint64_t)v13 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)v13 ^ ((unint64_t)v13 >> 30))) >> 27));
  unint64_t v18 = v17 ^ (v17 >> 31);
  if (!*(void *)a4)
  {
    LODWORD(v19) = 0;
    goto LABEL_10;
  }
  unint64_t v19 = v18 % *(unsigned int *)(a4 + 24);
  uint64_t v20 = *(unsigned int *)(*(void *)(a4 + 8) + 4 * v19);
  if (v20 == 0x7FFFFFFF)
  {
LABEL_10:
    re::HashTable<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a4, v19, v18, &v37, &v36);
    ++*(_DWORD *)(a4 + 40);
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(a4 + 16);
  while (*(re::ecs2::EntityFactory **)(v21 + 32 * v20 + 16) != v13)
  {
    uint64_t v20 = *(_DWORD *)(v21 + 32 * v20 + 8) & 0x7FFFFFFF;
    if (v20 == 0x7FFFFFFF) {
      goto LABEL_10;
    }
  }
LABEL_11:
  re::StringID::operator=((unint64_t *)v16 + 34, (uint64_t *)v13 + 34);
  re::ecs2::Entity::setSelfEnabled(v16, (*((_DWORD *)v13 + 72) >> 3) & 1);
  re::ecs2::Entity::setSelfEnabledForFlag(v16, (*((_DWORD *)v13 + 72) >> 13) & 1, 0x2000);
  if (*((void *)v13 + 7))
  {
    unint64_t v22 = 0;
    do
    {
      uint64_t v23 = (re::ecs2::ECSHelper **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v13 + 32, v22);
      uint64_t v24 = *v23;
      uint64_t v25 = (*(uint64_t (**)(re::ecs2::ECSHelper *))(*(void *)*v23 + 40))(*v23);
      uint64_t v27 = v25;
      if ((!a3 || ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 8))(v25) & 1) == 0)
        && (!a5 || (a5(v27, a6) & 1) == 0)
        && (*(unsigned char *)(v27 + 40) & 1) == 0)
      {
        re::ecs2::ECSHelper::deepCopyComponent(v24, v26, (uint64_t *)&v36);
        uint64_t v28 = *a7;
        int v35 = v36;
        if (v36) {
          long long v29 = (char *)v36 + 8;
        }
        re::ecs2::EntityComponentCollection::add((uint64_t)v28 + 32, (uint64_t *)&v35, 1);
        if (v35)
        {

          int v35 = 0;
        }
        if (v36) {
      }
        }
      ++v22;
      uint64_t v13 = v37;
    }
    while (v22 < *((void *)v37 + 7));
  }
  if (a2)
  {
    unint64_t v30 = *((void *)v13 + 41);
    long long v31 = *a7;
    if (*((void *)v31 + 40) < v30)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((void *)v31 + 39, v30);
      unint64_t v30 = *((void *)v13 + 41);
    }
    if (v30)
    {
      uint64_t v32 = (void *)*((void *)v13 + 43);
      int v33 = (void *)((char *)v31 + 304);
      uint64_t v34 = 8 * v30;
      do
      {
        re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(v33, (uint64_t *)&v36);
        if (v36) {

        }
        ++v32;
        v34 -= 8;
      }
      while (v34);
    }
  }
}

void *anonymous namespace'::fixUpEntityHandle(void *a1, uint64_t a2)
{
  v15[4] = *MEMORY[0x263EF8340];
  v15[0] = &unk_26E70C7C8;
  v15[1] = a2;
  v15[3] = v15;
  uint64_t v4 = a1[7];
  if (v4)
  {
    int v5 = (const re::IntrospectionBase ***)a1[9];
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v8 = (*((uint64_t (**)(const re::IntrospectionBase **))*v7 + 5))(v7);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
      re::IntrospectionWalker::walk(v9, v7, (uint64_t)v15);
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v10 = a1[41];
  if (v10)
  {
    uint64_t v11 = (uint64_t *)a1[43];
    uint64_t v12 = 8 * v10;
    do
    {
      uint64_t v13 = *v11++;
      v12 -= 8;
    }
    while (v12);
  }
  return std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](v15);
}

void re::ecs2::ECSHelper::deepCopyComponent(re::ecs2::ECSHelper *this@<X0>, const re::ecs2::Component *a2@<X1>, uint64_t *a3@<X8>)
{
  if (this)
  {
    int v5 = *(uint64_t (**)(re::ecs2::ECSHelper *))((*(uint64_t (**)(re::ecs2::ECSHelper *, const re::ecs2::Component *))(*(void *)this + 40))(this, a2)+ 8);
    if (v5)
    {
      uint64_t v6 = v5(this);
      uint64_t v7 = v6;
      *a3 = v6;
      if (v6) {
        id v8 = (id)(v6 + 8);
      }
    }
    else
    {
      memset(v15, 0, sizeof(v15));
      uint64_t v9 = (*(uint64_t (**)(re::ecs2::ECSHelper *))(*(void *)this + 40))(this);
      uint64_t v10 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      uint64_t v11 = (*(uint64_t (**)(re::ecs2::ECSHelper *))(*(void *)this + 40))(this);
      uint64_t v12 = (re *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
      uint64_t v13 = re::globalAllocators(v12);
      unint64_t v14 = (const re::IntrospectionBase **)*a3;
      v16[0] = v13[2];
      v16[1] = 0;
      void v16[2] = v15;
    }
  }
  else
  {
    *a3 = 0;
  }
}

void *re::ecs2::ECSHelper::logIdentifier@<X0>(re::ecs2::ECSHelper **this@<X0>, const re::ecs2::Component *a2@<X1>, const re::ecs2::Entity *a3@<X2>, re::DynamicString *a4@<X8>)
{
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  re::DynamicString::setCapacity(a4, 0);
  uint64_t v9 = this[2];
  if (v9)
  {
    re::ecs2::ECSHelper::logIdentifier(v9, a3, (re::DynamicString *)&v15);
    re::DynamicString::operator=(a4, (re::DynamicString *)&v15);
    if (v15 && (v16 & 1) != 0) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    uint64_t v10 = ":";
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    long long v15 = a3;
    uint64_t v16 = 0;
    re::DynamicString::setCapacity(&v15, 0x40uLL);
    re::DynamicString::operator=(a4, (re::DynamicString *)&v15);
    if (v15 && (v16 & 1) != 0) {
      (*(void (**)(void))(*(void *)v15 + 40))();
    }
    uint64_t v10 = "<No entity>:";
  }
  size_t v11 = strlen(v10);
  re::DynamicString::append(a4, v10, v11);
  uint64_t v12 = *(const char **)((*((uint64_t (**)(re::ecs2::ECSHelper **))*this + 5))(this) + 32);
  size_t v13 = strlen(v12);
  double result = re::DynamicString::append(a4, v12, v13);
  if (a2) {
    return (void *)re::DynamicString::appendf(a4, ".%s", (const char *)a2);
  }
  return result;
}

_anonymous_namespace_ *re::ecs2::ECSHelper::logIdentifier@<X0>(re::ecs2::ECSHelper *this@<X0>, const re::ecs2::Entity *a2@<X1>, re::DynamicString *a3@<X8>)
{
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  *(void *)a3 = a2;
  *((void *)a3 + 1) = 0;
  re::DynamicString::setCapacity(a3, 0x100uLL);
  uint64_t v7 = this;
  do
  {
    id v8 = v7;
    uint64_t v7 = (re::ecs2::ECSHelper *)*((void *)v7 + 3);
  }
  while (v7);
  if (*((void *)v8 + 2))
  {
    uint64_t v9 = this;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = (re::ecs2::ECSHelper *)*((void *)v9 + 3);
    }
    while (v9);
    uint64_t v11 = *((void *)v10 + 2);
    uint64_t v12 = this;
    if (*(void *)(v11 + 32) < 2uLL && (size_t v13 = *(unsigned char **)(v11 + 40), v12 = this, v13) && (v12 = this, !*v13))
    {
      uint64_t v32 = this;
      do
        uint64_t v32 = (re::ecs2::ECSHelper *)*((void *)v32 + 3);
      while (v32);
      re::DynamicString::appendf(a3, "<Unnamed scene (%p)>:/");
    }
    else
    {
      do
        uint64_t v12 = (re::ecs2::ECSHelper *)*((void *)v12 + 3);
      while (v12);
      re::DynamicString::appendf(a3, "%s:/");
    }
  }
  else
  {
    re::DynamicString::append(a3, "<No scene>:/", 0xCuLL);
  }
  int v35 = 1;
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  int v33 = (uint64_t *)a2;
  unint64_t v34 = 0;
  double result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v33, 0);
  char v15 = v35 + 2;
  v35 += 2;
  do
  {
    if (!v33)
    {
      double result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v33, v34 + 1);
      char v15 = v35 + 2;
      v35 += 2;
      goto LABEL_28;
    }
    if (v15)
    {
      if (v34 - 8 >= 0xFFFFFFFFFFFFFFF7) {
        goto LABEL_28;
      }
      unint64_t v16 = v34 + 1;
      unint64_t v18 = 16;
      goto LABEL_24;
    }
    unint64_t v16 = v34 + 1;
    if (v34 >= v36 && v36 < v16)
    {
      unint64_t v18 = 2 * v36;
LABEL_24:
      if (v18 <= v16) {
        unint64_t v19 = v16;
      }
      else {
        unint64_t v19 = v18;
      }
      double result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v33, v19);
      char v15 = v35;
    }
LABEL_28:
    BOOL v20 = (v15 & 1) == 0;
    uint64_t v21 = v37;
    unint64_t v22 = v34;
    if (!v20) {
      uint64_t v21 = &v36;
    }
    v21[v34] = (unint64_t)this;
    unint64_t v23 = v22 + 1;
    unint64_t v34 = v23;
    char v24 = v35;
    char v15 = v35 + 2;
    v35 += 2;
    this = (re::ecs2::ECSHelper *)*((void *)this + 3);
  }
  while (this && (*((unsigned char *)this + 288) & 0x80) == 0);
  BOOL v20 = (v24 & 1) == 0;
  uint64_t v25 = v37;
  if (!v20) {
    uint64_t v25 = &v36;
  }
  int v26 = &v25[v23];
  if (v15) {
    goto LABEL_37;
  }
  while (1)
  {
    uint64_t v27 = v37;
    if (v26 == v37) {
      break;
    }
    while (1)
    {
      if (v26 != &v27[v34]) {
        re::DynamicString::append(a3, "/", 1uLL);
      }
      uint64_t v29 = *--v26;
      uint64_t v28 = (const void *)v29;
      unint64_t v30 = *(const char **)(v29 + 280);
      if (*(void *)(v29 + 272) > 1uLL || *v30)
      {
        size_t v31 = strlen(v30);
        double result = (_anonymous_namespace_ *)re::DynamicString::append(a3, v30, v31);
      }
      else
      {
        double result = (_anonymous_namespace_ *)re::DynamicString::appendf(a3, "<Unnamed entity (%p)>", v28);
      }
      if ((v35 & 1) == 0) {
        break;
      }
LABEL_37:
      uint64_t v27 = &v36;
      if (v26 == &v36) {
        return result;
      }
    }
  }
  double result = (_anonymous_namespace_ *)v33;
  if (v33) {
    return (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *, unint64_t *))(*v33 + 40))(v33, v26);
  }
  return result;
}

void std::__function::__func<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26E70C7C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E70C7C8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t a1, uint64_t a2, id **a3)
{
  if (*(_DWORD *)(a2 + 16) != 11) {
    return;
  }
  if (*(uint64_t (**)(re::Allocator *, uint64_t, int, id *, re::ecs2::EntityHandle *))(a2 + 88) != re::internal::entityHandleDeepCopy) {
    return;
  }
  uint64_t v3 = *a3;
  if (!**a3) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  id WeakRetained = (char *)objc_loadWeakRetained(*a3);
  uint64_t v6 = WeakRetained - 8;
  if (!WeakRetained) {
    uint64_t v6 = 0;
  }
  if (!*(void *)v4
    || (unint64_t v7 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * ((unint64_t)v6 ^ ((unint64_t)v6 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                               * ((unint64_t)v6 ^ ((unint64_t)v6 >> 30))) >> 27)),
        uint64_t v8 = *(unsigned int *)(*(void *)(v4 + 8) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(v4 + 24))),
        v8 == 0x7FFFFFFF))
  {
LABEL_9:
    uint64_t v9 = 0;
    if (!WeakRetained) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  while (*(char **)(v11 + 32 * v8 + 16) != v6)
  {
    uint64_t v8 = *(_DWORD *)(v11 + 32 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = (uint64_t *)(v11 + 32 * v8 + 24);
  if (WeakRetained) {
LABEL_10:
  }

LABEL_11:
  if (v9)
  {
    uint64_t v10 = *v9;
    if (v10)
    {
      re::ecs2::EntityHandle::reset((re::ecs2::EntityHandle *)v3);
      objc_storeWeak(v3, (id)(v10 + 8));
      v3[1] = *(id *)(v10 + 296);
    }
  }
}

uint64_t std::__function::__func<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

void *re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(void *a1)
{
  *a1 = &unk_26E70C8C8;
  uint64_t v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(a1 + 1));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  return a1;
}

void re::ecs2::SystemCollection::~SystemCollection(re::ecs2::SystemCollection *this)
{
  re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)this + 7);
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(this);
}

{
  uint64_t vars8;

  re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)this + 7);
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::SystemCollection::willClear(re::ecs2::SystemCollection *this)
{
  if (*((void *)this + 6))
  {
    uint64_t v2 = *((void *)this + 3);
    if (v2)
    {
      uint64_t v3 = (void *)*((void *)this + 5);
      uint64_t v4 = &v3[v2];
      do
      {
        uint64_t v5 = *v3;
        uint64_t v6 = (*(uint64_t (**)(void, void))(**((void **)this + 6) + 96))(*((void *)this + 6), *v3);
        uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 6) + 104))(*((void *)this + 6));
        uint64_t v8 = *(uint64_t **)(v7 + 40);
        uint64_t v9 = *(void *)(v7 + 24);
        if (v6)
        {
          if (v9)
          {
            uint64_t v10 = 8 * v9;
            do
            {
              if (*v8 == v6) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 56))(v5, v6);
              }
              ++v8;
              v10 -= 8;
            }
            while (v10);
          }
        }
        else if (v9)
        {
          uint64_t v11 = 8 * v9;
          do
          {
            uint64_t v12 = *v8++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 56))(v5, v12);
            v11 -= 8;
          }
          while (v11);
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  uint64_t v13 = *((void *)this + 3);
  if (v13)
  {
    unint64_t v14 = (uint64_t *)*((void *)this + 5);
    uint64_t v15 = 8 * v13;
    do
    {
      uint64_t v16 = *v14++;
      *(void *)(v16 + 40) = 0;
      v15 -= 8;
    }
    while (v15);
  }
  if (*((_DWORD *)this + 21))
  {
    uint64_t v17 = *((unsigned int *)this + 20);
    if (v17) {
      memset_pattern16(*((void **)this + 8), &unk_2343655D0, 4 * v17);
    }
    unint64_t v18 = *((unsigned int *)this + 22);
    if (v18)
    {
      uint64_t v19 = 0;
      for (unint64_t i = 0; i < v18; ++i)
      {
        uint64_t v21 = *((void *)this + 9) + v19;
        int v22 = *(_DWORD *)(v21 + 8);
        if (v22 < 0)
        {
          *(_DWORD *)(v21 + 8) = v22 & 0x7FFFFFFF;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v21 + 32);
          unint64_t v18 = *((unsigned int *)this + 22);
        }
        v19 += 72;
      }
    }
    *((_DWORD *)this + 21) = 0;
    *((_DWORD *)this + 22) = 0;
    int v23 = *((_DWORD *)this + 24) + 1;
    *((_DWORD *)this + 23) = 0x7FFFFFFF;
    *((_DWORD *)this + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v23;
  }
}

_anonymous_namespace_ *re::ecs2::SystemCollection::willInsert(re::ecs2::SystemCollection *a1, uint64_t a2, re::ecs2::System **a3)
{
  uint64_t v5 = *a3;
  *((void *)v5 + 5) = *((void *)a1 + 6);
  double result = re::ecs2::SystemCollection::addSystemToTypeInfoMap(a1, v5);
  if (*((void *)a1 + 6))
  {
    (*(void (**)(void))(*(void *)*a3 + 40))();
    uint64_t v7 = (*(uint64_t (**)(void, re::ecs2::System *))(**((void **)a1 + 6) + 96))(*((void *)a1 + 6), *a3);
    if (v7)
    {
      uint64_t v8 = v7;
      double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((void **)a1 + 6) + 104))(*((void *)a1 + 6));
      uint64_t v9 = *((void *)result + 3);
      if (v9)
      {
        uint64_t v10 = (void *)*((void *)result + 5);
        uint64_t v11 = 8 * v9;
        do
        {
          if (*v10 == v8) {
            double result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(void *)*a3 + 48))(*a3, v8);
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else
    {
      int v12 = *((unsigned __int8 *)*a3 + 85);
      double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((void **)a1 + 6) + 104))(*((void *)a1 + 6));
      uint64_t v13 = (uint64_t *)*((void *)result + 5);
      uint64_t v14 = *((void *)result + 3);
      if (v12 == 1)
      {
        if (v14)
        {
          uint64_t v15 = 8 * v14;
          do
          {
            uint64_t v16 = *(void *)(*v13 + 376);
            if (v16 && *(void *)(v16 + 24) != 1) {
              double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)*a3 + 48))();
            }
            ++v13;
            v15 -= 8;
          }
          while (v15);
        }
      }
      else if (v14)
      {
        uint64_t v17 = 8 * v14;
        do
        {
          uint64_t v18 = *v13++;
          double result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(void *)*a3 + 48))(*a3, v18);
          v17 -= 8;
        }
        while (v17);
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::ecs2::SystemCollection::addSystemToTypeInfoMap(re::ecs2::SystemCollection *this, re::ecs2::System *a2)
{
  uint64_t v4 = (*(uint64_t (**)(re::ecs2::System *))(*(void *)a2 + 32))(a2);
  v23[0] = 0;
  v23[1] = 0;
  int v24 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  unint64_t v5 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v27, (void *)(v4 + 32));
  double result = (re::ecs2::SystemCollection *)((char *)this + 56);
  if (!*((void *)this + 7))
  {
    LODWORD(v7) = 0;
    goto LABEL_11;
  }
  unint64_t v7 = v5 % *((unsigned int *)this + 20);
  uint64_t v8 = *(unsigned int *)(*((void *)this + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_11:
    unsigned int v10 = re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::addAsMove((uint64_t)result, v7, v5, (_OWORD *)(v4 + 32), (uint64_t)v23);
    ++*((_DWORD *)this + 24);
    uint64_t v11 = *((void *)this + 9) + 72 * v10 + 32;
    double result = (_anonymous_namespace_ *)v23[0];
    if (v23[0] && (v24 & 1) == 0) {
      double result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(void *)v23[0] + 40))();
    }
    goto LABEL_14;
  }
  uint64_t v9 = *((void *)this + 9);
  while (*(void *)(v9 + 72 * v8 + 16) != *(void *)(v4 + 32)
       || *(unsigned __int16 *)(v9 + 72 * v8 + 24) != (unsigned __int16)*(_DWORD *)(v4 + 40)
       || *(unsigned __int16 *)(v9 + 72 * v8 + 26) != HIWORD(*(_DWORD *)(v4 + 40))
       || ((*(_DWORD *)(v9 + 72 * v8 + 28) ^ *(_DWORD *)(v4 + 44)) & 0xFFFFFF) != 0)
  {
    uint64_t v8 = *(_DWORD *)(v9 + 72 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF) {
      goto LABEL_11;
    }
  }
  uint64_t v11 = v9 + 72 * v8 + 32;
LABEL_14:
  if (!*(void *)v11)
  {
    unint64_t v18 = *(void *)(v11 + 8) + 1;
    double result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((void *)v11, v18);
    int v19 = *(_DWORD *)(v11 + 16) + 2;
    *(_DWORD *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v19;
    if ((v19 & 1) == 0) {
      goto LABEL_25;
    }
LABEL_31:
    uint64_t v20 = v11 + 24;
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v11 + 8);
  int v13 = *(_DWORD *)(v11 + 16);
  if ((v13 & 1) == 0)
  {
    unint64_t v14 = *(void *)(v11 + 24);
    BOOL v16 = v12 >= v14;
    unint64_t v15 = v12 + 1;
    BOOL v16 = !v16 || v14 >= v15;
    if (!v16)
    {
      unint64_t v17 = 2 * v14;
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  unint64_t v15 = v12 + 1;
  if (v15 < 2)
  {
LABEL_24:
    if ((v13 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_31;
  }
  unint64_t v17 = 2;
LABEL_27:
  if (v17 <= v15) {
    unint64_t v21 = v15;
  }
  else {
    unint64_t v21 = v17;
  }
  double result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((void *)v11, v21);
  if (*(_DWORD *)(v11 + 16)) {
    goto LABEL_31;
  }
LABEL_25:
  uint64_t v20 = *(void *)(v11 + 32);
LABEL_32:
  uint64_t v22 = *(void *)(v11 + 8);
  *(void *)(v20 + 8 * v22) = a2;
  *(void *)(v11 + 8) = v22 + 1;
  *(_DWORD *)(v11 + 16) += 2;
  return result;
}

unint64_t re::ecs2::SystemCollection::willRemoveAt(re::ecs2::SystemCollection *this, uint64_t a2, re::ecs2::System **a3)
{
  uint64_t v5 = *((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t, re::ecs2::System *))(*(void *)v5 + 96))(v5, *a3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 6) + 104))(*((void *)this + 6));
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9)
      {
        unsigned int v10 = *(void **)(v8 + 40);
        uint64_t v11 = 8 * v9;
        do
        {
          if (*v10 == v7) {
            (*(void (**)(re::ecs2::System *, uint64_t))(*(void *)*a3 + 56))(*a3, v7);
          }
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else
    {
      int v12 = *((unsigned __int8 *)*a3 + 85);
      uint64_t v13 = (*(uint64_t (**)(void))(**((void **)this + 6) + 104))(*((void *)this + 6));
      unint64_t v14 = *(uint64_t **)(v13 + 40);
      uint64_t v15 = *(void *)(v13 + 24);
      if (v12 == 1)
      {
        if (v15)
        {
          uint64_t v16 = 8 * v15;
          do
          {
            uint64_t v17 = *(void *)(*v14 + 376);
            if (v17 && *(void *)(v17 + 24) != 1) {
              (*(void (**)(void))(*(void *)*a3 + 56))();
            }
            ++v14;
            v16 -= 8;
          }
          while (v16);
        }
      }
      else if (v15)
      {
        uint64_t v18 = 8 * v15;
        do
        {
          uint64_t v19 = *v14++;
          (*(void (**)(re::ecs2::System *, uint64_t))(*(void *)*a3 + 56))(*a3, v19);
          v18 -= 8;
        }
        while (v18);
      }
    }
    (*(void (**)(void))(*(void *)*a3 + 72))();
  }
  uint64_t v20 = *a3;
  *((void *)*a3 + 5) = 0;
  return re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(this, v20);
}

unint64_t re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(re::ecs2::SystemCollection *this, re::ecs2::System *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(re::ecs2::System *))(*(void *)a2 + 32))(a2);
  unint64_t result = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)v40, (void *)(v4 + 32));
  uint64_t v6 = 0x7FFFFFFFLL;
  if (*((void *)this + 7))
  {
    uint64_t v7 = *(unsigned int *)(*((void *)this + 8) + 4 * (result % *((unsigned int *)this + 20)));
    if (v7 != 0x7FFFFFFF)
    {
      uint64_t v8 = *((void *)this + 9);
      uint64_t v6 = 0x7FFFFFFFLL;
      while (*(void *)(v8 + 72 * v7 + 16) != *(void *)(v4 + 32)
           || *(unsigned __int16 *)(v8 + 72 * v7 + 24) != (unsigned __int16)*(_DWORD *)(v4 + 40)
           || *(unsigned __int16 *)(v8 + 72 * v7 + 26) != HIWORD(*(_DWORD *)(v4 + 40))
           || ((*(_DWORD *)(v8 + 72 * v7 + 28) ^ *(_DWORD *)(v4 + 44)) & 0xFFFFFF) != 0)
      {
        uint64_t v7 = *(_DWORD *)(v8 + 72 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF) {
          goto LABEL_9;
        }
      }
      uint64_t v6 = v7;
    }
  }
LABEL_9:
  uint64_t v9 = *((void *)this + 9);
  uint64_t v10 = v9 + 72 * v6;
  int v13 = *(_DWORD *)(v10 + 48);
  uint64_t v11 = (int *)(v10 + 48);
  int v12 = v13;
  int v14 = v13 & 1;
  uint64_t v15 = v9 + 72 * v6;
  if (v13) {
    uint64_t v16 = (re::ecs2::System **)(v15 + 56);
  }
  else {
    uint64_t v16 = *(re::ecs2::System ***)(v15 + 64);
  }
  uint64_t v17 = v9 + 72 * v6;
  unint64_t v20 = *(void *)(v17 + 40);
  uint64_t v18 = (void *)(v17 + 40);
  unint64_t v19 = v20;
  if (v20)
  {
    uint64_t v21 = 8 * v19;
    uint64_t v22 = &v16[v19];
    while (*v16 != a2)
    {
      ++v16;
      v21 -= 8;
      if (!v21)
      {
        uint64_t v16 = v22;
        break;
      }
    }
  }
  uint64_t v23 = v9 + 72 * v6;
  if (v14) {
    uint64_t v24 = v23 + 56;
  }
  else {
    uint64_t v24 = *(void *)(v23 + 64);
  }
  if (v16 == (re::ecs2::System **)(v24 + 8 * v19))
  {
    if (v19) {
      return result;
    }
  }
  else
  {
    unint64_t v25 = ((uint64_t)v16 - v24) >> 3;
    if (v19 <= v25)
    {
      memset(v40, 0, sizeof(v40));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v19 - 1 > v25)
    {
      uint64_t v26 = v9 + 72 * v6;
      if (v14) {
        uint64_t v27 = v26 + 56;
      }
      else {
        uint64_t v27 = *(void *)(v26 + 64);
      }
      *(void *)(v27 + 8 * v25) = *(void *)(v27 + 8 * v19 - 8);
      int v12 = *v11;
      int v14 = *v11 & 1;
    }
    *uint64_t v18 = v19 - 1;
    *uint64_t v11 = (v12 & 0xFFFFFFFE | v14) + 2;
    if (v19 != 1) {
      return result;
    }
  }
  unint64_t result = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)v40, (void *)(v4 + 32));
  if (*((void *)this + 7))
  {
    unint64_t v28 = result % *((unsigned int *)this + 20);
    uint64_t v29 = *((void *)this + 8);
    unint64_t v30 = *(unsigned int *)(v29 + 4 * v28);
    if (v30 != 0x7FFFFFFF)
    {
      uint64_t v31 = *((void *)this + 9);
      uint64_t v32 = 0x7FFFFFFFLL;
      while (1)
      {
        if (*(void *)(v31 + 72 * v30 + 16) == *(void *)(v4 + 32)
          && *(unsigned __int16 *)(v31 + 72 * v30 + 24) == (unsigned __int16)*(_DWORD *)(v4 + 40)
          && *(unsigned __int16 *)(v31 + 72 * v30 + 26) == HIWORD(*(_DWORD *)(v4 + 40)))
        {
          unint64_t result = (*(_DWORD *)(v31 + 72 * v30 + 28) ^ *(_DWORD *)(v4 + 44));
          if ((result & 0xFFFFFF) == 0) {
            break;
          }
        }
        uint64_t v32 = v30;
        unint64_t result = *(_DWORD *)(v31 + 72 * v30 + 8) & 0x7FFFFFFF;
        unint64_t v30 = result;
        if (result == 0x7FFFFFFF) {
          return result;
        }
      }
      int v33 = *(_DWORD *)(v31 + 72 * v30 + 8) & 0x7FFFFFFF;
      if (v32 == 0x7FFFFFFF) {
        *(_DWORD *)(v29 + 4 * v28) = v33;
      }
      else {
        *(_DWORD *)(v31 + 72 * v32 + 8) = *(_DWORD *)(v31 + 72 * v32 + 8) & 0x80000000 | v33;
      }
      uint64_t v34 = *((void *)this + 9);
      uint64_t v35 = v34 + 72 * v30;
      int v38 = *(_DWORD *)(v35 + 8);
      uint64_t v37 = (int *)(v35 + 8);
      int v36 = v38;
      if (v38 < 0)
      {
        int *v37 = v36 & 0x7FFFFFFF;
        unint64_t result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v34 + 72 * v30 + 32);
        uint64_t v34 = *((void *)this + 9);
        int v36 = *(_DWORD *)(v34 + 72 * v30 + 8);
      }
      *(_DWORD *)(v34 + 72 * v30 + 8) = *((_DWORD *)this + 23) | v36 & 0x80000000;
      --*((_DWORD *)this + 21);
      int v39 = *((_DWORD *)this + 24) + 1;
      *((_DWORD *)this + 23) = v30;
      *((_DWORD *)this + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v39;
    }
  }
  return result;
}

_anonymous_namespace_ *re::ecs2::SystemCollection::willSet(re::ecs2::SystemCollection *a1, unint64_t a2, re::ecs2::System **a3)
{
  uint64_t v5 = *(re::ecs2::System **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)a1, a2);
  uint64_t v6 = *((void *)a1 + 6);
  if (v6)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, re::ecs2::System *))(*(void *)v6 + 96))(v6, *a3);
    uint64_t v8 = (*(uint64_t (**)(void))(**((void **)a1 + 6) + 104))(*((void *)a1 + 6));
    uint64_t v9 = *(uint64_t **)(v8 + 40);
    uint64_t v10 = *(void *)(v8 + 24);
    if (v7)
    {
      if (v10)
      {
        uint64_t v11 = 8 * v10;
        do
        {
          if (*v9 == v7) {
            (*(void (**)(re::ecs2::System *, uint64_t))(*(void *)v5 + 56))(v5, v7);
          }
          ++v9;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else if (v10)
    {
      uint64_t v13 = 8 * v10;
      do
      {
        uint64_t v14 = *v9++;
        (*(void (**)(re::ecs2::System *, uint64_t))(*(void *)v5 + 56))(v5, v14);
        v13 -= 8;
      }
      while (v13);
    }
    (*(void (**)(re::ecs2::System *))(*(void *)v5 + 72))(v5);
    *((void *)v5 + 5) = 0;
    re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(a1, v5);
    re::ecs2::SystemCollection::addSystemToTypeInfoMap(a1, *a3);
    uint64_t v15 = *a3;
    *((void *)v15 + 5) = *((void *)a1 + 6);
    (*(void (**)(re::ecs2::System *))(*(void *)v15 + 40))(v15);
    uint64_t v16 = (*(uint64_t (**)(void, re::ecs2::System *))(**((void **)a1 + 6) + 96))(*((void *)a1 + 6), *a3);
    unint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((void **)a1 + 6) + 104))(*((void *)a1 + 6));
    uint64_t v17 = (uint64_t *)*((void *)result + 5);
    uint64_t v18 = *((void *)result + 3);
    if (v16)
    {
      if (v18)
      {
        uint64_t v19 = 8 * v18;
        do
        {
          if (*v17 == v16) {
            unint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(void *)*a3 + 48))(*a3, v16);
          }
          ++v17;
          v19 -= 8;
        }
        while (v19);
      }
    }
    else if (v18)
    {
      uint64_t v20 = 8 * v18;
      do
      {
        uint64_t v21 = *v17++;
        unint64_t result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(void *)*a3 + 48))(*a3, v21);
        v20 -= 8;
      }
      while (v20);
    }
  }
  else
  {
    *((void *)v5 + 5) = 0;
    re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(a1, v5);
    unint64_t result = re::ecs2::SystemCollection::addSystemToTypeInfoMap(a1, *a3);
    *((void *)*a3 + 5) = *((void *)a1 + 6);
  }
  return result;
}

void re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(void *a1)
{
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(a1);
  JUMPOUT(0x237DBCBD0);
}

double re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 + 32);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v46, 0, 36);
          *(void *)&v46[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v46, v13, v12);
          long long v15 = *(_OWORD *)v46;
          *(_OWORD *)unint64_t v46 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v46[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v46[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v46[24];
          *(_OWORD *)&v46[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v46[32];
          *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v19;
          unint64_t v20 = v18;
          if (v18)
          {
            unint64_t v21 = 0;
            uint64_t v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 16);
              }
              ++v21;
              v22 += 72;
            }
            while (v21 < v20);
          }
          re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)v46);
        }
      }
      else
      {
        if (v12) {
          signed int v25 = 2 * v11;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 72 * v9 + 8) = v24 | 0x80000000;
  uint64_t v26 = a2;
  *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 72 * v9) = a3;
  *(_OWORD *)(*(void *)(a1 + 16) + 72 * v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *a4;
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v27 + 72 * v9;
  *(void *)(v28 + 32) = 0;
  uint64_t v29 = v28 + 32;
  *(_DWORD *)(v29 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
  unint64_t v30 = (int *)(v29 + 16);
  *(void *)(v29 + 8) = 0;
  *(void *)(v29 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  uint64_t v31 = (uint64_t *)(v29 + 24);
  *(void *)(v29 + 32) = 0;
  if ((*(unsigned char *)(a5 + 16) & 1) == 0)
  {
    *unint64_t v30 = 3;
    *(void *)uint64_t v29 = *(void *)a5;
    *(void *)a5 = 0;
    uint64_t v32 = v27 + 72 * v9;
    *(void *)(v32 + 40) = *(void *)(a5 + 8);
    *(void *)(a5 + 8) = 0;
    uint64_t v33 = *(void *)(v32 + 64);
    *(void *)(v32 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a5 + 32);
    *(void *)(a5 + 32) = v33;
    *(_DWORD *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(a5 + 16) & 0xFFFFFFFE | *v30 & 1;
    *v30 &= ~1u;
    uint64_t v34 = *v31;
    uint64_t *v31 = *(void *)(a5 + 24);
    *(void *)(a5 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v34;
LABEL_39:
    int v44 = 2;
    goto LABEL_40;
  }
  unint64_t v35 = *(void *)(a5 + 8);
  if (!v35)
  {
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v29);
    *(void *)uint64_t v29 = *(void *)a5;
    goto LABEL_39;
  }
  *(void *)uint64_t v29 = *(void *)a5;
  uint64_t v36 = v27 + 72 * v9;
  re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((void *)v29, v35);
  uint64_t v39 = *(void *)(v36 + 40);
  int v38 = (unint64_t *)(v36 + 40);
  uint64_t v37 = v39;
  if (*(unsigned char *)(a5 + 16)) {
    uint64_t v40 = (const void *)(a5 + 24);
  }
  else {
    uint64_t v40 = *(const void **)(a5 + 32);
  }
  int v41 = *v30;
  uint64_t v42 = (void *)(v29 + 24);
  if ((*v30 & 1) == 0) {
    uint64_t v42 = *(void **)(v27 + 72 * v9 + 64);
  }
  if (v37)
  {
    memmove(v42, v40, 8 * v37);
    int v41 = *v30;
  }
  if ((v41 & 1) == 0) {
    uint64_t v31 = *(uint64_t **)(v27 + 72 * v9 + 64);
  }
  if (*(_DWORD *)(a5 + 16)) {
    uint64_t v43 = a5 + 24;
  }
  else {
    uint64_t v43 = *(void *)(a5 + 32);
  }
  memcpy(&v31[*v38], (const void *)(v43 + 8 * *v38), 8 * v35 - 8 * *v38);
  *int v38 = v35;
  *(void *)(a5 + 8) = 0;
  int v44 = 4;
LABEL_40:
  *(_DWORD *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = ((*(_DWORD *)(a5 + 16) & 0xFFFFFFFE) + v44) | *(_DWORD *)(a5 + 16) & 1;
  *v30 += 2;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::ecs2::CustomSystemRegistry::init(os_unfair_lock_s *this, re::ecs2::ECSManager *a2)
{
  uint64_t v4 = this + 1;
  os_unfair_lock_lock(this + 1);
  if (!LOBYTE(this->_os_unfair_lock_opaque))
  {
    LOBYTE(this->_os_unfair_lock_opaque) = 1;
    uint64_t v6 = (_anonymous_namespace_ *)re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::setCapacity(&this[4]._os_unfair_lock_opaque, 0);
    ++this[10]._os_unfair_lock_opaque;
    re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(&this[14]._os_unfair_lock_opaque, 0);
    int v7 = this[20]._os_unfair_lock_opaque + 1;
    this[20]._os_unfair_lock_opaque = v7;
    *(void *)&this[24]._os_unfair_lock_opaque = a2;
    *(void *)&this[2]._os_unfair_lock_opaque = this[10]._os_unfair_lock_opaque + v7;
  }
  os_unfair_lock_unlock(v4);
}

void re::ecs2::CustomSystemRegistry::deinit(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 1;
  os_unfair_lock_lock(this + 1);
  if (LOBYTE(this->_os_unfair_lock_opaque))
  {
    LOBYTE(this->_os_unfair_lock_opaque) = 0;
    re::DynamicArray<unsigned long>::deinit((uint64_t)&this[4]);
    re::DynamicArray<unsigned long>::deinit((uint64_t)&this[14]);
  }
  os_unfair_lock_unlock(v2);
}

char *re::ecs2::CustomSystemRegistry::instance(re::ecs2::CustomSystemRegistry *this)
{
  {
    re::ecs2::CustomSystemRegistry::instance(void)::s_instance = 0;
    unk_26879FB0C = 0u;
    unk_26879FB1C = 0u;
    unk_26879FB2C = 0;
    xmmword_26879FB38 = 0u;
    unk_26879FB48 = 0u;
    dword_26879FB58 = 0;
    qword_26879FB68 = 0;
    unk_26879FB70 = 0;
    qword_26879FB60 = 0;
    re::ecs2::CustomSystemRegistry::init((os_unfair_lock_s *)&re::ecs2::CustomSystemRegistry::instance(void)::s_instance, 0);
  }
  return &re::ecs2::CustomSystemRegistry::instance(void)::s_instance;
}

__n128 re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + 48 * v4;
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(__n128 *)uint64_t v5 = result;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::CustomSystemRegistry::configureSystemChanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 4);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4));
  if (*(void *)(a1 + 96))
  {
    re::ecs2::CustomSystemRegistry::addCustomSystems((void *)a1);
    *(void *)(a1 + 8) = (*(_DWORD *)(a1 + 80) + *(_DWORD *)(a1 + 40));
  }
  else
  {
    re::ecs2::CustomSystemRegistry::addSwiftCustomSystemsTo(a1, a2);
  }
  re::ecs2::CustomSystemRegistry::sortSystems((_anonymous_namespace_ *)a1, a3);
  os_unfair_lock_unlock(v6);
}

void re::ecs2::CustomSystemRegistry::addSwiftCustomSystemsTo(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4 < v3)
  {
    uint64_t v6 = 40 * v4;
    do
    {
      unint64_t v7 = *(void *)(a1 + 32);
      if (v7 <= v4)
      {
        v8[1] = 0;
        memset(v17, 0, sizeof(v17));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v9 = 136315906;
        int v10 = "operator[]";
        __int16 v11 = 1024;
        int v12 = 789;
        __int16 v13 = 2048;
        unint64_t v14 = v4;
        __int16 v15 = 2048;
        unint64_t v16 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::ecs2::CustomSystemRegistry::create((re *)v17, a1, (int32x2_t *)(*(void *)(a1 + 48) + v6));
      v8[0] = *(void *)&v17[0];
      *(void *)&v17[0] = 0;
      re::ecs2::ECSManager::addSystem(a2, v8, v4, 0);
      if (v8[0])
      {

        v8[0] = 0;
      }
      if (*(void *)&v17[0]) {

      }
      ++v4;
      v6 += 40;
    }
    while (v3 != v4);
  }
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v3;
}

void re::ecs2::CustomSystemRegistry::addCustomSystems(void *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v2 = a1[4];
  unint64_t v3 = a1[13];
  if (v3 < v2)
  {
    uint64_t v4 = 40 * v3;
    do
    {
      unint64_t v5 = a1[4];
      if (v5 <= v3)
      {
        v7[1] = 0;
        memset(v16, 0, sizeof(v16));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v8 = 136315906;
        int v9 = "operator[]";
        __int16 v10 = 1024;
        int v11 = 789;
        __int16 v12 = 2048;
        unint64_t v13 = v3;
        __int16 v14 = 2048;
        unint64_t v15 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v6 = a1[12];
      re::ecs2::CustomSystemRegistry::create((re *)v16, (uint64_t)a1, (int32x2_t *)(a1[6] + v4));
      v7[0] = *(void *)&v16[0];
      *(void *)&v16[0] = 0;
      re::ecs2::ECSManager::addSystem(v6, v7, 0xFFFFFFFF, 0);
      if (v7[0])
      {

        v7[0] = 0;
      }
      if (*(void *)&v16[0]) {

      }
      ++v3;
      v4 += 40;
    }
    while (v2 != v3);
  }
  a1[13] = v2;
}

void re::ecs2::CustomSystemRegistry::sortSystems(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  if (!*((void *)a1 + 9)) {
    return;
  }
  signed int v5 = *(_DWORD *)(a2 + 16);
  long long v66 = 0u;
  long long v67 = 0u;
  int v68 = 0;
  uint64_t v69 = 0x7FFFFFFFLL;
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xFFFFFFFFLL;
    unint64_t v10 = 48;
    do
    {
      *(void *)uint64_t v74 = 0;
      *(void *)&v74[8] = 0xFFFFFFFFLL;
      *(_DWORD *)&v74[16] = -1;
      if (v7 <= v8) {
        goto LABEL_119;
      }
      uint64_t v11 = *(void *)(*(void *)(a2 + 32) + 8 * v8);
      if (*(unsigned char *)(v11 + 84) == 2)
      {
        *(_DWORD *)&v74[16] = *(_DWORD *)(v11 + 28);
      }
      else
      {
        *(_OWORD *)uint64_t v74 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11) + 32);
        unint64_t v7 = *(void *)(a2 + 16);
      }
      if (v7 <= v8) {
        goto LABEL_120;
      }
      *(void *)float32x4_t buf = *(void *)(*(void *)(a2 + 32) + 8 * v8);
      unint64_t v12 = re::Hash<re::ecs2::CustomSystemRegistry::SystemID>::operator()((uint64_t)v74);
      unint64_t v13 = v12;
      if ((void)v66)
      {
        unint64_t v3 = v12 % DWORD2(v67);
        unint64_t v2 = *(unsigned int *)(*((void *)&v66 + 1) + 4 * v3);
        if (v2 != 0x7FFFFFFF)
        {
          uint64_t v14 = v67;
          do
          {
            BOOL v6 = re::ecs2::CustomSystemRegistry::SystemID::operator==(v14 + 48 * v2 + 16, (uint64_t)v74);
            if (v6) {
              goto LABEL_17;
            }
            unint64_t v2 = *(_DWORD *)(v14 + 48 * v2 + 8) & 0x7FFFFFFF;
          }
          while (v2 != 0x7FFFFFFF);
        }
      }
      else
      {
        unint64_t v3 = 0;
      }
      re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::addAsMove((uint64_t)&v66, v3, v13, (__n128 *)v74, buf);
      ++HIDWORD(v69);
LABEL_17:
      unint64_t v7 = *(void *)(a2 + 16);
      if (v7 <= v8) {
        goto LABEL_121;
      }
      *(_DWORD *)(*(void *)(*(void *)(a2 + 32) + 8 * v8) + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
      ++v8;
    }
    while (v8 < v7);
  }
  unint64_t v15 = *((void *)a1 + 9);
  *(void *)&v73[2] = 0;
  memset(&v71[8], 0, 20);
  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v71, v15);
  ++*(_DWORD *)&v71[24];
  uint64_t v16 = *((void *)a1 + 9);
  if (v16)
  {
    unint64_t v8 = 0;
    unint64_t v7 = *((void *)a1 + 11);
    unint64_t v17 = v7 + 48 * v16;
    do
    {
      uint64_t v18 = re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::tryGet((uint64_t)&v66, v7);
      if (v18)
      {
        long long v19 = (uint64_t *)v18;
        unint64_t v20 = (_anonymous_namespace_ *)re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::tryGet((uint64_t)&v66, v7 + 24);
        if (v20)
        {
          unint64_t v21 = (uint64_t *)v20;
          uint64_t v22 = *v19;
          uint64_t v23 = *(void *)v20;
          if (*v19 != *(void *)v20
            && (*(_anonymous_namespace_ **)(v22 + 32) == a1 || *(_anonymous_namespace_ **)(v23 + 32) == a1))
          {
            if (*(void *)&v71[16] >= *(void *)&v71[8])
            {
              unint64_t v24 = *(void *)&v71[16] + 1;
              if (*(void *)&v71[8] < (unint64_t)(*(void *)&v71[16] + 1))
              {
                if (*(void *)v71)
                {
                  unint64_t v25 = 8;
                  if (*(void *)&v71[8]) {
                    unint64_t v25 = 2 * *(void *)&v71[8];
                  }
                  if (v25 <= v24) {
                    unint64_t v26 = *(void *)&v71[16] + 1;
                  }
                  else {
                    unint64_t v26 = v25;
                  }
                  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v71, v26);
                }
                else
                {
                  re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v71, v24);
                  ++*(_DWORD *)&v71[24];
                }
              }
            }
            unint64_t v3 = *(void *)&v73[2];
            uint64_t v27 = *(void *)&v71[16];
            uint64_t v28 = *(void *)&v73[2] + 24 * *(void *)&v71[16];
            *(void *)uint64_t v28 = v22;
            *(void *)(v28 + 8) = v23;
            *(_WORD *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
            unint64_t v10 = v27 + 1;
            *(void *)&v71[16] = v27 + 1;
            unint64_t v9 = ++*(_DWORD *)&v71[24];
            if (hasCycle)
            {
              unint64_t v30 = *re::ecsCoreLogObjects((re *)hasCycle);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)float32x4_t buf = 0;
              }
              if ((int)v10 >= 1)
              {
                unint64_t v31 = v10 + 1;
                do
                {
                  unint64_t v2 = (v31 - 2);
                  if (v10 <= v2) {
                    goto LABEL_118;
                  }
                  unint64_t v32 = v3 + 24 * v2;
                  if (*(unsigned char *)(v32 + 17))
                  {
                    unint64_t v33 = v10 - 1;
                    if (v10 - 1 > v2)
                    {
                      uint64_t v34 = v3 - 24 + 24 * v10;
                      long long v35 = *(_OWORD *)v34;
                      *(_WORD *)(v32 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_WORD *)(v34 + 16);
                      *(_OWORD *)unint64_t v32 = v35;
                      unint64_t v33 = v10 - 1;
                    }
                    unint64_t v9 = (v9 + 1);
                    unint64_t v10 = v33;
                  }
                  --v31;
                }
                while (v31 > 1);
                *(void *)&v71[16] = v10;
                *(_DWORD *)&v71[24] = v9;
              }
            }
            else
            {
              unint64_t v8 = v8 | (*(unsigned char *)(*v21 + 48) == 0);
            }
          }
        }
      }
      v7 += 48;
    }
    while (v7 != v17);
    if (v8)
    {
      uint64_t v36 = *(void *)&v71[16];
      if (*(void *)&v71[16])
      {
        uint64_t v37 = *(void *)&v73[2];
        int v38 = (unsigned char *)(*(void *)&v73[2] + 16);
        uint64_t v39 = *(void *)&v71[16];
        do
        {
          *int v38 = 0;
          v38 += 24;
          --v39;
        }
        while (v39);
        uint64_t v40 = (unsigned char *)(v37 + 16);
        do
        {
          if (!*(unsigned char *)(*((void *)v40 - 1) + 48) && !*v40) {
          v40 += 24;
          }
          --v36;
        }
        while (v36);
      }
    }
  }
  unint64_t v3 = *(void *)&v71[16];
  if (!*(void *)&v71[16]) {
    goto LABEL_108;
  }
  unint64_t v41 = *(void *)(a2 + 16);
  if (!v41) {
    goto LABEL_108;
  }
  unint64_t v7 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = *(void *)&v73[2];
  uint64_t v44 = *(void *)&v73[2] + 8;
  unint64_t v8 = 24;
  unint64_t v9 = *(void *)&v71[16];
  do
  {
    unint64_t v10 = *(void *)(a2 + 16);
    if (v10 <= v7) {
      unint64_t v45 = v7;
    }
    else {
      unint64_t v45 = *(void *)(a2 + 16);
    }
    unint64_t v2 = -1;
    unint64_t v46 = 0x7FFFFFFFLL;
    unint64_t v47 = v7;
    uint64_t v48 = 0x7FFFFFFFLL;
    while (1)
    {
      if (v47 == v45) {
        goto LABEL_115;
      }
      uint64_t v49 = *(void *)(*(void *)(a2 + 32) + 8 * v47);
      uint64_t v50 = *(unsigned int *)(v49 + 24);
      if ((int)v50 > (int)v48) {
        goto LABEL_68;
      }
      if (*(unsigned char *)(v49 + 84) != 2)
      {
        if (v46 > (int)v50)
        {
          uint64_t v53 = 0;
          uint64_t v54 = (void *)v44;
          while (1)
          {
            if (v3 == v53) {
              goto LABEL_114;
            }
            if (*v54 == v49) {
              break;
            }
            ++v53;
            v54 += 3;
            if (v9 == v53) {
              goto LABEL_81;
            }
          }
          if (v46 >= (int)v50) {
            unint64_t v46 = (int)v50;
          }
        }
LABEL_68:
        uint64_t v50 = v48;
        goto LABEL_82;
      }
      if (*(_anonymous_namespace_ **)(v49 + 32) == a1)
      {
        uint64_t v51 = 0;
        uint64_t v52 = (void *)v44;
        while (v3 != v51)
        {
          if (*v52 == v49) {
            goto LABEL_68;
          }
          ++v51;
          v52 += 3;
          if (v9 == v51) {
            goto LABEL_81;
          }
        }
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v74 = 136315906;
        *(void *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        unint64_t v75 = v3;
        __int16 v76 = 2048;
        unint64_t v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_114:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v74 = 136315906;
        *(void *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        unint64_t v75 = v3;
        __int16 v76 = 2048;
        unint64_t v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_115:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v74 = 136315906;
        *(void *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        unint64_t v75 = v45;
        __int16 v76 = 2048;
        unint64_t v77 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_116:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v74 = 136315906;
        *(void *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        unint64_t v75 = v45;
        __int16 v76 = 2048;
        unint64_t v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v74 = 136315906;
        *(void *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        unint64_t v75 = v2;
        __int16 v76 = 2048;
        unint64_t v77 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v74 = 136315906;
        *(void *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        unint64_t v75 = v2;
        __int16 v76 = 2048;
        unint64_t v77 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v71 = 136315906;
        *(void *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 789;
        *(_WORD *)&v71[18] = 2048;
        *(void *)&v71[20] = v8;
        __int16 v72 = 2048;
        *(void *)uint64_t v73 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v71 = 136315906;
        *(void *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 789;
        *(_WORD *)&v71[18] = 2048;
        *(void *)&v71[20] = v8;
        __int16 v72 = 2048;
        *(void *)uint64_t v73 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_121:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v71 = 136315906;
        *(void *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 789;
        *(_WORD *)&v71[18] = 2048;
        *(void *)&v71[20] = v8;
        __int16 v72 = 2048;
        *(void *)uint64_t v73 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        uint64_t v70 = 0;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        *(_OWORD *)float32x4_t buf = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v74 = 136315906;
        *(void *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        unint64_t v75 = v9;
        __int16 v76 = 2048;
        unint64_t v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_123;
      }
LABEL_81:
      unint64_t v2 = v47;
      if (v42 == (int)v50) {
        break;
      }
LABEL_82:
      ++v47;
      uint64_t v48 = v50;
      if (v47 >= v41) {
        goto LABEL_88;
      }
    }
    unint64_t v2 = v47;
LABEL_88:
    LODWORD(v45) = v9;
    if ((int)v9 - 1 >= 0)
    {
      do
      {
        unint64_t v45 = (v45 - 1);
        if (v3 <= v45) {
          goto LABEL_116;
        }
        unint64_t v10 = *(void *)(a2 + 16);
        if (v10 <= v2) {
          goto LABEL_117;
        }
        unint64_t v55 = (long long *)(v43 + 24 * v45);
        uint64_t v56 = *(void *)(*(void *)(a2 + 32) + 8 * v2);
        if ((*(void *)v55 == v56 || *(void *)(v43 + 24 * v45 + 8) == v56) && --v9 > v45)
        {
          if (v3 <= v9) {
            goto LABEL_122;
          }
          uint64_t v57 = (long long *)(v43 + 24 * v9);
          long long v58 = *v55;
          uint64_t v59 = *((void *)v55 + 2);
          __int16 v60 = *((_WORD *)v57 + 8);
          long long *v55 = *v57;
          *((_WORD *)v55 + 8) = v60;
          *((_WORD *)v57 + 8) = v59;
          long long *v57 = v58;
        }
      }
      while ((int)v45 > 0);
    }
    if (v42 == (int)v50) {
      ++v42;
    }
    if (v2 != v7)
    {
      unint64_t v10 = *(void *)(a2 + 16);
      if (v10 > v2)
      {
        uint64_t v61 = v44;
        uint64_t v62 = v42;
        uint64_t v63 = *(void *)(*(void *)(a2 + 32) + 8 * v2);
        *(void *)float32x4_t buf = v63;
        if (v63) {
          id v64 = (id)(v63 + 8);
        }
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::removeStableAt(a2, v2);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::insert((_anonymous_namespace_ *)a2, v7, (uint64_t *)buf);
        if (*(void *)buf) {

        }
        uint64_t v42 = v62;
        uint64_t v44 = v61;
        goto LABEL_106;
      }
LABEL_123:
      uint64_t v70 = 0;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      *(_OWORD *)float32x4_t buf = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v74 = 136315906;
      *(void *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      *(_WORD *)&v74[18] = 2048;
      unint64_t v75 = v2;
      __int16 v76 = 2048;
      unint64_t v77 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_106:
    ++v7;
  }
  while (v7 < v41 && v9);
LABEL_108:
  if (*(void *)v71)
  {
    if (*(void *)&v73[2]) {
      (*(void (**)(void))(**(void **)v71 + 40))();
    }
  }
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)&v66);
}

void *re::ecs2::CustomSystemRegistry::create(re *a1, uint64_t a2, int32x2_t *a3)
{
  re::make::shared::object<re::ecs2::CustomSystem>(a1, a1);
  BOOL v6 = *(int32x2_t **)a1;
  _OWORD v6[3] = vrev64_s32(*a3);
  v6[15] = a3[4];
  __n128 result = _Block_copy(*(const void **)&a3[1]);
  unint64_t v8 = *(int32x2_t **)a1;
  *(void *)(*(void *)a1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = result;
  if (a3[1])
  {
    __n128 result = _Block_copy(*(const void **)&a3[2]);
    unint64_t v8 = *(int32x2_t **)a1;
    v8[14] = (int32x2_t)result;
    v8[10].i8[5] = 2;
  }
  else
  {
    uint8_t v8[16] = a3[3];
  }
  void v8[4] = (int32x2_t)a2;
  return result;
}

uint64_t anonymous namespace'::setSystemGroup(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 84) == 2 && *(void *)(result + 32) == a3) {
    *(unsigned char *)(result + 48) = 0;
  }
  unint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    for (unint64_t i = 0; i < v6; ++i)
    {
      uint64_t v9 = *(void *)(a2 + 32) + v7;
      if (*(void *)(v9 + 8) == v5)
      {
        *(unsigned char *)(v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
        unint64_t v6 = *(void *)(a2 + 16);
      }
      v7 += 24;
    }
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::Hash<re::ecs2::CustomSystemRegistry::SystemID>::operator()(a2);
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if (v5 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  while (!re::ecs2::CustomSystemRegistry::SystemID::operator==(v6 + 48 * v5 + 16, a2))
  {
    uint64_t v5 = *(_DWORD *)(v6 + 48 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      return 0;
    }
  }
  return v6 + 48 * v5 + 40;
}

uint64_t anonymous namespace'::hasCycle(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a2 + 16);
  if (a3)
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = (unsigned char *)(*(void *)(a2 + 32) + 16);
    uint64_t v7 = *(void *)(a2 + 16);
    do
    {
      unsigned char *v6 = 0;
      v6 += 24;
      --v7;
    }
    while (v7);
  }
  if (!v5) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = v10 + v8;
    if (*(void *)(v10 + v8 + 8) == a1)
    {
      if (*(unsigned char *)(v11 + 16)) {
        goto LABEL_14;
      }
      *(unsigned char *)(v11 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
      unint64_t v5 = *(void *)(a2 + 16);
      if (hasCycle) {
        break;
      }
    }
    ++v9;
    v8 += 24;
    if (v9 >= v5) {
      return 0;
    }
  }
  if (v5 <= v9)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v10 = *(void *)(a2 + 32);
LABEL_14:
  uint64_t result = 1;
  *(unsigned char *)(v10 + v8 + 17) = 1;
  return result;
}

BOOL re::ecs2::CustomSystemRegistry::SystemID::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && (uint64_t v2 = *(void *)(a2 + 8), *(unsigned __int16 *)(a1 + 8) == (unsigned __int16)v2)
    && *(unsigned __int16 *)(a1 + 10) == WORD1(v2)
    && ((*(_DWORD *)(a1 + 12) ^ HIDWORD(v2)) & 0xFFFFFF) == 0)
  {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  else
  {
    return 0;
  }
}

unint64_t re::Hash<re::ecs2::CustomSystemRegistry::SystemID>::operator()(uint64_t a1)
{
  unint64_t v2 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v5, (void *)a1);
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*(int *)(a1 + 16) ^ ((unint64_t)*(int *)(a1 + 16) >> 30));
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))) ^ v2;
}

void re::DynamicArray<re::SharedPtr<re::ecs2::System>>::insert(_anonymous_namespace_ *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 + 1 <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v8 = (uint64_t *)(v7 + 8 * v4);
  if (v4 <= a2)
  {
    uint64_t v15 = *a3;
    uint64_t *v8 = *a3;
    if (v15) {
      id v16 = (id)(v15 + 8);
    }
  }
  else
  {
    uint64_t v9 = *(v8 - 1);
    *(v8 - 1) = 0;
    uint64_t *v8 = v9;
    uint64_t v10 = v8 - 1;
    if (v10 != (uint64_t *)(v7 + 8 * a2))
    {
      uint64_t v11 = *v10;
      unint64_t v12 = (uint64_t *)(v7 + 8 * v4 - 16);
      uint64_t v13 = 8 * a2 - 8 * v4 + 8;
      do
      {
        uint64_t v14 = *v12;
        uint64_t *v12 = v11;
        v12[1] = v14;
        --v12;
        v13 += 8;
      }
      while (v13);
      uint64_t v7 = *((void *)this + 4);
    }
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 8 * a2), *a3);
  }
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
}

void *re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    char v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          uint64_t v2 = 48 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (long long *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 48 * v9;
        uint64_t v11 = v7;
        do
        {
          long long v12 = *v8;
          long long v13 = v8[2];
          v11[1] = v8[1];
          void v11[2] = v13;
          *uint64_t v11 = v12;
          v11 += 3;
          v8 += 3;
          v10 -= 48;
        }
        while (v10);
        uint64_t v8 = (long long *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, long long *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void *re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::make::shared::object<re::ecs2::CustomSystem>@<D0>(re *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = re::globalAllocators(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 208, 8);
  re::ecs2::System::System(v4, 2, 1);
  *(void *)uint64_t v5 = &unk_26E70C500;
  *(_OWORD *)(v5 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_DWORD *)(v5 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v5 + 188) = 0x7FFFFFFFLL;
  *(unsigned char *)(v5 + 200) = 0;
  *a2 = v5;
  return result;
}

__n128 re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __n128 *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(void *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v13, v12);
          long long v15 = *(_OWORD *)v27;
          *(_OWORD *)uint64_t v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v27[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v27[16] = v17;
          *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
          long long v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 40;
            do
            {
              if ((*(_DWORD *)(v21 - 32) & 0x80000000) != 0) {
                re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::addAsMove(a1, *(void *)(v21 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 40), v21 - 24, v21);
              }
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v27);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  unint64_t v25 = (__n128 *)(*(void *)(a1 + 16) + 48 * v9);
  __n128 result = *a4;
  v25[2].n128_u64[0] = a4[1].n128_u64[0];
  v25[1] = result;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 40) = *a5;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::ecs2::SystemSchedulingDisabler::disableSchedulingIfNoComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 68)) {
    uint64_t v3 = a1 + 72;
  }
  else {
    uint64_t v3 = a1 + 52;
  }
  uint64_t v17 = *(void *)v3;
  int v18 = *(_DWORD *)(v3 + 8);
  if (v17 == 1) {
    return 1;
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 104))(*(void *)(a1 + 40));
  uint64_t v9 = *(void *)(v8 + 24);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 40);
    uint64_t v11 = v10 + 8 * v9;
    while (!a3)
    {
LABEL_14:
      v10 += 8;
      if (v10 == v11) {
        goto LABEL_15;
      }
    }
    uint64_t v12 = 8 * a3;
    uint64_t v13 = a2;
    while (1)
    {
      unint64_t v14 = *(unsigned __int16 *)(*(void *)v13 + 16);
      if (*(void *)(*(void *)v10 + 224) > v14)
      {
        uint64_t v15 = *(void *)(*(void *)(*(void *)v10 + 240) + 8 * v14);
        if (v15)
        {
          if (*(void *)(v15 + 24)) {
            return 0;
          }
        }
      }
      v13 += 8;
      v12 -= 8;
      if (!v12) {
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_15:
    uint64_t v4 = 1;
    LOBYTE(v17) = 1;
    re::ecs2::System::setTaskOptions((void *)a1, &v17);
  }
  return v4;
}

uint64_t re::ecs2::ECSManager::ECSManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)a1 = &unk_26E70C920;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1;
  *(void *)(a1 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 48) = &unk_26E70C848;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 188) = 0x7FFFFFFFLL;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = a1;
  *(void *)(a1 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(a1 + 22re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 200) = &unk_26E70C588;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 256) = 0x7FFFFFFF;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 26re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_WORD *)(a1 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 515;
  *(_DWORD *)(a1 + 308) = 1023969417;
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = -1;
  *(void *)(a1 + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 349) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 38re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 4re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(unsigned char *)(a1 + 42re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 44re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(void *)(a1 + 460) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 50re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  re::ecs2::CustomSystemRegistry::init((os_unfair_lock_s *)(a1 + 424), (re::ecs2::ECSManager *)a1);
  return a1;
}

void re::ecs2::ECSManager::~ECSManager(re::ecs2::ECSManager *this)
{
  unint64_t v2 = (void *)((char *)this + 200);
  (*(void (**)(char *))(*((void *)this + 25) + 16))((char *)this + 200);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 208);
  (*(void (**)(char *))(*((void *)this + 6) + 16))((char *)this + 48);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 56);
  if (*((_DWORD *)this + 45))
  {
    uint64_t v3 = *((unsigned int *)this + 44);
    if (v3) {
      memset_pattern16(*((void **)this + 20), &unk_2343655D0, 4 * v3);
    }
    uint64_t v4 = *((unsigned int *)this + 46);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 32 * v4;
      do
      {
        uint64_t v7 = *((void *)this + 21) + v5;
        int v8 = *(_DWORD *)(v7 + 8);
        if (v8 < 0) {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
        }
        v5 += 32;
      }
      while (v6 != v5);
    }
    *((_DWORD *)this + 45) = 0;
    *((_DWORD *)this + 46) = 0;
    int v9 = *((_DWORD *)this + 48) + 1;
    *((_DWORD *)this + 47) = 0x7FFFFFFF;
    *((_DWORD *)this + 48) = v9;
  }
  re::ecs2::CustomSystemRegistry::deinit((os_unfair_lock_s *)this + 106);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 480);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 440);
  uint64_t v10 = *((void *)this + 51);
  if (v10)
  {
    for (unint64_t i = 0; i != v10; ++i)
    {
      uint64_t v12 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)this + 368, i);
      objc_destroyWeak(v12);
      id *v12 = 0;
    }
  }
  while (*((void *)this + 47))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 46);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 368);
  *((void *)this + 51) = 0;
  ++*((_DWORD *)this + 104);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 368);
  uint64_t v13 = *((void *)this + 33);
  if (v13)
  {
    unint64_t v14 = (id *)*((void *)this + 37);
    if (v14)
    {
      uint64_t v15 = *((void *)this + 35);
      if (v15)
      {
        uint64_t v16 = 8 * v15;
        do
        {
          objc_destroyWeak(v14);
          *v14++ = 0;
          v16 -= 8;
        }
        while (v16);
        uint64_t v13 = *((void *)this + 33);
        unint64_t v14 = (id *)*((void *)this + 37);
      }
      (*(void (**)(uint64_t, id *))(*(void *)v13 + 40))(v13, v14);
    }
    *((void *)this + 37) = 0;
    *((void *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *((void *)this + 35) = 0;
    *((void *)this + 33) = 0;
    ++*((_DWORD *)this + 72);
  }
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(v2);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)this + 13);
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection((void *)this + 6);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::ECSManager::~ECSManager(this);
  JUMPOUT(0x237DBCBD0);
}

BOOL re::ecs2::ECSManager::hasPendingSystemChanges(re::ecs2::ECSManager *this)
{
  if (*((_DWORD *)this + 87) == *((_DWORD *)this + 20)
    && (int v2 = *((_DWORD *)this + 88),
        uint64_t v3 = re::ecs2::CustomSystemRegistry::instance(this),
        v2 == *((_DWORD *)v3 + 20) + *((_DWORD *)v3 + 10)))
  {
    return *((void *)this + 54) != *((_DWORD *)this + 126) + *((_DWORD *)this + 116);
  }
  else
  {
    return 1;
  }
}

void re::ecs2::ECSManager::registerCustomSystem(os_unfair_lock_s *a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v4 = a1 + 107;
  os_unfair_lock_lock(a1 + 107);
  re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)&a1[110], (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

void re::ecs2::ECSManager::addSystemDependency(os_unfair_lock_s *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  _OWORD v5[2] = a2[2];
  uint64_t v4 = a1 + 107;
  os_unfair_lock_lock(a1 + 107);
  re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::add((_anonymous_namespace_ *)&a1[120], (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

void re::ecs2::ECSManager::addSystem(uint64_t a1, unint64_t *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *a2;
  unint64_t v4 = v5;
  *a2 = 0;
  re::ecs2::ECSManager::addSystemNow(a1, &v5, a3, a4);
  if (v4)
  {
  }
}

uint64_t re::ecs2::ECSManager::addSystemNow(uint64_t a1, unint64_t *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = *a2;
  int v9 = (void *)(*a2 + 8);
  id v10 = v9;
  uint64_t v11 = *a2;
  if (*(unsigned char *)(*a2 + 84) != 2 || *(unsigned char *)(v11 + 200))
  {
    if (a4) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v21 = *(void *)(a1 + 88);
    uint64_t v22 = *(void *)(a1 + 72);
    if (v22)
    {
      uint64_t v23 = 8 * v22;
      signed int v24 = *(void **)(a1 + 88);
      while (*v24 != v8)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
        {
          signed int v24 = (void *)(v21 + 8 * v22);
          break;
        }
      }
    }
    else
    {
      signed int v24 = *(void **)(a1 + 88);
    }
    if (v22 == ((uint64_t)v24 - v21) >> 3)
    {
      unint64_t v25 = (void *)(a1 + 48);
      if ((a3 & 0x80000000) == 0)
      {
LABEL_24:
        re::Collection<re::SharedPtr<re::ecs2::System>>::insert(v25, a3, v8);
        goto LABEL_26;
      }
      re::Collection<re::SharedPtr<re::ecs2::System>>::add(v25, v8);
      a3 = v22;
    }
    goto LABEL_26;
  }
  re::ecs2::System::setDefaultTaskOptions(v11, (uint64_t *)(a1 + 304));
  if (!a4) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v12 = (unint64_t *)(a1 + 152);
  unint64_t v29 = v8;
  if (!re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 152, (uint64_t *)&v29))
  {
    unint64_t v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
    unint64_t v14 = v13 ^ (v13 >> 31);
    unint64_t v15 = *v12;
    if (*v12)
    {
      unint64_t v15 = v14 % *(unsigned int *)(a1 + 176);
      uint64_t v16 = *(unsigned int *)(*(void *)(a1 + 160) + 4 * v15);
      if (v16 != 0x7FFFFFFF)
      {
        uint64_t v28 = *(void *)(a1 + 168);
        if (*(void *)(v28 + 32 * v16 + 16) == v8) {
          goto LABEL_23;
        }
        while (1)
        {
          uint64_t v16 = *(_DWORD *)(v28 + 32 * v16 + 8) & 0x7FFFFFFF;
          if (v16 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v28 + 32 * v16 + 16) == v8) {
            goto LABEL_23;
          }
        }
      }
    }
    uint64_t v17 = *(unsigned int *)(a1 + 188);
    if (v17 == 0x7FFFFFFF)
    {
      uint64_t v17 = *(unsigned int *)(a1 + 184);
      int v18 = v17;
      if (v17 == *(_DWORD *)(a1 + 176))
      {
        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1 + 152, 2 * *(_DWORD *)(a1 + 180));
        LODWORD(v15) = v14 % *(unsigned int *)(a1 + 176);
        int v18 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(a1 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v18 + 1;
      uint64_t v19 = *(void *)(a1 + 168);
      int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 168);
      int v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
      *(_DWORD *)(a1 + 188) = v20 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
    *(_DWORD *)(*(void *)(a1 + 168) + 32 * v17 + 8) = *(_DWORD *)(*(void *)(a1 + 168) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 160) + 4 * v15);
    *(void *)(*(void *)(a1 + 168) + 32 * v17) = v14;
    *(void *)(*(void *)(a1 + 168) + 32 * v17 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v8;
    *(void *)(*(void *)(a1 + 168) + 32 * v17 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a4;
    *(_DWORD *)(*(void *)(a1 + 160) + 4 * v15) = v17;
    ++*(_DWORD *)(a1 + 180);
    ++*(_DWORD *)(a1 + 192);
LABEL_23:
    unint64_t v25 = (void *)(a1 + 48);
    if ((a3 & 0x80000000) != 0)
    {
      a3 = *(_DWORD *)(a1 + 72);
      re::Collection<re::SharedPtr<re::ecs2::System>>::add(v25, v8);
      goto LABEL_26;
    }
    goto LABEL_24;
  }
LABEL_26:
  uint64_t v26 = *(void *)(a1 + 40);
  if (v26 && *(float *)(v26 + 756) > 0.0)
  {
    *(_DWORD *)(v26 + 756) = 0;
    *(float *)(v26 + 752) = fminf(*(float *)(v26 + 752), 0.0);
  }

  return (int)a3;
}

void re::Collection<re::SharedPtr<re::ecs2::System>>::insert(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v8 = a3;
  if (a3) {
    id v5 = (id)(a3 + 8);
  }
  uint64_t v6 = (re *)(*(uint64_t (**)(void *, unint64_t, uint64_t *))(*a1 + 24))(a1, a2, &v8);
  if (a1[3] >= a2)
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::insert((_anonymous_namespace_ *)(a1 + 1), a2, &v8);
    (*(void (**)(void *, unint64_t, uint64_t *))(*a1 + 48))(a1, a2, &v8);
  }
  else
  {
    uint64_t v7 = *re::foundationCoreLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)float32x4_t buf = 136315394;
      id v10 = "void re::Collection<re::SharedPtr<re::ecs2::System>>::insert(size_t, const T &) [T = re::SharedPtr<re::ecs2::System>]";
      __int16 v11 = 2048;
      unint64_t v12 = a2;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "%s: index %zu invalid after willInsert(), not inserting", buf, 0x16u);
    }
  }
  if (v8) {
}
  }

void re::Collection<re::SharedPtr<re::ecs2::System>>::add(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v6 = a2;
  if (a2) {
    id v4 = (id)(a2 + 8);
  }
  (*(void (**)(void *, uint64_t, uint64_t *))(*a1 + 24))(a1, v3, &v6);
  uint64_t v5 = a1[3];
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(a1 + 1, &v6);
  (*(void (**)(void *, uint64_t, uint64_t *))(*a1 + 48))(a1, v5, &v6);
  if (v6) {
}
  }

void re::ecs2::ECSManager::removeSystem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  re::ecs2::ECSManager::removeSystemNow(a1, &v3, a3, (uint64_t)v4);
  if (v3) {
}
  }

void *re::ecs2::ECSManager::removeSystemNow@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    int v9 = *(void **)(a1 + 88);
    while (*v9 != *a2)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        int v9 = (void *)(v6 + 8 * v7);
        break;
      }
    }
  }
  else
  {
    int v9 = *(void **)(a1 + 88);
  }
  uint64_t v10 = a1 + 48;
  uint64_t v11 = ((uint64_t)v9 - v6) >> 3;
  if (v11 == v7)
  {
    char v12 = 0;
  }
  else
  {
    *(void *)(a4 + 8) = v11;
    char v12 = 1;
  }
  *(unsigned char *)a4 = v12;
  if (a3)
  {
    uint64_t v13 = a1 + 152;
    uint64_t v16 = *a2;
    __n128 result = (void *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 152, &v16);
    if (result)
    {
      if (*result == a3)
      {
        re::Collection<re::SharedPtr<re::ecs2::System>>::removeStable(v10, a2);
        uint64_t v16 = *a2;
        return (void *)re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v13, &v16);
      }
    }
  }
  else
  {
    uint64_t v15 = a1 + 48;
    return (void *)re::Collection<re::SharedPtr<re::ecs2::System>>::removeStable(v15, a2);
  }
  return result;
}

uint64_t re::Collection<re::SharedPtr<re::ecs2::System>>::removeStable(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    uint64_t v6 = *(void **)(a1 + 40);
    while (*v6 != *a2)
    {
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        uint64_t v6 = (void *)(v3 + 8 * v4);
        break;
      }
    }
  }
  else
  {
    uint64_t v6 = *(void **)(a1 + 40);
  }
  unint64_t v7 = ((uint64_t)v6 - v3) >> 3;
  if (v7 == v4) {
    return 0;
  }
  int v9 = *(_DWORD *)(a1 + 32);
  uint64_t v10 = *a2;
  uint64_t v17 = v10;
  if (v10) {
    id v11 = (id)(v10 + 8);
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v7, &v17);
  if (v9 == *(_DWORD *)(a1 + 32)) {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    uint64_t v15 = *(void **)(a1 + 40);
    while (*v15 != v17)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
      {
        uint64_t v15 = (void *)(v12 + 8 * v13);
        break;
      }
    }
  }
  else
  {
    uint64_t v15 = *(void **)(a1 + 40);
  }
  unint64_t v7 = ((uint64_t)v15 - v12) >> 3;
  if (v7 != v13)
  {
LABEL_20:
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::removeStableAt(a1 + 8, v7);
    (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 56))(a1, v7, &v17);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (v17) {

  }
  return v8;
}

uint64_t re::ecs2::ECSManager::getSceneThisSystemIsBoundToD8(re::ecs2::ECSManager *this, const re::ecs2::System *a2)
{
  uint64_t v3 = a2;
  uint64_t result = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 152, (uint64_t *)&v3);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t re::ecs2::ECSManager::outputDeviceSystemTasks@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 40);
  if (v3)
  {
    uint64_t v4 = this;
    unint64_t v5 = *(void *)(v3 + 40);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
    *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *(void *)(a2 + 32) = 0;
    if ((v5 & 0x3F) != 0) {
      unint64_t v6 = (v5 >> 6) + 1;
    }
    else {
      unint64_t v6 = v5 >> 6;
    }
    *(void *)(a2 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v5;
    uint64_t v11 = 0;
    this = (uint64_t)re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)a2, v6, &v11);
    uint64_t v7 = *(void *)(v4 + 72);
    if (v7)
    {
      uint64_t v8 = *(void *)(v4 + 88);
      uint64_t v9 = 8 * v7;
      do
      {
        if (*(unsigned char *)(*(void *)v8 + 84) == 1)
        {
          unint64_t v10 = *(void *)(*(void *)v8 + 96);
          if (v10 < v5) {
            this = re::DynamicBitset<unsigned long long,256ul>::setBit(a2, v10);
          }
        }
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 1;
    *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  }
  return this;
}

uint64_t re::ecs2::ECSManager::systems(re::ecs2::ECSManager *this)
{
  return (uint64_t)this + 48;
}

void re::ecs2::ECSManager::configureSystemChanges(re::ecs2::ECSManager *this)
{
  int v2 = re::ecs2::CustomSystemRegistry::instance(this);
  if (*((_DWORD *)this + 88) != *((_DWORD *)v2 + 20) + *((_DWORD *)v2 + 10))
  {
    uint64_t v3 = v2;
    re::ecs2::CustomSystemRegistry::configureSystemChanges((uint64_t)v2, (uint64_t)this, (uint64_t)this + 56);
    *((_DWORD *)this + 88) = *((_DWORD *)v3 + 20) + *((_DWORD *)v3 + 10);
  }
  if (*((void *)this + 54) != *((_DWORD *)this + 126) + *((_DWORD *)this + 116)) {
    re::ecs2::CustomSystemRegistry::configureSystemChanges((uint64_t)this + 424, (uint64_t)this, (uint64_t)this + 56);
  }
  *((_DWORD *)this + 87) = *((_DWORD *)this + 20);
}

void re::ecs2::ECSManager::configurePreparePhase(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0xEEC0FA23AB2AF7FCLL;
  uint64_t v8 = "ECSManager::Prepare Profiling Begin";
  __int16 v9 = 1;
  int v10 = 0;
  char v11 = 0;
  __int16 v12 = 260;
  int v13 = 1023969417;
  char v14 = 0;
  uint64_t v17 = re::globalAllocators(a1)[2];
  int v18 = &v15;
  uint64_t v15 = &unk_26E70CA48;
  uint64_t v16 = a1;
  uint64_t v19 = a3;
  uint64_t v20 = 0;
  uint64_t v24 = 0;
  int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v7);
  if (v20)
  {
    if (v24) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    ++v23;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)&v15);
  re::StringID::destroyString((re::StringID *)&v7);
  re::ecs2::ECSManager::configurePhaseECSSystems(a1, a2, 0, a3);
  uint64_t v7 = 0xA9F037AB534ABAE0;
  uint64_t v8 = "ECSManager::Prepare Profiling End";
  __int16 v9 = 1;
  int v10 = 0;
  char v11 = 0;
  __int16 v12 = 260;
  int v13 = 1023969417;
  char v14 = 0;
  uint64_t v17 = re::globalAllocators(v6)[2];
  int v18 = &v15;
  uint64_t v15 = &unk_26E70CAA0;
  uint64_t v16 = a1;
  uint64_t v19 = a3;
  uint64_t v20 = 0;
  uint64_t v24 = 0;
  int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v7);
  if (v20)
  {
    if (v24) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    ++v23;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)&v15);
  re::StringID::destroyString((re::StringID *)&v7);
}

void re::ecs2::ECSManager::configurePhaseECSSystems(re *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a1 + 9);
  if (!v6) {
    goto LABEL_44;
  }
  long long v35 = (void *)((char *)a1 + 360);
  uint64_t v36 = (char *)a1 + 356;
  uint64_t v8 = (unsigned __int8 **)*((void *)a1 + 11);
  unint64_t v33 = a1;
  uint64_t v34 = (uint64_t)a1 + 152;
  uint64_t v9 = 8 * v6;
  int v10 = 1;
  do
  {
    char v11 = *v8;
    uint64_t v43 = v11;
    if (v11[48] == a3)
    {
      int v12 = (v11[84] == 2) | v10;
      if (v11[84] != 2 && ((v10 ^ 1) & 1) == 0)
      {
        re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(v33, a2, a4);
        int v12 = 0;
        char v11 = v43;
      }
      *(void *)&v42.var0 = 0x6E89C30E7C08;
      v42.var1 = "ECSSystem";
      uint64_t v13 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v11 + 32))(v11);
      if (*(_DWORD *)(v13 + 16) == 8)
      {
        char v14 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"ECSSystem - %s", (re::DynamicString *)&v44, *(void *)(v13 + 48));
        uint64_t v15 = (v45 & 1) != 0 ? v47 : v46;
        id location = 0;
        unint64_t v41 = "";
        id v16 = location;
        uint64_t v17 = (char *)v41;
        int v18 = (void *)((unint64_t)location & 0xFFFFFFFFFFFFFFFELL);
        id location = 0;
        unint64_t v41 = "";
        id to = v18;
        *(void *)int v38 = "ECSSystem";
        *(void *)&v42.var0 = v16;
        v42.var1 = v17;
        re::StringID::destroyString((re::StringID *)&to);
        re::StringID::destroyString((re::StringID *)&location);
        if (v44)
        {
          if (v45) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
        }
      }
      uint64_t v19 = (void *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v34, (uint64_t *)&v43);
      if (v43) {
        uint64_t v20 = v43 + 8;
      }
      else {
        uint64_t v20 = 0;
      }
      objc_initWeak(&location, v20);
      if (v19)
      {
        if (*v19) {
          uint64_t v21 = (void *)(*v19 + 8);
        }
        else {
          uint64_t v21 = 0;
        }
        objc_initWeak(&from, v21);
        re::StringID::StringID((re::StringID *)&v44, &v42);
        LOBYTE(v47) = v43[64];
        BYTE1(v47) = v43[86];
        HIDWORD(v47) = *((_DWORD *)v43 + 22);
        char v48 = 0;
        uint64_t v22 = v43 + 52;
        if (v43[68]) {
          uint64_t v22 = v43 + 72;
        }
        uint64_t v49 = *(void *)v22;
        unsigned __int8 v50 = v22[8];
        id to = 0;
        objc_copyWeak(&to, &location);
        *(void *)int v38 = 0;
        objc_copyWeak((id *)v38, &from);
        *(void *)&v38[8] = v36;
        *(void *)&v38[16] = v35;
        uint64_t v24 = re::globalAllocators(v23)[2];
        uint64_t v52 = v24;
        uint64_t v53 = 0;
        if (v24) {
          uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v24 + 32))(v24, 40, 0);
        }
        else {
          uint64_t v25 = 0;
        }
        *(void *)uint64_t v25 = &unk_26E70CCB0;
        *(void *)(v25 + 8) = 0;
        objc_moveWeak((id *)(v25 + 8), &to);
        *(void *)(v25 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
        objc_moveWeak((id *)(v25 + 16), (id *)v38);
        *(_OWORD *)(v25 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_OWORD *)&v38[8];
        uint64_t v53 = v25;
        uint64_t v54 = a4;
        uint64_t v59 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        uint64_t v55 = 0;
        int v58 = 0;
        uint64_t v30 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v44);
        *((void *)v43 + 12) = v30;
        if (v55)
        {
          if (v59) {
            (*(void (**)(void))(*(void *)v55 + 40))();
          }
          uint64_t v59 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v55 = 0;
          ++v58;
        }
        re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v51);
        re::StringID::destroyString((re::StringID *)&v44);
        objc_destroyWeak((id *)v38);
        *(void *)int v38 = 0;
        objc_destroyWeak(&to);
        p_id from = &from;
      }
      else
      {
        re::StringID::StringID((re::StringID *)&v44, &v42);
        LOBYTE(v47) = v43[64];
        BYTE1(v47) = v43[86];
        HIDWORD(v47) = *((_DWORD *)v43 + 22);
        char v48 = 0;
        uint64_t v26 = v43 + 52;
        if (v43[68]) {
          uint64_t v26 = v43 + 72;
        }
        uint64_t v49 = *(void *)v26;
        unsigned __int8 v50 = v26[8];
        id to = 0;
        objc_copyWeak(&to, &location);
        *(void *)int v38 = v36;
        *(void *)&v38[8] = v35;
        uint64_t v28 = re::globalAllocators(v27)[2];
        uint64_t v52 = v28;
        uint64_t v53 = 0;
        if (v28) {
          uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v28 + 32))(v28, 32, 0);
        }
        else {
          uint64_t v29 = 0;
        }
        *(void *)uint64_t v29 = &unk_26E70CD08;
        *(void *)(v29 + 8) = 0;
        objc_moveWeak((id *)(v29 + 8), &to);
        *(_OWORD *)(v29 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)v38;
        uint64_t v53 = v29;
        uint64_t v54 = a4;
        uint64_t v59 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        uint64_t v55 = 0;
        int v58 = 0;
        uint64_t v32 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v44);
        *((void *)v43 + 12) = v32;
        if (v55)
        {
          if (v59) {
            (*(void (**)(void))(*(void *)v55 + 40))();
          }
          uint64_t v59 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v55 = 0;
          ++v58;
        }
        re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v51);
        re::StringID::destroyString((re::StringID *)&v44);
        p_id from = &to;
      }
      objc_destroyWeak(p_from);
      objc_destroyWeak(&location);
      re::StringID::destroyString((re::StringID *)&v42);
      int v10 = v12;
    }
    ++v8;
    v9 -= 8;
  }
  while (v9);
  a1 = v33;
  if (v10) {
LABEL_44:
  }
    re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(a1, a2, a4);
}

void re::ecs2::ECSManager::configureSimulatePhase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0xD448DC82DA1AF396;
  uint64_t v9 = "ECSManager::Simulate Profiling Begin";
  __int16 v10 = 1;
  int v11 = 0;
  char v12 = 0;
  LOWORD(v13) = 260;
  HIDWORD(v13) = 1023969417;
  char v14 = 0;
  uint64_t v18 = re::globalAllocators((re *)a1)[2];
  uint64_t v19 = &v15;
  uint64_t v15 = &unk_26E70CAF8;
  uint64_t v16 = a1;
  uint64_t v20 = a3;
  uint64_t v21 = 0;
  uint64_t v25 = 0;
  int v24 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v8);
  if (v21)
  {
    if (v25) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    ++v24;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)&v15);
  re::StringID::destroyString((re::StringID *)&v8);
  re::ecs2::ECSManager::configurePhaseECSSystems((re *)a1, a2, 1, a3);
  *(void *)(a1 + 336) = -1;
  if (*(void *)(a1 + 328))
  {
    uint64_t v8 = 0x170A146AA311E622;
    uint64_t v9 = "ECS Update Callback";
    __int16 v10 = 1;
    int v11 = 0;
    char v12 = 0;
    uint64_t v13 = *(void *)(a1 + 304);
    char v14 = *(unsigned char *)(a1 + 312);
    uint64_t v18 = re::globalAllocators(v6)[2];
    uint64_t v19 = &v15;
    uint64_t v15 = &unk_26E70CB50;
    uint64_t v16 = a1;
    uint64_t v20 = a3;
    uint64_t v21 = 0;
    uint64_t v25 = 0;
    int v24 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)(a1 + 336) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v8);
    if (v21)
    {
      if (v25) {
        (*(void (**)(void))(*(void *)v21 + 40))();
      }
      uint64_t v25 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      ++v24;
    }
    re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)&v15);
    re::StringID::destroyString((re::StringID *)&v8);
  }
  uint64_t v8 = 0xFBB13980CD58D4FALL;
  uint64_t v9 = "ECSManager::Simulate Profiling End";
  __int16 v10 = 1;
  int v11 = 0;
  char v12 = 0;
  LOWORD(v13) = 260;
  HIDWORD(v13) = 1023969417;
  char v14 = 0;
  uint64_t v7 = re::globalAllocators(v6)[2];
  uint64_t v17 = a1;
  uint64_t v18 = v7;
  uint64_t v15 = &unk_26E70CBA8;
  uint64_t v16 = a1 + 200;
  uint64_t v19 = &v15;
  uint64_t v20 = a3;
  uint64_t v25 = 0;
  int v24 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v8);
  if (v21)
  {
    if (v25) {
      (*(void (**)(void))(*(void *)v21 + 40))();
    }
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    ++v24;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)&v15);
  re::StringID::destroyString((re::StringID *)&v8);
}

void re::ecs2::ECSManager::configureCommitPhase(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0xD1BE049E450061BCLL;
  uint64_t v8 = "ECSManager::Commit Profiling Begin";
  __int16 v9 = 1;
  int v10 = 0;
  char v11 = 0;
  __int16 v12 = 260;
  int v13 = 1023969417;
  char v14 = 0;
  uint64_t v17 = re::globalAllocators(a1)[2];
  uint64_t v18 = &v15;
  uint64_t v15 = &unk_26E70CC00;
  uint64_t v16 = a1;
  uint64_t v19 = a3;
  uint64_t v20 = 0;
  uint64_t v24 = 0;
  int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v7);
  if (v20)
  {
    if (v24) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    ++v23;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)&v15);
  re::StringID::destroyString((re::StringID *)&v7);
  re::ecs2::ECSManager::configurePhaseECSSystems(a1, a2, 2, a3);
  uint64_t v7 = 0x37A0906342EF94A0;
  uint64_t v8 = "ECSManager::Commit Profiling End";
  __int16 v9 = 1;
  int v10 = 0;
  char v11 = 0;
  __int16 v12 = 260;
  int v13 = 1023969417;
  char v14 = 0;
  uint64_t v17 = re::globalAllocators(v6)[2];
  uint64_t v18 = &v15;
  uint64_t v15 = &unk_26E70CC58;
  uint64_t v16 = a1;
  uint64_t v19 = a3;
  uint64_t v20 = 0;
  uint64_t v24 = 0;
  int v23 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v7);
  if (v20)
  {
    if (v24) {
      (*(void (**)(void))(*(void *)v20 + 40))();
    }
    uint64_t v24 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v20 = 0;
    ++v23;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)&v15);
  re::StringID::destroyString((re::StringID *)&v7);
}

void re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v6[0] = 0xA9CCEE58A62125DCLL;
  v6[1] = (uint64_t)"Post Update Callback Batch Dirty Components";
  __int16 v7 = 1;
  int v8 = 0;
  char v9 = 0;
  __int16 v10 = 260;
  int v11 = 1023969417;
  char v12 = 0;
  v13[3] = re::globalAllocators(a1)[2];
  void v13[4] = v13;
  v13[0] = &unk_26E70CD60;
  v13[1] = a1;
  v13[5] = a3;
  uint64_t v14 = 0;
  uint64_t v18 = 0;
  int v17 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, v6);
  if (v14)
  {
    if (v18) {
      (*(void (**)(void))(*(void *)v14 + 40))();
    }
    uint64_t v18 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    ++v17;
  }
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)v13);
  re::StringID::destroyString((re::StringID *)v6);
}

uint64_t re::ecs2::ECSManager::resolveEntityHandle(re::ecs2::ECSManager *this, const re::ecs2::EntityHandle *a2)
{
  uint64_t v2 = *((void *)this + 28);
  if (v2)
  {
    uint64_t v3 = *((void *)a2 + 1);
    uint64_t v4 = (uint64_t *)*((void *)this + 30);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4;
      if (*v4)
      {
        __int16 v7 = (void *)(v6 + 8);
        id v8 = (id)(v6 + 8);
        uint64_t v15 = v3;
        uint64_t v9 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v6 + 152, &v15);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 8);

          if (v10) {
            return v10;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(v6 + 104);
          uint64_t v12 = *(void *)(v10 + 296);
          uint64_t v13 = v15;

          if (v12 == v13) {
            return v10;
          }
        }
      }
      else
      {
        uint64_t v15 = v3;
        uint64_t v11 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(152, &v15);
        if (v11)
        {
          uint64_t v10 = *(void *)(v11 + 8);
          if (v10) {
            return v10;
          }
        }
        else
        {
          uint64_t v10 = MEMORY[0x68];
          if (*(void *)(MEMORY[0x68] + 296) == v15) {
            return v10;
          }
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::ECSManager::scenes(re::ecs2::ECSManager *this)
{
  return (uint64_t)this + 200;
}

{
  return (uint64_t)this + 200;
}

uint64_t re::ecs2::ECSManager::setSceneNetworkingMode(uint64_t result, int a2)
{
  if (!*(void *)(result + 224)) {
    *(_DWORD *)(result + 34re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a2;
  }
  return result;
}

re::Scheduler *re::ecs2::ECSManager::setDefaultCustomSystemTaskOptions(uint64_t a1, float *a2)
{
  uint64_t result = *(re::Scheduler **)(a1 + 40);
  if (result)
  {
    unint64_t v5 = *(void *)(a1 + 336);
    if (v5 != -1) {
      uint64_t result = (re::Scheduler *)re::Scheduler::setTaskOptions(result, v5, a2);
    }
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      __int16 v7 = *(re::Scheduler ***)(a1 + 88);
      uint64_t v8 = 8 * v6;
      do
      {
        uint64_t result = *v7;
        if (*((unsigned char *)*v7 + 84) == 2 && !*((unsigned char *)result + 200)) {
          uint64_t result = (re::Scheduler *)re::ecs2::System::setDefaultTaskOptions((uint64_t)result, (uint64_t *)a2);
        }
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
  }
  uint64_t v9 = *(void *)a2;
  *(unsigned char *)(a1 + 312) = *((unsigned char *)a2 + 8);
  *(void *)(a1 + 30re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v9;
  return result;
}

uint64_t re::ecs2::ECSManager::systemsArePausedInEditor(re::ecs2::ECSManager *this)
{
  return *((unsigned __int8 *)this + 356);
}

uint64_t re::ecs2::ECSManager::setSystemsArePausedInEditor(uint64_t this, char a2)
{
  *(unsigned char *)(this + 356) = a2;
  return this;
}

uint64_t re::ecs2::ECSManager::customSystemAtID(re::ecs2::ECSManager *this, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 9);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = 8 * v2;
  while (*(_DWORD *)(*(void *)v3 + 28) != a2)
  {
    v3 += 8;
    v4 -= 8;
    if (!v4) {
      return 0;
    }
  }
  if (*(unsigned char *)(*(void *)v3 + 84) == 2) {
    return *(void *)v3;
  }
  else {
    return 0;
  }
}

void re::ecs2::ECSManager::enqueueComponentToMarkDirty(re::ecs2::ECSManager *this, const re::ecs2::Component *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a2) {
    uint64_t v3 = (char *)a2 + 8;
  }
  else {
    uint64_t v3 = 0;
  }
  objc_initWeak(location, v3);
  unint64_t v4 = *((void *)this + 51);
  unint64_t v5 = *((void *)this + 47);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::setBucketsCapacity((void *)this + 46, (v4 + 32) >> 5);
    unint64_t v5 = *((void *)this + 47);
  }
  if (v5 <= v4 >> 5)
  {
    location[1] = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v10 = 136315906;
    uint64_t v11 = "operator[]";
    __int16 v12 = 1024;
    int v13 = 858;
    __int16 v14 = 2048;
    unint64_t v15 = v4 >> 5;
    __int16 v16 = 2048;
    unint64_t v17 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*((unsigned char *)this + 384)) {
    uint64_t v6 = (char *)this + 392;
  }
  else {
    uint64_t v6 = (char *)*((void *)this + 50);
  }
  uint64_t v7 = *(void *)&v6[8 * (v4 >> 5)];
  ++*((void *)this + 51);
  ++*((_DWORD *)this + 104);
  uint64_t v8 = (id *)(v7 + 8 * (v4 & 0x1F));
  id *v8 = 0;
  objc_moveWeak(v8, location);
  objc_destroyWeak(location);
}

void re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(re::ecs2::ECSManager *this)
{
  uint64_t v1 = *((void *)this + 51);
  if (v1)
  {
    uint64_t v3 = (char *)this + 368;
    do
    {
      unint64_t v4 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v3, v1 - 1);
      id WeakRetained = objc_loadWeakRetained(v4);
      re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::removeLast((uint64_t)v3);
      if (WeakRetained)
      {
        if (WeakRetained[16]) {
          re::ecs2::Component::markDirty((void *)WeakRetained - 1);
        }
      }
      uint64_t v1 = *((void *)this + 51);
    }
    while (v1);
  }
}

void re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::removeLast(uint64_t a1)
{
  uint64_t v2 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, *(void *)(a1 + 40) - 1);
  objc_destroyWeak(v2);
  *uint64_t v2 = 0;
  --*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
}

void *re::ecs2::ECSManager::removeAndAddScenes(void *this)
{
  if (this[9])
  {
    uint64_t v1 = this;
    unint64_t v2 = 0;
    uint64_t v3 = (uint64_t)(this + 6);
    uint64_t v4 = (uint64_t)(this + 19);
    do
    {
      uint64_t v8 = *(void *)re::ecs2::EntityComponentCollection::operator[](v3, v2);
      this = (void *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v4, &v8);
      if (this)
      {
        uint64_t v5 = *this;
        if (*this)
        {
          uint64_t v6 = (void *)re::ecs2::EntityComponentCollection::operator[](v3, v2);
          (*(void (**)(void, uint64_t))(*(void *)*v6 + 56))(*v6, v5);
          uint64_t v7 = (void *)re::ecs2::EntityComponentCollection::operator[](v3, v2);
          this = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v7 + 48))(*v7, v5);
        }
      }
      ++v2;
    }
    while (v2 < v1[9]);
  }
  return this;
}

void re::ecs2::ECSManager::createRealityRendererSceneGroup(re::ecs2::ECSManager *this@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  re::make::shared::object<re::ecs2::RealityRendererSceneGroup>(this, a2);
  uint64_t v3 = re::ecs2::RealityRendererSceneGroup::m_currentIdentifier++;
  *((void *)*a2 + 3) = v3;
}

uint64_t re::ecs2::ECSManager::getActiveRealityRendererSceneGroup(re::ecs2::ECSManager *this)
{
  return *((void *)this + 45);
}

void re::ecs2::ECSManager::setActiveRealityRendererSceneGroup(re::ecs2::ECSManager *this, re::ecs2::RealityRendererSceneGroup *a2)
{
  *((void *)this + 45) = a2;
  uint64_t v3 = (re::ecs2::ECSManager *)((char *)this + 264);
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::clear((uint64_t)this + 264);
  uint64_t v4 = *((void *)this + 28);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 30);
    uint64_t v6 = 8 * v4;
    do
    {
      if (*(void *)(*(void *)v5 + 376) == *((void *)this + 45))
      {
        objc_initWeak(&location, (id)(*(void *)v5 + 8));
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add(v3, &location);
        objc_destroyWeak(&location);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t re::ecs2::ECSManager::activeScenes(re::ecs2::ECSManager *this)
{
  if (*((_DWORD *)this + 64) != *((_DWORD *)this + 58))
  {
    re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::clear((uint64_t)this + 264);
    uint64_t v2 = *((void *)this + 28);
    if (v2)
    {
      uint64_t v3 = *((void *)this + 30);
      uint64_t v4 = 8 * v2;
      do
      {
        if (*(void *)(*(void *)v3 + 376) == *((void *)this + 45))
        {
          objc_initWeak(&location, (id)(*(void *)v3 + 8));
          re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add((re::ecs2::ECSManager *)((char *)this + 264), &location);
          objc_destroyWeak(&location);
        }
        v3 += 8;
        v4 -= 8;
      }
      while (v4);
    }
    *((_DWORD *)this + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *((_DWORD *)this + 58);
  }
  return *((void *)this + 37);
}

void re::ecs2::ECSManager::executeInlinePhaseByGroup(re::ecs2::ECSManager *this, int a2)
{
  uint64_t v4 = *((void *)this + 45);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 24);
  }
  else {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *((void *)this + 9);
  if (!v6) {
    goto LABEL_33;
  }
  uint64_t v7 = (unsigned __int8 **)*((void *)this + 11);
  uint64_t v8 = 8 * v6;
  int v9 = 1;
  do
  {
    int v10 = *v7;
    long long v21 = v10;
    if (v10[48] == a2)
    {
      BOOL v11 = v10[84] == 2;
      if (v11)
      {
        v9 |= v11;
      }
      else
      {
        char v12 = v9 ^ 1;
        v9 |= v11;
        if ((v12 & 1) == 0)
        {
          re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(this);
          int v9 = 0;
        }
      }
      uint64_t v13 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 152, (uint64_t *)&v21);
      if (v21) {
        __int16 v14 = v21 + 8;
      }
      else {
        __int16 v14 = 0;
      }
      objc_initWeak(&v20, v14);
      if (v13)
      {
        uint64_t v15 = *(void *)(*(void *)v13 + 376);
        if (v15) {
          uint64_t v16 = *(void *)(v15 + 24);
        }
        else {
          uint64_t v16 = 1;
        }
        if (v5 == v16) {
          (*(void (**)(unsigned __int8 *))(*(void *)v21 + 88))(v21);
        }
      }
      else
      {
        int v17 = v21[85];
        BOOL v18 = v5 == 1 && v21[85] == 0;
        BOOL v19 = v5 == 1 || v17 != 1;
        if (v17 == 2 || v18 || !v19) {
          (*(void (**)(void))(*(void *)v21 + 80))();
        }
      }
      objc_destroyWeak(&v20);
    }
    ++v7;
    v8 -= 8;
  }
  while (v8);
  if (v9) {
LABEL_33:
  }
    re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(this);
}

uint64_t re::ecs2::ECSManager::services(re::ecs2::ECSManager *this)
{
  return *((void *)this + 4);
}

uint64_t re::ecs2::ECSManager::scheduler(re::ecs2::ECSManager *this)
{
  return *((void *)this + 5);
}

uint64_t re::ecs2::ECSManager::setScheduler(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t re::ecs2::ECSManager::sceneNetworkingMode(re::ecs2::ECSManager *this)
{
  return *((unsigned int *)this + 86);
}

uint64_t re::ecs2::ECSManager::defaultCustomSystemTaskOptions(re::ecs2::ECSManager *this)
{
  return (uint64_t)this + 304;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()()
{
  uint64_t v0 = re::internal::enableSignposts(0, 0);
  if (v0) {
    uint64_t v0 = kdebug_trace();
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v0);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v2 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::pushTimeScope(v2);
  }
}

void *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CA48;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CA48;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::~Callable()
{
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::operator()(re::ProfilerConfig *a1)
{
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v2 = re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::popTimeScope(v2, 0xDu);
  }
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    return kdebug_trace();
  }
  return result;
}

void *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CAA0;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CAA0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()()
{
  uint64_t v0 = re::internal::enableSignposts(0, 0);
  if (v0) {
    uint64_t v0 = kdebug_trace();
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v0);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v2 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::pushTimeScope(v2);
  }
}

void *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CAF8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CAF8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t v3 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v11, 3007, *(void *)(a1 + 8));
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v3);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v5 = re::profilerThreadContext(isStatisticCollectionEnabled);
    if (*(void *)(v5 + 152)) {
      uint64_t v1 = mach_absolute_time();
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 8) + 328))();
  if (v5)
  {
    if (*(void *)(v5 + 152))
    {
      uint64_t v6 = mach_absolute_time();
      uint64_t v7 = *(int64x2_t **)(v5 + 152);
      if (v7)
      {
        uint64_t v8 = v7[512].u64[0];
        if (v8 >= v6 - v1) {
          uint64_t v8 = v6 - v1;
        }
        v7[512].i64[0] = v8;
        uint64_t v9 = v7[512].u64[1];
        if (v9 <= v6 - v1) {
          uint64_t v9 = v6 - v1;
        }
        v7[512].i64[1] = v9;
        int64x2_t v10 = vdupq_n_s64(1uLL);
        v10.i64[0] = v6 - v1;
        v7[513] = vaddq_s64(v7[513], v10);
        *(unsigned char *)(v5 + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v11);
}

void *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CB50;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CB50;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::~Callable()
{
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *(uint64_t **)(v1 + 40);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      v3 += *(_DWORD *)(v6 + 128);
      v5 -= 8;
    }
    while (v5);
    unint64_t v7 = v3;
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = re::internal::enableSignposts(0, 0);
  if (v8) {
    uint64_t v8 = kdebug_trace();
  }
  uint64_t isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v8);
  if (isStatisticCollectionEnabled)
  {
    uint64_t isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    int64x2_t v10 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
    if (v10)
    {
      unint64_t v11 = v10[476].u64[0];
      if (v11 >= v7) {
        unint64_t v11 = v7;
      }
      v10[476].i64[0] = v11;
      unint64_t v12 = v10[476].u64[1];
      if (v12 <= v7) {
        unint64_t v12 = v7;
      }
      v10[476].i64[1] = v12;
      int64x2_t v13 = vdupq_n_s64(1uLL);
      v13.i64[0] = v7;
      v10[477] = vaddq_s64(v10[477], v13);
      *(unsigned char *)(isStatisticCollectionEnabled + 18re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    }
  }
  __int16 v14 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if (v14)
  {
    uint64_t v15 = re::profilerThreadContext(v14);
    re::ProfilerThreadContext::popTimeScope(v15, 0xEu);
  }
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    return kdebug_trace();
  }
  return result;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70CBA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70CBA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::size()
{
  return 24;
}

void re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()()
{
  uint64_t v0 = re::internal::enableSignposts(0, 0);
  if (v0) {
    uint64_t v0 = kdebug_trace();
  }
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v0);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v2 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::pushTimeScope(v2);
  }
}

void *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CC00;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CC00;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::~Callable()
{
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::operator()(re::ProfilerConfig *a1)
{
  uint64_t isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v2 = re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::popTimeScope(v2, 0xFu);
  }
  uint64_t result = re::internal::enableSignposts(0, 0);
  if (result)
  {
    return kdebug_trace();
  }
  return result;
}

void *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CC58;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CC58;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70CCB0;
  uint64_t v2 = (id *)(a1 + 8);
  objc_destroyWeak((id *)(a1 + 16));
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  objc_destroyWeak(v2);
  *(void *)(a1 + 8) = 0;
  return a1;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70CCB0;
  uint64_t v2 = (id *)(a1 + 8);
  objc_destroyWeak((id *)(a1 + 16));
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  objc_destroyWeak(v2);
  *(void *)(a1 + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    uint64_t v5 = WeakRetained;
    *((unsigned char *)WeakRetained + 78) = 0;
    id v6 = objc_loadWeakRetained((id *)(a1 + 16));
    if (v6)
    {
      unint64_t v7 = v6;
      if (v5[4] && *((void *)v6 + 6))
      {
        uint64_t v8 = **(void **)(a1 + 32);
        uint64_t v9 = v8 ? *(void *)(v8 + 24) : 1;
        uint64_t v10 = *((void *)v6 + 46);
        uint64_t v11 = v10 ? *(void *)(v10 + 24) : 1;
        if (v9 == v11) {
          (*(void (**)(void *, uint64_t, unint64_t))(*(v5 - 1) + 88))(v5 - 1, (uint64_t)v6 - 8, v3 | ((unint64_t)**(unsigned __int8 **)(a1 + 24) << 32));
        }
      }
    }
  }
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70CCB0;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  objc_copyWeak((id *)(a2 + 16), (id *)(a1 + 16));
  *(_OWORD *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_OWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70CCB0;
  *(void *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  objc_moveWeak((id *)(a2 + 16), (id *)(a1 + 16));
  *(_OWORD *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_OWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::size()
{
  return 40;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70CD08;
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::~Callable(uint64_t a1)
{
  *(void *)a1 = &unk_26E70CD08;
  objc_destroyWeak((id *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  JUMPOUT(0x237DBCBD0);
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::operator()(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    WeakRetained[78] = 0;
    if (*((void *)WeakRetained + 4))
    {
      uint64_t v4 = **(void **)(a1 + 24);
      uint64_t v5 = v4 ? *(void *)(v4 + 24) : 1;
      int v6 = WeakRetained[77];
      BOOL v7 = v5 == 1 && WeakRetained[77] == 0;
      BOOL v8 = v5 == 1 || v6 != 1;
      if (v6 == 2 || v7 || !v8) {
        (*(void (**)(void))(*((void *)WeakRetained - 1) + 80))();
      }
    }
  }
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70CD08;
  *(void *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70CD08;
  *(void *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_OWORD *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::size()
{
  return 32;
}

void re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()(uint64_t a1)
{
}

void *re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CD60;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E70CD60;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 256, 0);
          int v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          }
LABEL_24:
          uint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            uint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *re::DynamicArray<char>::copy(void *this, unint64_t a2, char *__src, size_t __len)
{
  if (!__len) {
    return this;
  }
  unint64_t v5 = a2;
  int v6 = this;
  size_t v7 = this[2];
  if (v7 + 1 <= a2)
  {
    uint64_t v12 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(void *)((char *)&v13 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  size_t v4 = __len;
  size_t v8 = a2 + __len;
  if (__CFADD__(a2, __len)) {
    goto LABEL_12;
  }
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + a2), __src, __len);
  }
  else
  {
    re::DynamicArray<char>::growCapacity(this, a2 + __len);
    uint64_t v10 = v6[2];
    BOOL v11 = &__src[v10 - v5];
    if (v10 != v5)
    {
      memmove((void *)(v6[4] + v5), __src, v10 - v5);
      unint64_t v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + v5), v11, &__src[v4] - v11);
    uint64_t v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

void *re::DynamicArray<char>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    size_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<char>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<char>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::exportToKtx(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  int v10 = *(_DWORD *)(a2 + 88);
  if (v10 == 1)
  {
    id v66 = *(id *)(a2 + 96);
    BOOL v19 = (id *)(a2 + 8);
    if (objc_msgSend(*(id *)(a2 + 8), sel_textureType) == 5) {
      int v20 = 6;
    }
    else {
      int v20 = 1;
    }
    int v63 = v20;
    int FaceOrArrayLength = re::internal::getFaceOrArrayLength((id *)(a2 + 8));
    uint64_t v22 = *(void *)(a2 + 32);
    if (!LOBYTE(v81[0]))
    {
      unint64_t v33 = *re::pipelineLogObjects(v23);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v85[0]) = 0;
        _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "Failed to write KTX header to output stream", (uint8_t *)v85, 2u);
      }
      *(unsigned char *)a5 = 0;
      *(void *)(a5 + 8) = *((void *)&v81[0] + 1);
      *(void *)(a5 + 32) = *(void *)&v82[0];
      *(_OWORD *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v81[1];
      memset((char *)v81 + 8, 0, 24);
      return;
    }
    if ((int)v22 < 1)
    {
LABEL_25:
      *(unsigned char *)a5 = 1;
      return;
    }
    unint64_t v24 = 0;
    uint64_t v25 = 32;
    while (1)
    {
      size_t v91 = 0;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      *(_OWORD *)uint64_t v85 = 0u;
      long long v86 = 0u;
      LOBYTE(v93) = 0;
      std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((void *)&v93 + 1, a2 + 8);
      unsigned int v98 = 1;
      id v99 = 0;

      if (v98 != -1) {
        ((void (*)(unsigned char *, char *))*(&off_26E70CDA8 + v98))(v92, (char *)&v93 + 8);
      }
      LODWORD(v69) = v91;
      if (objc_msgSend(*v19, sel_textureType) == 3)
      {
        int v26 = DWORD2(v90);
        LODWORD(v69) = objc_msgSend(*v19, sel_arrayLength) * v26;
      }
      uint64_t v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 16))(a1, &v69, 4);
      if (v27 != (_anonymous_namespace_ *)4)
      {
        uint64_t v39 = "Failed to write KTX image size to output stream";
        goto LABEL_39;
      }
      unint64_t v28 = *(void *)(a2 + 32);
      if (v28 <= v24)
      {
        id v74 = 0;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v94 = 0u;
        unsigned long long v95 = 0u;
        long long v93 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v92 = 136315906;
        *(void *)&uint64_t v92[4] = "operator[]";
        *(_WORD *)&v92[12] = 1024;
        *(_DWORD *)&v92[14] = 797;
        *(_WORD *)&v92[18] = 2048;
        *(void *)&v92[20] = v24;
        *(_WORD *)&v92[28] = 2048;
        *(void *)&v92[30] = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      uint64_t v29 = (_anonymous_namespace_ *)(v69 * v63);
      uint64_t v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, void, _anonymous_namespace_ *))(*(void *)a1 + 16))(a1, *(void *)(*(void *)(a2 + 48) + v25), v29);
      if (v30 != v29) {
        break;
      }
      ++v24;
      v25 += 40;
      if (v22 == v24) {
        goto LABEL_25;
      }
    }
    uint64_t v39 = "Failed to write KTX image to output stream";
LABEL_39:
    re::DynamicString::DynamicString((re::DynamicString *)v92, (const re::DynamicString *)&v93);
    *(unsigned char *)a5 = 0;
    uint64_t v40 = *(void *)&v92[24];
    *(void *)(a5 + 8) = *(void *)v92;
    *(void *)(a5 + 32) = v40;
    *(_OWORD *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)&v92[8];
LABEL_40:
    if ((void)v93)
    {
      if (BYTE8(v93)) {
        (*(void (**)(void))(*(void *)v93 + 40))();
      }
    }
    return;
  }
  if (v10)
  {
    int v57 = std::__throw_bad_variant_access[abi:nn180100]();
    re::exportToKtxWithRGBA8ToASTCCompression(v57, v58);
    return;
  }
  id v11 = *(id *)(a2 + 96);
  unint64_t v14 = *(void **)(a2 + 8);
  long long v13 = (id *)(a2 + 8);
  uint64_t v12 = v14;
  if (!v14)
  {
    long long v31 = *(_OWORD *)v85;
    long long v32 = v86;
    *(unsigned char *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v31;
    *(_OWORD *)(a5 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v32;
    return;
  }
  int v65 = objc_msgSend(v12, sel_mipmapLevelCount);
  int v61 = re::internal::getFaceOrArrayLength(v13);
  LOBYTE(v85[0]) = 0;
  v85[1] = *v13;
  DWORD2(v90) = 0;
  size_t v91 = 0;
  re::internal::synchronizeTextureMipmaps(v85, v15);

  if (DWORD2(v90) != -1) {
    ((void (*)(long long *, id *))*(&off_26E70CDA8 + DWORD2(v90)))(&v93, &v85[1]);
  }
  if (!v92[0])
  {
    uint64_t v34 = *re::pipelineLogObjects(v16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v85[0]) = 0;
      _os_log_error_impl(&dword_233120000, v34, OS_LOG_TYPE_ERROR, "Failed to write KTX header to output stream", (uint8_t *)v85, 2u);
    }
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 8) = *(void *)&v92[8];
    *(void *)(a5 + 32) = *(void *)&v92[32];
    *(_OWORD *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)&v92[16];
    memset(&v92[8], 0, 24);
    return;
  }
  size_t v91 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  *(_OWORD *)uint64_t v85 = 0u;
  long long v86 = 0u;
  LOBYTE(v93) = 0;
  *((void *)&v93 + 1) = *v13;
  unsigned int v98 = 0;
  id v99 = 0;

  if (v98 != -1) {
    int v17 = (_anonymous_namespace_ *)((uint64_t (*)(_OWORD *, char *))*(&off_26E70CDA8 + v98))(v81, (char *)&v93 + 8);
  }
  size_t v18 = v91;
  if (HIDWORD(v91))
  {
    re::DynamicString::DynamicString((re::DynamicString *)v81, (const re::DynamicString *)&v93);
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 8) = *(void *)&v81[0];
    *(void *)(a5 + 32) = *((void *)&v81[1] + 1);
    *(_OWORD *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)((char *)v81 + 8);
    goto LABEL_40;
  }
  LOBYTE(v81[1]) = 0;
  *(void *)&v81[0] = &unk_26E6DEB60;
  *((void *)&v81[0] + 1) = "re::ExportToKtxAllocator";
  memset(v82, 0, sizeof(v82));
  int v83 = 0;
  uint64_t v84 = 0x7FFFFFFFLL;
  id v35 = objc_msgSend(*v13, sel_storageMode);
  id v36 = objc_msgSend(*v13, sel_device);
  id v79 = 0;
  id v80 = v36;
  id v78 = 0;
  id v68 = v35;
  uint64_t v62 = a5;
  if (v35 == (id)2)
  {
    re::ImportGraphicsResources::createCommandQueue(&v80, (const re::mtl::Device *)"createTextureWithKTXData", (const char *)1, v85);
    id v37 = v85[0];
    v85[0] = 0;
    id v60 = v37;
    id v79 = v37;

    v85[0] = objc_msgSend(v80, sel_newBufferWithLength_options_, v18, 0);
    NS::SharedPtr<MTL::Texture>::operator=(&v78, v85);
    if (v85[0]) {

    }
    id v38 = objc_msgSend(v78, sel_contents);
  }
  else
  {
    v85[0] = (id)(*(uint64_t (**)(void, size_t, void))(**((void **)&v81[1] + 1) + 32))(*((void *)&v81[1] + 1), v18, 0);
    re::HashSetBase<void *,void *,re::internal::ValueAsKey<void *>,re::Hash<void *>,re::EqualTo<void *>,true,false>::add((uint64_t)v82, (uint64_t *)v85);
    id v60 = 0;
    id v38 = v85[0];
  }
  int v41 = v61;
  if (v65 < 1)
  {
LABEL_60:
    *(unsigned char *)uint64_t v62 = 1;
LABEL_65:
    uint64_t v55 = v60;
    goto LABEL_66;
  }
  uint64_t v42 = 0;
  uint64_t v59 = v65;
  long long v43 = 0uLL;
  while (1)
  {
    size_t v91 = 0;
    long long v89 = v43;
    long long v90 = v43;
    long long v87 = v43;
    long long v88 = v43;
    *(_OWORD *)uint64_t v85 = v43;
    long long v86 = v43;
    LOBYTE(v93) = 0;
    *((void *)&v93 + 1) = *v13;
    unsigned int v98 = 0;
    id v99 = 0;

    if (v98 != -1) {
      ((void (*)(id *, char *))*(&off_26E70CDA8 + v98))(&v74, (char *)&v93 + 8);
    }
    int v77 = v91;
    if (objc_msgSend(*v13, sel_textureType) == (id)3) {
      v77 *= v41;
    }
    uint64_t v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 16))(a1, &v77, 4);
    if (v44 != (_anonymous_namespace_ *)4)
    {
      uint64_t v54 = "Failed to write KTX image size to output stream";
LABEL_62:
      re::DynamicString::DynamicString((re::DynamicString *)&v74, (const re::DynamicString *)&v93);
      *(unsigned char *)uint64_t v62 = 0;
      *(void *)(v62 + 8) = v74;
      *(void *)(v62 + 32) = v76;
      *(_OWORD *)(v62 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v75;
      if (void)v93 && (BYTE8(v93)) {
        (*(void (**)(void))(*(void *)v93 + 40))();
      }
      goto LABEL_65;
    }
    if (v41 >= 1) {
      break;
    }
LABEL_59:
    ++v42;
    int v41 = v61;
    long long v43 = 0uLL;
    if (v42 == v59) {
      goto LABEL_60;
    }
  }
  uint64_t v45 = 0;
  uint64_t v64 = *((void *)&v90 + 1);
  uint64_t v67 = v90;
  size_t v46 = v91;
  while (1)
  {
    bzero(v38, v46);
    id v48 = v85[0];
    id v47 = v85[1];
    uint64_t v49 = v86;
    if (v68 == (id)2) {
      break;
    }
    id v52 = *v13;
    long long v93 = 0uLL;
    *(void *)&long long v94 = 0;
    *((id *)&v94 + 1) = v85[0];
    unsigned long long v95 = __PAIR128__(v86, (unint64_t)v85[1]);
    objc_msgSend(v52, sel_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice_, v38, v67, v64, &v93, v42, v45);
LABEL_57:
    uint64_t v53 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, id, size_t))(*(void *)a1 + 16))(a1, v38, v46);
    if (v53 != (_anonymous_namespace_ *)v46)
    {
      uint64_t v54 = "Failed to write KTX image to output stream";
      goto LABEL_62;
    }
    if (v61 == ++v45) {
      goto LABEL_59;
    }
  }
  unsigned __int8 v50 = (void *)MEMORY[0x237DBDCF0]();
  re::mtl::CommandQueue::makeCommandBuffer(&v79, &v73);
  re::mtl::CommandBuffer::makeBlitCommandEncoder(&v73, &v72);
  id v51 = *v13;
  *(void *)&long long v94 = 0;
  long long v93 = 0uLL;
  id v74 = v48;
  *(void *)&long long v75 = v47;
  *((void *)&v75 + 1) = v49;
  [v72 copyFromTexture:v51 sourceSlice:v45 sourceLevel:v42 sourceOrigin:&v93 sourceSize:&v74 toBuffer:v78 destinationOffset:0 destinationBytesPerRow:v67 destinationBytesPerImage:v64];
  [v72 endEncoding];
  [v73 commit];
  [v73 waitUntilCompleted];
  re::internal::getCommandBufferError(&v73, (uint64_t)&v93);
  if ((_BYTE)v93)
  {

    goto LABEL_57;
  }
  if (v94) {
    uint64_t v56 = (char *)*((void *)&v94 + 1);
  }
  else {
    uint64_t v56 = (char *)&v94 + 1;
  }
  re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)&v74);
  *(unsigned char *)uint64_t v62 = 0;
  *(void *)(v62 + 8) = v69;
  *(void *)(v62 + 32) = v71;
  *(_OWORD *)(v62 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v70;
  if (v74 && (v75 & 1) != 0) {
    (*(void (**)(void))(*(void *)v74 + 40))();
  }
  uint64_t v55 = v60;
  if (!(_BYTE)v93 && *((void *)&v93 + 1) && (v94 & 1) != 0) {
    (*(void (**)(void))(**((void **)&v93 + 1) + 40))();
  }

LABEL_66:
  if (v78) {

  }
  re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)v81);
}

uint64_t re::exportToKtxWithRGBA8ToASTCCompression(uint64_t a1, re::TextureData *this, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  *(void *)&long long v65 = a3;
  *((void *)&v65 + 1) = a4;
  if (re::TextureData::isValid(this))
  {
    if (*((_DWORD *)this + 22) >= 2u) {
      goto LABEL_81;
    }
    unint64_t v9 = (re *)re::MTLToASTCPixelFormat((int)objc_msgSend(*((id *)this + 1), sel_pixelFormat));
    if (v9)
    {
      unint64_t v10 = HIDWORD(a3);
      if (*((_DWORD *)this + 22)) {
        id v11 = 0;
      }
      else {
        id v11 = objc_msgSend(*((id *)this + 1), sel_device);
      }
      long long v13 = v11;
      int v61 = v13;
      uint64_t v62 = 0;
      int v63 = 65793;
      uint64_t v64 = 0;
      if (!HIDWORD(a3))
      {
        if (*((_DWORD *)this + 22) >= 2u) {
          goto LABEL_81;
        }
        LODWORD(v10) = re::getASTCDefaultMode((int)objc_msgSend(*((id *)this + 1), sel_pixelFormat));
        DWORD1(v65) = v10;
      }
      uint64_t MTLPixelFormat = re::getMTLPixelFormat(a3, v10);
      if (!MTLPixelFormat)
      {
        id v36 = 0;
LABEL_63:

        goto LABEL_64;
      }
      unsigned int FaceOrArrayLength = re::internal::getFaceOrArrayLength((id *)this, v14);
      LODWORD(v15) = re::TextureData::mipmapLevelCount(this);
      re::internal::synchronizeTextureMipmaps((id *)this, v16);
      if (*((_DWORD *)this + 22) < 2u)
      {
        uint64_t v49 = v13;
        id v17 = objc_msgSend(*((id *)this + 1), sel_textureType);
        id v18 = *((id *)this + 12);
        if (*((_DWORD *)this + 22) < 2u)
        {
          BOOL v19 = v18;
          unsigned int v20 = objc_msgSend(*((id *)this + 1), sel_width);
          if (*((_DWORD *)this + 22) < 2u)
          {
            unsigned int v21 = v20;
            unsigned int v22 = objc_msgSend(*((id *)this + 1), sel_height);
            if (*((_DWORD *)this + 22) < 2u)
            {
              if (!v57[0])
              {
                id v37 = *re::pipelineLogObjects(v23);
                long long v13 = v49;
                if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)
                  || ((v59 & 1) != 0 ? (uint64_t v42 = *(unsigned char **)&v60[7]) : (uint64_t v42 = v60),
                      *(_DWORD *)float32x4_t buf = 136315138,
                      *(void *)&uint8_t buf[4] = v42,
                      _os_log_error_impl(&dword_233120000, v37, OS_LOG_TYPE_ERROR, "Failed to write KTX header to output stream: %s", buf, 0xCu), !v57[0]))
                {
                  if (v58 && (v59 & 1) != 0) {
                    (*(void (**)(void))(*(void *)v58 + 40))();
                  }
                }
                LOBYTE(MTLPixelFormat) = 0;
LABEL_62:
                id v36 = v62;
                goto LABEL_63;
              }
              re::logTextureCompressionInfo((re *)"exportToKtxWithRGBA8ToASTCCompression", (uint64_t)this, (int *)&v65);
              if (*((_DWORD *)this + 22) < 2u)
              {
                unsigned int v24 = objc_msgSend(*((id *)this + 1), sel_textureType);
                char v54 = 0;
                memset(v55, 0, sizeof(v55));
                void v53[2] = 0;
                v53[0] = 0;
                v53[1] = 8;
                dispatch_get_global_queue(21, 0);
                id v56 = (id)objc_claimAutoreleasedReturnValue();
                if ((int)v15 < 1)
                {
                  LOBYTE(MTLPixelFormat) = 1;
                }
                else
                {
                  int v48 = MTLPixelFormat;
                  uint64_t v25 = 0;
                  LOBYTE(MTLPixelFormat) = 0;
                  uint64_t v15 = v15;
                  long long v26 = 0uLL;
                  uint64_t v45 = v15;
                  uint64_t v46 = (int)v15;
                  while (1)
                  {
                    uint64_t v80 = 0;
                    long long v78 = v26;
                    long long v79 = v26;
                    long long v76 = v26;
                    long long v77 = v26;
                    *(_OWORD *)float32x4_t buf = v26;
                    long long v75 = v26;
                    if (v24 == 7) {
                      uint64_t v27 = v75;
                    }
                    else {
                      uint64_t v27 = FaceOrArrayLength;
                    }
                    if (v24 == 7) {
                      int v28 = v80;
                    }
                    else {
                      int v28 = FaceOrArrayLength * DWORD2(v79);
                    }
                    int v52 = 0;
                    if (*((_DWORD *)this + 22) >= 2u) {
                      goto LABEL_81;
                    }
                    unsigned int v29 = objc_msgSend(*((id *)this + 1), sel_textureType);
                    int v30 = DWORD2(v79);
                    if (v29 != 5) {
                      int v30 = v28;
                    }
                    int v52 = v30;
                    long long v31 = (re *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 16))(a1, &v52, 4);
                    if (v31 != (re *)4)
                    {
                      int v41 = *re::pipelineLogObjects(v31);
                      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                      {
                        *(_WORD *)uint64_t v69 = 0;
                        _os_log_error_impl(&dword_233120000, v41, OS_LOG_TYPE_ERROR, "Failed to write KTX image size to output stream", v69, 2u);
                      }
                      goto LABEL_59;
                    }
                    int v51 = 0;
                    if (v27) {
                      break;
                    }
                    int v35 = 0;
LABEL_44:
                    long long v26 = 0uLL;
                    if (v35 != v28)
                    {
                      long long v43 = *re::pipelineLogObjects(v31);
                      if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)uint64_t v69 = 67109376;
                        int v70 = v51;
                        LOWORD(v71) = 1024;
                        *(_DWORD *)((char *)&v71 + 2) = v28;
                        _os_log_fault_impl(&dword_233120000, v43, OS_LOG_TYPE_FAULT, "Unexpected buffer size for ASTC-compressed texture (got %u, expected %u)", v69, 0xEu);
                      }
                      goto LABEL_59;
                    }
                    LOBYTE(MTLPixelFormat) = ++v25 >= v46;
                    if (v25 == v15) {
                      goto LABEL_59;
                    }
                  }
                  char v47 = MTLPixelFormat;
                  uint64_t v32 = 0;
                  while (1)
                  {
                    uint64_t v33 = v24 == 7 ? 0 : v32;
                    uint64_t v34 = v24 == 7 ? v32 : 0;
                    v68[0] = &unk_26E70CDC8;
                    v68[1] = &v51;
                    v68[2] = a1;
                    v68[3] = v68;
                    re::copyTextureBytesToASTCCompression((id *)&v61, (uint64_t)this, &v65, a5, v25, v33, v34, (re::ASTCCompressor *)v53, (uint64_t)v69, (uint64_t)v68);
                    long long v31 = (re *)std::__function::__value_func<re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::~__value_func[abi:nn180100](v68);
                    if (!v69[0]) {
                      break;
                    }
                    if (v27 == ++v32)
                    {
                      int v35 = v51;
                      LOBYTE(MTLPixelFormat) = v47;
                      uint64_t v15 = v45;
                      goto LABEL_44;
                    }
                  }
                  id v38 = *re::pipelineLogObjects(v31);
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
                  {
                    if (v72) {
                      uint64_t v44 = *(unsigned char **)&v73[7];
                    }
                    else {
                      uint64_t v44 = v73;
                    }
                    *(_DWORD *)id v66 = 136315138;
                    uint64_t v67 = v44;
                    _os_log_error_impl(&dword_233120000, v38, OS_LOG_TYPE_ERROR, "Failed to write KTX image: %s", v66, 0xCu);
                  }
                  LOBYTE(MTLPixelFormat) = v47;
                  if (!v69[0] && v71 && (v72 & 1) != 0) {
                    (*(void (**)(void))(*(void *)v71 + 40))();
                  }
                }
LABEL_59:
                if (*(void *)&v55[4])
                {
                  astcenc_context_free(*(uint64_t *)&v55[4]);
                  *(void *)&v55[4] = 0;
                }

                long long v13 = v49;
                goto LABEL_62;
              }
            }
          }
        }
      }
LABEL_81:
      std::__throw_bad_variant_access[abi:nn180100]();
    }
    long long v13 = (id)*re::pipelineLogObjects(v9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      if (*((_DWORD *)this + 22) >= 2u) {
        goto LABEL_81;
      }
      unsigned int v40 = objc_msgSend(*((id *)this + 1), sel_pixelFormat);
      *(_DWORD *)float32x4_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v40;
      _os_log_error_impl(&dword_233120000, v13, OS_LOG_TYPE_ERROR, "Unsupported metal format for ASTC compression: %d", buf, 8u);
    }
    LOBYTE(MTLPixelFormat) = 0;
LABEL_64:

    return MTLPixelFormat & 1;
  }
  LOBYTE(MTLPixelFormat) = 0;
  return MTLPixelFormat & 1;
}

void re::anonymous namespace'::writeKtxHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, int a11, uint64_t a12, int a13)
{
  int v14 = a4;
  int v15 = a3;
  uint64_t v55 = *MEMORY[0x263EF8340];
  unint64_t v49 = 0;
  unint64_t v44 = 0xBB31312058544BABLL;
  int v45 = 169478669;
  int v46 = 67305985;
  unint64_t v18 = 0xFFFFFFFFFFFFDF10;
  while (1)
  {
      break;
    v18 += 68;
    if (!v18)
    {
      re::DynamicString::format((re::DynamicString *)"Unsupported pixel format: %d", (re::DynamicString *)&v35, a4);
      goto LABEL_5;
    }
  }
  long long v47 = *(_OWORD *)(v19 + 8452);
  int v48 = *((_DWORD *)v19 + 2117);
  if ((a3 & 0xFFFFFFFE) == 2) {
    goto LABEL_11;
  }
  if (a3 == 7) {
    goto LABEL_12;
  }
  if (a3 == 5)
  {
LABEL_11:
    a8 = 0;
LABEL_12:
    unint64_t v49 = __PAIR64__(a7, a6);
    int v50 = a8;
    LOBYTE(v37) = 0;
    int v35 = &unk_26E6DEB60;
    id v36 = "re::ExportToKtxAllocator";
    memset(v39, 0, sizeof(v39));
    int v40 = 0;
    uint64_t v41 = 0x7FFFFFFFLL;
    uint64_t v34 = 0;
    unsigned int StandardKtxMetadata = re::makeStandardKtxMetadata(v14, a5, 0, (uint64_t)&v35, &v34);
    unsigned int v21 = StandardKtxMetadata;
    if (a12) {
      int v22 = a13;
    }
    else {
      int v22 = 0;
    }
    unsigned int v23 = StandardKtxMetadata + v22;
    if (v15 == 3) {
      int v24 = a9;
    }
    else {
      int v24 = 0;
    }
    if (v15 == 3) {
      int v25 = 1;
    }
    else {
      int v25 = a9;
    }
    int v51 = v24;
    int v52 = v25;
    int v53 = a11;
    unsigned int v54 = (v23 + 3) & 0xFFFFFFFC;
    long long v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(void *)a2 + 16))(a2, &v44, 64);
    BOOL v27 = v26 == (_anonymous_namespace_ *)64;
    if (v21)
    {
      int v28 = v26;
      long long v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, v34, v21);
      BOOL v27 = v28 == (_anonymous_namespace_ *)64 && v26 == (_anonymous_namespace_ *)v21;
    }
    if (a12)
    {
      if (a13 >= 1)
      {
        long long v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 16))(a2, a12, a13);
        if (v26 != (_anonymous_namespace_ *)a13) {
          BOOL v27 = 0;
        }
      }
    }
    if ((v23 & 3) != 0)
    {
      *(_DWORD *)uint64_t v42 = 0;
      long long v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unsigned char *, void))(*(void *)a2 + 16))(a2, v42, v23 & 3);
      if (v26 == (_anonymous_namespace_ *)(v23 & 3) && v27) {
        goto LABEL_37;
      }
    }
    else if (v27)
    {
LABEL_37:
      *(unsigned char *)a1 = 1;
LABEL_40:
      re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)&v35);
      return;
    }
    long long v31 = *(_OWORD *)v42;
    uint64_t v32 = *(void *)&v42[16];
    uint64_t v33 = v43;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v31;
    *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v32;
    *(void *)(a1 + 32) = v33;
    goto LABEL_40;
  }
  re::DynamicString::format((re::DynamicString *)"Unsupported texture type: %d", (re::DynamicString *)&v35, a3);
LABEL_5:
  re::DynamicString::DynamicString((re::DynamicString *)v42, (const re::DynamicString *)&v35);
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = *(void *)v42;
  *(void *)(a1 + 32) = v43;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_OWORD *)&v42[8];
  if (v35)
  {
    if (v36) {
      (*(void (**)(void))(*(void *)v35 + 40))();
    }
  }
}

void re::TextureData::textureType(id *this)
{
  if (*((_DWORD *)this + 22) >= 2u)
  {
    uint64_t v1 = std::__throw_bad_variant_access[abi:nn180100]();
  }
  else
  {
    objc_msgSend(this[1], sel_textureType);
  }
}

void re::anonymous namespace'::ktxMipInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a2 + 88))
  {
    unint64_t v10 = 0;
    if (a4) {
      goto LABEL_10;
    }
  }
  else
  {
    id v7 = objc_msgSend(*(id *)(a2 + 8), sel_device);
    unint64_t v10 = v7;
    if (a4)
    {
      if (v7)
      {
        id v8 = v7;
        MTLPixelFormatGetInfoForDevice();
        if ((v9 & 1) == 0) {
          re::ObjCObject::operator=(&v10, 0);
        }
      }
      goto LABEL_10;
    }
  }
  if (*(_DWORD *)(a2 + 88) >= 2u) {
    goto LABEL_16;
  }
  objc_msgSend(*(id *)(a2 + 8), sel_pixelFormat);
LABEL_10:
  if (*(_DWORD *)(a2 + 88) >= 2u
    || (objc_msgSend(*(id *)(a2 + 8), sel_width), *(_DWORD *)(a2 + 88) >= 2u)
    || (objc_msgSend(*(id *)(a2 + 8), sel_height), *(_DWORD *)(a2 + 88) >= 2u))
  {
LABEL_16:
    std::__throw_bad_variant_access[abi:nn180100]();
    JUMPOUT(0x233A57D98);
  }
  objc_msgSend(*(id *)(a2 + 8), sel_depth);
  if (!*(_DWORD *)(a2 + 88)) {
    objc_msgSend(*(id *)(a2 + 8), sel_sampleCount);
  }
  re::ktxMipInfo(&v10, a1);
}

uint64_t re::canExportToKtx(id *this, const re::TextureData *a2)
{
  if (*((_DWORD *)this + 22) >= 2u)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  else
  {
    uint64_t v2 = this;
    unsigned int v3 = objc_msgSend(this[1], sel_textureType);
    if (v3 < 0xA) {
      return (0xACu >> v3) & 1;
    }
  }
  re::TextureData::textureType(v2);
  re::TextureData::textureType(v2);
  re::internal::assertLog((re::internal *)5, v6, "assertion failure: '%s' (%s:line %i) Unexpected texture type: %u.", "!\"Unreachable code\"", "canExportToKtx", 476, v5);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::~__func()
{
}

__n128 std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26E70CDC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E70CDC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  **(_DWORD **)(a1 + 8) += (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v7, v8);
  unint64_t v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  if ((_anonymous_namespace_ *)v9 == v10)
  {
    *(unsigned char *)a3 = 1;
  }
  else
  {
    __n128 result = v14;
    uint64_t v12 = v15;
    uint64_t v13 = v16;
    *(unsigned char *)a3 = 0;
    *(__n128 *)(a3 + 8) = result;
    *(void *)(a3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v12;
    *(void *)(a3 + 32) = v13;
  }
  return result;
}

uint64_t std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::target_type()
{
}

void *std::__function::__value_func<re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t re::internal::addAttributesByName(uint64_t this, uint64_t *a2)
{
  int v2 = *(_DWORD *)(this + 24);
  if (v2)
  {
    int v4 = (re::internal::GeomAttributeContainer *)this;
    for (unsigned int i = 0; i != v2; ++i)
    {
      uint64_t v6 = re::internal::GeomAttributeContainer::attributeByIndex(v4, i);
      uint64_t v7 = *(char **)(v6 + 8);
      BOOL v19 = v7;
      this = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a2, &v19);
      if (this == -1)
      {
        if (!a2[7])
        {
        }
        uint64_t v8 = a2[4];
        if (!v8 || a2[2] > (unint64_t)(8 * v8)) {
          re::HashBrown<char const*,re::GeomAttribute *,re::internal::HashName,re::internal::HashName,void,false>::resize(a2);
        }
        size_t v9 = re::RigEvaluation::HashString::operator()((int)&v20, v7) % ((unint64_t)a2[2] >> 4);
        while (1)
        {
          uint64_t v10 = *a2;
          char v11 = re::RigEvaluation::HashString::operator()((int)&v21, v7);
          unint64_t v12 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
          if (v12 < 0x40) {
            break;
          }
          if (++v9 == (unint64_t)a2[2] >> 4) {
            size_t v9 = 0;
          }
          if (v9 == re::RigEvaluation::HashString::operator()((int)&v23, v7) % ((unint64_t)a2[2] >> 4))
          {
            re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
            this = _os_crash();
            __break(1u);
            return this;
          }
        }
        size_t v14 = v10 + 16 * v9;
        BOOL v15 = *(unsigned __int8 *)(v14 + v12) == 255;
        *(unsigned char *)(v14 + v12) = v11 & 0x7F;
        uint64_t v16 = 16 * (v12 + 16 * v9);
        id v17 = (char **)(a2[1] + v16);
        *id v17 = v7;
        v17[1] = (char *)v6;
        uint64_t v18 = a2[4] - v15;
        ++a2[3];
        a2[4] = v18;
        this = re::RigEvaluation::HashString::operator()((int)&v22, *(char **)(a2[1] + v16));
        a2[5] ^= this;
      }
    }
  }
  return this;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeManager::copy(re::internal::GeomAttributeContainer *this, re::internal::GeomAttributeManager *a2)
{
  if (a2 != this)
  {
    uint64_t v4 = (uint64_t)this;
    re::internal::GeomAttributeContainer::copy(this, a2);
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v4 + 112), (re::internal::GeomAttributeManager *)((char *)a2 + 112));
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v4 + 224), (re::internal::GeomAttributeManager *)((char *)a2 + 224));
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v4 + 336), (re::internal::GeomAttributeManager *)((char *)a2 + 336));
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v4 + 448), (re::internal::GeomAttributeManager *)((char *)a2 + 448));
    return (re::internal::GeomAttributeContainer *)re::internal::GeomAttributeManager::copyAttributeTable((re::internal::GeomAttributeManager *)v4, a2);
  }
  return this;
}

uint64_t re::internal::GeomAttributeManager::copyAttributeTable(re::internal::GeomAttributeManager *this, re::internal::GeomAttributeManager *a2)
{
  *((void *)a2 + 72) = 0;
  ++*((_DWORD *)a2 + 146);
  *((void *)a2 + 78) = 0;
  *((void *)a2 + 81) = 0;
  *((void *)a2 + 80) = 0;
  unint64_t v4 = *((void *)a2 + 77);
  *((void *)a2 + 79) = v4;
  if (v4 >= 0x10)
  {
    unint64_t v5 = 0;
    *(void *)&long long v6 = -1;
    *((void *)&v6 + 1) = -1;
    do
      *(_OWORD *)(*((void *)a2 + 75) + 16 * v5++) = v6;
    while (v5 < *((void *)a2 + 77) >> 4);
  }
  long long v16 = 0u;
  memset(v15, 0, sizeof(v15));
  re::internal::addAttributesByName((uint64_t)a2, (uint64_t *)v15);
  re::internal::addAttributesByName((uint64_t)a2 + 112, (uint64_t *)v15);
  re::internal::addAttributesByName((uint64_t)a2 + 224, (uint64_t *)v15);
  re::internal::addAttributesByName((uint64_t)a2 + 336, (uint64_t *)v15);
  re::internal::addAttributesByName((uint64_t)a2 + 448, (uint64_t *)v15);
  if (*((void *)this + 72))
  {
    uint64_t v7 = 0;
    unsigned int v8 = 1;
    uint64_t v9 = *((void *)&v15[0] + 1);
    do
    {
      size_t v14 = *(char **)(*(void *)(*((void *)this + 74) + 8 * v7) + 8);
      uint64_t v10 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)v15, &v14);
      re::internal::GeomAttributeManager::addAttributeToTable(a2, *(re::GeomAttribute **)(v9 + 16 * v10 + 8));
      uint64_t v7 = v8;
    }
    while (*((void *)this + 72) > (unint64_t)v8++);
  }
  uint64_t result = *((void *)&v16 + 1);
  if (*((void *)&v16 + 1) && *(void *)&v15[0])
  {
    uint64_t v13 = *(uint64_t (**)(void))(**((void **)&v16 + 1) + 40);
    return v13();
  }
  return result;
}

re::internal::GeomAttributeManager *re::internal::GeomAttributeManager::GeomAttributeManager(re::internal::GeomAttributeManager *this)
{
  uint64_t v2 = re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this, 0);
  re::internal::GeomAttributeContainer::GeomAttributeContainer(v2 + 112, 1);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 224, 2);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 336, 3);
  unsigned int v3 = (_anonymous_namespace_ *)re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 448, 4);
  *((void *)this + 7re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 70) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  *((_DWORD *)this + 146) = 0;
  unint64_t v4 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)this + 70, 1uLL);
  ++*((_DWORD *)this + 146);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 6re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_DWORD *)this = 1;
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    long long v6 = (uint64_t *)*((void *)this + 5);
    uint64_t v7 = 8 * v5;
    do
    {
      uint64_t v8 = *v6++;
      (*(void (**)(uint64_t, void))(*(void *)v8 + 72))(v8, *(unsigned int *)this);
      v7 -= 8;
    }
    while (v7);
  }
  return this;
}

re::internal::GeomAttributeManager *re::internal::GeomAttributeManager::GeomAttributeManager(re::internal::GeomAttributeManager *this, const re::internal::GeomAttributeManager *a2)
{
  uint64_t v4 = re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this, 0);
  re::internal::GeomAttributeContainer::GeomAttributeContainer(v4 + 112, 1);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 224, 2);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 336, 3);
  uint64_t v5 = (_anonymous_namespace_ *)re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 448, 4);
  *((void *)this + 7re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 70) = 0;
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  *((_DWORD *)this + 146) = 0;
  long long v6 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((void *)this + 70, 1uLL);
  ++*((_DWORD *)this + 146);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 6re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  re::internal::GeomAttributeManager::copy(a2, this);
  return this;
}

void re::internal::GeomAttributeManager::~GeomAttributeManager(re::internal::GeomAttributeManager *this)
{
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 600);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 560);
  re::internal::GeomAttributeContainer::clearAttributes((void *)this + 56, v2);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 496);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 456);
  re::internal::GeomAttributeContainer::clearAttributes((void *)this + 42, v3);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 384);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 344);
  re::internal::GeomAttributeContainer::clearAttributes((void *)this + 28, v4);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 272);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 232);
  re::internal::GeomAttributeContainer::clearAttributes((void *)this + 14, v5);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 160);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 120);
  re::internal::GeomAttributeContainer::clearAttributes(this, v6);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 48);
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
}

void *re::internal::GeomAttributeManager::addAttributeToTable(void *this, re::GeomAttribute *a2)
{
  uint64_t v5 = a2;
  if (a2)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    uint64_t v2 = this + 70;
    int v3 = this[72];
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(this + 75, &v4, &v3);
    return re::DynamicArray<re::TransitionCondition *>::add(v2, &v5);
  }
  return this;
}

re::GeomAttribute *re::internal::GeomAttributeManager::addAttribute(re::internal::GeomAttributeManager *a1, char *a2, int a3, int a4)
{
  uint64_t v8 = re::internal::GeomAttributeManager::attributeByName(a1, a2);
  if (v8)
  {
    uint64_t v10 = (re::GeomAttribute *)v8;
    if (*(unsigned __int8 *)(v8 + 16) != a3 || *(unsigned __int8 *)(v8 + 17) != a4) {
      return 0;
    }
  }
  else
  {
    char v11 = (uint64_t *)a1;
    switch(a3)
    {
      case 0:
        break;
      case 1:
        char v11 = (uint64_t *)((char *)a1 + 112);
        break;
      case 2:
        char v11 = (uint64_t *)((char *)a1 + 224);
        break;
      case 3:
        char v11 = (uint64_t *)((char *)a1 + 336);
        break;
      case 4:
        char v11 = (uint64_t *)((char *)a1 + 448);
        break;
      default:
        re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 158);
        _os_crash();
        __break(1u);
        JUMPOUT(0x233A58A3CLL);
    }
    uint64_t v10 = (re::GeomAttribute *)re::internal::GeomAttributeContainer::addAttribute(v11, a2, a4);
    re::internal::GeomAttributeManager::addAttributeToTable(a1, v10);
  }
  return v10;
}

uint64_t re::internal::GeomAttributeManager::deleteAttribute(re::internal::GeomAttributeManager *this, char *a2)
{
  uint64_t v4 = this;
  uint64_t v29 = *MEMORY[0x263EF8340];
  size_t v14 = a2;
  uint64_t v5 = (uint64_t *)((char *)this + 600);
  uint64_t result = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 75, &v14);
  if (result == -1) {
    return result;
  }
  uint64_t v7 = *((void *)v4 + 76) + 16 * result;
  unsigned int v10 = *(_DWORD *)(v7 + 8);
  uint64_t v9 = (int *)(v7 + 8);
  unint64_t v8 = v10;
  unint64_t v11 = *((void *)v4 + 72);
  if (v11 <= v10)
  {
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    id v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    unint64_t v21 = v8;
    __int16 v22 = 2048;
    unint64_t v23 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  int v12 = *(unsigned __int8 *)(*(void *)(*((void *)v4 + 74) + 8 * v8) + 16);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v5, &v14);
  unint64_t v3 = *v9;
  if (--v11 > v3)
  {
    unint64_t v2 = *((void *)v4 + 72);
    if (v2 > v11)
    {
      *(void *)(*((void *)v4 + 74) + 8 * v3) = *(void *)(*((void *)v4 + 74) + 8 * v11);
      if (v2 > v3)
      {
        *(void *)&long long v24 = *(void *)(*(void *)(*((void *)v4 + 74) + 8 * v3) + 8);
        re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addOrReplace(v5, (char **)&v24, v9);
        goto LABEL_7;
      }
LABEL_16:
      uint64_t v15 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v16 = 136315906;
      id v17 = "operator[]";
      __int16 v18 = 1024;
      int v19 = 789;
      __int16 v20 = 2048;
      unint64_t v21 = v3;
      __int16 v22 = 2048;
      unint64_t v23 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_15:
    uint64_t v15 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v16 = 136315906;
    id v17 = "operator[]";
    __int16 v18 = 1024;
    int v19 = 789;
    __int16 v20 = 2048;
    unint64_t v21 = v11;
    __int16 v22 = 2048;
    unint64_t v23 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
LABEL_7:
  re::DynamicArray<double>::resize((uint64_t)v4 + 560, v11);
  switch(v12)
  {
    case 0:
      return re::internal::GeomAttributeContainer::deleteAttribute(v4, v14);
    case 1:
      uint64_t v4 = (re::internal::GeomAttributeManager *)((char *)v4 + 112);
      break;
    case 2:
      uint64_t v4 = (re::internal::GeomAttributeManager *)((char *)v4 + 224);
      break;
    case 3:
      uint64_t v4 = (re::internal::GeomAttributeManager *)((char *)v4 + 336);
      break;
    case 4:
      uint64_t v4 = (re::internal::GeomAttributeManager *)((char *)v4 + 448);
      break;
    default:
      re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 158);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233A58E1CLL);
  }
  return re::internal::GeomAttributeContainer::deleteAttribute(v4, v14);
}

BOOL re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(uint64_t *a1, char **a2)
{
  uint64_t v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    size_t v9 = re::RigEvaluation::HashString::operator()((int)&v15, *(char **)(a1[1] + 16 * v3));
    uint64_t v10 = a1[4];
    a1[5] ^= v9;
    if (v7) {
      uint64_t v11 = v10 + 1;
    }
    else {
      uint64_t v11 = v10;
    }
    unint64_t v12 = a1[2];
    unint64_t v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v11;
    if (v12 >= 0x11 && v13 < v12 >> 2) {
      re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addOrReplace(uint64_t *a1, char **a2, int *a3)
{
  uint64_t v6 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  }
  else
  {
    uint64_t v7 = a1[1] + 16 * v6;
    *(_DWORD *)(v7 + 8) = *a3;
    return v7 + 8;
  }
}

uint64_t re::internal::GeomAttributeManager::attributeCount(uint64_t a1, uint64_t a2)
{
  switch((int)a2)
  {
    case 0:
      return *(unsigned int *)(a1 + 24);
    case 1:
      a1 += 112;
      break;
    case 2:
      a1 += 224;
      break;
    case 3:
      a1 += 336;
      break;
    case 4:
      a1 += 448;
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 135);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233A59040);
  }
  return *(unsigned int *)(a1 + 24);
}

uint64_t re::internal::GeomAttributeManager::attributeByIndex(re::internal::GeomAttributeManager *this, unsigned int a2)
{
  if (*((void *)this + 72) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 74) + 8 * a2);
}

{
  if (*((void *)this + 72) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 74) + 8 * a2);
}

uint64_t re::internal::GeomAttributeManager::attributeByName(re::internal::GeomAttributeManager *this, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(void *)&v6[0] = a2;
  uint64_t v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 75, (char **)v6);
  if (v3 == -1) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)(*((void *)this + 76) + 16 * v3 + 8);
  if (v4 == -1) {
    return 0;
  }
  if (*((void *)this + 72) <= v4)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 74) + 8 * v4);
}

{
  uint64_t v3;
  unint64_t v4;
  _OWORD v6[5];
  uint64_t v7;

  uint64_t v7 = *MEMORY[0x263EF8340];
  *(void *)&v6[0] = a2;
  uint64_t v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 75, (char **)v6);
  if (v3 == -1) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)(*((void *)this + 76) + 16 * v3 + 8);
  if (v4 == -1) {
    return 0;
  }
  if (*((void *)this + 72) <= v4)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(*((void *)this + 74) + 8 * v4);
}

uint64_t re::internal::GeomAttributeManager::attributeByIndex(re::internal::GeomAttributeContainer *a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      goto LABEL_3;
    case 1:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 112);
LABEL_3:
      break;
    case 2:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 224);
      break;
    case 3:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 336);
      break;
    case 4:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 448);
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 135, v3, v4);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233A59624);
  }
  return re::internal::GeomAttributeContainer::attributeByIndex(a1, a2);
}

void *re::internal::GeomAttributeManager::clear(re::internal::GeomAttributeManager *this, re::GeomAttribute *a2)
{
  *(_DWORD *)this = 0;
  re::internal::GeomAttributeContainer::clearAttributes(this, a2);
  *((_DWORD *)this + 28) = 0;
  re::internal::GeomAttributeContainer::clearAttributes((void *)this + 14, v3);
  *((_DWORD *)this + 56) = 0;
  re::internal::GeomAttributeContainer::clearAttributes((void *)this + 28, v4);
  *((_DWORD *)this + 8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  re::internal::GeomAttributeContainer::clearAttributes((void *)this + 42, v5);
  *((_DWORD *)this + 112) = 0;
  uint64_t result = re::internal::GeomAttributeContainer::clearAttributes((void *)this + 56, v6);
  *((void *)this + 72) = 0;
  ++*((_DWORD *)this + 146);
  *((void *)this + 80) = 0;
  *((void *)this + 81) = 0;
  unint64_t v8 = *((void *)this + 77);
  *((void *)this + 78) = 0;
  *((void *)this + 79) = v8;
  if (v8 >= 0x10)
  {
    unint64_t v9 = 0;
    *(void *)&long long v10 = -1;
    *((void *)&v10 + 1) = -1;
    do
      *(_OWORD *)(*((void *)this + 75) + 16 * v9++) = v10;
    while (v9 < *((void *)this + 77) >> 4);
  }
  *(_DWORD *)this = 1;
  uint64_t v11 = *((void *)this + 3);
  if (v11)
  {
    unint64_t v12 = (uint64_t *)*((void *)this + 5);
    uint64_t v13 = 8 * v11;
    do
    {
      uint64_t v14 = *v12++;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v14 + 72))(v14, *(unsigned int *)this);
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t re::internal::GeomAttributeManager::reorderFaces(uint64_t a1, uint64_t *a2)
{
  v88[11] = *MEMORY[0x263EF8340];
  uint64_t result = re::internal::GeomAttributeContainer::reorder(a1 + 224, a2);
  int v5 = *(_DWORD *)(a1 + 360);
  uint64_t v6 = a2[2];
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return result;
  }
  char v8 = 0;
  unsigned int v9 = 0;
  long long v10 = (re::internal::GeomAttributeContainer *)(a1 + 336);
  unint64_t v52 = a2[2];
  do
  {
    uint64_t v11 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v10, v9);
    uint64_t result = re::internal::accessFaceVaryingAttributeSubmesh(v11, v12);
    if (*(unsigned char *)(result + 140)) {
      BOOL v13 = *(_DWORD *)(result + 128) == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13
      || (*(_DWORD *)(result + 48) ? (BOOL v14 = *(unsigned char *)(result + 60) == 0) : (BOOL v14 = 1),
          v14 ? (BOOL v15 = *(_DWORD *)(result + 24) == v6) : (BOOL v15 = 0),
          !v15))
    {
      char v8 = 1;
      goto LABEL_19;
    }
    int v73 = *(_DWORD *)result;
    re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v74, (uint64_t *)(result + 8));
    if (!(void)v75) {
      re::DynamicArray<re::BlendNode>::setCapacity(&v74, 1uLL);
    }
    re::internal::GeomBaseTopology::reorderFaces((uint64_t)&v73, a2);
    *(void *)long long v78 = 0xFFFFFFFF00000000;
    int v16 = -1;
    *(_DWORD *)&v78[8] = -1;
    LOBYTE(v79) = 0;
    if (v6 == -1)
    {
      unint64_t v17 = 0xFFFFFFFF00000000;
    }
    else
    {
      *(_DWORD *)&v78[8] = v6 - 1;
      int v16 = v6 - 1;
      unint64_t v17 = v6;
      *(void *)long long v78 = v6;
    }
    *(_DWORD *)&void v80[2] = v17;
    unint64_t v66 = v17;
    int v67 = v16;
    char v68 = 0;
    LODWORD(v69) = v17;
    LODWORD(v83) = v73;
    *((void *)&v83 + 1) = v74;
    long long v84 = v75;
    *((void *)&v85 + 1) = v77;
    uint64_t v77 = 0;
    LODWORD(v85) = 1;
    int v73 = 0;
    uint64_t v74 = 0;
    long long v75 = 0uLL;
    v76 += 2;
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v86, (uint64_t)v78);
    re::GeomIndexMap::GeomIndexMap((uint64_t)v88, (uint64_t)&v66);
    if (v68)
    {
      if (v68 == 2)
      {
        uint64_t v19 = v72;
        if (v72)
        {
          if (v70) {
            uint64_t v70 = 0;
          }
          uint64_t v18 = v69;
          if (v69) {
            goto LABEL_36;
          }
        }
      }
      else
      {
        if (v68 != 1) {
          goto LABEL_133;
        }
        uint64_t v19 = v69;
        if (v69)
        {
          uint64_t v18 = v71;
          if (v71) {
LABEL_36:
          }
            (*(void (**)(uint64_t))(*(void *)v19 + 40))(v19);
        }
      }
    }
    if ((_BYTE)v79)
    {
      if (v79 == 2)
      {
        if (!v82) {
          goto LABEL_49;
        }
        if (*(void *)&v80[10]) {
          *(void *)&v80[10] = 0;
        }
        if (!*(void *)&v80[2]) {
          goto LABEL_49;
        }
        (*(void (**)(void))(*(void *)v82 + 40))();
        __int16 v20 = &v80[2];
      }
      else
      {
        if (v79 != 1) {
          goto LABEL_134;
        }
        if (!*(void *)&v80[2]) {
          goto LABEL_49;
        }
        __int16 v20 = v81;
        if (v81[0])
        {
          (*(void (**)(void))(**(void **)&v80[2] + 40))();
          __int16 v20 = v81;
        }
      }
      *__int16 v20 = 0;
    }
LABEL_49:
    (*(void (**)(re::internal *, long long *))(*(void *)v11 + 64))(v11, &v83);
    re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v83, v21);
    uint64_t result = v74;
    if (v74 && v77) {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v74 + 40))();
    }
LABEL_19:
    ++v9;
  }
  while (v5 != v9);
  if ((v8 & 1) == 0) {
    return result;
  }
  int v53 = v10;
  uint64_t v65 = 0;
  v62[1] = 0;
  unint64_t v63 = 0;
  v62[0] = 0;
  int v64 = 0;
  unint64_t v22 = v6;
  re::DynamicArray<unsigned int>::resize(v62, v52, re::kInvalidMeshIndex);
  uint64_t v23 = 0;
  uint64_t v24 = a2[2];
  uint64_t v25 = a2[4];
  long long v26 = (int *)v63;
  uint64_t v27 = v65;
  do
  {
    if (v24 == v23) {
      goto LABEL_130;
    }
    uint64_t v28 = v6;
    unint64_t v29 = *(unsigned int *)(v25 + 4 * v23);
    if ((unint64_t)v26 <= v29)
    {
LABEL_131:
      unint64_t v66 = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v83 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v78 = 136315906;
      *(void *)&v78[4] = "operator[]";
      __int16 v79 = 1024;
      *(_DWORD *)uint64_t v80 = 789;
      *(_WORD *)&v80[4] = 2048;
      *(void *)&v80[6] = v29;
      *(_WORD *)&v80[14] = 2048;
      *(void *)&v80[16] = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_132:
      re::internal::assertLog((re::internal *)4, v40, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
      _os_crash();
      __break(1u);
LABEL_133:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_134:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_135:
      re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_136:
      re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
    }
    *(_DWORD *)(v27 + 4 * v29) = v23++;
    uint64_t v6 = v28;
  }
  while (v52 != v23);
  unsigned int v30 = 0;
  while (2)
  {
    long long v31 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v53, v30);
    uint64_t v33 = re::internal::accessFaceVaryingAttributeSubmesh(v31, v32);
    uint64_t v34 = v33;
    if (*(unsigned char *)(v33 + 140)) {
      BOOL v35 = *(_DWORD *)(v33 + 128) == 0;
    }
    else {
      BOOL v35 = 1;
    }
    if (!v35)
    {
      uint64_t v38 = *(void *)(v33 + 24);
      unint64_t v39 = v38;
      goto LABEL_71;
    }
    if (*(_DWORD *)(v33 + 48)) {
      BOOL v36 = *(unsigned char *)(v33 + 60) == 0;
    }
    else {
      BOOL v36 = 1;
    }
    uint64_t v38 = *(void *)(v33 + 24);
    if (!v36 || v38 != v28)
    {
      unint64_t v39 = *(void *)(v33 + 24);
LABEL_71:
      uint64_t v61 = 0;
      v58[1] = 0;
      unint64_t v59 = 0;
      uint64_t v57 = 0;
      v58[0] = 0;
      int v60 = 0;
      v54[1] = 0;
      unint64_t v55 = 0;
      v54[0] = 0;
      int v56 = 0;
      re::DynamicArray<unsigned int>::resize(v58, v39, re::kInvalidMeshIndex);
      re::DynamicArray<unsigned int>::resize(v54, v22, re::kInvalidMeshIndex);
      if (v38)
      {
        unint64_t v41 = 0;
        uint64_t v24 = v38;
        while (1)
        {
          LODWORD(v83) = v41;
          int v42 = *(unsigned __int8 *)(v34 + 60);
          if (v42 == 2) {
            break;
          }
          if (v42 == 1)
          {
            if (*(void *)(v34 + 80) > v41)
            {
              unsigned int v43 = *(_DWORD *)(*(void *)(v34 + 96) + 4 * v41);
              goto LABEL_84;
            }
            goto LABEL_83;
          }
          if (*(unsigned char *)(v34 + 60)) {
            goto LABEL_132;
          }
          if (v41 >= *(unsigned int *)(v34 + 64)) {
            unsigned int v43 = -1;
          }
          else {
            unsigned int v43 = v41;
          }
LABEL_84:
          uint64_t v45 = v43;
          unint64_t v46 = v63;
          if (v63 <= v43)
          {
            unint64_t v66 = 0;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v83 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long v78 = 136315906;
            *(void *)&v78[4] = "operator[]";
            __int16 v79 = 1024;
            *(_DWORD *)uint64_t v80 = 789;
            *(_WORD *)&v80[4] = 2048;
            *(void *)&v80[6] = v45;
            *(_WORD *)&v80[14] = 2048;
            *(void *)&v80[16] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_128:
            unint64_t v66 = 0;
            unint64_t v47 = (unint64_t)&v73;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v83 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long v78 = 136315906;
            *(void *)&v78[4] = "operator[]";
            __int16 v79 = 1024;
            *(_DWORD *)uint64_t v80 = 789;
            *(_WORD *)&v80[4] = 2048;
            *(void *)&v80[6] = v41;
            *(_WORD *)&v80[14] = 2048;
            *(void *)&v80[16] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_129:
            unint64_t v66 = 0;
            long long v26 = &v73;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v83 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long v78 = 136315906;
            *(void *)&v78[4] = "operator[]";
            __int16 v79 = 1024;
            *(_DWORD *)uint64_t v80 = 789;
            *(_WORD *)&v80[4] = 2048;
            *(void *)&v80[6] = v47;
            *(_WORD *)&v80[14] = 2048;
            *(void *)&v80[16] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_130:
            unint64_t v66 = 0;
            unint64_t v29 = (unint64_t)&v73;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v83 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)long long v78 = 136315906;
            *(void *)&v78[4] = "operator[]";
            __int16 v79 = 1024;
            *(_DWORD *)uint64_t v80 = 797;
            *(_WORD *)&v80[4] = 2048;
            *(void *)&v80[6] = v24;
            *(_WORD *)&v80[14] = 2048;
            *(void *)&v80[16] = v24;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_131;
          }
          unint64_t v46 = v59;
          if (v59 <= v41) {
            goto LABEL_128;
          }
          unint64_t v47 = *(unsigned int *)(v65 + 4 * v43);
          *(_DWORD *)(v61 + 4 * v41) = v47;
          unint64_t v46 = v55;
          if (v55 <= v47) {
            goto LABEL_129;
          }
          *(_DWORD *)(v57 + 4 * v47) = v41++;
          if (v24 == v41) {
            goto LABEL_88;
          }
        }
        uint64_t v44 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v34 + 64), (unsigned int *)&v83);
        if (v44 != -1)
        {
          unsigned int v43 = *(_DWORD *)(*(void *)(v34 + 72) + 8 * v44 + 4);
          goto LABEL_84;
        }
LABEL_83:
        unsigned int v43 = -1;
        goto LABEL_84;
      }
LABEL_88:
      int v73 = *(_DWORD *)v34;
      re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v74, (uint64_t *)(v34 + 8));
      if (!(void)v75) {
        re::DynamicArray<re::BlendNode>::setCapacity(&v74, 1uLL);
      }
      re::GeomIndexMap::GeomIndexMap((uint64_t)v78, (uint64_t)v58);
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v66, (uint64_t)v54);
      LODWORD(v83) = v73;
      *((void *)&v83 + 1) = v74;
      long long v84 = v75;
      *((void *)&v85 + 1) = v77;
      uint64_t v77 = 0;
      LODWORD(v85) = 1;
      int v73 = 0;
      uint64_t v74 = 0;
      long long v75 = 0uLL;
      v76 += 2;
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v86, (uint64_t)v78);
      re::GeomIndexMap::GeomIndexMap((uint64_t)v88, (uint64_t)&v66);
      (*(void (**)(re::internal *, long long *))(*(void *)v31 + 64))(v31, &v83);
      re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v83, v48);
      if (v68)
      {
        if (v68 == 2)
        {
          uint64_t v50 = v72;
          if (!v72) {
            goto LABEL_101;
          }
          if (v70) {
            uint64_t v70 = 0;
          }
          uint64_t v49 = v69;
          if (!v69) {
            goto LABEL_101;
          }
        }
        else
        {
          if (v68 != 1) {
            goto LABEL_135;
          }
          uint64_t v50 = v69;
          if (!v69) {
            goto LABEL_101;
          }
          uint64_t v49 = v71;
          if (!v71) {
            goto LABEL_101;
          }
        }
        (*(void (**)(uint64_t))(*(void *)v50 + 40))(v50);
      }
LABEL_101:
      unint64_t v22 = v52;
      if ((_BYTE)v79)
      {
        if (v79 == 2)
        {
          if (v82)
          {
            if (*(void *)&v80[10]) {
              *(void *)&v80[10] = 0;
            }
            if (*(void *)&v80[2])
            {
              (*(void (**)(void))(*(void *)v82 + 40))();
              int v51 = &v80[2];
              goto LABEL_112;
            }
          }
        }
        else
        {
          if (v79 != 1) {
            goto LABEL_136;
          }
          if (*(void *)&v80[2])
          {
            int v51 = v81;
            if (v81[0])
            {
              (*(void (**)(void))(**(void **)&v80[2] + 40))();
              int v51 = v81;
            }
LABEL_112:
            void *v51 = 0;
          }
        }
      }
      if (v74 && v77) {
        (*(void (**)(void))(*(void *)v74 + 40))();
      }
      if (v54[0] && v57) {
        (*(void (**)(void))(*(void *)v54[0] + 40))();
      }
      if (v58[0] && v61) {
        (*(void (**)(void))(*(void *)v58[0] + 40))();
      }
    }
    if (++v30 != v5) {
      continue;
    }
    break;
  }
  uint64_t result = v62[0];
  if (v62[0])
  {
    if (v65) {
      return (*(uint64_t (**)(void))(*(void *)v62[0] + 40))();
    }
  }
  return result;
}

uint64_t re::internal::GeomBaseTopology::reorderFaces(uint64_t a1, uint64_t *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  re::DynamicArray<float>::DynamicArray((uint64_t)&v11, a2);
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = v12;
    do
    {
      if (v6 <= v4) {
        goto LABEL_25;
      }
      uint64_t v7 = v13;
      if (v5 != *(_DWORD *)(v13 + 4 * v4))
      {
        unint64_t v6 = *(void *)(a1 + 24);
        if (v6 <= v4) {
          goto LABEL_26;
        }
        long long v15 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * v4);
        unint64_t v4 = v5;
        int v8 = v5;
        while (1)
        {
          unint64_t v6 = *(unsigned int *)(v7 + 4 * v4);
          if (v5 == v6) {
            break;
          }
          unint64_t v9 = *(void *)(a1 + 24);
          if (v9 <= v6)
          {
            uint64_t v14 = 0;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v24 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v16 = 136315906;
            unint64_t v17 = "operator[]";
            __int16 v18 = 1024;
            int v19 = 789;
            __int16 v20 = 2048;
            unint64_t v21 = v6;
            __int16 v22 = 2048;
            unint64_t v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            uint64_t v14 = 0;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v24 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v16 = 136315906;
            unint64_t v17 = "operator[]";
            __int16 v18 = 1024;
            int v19 = 789;
            __int16 v20 = 2048;
            unint64_t v21 = v4;
            __int16 v22 = 2048;
            unint64_t v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            uint64_t v14 = 0;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v24 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v16 = 136315906;
            unint64_t v17 = "operator[]";
            __int16 v18 = 1024;
            int v19 = 789;
            __int16 v20 = 2048;
            unint64_t v21 = v4;
            __int16 v22 = 2048;
            unint64_t v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            uint64_t v14 = 0;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v24 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v16 = 136315906;
            unint64_t v17 = "operator[]";
            __int16 v18 = 1024;
            int v19 = 789;
            __int16 v20 = 2048;
            unint64_t v21 = v6;
            __int16 v22 = 2048;
            unint64_t v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_25:
            *(void *)&long long v15 = 0;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v24 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v16 = 136315906;
            unint64_t v17 = "operator[]";
            __int16 v18 = 1024;
            int v19 = 789;
            __int16 v20 = 2048;
            unint64_t v21 = v4;
            __int16 v22 = 2048;
            unint64_t v23 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_26:
            *(void *)&long long v15 = 0;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v24 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v16 = 136315906;
            unint64_t v17 = "operator[]";
            __int16 v18 = 1024;
            int v19 = 789;
            __int16 v20 = 2048;
            unint64_t v21 = v4;
            __int16 v22 = 2048;
            unint64_t v23 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_27:
            uint64_t v14 = 0;
            long long v27 = 0u;
            long long v28 = 0u;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v24 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v16 = 136315906;
            unint64_t v17 = "operator[]";
            __int16 v18 = 1024;
            int v19 = 789;
            __int16 v20 = 2048;
            unint64_t v21 = v4;
            __int16 v22 = 2048;
            unint64_t v23 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_28;
          }
          if (v9 <= v4) {
            goto LABEL_22;
          }
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_OWORD *)(*(void *)(a1 + 40) + 16 * v6);
          unint64_t v9 = v12;
          if (v12 <= v4) {
            goto LABEL_23;
          }
          uint64_t v7 = v13;
          *(_DWORD *)(v13 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
          unint64_t v4 = v6;
          int v8 = v6;
          if (v9 <= v6) {
            goto LABEL_24;
          }
        }
        unint64_t v6 = *(void *)(a1 + 24);
        if (v6 <= v4) {
          goto LABEL_27;
        }
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v15;
        unint64_t v6 = v12;
        if (v12 <= v4)
        {
LABEL_28:
          uint64_t v14 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v24 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v16 = 136315906;
          unint64_t v17 = "operator[]";
          __int16 v18 = 1024;
          int v19 = 789;
          __int16 v20 = 2048;
          unint64_t v21 = v4;
          __int16 v22 = 2048;
          unint64_t v23 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(v13 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
      }
      unint64_t v4 = ++v5;
    }
    while (v3 > v5);
  }
  uint64_t result = v11;
  if (v11)
  {
    if (v13) {
      return (*(uint64_t (**)(void))(*(void *)v11 + 40))();
    }
  }
  return result;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeManager::GeomAttributeManager(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)a1);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)((char *)v4 + 112));
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)(a1 + 224));
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)(a1 + 336));
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)(a1 + 448));
  *(_DWORD *)(a1 + 58re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 62re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 656) = 0;
  return re::internal::GeomAttributeManager::operator=((re::internal::GeomAttributeContainer *)a1, a2);
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeManager::operator=(re::internal::GeomAttributeContainer *this, uint64_t a2)
{
  if (this != (re::internal::GeomAttributeContainer *)a2)
  {
    re::internal::GeomAttributeContainer::operator=(this, a2);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 112), a2 + 112);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 224), a2 + 224);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 336), a2 + 336);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 448), a2 + 448);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)this + 75, (uint64_t *)(a2 + 600));
    re::DynamicArray<re::GeomAttribute *>::operator=((uint64_t)this + 560, a2 + 560);
    *(void *)(a2 + 62re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    *(void *)(a2 + 648) = 0;
    *(void *)(a2 + 640) = 0;
    unint64_t v4 = *(void *)(a2 + 616);
    *(void *)(a2 + 632) = v4;
    if (v4 >= 0x10)
    {
      unint64_t v5 = 0;
      *(void *)&long long v6 = -1;
      *((void *)&v6 + 1) = -1;
      do
        *(_OWORD *)(*(void *)(a2 + 600) + 16 * v5++) = v6;
      while (v5 < *(void *)(a2 + 616) >> 4);
    }
    *(void *)(a2 + 576) = 0;
    ++*(_DWORD *)(a2 + 584);
  }
  return this;
}

uint64_t re::DynamicArray<re::GeomAttribute *>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)uint64_t result = v3;
      *(void *)(result + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

re::GeomAttribute *re::internal::GeomAttributeManager::replaceVertexWithFaceVaryingAttribute(uint64_t *a1, char *a2, re *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v16 = a2;
  uint64_t v6 = a1 + 75;
  uint64_t v7 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1 + 75, &v16);
  if (v7 == -1) {
    return 0;
  }
  uint64_t v8 = a1[76] + 16 * v7;
  unsigned int v11 = *(_DWORD *)(v8 + 8);
  uint64_t v9 = (int *)(v8 + 8);
  unint64_t v10 = v11;
  unint64_t v12 = a1[72];
  if (v12 <= v11)
  {
    uint64_t v17 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    int v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = v10;
    __int16 v24 = 2048;
    unint64_t v25 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    uint64_t v17 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    int v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = v12;
    __int16 v24 = 2048;
    unint64_t v25 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *(void *)(a1[74] + 8 * v10);
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(v16, *(unsigned __int8 *)(v13 + 17), a3);
  re::GeomAttribute::copyValues((re::GeomAttribute *)v13, FaceVaryingAttribute);
  unint64_t v12 = *v9;
  unint64_t v3 = a1[72];
  if (v3 <= v12) {
    goto LABEL_8;
  }
  *(void *)(a1[74] + 8 * v12) = FaceVaryingAttribute;
  *(void *)&long long v26 = *(void *)(v13 + 8);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v6, (char **)&v26);
  *(void *)&long long v26 = *((void *)FaceVaryingAttribute + 1);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v6, (char **)&v26, v9);
  re::internal::GeomAttributeContainer::addAttribute((re::internal::GeomAttributeContainer *)(a1 + 42), FaceVaryingAttribute);
  re::internal::GeomAttributeContainer::deleteAttribute((re::internal::GeomAttributeContainer *)(a1 + 14), v16);
  return FaceVaryingAttribute;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(uint64_t *a1, char **a2, int *a3)
{
  uint64_t v6 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  if (v6 != -1) {
    return a1[1] + 16 * v6 + 8;
  }
  return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
}

{
  uint64_t v6;
  uint64_t vars8;

  uint64_t v6 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  if (v6 != -1) {
    return a1[1] + 16 * v6 + 8;
  }
  return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
}

re::GeomAttribute *re::internal::GeomAttributeManager::replaceFaceWithFaceVaryingAttribute(uint64_t *a1, char *a2, re *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v16 = a2;
  uint64_t v6 = a1 + 75;
  uint64_t v7 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1 + 75, &v16);
  if (v7 == -1) {
    return 0;
  }
  uint64_t v8 = a1[76] + 16 * v7;
  unsigned int v11 = *(_DWORD *)(v8 + 8);
  uint64_t v9 = (int *)(v8 + 8);
  unint64_t v10 = v11;
  unint64_t v12 = a1[72];
  if (v12 <= v11)
  {
    uint64_t v17 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    int v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = v10;
    __int16 v24 = 2048;
    unint64_t v25 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    uint64_t v17 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v18 = 136315906;
    int v19 = "operator[]";
    __int16 v20 = 1024;
    int v21 = 789;
    __int16 v22 = 2048;
    unint64_t v23 = v12;
    __int16 v24 = 2048;
    unint64_t v25 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v13 = *(void *)(a1[74] + 8 * v10);
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(v16, *(unsigned __int8 *)(v13 + 17), a3);
  re::GeomAttribute::copyValues((re::GeomAttribute *)v13, FaceVaryingAttribute);
  unint64_t v12 = *v9;
  unint64_t v3 = a1[72];
  if (v3 <= v12) {
    goto LABEL_8;
  }
  *(void *)(a1[74] + 8 * v12) = FaceVaryingAttribute;
  *(void *)&long long v26 = *(void *)(v13 + 8);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v6, (char **)&v26);
  *(void *)&long long v26 = *((void *)FaceVaryingAttribute + 1);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v6, (char **)&v26, v9);
  re::internal::GeomAttributeContainer::addAttribute((re::internal::GeomAttributeContainer *)(a1 + 42), FaceVaryingAttribute);
  re::internal::GeomAttributeContainer::deleteAttribute((re::internal::GeomAttributeContainer *)(a1 + 28), v16);
  return FaceVaryingAttribute;
}

uint64_t re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh(void *a1, char *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v10[0] = a2;
  uint64_t v5 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1 + 75, v10);
  if (v5 == -1) {
    return 0;
  }
  unint64_t v6 = *(unsigned int *)(a1[76] + 16 * v5 + 8);
  unint64_t v7 = a1[72];
  if (v7 <= v6)
  {
    v10[1] = 0;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v11 = 136315906;
    unint64_t v12 = "operator[]";
    __int16 v13 = 1024;
    int v14 = 789;
    __int16 v15 = 2048;
    unint64_t v16 = v6;
    __int16 v17 = 2048;
    unint64_t v18 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v8 = *(void *)(a1[74] + 8 * v6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 64))(v8, a3);
  return v8;
}

re::GeomAttribute *re::internal::GeomAttributeManager::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, re::internal::GeomAttributeFaceVaryingSubmesh *a4)
{
  if (re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)a1, a2)) {
    return 0;
  }
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(a2, a3, a4);
  uint64_t v8 = re::internal::GeomAttributeContainer::addAttribute((re::internal::GeomAttributeContainer *)(a1 + 336), FaceVaryingAttribute);
  re::internal::GeomAttributeManager::addAttributeToTable((void *)a1, v8);
  return v8;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(uint64_t *a1, char **a2)
{
  if (!a1[7] || (unint64_t)a1[2] < 0x10 || !a1[3]) {
    return -1;
  }
  size_t v4 = re::RigEvaluation::HashString::operator()((int)&v16, *a2) % ((unint64_t)a1[2] >> 4);
  while (1)
  {
    uint64_t v5 = *a1;
    char v6 = re::RigEvaluation::HashString::operator()((int)&v17, *a2);
    int8x16_t v15 = *(int8x16_t *)(v5 + 16 * v4);
    unint64_t v7 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v6 & 0x7F), v15), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v8 = __clz(__rbit64(v7));
    if (v8 <= 0x3F) {
      break;
    }
LABEL_10:
    v13.i64[0] = -1;
    v13.i64[1] = -1;
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v15, v13), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v4 == (unint64_t)a1[2] >> 4) {
      size_t v4 = 0;
    }
    uint64_t v12 = -1;
    if (v4 == re::RigEvaluation::HashString::operator()((int)&v18, *a2) % ((unint64_t)a1[2] >> 4)) {
      return v12;
    }
  }
  uint64_t v9 = 16 * v4;
  unint64_t v10 = *a2;
  uint64_t v11 = a1[1];
  while (1)
  {
    uint64_t v12 = v8 + v9;
    if (!strcmp(v10, *(const char **)(v11 + 16 * (v8 + v9)))) {
      return v12;
    }
    if (v8 <= 0x3E)
    {
      unint64_t v8 = __clz(__rbit64((-2 << v8) & v7));
      if (v8 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

uint64_t re::DynamicArray<re::GeomCell4>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::BlendNode>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::GeomCell4>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::GeomCell4>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::BlendNode>::setCapacity(result, *(void *)(a2 + 16));
    unint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 16 * (void)v5);
      unint64_t v5 = v3[2];
    }
    uint64_t result = (void **)memcpy((char *)v3[4] + 16 * (void)v5, (const void *)(*(void *)(a2 + 32) + 16 * (void)v5), 16 * v4 - 16 * (void)v5);
  }
  else if (v4)
  {
    uint64_t result = (void **)memmove(result[4], *(const void **)(a2 + 32), 16 * v4);
  }
  void v3[2] = (void *)v4;
  return result;
}

void re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh(re::internal::GeomAttributeFaceVaryingSubmesh *this, uint64_t a2)
{
  int v3 = *((unsigned __int8 *)this + 140);
  if (v3 == 2)
  {
    re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 144);
  }
  else if (v3 == 1)
  {
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 144);
  }
  else
  {
    if (*((unsigned char *)this + 140))
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
      goto LABEL_15;
    }
    *((_DWORD *)this + 36) = 0;
  }
  int v4 = *((unsigned __int8 *)this + 60);
  if (v4 == 2)
  {
    re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 64);
    goto LABEL_13;
  }
  if (v4 == 1)
  {
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 64);
    goto LABEL_13;
  }
  if (!*((unsigned char *)this + 60))
  {
    *((_DWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
LABEL_13:
    re::DynamicArray<unsigned long>::deinit((uint64_t)this + 8);
    return;
  }
LABEL_15:
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
}

uint64_t re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(void *a1, unsigned int *a2)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v2 = a1[2];
  if (v2 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v3 = v2 >> 4;
  unint64_t v4 = *a2;
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  unint64_t v6 = v5 ^ (v5 >> 31);
  unint64_t v7 = v6 % v3;
  int8x16_t v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  unint64_t v10 = v6 % v3;
  while (1)
  {
    int8x16_t v11 = *(int8x16_t *)(*a1 + 16 * v10);
    unint64_t v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    unint64_t v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F) {
      break;
    }
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3) {
      unint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    uint64_t v15 = -1;
    if (v10 == v7) {
      return v15;
    }
  }
  uint64_t v14 = 16 * v10;
  while (1)
  {
    uint64_t v15 = v13 + v14;
    if (v4 == *(_DWORD *)(a1[1] + 8 * (v13 + v14))) {
      return v15;
    }
    if (v13 <= 0x3E)
    {
      unint64_t v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40) {
        continue;
      }
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<char const*,re::GeomAttribute *,re::internal::HashName,re::internal::HashName,void,false>::resize(uint64_t *a1)
{
  unint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = a1[7];
  long long v43 = 0u;
  v44[0] = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v44[1], 0, 32);
  size_t v9 = (size_t)re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v43, v7, v8);
  unint64_t v10 = a1[2];
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    while (1)
    {
      unsigned __int16 v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_12;
      }
    }
    unint64_t v15 = __clz(__rbit64(v14)) + v11;
    while (v15 != -1)
    {
      uint64_t v25 = a1[1];
      if (!*((void *)&v44[2] + 1))
      {
      }
      if (!*(void *)&v44[1] || *(void *)&v44[0] > (unint64_t)(8 * *(void *)&v44[1])) {
        re::HashBrown<char const*,re::GeomAttribute *,re::internal::HashName,re::internal::HashName,void,false>::resize(&v43);
      }
      long long v26 = (char **)(v25 + 16 * v15);
      size_t v27 = re::RigEvaluation::HashString::operator()((int)&v45, *v26);
      uint64_t v28 = v43;
      uint64_t v29 = *(void *)&v44[0] >> 4;
      size_t v30 = v27 % (*(void *)&v44[0] >> 4);
      while (1)
      {
        char v31 = re::RigEvaluation::HashString::operator()((int)&v45, *v26);
        unint64_t v32 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v28 + 16 * v30)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
        if (v32 < 0x40) {
          break;
        }
        if (v30 + 1 == v29) {
          size_t v30 = 0;
        }
        else {
          ++v30;
        }
      }
      size_t v33 = v28 + 16 * v30;
      uint64_t v34 = *(unsigned __int8 *)(v33 + v32) == 255;
      *(unsigned char *)(v33 + v32) = v31 & 0x7F;
      uint64_t v35 = 16 * (v32 + 16 * v30);
      uint64_t v36 = *((void *)&v43 + 1);
      uint64_t v37 = *((void *)&v44[0] + 1);
      *(_OWORD *)(*((void *)&v43 + 1) + v35) = *(_OWORD *)v26;
      *((void *)&v44[0] + 1) = v37 + 1;
      *(void *)&v44[1] -= v34;
      size_t v9 = re::RigEvaluation::HashString::operator()((int)&v45, *(char **)(v36 + v35));
      *((void *)&v44[1] + 1) ^= v9;
      unint64_t v38 = v15 >> 4;
      unint64_t v10 = a1[2];
      if (v15 >> 4 >= v10 >> 4) {
        break;
      }
      unint64_t v39 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
      if (v39 >= 0x40)
      {
        uint64_t v40 = 16 * v38;
        unint64_t v41 = ~v38 + (v10 >> 4);
        while (v41)
        {
          unint64_t v14 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v40 + 16)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
          unint64_t v42 = __clz(__rbit64(v14));
          v40 += 16;
          --v41;
          if (v42 <= 0x3F)
          {
            unint64_t v15 = v42 + v40;
            goto LABEL_34;
          }
        }
        break;
      }
      unint64_t v15 = v39 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_34:
      ;
    }
  }
LABEL_12:
  uint64_t v17 = *((void *)&v44[2] + 1);
  *((void *)&v44[2] + 1) = a1[7];
  uint64_t result = *((void *)&v44[2] + 1);
  long long v18 = v43;
  long long v19 = v44[0];
  *(void *)&v44[0] = v10;
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  *(void *)&long long v43 = *a1;
  *((void *)&v43 + 1) = v21;
  long long v22 = v44[1];
  long long v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v44[2];
  a1[7] = v17;
  *(_OWORD *)((char *)&v44[1] + 8) = v23;
  long long v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)((char *)v44 + 8) = v24;
  if (result)
  {
    if (v21) {
      *((void *)&v43 + 1) = 0;
    }
    if (v20) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3] + a2;
  unint64_t v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    unint64_t v5 = 3 * v2;
    unint64_t v6 = v5 << 6;
    uint64_t v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7) {
      unint64_t v4 = v7;
    }
    unint64_t v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  unint64_t v6 = a1[2];
  if (v6 >= 0x10)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a1;
    unint64_t v9 = v6 >> 4;
    __n128 v10 = (__n128)xmmword_2343680E0;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF) {
        break;
      }
      v7 += 16;
      if (!--v9) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    uint64_t v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd(v24, *(void *)(v22[0] + 8) + 16 * v12, *(void *)(v22[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        uint64_t v12 = v23;
      }
      while (v23 != -1);
      unint64_t v6 = a1[2];
    }
  }
LABEL_9:
  uint64_t v14 = *((void *)&v24[3] + 1);
  *((void *)&v24[3] + 1) = a1[7];
  uint64_t result = *((void *)&v24[3] + 1);
  long long v15 = v24[0];
  long long v16 = v24[1];
  *(void *)&v24[1] = v6;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  *(void *)&v24[0] = *a1;
  *((void *)&v24[0] + 1) = v18;
  long long v19 = v24[2];
  long long v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  long long v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v15;
  *((_OWORD *)a1 + 1) = v16;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (result)
  {
    if (v18) {
      *((void *)&v24[0] + 1) = 0;
    }
    if (v17) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd(_anonymous_namespace_ *a1, char **a2, int *a3)
{
  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || *((void *)a1 + 2) > (unint64_t)(8 * v6)) {
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize((uint64_t *)a1, 1);
  }
  size_t v7 = re::RigEvaluation::HashString::operator()((int)&v19, *a2) % (*((void *)a1 + 2) >> 4);
  while (1)
  {
    uint64_t v8 = *(void *)a1;
    char v9 = re::RigEvaluation::HashString::operator()((int)&v20, *a2);
    unint64_t v10 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v10 < 0x40) {
      break;
    }
    if (v7 + 1 == *((void *)a1 + 2) >> 4) {
      size_t v7 = 0;
    }
    else {
      ++v7;
    }
  }
  size_t v11 = v8 + 16 * v7;
  int v12 = *(unsigned __int8 *)(v11 + v10);
  *(unsigned char *)(v11 + v10) = v9 & 0x7F;
  BOOL v13 = v12 == 255;
  unint64_t v14 = v10 + 16 * v7;
  int v15 = *a3;
  uint64_t v16 = *((void *)a1 + 1) + 16 * v14;
  *(void *)uint64_t v16 = *a2;
  *(_DWORD *)(v16 + 8) = v15;
  uint64_t v17 = *((void *)a1 + 4) - v13;
  ++*((void *)a1 + 3);
  *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v17;
  *((void *)a1 + 5) ^= re::RigEvaluation::HashString::operator()((int)&v21, *(char **)(*((void *)a1 + 1) + 16 * v14));
  return *((void *)a1 + 1) + 16 * v14 + 8;
}

{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  char v21;
  char v22;
  char v23;

  if (!*((void *)a1 + 7))
  {
  }
  uint64_t v6 = *((void *)a1 + 4);
  if (!v6 || *((void *)a1 + 2) > (unint64_t)(8 * v6)) {
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize((uint64_t *)a1, 1);
  }
  size_t v7 = re::RigEvaluation::HashString::operator()((int)&v20, *a2) % (*((void *)a1 + 2) >> 4);
  while (1)
  {
    uint64_t v8 = *(void *)a1;
    char v9 = re::RigEvaluation::HashString::operator()((int)&v21, *a2);
    unint64_t v10 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    if (v10 < 0x40) {
      break;
    }
    if (++v7 == *((void *)a1 + 2) >> 4) {
      size_t v7 = 0;
    }
    if (v7 == re::RigEvaluation::HashString::operator()((int)&v23, *a2) % (*((void *)a1 + 2) >> 4))
    {
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      uint64_t result = _os_crash();
      __break(1u);
      return result;
    }
  }
  int v12 = v8 + 16 * v7;
  BOOL v13 = *(unsigned __int8 *)(v12 + v10);
  *(unsigned char *)(v12 + v10) = v9 & 0x7F;
  unint64_t v14 = v13 == 255;
  int v15 = v10 + 16 * v7;
  uint64_t v16 = *a3;
  uint64_t v17 = *((void *)a1 + 1) + 16 * v15;
  *(void *)uint64_t v17 = *a2;
  *(_DWORD *)(v17 + 8) = v16;
  uint64_t v18 = *((void *)a1 + 4) - v14;
  ++*((void *)a1 + 3);
  *((void *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v18;
  *((void *)a1 + 5) ^= re::RigEvaluation::HashString::operator()((int)&v22, *(char **)(*((void *)a1 + 1) + 16 * v15));
  return *((void *)a1 + 1) + 16 * v15 + 8;
}

uint64_t re::internal::mergeVertexPositions(re::internal *this, re::GeomMesh *a2)
{
  uint64_t v6 = &v47;
  uint64_t v72 = *MEMORY[0x263EF8340];
  unint64_t v7 = (unint64_t)this + 16;
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal *)((char *)this + 16), "vertexUV");
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)v7, "vertexNormal");
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)v7, "vertexTangent");
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)v7, "vertexBitangent");
  char v47 = 1;
  int v48 = 0;
  long long v50 = xmmword_2343ABB00;
  uint64_t v51 = 0;
  re::computeAABB(this, &v54);
  float32x4_t v8 = vsubq_f32(v55, v54);
  v8.i32[3] = 0;
  float32x4_t v9 = vmaxnmq_f32(v8, (float32x4_t)0);
  float32x4_t v10 = vmulq_f32(v9, v9);
  float v49 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0])* 0.5)* 0.000001;
  uint64_t v46 = 0;
  v43[1] = 0;
  uint64_t v44 = 0;
  v43[0] = 0;
  int v45 = 0;
  int v11 = *((_DWORD *)this + 4);
  uint64_t v42 = 0;
  int v33 = re::mergeVertices((uint64_t)this, (uint64_t)v43, (uint64_t)&v47);
  int v34 = v11;
  unint64_t v12 = (v11 - v33);
  v39[1] = 0;
  unint64_t v40 = 0;
  v39[0] = 0;
  int v41 = 0;
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v39, v12);
  uint64_t v38 = 0;
  v35[1] = 0;
  unint64_t v36 = 0;
  v35[0] = 0;
  int v37 = 0;
  re::DynamicArray<unsigned int>::resize(v35, *((unsigned int *)this + 4), &re::kInvalidMeshIndex);
  uint64_t v13 = re::GeomMesh::accessVertexPositions(this);
  unint64_t v15 = *((unsigned int *)this + 4);
  if (v15)
  {
    uint64_t v16 = v14;
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    while (1)
    {
      uint64_t v19 = (uint64_t)v44;
      if (v44 <= (float32x4_t *)v17) {
        goto LABEL_51;
      }
      unint64_t v4 = *(unsigned int *)(v46 + 4 * (void)v17);
      uint64_t v19 = v36;
      if (v36 <= v4) {
        break;
      }
      if (*(_DWORD *)(v38 + 4 * v4) == -1)
      {
        if (v4 >= v14) {
          goto LABEL_56;
        }
        uint64_t v19 = v18;
        unint64_t v3 = v40;
        if (v40 <= v18) {
          goto LABEL_57;
        }
        *(_OWORD *)(v42 + 16 * v18) = *(_OWORD *)(v13 + 16 * v4);
        uint64_t v19 = v36;
        if (v36 <= v4) {
          goto LABEL_58;
        }
        *(_DWORD *)(v38 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v18++;
        unint64_t v15 = *(unsigned int *)v7;
      }
      uint64_t v17 = (unsigned int *)((char *)v17 + 1);
      if ((unint64_t)v17 >= v15) {
        goto LABEL_11;
      }
    }
LABEL_52:
    *(void *)uint64_t v62 = 0;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v69[0] = 136315906;
    *(void *)&v69[1] = "operator[]";
    LOWORD(v69[3]) = 1024;
    *(_DWORD *)((char *)&v69[3] + 2) = 789;
    HIWORD(v69[4]) = 2048;
    *(void *)&v69[5] = v4;
    LOWORD(v69[7]) = 2048;
    *(void *)((char *)&v69[7] + 2) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_53:
    uint64_t v52 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v62 = 136315906;
    *(void *)&_OWORD v62[4] = "operator[]";
    __int16 v63 = 1024;
    int v64 = 797;
    __int16 v65 = 2048;
    unint64_t v66 = v7;
    __int16 v67 = 2048;
    unint64_t v68 = (unint64_t)v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    uint64_t v52 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v62 = 136315906;
    *(void *)&_OWORD v62[4] = "operator[]";
    __int16 v63 = 1024;
    int v64 = 789;
    __int16 v65 = 2048;
    unint64_t v66 = v2;
    __int16 v67 = 2048;
    unint64_t v68 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_55:
    uint64_t v52 = 0;
    long long v70 = 0u;
    long long v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v62 = 136315906;
    *(void *)&_OWORD v62[4] = "operator[]";
    __int16 v63 = 1024;
    int v64 = 609;
    __int16 v65 = 2048;
    unint64_t v66 = v7;
    __int16 v67 = 2048;
    unint64_t v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    *(void *)uint64_t v62 = 0;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v69[0] = 136315906;
    *(void *)&v69[1] = "operator[]";
    LOWORD(v69[3]) = 1024;
    *(_DWORD *)((char *)&v69[3] + 2) = 601;
    HIWORD(v69[4]) = 2048;
    *(void *)&v69[5] = v4;
    LOWORD(v69[7]) = 2048;
    *(void *)((char *)&v69[7] + 2) = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    *(void *)uint64_t v62 = 0;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v69[0] = 136315906;
    *(void *)&v69[1] = "operator[]";
    LOWORD(v69[3]) = 1024;
    *(_DWORD *)((char *)&v69[3] + 2) = 789;
    HIWORD(v69[4]) = 2048;
    *(void *)&v69[5] = v19;
    LOWORD(v69[7]) = 2048;
    *(void *)((char *)&v69[7] + 2) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_58:
    *(void *)uint64_t v62 = 0;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v69[0] = 136315906;
    *(void *)&v69[1] = "operator[]";
    LOWORD(v69[3]) = 1024;
    *(_DWORD *)((char *)&v69[3] + 2) = 789;
    HIWORD(v69[4]) = 2048;
    *(void *)&v69[5] = v4;
    LOWORD(v69[7]) = 2048;
    *(void *)((char *)&v69[7] + 2) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_11:
  uint64_t v6 = (char *)*((unsigned int *)this + 10);
  re::GeomMeshBuilder::GeomMeshBuilder((re *)&v54, (uint64_t)this);
  if (v6)
  {
    unint64_t v4 = 0;
    unint64_t v7 = 0;
    uint64_t v17 = v53;
    uint64_t v19 = 3;
    do
    {
      uint64_t v16 = (float32x4_t *)v56;
      if (v56 <= v7) {
        goto LABEL_53;
      }
      uint64_t v20 = 0;
      uint64_t v21 = v57 + v4;
      do
      {
        v53[v20] = *(_DWORD *)(v21 + v20 * 4);
        ++v20;
      }
      while (v20 != 4);
      uint64_t v22 = 0;
      if (v53[3] == -1) {
        uint64_t v23 = 3;
      }
      else {
        uint64_t v23 = 4;
      }
      uint64_t v16 = v44;
      uint64_t v24 = v46;
      unint64_t v3 = v36;
      uint64_t v25 = v38;
      do
      {
        unint64_t v2 = v53[v22];
        if ((unint64_t)v16 <= v2)
        {
          uint64_t v52 = 0;
          long long v70 = 0u;
          long long v71 = 0u;
          memset(v69, 0, sizeof(v69));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v62 = 136315906;
          *(void *)&_OWORD v62[4] = "operator[]";
          __int16 v63 = 1024;
          int v64 = 789;
          __int16 v65 = 2048;
          unint64_t v66 = v2;
          __int16 v67 = 2048;
          unint64_t v68 = (unint64_t)v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_50:
          uint64_t v52 = 0;
          long long v70 = 0u;
          long long v71 = 0u;
          memset(v69, 0, sizeof(v69));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v62 = 136315906;
          *(void *)&_OWORD v62[4] = "operator[]";
          __int16 v63 = 1024;
          int v64 = 789;
          __int16 v65 = 2048;
          unint64_t v66 = v2;
          __int16 v67 = 2048;
          unint64_t v68 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          *(void *)uint64_t v62 = 0;
          *((_OWORD *)v6 + 7) = 0u;
          *((_OWORD *)v6 + 8) = 0u;
          *((_OWORD *)v6 + 5) = 0u;
          *((_OWORD *)v6 + 6) = 0u;
          *((_OWORD *)v6 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v69[0] = 136315906;
          *(void *)&v69[1] = "operator[]";
          LOWORD(v69[3]) = 1024;
          *(_DWORD *)((char *)&v69[3] + 2) = 789;
          HIWORD(v69[4]) = 2048;
          *(void *)&v69[5] = v17;
          LOWORD(v69[7]) = 2048;
          *(void *)((char *)&v69[7] + 2) = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_52;
        }
        unint64_t v2 = *(unsigned int *)(v24 + 4 * v2);
        if (v3 <= v2) {
          goto LABEL_50;
        }
        v53[v22++] = *(_DWORD *)(v25 + 4 * v2);
      }
      while (v23 != v22);
      re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)&v54, v7++, v23, (double *)v53);
      v4 += 16;
    }
    while ((char *)v7 != v6);
  }
  if (v54.i32[2] > v12 && v56 && (v56 - 1) > v56)
  {
    while (1)
      ;
  }
  v54.i32[2] = v12;
  unsigned int v59 = v12;
  if (v60)
  {
    long long v26 = v61;
    uint64_t v27 = 8 * v60;
    do
    {
      uint64_t v28 = *v26++;
      (*(void (**)(uint64_t, void))(*(void *)v28 + 72))(v28, v59);
      v27 -= 8;
    }
    while (v27);
  }
  uint64_t v29 = (re *)re::GeomMesh::operator=((uint64_t)this, &v54.i32[2]);
  re::GeomMesh::setName(v29, (const char *)v54.i64[0]);
  uint64_t v16 = &v54;
  re::GeomMesh::freeName((re *)&v54);
  uint64_t v30 = re::GeomMesh::modifyVertexPositions(this);
  if (v34 != v33)
  {
    unint64_t v2 = 0;
    unint64_t v7 = v31;
    do
    {
      uint64_t v19 = v40;
      if (v40 <= v2) {
        goto LABEL_54;
      }
      if (v2 == v31) {
        goto LABEL_55;
      }
      *(_OWORD *)(v30 + 16 * v2) = *(_OWORD *)(v42 + 16 * v2);
    }
    while (++v2 != v12);
  }
  re::GeomMesh::freeName((re *)&v54);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v58);
  if (v55.i64[0] && v57) {
    (*(void (**)(void))(*(void *)v55.i64[0] + 40))();
  }
  if (v35[0] && v38) {
    (*(void (**)(void))(*(void *)v35[0] + 40))();
  }
  if (v39[0] && v42) {
    (*(void (**)(void))(*(void *)v39[0] + 40))();
  }
  uint64_t result = v43[0];
  if (v43[0] && v46) {
    return (*(uint64_t (**)(void))(*(void *)v43[0] + 40))();
  }
  return result;
}

double re::GeomMeshBuilder::setFaceVertices(re::GeomMeshBuilder *this, unsigned int a2, int a3, double *a4)
{
  unint64_t v4 = a2;
  if (*((void *)this + 4) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  float32x4_t v8 = (_DWORD *)(*((void *)this + 6) + 16 * a2);
  if (*v8 != -1)
  {
    int v9 = v8[3] == -1;
    int v10 = a3 == 3 || *((_DWORD *)a4 + 3) == -1;
    if (v10 != v9)
    {
      int v11 = *((_DWORD *)this + 104);
      if (v11)
      {
        for (unsigned int i = 0; i != v11; ++i)
        {
          uint64_t v13 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::GeomMeshBuilder *)((char *)this + 392), i);
          re::internal::accessFaceVaryingAttributeSubmesh(v13, v14);
        }
      }
    }
  }
  if (a3 == 4) {
    unsigned int v15 = *((_DWORD *)a4 + 3);
  }
  else {
    unsigned int v15 = -1;
  }
  if (*((void *)this + 4) <= v4)
  {
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  double result = *a4;
  unsigned int v17 = *((_DWORD *)a4 + 2);
  uint64_t v18 = *((void *)this + 6) + 16 * v4;
  *(double *)uint64_t v18 = *a4;
  *(_DWORD *)(v18 + 8) = v17;
  *(_DWORD *)(v18 + 12) = v15;
  return result;
}

void *re::allocInfo_AABB(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_366, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_366))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF93028, "AABB");
    __cxa_guard_release(&_MergedGlobals_366);
  }
  return &unk_26AF93028;
}

void re::initInfo_AABB(re *this, re::IntrospectionBase *a2)
{
  v12[0] = 4001984;
  v12[1] = "AABB";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92FE8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF92FE8);
    if (v4)
    {
      __n128 v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "min";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF93000 = v7;
      float32x4_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "max";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
      *(void *)(v10 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v10 + 32) = 0x1000000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF93008 = v10;
      __cxa_guard_release(&qword_26AF92FE8);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 2;
  *((void *)this + 8) = &qword_26AF93000;
  *((void *)this + 9) = re::internal::defaultConstruct<re::AABB>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::AABB>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::AABB>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::AABB>;
  re::IntrospectionRegistry::add(this, v3);
  long long v11 = v13;
}

int32x4_t re::internal::defaultConstruct<re::AABB>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v4 = 0x7F0000007FLL;
  *((void *)&v4 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)a3 = result;
  *(_OWORD *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v4;
  return result;
}

int32x4_t re::internal::defaultConstructV2<re::AABB>(uint64_t a1)
{
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v2 = 0x7F0000007FLL;
  *((void *)&v2 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)a1 = result;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v2;
  return result;
}

uint64_t re::introspect_AABB(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AABB", (uint64_t (*)(re::internal *))re::allocInfo_AABB, (re::IntrospectionBase *(*)(void))re::initInfo_AABB, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AABB>, this);
}

void *re::allocInfo_RayF(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92FF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF92FF0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF930A0, "RayF");
    __cxa_guard_release(&qword_26AF92FF0);
  }
  return &unk_26AF930A0;
}

void re::initInfo_RayF(re *this, re::IntrospectionBase *a2)
{
  v16[0] = 5079800;
  v16[1] = "RayF";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF92FF8, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF92FF8);
    if (v4)
    {
      __n128 v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "origin";
      *(void *)(v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
      *(void *)(v7 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF93010 = v7;
      float32x4_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "direction";
      *(void *)(v10 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v9;
      *(void *)(v10 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v10 + 32) = 0x1000000002;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF93018 = v10;
      long long v11 = re::introspectionAllocator((re *)v10);
      long long v13 = re::introspect_float((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "length";
      *(void *)(v14 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v13;
      *(void *)(v14 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(void *)(v14 + 32) = 0x2000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      qword_26AF93020 = v14;
      __cxa_guard_release(&qword_26AF92FF8);
    }
  }
  *((void *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1;
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 3;
  *((void *)this + 8) = &qword_26AF93010;
  *((void *)this + 9) = re::internal::defaultConstruct<re::RayF>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::RayF>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::RayF>;
  *((void *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = re::internal::defaultDestructV2<re::RayF>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

double re::internal::defaultConstruct<re::RayF>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  return result;
}

double re::internal::defaultConstructV2<re::RayF>(uint64_t a1)
{
  *(_DWORD *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0u;
  return result;
}

uint64_t re::introspect_RayF(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayF", (uint64_t (*)(re::internal *))re::allocInfo_RayF, (re::IntrospectionBase *(*)(void))re::initInfo_RayF, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RayF>, this);
}

float32x4_t re::computeAABB@<Q0>(re *this@<X0>, _OWORD *a2@<X8>)
{
  int32x4_t v14 = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v5 = 0x7F0000007FLL;
  *((void *)&v5 + 1) = 0x7F0000007FLL;
  *a2 = v14;
  a2[1] = v5;
  uint64_t v6 = (float32x4_t *)re::GeomMesh::accessVertexPositions(this);
  v9.i64[0] = 0x7F0000007FLL;
  v9.i32[2] = 127;
  float32x4_t v10 = (float32x4_t)v14;
  uint64_t v11 = *((unsigned int *)this + 4);
  if (v11)
  {
    uint64_t v12 = v7;
    do
    {
      if (!v12)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t v13 = *v6++;
      float32x4_t result = v13;
      v10.i32[3] = 0;
      result.i32[3] = 0;
      v9.i32[3] = 0;
      float32x4_t v10 = vminnmq_f32(v10, result);
      float32x4_t v9 = vmaxnmq_f32(v9, result);
      *a2 = v10;
      a2[1] = v9;
      --v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t re::computeOrientedBoundingBox@<X0>(re *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  unint64_t v6 = *((unsigned int *)this + 4);
  uint64_t v19 = 0;
  v16[1] = 0;
  unint64_t v17 = 0;
  v16[0] = 0;
  int v18 = 0;
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v16, v6);
  uint64_t v7 = re::GeomMesh::accessVertexPositions(this);
  if (v6)
  {
    unint64_t v9 = 0;
    unint64_t v10 = v8;
    do
    {
      if (v9 == v8)
      {
        uint64_t v20 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        uint64_t v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 601;
        __int16 v25 = 2048;
        unint64_t v26 = v10;
        __int16 v27 = 2048;
        unint64_t v28 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_11:
        uint64_t v20 = 0;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v29 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v21 = 136315906;
        uint64_t v22 = "operator[]";
        __int16 v23 = 1024;
        int v24 = 789;
        __int16 v25 = 2048;
        unint64_t v26 = v9;
        __int16 v27 = 2048;
        unint64_t v28 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v3 = v17;
      if (v17 <= v9) {
        goto LABEL_11;
      }
      *(_OWORD *)(v19 + 16 * v9) = *(_OWORD *)(v7 + 16 * v9);
      ++v9;
    }
    while (v9 != v6);
  }
  *(double *)&long long v11 = MEMORY[0x237DBD720](v17, v19);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  uint64_t result = v16[0];
  if (v16[0])
  {
    if (v19) {
      return (*(uint64_t (**)(void))(*(void *)v16[0] + 40))();
    }
  }
  return result;
}

uint64_t re::transform(re::GeomMesh *a1, float32x4_t *a2)
{
  long long v4 = (float32x2_t *)re::GeomMesh::modifyVertexPositions(a1);
  uint64_t v6 = v5;
  if (v5)
  {
    do
    {
      *(float32x4_t *)v4->f32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)v4->f32)), a2[1], *v4, 1), a2[2], *(float32x4_t *)v4->f32, 2);
      v4 += 2;
      --v6;
    }
    while (v6);
  }
}

{
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t *v6;
  unsigned int v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v11[3];

  long long v4 = a2[1];
  unsigned int v5 = a2[2];
  v11[0] = *a2;
  v11[1] = v4;
  void v11[2] = v5;
  uint64_t v6 = (float32x2_t *)re::GeomMesh::modifyVertexPositions(a1);
  unsigned int v8 = v7;
  if (v7)
  {
    do
    {
      unint64_t v9 = vaddq_f32(a2[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)v6->f32)), a2[1], *v6, 1), a2[2], *(float32x4_t *)v6->f32, 2));
      *(float32x4_t *)v6->f32 = vdivq_f32(v9, (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 3));
      v6 += 2;
      --v8;
    }
    while (v8);
  }
}

double re::anonymous namespace'::transformMeshTangents(uint64_t a1, float32x4_t *a2)
{
  unint64_t v3 = (re::internal::GeomAttributeManager *)(a1 + 64);
  uint64_t v4 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "vertexTangent");
  if (v4 && *(unsigned char *)(v4 + 17) == 7)
  {
    uint64_t v5 = re::internal::GeomAttributeManager::attributeByName(v3, "vertexTangent");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5))
    {
      uint64_t v6 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
      uint64_t v7 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v13 = v6;
    uint64_t v14 = v7;
  }
  uint64_t v8 = re::internal::GeomAttributeManager::attributeByName(v3, "vertexBitangent");
  if (v8 && *(unsigned char *)(v8 + 17) == 7)
  {
    uint64_t v10 = re::internal::GeomAttributeManager::attributeByName(v3, "vertexBitangent");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10))
    {
      uint64_t v11 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v10, 0);
      uint64_t v12 = (*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10);
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v11 = 0;
    }
    uint64_t v13 = v11;
    uint64_t v14 = v12;
  }
  return result;
}

uint64_t re::anonymous namespace'::transformMeshNormals(uint64_t result, uint64_t a2)
{
  v2.columns[1] = *(simd_float3 *)(a2 + 16);
  v2.columns[2] = *(simd_float3 *)(a2 + 32);
  float32x4_t v3 = vmulq_f32(*(float32x4_t *)a2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2.columns[2], (int8x16_t)v2.columns[2], 0xCuLL), (int8x16_t)v2.columns[2], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2.columns[1], (int32x4_t)v2.columns[1]), (int8x16_t)v2.columns[1], 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2.columns[2], (int32x4_t)v2.columns[2]), (int8x16_t)v2.columns[2], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2.columns[1], (int8x16_t)v2.columns[1], 0xCuLL), (int8x16_t)v2.columns[1], 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]) >= 1.0e-15)
  {
    uint64_t v4 = result;
    v2.columns[0] = *(simd_float3 *)a2;
    simd_float3x3 v19 = __invert_f3(v2);
    int32x4_t v17 = (int32x4_t)v19.columns[2];
    int32x4_t v18 = (int32x4_t)v19.columns[0];
    int32x4_t v16 = (int32x4_t)v19.columns[1];
    uint64_t v5 = (re::internal::GeomAttributeManager *)(v4 + 64);
    double result = re::internal::GeomAttributeManager::attributeByName(v5, "vertexNormal");
    if (result)
    {
      if (*(unsigned char *)(result + 17) == 7)
      {
        uint64_t v6 = re::internal::GeomAttributeManager::attributeByName(v5, "vertexNormal");
        double result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
        if (result)
        {
          uint64_t v7 = (float32x2_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v6, 0);
          double result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
          if (result)
          {
            float32x4_t v8 = (float32x4_t)vzip1q_s32(v18, v16);
            v8.i32[2] = v17.i32[0];
            float32x4_t v9 = (float32x4_t)vzip2q_s32(vzip1q_s32(v18, v17), vdupq_lane_s32(*(int32x2_t *)v16.i8, 1));
            float32x4_t v10 = (float32x4_t)vzip2q_s32(v18, v16);
            v10.i32[2] = v17.i32[2];
            uint64_t v11 = result;
            do
            {
              float32x4_t v12 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(_OWORD *)v7->f32)), v9, *v7, 1), v10, *(float32x4_t *)v7->f32, 2);
              int32x4_t v13 = (int32x4_t)vmulq_f32(v12, v12);
              v13.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1))).u32[0];
              float32x2_t v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
              float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
              *(float32x4_t *)v7->f32 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
              v7 += 2;
              --v11;
            }
            while (v11);
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::computeVertexFaceConnectivity(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3;
  unint64_t v8 = a1;
  uint64_t v42 = *MEMORY[0x263EF8340];
  unint64_t v9 = *(unsigned int *)(a1 + 16);
  *(void *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  LODWORD(v37) = 0;
  re::DynamicArray<unsigned int>::resize((void *)a3, v9, &v37);
  unint64_t v10 = *(void *)(v8 + 40);
  uint64_t v11 = v10;
  if (!v10)
  {
    unint64_t v13 = 0;
    goto LABEL_13;
  }
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  uint64_t v14 = *(void *)(v8 + 56);
  unint64_t v4 = *(void *)(v6 + 16);
  do
  {
    if (v12 == v10) {
      goto LABEL_41;
    }
    uint64_t v15 = 0;
    *(_OWORD *)long long v32 = *(_OWORD *)(v14 + 16 * v12);
    uint64_t v16 = *(void *)(v6 + 32);
    if (*(_DWORD *)&v32[12] == -1) {
      uint64_t v17 = 3;
    }
    else {
      uint64_t v17 = 4;
    }
    unint64_t v13 = (v13 + v17);
    do
    {
      unint64_t v3 = *(unsigned int *)&v32[4 * v15];
      if (v4 <= v3)
      {
        *(void *)&long long v28 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v29 = 136315906;
        *(void *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(void *)&v29[20] = v3;
        __int16 v30 = 2048;
        *(void *)long long v31 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v32 = 136315906;
        *(void *)&v32[4] = "operator[]";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = 789;
        __int16 v33 = 2048;
        unint64_t v34 = v9;
        __int16 v35 = 2048;
        unint64_t v36 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v32 = 136315906;
        *(void *)&v32[4] = "operator[]";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = 789;
        __int16 v33 = 2048;
        unint64_t v34 = v3;
        __int16 v35 = 2048;
        unint64_t v36 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        *(void *)long long v32 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v29 = 136315906;
        *(void *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 797;
        *(_WORD *)&v29[18] = 2048;
        *(void *)&v29[20] = v10;
        __int16 v30 = 2048;
        *(void *)long long v31 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_42:
        *(void *)&long long v28 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v32 = 136315906;
        *(void *)&v32[4] = "operator[]";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = 797;
        __int16 v33 = 2048;
        unint64_t v34 = v13;
        __int16 v35 = 2048;
        unint64_t v36 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_43;
      }
      ++*(_DWORD *)(v16 + 4 * v3);
      ++v15;
    }
    while (v17 != v15);
    ++v12;
  }
  while (v12 != v10);
LABEL_13:
  *(void *)&void v31[2] = 0;
  memset(v29, 0, sizeof(v29));
  if (v9)
  {
    re::DynamicArray<float>::resize((uint64_t)v29, v9);
    unint64_t v4 = *(void *)&v29[16];
    if (!*(void *)&v29[16]) {
      goto LABEL_46;
    }
    uint64_t v18 = *(void *)&v31[2];
    **(_DWORD **)&void v31[2] = 0;
    if (v9 >= 2)
    {
      unint64_t v5 = 0;
      unint64_t v10 = *(void *)(v6 + 16);
      if (v10 <= 1) {
        unint64_t v3 = 1;
      }
      else {
        unint64_t v3 = *(void *)(v6 + 16);
      }
      uint64_t v19 = v18 + 4;
      uint64_t v20 = (_DWORD *)(*(void *)(v6 + 32) + 4);
      while (v10 != v5)
      {
        if (v4 - 1 == v5) {
          goto LABEL_44;
        }
        *(_DWORD *)(v19 + 4 * v5) = *(v20 - 1);
        if (v3 - 1 == v5) {
          goto LABEL_45;
        }
        *v20 += *(v20 - 1);
        ++v20;
        if (v9 - 1 == ++v5) {
          goto LABEL_24;
        }
      }
LABEL_43:
      *(void *)&long long v28 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v32 = 136315906;
      *(void *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      __int16 v33 = 2048;
      unint64_t v34 = v5;
      __int16 v35 = 2048;
      unint64_t v36 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      *(void *)&long long v28 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v32 = 136315906;
      *(void *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      __int16 v33 = 2048;
      unint64_t v34 = v4;
      __int16 v35 = 2048;
      unint64_t v36 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      *(void *)&long long v28 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v32 = 136315906;
      *(void *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      __int16 v33 = 2048;
      unint64_t v34 = v3;
      __int16 v35 = 2048;
      unint64_t v36 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      *(void *)&long long v28 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)long long v32 = 136315906;
      *(void *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      __int16 v33 = 2048;
      unint64_t v34 = 0;
      __int16 v35 = 2048;
      unint64_t v36 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_24:
  re::DynamicArray<float>::resize(a2, v13);
  if (v11)
  {
    uint64_t v21 = 0;
    unint64_t v13 = *(void *)(v8 + 40);
    uint64_t v22 = *(void *)(v8 + 56);
    unint64_t v8 = *(void *)&v29[16];
    while (v21 != v13)
    {
      uint64_t v23 = 0;
      long long v28 = *(_OWORD *)(v22 + 16 * v21);
      uint64_t v24 = *(void *)&v31[2];
      unint64_t v6 = *(void *)(a2 + 16);
      uint64_t v25 = *(void *)(a2 + 32);
      if (HIDWORD(v28) == -1) {
        uint64_t v26 = 3;
      }
      else {
        uint64_t v26 = 4;
      }
      do
      {
        unint64_t v9 = *(unsigned int *)&v29[4 * v23 - 16];
        if (v8 <= v9) {
          goto LABEL_39;
        }
        unint64_t v3 = *(unsigned int *)(v24 + 4 * v9);
        *(_DWORD *)(v24 + 4 * v9) = v3 + 1;
        if (v6 <= v3) {
          goto LABEL_40;
        }
        *(_DWORD *)(v25 + 4 * v3) = v21;
        ++v23;
      }
      while (v26 != v23);
      if (++v21 == v11) {
        goto LABEL_34;
      }
    }
    goto LABEL_42;
  }
LABEL_34:
  uint64_t result = *(void *)v29;
  if (*(void *)v29)
  {
    if (*(void *)&v31[2]) {
      return (*(uint64_t (**)(void))(**(void **)v29 + 40))();
    }
  }
  return result;
}

uint64_t re::mergeContinuousFaceVaryingAttributeValues(re *this, re::GeomMesh *a2, const char *a3, double a4)
{
  unint64_t v9 = this;
  uint64_t v311 = *MEMORY[0x263EF8340];
  unint64_t v10 = (char **)re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), (const char *)a2);
  uint64_t v12 = v10;
  switch(*((unsigned char *)v10 + 17))
  {
    case 4:
      uint64_t result = (*((uint64_t (**)(char **))*v10 + 2))(v10);
      if (!result) {
        return result;
      }
      uint64_t v286 = 0;
      uint64_t v283 = 0;
      unint64_t v284 = 0;
      __int32 v281 = 0;
      uint64_t v282 = 0;
      int v285 = 0;
      uint64_t v278 = 0;
      unint64_t v279 = 0;
      uint64_t v277 = 0;
      int v280 = 0;
      unint64_t v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!v14) {
        goto LABEL_27;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        uint64_t v15 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12)) {
          goto LABEL_28;
        }
      }
      uint64_t v288 = 0;
      long long v309 = 0u;
      long long v310 = 0u;
      long long v307 = 0u;
      long long v308 = 0u;
      long long v306 = 0u;
      uint64_t v12 = (char **)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(void *)((char *)v299 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 601;
      WORD1(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_7:
      uint64_t result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!result) {
        return result;
      }
      uint64_t v286 = 0;
      uint64_t v283 = 0;
      unint64_t v284 = 0;
      __int32 v281 = 0;
      uint64_t v282 = 0;
      int v285 = 0;
      uint64_t v278 = 0;
      unint64_t v279 = 0;
      uint64_t v277 = 0;
      int v280 = 0;
      unint64_t v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!v14)
      {
        uint64_t v15 = 0;
        goto LABEL_40;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        uint64_t v15 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
        {
LABEL_40:
          simd_float4 v300 = 0;
          unint64_t v16 = v14;
          *((void *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(void *)&v299[0] = v15;
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if (v14)
          {
            unint64_t v5 = 0;
            unint64_t v17 = v290;
            uint64_t v23 = v292;
            do
            {
              if (v17 <= v5) {
                goto LABEL_623;
              }
              v23[v5] = v5;
              ++v5;
            }
            while (v14 != v5);
            unint64_t v24 = 0;
            *(void *)&v299[2] = 0;
            ++DWORD2(v299[2]);
            if (*((void *)&v299[1] + 1) < (unint64_t)v14)
            {
              re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
              unint64_t v24 = *(void *)&v299[2];
            }
            if (v24 < v14)
            {
              uint64_t v25 = &v300[3 * v24];
              uint64_t v26 = (char *)&v300[3 * v14] - (char *)v25;
              if (v26 >= 1)
              {
                unint64_t v27 = v26 / 0x18uLL + 1;
                do
                {
                  *uint64_t v25 = 0;
                  v25[1] = 0;
                  *((_DWORD *)v25 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = -1;
                  *((unsigned char *)v25 + 20) = 0;
                  --v27;
                  v25 += 3;
                }
                while (v27 > 1);
              }
            }
            *(void *)&v299[2] = v14;
          }
          else
          {
            *(void *)&v299[2] = 0;
          }
          ++DWORD2(v299[2]);
          if (*((void *)&v299[0] + 1))
          {
            LODWORD(v306) = 0;
            re::internal::GeomKDTree<re::Vector2<float>>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
          }
          if (v288 && v292) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
          }
          unint64_t v284 = 0;
          ++v285;
          unint64_t v279 = 0;
          ++v280;
          re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
          LOBYTE(v306) = 0;
          re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          if (v14)
          {
            unint64_t v14 = 0;
            unint64_t v17 = 1;
            while (1)
            {
              unint64_t v4 = v284;
              if (v284 <= v14) {
                goto LABEL_633;
              }
              if (*(_DWORD *)(v286 + 4 * v14) == -1)
              {
                unint64_t v290 = 0;
                v291 += 2;
                uint64_t v51 = *(void *)&v299[2];
                if (*(void *)&v299[2]
                  && (re::internal::GeomKDTree<re::Vector2<float>>::findWithinRadiusHelper((uint64_t)v299, v300, (float32x2_t *)(v15 + 8 * v14), &v288, a4), uint64_t v51 = v290, v290))
                {
                  char v52 = 0;
                  int v53 = *v292;
                }
                else
                {
                  char v52 = 1;
                  int v53 = v14;
                }
                unint64_t v4 = v284;
                if (v284 <= v14) {
                  goto LABEL_671;
                }
                *(_DWORD *)(v286 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v53;
                unint64_t v4 = v279;
                if (v279 <= v14) {
                  goto LABEL_675;
                }
                v281[v14] = 1;
                if ((v52 & 1) == 0) {
                  break;
                }
              }
LABEL_125:
              if (++v14 == v16)
              {
                if (v288 && v292) {
                  (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
                }
                goto LABEL_129;
              }
            }
            uint64_t v54 = 0;
            unint64_t v5 = v290;
            float32x4_t v55 = v292;
            unint64_t v6 = v284;
            uint64_t v56 = v286;
            while (v5 != v54)
            {
              unint64_t v4 = v55[v54];
              if (v6 <= v4) {
                goto LABEL_522;
              }
              *(_DWORD *)(v56 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
              if (v51 == ++v54) {
                goto LABEL_125;
              }
            }
            goto LABEL_518;
          }
LABEL_129:
          if (*(void *)&v299[1] && v300) {
            (*(void (**)(void, uint64_t **))(**(void **)&v299[1] + 40))(*(void *)&v299[1], v300);
          }
          *(void *)&v299[2] = 0;
          memset(v299, 0, 28);
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          unsigned int v57 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
          unsigned int v58 = v57;
          if (v57)
          {
            uint64_t v15 = v279;
            if (v279 <= v57 - 1) {
              goto LABEL_697;
            }
            LODWORD(v59) = 0;
            uint64_t v60 = v281;
            uint64_t v61 = v57;
            do
            {
              int v62 = *v60++;
              unint64_t v59 = (v59 + v62);
              --v61;
            }
            while (v61);
          }
          else
          {
            unint64_t v59 = 0;
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            unint64_t v14 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            unint64_t v17 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
          }
          else
          {
            unint64_t v17 = 0;
            unint64_t v14 = 0;
          }
          re::DynamicArray<unsigned long>::resize((uint64_t)v299, v59);
          uint64_t v15 = v58;
          re::DynamicArray<unsigned int>::resize(&v288, v58, &re::kInvalidMeshIndex);
          if (v58)
          {
            unint64_t v16 = 0;
            unsigned int v115 = 0;
            do
            {
              unint64_t v4 = v279;
              if (v279 <= v16) {
                goto LABEL_627;
              }
              if (v281[v16])
              {
                unint64_t v4 = v290;
                if (v290 <= v16) {
                  goto LABEL_654;
                }
                v292[v16] = v115;
                if (v17 <= v16) {
                  goto LABEL_658;
                }
                unint64_t v5 = v115;
                unint64_t v4 = *(void *)&v299[1];
                if (*(void *)&v299[1] <= (unint64_t)v115) {
                  goto LABEL_662;
                }
                *(void *)(*(void *)&v299[2] + 8 * v115++) = *(void *)(v14 + 8 * v16);
              }
              ++v16;
            }
            while (v15 != v16);
            unint64_t v16 = 0;
            unint64_t v17 = v279;
            float32x4_t v116 = v281;
            unint64_t v5 = v284;
            uint64_t v117 = v286;
            unint64_t v14 = v290;
            float32x4_t v118 = v292;
            while (v17 != v16)
            {
              if (!v116[v16])
              {
                if (v5 <= v16) {
                  goto LABEL_679;
                }
                unint64_t v6 = *(unsigned int *)(v117 + 4 * v16);
                if (v14 <= v6) {
                  goto LABEL_683;
                }
                if (v14 <= v16) {
                  goto LABEL_687;
                }
                v118[v16] = v118[v6];
              }
              if (v15 == ++v16) {
                goto LABEL_309;
              }
            }
LABEL_637:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v17;
            __int16 v297 = 2048;
            *(void *)long long v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_638;
          }
LABEL_309:
          unint64_t v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v114);
          uint64_t v15 = *(void *)&v299[1];
          unint64_t v6 = *(void *)(v16 + 24);
          unint64_t v14 = v6;
          *(void *)&v298[2] = 0;
          memset(v296, 0, sizeof(v296));
          re::DynamicArray<re::GeomCell4>::resize(v296, v6);
          if (v6)
          {
            uint64_t v119 = 0;
            unint64_t v17 = *(void *)&v296[16];
            uint64_t v120 = *(void *)&v298[2];
            unint64_t v5 = *(void *)(v16 + 24);
            uint64_t v121 = *(void *)(v16 + 40);
            unint64_t v7 = v290;
            while (v119 != v17)
            {
              if (v119 == v5) {
                goto LABEL_647;
              }
              uint64_t v122 = 0;
              *(_OWORD *)uint64_t v301 = *(_OWORD *)(v121 + 16 * v119);
              BOOL v123 = v292;
              if (*(_DWORD *)&v301[12] == -1) {
                uint64_t v124 = 3;
              }
              else {
                uint64_t v124 = 4;
              }
              do
              {
                unint64_t v4 = *(unsigned int *)&v301[4 * v122];
                if (v7 <= v4) {
                  goto LABEL_452;
                }
                *(_DWORD *)(v120 + 4 * v122++) = v123[v4];
              }
              while (v124 != v122);
              ++v119;
              v120 += 16;
              if (v119 == v6) {
                goto LABEL_319;
              }
            }
            goto LABEL_643;
          }
LABEL_319:
          if (*(_DWORD *)(v16 + 48)) {
            BOOL v125 = *(unsigned char *)(v16 + 60) == 0;
          }
          else {
            BOOL v125 = 1;
          }
          if (v125 && *((_DWORD *)v9 + 10) == v6)
          {
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
          }
          else
          {
            *(void *)&v295[2] = 0;
            memset(v293, 0, sizeof(v293));
            re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
            int v128 = *(unsigned __int8 *)(v16 + 60);
            if (v128 == 2)
            {
              re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
              LOBYTE(v273) = 2;
              int v193 = *(unsigned __int8 *)(v16 + 60);
              if (!*(unsigned char *)(v16 + 60)) {
                goto LABEL_472;
              }
              if (v193 == 2)
              {
                LOBYTE(v270) = 2;
                unint64_t v271 = v16 + 64;
                long long v272 = xmmword_234361D10;
                goto LABEL_557;
              }
              if (v193 != 1) {
                goto LABEL_712;
              }
              int v194 = *(_DWORD *)(v16 + 48);
            }
            else
            {
              if (v128 != 1)
              {
                if (*(unsigned char *)(v16 + 60)) {
                  goto LABEL_707;
                }
                LOBYTE(v273) = 0;
                LODWORD(v27re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
LABEL_472:
                int v195 = *(_DWORD *)(v16 + 64);
                LOBYTE(v270) = 0;
                LODWORD(v271) = v195;
                goto LABEL_557;
              }
              int v194 = *(_DWORD *)(v16 + 48);
              if (v194)
              {
                uint64_t v196 = *(uint64_t **)(v16 + 96);
                uint64_t v197 = *(unsigned int *)(v16 + 52);
                uint64_t v198 = *(void *)(v16 + 80);
                int v199 = (char *)v196 + 4 * v198;
                LOBYTE(v273) = 1;
                if (!v196) {
                  goto LABEL_550;
                }
                int v200 = (char *)v196 + 4 * v197;
                if (v198 != v197)
                {
                  v200 -= 4;
                  uint64_t v201 = 4 * v198 - 4 * v197;
                  do
                  {
                    int v203 = *((_DWORD *)v200 + 1);
                    v200 += 4;
                    int v202 = v203;
                    if (!v201) {
                      break;
                    }
                    v201 -= 4;
                  }
                  while (v202 == -1);
                }
LABEL_551:
                uint64_t v274 = v196;
                unint64_t v275 = v200;
                uint64_t v276 = v199;
              }
              else
              {
                LOBYTE(v273) = 1;
                unint64_t v275 = 0;
                uint64_t v276 = 0;
                uint64_t v274 = 0;
              }
            }
            if (v194)
            {
              unint64_t v245 = *(void *)(v16 + 96);
              unint64_t v246 = v245 + 4 * *(void *)(v16 + 80);
              LOBYTE(v270) = 1;
              unint64_t v271 = v245;
              *(void *)&long long v272 = v246;
              *((void *)&v272 + 1) = v246;
            }
            else
            {
              LOBYTE(v270) = 1;
              long long v272 = 0uLL;
              unint64_t v271 = 0;
            }
LABEL_557:
            while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
            {
              unint64_t v16 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v248);
              unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v247);
              unint64_t v4 = *(void *)&v293[16];
              if (*(void *)&v293[16] <= v14) {
                goto LABEL_692;
              }
              *(_DWORD *)(*(void *)&v295[2] + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = HIDWORD(v16);
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
            }
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v248);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v249);
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
            if (*(void *)v293 && *(void *)&v295[2]) {
              (*(void (**)(void, void))(**(void **)v293 + 40))(*(void *)v293, *(void *)&v295[2]);
            }
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            unint64_t v9 = (re *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            if ((*((unsigned int (**)(char **))*v12 + 2))(v12)) {
              goto LABEL_605;
            }
          }
          *(void *)uint64_t v301 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          uint64_t v12 = (char **)&_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v293 = 136315906;
          *(void *)&v293[4] = "operator[]";
          *(_WORD *)&v293[12] = 1024;
          *(_DWORD *)&v293[14] = 609;
          *(_WORD *)&v293[18] = 2048;
          *(void *)&v293[20] = 0;
          __int16 v294 = 2048;
          *(void *)float32x4_t v295 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_564;
        }
      }
      uint64_t v288 = 0;
      long long v309 = 0u;
      long long v310 = 0u;
      long long v307 = 0u;
      long long v308 = 0u;
      long long v306 = 0u;
      uint64_t v12 = (char **)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(void *)((char *)v299 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 601;
      WORD1(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_12:
      uint64_t result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!result) {
        return result;
      }
      uint64_t v286 = 0;
      uint64_t v283 = 0;
      unint64_t v284 = 0;
      __int32 v281 = 0;
      uint64_t v282 = 0;
      int v285 = 0;
      uint64_t v278 = 0;
      unint64_t v279 = 0;
      uint64_t v277 = 0;
      int v280 = 0;
      unint64_t v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!v14)
      {
        uint64_t v15 = 0;
        goto LABEL_52;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        uint64_t v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
        {
LABEL_52:
          simd_float4 v300 = 0;
          unint64_t v16 = v14;
          *((void *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(void *)&v299[0] = v15;
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if (v14)
          {
            unint64_t v5 = 0;
            unint64_t v17 = v290;
            long long v28 = v292;
            do
            {
              if (v17 <= v5) {
                goto LABEL_624;
              }
              v28[v5] = v5;
              ++v5;
            }
            while (v14 != v5);
            unint64_t v29 = 0;
            *(void *)&v299[2] = 0;
            ++DWORD2(v299[2]);
            if (*((void *)&v299[1] + 1) < (unint64_t)v14)
            {
              re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
              unint64_t v29 = *(void *)&v299[2];
            }
            if (v29 < v14)
            {
              __int16 v30 = &v300[3 * v29];
              uint64_t v31 = (char *)&v300[3 * v14] - (char *)v30;
              if (v31 >= 1)
              {
                unint64_t v32 = v31 / 0x18uLL + 1;
                do
                {
                  *__int16 v30 = 0;
                  v30[1] = 0;
                  *((_DWORD *)v30 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = -1;
                  *((unsigned char *)v30 + 20) = 0;
                  --v32;
                  v30 += 3;
                }
                while (v32 > 1);
              }
            }
            *(void *)&v299[2] = v14;
          }
          else
          {
            *(void *)&v299[2] = 0;
          }
          ++DWORD2(v299[2]);
          if (*((void *)&v299[0] + 1))
          {
            LODWORD(v306) = 0;
            re::internal::GeomKDTree<re::Vector4<float>>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
          }
          if (v288 && v292) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
          }
          unint64_t v284 = 0;
          ++v285;
          unint64_t v279 = 0;
          ++v280;
          re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
          LOBYTE(v306) = 0;
          re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          if (v14)
          {
            unint64_t v14 = 0;
            unint64_t v17 = 1;
            while (1)
            {
              unint64_t v4 = v284;
              if (v284 <= v14) {
                goto LABEL_634;
              }
              if (*(_DWORD *)(v286 + 4 * v14) == -1)
              {
                unint64_t v290 = 0;
                v291 += 2;
                uint64_t v63 = *(void *)&v299[2];
                if (*(void *)&v299[2]
                  && (re::internal::GeomKDTree<re::Vector4<float>>::findWithinRadiusHelper((uint64_t)v299, v300, (float32x4_t *)(v15 + 16 * v14), &v288, a4), uint64_t v63 = v290, v290))
                {
                  char v64 = 0;
                  int v65 = *v292;
                }
                else
                {
                  char v64 = 1;
                  int v65 = v14;
                }
                unint64_t v4 = v284;
                if (v284 <= v14) {
                  goto LABEL_672;
                }
                *(_DWORD *)(v286 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v65;
                unint64_t v4 = v279;
                if (v279 <= v14) {
                  goto LABEL_676;
                }
                v281[v14] = 1;
                if ((v64 & 1) == 0) {
                  break;
                }
              }
LABEL_158:
              if (++v14 == v16)
              {
                if (v288 && v292) {
                  (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
                }
                goto LABEL_162;
              }
            }
            uint64_t v66 = 0;
            unint64_t v5 = v290;
            __int16 v67 = v292;
            unint64_t v6 = v284;
            uint64_t v68 = v286;
            while (v5 != v66)
            {
              unint64_t v4 = v67[v66];
              if (v6 <= v4) {
                goto LABEL_523;
              }
              *(_DWORD *)(v68 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
              if (v63 == ++v66) {
                goto LABEL_158;
              }
            }
LABEL_519:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v5;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_520;
          }
LABEL_162:
          if (*(void *)&v299[1] && v300) {
            (*(void (**)(void, uint64_t **))(**(void **)&v299[1] + 40))(*(void *)&v299[1], v300);
          }
          *(void *)&v299[2] = 0;
          memset(v299, 0, 28);
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          unsigned int v69 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
          unsigned int v70 = v69;
          if (v69)
          {
            uint64_t v15 = v279;
            if (v279 <= v69 - 1) {
              goto LABEL_698;
            }
            LODWORD(v71) = 0;
            uint64_t v72 = v281;
            uint64_t v73 = v69;
            do
            {
              int v74 = *v72++;
              unint64_t v71 = (v71 + v74);
              --v73;
            }
            while (v73);
          }
          else
          {
            unint64_t v71 = 0;
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            unint64_t v14 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
            unint64_t v17 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
          }
          else
          {
            unint64_t v17 = 0;
            unint64_t v14 = 0;
          }
          re::DynamicArray<re::Vector4<float>>::resize((uint64_t)v299, v71);
          uint64_t v15 = v70;
          re::DynamicArray<unsigned int>::resize(&v288, v70, &re::kInvalidMeshIndex);
          if (v70)
          {
            unint64_t v16 = 0;
            unsigned int v130 = 0;
            do
            {
              unint64_t v4 = v279;
              if (v279 <= v16) {
                goto LABEL_628;
              }
              if (v281[v16])
              {
                unint64_t v4 = v290;
                if (v290 <= v16) {
                  goto LABEL_655;
                }
                v292[v16] = v130;
                if (v17 <= v16) {
                  goto LABEL_659;
                }
                unint64_t v5 = v130;
                unint64_t v4 = *(void *)&v299[1];
                if (*(void *)&v299[1] <= (unint64_t)v130) {
                  goto LABEL_663;
                }
                *(_OWORD *)(*(void *)&v299[2] + 16 * v130++) = *(_OWORD *)v14;
              }
              ++v16;
              v14 += 16;
            }
            while (v15 != v16);
            unint64_t v16 = 0;
            unint64_t v17 = v279;
            float32x4_t v131 = v281;
            unint64_t v5 = v284;
            uint64_t v132 = v286;
            unint64_t v14 = v290;
            __int32 v133 = v292;
            while (v17 != v16)
            {
              if (!v131[v16])
              {
                if (v5 <= v16) {
                  goto LABEL_680;
                }
                unint64_t v6 = *(unsigned int *)(v132 + 4 * v16);
                if (v14 <= v6) {
                  goto LABEL_684;
                }
                if (v14 <= v16) {
                  goto LABEL_688;
                }
                v133[v16] = v133[v6];
              }
              if (v15 == ++v16) {
                goto LABEL_348;
              }
            }
LABEL_638:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v17;
            __int16 v297 = 2048;
            *(void *)long long v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_639;
          }
LABEL_348:
          unint64_t v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v129);
          uint64_t v15 = *(void *)&v299[1];
          unint64_t v6 = *(void *)(v16 + 24);
          unint64_t v14 = v6;
          *(void *)&v298[2] = 0;
          memset(v296, 0, sizeof(v296));
          re::DynamicArray<re::GeomCell4>::resize(v296, v6);
          if (v6)
          {
            uint64_t v134 = 0;
            unint64_t v17 = *(void *)&v296[16];
            uint64_t v135 = *(void *)&v298[2];
            unint64_t v5 = *(void *)(v16 + 24);
            uint64_t v136 = *(void *)(v16 + 40);
            unint64_t v7 = v290;
            while (v134 != v17)
            {
              if (v134 == v5) {
                goto LABEL_648;
              }
              uint64_t v137 = 0;
              *(_OWORD *)uint64_t v301 = *(_OWORD *)(v136 + 16 * v134);
              v138 = v292;
              if (*(_DWORD *)&v301[12] == -1) {
                uint64_t v139 = 3;
              }
              else {
                uint64_t v139 = 4;
              }
              do
              {
                unint64_t v4 = *(unsigned int *)&v301[4 * v137];
                if (v7 <= v4) {
                  goto LABEL_453;
                }
                *(_DWORD *)(v135 + 4 * v137++) = v138[v4];
              }
              while (v139 != v137);
              ++v134;
              v135 += 16;
              if (v134 == v6) {
                goto LABEL_358;
              }
            }
LABEL_644:
            *(void *)uint64_t v301 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v293 = 136315906;
            *(void *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(void *)&v293[20] = v17;
            __int16 v294 = 2048;
            *(void *)float32x4_t v295 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_645;
          }
LABEL_358:
          if (*(_DWORD *)(v16 + 48)) {
            BOOL v140 = *(unsigned char *)(v16 + 60) == 0;
          }
          else {
            BOOL v140 = 1;
          }
          if (v140 && *((_DWORD *)v9 + 10) == v6)
          {
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
            goto LABEL_575;
          }
          *(void *)&v295[2] = 0;
          memset(v293, 0, sizeof(v293));
          re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
          int v143 = *(unsigned __int8 *)(v16 + 60);
          if (v143 == 2)
          {
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
            LOBYTE(v273) = 2;
            int v205 = *(unsigned __int8 *)(v16 + 60);
            if (!*(unsigned char *)(v16 + 60)) {
              goto LABEL_484;
            }
            if (v205 == 2)
            {
              LOBYTE(v270) = 2;
              unint64_t v271 = v16 + 64;
              long long v272 = xmmword_234361D10;
              goto LABEL_571;
            }
            if (v205 != 1) {
              goto LABEL_713;
            }
            int v206 = *(_DWORD *)(v16 + 48);
            goto LABEL_566;
          }
          if (v143 != 1)
          {
            if (*(unsigned char *)(v16 + 60)) {
              goto LABEL_708;
            }
            LOBYTE(v273) = 0;
            LODWORD(v27re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
LABEL_484:
            int v207 = *(_DWORD *)(v16 + 64);
            LOBYTE(v270) = 0;
            LODWORD(v271) = v207;
            goto LABEL_571;
          }
          int v206 = *(_DWORD *)(v16 + 48);
          if (!v206)
          {
            LOBYTE(v273) = 1;
            unint64_t v275 = 0;
            uint64_t v276 = 0;
            uint64_t v274 = 0;
LABEL_566:
            if (v206)
            {
              unint64_t v250 = *(void *)(v16 + 96);
              unint64_t v251 = v250 + 4 * *(void *)(v16 + 80);
              LOBYTE(v270) = 1;
              unint64_t v271 = v250;
              *(void *)&long long v272 = v251;
              *((void *)&v272 + 1) = v251;
            }
            else
            {
              LOBYTE(v270) = 1;
              long long v272 = 0uLL;
              unint64_t v271 = 0;
            }
LABEL_571:
            while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
            {
              int v252 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v254) >> 32;
              unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v253);
              unint64_t v4 = *(void *)&v293[16];
              if (*(void *)&v293[16] <= v14) {
                goto LABEL_693;
              }
              *(_DWORD *)(*(void *)&v295[2] + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v252;
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
            }
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v254);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v255);
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
            if (*(void *)v293 && *(void *)&v295[2]) {
              (*(void (**)(void, void))(**(void **)v293 + 40))(*(void *)v293, *(void *)&v295[2]);
            }
LABEL_575:
            if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
            {
              unint64_t v9 = (re *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
              if ((*((unsigned int (**)(char **))*v12 + 2))(v12)) {
                goto LABEL_577;
              }
            }
LABEL_703:
            *(void *)uint64_t v301 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v293 = 136315906;
            *(void *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 609;
            *(_WORD *)&v293[18] = 2048;
            *(void *)&v293[20] = 0;
            __int16 v294 = 2048;
            *(void *)float32x4_t v295 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_704;
          }
          uint64_t v208 = *(uint64_t **)(v16 + 96);
          uint64_t v209 = *(unsigned int *)(v16 + 52);
          uint64_t v210 = *(void *)(v16 + 80);
          uint64_t v211 = (char *)v208 + 4 * v210;
          LOBYTE(v273) = 1;
          if (v208)
          {
            float32x4_t v212 = (char *)v208 + 4 * v209;
            if (v210 != v209)
            {
              v212 -= 4;
              uint64_t v213 = 4 * v210 - 4 * v209;
              do
              {
                int v215 = *((_DWORD *)v212 + 1);
                v212 += 4;
                int v214 = v215;
                if (!v213) {
                  break;
                }
                v213 -= 4;
              }
              while (v214 == -1);
            }
            goto LABEL_565;
          }
LABEL_564:
          float32x4_t v212 = 0;
LABEL_565:
          uint64_t v274 = v208;
          unint64_t v275 = v212;
          uint64_t v276 = v211;
          goto LABEL_566;
        }
      }
      uint64_t v288 = 0;
      long long v309 = 0u;
      long long v310 = 0u;
      long long v307 = 0u;
      long long v308 = 0u;
      long long v306 = 0u;
      uint64_t v12 = (char **)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(void *)((char *)v299 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 601;
      WORD1(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      uint64_t result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!result) {
        return result;
      }
      uint64_t v286 = 0;
      uint64_t v283 = 0;
      unint64_t v284 = 0;
      __int32 v281 = 0;
      uint64_t v282 = 0;
      int v285 = 0;
      uint64_t v278 = 0;
      unint64_t v279 = 0;
      uint64_t v277 = 0;
      int v280 = 0;
      unint64_t v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!v14)
      {
        uint64_t v15 = 0;
        goto LABEL_64;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        uint64_t v15 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
        {
LABEL_64:
          simd_float4 v300 = 0;
          unint64_t v16 = v14;
          *((void *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(void *)&v299[0] = v15;
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if (v14)
          {
            unint64_t v5 = 0;
            unint64_t v17 = v290;
            __int16 v33 = v292;
            do
            {
              if (v17 <= v5) {
                goto LABEL_625;
              }
              v33[v5] = v5;
              ++v5;
            }
            while (v14 != v5);
            unint64_t v34 = 0;
            *(void *)&v299[2] = 0;
            ++DWORD2(v299[2]);
            if (*((void *)&v299[1] + 1) < (unint64_t)v14)
            {
              re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
              unint64_t v34 = *(void *)&v299[2];
            }
            if (v34 < v14)
            {
              __int16 v35 = &v300[3 * v34];
              uint64_t v36 = (char *)&v300[3 * v14] - (char *)v35;
              if (v36 >= 1)
              {
                unint64_t v37 = v36 / 0x18uLL + 1;
                do
                {
                  void *v35 = 0;
                  v35[1] = 0;
                  *((_DWORD *)v35 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = -1;
                  *((unsigned char *)v35 + 20) = 0;
                  --v37;
                  v35 += 3;
                }
                while (v37 > 1);
              }
            }
            *(void *)&v299[2] = v14;
          }
          else
          {
            *(void *)&v299[2] = 0;
          }
          ++DWORD2(v299[2]);
          if (*((void *)&v299[0] + 1))
          {
            LODWORD(v306) = 0;
            re::internal::GeomKDTree<double>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
          }
          if (v288 && v292) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
          }
          unint64_t v284 = 0;
          ++v285;
          unint64_t v279 = 0;
          ++v280;
          re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
          LOBYTE(v306) = 0;
          re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          if (v14)
          {
            unint64_t v14 = 0;
            unint64_t v17 = 1;
            do
            {
              unint64_t v4 = v284;
              if (v284 <= v14) {
                goto LABEL_636;
              }
              if (*(_DWORD *)(v286 + 4 * v14) == -1)
              {
                unint64_t v290 = 0;
                v291 += 2;
                uint64_t v87 = *(void *)&v299[2];
                if (*(void *)&v299[2]
                  && (re::internal::GeomKDTree<double>::findWithinRadiusHelper((uint64_t)v299, v300, (double *)(v15 + 8 * v14), &v288, a4), uint64_t v87 = v290, v290))
                {
                  char v88 = 0;
                  int v89 = *v292;
                }
                else
                {
                  char v88 = 1;
                  int v89 = v14;
                }
                unint64_t v4 = v284;
                if (v284 <= v14) {
                  goto LABEL_674;
                }
                *(_DWORD *)(v286 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v89;
                unint64_t v4 = v279;
                if (v279 <= v14) {
                  goto LABEL_678;
                }
                v281[v14] = 1;
                if ((v88 & 1) == 0)
                {
                  uint64_t v90 = 0;
                  unint64_t v5 = v290;
                  size_t v91 = v292;
                  unint64_t v6 = v284;
                  uint64_t v92 = v286;
                  do
                  {
                    if (v5 == v90) {
                      goto LABEL_521;
                    }
                    unint64_t v4 = v91[v90];
                    if (v6 <= v4) {
                      goto LABEL_525;
                    }
                    *(_DWORD *)(v92 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
                    ++v90;
                  }
                  while (v87 != v90);
                }
              }
              ++v14;
            }
            while (v14 != v16);
            if (v288 && v292) {
              (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
            }
          }
          if (*(void *)&v299[1] && v300) {
            (*(void (**)(void, uint64_t **))(**(void **)&v299[1] + 40))(*(void *)&v299[1], v300);
          }
          *(void *)&v299[2] = 0;
          memset(v299, 0, 28);
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          unsigned int v93 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
          unsigned int v94 = v93;
          if (v93)
          {
            uint64_t v15 = v279;
            if (v279 <= v93 - 1) {
              goto LABEL_700;
            }
            LODWORD(v95) = 0;
            long long v96 = v281;
            uint64_t v97 = v93;
            do
            {
              int v98 = *v96++;
              unint64_t v95 = (v95 + v98);
              --v97;
            }
            while (v97);
          }
          else
          {
            unint64_t v95 = 0;
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            unint64_t v14 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            unint64_t v5 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
          }
          else
          {
            unint64_t v5 = 0;
            unint64_t v14 = 0;
          }
          re::DynamicArray<double>::resize((uint64_t)v299, v95);
          uint64_t v15 = v94;
          re::DynamicArray<unsigned int>::resize(&v288, v94, &re::kInvalidMeshIndex);
          if (v94)
          {
            unint64_t v17 = 0;
            unsigned int v163 = 0;
            unint64_t v16 = v279;
            uint64_t v164 = v281;
            unint64_t v6 = v290;
            uint64_t v165 = v292;
            unint64_t v7 = *(void *)&v299[1];
            uint64_t v166 = *(void *)&v299[2];
            do
            {
              if (v16 == v17) {
                goto LABEL_630;
              }
              if (v164[v17])
              {
                if (v6 <= v17) {
                  goto LABEL_657;
                }
                v165[v17] = v163;
                if (v5 <= v17) {
                  goto LABEL_661;
                }
                unint64_t v4 = v163;
                if (v7 <= v163) {
                  goto LABEL_665;
                }
                *(void *)(v166 + 8 * v163++) = *(void *)(v14 + 8 * v17);
              }
              ++v17;
            }
            while (v15 != v17);
            unint64_t v14 = 0;
            uint64_t v167 = v281;
            unint64_t v5 = v284;
            uint64_t v168 = v286;
            unint64_t v17 = v290;
            uint64_t v169 = v292;
            do
            {
              if (v16 == v14) {
                goto LABEL_640;
              }
              if (!v167[v14])
              {
                if (v5 <= v14) {
                  goto LABEL_682;
                }
                unint64_t v6 = *(unsigned int *)(v168 + 4 * v14);
                if (v17 <= v6) {
                  goto LABEL_686;
                }
                if (v17 <= v14) {
                  goto LABEL_690;
                }
                v169[v14] = v169[v6];
              }
              ++v14;
            }
            while (v15 != v14);
          }
          unint64_t v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v162);
          uint64_t v15 = *(void *)&v299[1];
          unint64_t v6 = *(void *)(v16 + 24);
          unint64_t v14 = v6;
          *(void *)&v298[2] = 0;
          memset(v296, 0, sizeof(v296));
          re::DynamicArray<re::GeomCell4>::resize(v296, v6);
          if (v6)
          {
            uint64_t v170 = 0;
            unint64_t v17 = *(void *)&v296[16];
            uint64_t v171 = *(void *)&v298[2];
            unint64_t v5 = *(void *)(v16 + 24);
            uint64_t v172 = *(void *)(v16 + 40);
            unint64_t v7 = v290;
            do
            {
              if (v170 == v17) {
                goto LABEL_646;
              }
              if (v170 == v5) {
                goto LABEL_650;
              }
              uint64_t v173 = 0;
              *(_OWORD *)uint64_t v301 = *(_OWORD *)(v172 + 16 * v170);
              unsigned int v174 = v292;
              if (*(_DWORD *)&v301[12] == -1) {
                uint64_t v175 = 3;
              }
              else {
                uint64_t v175 = 4;
              }
              do
              {
                unint64_t v4 = *(unsigned int *)&v301[4 * v173];
                if (v7 <= v4) {
                  goto LABEL_455;
                }
                *(_DWORD *)(v171 + 4 * v173++) = v174[v4];
              }
              while (v175 != v173);
              ++v170;
              v171 += 16;
            }
            while (v170 != v6);
          }
          if (*(_DWORD *)(v16 + 48)) {
            BOOL v176 = *(unsigned char *)(v16 + 60) == 0;
          }
          else {
            BOOL v176 = 1;
          }
          if (v176 && *((_DWORD *)v9 + 10) == v6)
          {
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
LABEL_603:
            if (!(*((unsigned int (**)(char **))*v12 + 2))(v12)) {
              goto LABEL_705;
            }
            unint64_t v9 = (re *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            if (!(*((unsigned int (**)(char **))*v12 + 2))(v12)) {
              goto LABEL_705;
            }
LABEL_605:
            unint64_t v256 = *(const void **)&v299[2];
            size_t v257 = 8 * v15;
            goto LABEL_606;
          }
          *(void *)&v295[2] = 0;
          memset(v293, 0, sizeof(v293));
          re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
          int v179 = *(unsigned __int8 *)(v16 + 60);
          if (v179 == 2)
          {
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
            LOBYTE(v273) = 2;
            int v229 = *(unsigned __int8 *)(v16 + 60);
            if (!*(unsigned char *)(v16 + 60))
            {
LABEL_508:
              int v231 = *(_DWORD *)(v16 + 64);
              LOBYTE(v270) = 0;
              LODWORD(v271) = v231;
LABEL_599:
              while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
              {
                int v266 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v268) >> 32;
                unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v267);
                unint64_t v4 = *(void *)&v293[16];
                if (*(void *)&v293[16] <= v14) {
                  goto LABEL_695;
                }
                *(_DWORD *)(*(void *)&v295[2] + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v266;
                re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
              }
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v268);
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v269);
              re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
              if (*(void *)v293 && *(void *)&v295[2]) {
                (*(void (**)(void, void))(**(void **)v293 + 40))(*(void *)v293, *(void *)&v295[2]);
              }
              goto LABEL_603;
            }
            if (v229 == 2)
            {
              LOBYTE(v270) = 2;
              unint64_t v271 = v16 + 64;
              long long v272 = xmmword_234361D10;
              goto LABEL_599;
            }
            if (v229 != 1) {
              goto LABEL_715;
            }
            int v230 = *(_DWORD *)(v16 + 48);
          }
          else
          {
            if (v179 != 1)
            {
              if (*(unsigned char *)(v16 + 60)) {
                goto LABEL_710;
              }
              LOBYTE(v273) = 0;
              LODWORD(v27re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
              goto LABEL_508;
            }
            int v230 = *(_DWORD *)(v16 + 48);
            if (v230)
            {
              v232 = *(uint64_t **)(v16 + 96);
              uint64_t v233 = *(unsigned int *)(v16 + 52);
              uint64_t v234 = *(void *)(v16 + 80);
              int v235 = (char *)v232 + 4 * v234;
              LOBYTE(v273) = 1;
              if (v232)
              {
                int v236 = (char *)v232 + 4 * v233;
                if (v234 != v233)
                {
                  v236 -= 4;
                  uint64_t v237 = 4 * v234 - 4 * v233;
                  do
                  {
                    int v239 = *((_DWORD *)v236 + 1);
                    v236 += 4;
                    int v238 = v239;
                    if (!v237) {
                      break;
                    }
                    v237 -= 4;
                  }
                  while (v238 == -1);
                }
              }
              else
              {
                int v236 = 0;
              }
              uint64_t v274 = v232;
              unint64_t v275 = v236;
              uint64_t v276 = v235;
            }
            else
            {
              LOBYTE(v273) = 1;
              unint64_t v275 = 0;
              uint64_t v276 = 0;
              uint64_t v274 = 0;
            }
          }
          if (v230)
          {
            unint64_t v264 = *(void *)(v16 + 96);
            unint64_t v265 = v264 + 4 * *(void *)(v16 + 80);
            LOBYTE(v270) = 1;
            unint64_t v271 = v264;
            *(void *)&long long v272 = v265;
            *((void *)&v272 + 1) = v265;
          }
          else
          {
            LOBYTE(v270) = 1;
            long long v272 = 0uLL;
            unint64_t v271 = 0;
          }
          goto LABEL_599;
        }
      }
      uint64_t v288 = 0;
      long long v309 = 0u;
      long long v310 = 0u;
      long long v307 = 0u;
      long long v308 = 0u;
      long long v306 = 0u;
      uint64_t v12 = (char **)&_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(void *)((char *)v299 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 601;
      WORD1(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(void *)((char *)&v299[1] + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_22:
      uint64_t result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!result) {
        return result;
      }
      uint64_t v286 = 0;
      uint64_t v283 = 0;
      unint64_t v284 = 0;
      __int32 v281 = 0;
      uint64_t v282 = 0;
      int v285 = 0;
      uint64_t v278 = 0;
      unint64_t v279 = 0;
      uint64_t v277 = 0;
      int v280 = 0;
      unint64_t v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (v14)
      {
        if (!(*((unsigned int (**)(char **))*v12 + 2))(v12)
          || (uint64_t v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0),
              !(*((unsigned int (**)(char **))*v12 + 2))(v12)))
        {
          uint64_t v288 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          uint64_t v12 = (char **)&_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          LODWORD(v299[0]) = 136315906;
          *(void *)((char *)v299 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
          WORD6(v299[0]) = 1024;
          *(_DWORD *)((char *)v299 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 601;
          WORD1(v299[1]) = 2048;
          *(void *)((char *)&v299[1] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
          WORD6(v299[1]) = 2048;
          *(void *)((char *)&v299[1] + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_27:
          uint64_t v15 = 0;
LABEL_28:
          simd_float4 v300 = 0;
          unint64_t v16 = v14;
          *((void *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(void *)&v299[0] = v15;
          v292 = 0;
          uint64_t v289 = 0;
          unint64_t v290 = 0;
          uint64_t v288 = 0;
          int v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if (!v14)
          {
            *(void *)&v299[2] = 0;
            goto LABEL_171;
          }
          unint64_t v5 = 0;
          unint64_t v17 = v290;
          uint64_t v18 = v292;
          while (v17 > v5)
          {
            v18[v5] = v5;
            if (v14 == ++v5)
            {
              unint64_t v19 = 0;
              *(void *)&v299[2] = 0;
              ++DWORD2(v299[2]);
              if (*((void *)&v299[1] + 1) < (unint64_t)v14)
              {
                re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
                unint64_t v19 = *(void *)&v299[2];
              }
              if (v19 < v14)
              {
                uint64_t v20 = &v300[3 * v19];
                uint64_t v21 = (char *)&v300[3 * v14] - (char *)v20;
                if (v21 >= 1)
                {
                  unint64_t v22 = v21 / 0x18uLL + 1;
                  do
                  {
                    *uint64_t v20 = 0;
                    v20[1] = 0;
                    *((_DWORD *)v20 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = -1;
                    *((unsigned char *)v20 + 20) = 0;
                    --v22;
                    v20 += 3;
                  }
                  while (v22 > 1);
                }
              }
              *(void *)&v299[2] = v14;
LABEL_171:
              ++DWORD2(v299[2]);
              if (*((void *)&v299[0] + 1))
              {
                LODWORD(v306) = 0;
                re::internal::GeomKDTree<float>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
              }
              if (v288 && v292) {
                (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
              }
              unint64_t v284 = 0;
              ++v285;
              unint64_t v279 = 0;
              ++v280;
              re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
              LOBYTE(v306) = 0;
              re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
              v292 = 0;
              uint64_t v289 = 0;
              unint64_t v290 = 0;
              uint64_t v288 = 0;
              int v291 = 0;
              if (v14)
              {
                unint64_t v14 = 0;
                unint64_t v17 = 1;
                while (1)
                {
                  unint64_t v4 = v284;
                  if (v284 <= v14) {
                    goto LABEL_635;
                  }
                  if (*(_DWORD *)(v286 + 4 * v14) == -1)
                  {
                    unint64_t v290 = 0;
                    v291 += 2;
                    uint64_t v75 = *(void *)&v299[2];
                    if (*(void *)&v299[2]
                      && (re::internal::GeomKDTree<float>::findWithinRadiusHelper((uint64_t)v299, v300, (float *)(v15 + 4 * v14), &v288, a4), uint64_t v75 = v290, v290))
                    {
                      char v76 = 0;
                      int v77 = *v292;
                    }
                    else
                    {
                      char v76 = 1;
                      int v77 = v14;
                    }
                    unint64_t v4 = v284;
                    if (v284 <= v14) {
                      goto LABEL_673;
                    }
                    *(_DWORD *)(v286 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v77;
                    unint64_t v4 = v279;
                    if (v279 <= v14) {
                      goto LABEL_677;
                    }
                    v281[v14] = 1;
                    if ((v76 & 1) == 0) {
                      break;
                    }
                  }
LABEL_191:
                  if (++v14 == v16)
                  {
                    if (v288 && v292) {
                      (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
                    }
                    goto LABEL_195;
                  }
                }
                uint64_t v78 = 0;
                unint64_t v5 = v290;
                __int16 v79 = v292;
                unint64_t v6 = v284;
                uint64_t v80 = v286;
                while (v5 != v78)
                {
                  unint64_t v4 = v79[v78];
                  if (v6 <= v4) {
                    goto LABEL_524;
                  }
                  *(_DWORD *)(v80 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
                  if (v75 == ++v78) {
                    goto LABEL_191;
                  }
                }
LABEL_520:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v5;
                __int16 v297 = 2048;
                *(void *)long long v298 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_521:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v5;
                __int16 v297 = 2048;
                *(void *)long long v298 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_522:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v4;
                __int16 v297 = 2048;
                *(void *)long long v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_523:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v4;
                __int16 v297 = 2048;
                *(void *)long long v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_524:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v4;
                __int16 v297 = 2048;
                *(void *)long long v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_525:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                uint64_t v12 = (char **)&_os_log_internal;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v4;
                __int16 v297 = 2048;
                *(void *)long long v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_526:
                LOBYTE(v273) = 1;
                unint64_t v275 = 0;
                uint64_t v276 = 0;
                uint64_t v274 = 0;
                goto LABEL_538;
              }
LABEL_195:
              if (*(void *)&v299[1] && v300) {
                (*(void (**)(void, uint64_t **))(**(void **)&v299[1] + 40))(*(void *)&v299[1], v300);
              }
              *(void *)&v299[2] = 0;
              memset(v299, 0, 28);
              v292 = 0;
              uint64_t v289 = 0;
              unint64_t v290 = 0;
              uint64_t v288 = 0;
              int v291 = 0;
              unsigned int v81 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
              unsigned int v82 = v81;
              if (v81)
              {
                uint64_t v15 = v279;
                if (v279 > v81 - 1)
                {
                  LODWORD(v83) = 0;
                  long long v84 = v281;
                  uint64_t v85 = v81;
                  do
                  {
                    int v86 = *v84++;
                    unint64_t v83 = (v83 + v86);
                    --v85;
                  }
                  while (v85);
                  goto LABEL_286;
                }
LABEL_699:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v15;
                __int16 v297 = 2048;
                *(void *)long long v298 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_700:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v15;
                __int16 v297 = 2048;
                *(void *)long long v298 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              unint64_t v83 = 0;
LABEL_286:
              if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
              {
                unint64_t v14 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v12, 0);
                unint64_t v5 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
              }
              else
              {
                unint64_t v5 = 0;
                unint64_t v14 = 0;
              }
              re::DynamicArray<float>::resize((uint64_t)v299, v83);
              uint64_t v15 = v82;
              re::DynamicArray<unsigned int>::resize(&v288, v82, &re::kInvalidMeshIndex);
              if (v82)
              {
                unint64_t v17 = 0;
                unsigned int v145 = 0;
                unint64_t v16 = v279;
                unint64_t v146 = v281;
                unint64_t v6 = v290;
                unint64_t v147 = v292;
                unint64_t v7 = *(void *)&v299[1];
                uint64_t v148 = *(void *)&v299[2];
                do
                {
                  if (v16 == v17) {
                    goto LABEL_629;
                  }
                  if (v146[v17])
                  {
                    if (v6 <= v17) {
                      goto LABEL_656;
                    }
                    v147[v17] = v145;
                    if (v5 <= v17) {
                      goto LABEL_660;
                    }
                    unint64_t v4 = v145;
                    if (v7 <= v145) {
                      goto LABEL_664;
                    }
                    *(_DWORD *)(v148 + 4 * v145++) = *(_DWORD *)(v14 + 4 * v17);
                  }
                  ++v17;
                }
                while (v15 != v17);
                unint64_t v14 = 0;
                uint64_t v149 = v281;
                unint64_t v5 = v284;
                uint64_t v150 = v286;
                unint64_t v17 = v290;
                unsigned int v151 = v292;
                while (v16 != v14)
                {
                  if (!v149[v14])
                  {
                    if (v5 <= v14) {
                      goto LABEL_681;
                    }
                    unint64_t v6 = *(unsigned int *)(v150 + 4 * v14);
                    if (v17 <= v6) {
                      goto LABEL_685;
                    }
                    if (v17 <= v14) {
                      goto LABEL_689;
                    }
                    v151[v14] = v151[v6];
                  }
                  if (v15 == ++v14) {
                    goto LABEL_387;
                  }
                }
LABEL_639:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v16;
                __int16 v297 = 2048;
                *(void *)long long v298 = v16;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_640:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v16;
                __int16 v297 = 2048;
                *(void *)long long v298 = v16;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_641:
                *(void *)uint64_t v301 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)float32x4_t v293 = 136315906;
                *(void *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 789;
                *(_WORD *)&v293[18] = 2048;
                *(void *)&v293[20] = v17;
                __int16 v294 = 2048;
                *(void *)float32x4_t v295 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_642;
              }
LABEL_387:
              unint64_t v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v144);
              uint64_t v15 = *(void *)&v299[1];
              unint64_t v6 = *(void *)(v16 + 24);
              unint64_t v14 = v6;
              *(void *)&v298[2] = 0;
              memset(v296, 0, sizeof(v296));
              re::DynamicArray<re::GeomCell4>::resize(v296, v6);
              if (v6)
              {
                uint64_t v152 = 0;
                unint64_t v17 = *(void *)&v296[16];
                uint64_t v153 = *(void *)&v298[2];
                unint64_t v5 = *(void *)(v16 + 24);
                uint64_t v154 = *(void *)(v16 + 40);
                unint64_t v7 = v290;
                while (v152 != v17)
                {
                  if (v152 == v5) {
                    goto LABEL_649;
                  }
                  uint64_t v155 = 0;
                  *(_OWORD *)uint64_t v301 = *(_OWORD *)(v154 + 16 * v152);
                  uint64_t v156 = v292;
                  if (*(_DWORD *)&v301[12] == -1) {
                    uint64_t v157 = 3;
                  }
                  else {
                    uint64_t v157 = 4;
                  }
                  do
                  {
                    unint64_t v4 = *(unsigned int *)&v301[4 * v155];
                    if (v7 <= v4) {
                      goto LABEL_454;
                    }
                    *(_DWORD *)(v153 + 4 * v155++) = v156[v4];
                  }
                  while (v157 != v155);
                  ++v152;
                  v153 += 16;
                  if (v152 == v6) {
                    goto LABEL_397;
                  }
                }
LABEL_645:
                *(void *)uint64_t v301 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)float32x4_t v293 = 136315906;
                *(void *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 789;
                *(_WORD *)&v293[18] = 2048;
                *(void *)&v293[20] = v17;
                __int16 v294 = 2048;
                *(void *)float32x4_t v295 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_646:
                *(void *)uint64_t v301 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)float32x4_t v293 = 136315906;
                *(void *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 789;
                *(_WORD *)&v293[18] = 2048;
                *(void *)&v293[20] = v17;
                __int16 v294 = 2048;
                *(void *)float32x4_t v295 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_647:
                *(void *)uint64_t v301 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)float32x4_t v293 = 136315906;
                *(void *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(void *)&v293[20] = v5;
                __int16 v294 = 2048;
                *(void *)float32x4_t v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_648:
                *(void *)uint64_t v301 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)float32x4_t v293 = 136315906;
                *(void *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(void *)&v293[20] = v5;
                __int16 v294 = 2048;
                *(void *)float32x4_t v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_649:
                *(void *)uint64_t v301 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)float32x4_t v293 = 136315906;
                *(void *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(void *)&v293[20] = v5;
                __int16 v294 = 2048;
                *(void *)float32x4_t v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_650:
                *(void *)uint64_t v301 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)float32x4_t v293 = 136315906;
                *(void *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(void *)&v293[20] = v5;
                __int16 v294 = 2048;
                *(void *)float32x4_t v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_651:
                *(void *)float32x4_t v293 = 0;
                long long v309 = 0u;
                long long v310 = 0u;
                long long v307 = 0u;
                long long v308 = 0u;
                long long v306 = 0u;
                os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                *(_DWORD *)simd_float4 v296 = 136315906;
                *(void *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(void *)&v296[20] = v16;
                __int16 v297 = 2048;
                *(void *)long long v298 = v4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_652;
              }
LABEL_397:
              if (*(_DWORD *)(v16 + 48)) {
                BOOL v158 = *(unsigned char *)(v16 + 60) == 0;
              }
              else {
                BOOL v158 = 1;
              }
              if (v158 && *((_DWORD *)v9 + 10) == v6)
              {
                re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
              }
              else
              {
                *(void *)&v295[2] = 0;
                memset(v293, 0, sizeof(v293));
                re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
                int v161 = *(unsigned __int8 *)(v16 + 60);
                if (v161 == 2)
                {
                  re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
                  LOBYTE(v273) = 2;
                  int v217 = *(unsigned __int8 *)(v16 + 60);
                  if (!*(unsigned char *)(v16 + 60)) {
                    goto LABEL_496;
                  }
                  if (v217 == 2)
                  {
                    LOBYTE(v270) = 2;
                    unint64_t v271 = v16 + 64;
                    long long v272 = xmmword_234361D10;
                    goto LABEL_585;
                  }
                  if (v217 != 1) {
                    goto LABEL_714;
                  }
                  int v218 = *(_DWORD *)(v16 + 48);
                }
                else
                {
                  if (v161 != 1)
                  {
                    if (!*(unsigned char *)(v16 + 60))
                    {
                      LOBYTE(v273) = 0;
                      LODWORD(v27re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
LABEL_496:
                      int v219 = *(_DWORD *)(v16 + 64);
                      LOBYTE(v270) = 0;
                      LODWORD(v271) = v219;
                      goto LABEL_585;
                    }
LABEL_709:
                    re::internal::assertLog((re::internal *)4, v160, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
                    _os_crash();
                    __break(1u);
LABEL_710:
                    re::internal::assertLog((re::internal *)4, v178, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
                    _os_crash();
                    __break(1u);
LABEL_711:
                    re::internal::assertLog((re::internal *)4, v180, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_712:
                    re::internal::assertLog((re::internal *)4, v192, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_713:
                    re::internal::assertLog((re::internal *)4, v204, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_714:
                    re::internal::assertLog((re::internal *)4, v216, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_715:
                    re::internal::assertLog((re::internal *)4, v228, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
                    JUMPOUT(0x233A669F4);
                  }
                  int v218 = *(_DWORD *)(v16 + 48);
                  if (v218)
                  {
                    uint64_t v220 = *(uint64_t **)(v16 + 96);
                    uint64_t v221 = *(unsigned int *)(v16 + 52);
                    uint64_t v222 = *(void *)(v16 + 80);
                    float32x4_t v223 = (char *)v220 + 4 * v222;
                    LOBYTE(v273) = 1;
                    if (v220)
                    {
                      float32x4_t v224 = (char *)v220 + 4 * v221;
                      if (v222 != v221)
                      {
                        v224 -= 4;
                        uint64_t v225 = 4 * v222 - 4 * v221;
                        do
                        {
                          int v227 = *((_DWORD *)v224 + 1);
                          v224 += 4;
                          int v226 = v227;
                          if (!v225) {
                            break;
                          }
                          v225 -= 4;
                        }
                        while (v226 == -1);
                      }
                    }
                    else
                    {
                      float32x4_t v224 = 0;
                    }
                    uint64_t v274 = v220;
                    unint64_t v275 = v224;
                    uint64_t v276 = v223;
                  }
                  else
                  {
                    LOBYTE(v273) = 1;
                    unint64_t v275 = 0;
                    uint64_t v276 = 0;
                    uint64_t v274 = 0;
                  }
                }
                if (v218)
                {
                  unint64_t v258 = *(void *)(v16 + 96);
                  unint64_t v259 = v258 + 4 * *(void *)(v16 + 80);
                  LOBYTE(v270) = 1;
                  unint64_t v271 = v258;
                  *(void *)&long long v272 = v259;
                  *((void *)&v272 + 1) = v259;
                }
                else
                {
                  LOBYTE(v270) = 1;
                  long long v272 = 0uLL;
                  unint64_t v271 = 0;
                }
LABEL_585:
                while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
                {
                  int v260 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v262) >> 32;
                  unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v261);
                  unint64_t v4 = *(void *)&v293[16];
                  if (*(void *)&v293[16] <= v14) {
                    goto LABEL_694;
                  }
                  *(_DWORD *)(*(void *)&v295[2] + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v260;
                  re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
                }
                re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v262);
                re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v263);
                re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
                if (*(void *)v293 && *(void *)&v295[2]) {
                  (*(void (**)(void, void))(**(void **)v293 + 40))(*(void *)v293, *(void *)&v295[2]);
                }
              }
              if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
              {
                unint64_t v9 = (re *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v12, 0);
                if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
                {
                  unint64_t v256 = *(const void **)&v299[2];
                  size_t v257 = 4 * v15;
                  goto LABEL_606;
                }
              }
LABEL_704:
              *(void *)uint64_t v301 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)float32x4_t v293 = 136315906;
              *(void *)&v293[4] = "operator[]";
              *(_WORD *)&v293[12] = 1024;
              *(_DWORD *)&v293[14] = 609;
              *(_WORD *)&v293[18] = 2048;
              *(void *)&v293[20] = 0;
              __int16 v294 = 2048;
              *(void *)float32x4_t v295 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_705:
              *(void *)uint64_t v301 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)float32x4_t v293 = 136315906;
              *(void *)&v293[4] = "operator[]";
              *(_WORD *)&v293[12] = 1024;
              *(_DWORD *)&v293[14] = 609;
              *(_WORD *)&v293[18] = 2048;
              *(void *)&v293[20] = 0;
              __int16 v294 = 2048;
              *(void *)float32x4_t v295 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_706:
              re::internal::assertLog((re::internal *)4, v112, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699, v270, v271, v272, v273, v274, v275, v276);
              _os_crash();
              __break(1u);
LABEL_707:
              re::internal::assertLog((re::internal *)4, v127, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
              _os_crash();
              __break(1u);
LABEL_708:
              re::internal::assertLog((re::internal *)4, v142, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
              _os_crash();
              __break(1u);
              goto LABEL_709;
            }
          }
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v5;
          __int16 v297 = 2048;
          *(void *)long long v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_623:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v5;
          __int16 v297 = 2048;
          *(void *)long long v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_624:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v5;
          __int16 v297 = 2048;
          *(void *)long long v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_625:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v5;
          __int16 v297 = 2048;
          *(void *)long long v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_626:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v16;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_627:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v16;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_628:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v16;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_629:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v16;
          __int16 v297 = 2048;
          *(void *)long long v298 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_630:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v16;
          __int16 v297 = 2048;
          *(void *)long long v298 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_631:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v14;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_632:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v17;
          __int16 v297 = 2048;
          *(void *)long long v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_633:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v14;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_634:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v14;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_635:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v14;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_636:
          *(void *)float32x4_t v293 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)simd_float4 v296 = 136315906;
          *(void *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(void *)&v296[20] = v14;
          __int16 v297 = 2048;
          *(void *)long long v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_637;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      simd_float4 v300 = 0;
      memset(v299, 0, 44);
      unint64_t v16 = v14;
      if ((re::internal::GeomKDTree<re::Vector3<float>>::build((uint64_t)v299, v14, v15) & 1) == 0)
      {
LABEL_702:
        re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) k-d tree failed to build.", "!\"Unreachable code\"", "computeRepresentativeValuesAndReducedIndicesContinuous", 245);
        _os_crash();
        __break(1u);
        goto LABEL_703;
      }
      unint64_t v284 = 0;
      ++v285;
      unint64_t v279 = 0;
      ++v280;
      re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
      LOBYTE(v306) = 0;
      re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
      v292 = 0;
      uint64_t v289 = 0;
      unint64_t v290 = 0;
      uint64_t v288 = 0;
      int v291 = 0;
      if (!v14) {
        goto LABEL_96;
      }
      unint64_t v14 = 0;
      unint64_t v17 = 1;
      do
      {
        unint64_t v4 = v284;
        if (v284 <= v14) {
          goto LABEL_631;
        }
        if (*(_DWORD *)(v286 + 4 * v14) == -1)
        {
          unint64_t v290 = 0;
          v291 += 2;
          uint64_t v39 = *(void *)&v299[2];
          if (*(void *)&v299[2]
            && (re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper((uint64_t)v299, v300, (float32x4_t *)(v15 + 16 * v14), &v288, a4), uint64_t v39 = v290, v290))
          {
            char v40 = 0;
            int v41 = *v292;
          }
          else
          {
            char v40 = 1;
            int v41 = v14;
          }
          unint64_t v4 = v284;
          if (v284 <= v14) {
            goto LABEL_666;
          }
          *(_DWORD *)(v286 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v41;
          unint64_t v4 = v279;
          if (v279 <= v14)
          {
LABEL_667:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_668:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v16;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_669:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v6;
            __int16 v297 = 2048;
            *(void *)long long v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_670:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v16;
            __int16 v297 = 2048;
            *(void *)long long v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_671:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_672:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_673:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_674:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_675:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_676:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_677:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_678:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_679:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v16;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_680:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v16;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_681:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_682:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_683:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v6;
            __int16 v297 = 2048;
            *(void *)long long v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_684:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v6;
            __int16 v297 = 2048;
            *(void *)long long v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_685:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v6;
            __int16 v297 = 2048;
            *(void *)long long v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_686:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v6;
            __int16 v297 = 2048;
            *(void *)long long v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_687:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v16;
            __int16 v297 = 2048;
            *(void *)long long v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_688:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v16;
            __int16 v297 = 2048;
            *(void *)long long v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_689:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_690:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v14;
            __int16 v297 = 2048;
            *(void *)long long v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_691:
            uint64_t v287 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v301 = 136315906;
            *(void *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            __int16 v302 = 2048;
            unint64_t v303 = v14;
            __int16 v304 = 2048;
            unint64_t v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_692:
            uint64_t v287 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v301 = 136315906;
            *(void *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            __int16 v302 = 2048;
            unint64_t v303 = v14;
            __int16 v304 = 2048;
            unint64_t v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_693:
            uint64_t v287 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v301 = 136315906;
            *(void *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            __int16 v302 = 2048;
            unint64_t v303 = v14;
            __int16 v304 = 2048;
            unint64_t v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_694:
            uint64_t v287 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v301 = 136315906;
            *(void *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            __int16 v302 = 2048;
            unint64_t v303 = v14;
            __int16 v304 = 2048;
            unint64_t v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_695:
            uint64_t v287 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)uint64_t v301 = 136315906;
            *(void *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            __int16 v302 = 2048;
            unint64_t v303 = v14;
            __int16 v304 = 2048;
            unint64_t v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_696:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v15;
            __int16 v297 = 2048;
            *(void *)long long v298 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_697:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v15;
            __int16 v297 = 2048;
            *(void *)long long v298 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_698:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v15;
            __int16 v297 = 2048;
            *(void *)long long v298 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_699;
          }
          v281[v14] = 1;
          if ((v40 & 1) == 0)
          {
            uint64_t v42 = 0;
            unint64_t v5 = v290;
            long long v43 = v292;
            unint64_t v6 = v284;
            uint64_t v44 = v286;
            while (v5 != v42)
            {
              unint64_t v4 = v43[v42];
              if (v6 <= v4) {
                goto LABEL_517;
              }
              *(_DWORD *)(v44 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
              if (v39 == ++v42) {
                goto LABEL_92;
              }
            }
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v5;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_517:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v4;
            __int16 v297 = 2048;
            *(void *)long long v298 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_518:
            *(void *)float32x4_t v293 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)simd_float4 v296 = 136315906;
            *(void *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(void *)&v296[20] = v5;
            __int16 v297 = 2048;
            *(void *)long long v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_519;
          }
        }
LABEL_92:
        ++v14;
      }
      while (v14 != v16);
      if (v288 && v292) {
        (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
      }
LABEL_96:
      if (*(void *)&v299[1] && v300) {
        (*(void (**)(void, uint64_t **))(**(void **)&v299[1] + 40))(*(void *)&v299[1], v300);
      }
      *(void *)&v299[2] = 0;
      memset(v299, 0, 28);
      v292 = 0;
      uint64_t v289 = 0;
      unint64_t v290 = 0;
      uint64_t v288 = 0;
      int v291 = 0;
      unsigned int v45 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      unsigned int v46 = v45;
      if (v45)
      {
        uint64_t v15 = v279;
        if (v279 <= v45 - 1) {
          goto LABEL_696;
        }
        LODWORD(v47) = 0;
        int v48 = v281;
        uint64_t v49 = v45;
        do
        {
          int v50 = *v48++;
          unint64_t v47 = (v47 + v50);
          --v49;
        }
        while (v49);
      }
      else
      {
        unint64_t v47 = 0;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        unint64_t v14 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
        unint64_t v17 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
      }
      else
      {
        unint64_t v17 = 0;
        unint64_t v14 = 0;
      }
      re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v299, v47);
      uint64_t v15 = v46;
      re::DynamicArray<unsigned int>::resize(&v288, v46, &re::kInvalidMeshIndex);
      if (v46)
      {
        unint64_t v16 = 0;
        unsigned int v100 = 0;
        do
        {
          unint64_t v4 = v279;
          if (v279 <= v16) {
            goto LABEL_626;
          }
          if (v281[v16])
          {
            unint64_t v4 = v290;
            if (v290 <= v16) {
              goto LABEL_651;
            }
            v292[v16] = v100;
            if (v17 <= v16)
            {
LABEL_652:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v16;
              __int16 v297 = 2048;
              *(void *)long long v298 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_653:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v5;
              __int16 v297 = 2048;
              *(void *)long long v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_654:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v16;
              __int16 v297 = 2048;
              *(void *)long long v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_655:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v16;
              __int16 v297 = 2048;
              *(void *)long long v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_656:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v17;
              __int16 v297 = 2048;
              *(void *)long long v298 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_657:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v17;
              __int16 v297 = 2048;
              *(void *)long long v298 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_658:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v16;
              __int16 v297 = 2048;
              *(void *)long long v298 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_659:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v16;
              __int16 v297 = 2048;
              *(void *)long long v298 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_660:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v17;
              __int16 v297 = 2048;
              *(void *)long long v298 = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_661:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v17;
              __int16 v297 = 2048;
              *(void *)long long v298 = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_662:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v5;
              __int16 v297 = 2048;
              *(void *)long long v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_663:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v5;
              __int16 v297 = 2048;
              *(void *)long long v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_664:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v4;
              __int16 v297 = 2048;
              *(void *)long long v298 = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_665:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v4;
              __int16 v297 = 2048;
              *(void *)long long v298 = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_666:
              *(void *)float32x4_t v293 = 0;
              long long v309 = 0u;
              long long v310 = 0u;
              long long v307 = 0u;
              long long v308 = 0u;
              long long v306 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)simd_float4 v296 = 136315906;
              *(void *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(void *)&v296[20] = v14;
              __int16 v297 = 2048;
              *(void *)long long v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_667;
            }
            unint64_t v5 = v100;
            unint64_t v4 = *(void *)&v299[1];
            if (*(void *)&v299[1] <= (unint64_t)v100) {
              goto LABEL_653;
            }
            *(_OWORD *)(*(void *)&v299[2] + 16 * v100++) = *(_OWORD *)v14;
          }
          ++v16;
          v14 += 16;
        }
        while (v15 != v16);
        unint64_t v16 = 0;
        unint64_t v17 = v279;
        __int16 v101 = v281;
        unint64_t v5 = v284;
        uint64_t v102 = v286;
        unint64_t v14 = v290;
        StringID v103 = v292;
        while (v17 != v16)
        {
          if (!v101[v16])
          {
            if (v5 <= v16) {
              goto LABEL_668;
            }
            unint64_t v6 = *(unsigned int *)(v102 + 4 * v16);
            if (v14 <= v6) {
              goto LABEL_669;
            }
            if (v14 <= v16) {
              goto LABEL_670;
            }
            v103[v16] = v103[v6];
          }
          if (v15 == ++v16) {
            goto LABEL_257;
          }
        }
        goto LABEL_632;
      }
LABEL_257:
      unint64_t v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v99);
      uint64_t v15 = *(void *)&v299[1];
      unint64_t v6 = *(void *)(v16 + 24);
      unint64_t v14 = v6;
      *(void *)&v298[2] = 0;
      memset(v296, 0, sizeof(v296));
      re::DynamicArray<re::GeomCell4>::resize(v296, v6);
      if (!v6) {
        goto LABEL_267;
      }
      uint64_t v104 = 0;
      unint64_t v17 = *(void *)&v296[16];
      uint64_t v105 = *(void *)&v298[2];
      unint64_t v5 = *(void *)(v16 + 24);
      uint64_t v106 = *(void *)(v16 + 40);
      unint64_t v7 = v290;
      while (2)
      {
        if (v104 == v17) {
          goto LABEL_641;
        }
        if (v104 == v5)
        {
LABEL_642:
          *(void *)uint64_t v301 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v293 = 136315906;
          *(void *)&v293[4] = "operator[]";
          *(_WORD *)&v293[12] = 1024;
          *(_DWORD *)&v293[14] = 797;
          *(_WORD *)&v293[18] = 2048;
          *(void *)&v293[20] = v5;
          __int16 v294 = 2048;
          *(void *)float32x4_t v295 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_643:
          *(void *)uint64_t v301 = 0;
          long long v309 = 0u;
          long long v310 = 0u;
          long long v307 = 0u;
          long long v308 = 0u;
          long long v306 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v293 = 136315906;
          *(void *)&v293[4] = "operator[]";
          *(_WORD *)&v293[12] = 1024;
          *(_DWORD *)&v293[14] = 789;
          *(_WORD *)&v293[18] = 2048;
          *(void *)&v293[20] = v17;
          __int16 v294 = 2048;
          *(void *)float32x4_t v295 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_644;
        }
        uint64_t v107 = 0;
        *(_OWORD *)uint64_t v301 = *(_OWORD *)(v106 + 16 * v104);
        int v108 = v292;
        if (*(_DWORD *)&v301[12] == -1) {
          uint64_t v109 = 3;
        }
        else {
          uint64_t v109 = 4;
        }
        while (2)
        {
          unint64_t v4 = *(unsigned int *)&v301[4 * v107];
          if (v7 <= v4)
          {
            uint64_t v273 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v293 = 136315906;
            *(void *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(void *)&v293[20] = v4;
            __int16 v294 = 2048;
            *(void *)float32x4_t v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_452:
            uint64_t v273 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v293 = 136315906;
            *(void *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(void *)&v293[20] = v4;
            __int16 v294 = 2048;
            *(void *)float32x4_t v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_453:
            uint64_t v273 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v293 = 136315906;
            *(void *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(void *)&v293[20] = v4;
            __int16 v294 = 2048;
            *(void *)float32x4_t v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_454:
            uint64_t v273 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v293 = 136315906;
            *(void *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(void *)&v293[20] = v4;
            __int16 v294 = 2048;
            *(void *)float32x4_t v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_455:
            uint64_t v273 = 0;
            long long v309 = 0u;
            long long v310 = 0u;
            long long v307 = 0u;
            long long v308 = 0u;
            long long v306 = 0u;
            uint64_t v12 = (char **)&_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)float32x4_t v293 = 136315906;
            *(void *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(void *)&v293[20] = v4;
            __int16 v294 = 2048;
            *(void *)float32x4_t v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_456:
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
            LOBYTE(v273) = 2;
            int v181 = *(unsigned __int8 *)(v16 + 60);
            if (*(unsigned char *)(v16 + 60))
            {
              if (v181 == 2)
              {
                LOBYTE(v270) = 2;
                unint64_t v271 = v16 + 64;
                long long v272 = xmmword_234361D10;
                goto LABEL_543;
              }
              if (v181 == 1)
              {
                int v182 = *(_DWORD *)(v16 + 48);
                goto LABEL_538;
              }
              goto LABEL_711;
            }
            goto LABEL_460;
          }
          *(_DWORD *)(v105 + 4 * v107++) = v108[v4];
          if (v109 != v107) {
            continue;
          }
          break;
        }
        ++v104;
        v105 += 16;
        if (v104 != v6) {
          continue;
        }
        break;
      }
LABEL_267:
      if (*(_DWORD *)(v16 + 48)) {
        BOOL v110 = *(unsigned char *)(v16 + 60) == 0;
      }
      else {
        BOOL v110 = 1;
      }
      if (v110 && *((_DWORD *)v9 + 10) == v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
        goto LABEL_547;
      }
      *(void *)&v295[2] = 0;
      memset(v293, 0, sizeof(v293));
      re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
      int v113 = *(unsigned __int8 *)(v16 + 60);
      if (v113 == 2) {
        goto LABEL_456;
      }
      if (v113 != 1)
      {
        if (*(unsigned char *)(v16 + 60)) {
          goto LABEL_706;
        }
        LOBYTE(v273) = 0;
        LODWORD(v27re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
LABEL_460:
        int v183 = *(_DWORD *)(v16 + 64);
        LOBYTE(v270) = 0;
        LODWORD(v271) = v183;
        goto LABEL_543;
      }
      int v182 = *(_DWORD *)(v16 + 48);
      if (!v182) {
        goto LABEL_526;
      }
      uint64_t v184 = *(uint64_t **)(v16 + 96);
      uint64_t v185 = *(unsigned int *)(v16 + 52);
      uint64_t v186 = *(void *)(v16 + 80);
      uint64_t v187 = (char *)v184 + 4 * v186;
      LOBYTE(v273) = 1;
      if (v184)
      {
        v188 = (char *)v184 + 4 * v185;
        if (v186 != v185)
        {
          v188 -= 4;
          uint64_t v189 = 4 * v186 - 4 * v185;
          do
          {
            int v191 = *((_DWORD *)v188 + 1);
            v188 += 4;
            int v190 = v191;
            if (!v189) {
              break;
            }
            v189 -= 4;
          }
          while (v190 == -1);
        }
      }
      else
      {
        v188 = 0;
      }
      uint64_t v274 = v184;
      unint64_t v275 = v188;
      uint64_t v276 = v187;
LABEL_538:
      if (v182)
      {
        unint64_t v240 = *(void *)(v16 + 96);
        unint64_t v241 = v240 + 4 * *(void *)(v16 + 80);
        LOBYTE(v270) = 1;
        unint64_t v271 = v240;
        *(void *)&long long v272 = v241;
        *((void *)&v272 + 1) = v241;
      }
      else
      {
        LOBYTE(v270) = 1;
        long long v272 = 0uLL;
        unint64_t v271 = 0;
      }
LABEL_543:
      while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
      {
        unint64_t v16 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v243);
        unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v242);
        unint64_t v4 = *(void *)&v293[16];
        if (*(void *)&v293[16] <= v14) {
          goto LABEL_691;
        }
        *(_DWORD *)(*(void *)&v295[2] + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = HIDWORD(v16);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
      }
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v243);
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v244);
      re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
      if (*(void *)v293 && *(void *)&v295[2]) {
        (*(void (**)(void, void))(**(void **)v293 + 40))(*(void *)v293, *(void *)&v295[2]);
      }
LABEL_547:
      if (!(*((unsigned int (**)(char **))*v12 + 2))(v12)
        || (unint64_t v9 = (re *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0),
            !(*((unsigned int (**)(char **))*v12 + 2))(v12)))
      {
        *(void *)uint64_t v301 = 0;
        long long v309 = 0u;
        long long v310 = 0u;
        long long v307 = 0u;
        long long v308 = 0u;
        long long v306 = 0u;
        uint64_t v12 = (char **)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v293 = 136315906;
        *(void *)&v293[4] = "operator[]";
        *(_WORD *)&v293[12] = 1024;
        *(_DWORD *)&v293[14] = 609;
        *(_WORD *)&v293[18] = 2048;
        *(void *)&v293[20] = 0;
        __int16 v294 = 2048;
        *(void *)float32x4_t v295 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_550:
        int v200 = 0;
        goto LABEL_551;
      }
LABEL_577:
      unint64_t v256 = *(const void **)&v299[2];
      size_t v257 = 16 * v15;
LABEL_606:
      memcpy(v9, v256, v257);
      if (*(void *)v296 && *(void *)&v298[2]) {
        (*(void (**)(void, void))(**(void **)v296 + 40))(*(void *)v296, *(void *)&v298[2]);
      }
      if (v288 && v292) {
        (*(void (**)(uint64_t, _DWORD *))(*(void *)v288 + 40))(v288, v292);
      }
      if (*(void *)&v299[0] && *(void *)&v299[2]) {
        (*(void (**)(void, void))(**(void **)&v299[0] + 40))(*(void *)&v299[0], *(void *)&v299[2]);
      }
      if (v277 && v281) {
        (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v277 + 40))(v277, v281);
      }
      uint64_t result = v282;
      if (v282)
      {
        if (v286) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v282 + 40))(v282, v286);
        }
      }
      return result;
    case 5:
      goto LABEL_17;
    case 6:
      goto LABEL_7;
    case 7:
      goto LABEL_22;
    case 8:
      goto LABEL_12;
    default:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) The attribute is not a continuous (float or vector) type.", "!\"Unreachable code\"", "mergeContinuousFaceVaryingAttributeValues", 564);
      _os_crash();
      __break(1u);
      goto LABEL_702;
  }
}

uint64_t re::mergeDiscreteFaceVaryingAttributeValues(re *this, re::GeomMesh *a2, const char *a3)
{
  unint64_t v8 = this;
  uint64_t v350 = *MEMORY[0x263EF8340];
  unint64_t v9 = (char **)re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), (const char *)a2);
  uint64_t v11 = v9;
  switch(*((unsigned char *)v9 + 17))
  {
    case 0:
      uint64_t result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!result) {
        return result;
      }
      uint64_t v326 = 0;
      uint64_t v323 = 0;
      unint64_t v324 = 0;
      uint64_t v321 = 0;
      uint64_t v322 = 0;
      int v325 = 0;
      uint64_t v318 = 0;
      unint64_t v319 = 0;
      uint64_t v317 = 0;
      int v320 = 0;
      int v13 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v13) {
        goto LABEL_21;
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v13;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_706;
      }
      uint64_t v15 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_706;
      }
      unint64_t v324 = 0;
      int v325 = 1;
      unint64_t v319 = 0;
      int v320 = 1;
      unint64_t v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      uint64_t v16 = 0;
      unint64_t v17 = *(void *)&v337[16];
      uint64_t v18 = *(void *)&v339[2];
      do
      {
        if (v17 == v16)
        {
          *(void *)v331 = 0;
          long long v348 = 0u;
          long long v349 = 0u;
          long long v346 = 0u;
          long long v347 = 0u;
          long long v345 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_595:
          *(void *)v331 = 0;
          long long v348 = 0u;
          long long v349 = 0u;
          long long v346 = 0u;
          long long v347 = 0u;
          long long v345 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_596:
          *(void *)v331 = 0;
          long long v348 = 0u;
          long long v349 = 0u;
          long long v346 = 0u;
          long long v347 = 0u;
          long long v345 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_597:
          *(void *)v331 = 0;
          long long v348 = 0u;
          long long v349 = 0u;
          long long v346 = 0u;
          long long v347 = 0u;
          long long v345 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_598:
          *(void *)v331 = 0;
          long long v348 = 0u;
          long long v349 = 0u;
          long long v346 = 0u;
          long long v347 = 0u;
          long long v345 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_599:
          *(void *)v331 = 0;
          long long v348 = 0u;
          long long v349 = 0u;
          long long v346 = 0u;
          long long v347 = 0u;
          long long v345 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_600:
          *(void *)v331 = 0;
          v19[18] = 0u;
          v19[19] = 0u;
          v19[16] = 0u;
          v19[17] = 0u;
          v19[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v4;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_601:
          *(void *)v331 = 0;
          v31[18] = 0u;
          v31[19] = 0u;
          v31[16] = 0u;
          v31[17] = 0u;
          v31[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v4;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_602:
          *(void *)v331 = 0;
          v43[18] = 0u;
          v43[19] = 0u;
          v43[16] = 0u;
          v43[17] = 0u;
          v43[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v4;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_603:
          *(void *)v331 = 0;
          v55[18] = 0u;
          v55[19] = 0u;
          v55[16] = 0u;
          v55[17] = 0u;
          v55[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v4;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_604:
          *(void *)v331 = 0;
          v67[18] = 0u;
          v67[19] = 0u;
          v67[16] = 0u;
          v67[17] = 0u;
          v67[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v4;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_605:
          *(void *)v331 = 0;
          v79[18] = 0u;
          v79[19] = 0u;
          v79[16] = 0u;
          v79[17] = 0u;
          v79[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v4;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_606:
          *(void *)v331 = 0;
          v19[18] = 0u;
          v19[19] = 0u;
          v19[16] = 0u;
          v19[17] = 0u;
          v19[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_607:
          *(void *)v331 = 0;
          v31[18] = 0u;
          v31[19] = 0u;
          v31[16] = 0u;
          v31[17] = 0u;
          v31[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_608:
          *(void *)v331 = 0;
          v43[18] = 0u;
          v43[19] = 0u;
          v43[16] = 0u;
          v43[17] = 0u;
          v43[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_609:
          *(void *)v331 = 0;
          v55[18] = 0u;
          v55[19] = 0u;
          v55[16] = 0u;
          v55[17] = 0u;
          v55[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_610:
          *(void *)v331 = 0;
          v67[18] = 0u;
          v67[19] = 0u;
          v67[16] = 0u;
          v67[17] = 0u;
          v67[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_611:
          *(void *)v331 = 0;
          v79[18] = 0u;
          v79[19] = 0u;
          v79[16] = 0u;
          v79[17] = 0u;
          v79[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)float32x4_t v334 = 136315906;
          *(void *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(void *)&v334[20] = v17;
          __int16 v335 = 2048;
          *(void *)float32x4_t v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_612:
          *(void *)__int16 v328 = 0;
          v89[18] = 0u;
          v89[19] = 0u;
          v89[16] = 0u;
          v89[17] = 0u;
          v89[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(void *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(void *)&v331[20] = v14;
          __int16 v332 = 2048;
          *(void *)float32x4_t v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_613:
          *(void *)__int16 v328 = 0;
          v109[18] = 0u;
          v109[19] = 0u;
          v109[16] = 0u;
          v109[17] = 0u;
          v109[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(void *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(void *)&v331[20] = v14;
          __int16 v332 = 2048;
          *(void *)float32x4_t v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_614:
          *(void *)__int16 v328 = 0;
          v129[18] = 0u;
          v129[19] = 0u;
          v129[16] = 0u;
          v129[17] = 0u;
          v129[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(void *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(void *)&v331[20] = v14;
          __int16 v332 = 2048;
          *(void *)float32x4_t v333 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_615:
          *(void *)__int16 v328 = 0;
          v146[18] = 0u;
          v146[19] = 0u;
          v146[16] = 0u;
          v146[17] = 0u;
          v146[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(void *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(void *)&v331[20] = v14;
          __int16 v332 = 2048;
          *(void *)float32x4_t v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_616:
          *(void *)__int16 v328 = 0;
          v166[18] = 0u;
          v166[19] = 0u;
          v166[16] = 0u;
          v166[17] = 0u;
          v166[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(void *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(void *)&v331[20] = v14;
          __int16 v332 = 2048;
          *(void *)float32x4_t v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_617:
          *(void *)__int16 v328 = 0;
          v186[18] = 0u;
          v186[19] = 0u;
          v186[16] = 0u;
          v186[17] = 0u;
          v186[15] = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(void *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(void *)&v331[20] = v14;
          __int16 v332 = 2048;
          *(void *)float32x4_t v333 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_618;
        }
        *(_DWORD *)(v18 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v16;
        ++v16;
      }
      while (v14 != v16);
      *(void *)&long long v345 = v15;
      if (!*(void *)&v337[16]) {
        goto LABEL_684;
      }
      unint64_t v5 = **(_DWORD **)&v339[2];
      unint64_t v17 = v319;
      unint64_t v19 = v328;
      if (v319 <= v5) {
        goto LABEL_690;
      }
      unint64_t v4 = 0;
      int v20 = *(unsigned __int16 *)(v15 + 2 * v5);
      v321[v5] = 1;
      do
      {
        unint64_t v17 = *(void *)&v337[16];
        if (*(void *)&v337[16] <= v4) {
          goto LABEL_600;
        }
        unint64_t v17 = *(unsigned int *)(*(void *)&v339[2] + 4 * v4);
        int v21 = *(unsigned __int16 *)(v15 + 2 * v17);
        if (v21 != v20)
        {
          unint64_t v3 = v319;
          if (v319 <= v17) {
            goto LABEL_654;
          }
          v321[v17] = 1;
          unint64_t v5 = v17;
          int v20 = v21;
        }
        unint64_t v3 = v324;
        if (v324 <= v17) {
          goto LABEL_606;
        }
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(void *)v337 && *(void *)&v339[2]) {
        (*(void (**)(void))(**(void **)v337 + 40))();
      }
LABEL_21:
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(void *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      unsigned int v22 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      unsigned int v23 = v22;
      if (v22)
      {
        uint64_t v15 = v319;
        if (v319 > v22 - 1)
        {
          LODWORD(v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
          uint64_t v25 = v321;
          uint64_t v26 = v22;
          do
          {
            int v27 = *v25++;
            unint64_t v24 = (v24 + v27);
            --v26;
          }
          while (v26);
          goto LABEL_147;
        }
LABEL_696:
        *(void *)__int16 v328 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v15;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_697:
        *(void *)__int16 v328 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v15;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_698:
        *(void *)__int16 v328 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v15;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_699:
        *(void *)__int16 v328 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v15;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_700:
        *(void *)__int16 v328 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v15;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_701:
        *(void *)__int16 v328 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v15;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      unint64_t v24 = 0;
LABEL_147:
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        unint64_t v17 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
        unint64_t v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v17 = 0;
      }
      re::DynamicArray<unsigned short>::resize((uint64_t)v337, v24);
      uint64_t v15 = v23;
      re::DynamicArray<unsigned int>::resize(v334, v23, &re::kInvalidMeshIndex);
      int v89 = v328;
      if (v23)
      {
        unint64_t v4 = 0;
        unsigned int v90 = 0;
        unint64_t v14 = v319;
        size_t v91 = v321;
        unint64_t v6 = *(void *)&v334[16];
        uint64_t v92 = *(void *)&v336[2];
        unint64_t v7 = *(void *)&v337[16];
        uint64_t v93 = *(void *)&v339[2];
        do
        {
          if (v14 == v4) {
            goto LABEL_612;
          }
          if (v91[v4])
          {
            if (v6 <= v4) {
              goto LABEL_636;
            }
            *(_DWORD *)(v92 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v90;
            if (v5 <= v4) {
              goto LABEL_642;
            }
            unint64_t v3 = v90;
            if (v7 <= v90) {
              goto LABEL_648;
            }
            *(_WORD *)(v93 + 2 * v90++) = *(_WORD *)(v17 + 2 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        unint64_t v17 = 0;
        unsigned int v94 = v321;
        unint64_t v5 = v324;
        uint64_t v95 = v326;
        unint64_t v4 = *(void *)&v334[16];
        uint64_t v96 = *(void *)&v336[2];
        while (v14 != v17)
        {
          if (!v94[v17])
          {
            if (v5 <= v17) {
              goto LABEL_660;
            }
            unint64_t v6 = *(unsigned int *)(v95 + 4 * v17);
            if (v4 <= v6) {
              goto LABEL_666;
            }
            if (v4 <= v17) {
              goto LABEL_672;
            }
            *(_DWORD *)(v96 + 4 * v17) = *(_DWORD *)(v96 + 4 * v6);
          }
          if (v15 == ++v17) {
            goto LABEL_182;
          }
        }
LABEL_618:
        *(void *)__int16 v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_619:
        *(void *)__int16 v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_620:
        *(void *)__int16 v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_621:
        *(void *)__int16 v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_622:
        *(void *)__int16 v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_623:
        *(void *)__int16 v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_624:
        *(void *)uint64_t v340 = 0;
        v97[18] = 0u;
        v97[19] = 0u;
        v97[16] = 0u;
        v97[17] = 0u;
        v97[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v4;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_625:
        *(void *)uint64_t v340 = 0;
        v117[18] = 0u;
        v117[19] = 0u;
        v117[16] = 0u;
        v117[17] = 0u;
        v117[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v4;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_626:
        *(void *)uint64_t v340 = 0;
        v134[18] = 0u;
        v134[19] = 0u;
        v134[16] = 0u;
        v134[17] = 0u;
        v134[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v4;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_627:
        *(void *)uint64_t v340 = 0;
        v154[18] = 0u;
        v154[19] = 0u;
        v154[16] = 0u;
        v154[17] = 0u;
        v154[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v4;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_628:
        *(void *)uint64_t v340 = 0;
        v174[18] = 0u;
        v174[19] = 0u;
        v174[16] = 0u;
        v174[17] = 0u;
        v174[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v4;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_629:
        *(void *)uint64_t v340 = 0;
        v191[18] = 0u;
        v191[19] = 0u;
        v191[16] = 0u;
        v191[17] = 0u;
        v191[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v4;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_630:
        *(void *)uint64_t v340 = 0;
        v97[18] = 0u;
        v97[19] = 0u;
        v97[16] = 0u;
        v97[17] = 0u;
        v97[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v5;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_631:
        *(void *)uint64_t v340 = 0;
        v117[18] = 0u;
        v117[19] = 0u;
        v117[16] = 0u;
        v117[17] = 0u;
        v117[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v5;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_632:
        *(void *)uint64_t v340 = 0;
        v134[18] = 0u;
        v134[19] = 0u;
        v134[16] = 0u;
        v134[17] = 0u;
        v134[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v5;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_633:
        *(void *)uint64_t v340 = 0;
        v154[18] = 0u;
        v154[19] = 0u;
        v154[16] = 0u;
        v154[17] = 0u;
        v154[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v5;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_634:
        *(void *)uint64_t v340 = 0;
        v174[18] = 0u;
        v174[19] = 0u;
        v174[16] = 0u;
        v174[17] = 0u;
        v174[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v5;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_635:
        *(void *)uint64_t v340 = 0;
        v191[18] = 0u;
        v191[19] = 0u;
        v191[16] = 0u;
        v191[17] = 0u;
        v191[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = v5;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_636:
        *(void *)__int16 v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_637:
        *(void *)__int16 v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_638:
        *(void *)__int16 v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_639:
        *(void *)__int16 v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_640:
        *(void *)__int16 v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_641:
        *(void *)__int16 v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_642:
        *(void *)__int16 v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_643:
        *(void *)__int16 v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_644:
        *(void *)__int16 v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_645:
        *(void *)__int16 v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_646:
        *(void *)__int16 v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v4;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_647:
        *(void *)__int16 v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_648:
        *(void *)__int16 v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v3;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_649:
        *(void *)__int16 v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v3;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_650:
        *(void *)__int16 v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v5;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_651:
        *(void *)__int16 v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v3;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_652:
        *(void *)__int16 v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v3;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_653:
        *(void *)__int16 v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v5;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_654:
        *(void *)v331 = 0;
        v19[18] = 0u;
        v19[19] = 0u;
        v19[16] = 0u;
        v19[17] = 0u;
        v19[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v17;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_655:
        *(void *)v331 = 0;
        v31[18] = 0u;
        v31[19] = 0u;
        v31[16] = 0u;
        v31[17] = 0u;
        v31[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v17;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_656:
        *(void *)v331 = 0;
        v43[18] = 0u;
        v43[19] = 0u;
        v43[16] = 0u;
        v43[17] = 0u;
        v43[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v17;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_657:
        *(void *)v331 = 0;
        v55[18] = 0u;
        v55[19] = 0u;
        v55[16] = 0u;
        v55[17] = 0u;
        v55[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v17;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_658:
        *(void *)v331 = 0;
        v67[18] = 0u;
        v67[19] = 0u;
        v67[16] = 0u;
        v67[17] = 0u;
        v67[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v17;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_659:
        *(void *)v331 = 0;
        v79[18] = 0u;
        v79[19] = 0u;
        v79[16] = 0u;
        v79[17] = 0u;
        v79[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v17;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_660:
        *(void *)__int16 v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_661:
        *(void *)__int16 v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_662:
        *(void *)__int16 v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_663:
        *(void *)__int16 v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_664:
        *(void *)__int16 v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_665:
        *(void *)__int16 v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_666:
        *(void *)__int16 v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v6;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_667:
        *(void *)__int16 v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v6;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_668:
        *(void *)__int16 v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v6;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_669:
        *(void *)__int16 v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v6;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_670:
        *(void *)__int16 v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v6;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_671:
        *(void *)__int16 v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v6;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_672:
        *(void *)__int16 v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_673:
        *(void *)__int16 v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_674:
        *(void *)__int16 v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_675:
        *(void *)__int16 v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_676:
        *(void *)__int16 v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v17;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_677:
        *(void *)__int16 v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(void *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(void *)&v331[20] = v14;
        __int16 v332 = 2048;
        *(void *)float32x4_t v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_678:
        uint64_t v327 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v340 = 136315906;
        *(void *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        __int16 v341 = 2048;
        unint64_t v342 = v17;
        __int16 v343 = 2048;
        unint64_t v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_679:
        uint64_t v327 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v340 = 136315906;
        *(void *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        __int16 v341 = 2048;
        unint64_t v342 = v17;
        __int16 v343 = 2048;
        unint64_t v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_680:
        uint64_t v327 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v340 = 136315906;
        *(void *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        __int16 v341 = 2048;
        unint64_t v342 = v17;
        __int16 v343 = 2048;
        unint64_t v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_681:
        uint64_t v327 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v340 = 136315906;
        *(void *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        __int16 v341 = 2048;
        unint64_t v342 = v17;
        __int16 v343 = 2048;
        unint64_t v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_682:
        uint64_t v327 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v340 = 136315906;
        *(void *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        __int16 v341 = 2048;
        unint64_t v342 = v17;
        __int16 v343 = 2048;
        unint64_t v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_683:
        uint64_t v327 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v340 = 136315906;
        *(void *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        __int16 v341 = 2048;
        unint64_t v342 = v17;
        __int16 v343 = 2048;
        unint64_t v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_684:
        *(void *)v331 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = 0;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_685:
        *(void *)v331 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = 0;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_686:
        *(void *)v331 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = 0;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_687:
        *(void *)v331 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = 0;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_688:
        *(void *)v331 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = 0;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_689:
        *(void *)v331 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = 0;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_690:
        *(void *)v331 = 0;
        v19[18] = 0u;
        v19[19] = 0u;
        v19[16] = 0u;
        v19[17] = 0u;
        v19[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v5;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_691:
        *(void *)v331 = 0;
        v31[18] = 0u;
        v31[19] = 0u;
        v31[16] = 0u;
        v31[17] = 0u;
        v31[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v5;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_692:
        *(void *)v331 = 0;
        v43[18] = 0u;
        v43[19] = 0u;
        v43[16] = 0u;
        v43[17] = 0u;
        v43[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v5;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_693:
        *(void *)v331 = 0;
        v55[18] = 0u;
        v55[19] = 0u;
        v55[16] = 0u;
        v55[17] = 0u;
        v55[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v5;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_694:
        *(void *)v331 = 0;
        v67[18] = 0u;
        v67[19] = 0u;
        v67[16] = 0u;
        v67[17] = 0u;
        v67[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v5;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_695:
        *(void *)v331 = 0;
        v79[18] = 0u;
        v79[19] = 0u;
        v79[16] = 0u;
        v79[17] = 0u;
        v79[15] = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)float32x4_t v334 = 136315906;
        *(void *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(void *)&v334[20] = v5;
        __int16 v335 = 2048;
        *(void *)float32x4_t v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_696;
      }
LABEL_182:
      unint64_t v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v88);
      uint64_t v15 = *(void *)&v337[16];
      unint64_t v6 = *(void *)(v14 + 24);
      unint64_t v17 = v6;
      *(void *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      uint64_t v97 = v328;
      if (!v6) {
        goto LABEL_192;
      }
      uint64_t v98 = 0;
      unint64_t v4 = *(void *)&v331[16];
      uint64_t v99 = *(void *)&v333[2];
      unint64_t v5 = *(void *)(v14 + 24);
      uint64_t v100 = *(void *)(v14 + 40);
      unint64_t v7 = *(void *)&v334[16];
      while (2)
      {
        if (v98 == v4) {
          goto LABEL_624;
        }
        if (v98 == v5) {
          goto LABEL_630;
        }
        uint64_t v101 = 0;
        *(_OWORD *)uint64_t v340 = *(_OWORD *)(v100 + 16 * v98);
        uint64_t v102 = *(void *)&v336[2];
        if (*(_DWORD *)&v340[12] == -1) {
          uint64_t v103 = 3;
        }
        else {
          uint64_t v103 = 4;
        }
        while (2)
        {
          unint64_t v3 = *(unsigned int *)&v340[4 * v101];
          if (v7 <= v3)
          {
            uint64_t v313 = 0;
            long long v348 = 0u;
            long long v349 = 0u;
            long long v346 = 0u;
            long long v347 = 0u;
            long long v345 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v328 = 136315906;
            *(void *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(void *)&v328[20] = v3;
            __int16 v329 = 2048;
            *(void *)float32x4_t v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_405:
            uint64_t v313 = 0;
            v117[18] = 0u;
            v117[19] = 0u;
            v117[16] = 0u;
            v117[17] = 0u;
            v117[15] = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v328 = 136315906;
            *(void *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(void *)&v328[20] = v3;
            __int16 v329 = 2048;
            *(void *)float32x4_t v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_406:
            uint64_t v313 = 0;
            v134[18] = 0u;
            v134[19] = 0u;
            v134[16] = 0u;
            v134[17] = 0u;
            v134[15] = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v328 = 136315906;
            *(void *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(void *)&v328[20] = v3;
            __int16 v329 = 2048;
            *(void *)float32x4_t v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_407:
            uint64_t v313 = 0;
            v154[18] = 0u;
            v154[19] = 0u;
            v154[16] = 0u;
            v154[17] = 0u;
            v154[15] = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v328 = 136315906;
            *(void *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(void *)&v328[20] = v3;
            __int16 v329 = 2048;
            *(void *)float32x4_t v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_408:
            uint64_t v313 = 0;
            v174[18] = 0u;
            v174[19] = 0u;
            v174[16] = 0u;
            v174[17] = 0u;
            v174[15] = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v328 = 136315906;
            *(void *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(void *)&v328[20] = v3;
            __int16 v329 = 2048;
            *(void *)float32x4_t v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_409:
            uint64_t v313 = 0;
            v191[18] = 0u;
            v191[19] = 0u;
            v191[16] = 0u;
            v191[17] = 0u;
            v191[15] = 0u;
            uint64_t v11 = (char **)&_os_log_internal;
            unint64_t v8 = (re *)v328;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v328 = 136315906;
            *(void *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(void *)&v328[20] = v3;
            __int16 v329 = 2048;
            *(void *)float32x4_t v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_410:
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
            LOBYTE(v313) = 2;
            int v203 = *(unsigned __int8 *)(v14 + 60);
            if (!*(unsigned char *)(v14 + 60)) {
              goto LABEL_414;
            }
            if (v203 == 2)
            {
              LOBYTE(v310) = 2;
              unint64_t v311 = v14 + 64;
              long long v312 = xmmword_234361D10;
              goto LABEL_501;
            }
            if (v203 != 1) {
              goto LABEL_718;
            }
            int v204 = *(_DWORD *)(v14 + 48);
            goto LABEL_496;
          }
          *(_DWORD *)(v99 + 4 * v101++) = *(_DWORD *)(v102 + 4 * v3);
          if (v103 != v101) {
            continue;
          }
          break;
        }
        ++v98;
        v99 += 16;
        if (v98 != v6) {
          continue;
        }
        break;
      }
LABEL_192:
      if (*(_DWORD *)(v14 + 48)) {
        BOOL v104 = *(unsigned char *)(v14 + 60) == 0;
      }
      else {
        BOOL v104 = 1;
      }
      if (v104 && *((_DWORD *)v8 + 10) == v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
        goto LABEL_505;
      }
      *(void *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      int v107 = *(unsigned __int8 *)(v14 + 60);
      if (v107 == 2) {
        goto LABEL_410;
      }
      if (v107 != 1)
      {
        if (!*(unsigned char *)(v14 + 60))
        {
          LOBYTE(v313) = 0;
          LODWORD(v31re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
LABEL_414:
          int v205 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v205;
          goto LABEL_501;
        }
LABEL_712:
        re::internal::assertLog((re::internal *)4, v106, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_713:
        re::internal::assertLog((re::internal *)4, v126, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_714:
        re::internal::assertLog((re::internal *)4, v143, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_715:
        re::internal::assertLog((re::internal *)4, v163, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_716:
        re::internal::assertLog((re::internal *)4, v183, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_717:
        re::internal::assertLog((re::internal *)4, v200, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_718:
        re::internal::assertLog((re::internal *)4, v202, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_719:
        re::internal::assertLog((re::internal *)4, v214, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_720:
        re::internal::assertLog((re::internal *)4, v226, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_721:
        re::internal::assertLog((re::internal *)4, v238, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_722:
        re::internal::assertLog((re::internal *)4, v250, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_723:
        re::internal::assertLog((re::internal *)4, v262, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
        JUMPOUT(0x233A6F864);
      }
      int v204 = *(_DWORD *)(v14 + 48);
      if (v204)
      {
        int v206 = *(uint64_t **)(v14 + 96);
        uint64_t v207 = *(unsigned int *)(v14 + 52);
        uint64_t v208 = *(void *)(v14 + 80);
        uint64_t v209 = (char *)v206 + 4 * v208;
        LOBYTE(v313) = 1;
        if (v206)
        {
          uint64_t v210 = (char *)v206 + 4 * v207;
          if (v208 != v207)
          {
            v210 -= 4;
            uint64_t v211 = 4 * v208 - 4 * v207;
            do
            {
              int v213 = *((_DWORD *)v210 + 1);
              v210 += 4;
              int v212 = v213;
              if (!v211) {
                break;
              }
              v211 -= 4;
            }
            while (v212 == -1);
          }
        }
        else
        {
          uint64_t v210 = 0;
        }
        v314 = v206;
        simd_float4 v315 = v210;
        simd_float4 v316 = v209;
      }
      else
      {
        LOBYTE(v313) = 1;
        simd_float4 v315 = 0;
        simd_float4 v316 = 0;
        v314 = 0;
      }
LABEL_496:
      if (v204)
      {
        unint64_t v274 = *(void *)(v14 + 96);
        unint64_t v275 = v274 + 4 * *(void *)(v14 + 80);
        LOBYTE(v310) = 1;
        unint64_t v311 = v274;
        *(void *)&long long v312 = v275;
        *((void *)&v312 + 1) = v275;
      }
      else
      {
        LOBYTE(v310) = 1;
        long long v312 = 0uLL;
        unint64_t v311 = 0;
      }
LABEL_501:
      while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
      {
        unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v277);
        unint64_t v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v276);
        unint64_t v3 = *(void *)&v328[16];
        if (*(void *)&v328[16] <= v17) {
          goto LABEL_678;
        }
        *(_DWORD *)(*(void *)&v330[2] + 4 * v17) = HIDWORD(v14);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
      }
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v277);
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v278);
      re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
      if (*(void *)v328 && *(void *)&v330[2]) {
        (*(void (**)(void, void))(**(void **)v328 + 40))(*(void *)v328, *(void *)&v330[2]);
      }
LABEL_505:
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)
        || (unint64_t v279 = (void *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0),
            !(*((unsigned int (**)(char **))*v11 + 2))(v11)))
      {
        *(void *)uint64_t v340 = 0;
        unint64_t v8 = (re *)v328;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        uint64_t v11 = (char **)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = 0;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_508:
        uint64_t v222 = 0;
        goto LABEL_509;
      }
LABEL_521:
      uint64_t v286 = *(const void **)&v339[2];
      size_t v287 = 2 * v15;
LABEL_578:
      memcpy(v279, v286, v287);
      if (*(void *)v331 && *(void *)&v333[2]) {
        (*(void (**)(void, void))(**(void **)v331 + 40))(*(void *)v331, *(void *)&v333[2]);
      }
      if (*(void *)v334 && *(void *)&v336[2]) {
        (*(void (**)(void, void))(**(void **)v334 + 40))(*(void *)v334, *(void *)&v336[2]);
      }
      if (*(void *)v337 && *(void *)&v339[2]) {
        (*(void (**)(void, void))(**(void **)v337 + 40))(*(void *)v337, *(void *)&v339[2]);
      }
      if (v317 && v321) {
        (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v317 + 40))(v317, v321);
      }
      uint64_t result = v322;
      if (v322)
      {
        if (v326) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v322 + 40))(v322, v326);
        }
      }
      return result;
    case 1:
      uint64_t result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!result) {
        return result;
      }
      uint64_t v326 = 0;
      uint64_t v323 = 0;
      unint64_t v324 = 0;
      uint64_t v321 = 0;
      uint64_t v322 = 0;
      int v325 = 0;
      uint64_t v318 = 0;
      unint64_t v319 = 0;
      uint64_t v317 = 0;
      int v320 = 0;
      int v28 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v28) {
        goto LABEL_45;
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v28;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_707;
      }
      uint64_t v15 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_707;
      }
      unint64_t v324 = 0;
      int v325 = 1;
      unint64_t v319 = 0;
      int v320 = 1;
      unint64_t v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      uint64_t v29 = 0;
      unint64_t v17 = *(void *)&v337[16];
      uint64_t v30 = *(void *)&v339[2];
      do
      {
        if (v17 == v29) {
          goto LABEL_595;
        }
        *(_DWORD *)(v30 + 4 * v29) = v29;
        ++v29;
      }
      while (v14 != v29);
      *(void *)&long long v345 = v15;
      if (!*(void *)&v337[16]) {
        goto LABEL_685;
      }
      unint64_t v5 = **(_DWORD **)&v339[2];
      unint64_t v17 = v319;
      uint64_t v31 = v328;
      if (v319 <= v5) {
        goto LABEL_691;
      }
      unint64_t v4 = 0;
      int v32 = *(unsigned __int16 *)(v15 + 2 * v5);
      v321[v5] = 1;
      do
      {
        unint64_t v17 = *(void *)&v337[16];
        if (*(void *)&v337[16] <= v4) {
          goto LABEL_601;
        }
        unint64_t v17 = *(unsigned int *)(*(void *)&v339[2] + 4 * v4);
        int v33 = *(unsigned __int16 *)(v15 + 2 * v17);
        if (v33 != v32)
        {
          unint64_t v3 = v319;
          if (v319 <= v17) {
            goto LABEL_655;
          }
          v321[v17] = 1;
          unint64_t v5 = v17;
          int v32 = v33;
        }
        unint64_t v3 = v324;
        if (v324 <= v17) {
          goto LABEL_607;
        }
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(void *)v337 && *(void *)&v339[2]) {
        (*(void (**)(void))(**(void **)v337 + 40))();
      }
LABEL_45:
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(void *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      unsigned int v34 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      unsigned int v35 = v34;
      if (v34)
      {
        uint64_t v15 = v319;
        if (v319 <= v34 - 1) {
          goto LABEL_697;
        }
        LODWORD(v36) = 0;
        unint64_t v37 = v321;
        uint64_t v38 = v34;
        do
        {
          int v39 = *v37++;
          unint64_t v36 = (v36 + v39);
          --v38;
        }
        while (v38);
      }
      else
      {
        unint64_t v36 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        unint64_t v17 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
        unint64_t v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v17 = 0;
      }
      re::DynamicArray<unsigned short>::resize((uint64_t)v337, v36);
      uint64_t v15 = v35;
      re::DynamicArray<unsigned int>::resize(v334, v35, &re::kInvalidMeshIndex);
      uint64_t v109 = v328;
      if (v35)
      {
        unint64_t v4 = 0;
        unsigned int v110 = 0;
        unint64_t v14 = v319;
        float32x4_t v111 = v321;
        unint64_t v6 = *(void *)&v334[16];
        uint64_t v112 = *(void *)&v336[2];
        unint64_t v7 = *(void *)&v337[16];
        uint64_t v113 = *(void *)&v339[2];
        do
        {
          if (v14 == v4) {
            goto LABEL_613;
          }
          if (v111[v4])
          {
            if (v6 <= v4) {
              goto LABEL_637;
            }
            *(_DWORD *)(v112 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v110;
            if (v5 <= v4) {
              goto LABEL_643;
            }
            unint64_t v3 = v110;
            if (v7 <= v110) {
              goto LABEL_649;
            }
            *(_WORD *)(v113 + 2 * v110++) = *(_WORD *)(v17 + 2 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        unint64_t v17 = 0;
        float32x4_t v114 = v321;
        unint64_t v5 = v324;
        uint64_t v115 = v326;
        unint64_t v4 = *(void *)&v334[16];
        uint64_t v116 = *(void *)&v336[2];
        do
        {
          if (v14 == v17) {
            goto LABEL_619;
          }
          if (!v114[v17])
          {
            if (v5 <= v17) {
              goto LABEL_661;
            }
            unint64_t v6 = *(unsigned int *)(v115 + 4 * v17);
            if (v4 <= v6) {
              goto LABEL_667;
            }
            if (v4 <= v17) {
              goto LABEL_673;
            }
            *(_DWORD *)(v116 + 4 * v17) = *(_DWORD *)(v116 + 4 * v6);
          }
          ++v17;
        }
        while (v15 != v17);
      }
      unint64_t v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v108);
      uint64_t v15 = *(void *)&v337[16];
      unint64_t v6 = *(void *)(v14 + 24);
      unint64_t v17 = v6;
      *(void *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      uint64_t v117 = v328;
      if (v6)
      {
        uint64_t v118 = 0;
        unint64_t v4 = *(void *)&v331[16];
        uint64_t v119 = *(void *)&v333[2];
        unint64_t v5 = *(void *)(v14 + 24);
        uint64_t v120 = *(void *)(v14 + 40);
        unint64_t v7 = *(void *)&v334[16];
        do
        {
          if (v118 == v4) {
            goto LABEL_625;
          }
          if (v118 == v5) {
            goto LABEL_631;
          }
          uint64_t v121 = 0;
          *(_OWORD *)uint64_t v340 = *(_OWORD *)(v120 + 16 * v118);
          uint64_t v122 = *(void *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1) {
            uint64_t v123 = 3;
          }
          else {
            uint64_t v123 = 4;
          }
          do
          {
            unint64_t v3 = *(unsigned int *)&v340[4 * v121];
            if (v7 <= v3) {
              goto LABEL_405;
            }
            *(_DWORD *)(v119 + 4 * v121++) = *(_DWORD *)(v122 + 4 * v3);
          }
          while (v123 != v121);
          ++v118;
          v119 += 16;
        }
        while (v118 != v6);
      }
      if (*(_DWORD *)(v14 + 48)) {
        BOOL v124 = *(unsigned char *)(v14 + 60) == 0;
      }
      else {
        BOOL v124 = 1;
      }
      if (v124 && *((_DWORD *)v8 + 10) == v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
      }
      else
      {
        *(void *)&v330[2] = 0;
        memset(v328, 0, sizeof(v328));
        re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
        int v127 = *(unsigned __int8 *)(v14 + 60);
        if (v127 == 2)
        {
          re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
          LOBYTE(v313) = 2;
          int v215 = *(unsigned __int8 *)(v14 + 60);
          if (!*(unsigned char *)(v14 + 60)) {
            goto LABEL_426;
          }
          if (v215 == 2)
          {
            LOBYTE(v310) = 2;
            unint64_t v311 = v14 + 64;
            long long v312 = xmmword_234361D10;
            goto LABEL_515;
          }
          if (v215 != 1) {
            goto LABEL_719;
          }
          int v216 = *(_DWORD *)(v14 + 48);
        }
        else
        {
          if (v127 != 1)
          {
            if (*(unsigned char *)(v14 + 60)) {
              goto LABEL_713;
            }
            LOBYTE(v313) = 0;
            LODWORD(v31re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
LABEL_426:
            int v217 = *(_DWORD *)(v14 + 64);
            LOBYTE(v310) = 0;
            LODWORD(v311) = v217;
            goto LABEL_515;
          }
          int v216 = *(_DWORD *)(v14 + 48);
          if (v216)
          {
            int v218 = *(uint64_t **)(v14 + 96);
            uint64_t v219 = *(unsigned int *)(v14 + 52);
            uint64_t v220 = *(void *)(v14 + 80);
            uint64_t v221 = (char *)v218 + 4 * v220;
            LOBYTE(v313) = 1;
            if (!v218) {
              goto LABEL_508;
            }
            uint64_t v222 = (char *)v218 + 4 * v219;
            if (v220 != v219)
            {
              v222 -= 4;
              uint64_t v223 = 4 * v220 - 4 * v219;
              do
              {
                int v225 = *((_DWORD *)v222 + 1);
                v222 += 4;
                int v224 = v225;
                if (!v223) {
                  break;
                }
                v223 -= 4;
              }
              while (v224 == -1);
            }
LABEL_509:
            v314 = v218;
            simd_float4 v315 = v222;
            simd_float4 v316 = v221;
          }
          else
          {
            LOBYTE(v313) = 1;
            simd_float4 v315 = 0;
            simd_float4 v316 = 0;
            v314 = 0;
          }
        }
        if (v216)
        {
          unint64_t v280 = *(void *)(v14 + 96);
          unint64_t v281 = v280 + 4 * *(void *)(v14 + 80);
          LOBYTE(v310) = 1;
          unint64_t v311 = v280;
          *(void *)&long long v312 = v281;
          *((void *)&v312 + 1) = v281;
        }
        else
        {
          LOBYTE(v310) = 1;
          long long v312 = 0uLL;
          unint64_t v311 = 0;
        }
LABEL_515:
        while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
        {
          int v282 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v284) >> 32;
          unint64_t v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v283);
          unint64_t v3 = *(void *)&v328[16];
          if (*(void *)&v328[16] <= v17) {
            goto LABEL_679;
          }
          *(_DWORD *)(*(void *)&v330[2] + 4 * v17) = v282;
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
        }
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v284);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v285);
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
        if (*(void *)v328 && *(void *)&v330[2]) {
          (*(void (**)(void, void))(**(void **)v328 + 40))(*(void *)v328, *(void *)&v330[2]);
        }
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        unint64_t v279 = (void *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
        if ((*((unsigned int (**)(char **))*v11 + 2))(v11)) {
          goto LABEL_521;
        }
      }
LABEL_703:
      *(void *)uint64_t v340 = 0;
      long long v348 = 0u;
      long long v349 = 0u;
      long long v346 = 0u;
      long long v347 = 0u;
      long long v345 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)__int16 v328 = 136315906;
      *(void *)&v328[4] = "operator[]";
      *(_WORD *)&v328[12] = 1024;
      *(_DWORD *)&v328[14] = 609;
      *(_WORD *)&v328[18] = 2048;
      *(void *)&v328[20] = 0;
      __int16 v329 = 2048;
      *(void *)float32x4_t v330 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_704;
    case 2:
      uint64_t result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!result) {
        return result;
      }
      uint64_t v326 = 0;
      uint64_t v323 = 0;
      unint64_t v324 = 0;
      uint64_t v321 = 0;
      uint64_t v322 = 0;
      int v325 = 0;
      uint64_t v318 = 0;
      unint64_t v319 = 0;
      uint64_t v317 = 0;
      int v320 = 0;
      int v52 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v52) {
        goto LABEL_93;
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v52;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_709;
      }
      uint64_t v15 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_709;
      }
      unint64_t v324 = 0;
      int v325 = 1;
      unint64_t v319 = 0;
      int v320 = 1;
      unint64_t v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      uint64_t v53 = 0;
      unint64_t v17 = *(void *)&v337[16];
      uint64_t v54 = *(void *)&v339[2];
      do
      {
        if (v17 == v53) {
          goto LABEL_597;
        }
        *(_DWORD *)(v54 + 4 * v53) = v53;
        ++v53;
      }
      while (v14 != v53);
      *(void *)&long long v345 = v15;
      if (!*(void *)&v337[16]) {
        goto LABEL_687;
      }
      unint64_t v5 = **(_DWORD **)&v339[2];
      unint64_t v17 = v319;
      float32x4_t v55 = v328;
      if (v319 <= v5) {
        goto LABEL_693;
      }
      unint64_t v4 = 0;
      int v56 = *(_DWORD *)(v15 + 4 * v5);
      v321[v5] = 1;
      do
      {
        unint64_t v17 = *(void *)&v337[16];
        if (*(void *)&v337[16] <= v4) {
          goto LABEL_603;
        }
        unint64_t v17 = *(unsigned int *)(*(void *)&v339[2] + 4 * v4);
        int v57 = *(_DWORD *)(v15 + 4 * v17);
        if (v57 != v56)
        {
          unint64_t v3 = v319;
          if (v319 <= v17) {
            goto LABEL_657;
          }
          v321[v17] = 1;
          unint64_t v5 = v17;
          int v56 = v57;
        }
        unint64_t v3 = v324;
        if (v324 <= v17) {
          goto LABEL_609;
        }
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(void *)v337 && *(void *)&v339[2]) {
        (*(void (**)(void))(**(void **)v337 + 40))();
      }
LABEL_93:
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(void *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      unsigned int v58 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      unsigned int v59 = v58;
      if (v58)
      {
        uint64_t v15 = v319;
        if (v319 <= v58 - 1) {
          goto LABEL_699;
        }
        LODWORD(v60) = 0;
        uint64_t v61 = v321;
        uint64_t v62 = v58;
        do
        {
          int v63 = *v61++;
          unint64_t v60 = (v60 + v63);
          --v62;
        }
        while (v62);
      }
      else
      {
        unint64_t v60 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        unint64_t v17 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
        unint64_t v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v17 = 0;
      }
      re::DynamicArray<float>::resize((uint64_t)v337, v60);
      uint64_t v15 = v59;
      re::DynamicArray<unsigned int>::resize(v334, v59, &re::kInvalidMeshIndex);
      unint64_t v146 = v328;
      if (v59)
      {
        unint64_t v4 = 0;
        unsigned int v147 = 0;
        unint64_t v14 = v319;
        uint64_t v148 = v321;
        unint64_t v6 = *(void *)&v334[16];
        uint64_t v149 = *(void *)&v336[2];
        unint64_t v7 = *(void *)&v337[16];
        uint64_t v150 = *(void *)&v339[2];
        do
        {
          if (v14 == v4) {
            goto LABEL_615;
          }
          if (v148[v4])
          {
            if (v6 <= v4) {
              goto LABEL_639;
            }
            *(_DWORD *)(v149 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v147;
            if (v5 <= v4) {
              goto LABEL_645;
            }
            unint64_t v3 = v147;
            if (v7 <= v147) {
              goto LABEL_651;
            }
            *(_DWORD *)(v150 + 4 * v147++) = *(_DWORD *)(v17 + 4 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        unint64_t v17 = 0;
        unsigned int v151 = v321;
        unint64_t v5 = v324;
        uint64_t v152 = v326;
        unint64_t v4 = *(void *)&v334[16];
        uint64_t v153 = *(void *)&v336[2];
        do
        {
          if (v14 == v17) {
            goto LABEL_621;
          }
          if (!v151[v17])
          {
            if (v5 <= v17) {
              goto LABEL_663;
            }
            unint64_t v6 = *(unsigned int *)(v152 + 4 * v17);
            if (v4 <= v6) {
              goto LABEL_669;
            }
            if (v4 <= v17) {
              goto LABEL_675;
            }
            *(_DWORD *)(v153 + 4 * v17) = *(_DWORD *)(v153 + 4 * v6);
          }
          ++v17;
        }
        while (v15 != v17);
      }
      unint64_t v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v145);
      uint64_t v15 = *(void *)&v337[16];
      unint64_t v6 = *(void *)(v14 + 24);
      unint64_t v17 = v6;
      *(void *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      uint64_t v154 = v328;
      if (v6)
      {
        uint64_t v155 = 0;
        unint64_t v4 = *(void *)&v331[16];
        uint64_t v156 = *(void *)&v333[2];
        unint64_t v5 = *(void *)(v14 + 24);
        uint64_t v157 = *(void *)(v14 + 40);
        unint64_t v7 = *(void *)&v334[16];
        do
        {
          if (v155 == v4) {
            goto LABEL_627;
          }
          if (v155 == v5) {
            goto LABEL_633;
          }
          uint64_t v158 = 0;
          *(_OWORD *)uint64_t v340 = *(_OWORD *)(v157 + 16 * v155);
          uint64_t v159 = *(void *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1) {
            uint64_t v160 = 3;
          }
          else {
            uint64_t v160 = 4;
          }
          do
          {
            unint64_t v3 = *(unsigned int *)&v340[4 * v158];
            if (v7 <= v3) {
              goto LABEL_407;
            }
            *(_DWORD *)(v156 + 4 * v158++) = *(_DWORD *)(v159 + 4 * v3);
          }
          while (v160 != v158);
          ++v155;
          v156 += 16;
        }
        while (v155 != v6);
      }
      if (*(_DWORD *)(v14 + 48)) {
        BOOL v161 = *(unsigned char *)(v14 + 60) == 0;
      }
      else {
        BOOL v161 = 1;
      }
      if (v161 && *((_DWORD *)v8 + 10) == v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
LABEL_547:
        if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
        {
          unint64_t v279 = (void *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v11, 0);
          if ((*((unsigned int (**)(char **))*v11 + 2))(v11)) {
            goto LABEL_563;
          }
        }
        *(void *)uint64_t v340 = 0;
        unint64_t v8 = (re *)v328;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        uint64_t v11 = (char **)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = 0;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_550;
      }
      *(void *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      int v164 = *(unsigned __int8 *)(v14 + 60);
      if (v164 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        int v239 = *(unsigned __int8 *)(v14 + 60);
        if (!*(unsigned char *)(v14 + 60))
        {
LABEL_450:
          int v241 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v241;
LABEL_543:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v296);
            unint64_t v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v295);
            unint64_t v3 = *(void *)&v328[16];
            if (*(void *)&v328[16] <= v17) {
              goto LABEL_681;
            }
            *(_DWORD *)(*(void *)&v330[2] + 4 * v17) = HIDWORD(v14);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v296);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v297);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(void *)v328 && *(void *)&v330[2]) {
            (*(void (**)(void, void))(**(void **)v328 + 40))(*(void *)v328, *(void *)&v330[2]);
          }
          goto LABEL_547;
        }
        if (v239 == 2)
        {
          LOBYTE(v310) = 2;
          unint64_t v311 = v14 + 64;
          long long v312 = xmmword_234361D10;
          goto LABEL_543;
        }
        if (v239 != 1) {
          goto LABEL_721;
        }
        int v240 = *(_DWORD *)(v14 + 48);
LABEL_538:
        if (v240)
        {
          unint64_t v293 = *(void *)(v14 + 96);
          unint64_t v294 = v293 + 4 * *(void *)(v14 + 80);
          LOBYTE(v310) = 1;
          unint64_t v311 = v293;
          *(void *)&long long v312 = v294;
          *((void *)&v312 + 1) = v294;
        }
        else
        {
          LOBYTE(v310) = 1;
          long long v312 = 0uLL;
          unint64_t v311 = 0;
        }
        goto LABEL_543;
      }
      if (v164 != 1)
      {
        if (*(unsigned char *)(v14 + 60)) {
          goto LABEL_715;
        }
        LOBYTE(v313) = 0;
        LODWORD(v31re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
        goto LABEL_450;
      }
      int v240 = *(_DWORD *)(v14 + 48);
      if (!v240)
      {
        LOBYTE(v313) = 1;
        simd_float4 v315 = 0;
        simd_float4 v316 = 0;
        v314 = 0;
        goto LABEL_538;
      }
      uint64_t v242 = *(uint64_t **)(v14 + 96);
      uint64_t v243 = *(unsigned int *)(v14 + 52);
      uint64_t v244 = *(void *)(v14 + 80);
      unint64_t v245 = (char *)v242 + 4 * v244;
      LOBYTE(v313) = 1;
      if (!v242) {
        goto LABEL_536;
      }
      unint64_t v246 = (char *)v242 + 4 * v243;
      if (v244 != v243)
      {
        v246 -= 4;
        uint64_t v247 = 4 * v244 - 4 * v243;
        do
        {
          int v249 = *((_DWORD *)v246 + 1);
          v246 += 4;
          int v248 = v249;
          if (!v247) {
            break;
          }
          v247 -= 4;
        }
        while (v248 == -1);
      }
      goto LABEL_537;
    case 3:
      uint64_t result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!result) {
        return result;
      }
      uint64_t v326 = 0;
      uint64_t v323 = 0;
      unint64_t v324 = 0;
      uint64_t v321 = 0;
      uint64_t v322 = 0;
      int v325 = 0;
      uint64_t v318 = 0;
      unint64_t v319 = 0;
      uint64_t v317 = 0;
      int v320 = 0;
      int v64 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v64) {
        goto LABEL_117;
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v64;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_710;
      }
      uint64_t v15 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_710;
      }
      unint64_t v324 = 0;
      int v325 = 1;
      unint64_t v319 = 0;
      int v320 = 1;
      unint64_t v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      uint64_t v65 = 0;
      unint64_t v17 = *(void *)&v337[16];
      uint64_t v66 = *(void *)&v339[2];
      do
      {
        if (v17 == v65) {
          goto LABEL_598;
        }
        *(_DWORD *)(v66 + 4 * v65) = v65;
        ++v65;
      }
      while (v14 != v65);
      *(void *)&long long v345 = v15;
      if (!*(void *)&v337[16]) {
        goto LABEL_688;
      }
      unint64_t v5 = **(_DWORD **)&v339[2];
      unint64_t v17 = v319;
      __int16 v67 = v328;
      if (v319 <= v5) {
        goto LABEL_694;
      }
      unint64_t v4 = 0;
      int v68 = *(_DWORD *)(v15 + 4 * v5);
      v321[v5] = 1;
      do
      {
        unint64_t v17 = *(void *)&v337[16];
        if (*(void *)&v337[16] <= v4) {
          goto LABEL_604;
        }
        unint64_t v17 = *(unsigned int *)(*(void *)&v339[2] + 4 * v4);
        int v69 = *(_DWORD *)(v15 + 4 * v17);
        if (v69 != v68)
        {
          unint64_t v3 = v319;
          if (v319 <= v17) {
            goto LABEL_658;
          }
          v321[v17] = 1;
          unint64_t v5 = v17;
          int v68 = v69;
        }
        unint64_t v3 = v324;
        if (v324 <= v17) {
          goto LABEL_610;
        }
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(void *)v337 && *(void *)&v339[2]) {
        (*(void (**)(void))(**(void **)v337 + 40))();
      }
LABEL_117:
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(void *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      unsigned int v70 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      unsigned int v71 = v70;
      if (v70)
      {
        uint64_t v15 = v319;
        if (v319 <= v70 - 1) {
          goto LABEL_700;
        }
        LODWORD(v72) = 0;
        uint64_t v73 = v321;
        uint64_t v74 = v70;
        do
        {
          int v75 = *v73++;
          unint64_t v72 = (v72 + v75);
          --v74;
        }
        while (v74);
      }
      else
      {
        unint64_t v72 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        unint64_t v17 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
        unint64_t v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v17 = 0;
      }
      re::DynamicArray<float>::resize((uint64_t)v337, v72);
      uint64_t v15 = v71;
      re::DynamicArray<unsigned int>::resize(v334, v71, &re::kInvalidMeshIndex);
      uint64_t v166 = v328;
      if (v71)
      {
        unint64_t v4 = 0;
        unsigned int v167 = 0;
        unint64_t v14 = v319;
        uint64_t v168 = v321;
        unint64_t v6 = *(void *)&v334[16];
        uint64_t v169 = *(void *)&v336[2];
        unint64_t v7 = *(void *)&v337[16];
        uint64_t v170 = *(void *)&v339[2];
        do
        {
          if (v14 == v4) {
            goto LABEL_616;
          }
          if (v168[v4])
          {
            if (v6 <= v4) {
              goto LABEL_640;
            }
            *(_DWORD *)(v169 + 4 * vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v167;
            if (v5 <= v4) {
              goto LABEL_646;
            }
            unint64_t v3 = v167;
            if (v7 <= v167) {
              goto LABEL_652;
            }
            *(_DWORD *)(v170 + 4 * v167++) = *(_DWORD *)(v17 + 4 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        unint64_t v17 = 0;
        uint64_t v171 = v321;
        unint64_t v5 = v324;
        uint64_t v172 = v326;
        unint64_t v4 = *(void *)&v334[16];
        uint64_t v173 = *(void *)&v336[2];
        do
        {
          if (v14 == v17) {
            goto LABEL_622;
          }
          if (!v171[v17])
          {
            if (v5 <= v17) {
              goto LABEL_664;
            }
            unint64_t v6 = *(unsigned int *)(v172 + 4 * v17);
            if (v4 <= v6) {
              goto LABEL_670;
            }
            if (v4 <= v17) {
              goto LABEL_676;
            }
            *(_DWORD *)(v173 + 4 * v17) = *(_DWORD *)(v173 + 4 * v6);
          }
          ++v17;
        }
        while (v15 != v17);
      }
      unint64_t v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v165);
      uint64_t v15 = *(void *)&v337[16];
      unint64_t v6 = *(void *)(v14 + 24);
      unint64_t v17 = v6;
      *(void *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      unsigned int v174 = v328;
      if (v6)
      {
        uint64_t v175 = 0;
        unint64_t v4 = *(void *)&v331[16];
        uint64_t v176 = *(void *)&v333[2];
        unint64_t v5 = *(void *)(v14 + 24);
        uint64_t v177 = *(void *)(v14 + 40);
        unint64_t v7 = *(void *)&v334[16];
        do
        {
          if (v175 == v4) {
            goto LABEL_628;
          }
          if (v175 == v5) {
            goto LABEL_634;
          }
          uint64_t v178 = 0;
          *(_OWORD *)uint64_t v340 = *(_OWORD *)(v177 + 16 * v175);
          uint64_t v179 = *(void *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1) {
            uint64_t v180 = 3;
          }
          else {
            uint64_t v180 = 4;
          }
          do
          {
            unint64_t v3 = *(unsigned int *)&v340[4 * v178];
            if (v7 <= v3) {
              goto LABEL_408;
            }
            *(_DWORD *)(v176 + 4 * v178++) = *(_DWORD *)(v179 + 4 * v3);
          }
          while (v180 != v178);
          ++v175;
          v176 += 16;
        }
        while (v175 != v6);
      }
      if (*(_DWORD *)(v14 + 48)) {
        BOOL v181 = *(unsigned char *)(v14 + 60) == 0;
      }
      else {
        BOOL v181 = 1;
      }
      if (v181 && *((_DWORD *)v8 + 10) == v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
LABEL_561:
        if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
        {
          unint64_t v279 = (void *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v11, 0);
          if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
          {
LABEL_563:
            uint64_t v286 = *(const void **)&v339[2];
            size_t v287 = 4 * v15;
            goto LABEL_578;
          }
        }
LABEL_704:
        *(void *)uint64_t v340 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = 0;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_705:
        *(void *)uint64_t v340 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)__int16 v328 = 136315906;
        *(void *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(void *)&v328[20] = 0;
        __int16 v329 = 2048;
        *(void *)float32x4_t v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_706:
        *(void *)float32x4_t v334 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v337 = 136315906;
        *(void *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(void *)&v337[20] = 0;
        __int16 v338 = 2048;
        *(void *)int v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_707:
        *(void *)float32x4_t v334 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v337 = 136315906;
        *(void *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(void *)&v337[20] = 0;
        __int16 v338 = 2048;
        *(void *)int v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_708:
        *(void *)float32x4_t v334 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v337 = 136315906;
        *(void *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(void *)&v337[20] = 0;
        __int16 v338 = 2048;
        *(void *)int v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_709:
        *(void *)float32x4_t v334 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v337 = 136315906;
        *(void *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(void *)&v337[20] = 0;
        __int16 v338 = 2048;
        *(void *)int v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_710:
        *(void *)float32x4_t v334 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v337 = 136315906;
        *(void *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(void *)&v337[20] = 0;
        __int16 v338 = 2048;
        *(void *)int v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_711:
        *(void *)float32x4_t v334 = 0;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v345 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)unint64_t v337 = 136315906;
        *(void *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(void *)&v337[20] = 0;
        __int16 v338 = 2048;
        *(void *)int v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_712;
      }
      *(void *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      int v184 = *(unsigned __int8 *)(v14 + 60);
      if (v184 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        int v251 = *(unsigned __int8 *)(v14 + 60);
        if (*(unsigned char *)(v14 + 60))
        {
          if (v251 != 2)
          {
            if (v251 != 1) {
              goto LABEL_722;
            }
            int v252 = *(_DWORD *)(v14 + 48);
            goto LABEL_552;
          }
          LOBYTE(v310) = 2;
          unint64_t v311 = v14 + 64;
          long long v312 = xmmword_234361D10;
LABEL_557:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            int v300 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v302) >> 32;
            unint64_t v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v301);
            unint64_t v3 = *(void *)&v328[16];
            if (*(void *)&v328[16] <= v17) {
              goto LABEL_682;
            }
            *(_DWORD *)(*(void *)&v330[2] + 4 * v17) = v300;
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v302);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v303);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(void *)v328 && *(void *)&v330[2]) {
            (*(void (**)(void, void))(**(void **)v328 + 40))(*(void *)v328, *(void *)&v330[2]);
          }
          goto LABEL_561;
        }
      }
      else
      {
        if (v184 == 1)
        {
          int v252 = *(_DWORD *)(v14 + 48);
          if (!v252)
          {
            LOBYTE(v313) = 1;
            simd_float4 v315 = 0;
            simd_float4 v316 = 0;
            v314 = 0;
            goto LABEL_552;
          }
          uint64_t v254 = *(uint64_t **)(v14 + 96);
          uint64_t v255 = *(unsigned int *)(v14 + 52);
          uint64_t v256 = *(void *)(v14 + 80);
          size_t v257 = (char *)v254 + 4 * v256;
          LOBYTE(v313) = 1;
          if (v254)
          {
            unint64_t v258 = (char *)v254 + 4 * v255;
            if (v256 != v255)
            {
              v258 -= 4;
              uint64_t v259 = 4 * v256 - 4 * v255;
              do
              {
                int v261 = *((_DWORD *)v258 + 1);
                v258 += 4;
                int v260 = v261;
                if (!v259) {
                  break;
                }
                v259 -= 4;
              }
              while (v260 == -1);
            }
            goto LABEL_551;
          }
LABEL_550:
          unint64_t v258 = 0;
LABEL_551:
          v314 = v254;
          simd_float4 v315 = v258;
          simd_float4 v316 = v257;
LABEL_552:
          if (v252)
          {
            unint64_t v298 = *(void *)(v14 + 96);
            unint64_t v299 = v298 + 4 * *(void *)(v14 + 80);
            LOBYTE(v310) = 1;
            unint64_t v311 = v298;
            *(void *)&long long v312 = v299;
            *((void *)&v312 + 1) = v299;
          }
          else
          {
            LOBYTE(v310) = 1;
            long long v312 = 0uLL;
            unint64_t v311 = 0;
          }
          goto LABEL_557;
        }
        if (*(unsigned char *)(v14 + 60)) {
          goto LABEL_716;
        }
        LOBYTE(v313) = 0;
        LODWORD(v31re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      }
      int v253 = *(_DWORD *)(v14 + 64);
      LOBYTE(v310) = 0;
      LODWORD(v311) = v253;
      goto LABEL_557;
    case 9:
      uint64_t result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!result) {
        return result;
      }
      uint64_t v326 = 0;
      uint64_t v323 = 0;
      unint64_t v324 = 0;
      uint64_t v321 = 0;
      uint64_t v322 = 0;
      int v325 = 0;
      uint64_t v318 = 0;
      unint64_t v319 = 0;
      uint64_t v317 = 0;
      int v320 = 0;
      int v40 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v40) {
        goto LABEL_69;
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v40;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_708;
      }
      uint64_t v15 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_708;
      }
      unint64_t v324 = 0;
      int v325 = 1;
      unint64_t v319 = 0;
      int v320 = 1;
      unint64_t v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      uint64_t v41 = 0;
      unint64_t v17 = *(void *)&v337[16];
      uint64_t v42 = *(void *)&v339[2];
      do
      {
        if (v17 == v41) {
          goto LABEL_596;
        }
        *(_DWORD *)(v42 + 4 * v41) = v41;
        ++v41;
      }
      while (v14 != v41);
      *(void *)&long long v345 = v15;
      if (!*(void *)&v337[16]) {
        goto LABEL_686;
      }
      unint64_t v5 = **(_DWORD **)&v339[2];
      unint64_t v17 = v319;
      long long v43 = v328;
      if (v319 <= v5) {
        goto LABEL_692;
      }
      unint64_t v4 = 0;
      int v44 = *(unsigned __int8 *)(v15 + v5);
      v321[v5] = 1;
      do
      {
        unint64_t v17 = *(void *)&v337[16];
        if (*(void *)&v337[16] <= v4) {
          goto LABEL_602;
        }
        unint64_t v17 = *(unsigned int *)(*(void *)&v339[2] + 4 * v4);
        int v45 = *(unsigned __int8 *)(v15 + v17);
        if (v45 != v44)
        {
          unint64_t v3 = v319;
          if (v319 <= v17) {
            goto LABEL_656;
          }
          v321[v17] = 1;
          unint64_t v5 = v17;
          int v44 = v45;
        }
        unint64_t v3 = v324;
        if (v324 <= v17) {
          goto LABEL_608;
        }
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(void *)v337 && *(void *)&v339[2]) {
        (*(void (**)(void))(**(void **)v337 + 40))();
      }
LABEL_69:
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(void *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      unsigned int v46 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      unsigned int v47 = v46;
      if (v46)
      {
        uint64_t v15 = v319;
        if (v319 <= v46 - 1) {
          goto LABEL_698;
        }
        LODWORD(v48) = 0;
        uint64_t v49 = v321;
        uint64_t v50 = v46;
        do
        {
          int v51 = *v49++;
          unint64_t v48 = (v48 + v51);
          --v50;
        }
        while (v50);
      }
      else
      {
        unint64_t v48 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        unint64_t v17 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
        unint64_t v4 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v17 = 0;
      }
      re::DynamicArray<BOOL>::resize((uint64_t)v337, v48);
      uint64_t v15 = v47;
      re::DynamicArray<unsigned int>::resize(v334, v47, &re::kInvalidMeshIndex);
      uint64_t v129 = v328;
      if (v47)
      {
        unint64_t v14 = 0;
        unsigned int v130 = 0;
        do
        {
          unint64_t v3 = v319;
          if (v319 <= v14) {
            goto LABEL_614;
          }
          if (v321[v14])
          {
            unint64_t v3 = *(void *)&v334[16];
            if (*(void *)&v334[16] <= v14) {
              goto LABEL_638;
            }
            *(_DWORD *)(*(void *)&v336[2] + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v130;
            if (v4 <= v14) {
              goto LABEL_644;
            }
            unint64_t v5 = v130;
            unint64_t v3 = *(void *)&v337[16];
            if (*(void *)&v337[16] <= (unint64_t)v130) {
              goto LABEL_650;
            }
            *(unsigned char *)(*(void *)&v339[2] + v130++) = *(unsigned char *)(v17 + v14);
          }
          ++v14;
        }
        while (v15 != v14);
        unint64_t v14 = 0;
        unint64_t v4 = v319;
        float32x4_t v131 = v321;
        unint64_t v5 = v324;
        uint64_t v132 = v326;
        unint64_t v17 = *(void *)&v334[16];
        uint64_t v133 = *(void *)&v336[2];
        do
        {
          if (v4 == v14) {
            goto LABEL_620;
          }
          if (!v131[v14])
          {
            if (v5 <= v14) {
              goto LABEL_662;
            }
            unint64_t v6 = *(unsigned int *)(v132 + 4 * v14);
            if (v17 <= v6) {
              goto LABEL_668;
            }
            if (v17 <= v14) {
              goto LABEL_674;
            }
            *(_DWORD *)(v133 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_DWORD *)(v133 + 4 * v6);
          }
          ++v14;
        }
        while (v15 != v14);
      }
      unint64_t v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v128);
      uint64_t v15 = *(void *)&v337[16];
      unint64_t v6 = *(void *)(v14 + 24);
      unint64_t v17 = v6;
      *(void *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      uint64_t v134 = v328;
      if (v6)
      {
        uint64_t v135 = 0;
        unint64_t v4 = *(void *)&v331[16];
        uint64_t v136 = *(void *)&v333[2];
        unint64_t v5 = *(void *)(v14 + 24);
        uint64_t v137 = *(void *)(v14 + 40);
        unint64_t v7 = *(void *)&v334[16];
        do
        {
          if (v135 == v4) {
            goto LABEL_626;
          }
          if (v135 == v5) {
            goto LABEL_632;
          }
          uint64_t v138 = 0;
          *(_OWORD *)uint64_t v340 = *(_OWORD *)(v137 + 16 * v135);
          uint64_t v139 = *(void *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1) {
            uint64_t v140 = 3;
          }
          else {
            uint64_t v140 = 4;
          }
          do
          {
            unint64_t v3 = *(unsigned int *)&v340[4 * v138];
            if (v7 <= v3) {
              goto LABEL_406;
            }
            *(_DWORD *)(v136 + 4 * v138++) = *(_DWORD *)(v139 + 4 * v3);
          }
          while (v140 != v138);
          ++v135;
          v136 += 16;
        }
        while (v135 != v6);
      }
      if (*(_DWORD *)(v14 + 48)) {
        BOOL v141 = *(unsigned char *)(v14 + 60) == 0;
      }
      else {
        BOOL v141 = 1;
      }
      if (v141 && *((_DWORD *)v8 + 10) == v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
        goto LABEL_533;
      }
      *(void *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      int v144 = *(unsigned __int8 *)(v14 + 60);
      if (v144 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        int v227 = *(unsigned __int8 *)(v14 + 60);
        if (!*(unsigned char *)(v14 + 60))
        {
LABEL_438:
          int v229 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v229;
LABEL_529:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            unint64_t v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v291);
            unint64_t v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v290);
            unint64_t v3 = *(void *)&v328[16];
            if (*(void *)&v328[16] <= v17) {
              goto LABEL_680;
            }
            *(_DWORD *)(*(void *)&v330[2] + 4 * v17) = HIDWORD(v14);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v291);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v292);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(void *)v328 && *(void *)&v330[2]) {
            (*(void (**)(void))(**(void **)v328 + 40))();
          }
LABEL_533:
          if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)
            || (unint64_t v279 = (void *)re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0),
                !(*((unsigned int (**)(char **))*v11 + 2))(v11)))
          {
            *(void *)uint64_t v340 = 0;
            unint64_t v8 = (re *)v328;
            long long v348 = 0u;
            long long v349 = 0u;
            long long v346 = 0u;
            long long v347 = 0u;
            long long v345 = 0u;
            uint64_t v11 = (char **)&_os_log_internal;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            *(_DWORD *)__int16 v328 = 136315906;
            *(void *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 609;
            *(_WORD *)&v328[18] = 2048;
            *(void *)&v328[20] = 0;
            __int16 v329 = 2048;
            *(void *)float32x4_t v330 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_536:
            unint64_t v246 = 0;
LABEL_537:
            v314 = v242;
            simd_float4 v315 = v246;
            simd_float4 v316 = v245;
            goto LABEL_538;
          }
LABEL_577:
          size_t v287 = v15;
          uint64_t v286 = *(const void **)&v339[2];
          goto LABEL_578;
        }
        if (v227 == 2)
        {
          LOBYTE(v310) = 2;
          unint64_t v311 = v14 + 64;
          long long v312 = xmmword_234361D10;
          goto LABEL_529;
        }
        if (v227 != 1) {
          goto LABEL_720;
        }
        int v228 = *(_DWORD *)(v14 + 48);
      }
      else
      {
        if (v144 != 1)
        {
          if (*(unsigned char *)(v14 + 60)) {
            goto LABEL_714;
          }
          LOBYTE(v313) = 0;
          LODWORD(v31re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
          goto LABEL_438;
        }
        int v228 = *(_DWORD *)(v14 + 48);
        if (v228)
        {
          int v230 = *(uint64_t **)(v14 + 96);
          uint64_t v231 = *(unsigned int *)(v14 + 52);
          uint64_t v232 = *(void *)(v14 + 80);
          uint64_t v233 = (char *)v230 + 4 * v232;
          LOBYTE(v313) = 1;
          if (v230)
          {
            uint64_t v234 = (char *)v230 + 4 * v231;
            if (v232 != v231)
            {
              v234 -= 4;
              uint64_t v235 = 4 * v232 - 4 * v231;
              do
              {
                int v237 = *((_DWORD *)v234 + 1);
                v234 += 4;
                int v236 = v237;
                if (!v235) {
                  break;
                }
                v235 -= 4;
              }
              while (v236 == -1);
            }
          }
          else
          {
            uint64_t v234 = 0;
          }
          v314 = v230;
          simd_float4 v315 = v234;
          simd_float4 v316 = v233;
        }
        else
        {
          LOBYTE(v313) = 1;
          simd_float4 v315 = 0;
          simd_float4 v316 = 0;
          v314 = 0;
        }
      }
      if (v228)
      {
        unint64_t v288 = *(void *)(v14 + 96);
        unint64_t v289 = v288 + 4 * *(void *)(v14 + 80);
        LOBYTE(v310) = 1;
        unint64_t v311 = v288;
        *(void *)&long long v312 = v289;
        *((void *)&v312 + 1) = v289;
      }
      else
      {
        LOBYTE(v310) = 1;
        long long v312 = 0uLL;
        unint64_t v311 = 0;
      }
      goto LABEL_529;
    case 0xA:
      uint64_t result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!result) {
        return result;
      }
      uint64_t v326 = 0;
      uint64_t v323 = 0;
      unint64_t v324 = 0;
      uint64_t v321 = 0;
      uint64_t v322 = 0;
      int v325 = 0;
      uint64_t v318 = 0;
      unint64_t v319 = 0;
      uint64_t v317 = 0;
      int v320 = 0;
      int v76 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v76) {
        goto LABEL_141;
      }
      LODWORD(v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v76;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_711;
      }
      uint64_t v15 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
        goto LABEL_711;
      }
      unint64_t v324 = 0;
      int v325 = 1;
      unint64_t v319 = 0;
      int v320 = 1;
      unint64_t v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      uint64_t v77 = 0;
      unint64_t v17 = *(void *)&v337[16];
      uint64_t v78 = *(void *)&v339[2];
      do
      {
        if (v17 == v77) {
          goto LABEL_599;
        }
        *(_DWORD *)(v78 + 4 * v77) = v77;
        ++v77;
      }
      while (v14 != v77);
      *(void *)&long long v345 = v15;
      if (!*(void *)&v337[16]) {
        goto LABEL_689;
      }
      unint64_t v5 = **(_DWORD **)&v339[2];
      unint64_t v17 = v319;
      __int16 v79 = v328;
      if (v319 <= v5) {
        goto LABEL_695;
      }
      unint64_t v4 = 0;
      int v80 = *(unsigned __int8 *)(v15 + v5);
      v321[v5] = 1;
      do
      {
        unint64_t v17 = *(void *)&v337[16];
        if (*(void *)&v337[16] <= v4) {
          goto LABEL_605;
        }
        unint64_t v17 = *(unsigned int *)(*(void *)&v339[2] + 4 * v4);
        int v81 = *(unsigned __int8 *)(v15 + v17);
        if (v81 != v80)
        {
          unint64_t v3 = v319;
          if (v319 <= v17) {
            goto LABEL_659;
          }
          v321[v17] = 1;
          unint64_t v5 = v17;
          int v80 = v81;
        }
        unint64_t v3 = v324;
        if (v324 <= v17) {
          goto LABEL_611;
        }
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(void *)v337 && *(void *)&v339[2]) {
        (*(void (**)(void))(**(void **)v337 + 40))();
      }
LABEL_141:
      *(void *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(void *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      unsigned int v82 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      unsigned int v83 = v82;
      if (v82)
      {
        uint64_t v15 = v319;
        if (v319 <= v82 - 1) {
          goto LABEL_701;
        }
        LODWORD(v8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
        uint64_t v85 = v321;
        uint64_t v86 = v82;
        do
        {
          int v87 = *v85++;
          unint64_t v84 = (v84 + v87);
          --v86;
        }
        while (v86);
      }
      else
      {
        unint64_t v84 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        unint64_t v17 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
        unint64_t v4 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        unint64_t v4 = 0;
        unint64_t v17 = 0;
      }
      re::DynamicArray<BOOL>::resize((uint64_t)v337, v84);
      uint64_t v15 = v83;
      re::DynamicArray<unsigned int>::resize(v334, v83, &re::kInvalidMeshIndex);
      uint64_t v186 = v328;
      if (v83)
      {
        unint64_t v14 = 0;
        unsigned int v187 = 0;
        do
        {
          unint64_t v3 = v319;
          if (v319 <= v14) {
            goto LABEL_617;
          }
          if (v321[v14])
          {
            unint64_t v3 = *(void *)&v334[16];
            if (*(void *)&v334[16] <= v14) {
              goto LABEL_641;
            }
            *(_DWORD *)(*(void *)&v336[2] + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v187;
            if (v4 <= v14) {
              goto LABEL_647;
            }
            unint64_t v5 = v187;
            unint64_t v3 = *(void *)&v337[16];
            if (*(void *)&v337[16] <= (unint64_t)v187) {
              goto LABEL_653;
            }
            *(unsigned char *)(*(void *)&v339[2] + v187++) = *(unsigned char *)(v17 + v14);
          }
          ++v14;
        }
        while (v15 != v14);
        unint64_t v14 = 0;
        unint64_t v4 = v319;
        v188 = v321;
        unint64_t v5 = v324;
        uint64_t v189 = v326;
        unint64_t v17 = *(void *)&v334[16];
        uint64_t v190 = *(void *)&v336[2];
        do
        {
          if (v4 == v14) {
            goto LABEL_623;
          }
          if (!v188[v14])
          {
            if (v5 <= v14) {
              goto LABEL_665;
            }
            unint64_t v6 = *(unsigned int *)(v189 + 4 * v14);
            if (v17 <= v6) {
              goto LABEL_671;
            }
            if (v17 <= v14) {
              goto LABEL_677;
            }
            *(_DWORD *)(v190 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(_DWORD *)(v190 + 4 * v6);
          }
          ++v14;
        }
        while (v15 != v14);
      }
      unint64_t v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v185);
      uint64_t v15 = *(void *)&v337[16];
      unint64_t v6 = *(void *)(v14 + 24);
      unint64_t v17 = v6;
      *(void *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      int v191 = v328;
      if (v6)
      {
        uint64_t v192 = 0;
        unint64_t v4 = *(void *)&v331[16];
        uint64_t v193 = *(void *)&v333[2];
        unint64_t v5 = *(void *)(v14 + 24);
        uint64_t v194 = *(void *)(v14 + 40);
        unint64_t v7 = *(void *)&v334[16];
        do
        {
          if (v192 == v4) {
            goto LABEL_629;
          }
          if (v192 == v5) {
            goto LABEL_635;
          }
          uint64_t v195 = 0;
          *(_OWORD *)uint64_t v340 = *(_OWORD *)(v194 + 16 * v192);
          uint64_t v196 = *(void *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1) {
            uint64_t v197 = 3;
          }
          else {
            uint64_t v197 = 4;
          }
          do
          {
            unint64_t v3 = *(unsigned int *)&v340[4 * v195];
            if (v7 <= v3) {
              goto LABEL_409;
            }
            *(_DWORD *)(v193 + 4 * v195++) = *(_DWORD *)(v196 + 4 * v3);
          }
          while (v197 != v195);
          ++v192;
          v193 += 16;
        }
        while (v192 != v6);
      }
      if (*(_DWORD *)(v14 + 48)) {
        BOOL v198 = *(unsigned char *)(v14 + 60) == 0;
      }
      else {
        BOOL v198 = 1;
      }
      if (v198 && *((_DWORD *)v8 + 10) == v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
        goto LABEL_575;
      }
      *(void *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      int v201 = *(unsigned __int8 *)(v14 + 60);
      if (v201 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        int v263 = *(unsigned __int8 *)(v14 + 60);
        if (!*(unsigned char *)(v14 + 60))
        {
LABEL_474:
          int v265 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v265;
LABEL_571:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            int v306 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v308) >> 32;
            unint64_t v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v307);
            unint64_t v3 = *(void *)&v328[16];
            if (*(void *)&v328[16] <= v17) {
              goto LABEL_683;
            }
            *(_DWORD *)(*(void *)&v330[2] + 4 * v17) = v306;
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v308);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v309);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(void *)v328 && *(void *)&v330[2]) {
            (*(void (**)(void))(**(void **)v328 + 40))();
          }
LABEL_575:
          if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
            goto LABEL_705;
          }
          unint64_t v279 = (void *)re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
          if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)) {
            goto LABEL_705;
          }
          goto LABEL_577;
        }
        if (v263 == 2)
        {
          LOBYTE(v310) = 2;
          unint64_t v311 = v14 + 64;
          long long v312 = xmmword_234361D10;
          goto LABEL_571;
        }
        if (v263 != 1) {
          goto LABEL_723;
        }
        int v264 = *(_DWORD *)(v14 + 48);
      }
      else
      {
        if (v201 != 1)
        {
          if (*(unsigned char *)(v14 + 60)) {
            goto LABEL_717;
          }
          LOBYTE(v313) = 0;
          LODWORD(v31re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
          goto LABEL_474;
        }
        int v264 = *(_DWORD *)(v14 + 48);
        if (v264)
        {
          int v266 = *(uint64_t **)(v14 + 96);
          uint64_t v267 = *(unsigned int *)(v14 + 52);
          uint64_t v268 = *(void *)(v14 + 80);
          uint64_t v269 = (char *)v266 + 4 * v268;
          LOBYTE(v313) = 1;
          if (v266)
          {
            uint64_t v270 = (char *)v266 + 4 * v267;
            if (v268 != v267)
            {
              v270 -= 4;
              uint64_t v271 = 4 * v268 - 4 * v267;
              do
              {
                int v273 = *((_DWORD *)v270 + 1);
                v270 += 4;
                int v272 = v273;
                if (!v271) {
                  break;
                }
                v271 -= 4;
              }
              while (v272 == -1);
            }
          }
          else
          {
            uint64_t v270 = 0;
          }
          v314 = v266;
          simd_float4 v315 = v270;
          simd_float4 v316 = v269;
        }
        else
        {
          LOBYTE(v313) = 1;
          simd_float4 v315 = 0;
          simd_float4 v316 = 0;
          v314 = 0;
        }
      }
      if (v264)
      {
        unint64_t v304 = *(void *)(v14 + 96);
        unint64_t v305 = v304 + 4 * *(void *)(v14 + 80);
        LOBYTE(v310) = 1;
        unint64_t v311 = v304;
        *(void *)&long long v312 = v305;
        *((void *)&v312 + 1) = v305;
      }
      else
      {
        LOBYTE(v310) = 1;
        long long v312 = 0uLL;
        unint64_t v311 = 0;
      }
      goto LABEL_571;
    default:
      re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) The attribute is not an integer type.", "!\"Unreachable code\"", "mergeDiscreteFaceVaryingAttributeValues", 596);
      _os_crash();
      __break(1u);
      goto LABEL_703;
  }
}

uint64_t re::makeMeshFromFaces@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  unint64_t v10 = a1;
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v67 = 0;
  v64[1] = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  v64[0] = 0;
  int v66 = 0;
  v60[0] = 0;
  v60[1] = 0;
  unint64_t v12 = *(unsigned int *)(a1 + 40);
  unint64_t v13 = *((unsigned int *)a2 + 2);
  *(void *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  if (*(void *)(a5 + 8) < v13) {
    re::DynamicArray<int>::setCapacity((void *)a5, v13);
  }
  unint64_t v14 = &v69;
  unint64_t v61 = 0;
  int v62 = 1;
  re::DynamicArray<unsigned int>::resize(v60, v12, &re::kInvalidMeshIndex);
  if (v13)
  {
    unint64_t v16 = 0;
    while (1)
    {
      unint64_t v17 = a2[1];
      if (v17 <= v16) {
        break;
      }
      uint64_t v15 = (_DWORD *)(*a2 + 4 * v16);
      unint64_t v6 = *v15;
      unint64_t v7 = v61;
      if (v61 <= v6) {
        goto LABEL_71;
      }
      if (*(_DWORD *)(v63 + 4 * v6) == -1)
      {
        *(_DWORD *)(v63 + 4 * v6) = *(void *)(a5 + 16);
        re::DynamicArray<int>::add((void *)a5, v15);
      }
      if (++v16 == v13) {
        goto LABEL_10;
      }
    }
LABEL_70:
    re::internal::assertLog((re::internal *)6, (uint64_t)v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v17, v57);
    _os_crash();
    __break(1u);
LABEL_71:
    *(void *)int v80 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(void *)((char *)v85 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(void *)((char *)&v85[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
    WORD2(v85[3]) = 2048;
    *(void *)((char *)&v85[3] + 6) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
LABEL_10:
  uint64_t v57 = a6;
  uint64_t v18 = v10 + 16;
  unint64_t v13 = *(unsigned int *)(v10 + 16);
  unint64_t v6 = *(unsigned int *)(a5 + 16);
  uint64_t v65 = 0;
  ++v66;
  re::DynamicArray<unsigned int>::resize(v64, v13, &re::kInvalidMeshIndex);
  if (!v6)
  {
    unsigned int v21 = 0;
    goto LABEL_24;
  }
  int v20 = 0;
  unsigned int v21 = 0;
  unint64_t v12 = *(void *)(a5 + 16);
  a6 = (unint64_t)v65;
  uint64_t v22 = *(void *)(a5 + 32);
  unint64_t v23 = *(void *)(v10 + 40);
  uint64_t v24 = *(void *)(v10 + 56);
  do
  {
    if (v20 == (void *)v12) {
      goto LABEL_81;
    }
    unint64_t v7 = *(unsigned int *)(v22 + 4 * (void)v20);
    if (v23 <= v7)
    {
LABEL_82:
      *(void *)int v80 = 0;
      v14[3] = 0u;
      v14[4] = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v85[0]) = 136315906;
      *(void *)((char *)v85 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
      WORD2(v85[1]) = 1024;
      *(_DWORD *)((char *)&v85[1] + 6) = 797;
      WORD1(v85[2]) = 2048;
      *(void *)((char *)&v85[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v7;
      WORD2(v85[3]) = 2048;
      *(void *)((char *)&v85[3] + 6) = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      *(void *)int v80 = 0;
      v14[3] = 0u;
      v14[4] = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v85[0]) = 136315906;
      *(void *)((char *)v85 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
      WORD2(v85[1]) = 1024;
      *(_DWORD *)((char *)&v85[1] + 6) = 789;
      WORD1(v85[2]) = 2048;
      *(void *)((char *)&v85[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v12;
      WORD2(v85[3]) = 2048;
      *(void *)((char *)&v85[3] + 6) = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_84:
      uint64_t v68 = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      memset(v85, 0, sizeof(v85));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)int v80 = 136315906;
      *(void *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 797;
      __int16 v81 = 2048;
      unsigned int v82 = (_OWORD *)v6;
      __int16 v83 = 2048;
      unint64_t v84 = (_OWORD *)v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v25 = 0;
    *(_OWORD *)int v80 = *(_OWORD *)(v24 + 16 * v7);
    uint64_t v26 = v67;
    if (*(_DWORD *)&v80[12] == -1) {
      uint64_t v27 = 3;
    }
    else {
      uint64_t v27 = 4;
    }
    do
    {
      unint64_t v7 = *(unsigned int *)&v80[4 * v25];
      if (a6 <= v7)
      {
        uint64_t v68 = 0;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v69 = 0u;
        unint64_t v16 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v85[0]) = 136315906;
        *(void *)((char *)v85 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
        WORD2(v85[1]) = 1024;
        *(_DWORD *)((char *)&v85[1] + 6) = 789;
        WORD1(v85[2]) = 2048;
        *(void *)((char *)&v85[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v7;
        WORD2(v85[3]) = 2048;
        *(void *)((char *)&v85[3] + 6) = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_70;
      }
      if (*(_DWORD *)(v26 + 4 * v7) == -1) {
        *(_DWORD *)(v26 + 4 * v7) = v21++;
      }
      ++v25;
    }
    while (v27 != v25);
    int v20 = (void *)((char *)v20 + 1);
  }
  while (v20 != (void *)v6);
LABEL_24:
  uint64_t v28 = a3[1];
  if (v28)
  {
    uint64_t v29 = 0;
    unint64_t v6 = (unint64_t)v65;
    uint64_t v30 = v67;
    uint64_t v31 = *a3;
    uint64_t v32 = a4;
    while (v28 != v29)
    {
      unint64_t v7 = *(unsigned int *)(v31 + 4 * v29);
      if (v6 <= v7) {
        goto LABEL_73;
      }
      if (*(_DWORD *)(v30 + 4 * v7) == -1) {
        *(_DWORD *)(v30 + 4 * v7) = v21++;
      }
      if (v28 == ++v29) {
        goto LABEL_33;
      }
    }
LABEL_72:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v28, v28);
    _os_crash();
    __break(1u);
LABEL_73:
    *(void *)int v80 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(void *)((char *)v85 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(void *)((char *)&v85[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v7;
    WORD2(v85[3]) = 2048;
    *(void *)((char *)&v85[3] + 6) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    *(void *)int v80 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(void *)((char *)v85 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(void *)((char *)&v85[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v6;
    WORD2(v85[3]) = 2048;
    *(void *)((char *)&v85[3] + 6) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_75:
    uint64_t v68 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    memset(v85, 0, sizeof(v85));
    unint64_t v45 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v80 = 136315906;
    *(void *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 789;
    __int16 v81 = 2048;
    unsigned int v82 = v14;
    __int16 v83 = 2048;
    unint64_t v84 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_76:
    uint64_t v68 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v80 = 136315906;
    *(void *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    __int16 v81 = 2048;
    unsigned int v82 = (_OWORD *)v6;
    __int16 v83 = 2048;
    unint64_t v84 = (_OWORD *)v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_77:
    uint64_t v68 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v80 = 136315906;
    *(void *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    __int16 v81 = 2048;
    unsigned int v82 = (_OWORD *)v6;
    __int16 v83 = 2048;
    unint64_t v84 = (_OWORD *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_78:
    uint64_t v68 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v80 = 136315906;
    *(void *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    __int16 v81 = 2048;
    unsigned int v82 = (_OWORD *)v10;
    __int16 v83 = 2048;
    unint64_t v84 = (_OWORD *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    uint64_t v68 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v80 = 136315906;
    *(void *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    __int16 v81 = 2048;
    unsigned int v82 = (_OWORD *)v12;
    __int16 v83 = 2048;
    unint64_t v84 = (_OWORD *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    uint64_t v68 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)int v80 = 136315906;
    *(void *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 789;
    __int16 v81 = 2048;
    unsigned int v82 = (_OWORD *)a6;
    __int16 v83 = 2048;
    unint64_t v84 = (_OWORD *)a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    *(void *)int v80 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    unint64_t v23 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(void *)((char *)v85 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(void *)((char *)&v85[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v12;
    WORD2(v85[3]) = 2048;
    *(void *)((char *)&v85[3] + 6) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v32 = a4;
LABEL_33:
  re::DynamicArray<float>::resize(v32, v21);
  if (v13)
  {
    int v33 = 0;
    unint64_t v6 = (unint64_t)v65;
    uint64_t v34 = v67;
    unint64_t v7 = *(void *)(v32 + 16);
    uint64_t v35 = *(void *)(v32 + 32);
    while ((void *)v6 != v33)
    {
      unint64_t v12 = *(unsigned int *)(v34 + 4 * (void)v33);
      if (v12 != -1)
      {
        if (v7 <= v12) {
          goto LABEL_83;
        }
        *(_DWORD *)(v35 + 4 * v12) = v33;
      }
      int v33 = (void *)((char *)v33 + 1);
      if ((void *)v13 == v33) {
        goto LABEL_40;
      }
    }
    goto LABEL_74;
  }
LABEL_40:
  unint64_t v12 = (unint64_t)&v69;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v69);
  unsigned int v36 = *(_DWORD *)(v32 + 16);
  uint64_t v37 = *(void *)(a5 + 16);
  unint64_t v7 = v37;
  LODWORD(v69) = v36;
  unsigned int v74 = v36;
  if (v75)
  {
    unint64_t v6 = (unint64_t)v76;
    uint64_t v38 = 8 * v75;
    do
    {
      uint64_t v39 = *(void *)v6;
      v6 += 8;
      (*(void (**)(uint64_t, void))(*(void *)v39 + 72))(v39, v74);
      v38 -= 8;
    }
    while (v38);
  }
  re::DynamicArray<re::GeomCell4>::resize((void *)&v69 + 1, v37);
  unsigned int v77 = v37;
  if (v78)
  {
    unint64_t v6 = (unint64_t)v79;
    uint64_t v40 = 8 * v78;
    do
    {
      uint64_t v41 = *(void *)v6;
      v6 += 8;
      (*(void (**)(uint64_t, void))(*(void *)v41 + 72))(v41, v77);
      v40 -= 8;
    }
    while (v40);
  }
  if (v37)
  {
    uint64_t v42 = 0;
    unint64_t v14 = *(long long **)(a5 + 16);
    unint64_t v13 = (unint64_t)v65;
    uint64_t v43 = v67;
    a6 = *((void *)&v70 + 1);
    uint64_t v44 = *(void *)(a5 + 32);
    unint64_t v45 = *(void *)(v10 + 40);
    uint64_t v46 = *(void *)(v10 + 56);
    unsigned int v47 = (_DWORD *)(*((void *)&v71 + 1) + 8);
    while (v14 != v42)
    {
      unint64_t v6 = *(unsigned int *)(v44 + 4 * (void)v42);
      if (v45 <= v6) {
        goto LABEL_76;
      }
      unint64_t v48 = (unsigned int *)(v46 + 16 * v6);
      unint64_t v6 = *v48;
      if (v13 <= v6) {
        goto LABEL_77;
      }
      unint64_t v10 = v48[1];
      if (v13 <= v10) {
        goto LABEL_78;
      }
      unint64_t v12 = v48[2];
      if (v13 <= v12) {
        goto LABEL_79;
      }
      int v49 = *(_DWORD *)(v43 + 4 * v6);
      unint64_t v6 = v48[3];
      int v50 = *(_DWORD *)(v43 + 4 * v10);
      int v51 = *(_DWORD *)(v43 + 4 * v12);
      if (v6 == -1)
      {
        int v52 = -1;
      }
      else
      {
        if (v13 <= v6) {
          goto LABEL_84;
        }
        int v52 = *(_DWORD *)(v43 + 4 * v6);
      }
      if ((long long *)a6 == v42) {
        goto LABEL_80;
      }
      *(v47 - 2) = v49;
      *(v47 - 1) = v50;
      _DWORD *v47 = v51;
      v47[1] = v52;
      v47 += 4;
      uint64_t v42 = (long long *)((char *)v42 + 1);
      if ((long long *)v7 == v42) {
        goto LABEL_59;
      }
    }
    goto LABEL_75;
  }
LABEL_59:
  re::internal::addAndCopyAttributeValues(v18, (_anonymous_namespace_ *)&v69, 0);
  re::internal::addAndCopyAttributeValues(v18, (_anonymous_namespace_ *)&v69, 4);
  uint64_t v53 = *(void *)(a4 + 16);
  v85[0] = *(void *)(a4 + 32);
  v85[1] = v53;
  re::internal::addAndCopyVertexAttributes(v18, v85, (unsigned int *)&v69);
  uint64_t v54 = *(void *)(a5 + 16);
  v85[0] = *(void *)(a5 + 32);
  v85[1] = v54;
  re::internal::addAndCopyFaceAttributes(v18, v85, (uint64_t)&v69);
  uint64_t v55 = *(void *)(a5 + 16);
  v85[0] = *(void *)(a5 + 32);
  v85[1] = v55;
  re::internal::addAndCopyFaceVaryingAttributes(v18, v85, (_anonymous_namespace_ *)&v69);
  re::GeomMesh::GeomMesh(v57, (uint64_t)&v69);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v72);
  if (*((void *)&v69 + 1) && *((void *)&v71 + 1)) {
    (*(void (**)(void))(**((void **)&v69 + 1) + 40))();
  }
  if (v60[0] && v63) {
    (*(void (**)(void))(*(void *)v60[0] + 40))();
  }
  uint64_t result = v64[0];
  if (v64[0])
  {
    if (v67) {
      return (*(uint64_t (**)(void))(*(void *)v64[0] + 40))();
    }
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unsigned char v13[12];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void v19[3];
  int v20;
  uint64_t v21;
  void v22[3];
  int v23;
  uint64_t v24;

  uint64_t v24 = 0;
  unsigned int v21 = 0;
  memset(v22, 0, sizeof(v22));
  unint64_t v23 = 0;
  memset(v19, 0, sizeof(v19));
  int v20 = 0;
  re::makeMeshFromFaces(a1, a2, a3, (uint64_t)v22, (uint64_t)v19, a6);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v13, (uint64_t)v22);
  re::GeomIndexMap::operator=(a4, (uint64_t)v13);
  if (!v14) {
    goto LABEL_12;
  }
  if (v14 == 2)
  {
    unint64_t v9 = v18;
    if (!v18) {
      goto LABEL_12;
    }
    if (v16) {
      unint64_t v16 = 0;
    }
    if (!v15) {
      goto LABEL_12;
    }
LABEL_11:
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
    goto LABEL_12;
  }
  if (v14 != 1)
  {
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_31;
  }
  unint64_t v9 = v15;
  if (v15 && v17) {
    goto LABEL_11;
  }
LABEL_12:
  re::GeomIndexMap::GeomIndexMap((uint64_t)v13, (uint64_t)v19);
  re::GeomIndexMap::operator=(a5, (uint64_t)v13);
  if (!v14) {
    goto LABEL_23;
  }
  if (v14 != 2)
  {
    if (v14 == 1)
    {
      uint64_t v11 = v15;
      if (!v15 || !v17) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_31:
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  uint64_t v11 = v18;
  if (!v18) {
    goto LABEL_23;
  }
  if (v16) {
    unint64_t v16 = 0;
  }
  if (!v15) {
    goto LABEL_23;
  }
LABEL_22:
  (*(void (**)(uint64_t))(*(void *)v11 + 40))(v11);
LABEL_23:
  if (v19[0] && v21) {
    (*(void (**)(void))(*(void *)v19[0] + 40))(v19[0]);
  }
  uint64_t result = v22[0];
  if (v22[0])
  {
    if (v24) {
      return (*(uint64_t (**)(void))(*(void *)v22[0] + 40))(v22[0]);
    }
  }
  return result;
}

unsigned int *re::remapIndexMap@<X0>(unsigned int *this@<X0>, const re::GeomIndexMap *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t)this;
  uint64_t v92 = *MEMORY[0x263EF8340];
  unsigned int v7 = *this;
  if (*((unsigned char *)this + 12)) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    goto LABEL_15;
  }
  int v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2) {
    BOOL v10 = *((unsigned char *)a2 + 12) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10 && v7 == v9)
  {
    unsigned int v27 = 0;
    *(void *)a3 = 0xFFFFFFFF00000000;
    *(_DWORD *)(a3 + 8) = -1;
    *(unsigned char *)(a3 + 12) = 0;
    if (v7 - 1 <= 0xFFFFFFFD)
    {
      *(_DWORD *)(a3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      *(_DWORD *)(a3 + 8) = v7 - 1;
      unsigned int v27 = v7;
      *(_DWORD *)a3 = v7;
    }
    *(_DWORD *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v27;
    return this;
  }
  if (v7)
  {
LABEL_15:
    if (this[1] || this[2] + 1 != v7)
    {
LABEL_27:
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      uint64_t v19 = v7;
      int v21 = *(unsigned __int8 *)(v5 + 12);
      if (*(unsigned char *)(v5 + 12))
      {
        if (v21 == 2)
        {
          uint64_t v80 = v5 + 16;
          unint64_t v81 = 0;
          unint64_t v29 = *(void *)(v5 + 32);
          if (v29 <= 0xF)
          {
LABEL_42:
            uint64_t v34 = -1;
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v31 = *(void *)(v5 + 16);
            unint64_t v32 = v29 >> 4;
            while (1)
            {
              unsigned __int16 v33 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v31 + v30)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
              unint64_t v81 = (unsigned __int16)~v33;
              if (v33 != 0xFFFF) {
                break;
              }
              v30 += 16;
              if (!--v32) {
                goto LABEL_42;
              }
            }
            uint64_t v34 = __clz(__rbit64((unsigned __int16)~v33)) + v30;
          }
          uint64_t v82 = v34;
          LOBYTE(v79) = 2;
          LOBYTE(v85) = 2;
          *(void *)&v86[4] = v5 + 16;
          *(_OWORD *)&v86[12] = xmmword_234361D10;
        }
        else
        {
          if (v21 != 1) {
            goto LABEL_105;
          }
          if (*(_DWORD *)v5)
          {
            uint64_t v22 = *(void *)(v5 + 48);
            uint64_t v23 = *(unsigned int *)(v5 + 4);
            uint64_t v24 = *(void *)(v5 + 32);
            uint64_t v25 = v22 + 4 * v24;
            LOBYTE(v79) = 1;
            if (v22)
            {
              if (v24 == v23)
              {
                uint64_t v26 = v22 + 4 * v23;
              }
              else
              {
                uint64_t v35 = 4 * v23;
                uint64_t v36 = 4 * v24;
                do
                {
                  uint64_t v37 = v35 + 4;
                  if (v36 == v35) {
                    break;
                  }
                  int v38 = *(_DWORD *)(v22 + v35);
                  v35 += 4;
                }
                while (v38 == -1);
                uint64_t v26 = v22 + v37 - 4;
              }
            }
            else
            {
              uint64_t v26 = 0;
            }
            uint64_t v80 = v22;
            unint64_t v81 = v26;
            uint64_t v82 = v25;
            uint64_t v39 = *(void *)(v5 + 48);
            uint64_t v40 = v39 + 4 * *(void *)(v5 + 32);
            LOBYTE(v85) = 1;
            *(void *)&v86[4] = v39;
            *(void *)&v86[12] = v40;
            *(void *)&v86[20] = v40;
          }
          else
          {
            LOBYTE(v79) = 1;
            unint64_t v81 = 0;
            uint64_t v82 = 0;
            uint64_t v80 = 0;
            LOBYTE(v85) = 1;
            memset(&v86[4], 0, 24);
          }
        }
      }
      else
      {
        LOBYTE(v79) = 0;
        LODWORD(v80) = 0;
        int v28 = *(_DWORD *)(v5 + 16);
        LOBYTE(v85) = 0;
        *(_DWORD *)&v86[4] = v28;
      }
      if (re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v79, &v85))
      {
LABEL_64:
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v85, v41);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v79, v48);
        re::GeomIndexMap::GeomIndexMap((unsigned int *)a3, (uint64_t *)&v87);
        this = (unsigned int *)*((void *)&v90 + 1);
        if (!*((void *)&v90 + 1)) {
          return this;
        }
        if (*((void *)&v87 + 1)) {
          *((void *)&v87 + 1) = 0;
        }
        if (!(void)v87) {
          return this;
        }
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)this + 40))(this);
      }
      while (1)
      {
        uint64_t v75 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v79, v41);
        unint64_t v43 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v79, v42);
        unint64_t v45 = HIDWORD(v43);
        LODWORD(v72) = HIDWORD(v43);
        int v46 = *((unsigned __int8 *)a2 + 12);
        if (v46 == 2)
        {
          uint64_t v47 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)a2 + 2, (unsigned int *)&v72);
          if (v47 == -1) {
            goto LABEL_62;
          }
          LODWORD(v45) = *(_DWORD *)(*((void *)a2 + 3) + 8 * v47 + 4);
        }
        else
        {
          if (v46 != 1)
          {
            if (*((unsigned char *)a2 + 12)) {
              goto LABEL_103;
            }
            if (*((_DWORD *)a2 + 4) <= HIDWORD(v43)) {
              LODWORD(v45) = -1;
            }
            goto LABEL_63;
          }
          if (*((void *)a2 + 4) <= v45)
          {
LABEL_62:
            LODWORD(v45) = -1;
            goto LABEL_63;
          }
          LODWORD(v45) = *(_DWORD *)(*((void *)a2 + 6) + 4 * v45);
        }
LABEL_63:
        LODWORD(v72) = v45;
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew((_anonymous_namespace_ *)&v87, (unsigned int *)&v75, (unsigned int *)&v72);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v79);
        if (re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v79, &v85)) {
          goto LABEL_64;
        }
      }
    }
    int v9 = *(_DWORD *)a2;
  }
  if (v9 && (*((_DWORD *)a2 + 1) || *((_DWORD *)a2 + 2) + 1 != v9)) {
    goto LABEL_27;
  }
  uint64_t v83 = 0;
  uint64_t v80 = 0;
  unint64_t v81 = 0;
  uint64_t v79 = 0;
  LODWORD(v82) = 0;
  re::DynamicArray<unsigned int>::resize(&v79, v7, &re::kInvalidMeshIndex);
  int v13 = *(unsigned __int8 *)(v5 + 12);
  if (*(unsigned char *)(v5 + 12))
  {
    if (v13 == 2)
    {
      uint64_t v76 = v5 + 16;
      uint64_t v77 = 0;
      unint64_t v50 = *(void *)(v5 + 32);
      if (v50 <= 0xF)
      {
LABEL_75:
        uint64_t v55 = -1;
      }
      else
      {
        uint64_t v51 = 0;
        uint64_t v52 = *(void *)(v5 + 16);
        unint64_t v53 = v50 >> 4;
        while (1)
        {
          unsigned __int16 v54 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v52 + v51)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
          uint64_t v77 = (unsigned __int16)~v54;
          if (v54 != 0xFFFF) {
            break;
          }
          v51 += 16;
          if (!--v53) {
            goto LABEL_75;
          }
        }
        uint64_t v55 = __clz(__rbit64((unsigned __int16)~v54)) + v51;
      }
      uint64_t v78 = v55;
      LOBYTE(v75) = 2;
      LOBYTE(v72) = 2;
      uint64_t v73 = v5 + 16;
      long long v74 = xmmword_234361D10;
    }
    else
    {
      if (v13 != 1) {
        goto LABEL_106;
      }
      if (*(_DWORD *)v5)
      {
        uint64_t v14 = *(void *)(v5 + 48);
        uint64_t v15 = *(unsigned int *)(v5 + 4);
        uint64_t v16 = *(void *)(v5 + 32);
        uint64_t v17 = v14 + 4 * v16;
        LOBYTE(v75) = 1;
        if (v14)
        {
          if (v16 == v15)
          {
            uint64_t v18 = v14 + 4 * v15;
          }
          else
          {
            uint64_t v56 = 4 * v15;
            uint64_t v57 = 4 * v16;
            do
            {
              uint64_t v58 = v56 + 4;
              if (v57 == v56) {
                break;
              }
              int v59 = *(_DWORD *)(v14 + v56);
              v56 += 4;
            }
            while (v59 == -1);
            uint64_t v18 = v14 + v58 - 4;
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v76 = v14;
        uint64_t v77 = v18;
        uint64_t v78 = v17;
        uint64_t v60 = *(void *)(v5 + 48);
        uint64_t v61 = v60 + 4 * *(void *)(v5 + 32);
        LOBYTE(v72) = 1;
        uint64_t v73 = v60;
        *(void *)&long long v74 = v61;
        *((void *)&v74 + 1) = v61;
      }
      else
      {
        LOBYTE(v75) = 1;
        uint64_t v77 = 0;
        uint64_t v78 = 0;
        uint64_t v76 = 0;
        LOBYTE(v72) = 1;
        long long v74 = 0uLL;
        uint64_t v73 = 0;
      }
    }
  }
  else
  {
    LOBYTE(v75) = 0;
    LODWORD(v76) = 0;
    int v49 = *(_DWORD *)(v5 + 16);
    LOBYTE(v72) = 0;
    LODWORD(v73) = v49;
  }
  if (re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v75, &v72))
  {
LABEL_99:
    re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v72, v62);
    re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v75, v71);
    re::GeomIndexMap::GeomIndexMap(a3, (uint64_t)&v79);
    this = (unsigned int *)v79;
    if (!v79 || !v83) {
      return this;
    }
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)this + 40))(this);
  }
  while (1)
  {
    unint64_t v63 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v75, v62);
    unint64_t v65 = HIDWORD(v63);
    LODWORD(v87) = HIDWORD(v63);
    int v66 = *((unsigned __int8 *)a2 + 12);
    if (v66 == 2)
    {
      uint64_t v68 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)a2 + 2, (unsigned int *)&v87);
      if (v68 != -1)
      {
        int v67 = *(_DWORD *)(*((void *)a2 + 3) + 8 * v68 + 4);
        goto LABEL_97;
      }
LABEL_96:
      int v67 = -1;
      goto LABEL_97;
    }
    if (v66 == 1)
    {
      if (*((void *)a2 + 4) > v65)
      {
        int v67 = *(_DWORD *)(*((void *)a2 + 6) + 4 * v65);
        goto LABEL_97;
      }
      goto LABEL_96;
    }
    if (*((unsigned char *)a2 + 12)) {
      break;
    }
    if (*((_DWORD *)a2 + 4) <= HIDWORD(v63)) {
      int v67 = -1;
    }
    else {
      int v67 = HIDWORD(v63);
    }
LABEL_97:
    unint64_t v69 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v75, v64);
    unint64_t v70 = v81;
    if (v81 <= v69)
    {
      uint64_t v84 = 0;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v87 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v85 = 136315906;
      *(void *)long long v86 = "operator[]";
      *(_WORD *)&v86[8] = 1024;
      *(_DWORD *)&v86[10] = 789;
      *(_WORD *)&v86[14] = 2048;
      *(void *)&v86[16] = v69;
      *(_WORD *)&v86[24] = 2048;
      *(void *)&v86[26] = v70;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_103:
      re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82);
      _os_crash();
      __break(1u);
    }
    *(_DWORD *)(v83 + 4 * v69) = v67;
    re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v75);
    if (re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v75, &v72)) {
      goto LABEL_99;
    }
  }
  re::internal::assertLog((re::internal *)4, v64, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680, v72, v73);
  _os_crash();
  __break(1u);
LABEL_105:
  re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
  _os_crash();
  __break(1u);
LABEL_106:
  re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
  this = (unsigned int *)_os_crash();
  __break(1u);
  return this;
}

uint64_t re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  if (v2 == 2)
  {
    uint64_t v5 = (_DWORD *)(*(void *)(*((void *)a1 + 1) + 8) + 8 * *((void *)a1 + 3));
    LODWORD(v3) = *v5;
    uint64_t v4 = v5[1];
    return v3 | (unint64_t)(v4 << 32);
  }
  if (v2 == 1)
  {
    unint64_t v6 = (unsigned int *)*((void *)a1 + 2);
    unint64_t v3 = ((unint64_t)v6 - *((void *)a1 + 1)) >> 2;
    uint64_t v4 = *v6;
    return v3 | (unint64_t)(v4 << 32);
  }
  if (!*a1)
  {
    LODWORD(v3) = *((_DWORD *)a1 + 2);
    uint64_t v4 = v3;
    return v3 | (unint64_t)(v4 << 32);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "operator*", 177);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

_DWORD *re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew(_anonymous_namespace_ *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a1, a2);
  if (v6 != -1) {
    return (_DWORD *)(*((void *)a1 + 1) + 8 * v6 + 4);
  }
  return re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd(a1, a2, a3);
}

void re::internal::wrapGeometryAroundCylinder(re::internal *this, const re::GeomMesh *a2, re::GeomMesh *a3, float a4)
{
  int v4 = (int)a3;
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (this != a2) {
    re::GeomMesh::copy(this, a2);
  }
  if (fabsf(a4) >= 0.00001)
  {
    re::computeAABB(this, &v29);
    float v8 = v30;
    float v9 = *(float *)&v29;
    if (vabds_f32(v30, *(float *)&v29) >= 0.00001)
    {
      float v10 = v30 - *(float *)&v29;
      uint64_t v11 = re::GeomMesh::modifyVertexPositions(a2);
      uint64_t v13 = *((unsigned int *)this + 4);
      float v14 = (float)(v8 + v9) * 0.5;
      float v15 = (float)(v31 + *((float *)&v29 + 2)) * 0.5;
      float v16 = v10 / a4;
      if (v4)
      {
        if (v13)
        {
          float v17 = v16 + v15;
          uint64_t v18 = v12;
          uint64_t v19 = (float *)(v11 + 8);
          uint64_t v20 = v12;
          while (v20)
          {
            float v21 = v17 - *v19;
            __float2 v22 = __sincosf_stret((float)((float)(*(v19 - 2) - v14) / v10) * a4);
            *(v19 - 2) = v14 + (float)(v21 * v22.__sinval);
            *uint64_t v19 = v17 - (float)(v21 * v22.__cosval);
            v19 += 4;
            --v20;
            if (!--v13) {
              goto LABEL_15;
            }
          }
          uint64_t v32 = 0;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v41 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v33 = 136315906;
          uint64_t v34 = "operator[]";
          __int16 v35 = 1024;
          int v36 = 609;
          __int16 v37 = 2048;
          uint64_t v38 = v18;
          __int16 v39 = 2048;
          uint64_t v40 = v18;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_18;
        }
      }
      else if (v13)
      {
        float v23 = v15 - v16;
        uint64_t v18 = v12;
        uint64_t v24 = (float *)(v11 + 8);
        uint64_t v25 = v12;
        while (v25)
        {
          float v26 = *v24 - v23;
          __float2 v27 = __sincosf_stret((float)((float)(*(v24 - 2) - v14) / v10) * a4);
          *(v24 - 2) = v14 + (float)(v26 * v27.__sinval);
          *uint64_t v24 = v23 + (float)(v26 * v27.__cosval);
          v24 += 4;
          --v25;
          if (!--v13) {
            goto LABEL_15;
          }
        }
LABEL_18:
        uint64_t v32 = 0;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v33 = 136315906;
        uint64_t v34 = "operator[]";
        __int16 v35 = 1024;
        int v36 = 609;
        __int16 v37 = 2048;
        uint64_t v38 = v18;
        __int16 v39 = 2048;
        uint64_t v40 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_15:
      int v28 = (const re::GeomMesh *)((char *)a2 + 64);
      re::internal::GeomAttributeManager::deleteAttribute(v28, "vertexNormal");
      re::internal::GeomAttributeManager::deleteAttribute(v28, "vertexBitangent");
      re::internal::GeomAttributeManager::deleteAttribute(v28, "vertexTangent");
    }
  }
}

float32x4_t re::anonymous namespace'::transformTangentsArray(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    for (unint64_t i = 0; i != v2; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 8))
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      float32x4_t result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)(*(void *)a1 + 16 * i))), a2[1], *(float32x2_t *)(*(void *)a1 + 16 * i), 1), a2[2], *(float32x4_t *)(*(void *)a1 + 16 * i), 2);
      *(float32x4_t *)(*(void *)a1 + 16 * i) = result;
    }
  }
  return result;
}

uint64_t re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==(unsigned __int8 *a1, void *a2)
{
  int v2 = *a1;
  if (v2 != *(unsigned __int8 *)a2) {
    return 0;
  }
  if (v2 == 2) {
    return *((void *)a1 + 3) == a2[3];
  }
  if (v2 == 1)
  {
    if (*((void *)a1 + 1) != a2[1] || *((void *)a1 + 2) != a2[2]) {
      return 0;
    }
    return *((void *)a1 + 3) == a2[3];
  }
  if (*a1)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "operator==", 197);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  return *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2);
}

void *re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(void *this)
{
  int v1 = *(unsigned __int8 *)this;
  if (v1 == 2) {
    return re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(this + 1);
  }
  if (v1 == 1)
  {
    int v2 = (int *)this[2];
    if (v2)
    {
      unint64_t v3 = (int *)this[3];
      if (v2 != v3)
      {
        int v4 = v2 + 1;
        do
        {
          this[2] = v4;
          if (v4 == v3) {
            break;
          }
          int v5 = *v4++;
        }
        while (v5 == -1);
      }
    }
  }
  else if (!*(unsigned char *)this)
  {
    ++*((_DWORD *)this + 2);
  }
  return this;
}

void re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator(re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *this, uint64_t a2)
{
  if (*(unsigned __int8 *)this >= 3u)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~ConstantOrHashTableOrArrayIterator", 147);
    _os_crash();
    __break(1u);
  }
}

unsigned int *re::GeomIndexMap::GeomIndexMap(unsigned int *a1, uint64_t *a2)
{
  unint64_t v2 = (unint64_t)a2;
  uint64_t v58 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 1) = -1;
  *((unsigned char *)a1 + 12) = 2;
  uint64_t v41 = 0;
  v38[1] = 0;
  unint64_t v39 = 0;
  v38[0] = 0;
  int v40 = 0;
  if (re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a2, &re::kInvalidMeshIndex) != -1)re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::remove((uint64_t *)v2, &re::kInvalidMeshIndex); {
  *(void *)&long long v53 = v2;
  }
  unint64_t v4 = *(void *)(v2 + 16);
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)v2;
    unint64_t v7 = v4 >> 4;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      *((void *)&v53 + 1) = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        goto LABEL_27;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    *(void *)&long long v54 = v9;
    if (v9 != -1)
    {
      do
      {
        *(_DWORD *)long long v43 = 0;
        float v10 = (unsigned int *)(*(void *)(v53 + 8) + 8 * v9);
        unsigned int v11 = *v10;
        *(_DWORD *)long long v43 = *v10;
        if (v10[1] == -1)
        {
          re::DynamicArray<int>::add(v38, v43);
        }
        else
        {
          unsigned int v12 = a1[1];
          if (v12 == -1 || v11 < v12) {
            a1[1] = v11;
          }
          unsigned int v14 = a1[2];
          if (v14 == -1 || v11 > v14) {
            a1[2] = v11;
          }
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v53);
        uint64_t v9 = v54;
      }
      while ((void)v54 != -1);
      uint64_t v16 = v39;
      if (v39)
      {
        unint64_t v17 = 0;
        while (1)
        {
          unint64_t v18 = v39;
          if (v39 <= v17) {
            break;
          }
          re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::remove((uint64_t *)v2, (unsigned int *)(v41 + 4 * v17++));
          if (v17 == v16) {
            goto LABEL_27;
          }
        }
        *(void *)uint64_t v46 = 0;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v43 = 136315906;
        *(void *)&v43[4] = "operator[]";
        *(_WORD *)&v43[12] = 1024;
        *(_DWORD *)&v43[14] = 789;
        *(_WORD *)&v43[18] = 2048;
        *(void *)&v43[20] = v17;
        __int16 v44 = 2048;
        *(void *)long long v45 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_56:
        uint64_t v42 = 0;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v53 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v46 = 136315906;
        *(void *)&v46[4] = "operator[]";
        __int16 v47 = 1024;
        int v48 = 789;
        __int16 v49 = 2048;
        unint64_t v50 = v2;
        __int16 v51 = 2048;
        unint64_t v52 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
LABEL_27:
  unsigned int v19 = a1[1];
  if (v19 == -1)
  {
    *((unsigned char *)a1 + 12) = 0;
    a1[2] = -1;
    a1[4] = 0;
    *(void *)a1 = 0xFFFFFFFF00000000;
  }
  else
  {
    uint64_t v20 = a1[2] - v19 + 1;
    *a1 = v20;
    uint64_t v21 = *(void *)(v2 + 24);
    if (!v19 && v21 == v20)
    {
      *(void *)&long long v53 = v2;
      unint64_t v22 = *(void *)(v2 + 16);
      if (v22 < 0x10) {
        goto LABEL_41;
      }
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)v2;
      unint64_t v25 = v22 >> 4;
      while (1)
      {
        unsigned __int16 v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v24 + v23)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        *((void *)&v53 + 1) = (unsigned __int16)~v26;
        if (v26 != 0xFFFF) {
          break;
        }
        v23 += 16;
        if (!--v25)
        {
LABEL_41:
          *((unsigned char *)a1 + 12) = 0;
          a1[4] = v20;
          goto LABEL_42;
        }
      }
      uint64_t v27 = __clz(__rbit64((unsigned __int16)~v26)) + v23;
      *(void *)&long long v54 = v27;
      if (v27 == -1) {
        goto LABEL_41;
      }
      while (*(_DWORD *)(*(void *)(v53 + 8) + 8 * v27) == *(_DWORD *)(*(void *)(v53 + 8) + 8 * v27 + 4))
      {
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v53);
        uint64_t v27 = v54;
        if ((void)v54 == -1)
        {
          LODWORD(v20) = *a1;
          goto LABEL_41;
        }
      }
      *(void *)&void v45[2] = 0;
      memset(v43, 0, sizeof(v43));
      re::DynamicArray<unsigned int>::resize(v43, *a1, &re::kInvalidMeshIndex);
      v36[0] = v2;
      unint64_t v29 = *(void *)(v2 + 16);
      if (v29 < 0x10) {
        goto LABEL_54;
      }
      uint64_t v30 = 0;
      uint64_t v31 = *(void *)v2;
      unint64_t v32 = v29 >> 4;
      while (1)
      {
        unsigned __int16 v33 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v31 + v30)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
        v36[1] = (unsigned __int16)~v33;
        if (v33 != 0xFFFF) {
          break;
        }
        v30 += 16;
        if (!--v32) {
          goto LABEL_54;
        }
      }
      uint64_t v34 = __clz(__rbit64((unsigned __int16)~v33)) + v30;
      uint64_t v37 = v34;
      if (v34 == -1)
      {
LABEL_54:
        *((unsigned char *)a1 + 12) = 1;
        *((void *)a1 + 2) = *(void *)v43;
        *(_OWORD *)(a1 + 6) = *(_OWORD *)&v43[8];
        *((void *)a1 + 6) = *(void *)&v45[2];
        a1[10] = 1;
        goto LABEL_42;
      }
      while (1)
      {
        uint64_t v35 = *(void *)(v36[0] + 8);
        unint64_t v2 = *(unsigned int *)(v35 + 8 * v34);
        unint64_t v17 = *(void *)&v43[16];
        if (*(void *)&v43[16] <= v2) {
          goto LABEL_56;
        }
        *(_DWORD *)(*(void *)&v45[2] + 4 * v2) = *(_DWORD *)(v35 + 8 * v34 + 4);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v36);
        uint64_t v34 = v37;
        if (v37 == -1) {
          goto LABEL_54;
        }
      }
    }
    *a1 = v21;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0u;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)a1 + 2, (uint64_t *)v2);
  }
LABEL_42:
  if (v38[0] && v41) {
    (*(void (**)(void))(*(void *)v38[0] + 40))();
  }
  return a1;
}

BOOL re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::remove(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a1, a2);
  uint64_t v4 = v3;
  if (v3 != -1)
  {
    uint64_t v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    int8x8_t v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800);
    if (v7) {
      char v8 = -1;
    }
    else {
      char v8 = 0x80;
    }
    v5->i8[v3 & 0xF] = v8;
    unint64_t v9 = a1[2];
    unint64_t v10 = *(unsigned int *)(a1[1] + 8 * v3);
    unint64_t v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[5] ^= (v11 >> 31) ^ v11;
    uint64_t v12 = a1[4];
    if (v7) {
      ++v12;
    }
    unint64_t v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2) {
      re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::resize(a1, 0);
    }
  }
  return v4 != -1;
}

void *re::DynamicArray<unsigned char>::resize(void *result, unint64_t a2, unsigned char *a3)
{
  uint64_t v4 = result;
  unint64_t v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<BOOL>::setCapacity(result, a2);
      unint64_t v5 = v4[2];
    }
    if (v5 < a2)
    {
      do
        *(unsigned char *)(v4[4] + v5++) = *a3;
      while (a2 != v5);
    }
  }
  void v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

void *re::internal::GeomKDTree<float>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3 <= a2) {
    return 0;
  }
  unint64_t v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v9 = a1[6];
  unint64_t v10 = (void *)(v9 + 24 * v6);
  if (a3 - a2 != 1)
  {
    uint64_t v66 = a1[6];
    unsigned int v67 = v6;
    unint64_t v12 = (a3 + a2) >> 1;
    if (v12 == a3)
    {
      unint64_t v13 = a3;
    }
    else
    {
      uint64_t v14 = *(void *)(a4 + 32);
      float v15 = (unsigned int *)(v14 + 4 * a3);
      uint64_t v16 = (unsigned int *)(v14 + 4 * v12);
      unint64_t v17 = (unsigned int *)(v14 + 4 * a2);
      unint64_t v64 = (a3 + a2) >> 1;
      do
      {
        unint64_t v18 = v15 - v17;
        if (v18 < 2) {
          break;
        }
        if (v18 == 3)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<float>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v17 + 1, v15 - 1, *a1);
          break;
        }
        if (v18 == 2)
        {
          uint64_t v52 = *(v15 - 1);
          uint64_t v53 = *v17;
          if (*(float *)(*a1 + 4 * v52) < *(float *)(*a1 + 4 * v53))
          {
            *unint64_t v17 = v52;
            *(v15 - 1) = v53;
          }
          break;
        }
        if ((char *)v15 - (char *)v17 <= 31)
        {
          for (; v17 != v15 - 1; ++v17)
          {
            if (v17 != v15)
            {
              long long v54 = v17 + 1;
              if (v17 + 1 != v15)
              {
                unsigned int v55 = *v17;
                unsigned int v56 = *v17;
                long long v57 = v17;
                uint64_t v58 = v17 + 1;
                do
                {
                  unsigned int v60 = *v58++;
                  unsigned int v59 = v60;
                  if (*(float *)(*a1 + 4 * v60) < *(float *)(*a1 + 4 * v56))
                  {
                    unsigned int v56 = v59;
                    long long v57 = v54;
                  }
                  long long v54 = v58;
                }
                while (v58 != v15);
                if (v57 != v17)
                {
                  *unint64_t v17 = *v57;
                  unsigned int *v57 = v55;
                }
              }
            }
          }
          break;
        }
        unsigned int v19 = &v17[v18 >> 1];
        uint64_t v20 = v15 - 1;
        int v21 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<float>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v19, v15 - 1, *a1);
        uint64_t v22 = *v17;
        uint64_t v23 = *a1;
        float v24 = *(float *)(*a1 + 4 * v22);
        float v25 = *(float *)(*a1 + 4 * *v19);
        if (v24 >= v25)
        {
          unsigned __int16 v26 = v15 - 1;
          while (--v26 != v17)
          {
            uint64_t v27 = *v26;
            if (*(float *)(v23 + 4 * v27) < v25)
            {
              *unint64_t v17 = v27;
              *unsigned __int16 v26 = v22;
              ++v21;
              goto LABEL_20;
            }
          }
          int v40 = v17 + 1;
          uint64_t v41 = *v20;
          if (v24 >= *(float *)(v23 + 4 * v41))
          {
            while (v40 != v20)
            {
              uint64_t v42 = *v40;
              if (v24 < *(float *)(v23 + 4 * v42))
              {
                *v40++ = v41;
                *uint64_t v20 = v42;
                goto LABEL_52;
              }
              ++v40;
            }
LABEL_62:
            unint64_t v12 = v64;
            break;
          }
LABEL_52:
          if (v40 == v20) {
            goto LABEL_62;
          }
          while (1)
          {
            float v46 = *(float *)(v23 + 4 * *v17);
            do
            {
              unsigned int v48 = *v40++;
              unsigned int v47 = v48;
            }
            while (v46 >= *(float *)(v23 + 4 * v48));
            __int16 v49 = v40 - 1;
            do
            {
              unsigned int v51 = *--v20;
              unsigned int v50 = v51;
            }
            while (v46 < *(float *)(v23 + 4 * v51));
            if (v49 >= v20) {
              break;
            }
            unsigned int *v49 = v50;
            *uint64_t v20 = v47;
          }
          unint64_t v17 = v40 - 1;
          unint64_t v12 = v64;
          if (v49 > v16) {
            break;
          }
        }
        else
        {
          unsigned __int16 v26 = v15 - 1;
LABEL_20:
          int v28 = v17 + 1;
          unint64_t v12 = v64;
          if (v17 + 1 >= v26)
          {
            unsigned __int16 v33 = v17 + 1;
          }
          else
          {
            unint64_t v29 = v17 + 1;
            while (1)
            {
              float v30 = *(float *)(v23 + 4 * *v19);
              do
              {
                unsigned int v32 = *v29++;
                unsigned int v31 = v32;
              }
              while (*(float *)(v23 + 4 * v32) < v30);
              unsigned __int16 v33 = v29 - 1;
              do
              {
                unsigned int v35 = *--v26;
                unsigned int v34 = v35;
              }
              while (*(float *)(v23 + 4 * v35) >= v30);
              if (v33 >= v26) {
                break;
              }
              unsigned int *v33 = v34;
              *unsigned __int16 v26 = v31;
              ++v21;
              if (v33 == v19) {
                unsigned int v19 = v26;
              }
            }
          }
          if (v33 != v19)
          {
            uint64_t v36 = *v19;
            uint64_t v37 = *v33;
            if (*(float *)(v23 + 4 * v36) < *(float *)(v23 + 4 * v37))
            {
              unsigned int *v33 = v36;
              *unsigned int v19 = v37;
              ++v21;
            }
          }
          if (v33 == v16) {
            break;
          }
          if (!v21)
          {
            if (v33 <= v16)
            {
              long long v43 = v33 + 1;
              while (v43 != v15)
              {
                float v44 = *(float *)(v23 + 4 * *v43);
                float v45 = *(float *)(v23 + 4 * *(v43++ - 1));
                if (v44 < v45) {
                  goto LABEL_36;
                }
              }
            }
            else
            {
              while (v28 != v33)
              {
                float v38 = *(float *)(v23 + 4 * *v28);
                float v39 = *(float *)(v23 + 4 * *(v28++ - 1));
                if (v38 < v39) {
                  goto LABEL_36;
                }
              }
            }
            break;
          }
LABEL_36:
          if (v33 > v16) {
            float v15 = v33;
          }
          else {
            unint64_t v17 = v33 + 1;
          }
        }
      }
      while (v15 != v16);
      unint64_t v13 = v12;
    }
    if (*(void *)(a4 + 16) > v13)
    {
      int v61 = *(_DWORD *)(*(void *)(a4 + 32) + 4 * v13);
      uint64_t v62 = v66 + 24 * v67;
      *(_DWORD *)(v62 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v61;
      *unint64_t v10 = re::internal::GeomKDTree<float>::buildHelper(a1, a2, v12, a4, a5);
      *(void *)(v62 + 8) = re::internal::GeomKDTree<float>::buildHelper(a1, (v12 + 1), a3, a4, a5);
      return v10;
    }
LABEL_82:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_81:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_82;
  }
  *(_DWORD *)(v9 + 24 * v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * a2);
  *unint64_t v10 = 0;
  v10[1] = 0;
  return v10;
}

void *re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v4)
      {
        if (!a2)
        {
          unint64_t v6 = 0;
          if (!v2) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
        if (result)
        {
          unint64_t v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 24 * v4[2]);
          uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 24 * a2, *(void *)(*v4 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<float>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  float v6 = *(float *)(a4 + 4 * v4);
  float v7 = *(float *)(a4 + 4 * v5);
  uint64_t v8 = *a3;
  float v9 = *(float *)(a4 + 4 * v8);
  if (v6 < v7)
  {
    if (v9 < v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v12 = *a3;
    if (*(float *)(a4 + 4 * v12) >= v7) {
      return 1;
    }
    *a2 = v12;
    *a3 = v5;
    return 2;
  }
  if (v9 < v6)
  {
    *a2 = v8;
    *a3 = v4;
    uint64_t v10 = *a2;
    uint64_t v11 = *a1;
    if (*(float *)(a4 + 4 * v10) >= *(float *)(a4 + 4 * v11)) {
      return 1;
    }
    *a1 = v10;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<float>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float *a3, void *a4, double a5)
{
  if (a2)
  {
    uint64_t v8 = a2;
    float v9 = (void *)result;
    double v10 = -a5;
    double v11 = a5 * a5;
    do
    {
      float v12 = *(float *)(*v9 + 4 * *((unsigned int *)v8 + 4));
      if (v12 == *a3) {
        double v13 = 0.0;
      }
      else {
        double v13 = (float)(*a3 - v12);
      }
      if (v13 >= v10)
      {
        if (v13 <= a5)
        {
          if (v13 * v13 <= v11) {
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          }
          uint64_t v14 = *v8++;
          uint64_t result = re::internal::GeomKDTree<float>::findWithinRadiusHelper(v9, v14, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      uint64_t v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<float>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 4 * a2;
}

uint64_t re::internal::GeomTypedAttribute<double>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 8 * a2;
}

{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 8 * a2;
}

void *re::internal::GeomKDTree<double>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3 <= a2) {
    return 0;
  }
  unint64_t v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v9 = a1[6];
  double v10 = (void *)(v9 + 24 * v6);
  if (a3 - a2 != 1)
  {
    uint64_t v66 = a1[6];
    unsigned int v67 = v6;
    unint64_t v12 = (a3 + a2) >> 1;
    if (v12 == a3)
    {
      unint64_t v13 = a3;
    }
    else
    {
      uint64_t v14 = *(void *)(a4 + 32);
      float v15 = (unsigned int *)(v14 + 4 * a3);
      uint64_t v16 = (unsigned int *)(v14 + 4 * v12);
      unint64_t v17 = (unsigned int *)(v14 + 4 * a2);
      unint64_t v64 = (a3 + a2) >> 1;
      do
      {
        unint64_t v18 = v15 - v17;
        if (v18 < 2) {
          break;
        }
        if (v18 == 3)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<double>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v17 + 1, v15 - 1, *a1);
          break;
        }
        if (v18 == 2)
        {
          uint64_t v52 = *(v15 - 1);
          uint64_t v53 = *v17;
          if (*(double *)(*a1 + 8 * v52) < *(double *)(*a1 + 8 * v53))
          {
            *unint64_t v17 = v52;
            *(v15 - 1) = v53;
          }
          break;
        }
        if ((char *)v15 - (char *)v17 <= 31)
        {
          for (; v17 != v15 - 1; ++v17)
          {
            if (v17 != v15)
            {
              long long v54 = v17 + 1;
              if (v17 + 1 != v15)
              {
                unsigned int v55 = *v17;
                unsigned int v56 = *v17;
                long long v57 = v17;
                uint64_t v58 = v17 + 1;
                do
                {
                  unsigned int v60 = *v58++;
                  unsigned int v59 = v60;
                  if (*(double *)(*a1 + 8 * v60) < *(double *)(*a1 + 8 * v56))
                  {
                    unsigned int v56 = v59;
                    long long v57 = v54;
                  }
                  long long v54 = v58;
                }
                while (v58 != v15);
                if (v57 != v17)
                {
                  *unint64_t v17 = *v57;
                  unsigned int *v57 = v55;
                }
              }
            }
          }
          break;
        }
        unsigned int v19 = &v17[v18 >> 1];
        uint64_t v20 = v15 - 1;
        int v21 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<double>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v19, v15 - 1, *a1);
        uint64_t v22 = *v17;
        uint64_t v23 = *a1;
        double v24 = *(double *)(*a1 + 8 * v22);
        double v25 = *(double *)(*a1 + 8 * *v19);
        if (v24 >= v25)
        {
          unsigned __int16 v26 = v15 - 1;
          while (--v26 != v17)
          {
            uint64_t v27 = *v26;
            if (*(double *)(v23 + 8 * v27) < v25)
            {
              *unint64_t v17 = v27;
              *unsigned __int16 v26 = v22;
              ++v21;
              goto LABEL_20;
            }
          }
          int v40 = v17 + 1;
          uint64_t v41 = *v20;
          if (v24 >= *(double *)(v23 + 8 * v41))
          {
            while (v40 != v20)
            {
              uint64_t v42 = *v40;
              if (v24 < *(double *)(v23 + 8 * v42))
              {
                *v40++ = v41;
                *uint64_t v20 = v42;
                goto LABEL_52;
              }
              ++v40;
            }
LABEL_62:
            unint64_t v12 = v64;
            break;
          }
LABEL_52:
          if (v40 == v20) {
            goto LABEL_62;
          }
          while (1)
          {
            double v46 = *(double *)(v23 + 8 * *v17);
            do
            {
              unsigned int v48 = *v40++;
              unsigned int v47 = v48;
            }
            while (v46 >= *(double *)(v23 + 8 * v48));
            __int16 v49 = v40 - 1;
            do
            {
              unsigned int v51 = *--v20;
              unsigned int v50 = v51;
            }
            while (v46 < *(double *)(v23 + 8 * v51));
            if (v49 >= v20) {
              break;
            }
            unsigned int *v49 = v50;
            *uint64_t v20 = v47;
          }
          unint64_t v17 = v40 - 1;
          unint64_t v12 = v64;
          if (v49 > v16) {
            break;
          }
        }
        else
        {
          unsigned __int16 v26 = v15 - 1;
LABEL_20:
          int v28 = v17 + 1;
          unint64_t v12 = v64;
          if (v17 + 1 >= v26)
          {
            unsigned __int16 v33 = v17 + 1;
          }
          else
          {
            unint64_t v29 = v17 + 1;
            while (1)
            {
              double v30 = *(double *)(v23 + 8 * *v19);
              do
              {
                unsigned int v32 = *v29++;
                unsigned int v31 = v32;
              }
              while (*(double *)(v23 + 8 * v32) < v30);
              unsigned __int16 v33 = v29 - 1;
              do
              {
                unsigned int v35 = *--v26;
                unsigned int v34 = v35;
              }
              while (*(double *)(v23 + 8 * v35) >= v30);
              if (v33 >= v26) {
                break;
              }
              unsigned int *v33 = v34;
              *unsigned __int16 v26 = v31;
              ++v21;
              if (v33 == v19) {
                unsigned int v19 = v26;
              }
            }
          }
          if (v33 != v19)
          {
            uint64_t v36 = *v19;
            uint64_t v37 = *v33;
            if (*(double *)(v23 + 8 * v36) < *(double *)(v23 + 8 * v37))
            {
              unsigned int *v33 = v36;
              *unsigned int v19 = v37;
              ++v21;
            }
          }
          if (v33 == v16) {
            break;
          }
          if (!v21)
          {
            if (v33 <= v16)
            {
              long long v43 = v33 + 1;
              while (v43 != v15)
              {
                double v44 = *(double *)(v23 + 8 * *v43);
                double v45 = *(double *)(v23 + 8 * *(v43++ - 1));
                if (v44 < v45) {
                  goto LABEL_36;
                }
              }
            }
            else
            {
              while (v28 != v33)
              {
                double v38 = *(double *)(v23 + 8 * *v28);
                double v39 = *(double *)(v23 + 8 * *(v28++ - 1));
                if (v38 < v39) {
                  goto LABEL_36;
                }
              }
            }
            break;
          }
LABEL_36:
          if (v33 > v16) {
            float v15 = v33;
          }
          else {
            unint64_t v17 = v33 + 1;
          }
        }
      }
      while (v15 != v16);
      unint64_t v13 = v12;
    }
    if (*(void *)(a4 + 16) > v13)
    {
      int v61 = *(_DWORD *)(*(void *)(a4 + 32) + 4 * v13);
      uint64_t v62 = v66 + 24 * v67;
      *(_DWORD *)(v62 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v61;
      *double v10 = re::internal::GeomKDTree<double>::buildHelper(a1, a2, v12, a4, a5);
      *(void *)(v62 + 8) = re::internal::GeomKDTree<double>::buildHelper(a1, (v12 + 1), a3, a4, a5);
      return v10;
    }
LABEL_82:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_81:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_82;
  }
  *(_DWORD *)(v9 + 24 * v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * a2);
  *double v10 = 0;
  v10[1] = 0;
  return v10;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<double>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  double v6 = *(double *)(a4 + 8 * v4);
  double v7 = *(double *)(a4 + 8 * v5);
  uint64_t v8 = *a3;
  double v9 = *(double *)(a4 + 8 * v8);
  if (v6 < v7)
  {
    if (v9 < v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v12 = *a3;
    if (*(double *)(a4 + 8 * v12) >= v7) {
      return 1;
    }
    *a2 = v12;
    *a3 = v5;
    return 2;
  }
  if (v9 < v6)
  {
    *a2 = v8;
    *a3 = v4;
    uint64_t v10 = *a2;
    uint64_t v11 = *a1;
    if (*(double *)(a4 + 8 * v10) >= *(double *)(a4 + 8 * v11)) {
      return 1;
    }
    *a1 = v10;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<double>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, double *a3, void *a4, double a5)
{
  if (a2)
  {
    uint64_t v8 = a2;
    double v9 = (void *)result;
    double v10 = -a5;
    double v11 = a5 * a5;
    do
    {
      double v12 = *(double *)(*v9 + 8 * *((unsigned int *)v8 + 4));
      if (v12 == *a3) {
        double v13 = 0.0;
      }
      else {
        double v13 = *a3 - v12;
      }
      if (v13 >= v10)
      {
        if (v13 <= a5)
        {
          if (v13 * v13 <= v11) {
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          }
          uint64_t v14 = *v8++;
          uint64_t result = re::internal::GeomKDTree<double>::findWithinRadiusHelper(v9, v14, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      uint64_t v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

void *re::internal::GeomKDTree<re::Vector2<float>>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3 <= a2) {
    return 0;
  }
  unint64_t v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_85;
  }
  uint64_t v9 = a1[6];
  double v10 = (void *)(v9 + 24 * v6);
  if (a3 - a2 != 1)
  {
    unint64_t v11 = *(void *)(a4 + 16);
    if (v11 > a2)
    {
      unint64_t v13 = (a3 + a2) >> 1;
      if (v11 > v13)
      {
        unint64_t v81 = (void *)(v9 + 24 * v6);
        unint64_t v14 = (a3 - 1);
        if (v11 > v14)
        {
          unsigned int v80 = v6;
          uint64_t v78 = a1[6];
          uint64_t v15 = v9 + 24 * v6;
          uint64_t v16 = *(void *)(a4 + 32);
          uint64_t v17 = *(unsigned int *)(v16 + 4 * a2);
          uint64_t v18 = *(unsigned int *)(v16 + 4 * v13);
          uint64_t v19 = *(unsigned int *)(v16 + 4 * v14);
          uint64_t v20 = (unsigned __int8 *)(v15 + 20);
          float32x2_t v21 = vsub_f32(vmaxnm_f32(vmaxnm_f32(*(float32x2_t *)(*a1 + 8 * v17), *(float32x2_t *)(*a1 + 8 * v18)), *(float32x2_t *)(*a1 + 8 * v19)), vminnm_f32(vminnm_f32(*(float32x2_t *)(*a1 + 8 * v17), *(float32x2_t *)(*a1 + 8 * v18)), *(float32x2_t *)(*a1 + 8 * v19)));
          *(unsigned char *)(v15 + 20) = vmvn_s8((int8x8_t)vcge_f32(v21, (float32x2_t)vdup_lane_s32((int32x2_t)v21, 1))).u8[0] & 1;
          if (v13 != a3)
          {
            uint64_t v24 = *(void *)(a4 + 32);
            double v25 = (unsigned int *)(v24 + 4 * a3);
            unsigned __int16 v26 = (unsigned int *)(v24 + 4 * v13);
            uint64_t v27 = (unsigned int *)(v24 + 4 * a2);
            unint64_t v77 = (a3 + a2) >> 1;
            do
            {
              unint64_t v28 = v25 - v27;
              if (v28 < 2) {
                break;
              }
              if (v28 == 3)
              {
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector2<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v27, v27 + 1, v25 - 1, *a1, v20);
                break;
              }
              if (v28 == 2)
              {
                uint64_t v67 = *(v25 - 1);
                uint64_t v68 = *v27;
                if (*(float *)(*a1 + 8 * v67 + 4 * *v20) < *(float *)(*a1 + 8 * v68 + 4 * *v20))
                {
                  unsigned int *v27 = v67;
                  *(v25 - 1) = v68;
                }
                break;
              }
              if ((char *)v25 - (char *)v27 <= 31)
              {
                for (; v27 != v25 - 1; ++v27)
                {
                  if (v27 != v25)
                  {
                    unint64_t v69 = v27 + 1;
                    if (v27 + 1 != v25)
                    {
                      unsigned int v71 = *v27;
                      unsigned int v72 = *v27;
                      uint64_t v73 = v27;
                      long long v74 = v27 + 1;
                      do
                      {
                        unsigned int v76 = *v74++;
                        unsigned int v75 = v76;
                        uint64_t v70 = *a1 + 4 * *v20;
                        if (*(float *)(v70 + 8 * v76) < *(float *)(v70 + 8 * v72))
                        {
                          unsigned int v72 = v75;
                          uint64_t v73 = v69;
                        }
                        unint64_t v69 = v74;
                      }
                      while (v74 != v25);
                      if (v73 != v27)
                      {
                        unsigned int *v27 = *v73;
                        *uint64_t v73 = v71;
                      }
                    }
                  }
                }
                break;
              }
              unint64_t v29 = &v27[v28 >> 1];
              double v30 = v25 - 1;
              int v31 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector2<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v27, v29, v25 - 1, *a1, v20);
              uint64_t v32 = *v27;
              uint64_t v33 = *a1;
              uint64_t v34 = *v20;
              float v35 = *(float *)(*a1 + 8 * v32 + 4 * v34);
              float v36 = *(float *)(*a1 + 8 * *v29 + 4 * v34);
              if (v35 >= v36)
              {
                uint64_t v38 = v33 + 4 * v34;
                uint64_t v37 = v25 - 1;
                while (--v37 != v27)
                {
                  uint64_t v39 = *v37;
                  if (*(float *)(v38 + 8 * v39) < v36)
                  {
                    unsigned int *v27 = v39;
                    unsigned int *v37 = v32;
                    ++v31;
                    goto LABEL_25;
                  }
                }
                long long v54 = v27 + 1;
                uint64_t v55 = *v30;
                if (v35 >= *(float *)(v33 + 8 * v55 + 4 * v34))
                {
                  unint64_t v13 = v77;
                  if (v54 == v30) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v59 = *v54;
                    if (v35 < *(float *)(v38 + 8 * v59)) {
                      break;
                    }
                    if (++v54 == v30) {
                      goto LABEL_11;
                    }
                  }
                  *v54++ = v55;
                  *double v30 = v59;
                }
                else
                {
                  unint64_t v13 = v77;
                }
                if (v54 == v30) {
                  break;
                }
                while (1)
                {
                  uint64_t v60 = v33 + 4 * *v20;
                  float v61 = *(float *)(v60 + 8 * *v27);
                  do
                  {
                    unsigned int v63 = *v54++;
                    unsigned int v62 = v63;
                  }
                  while (v61 >= *(float *)(v60 + 8 * v63));
                  unint64_t v64 = v54 - 1;
                  do
                  {
                    unsigned int v66 = *--v30;
                    unsigned int v65 = v66;
                  }
                  while (v61 < *(float *)(v60 + 8 * v66));
                  if (v64 >= v30) {
                    break;
                  }
                  *unint64_t v64 = v65;
                  *double v30 = v62;
                }
                uint64_t v27 = v54 - 1;
                if (v64 > v26) {
                  break;
                }
              }
              else
              {
                uint64_t v37 = v25 - 1;
LABEL_25:
                int v40 = v27 + 1;
                if (v27 + 1 >= v37)
                {
                  double v46 = v27 + 1;
                }
                else
                {
                  uint64_t v41 = v27 + 1;
                  while (1)
                  {
                    uint64_t v42 = v33 + 4 * *v20;
                    float v43 = *(float *)(v42 + 8 * *v29);
                    do
                    {
                      unsigned int v45 = *v41++;
                      unsigned int v44 = v45;
                    }
                    while (*(float *)(v42 + 8 * v45) < v43);
                    double v46 = v41 - 1;
                    do
                    {
                      unsigned int v48 = *--v37;
                      unsigned int v47 = v48;
                    }
                    while (*(float *)(v42 + 8 * v48) >= v43);
                    if (v46 >= v37) {
                      break;
                    }
                    *double v46 = v47;
                    unsigned int *v37 = v44;
                    ++v31;
                    if (v46 == v29) {
                      unint64_t v29 = v37;
                    }
                  }
                }
                if (v46 != v29)
                {
                  uint64_t v49 = *v29;
                  uint64_t v50 = *v46;
                  if (*(float *)(v33 + 8 * v49 + 4 * *v20) < *(float *)(v33 + 8 * v50 + 4 * *v20))
                  {
                    *double v46 = v49;
                    *unint64_t v29 = v50;
                    ++v31;
                  }
                }
                unint64_t v13 = v77;
                if (v46 == v26) {
                  break;
                }
                if (!v31)
                {
                  uint64_t v51 = v33 + 4 * *v20;
                  if (v46 <= v26)
                  {
                    unsigned int v56 = v46 + 1;
                    while (v56 != v25)
                    {
                      float v57 = *(float *)(v51 + 8 * *v56);
                      float v58 = *(float *)(v51 + 8 * *(v56++ - 1));
                      if (v57 < v58) {
                        goto LABEL_41;
                      }
                    }
                  }
                  else
                  {
                    while (v40 != v46)
                    {
                      float v52 = *(float *)(v51 + 8 * *v40);
                      float v53 = *(float *)(v51 + 8 * *(v40++ - 1));
                      if (v52 < v53) {
                        goto LABEL_41;
                      }
                    }
                  }
                  break;
                }
LABEL_41:
                if (v46 > v26) {
                  double v25 = v46;
                }
                else {
                  uint64_t v27 = v46 + 1;
                }
              }
            }
            while (v25 != v26);
          }
LABEL_11:
          if (*(void *)(a4 + 16) > v13)
          {
            uint64_t v22 = v78 + 24 * v80;
            *(_DWORD *)(v22 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * v13);
            double v10 = v81;
            *unint64_t v81 = re::internal::GeomKDTree<re::Vector2<float>>::buildHelper(a1, a2, v13, a4, a5);
            *(void *)(v22 + 8) = re::internal::GeomKDTree<re::Vector2<float>>::buildHelper(a1, (v13 + 1), a3, a4, a5);
            return v10;
          }
LABEL_89:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_88:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_89;
      }
LABEL_87:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_88;
    }
LABEL_86:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_87;
  }
  if (*(void *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_85:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_86;
  }
  *(_DWORD *)(v9 + 24 * v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * a2);
  *double v10 = 0;
  v10[1] = 0;
  return v10;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector2<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  uint64_t v7 = *a5;
  float v8 = *(float *)(a4 + 8 * v5 + 4 * v7);
  uint64_t v9 = a4 + 8 * v6;
  uint64_t v10 = *a3;
  float v11 = *(float *)(a4 + 8 * v10 + 4 * v7);
  if (v8 < *(float *)(v9 + 4 * v7))
  {
    if (v11 < v8)
    {
      *a1 = v10;
      *a3 = v6;
      return 1;
    }
    *a1 = v5;
    *a2 = v6;
    uint64_t v14 = *a3;
    if (*(float *)(a4 + 8 * v14 + 4 * *a5) >= *(float *)(v9 + 4 * *a5)) {
      return 1;
    }
    *a2 = v14;
    *a3 = v6;
    return 2;
  }
  if (v11 < v8)
  {
    *a2 = v10;
    *a3 = v5;
    uint64_t v12 = *a2;
    uint64_t v13 = *a1;
    if (*(float *)(a4 + 8 * v12 + 4 * *a5) >= *(float *)(a4 + 8 * v13 + 4 * *a5)) {
      return 1;
    }
    *a1 = v12;
    *a2 = v13;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<re::Vector2<float>>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float32x2_t *a3, void *a4, double a5)
{
  if (a2)
  {
    float v8 = a2;
    uint64_t v9 = (void *)result;
    double v10 = -a5;
    double v11 = a5 * a5;
    do
    {
      uint64_t v12 = (float32x2_t *)(*v9 + 8 * *((unsigned int *)v8 + 4));
      uint64_t v13 = *((unsigned __int8 *)v8 + 20);
      float v14 = a3->f32[v13];
      float v15 = v12->f32[v13];
      if (v14 == v15) {
        double v16 = 0.0;
      }
      else {
        double v16 = (float)(v14 - v15);
      }
      if (v16 >= v10)
      {
        if (v16 <= a5)
        {
          uint32x2_t v17 = (uint32x2_t)vceq_f32(*v12, *a3);
          if ((vpmin_u32(v17, v17).u32[0] & 0x80000000) != 0)
          {
            double v19 = 0.0;
          }
          else
          {
            float32x2_t v18 = vsub_f32(*v12, *a3);
            double v19 = vaddv_f32(vmul_f32(v18, v18));
          }
          if (v19 <= v11) {
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          }
          uint64_t v20 = *v8++;
          uint64_t result = re::internal::GeomKDTree<re::Vector2<float>>::findWithinRadiusHelper(v9, v20, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      float v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

uint64_t re::internal::GeomKDTree<re::Vector3<float>>::build(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  uint64_t v13 = 0;
  v10[1] = 0;
  unint64_t v11 = 0;
  v10[0] = 0;
  int v12 = 0;
  re::DynamicArray<float>::resize((uint64_t)v10, a2);
  if (a2)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    unint64_t v7 = v11;
    uint64_t v8 = v13;
    do
    {
      if (v7 <= v5)
      {
        uint64_t v14 = 0;
        memset(v23, 0, sizeof(v23));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v15 = 136315906;
        double v16 = "operator[]";
        __int16 v17 = 1024;
        int v18 = 789;
        __int16 v19 = 2048;
        unint64_t v20 = v5;
        __int16 v21 = 2048;
        unint64_t v22 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v8 + 4 * v5) = v6 - 1;
      unint64_t v5 = v6++;
    }
    while (v5 < a2);
  }
  *(void *)(a1 + 32) = 0;
  ++*(_DWORD *)(a1 + 40);
  re::DynamicArray<re::internal::GeomKDTree<re::Vector3<float>>::Node>::resize((void *)(a1 + 16), a2);
  if (*(void *)(a1 + 8))
  {
    LODWORD(v23[0]) = 0;
    re::internal::GeomKDTree<re::Vector3<float>>::buildHelper((void *)a1, 0, a2, (uint64_t)v10, v23);
  }
  if (v10[0] && v13) {
    (*(void (**)(void))(*(void *)v10[0] + 40))();
  }
  return 1;
}

void *re::DynamicArray<re::internal::GeomKDTree<re::Vector3<float>>::Node>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    if (v4 < a2)
    {
      uint64_t v5 = v3[4];
      uint64_t v6 = v5 + 24 * v4;
      uint64_t v7 = v5 + 24 * a2 - v6;
      if (v7 >= 1)
      {
        unint64_t v8 = v7 / 0x18uLL + 1;
        do
        {
          *(void *)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(_DWORD *)(v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = -1;
          *(unsigned char *)(v6 + 20) = 0;
          --v8;
          v6 += 24;
        }
        while (v8 > 1);
      }
    }
  }
  void v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::internal::GeomKDTree<re::Vector3<float>>::buildHelper(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3 <= a2) {
    return 0;
  }
  unint64_t v7 = *a5;
  *a5 = v7 + 1;
  if (a1[4] <= v7)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v10 = a1[6];
  unint64_t v11 = (void *)(v10 + 24 * v7);
  if (a3 - a2 != 1)
  {
    unsigned int v13 = re::internal::GeomKDTree<re::Vector3<float>>::partition(a1, a2, a3, a4, (char *)(v10 + 24 * v7 + 20));
    unsigned int v14 = v13;
    if (*(void *)(a4 + 16) > (unint64_t)v13)
    {
      uint64_t v15 = v10 + 24 * v7;
      *(_DWORD *)(v15 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * v13);
      *unint64_t v11 = re::internal::GeomKDTree<re::Vector3<float>>::buildHelper(a1, a2, v13, a4, a5);
      *(void *)(v15 + 8) = re::internal::GeomKDTree<re::Vector3<float>>::buildHelper(a1, v14 + 1, a3, a4, a5);
      return v11;
    }
LABEL_12:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_11:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  *(_DWORD *)(v10 + 24 * v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * a2);
  *unint64_t v11 = 0;
  v11[1] = 0;
  return v11;
}

uint64_t re::internal::GeomKDTree<re::Vector3<float>>::partition(void *a1, unsigned int a2, unsigned int a3, uint64_t a4, char *a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v5 = *(void *)(a4 + 16);
  if (v5 <= a2)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = (a3 + a2) >> 1;
  if (v5 <= v6)
  {
LABEL_16:
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v19 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v7 = a3 - 1;
  if (v5 <= v7) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)(a4 + 32);
  float32x4_t v9 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v8 + 4 * a2));
  float32x4_t v10 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v8 + 4 * v6));
  v9.i32[3] = 0;
  v10.i32[3] = 0;
  float32x4_t v11 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v8 + 4 * v7));
  float32x4_t v12 = vmaxnmq_f32(v9, v10);
  v12.i32[3] = 0;
  v11.i32[3] = 0;
  float32x4_t v13 = vminnmq_f32(v9, v10);
  v13.i32[3] = 0;
  float32x4_t v14 = vsubq_f32(vmaxnmq_f32(v12, v11), vminnmq_f32(v13, v11));
  if (v14.f32[1] >= v14.f32[2]) {
    char v15 = 1;
  }
  else {
    char v15 = 2;
  }
  if (v14.f32[0] >= v14.f32[2] && v14.f32[0] >= v14.f32[1]) {
    char v15 = 0;
  }
  *a5 = v15;
  uint64_t v17 = *(void *)(a4 + 32);
  *(void *)&long long v19 = a1;
  *((void *)&v19 + 1) = a5;
  if (v6 != a3) {
    std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17 + 4 * a2, (unsigned int *)(v17 + 4 * v6), (unsigned int *)(v17 + 4 * a3), (uint64_t **)&v19);
  }
  return v6;
}

uint64_t std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  if (a3 != a2)
  {
    unint64_t v5 = a3;
    unint64_t v7 = (unsigned int *)result;
    do
    {
      unint64_t v8 = v5 - v7;
      if (v8 < 2) {
        break;
      }
      if (v8 == 3)
      {
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v7, v7 + 1, v5 - 1, a4);
      }
      if (v8 == 2)
      {
        uint64_t v48 = *(v5 - 1);
        uint64_t v49 = *v7;
        if (*(float *)(**a4 + 16 * v48 + 4 * *(unsigned __int8 *)a4[1]) < *(float *)(**a4
                                                                                      + 16 * v49
                                                                                      + 4 * *(unsigned __int8 *)a4[1]))
        {
          *unint64_t v7 = v48;
          *(v5 - 1) = v49;
        }
        return result;
      }
      if ((char *)v5 - (char *)v7 <= 31)
      {
        return (uint64_t)std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v7, v5, (uint64_t)a4);
      }
      float32x4_t v9 = &v7[v8 >> 1];
      float32x4_t v10 = v5 - 1;
      uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v7, v9, v5 - 1, a4);
      uint64_t v11 = *v7;
      float32x4_t v12 = a4[1];
      uint64_t v13 = **a4;
      uint64_t v14 = *(unsigned __int8 *)v12;
      float v15 = *(float *)(v13 + 16 * v11 + 4 * v14);
      float v16 = *(float *)(v13 + 16 * *v9 + 4 * v14);
      if (v15 >= v16)
      {
        uint64_t v18 = v13 + 4 * v14;
        uint64_t v17 = v5 - 1;
        while (--v17 != v7)
        {
          uint64_t v19 = *v17;
          if (*(float *)(v18 + 16 * v19) < v16)
          {
            *unint64_t v7 = v19;
            *uint64_t v17 = v11;
            uint64_t result = (result + 1);
            goto LABEL_13;
          }
        }
        uint64_t v34 = v7 + 1;
        uint64_t v35 = *v10;
        if (v15 >= *(float *)(v13 + 16 * v35 + 4 * v14))
        {
          while (v34 != v10)
          {
            uint64_t v36 = *v34;
            if (v15 < *(float *)(v18 + 16 * v36))
            {
              *v34++ = v35;
              *float32x4_t v10 = v36;
              goto LABEL_45;
            }
            ++v34;
          }
          return result;
        }
LABEL_45:
        if (v34 == v10) {
          return result;
        }
        while (1)
        {
          uint64_t v41 = v13 + 4 * *(unsigned __int8 *)v12;
          float v42 = *(float *)(v41 + 16 * *v7);
          do
          {
            unsigned int v44 = *v34++;
            unsigned int v43 = v44;
          }
          while (v42 >= *(float *)(v41 + 16 * v44));
          unsigned int v45 = v34 - 1;
          do
          {
            unsigned int v47 = *--v10;
            unsigned int v46 = v47;
          }
          while (v42 < *(float *)(v41 + 16 * v47));
          if (v45 >= v10) {
            break;
          }
          unsigned int *v45 = v46;
          *float32x4_t v10 = v43;
        }
        unint64_t v7 = v34 - 1;
        if (v45 > a2) {
          return result;
        }
      }
      else
      {
        uint64_t v17 = v5 - 1;
LABEL_13:
        long long v20 = v7 + 1;
        if (v7 + 1 >= v17)
        {
          unsigned __int16 v26 = v7 + 1;
        }
        else
        {
          long long v21 = v7 + 1;
          while (1)
          {
            uint64_t v22 = v13 + 4 * *(unsigned __int8 *)v12;
            float v23 = *(float *)(v22 + 16 * *v9);
            do
            {
              unsigned int v25 = *v21++;
              unsigned int v24 = v25;
            }
            while (*(float *)(v22 + 16 * v25) < v23);
            unsigned __int16 v26 = v21 - 1;
            do
            {
              unsigned int v28 = *--v17;
              unsigned int v27 = v28;
            }
            while (*(float *)(v22 + 16 * v28) >= v23);
            if (v26 >= v17) {
              break;
            }
            *unsigned __int16 v26 = v27;
            *uint64_t v17 = v24;
            uint64_t result = (result + 1);
            if (v26 == v9) {
              float32x4_t v9 = v17;
            }
          }
        }
        if (v26 != v9)
        {
          uint64_t v29 = *v9;
          uint64_t v30 = *v26;
          if (*(float *)(v13 + 16 * v29 + 4 * *(unsigned __int8 *)v12) < *(float *)(v13
                                                                                     + 16 * v30
                                                                                     + 4 * *(unsigned __int8 *)v12))
          {
            *unsigned __int16 v26 = v29;
            *float32x4_t v9 = v30;
            uint64_t result = (result + 1);
          }
        }
        if (v26 == a2) {
          return result;
        }
        if (!result)
        {
          if (v26 <= a2)
          {
            uint64_t v37 = v26 + 1;
            while (v37 != v5)
            {
              uint64_t v38 = *(unsigned __int8 *)v12;
              float v39 = *(float *)(v13 + 16 * *v37 + 4 * v38);
              float v40 = *(float *)(v13 + 16 * *(v37++ - 1) + 4 * v38);
              if (v39 < v40) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v20 != v26)
            {
              uint64_t v31 = *(unsigned __int8 *)v12;
              float v32 = *(float *)(v13 + 16 * *v20 + 4 * v31);
              float v33 = *(float *)(v13 + 16 * *(v20++ - 1) + 4 * v31);
              if (v32 < v33) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v26 > a2) {
          unint64_t v5 = v26;
        }
        else {
          unint64_t v7 = v26 + 1;
        }
      }
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = (unsigned __int8 *)a4[1];
  uint64_t v7 = **a4;
  uint64_t v8 = *v6;
  float v9 = *(float *)(v7 + 16 * v4 + 4 * v8);
  uint64_t v10 = v7 + 16 * v5;
  uint64_t v11 = *a3;
  float v12 = *(float *)(v7 + 16 * v11 + 4 * v8);
  if (v9 < *(float *)(v10 + 4 * v8))
  {
    if (v12 < v9)
    {
      *a1 = v11;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v15 = *a3;
    if (*(float *)(v7 + 16 * v15 + 4 * *v6) >= *(float *)(v10 + 4 * *v6)) {
      return 1;
    }
    *a2 = v15;
    *a3 = v5;
    return 2;
  }
  if (v12 < v9)
  {
    *a2 = v11;
    *a3 = v4;
    uint64_t v13 = *a2;
    uint64_t v14 = *a1;
    if (*(float *)(v7 + 16 * v13 + 4 * *v6) >= *(float *)(v7 + 16 * v14 + 4 * *v6)) {
      return 1;
    }
    *a1 = v13;
    *a2 = v14;
    return 2;
  }
  return 0;
}

unsigned int *std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  uint64_t v3 = a2 - 1;
  if (a2 - 1 != result)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = std::__min_element[abi:nn180100]<re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(v6, a2, a3);
      if (v6 != result)
      {
        unsigned int v7 = *v6;
        unsigned int *v6 = *result;
        *uint64_t result = v7;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

unsigned int *std::__min_element[abi:nn180100]<re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = result + 1;
    if (result + 1 != a2)
    {
      unsigned int v5 = *result;
      uint64_t v6 = result + 1;
      do
      {
        unsigned int v8 = *v6++;
        unsigned int v7 = v8;
        uint64_t v4 = **(void **)a3 + 4 * **(unsigned __int8 **)(a3 + 8);
        if (*(float *)(v4 + 16 * v8) < *(float *)(v4 + 16 * v5))
        {
          unsigned int v5 = v7;
          uint64_t result = v3;
        }
        uint64_t v3 = v6;
      }
      while (v6 != a2);
    }
  }
  return result;
}

uint64_t re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float32x4_t *a3, void *a4, double a5)
{
  if (a2)
  {
    unsigned int v8 = a2;
    float v9 = (void *)result;
    double v10 = -a5;
    double v11 = a5 * a5;
    do
    {
      float v12 = (float32x4_t *)(*v9 + 16 * *((unsigned int *)v8 + 4));
      uint64_t v13 = *((unsigned __int8 *)v8 + 20);
      float v14 = a3->f32[v13];
      float v15 = v12->f32[v13];
      if (v14 == v15) {
        double v16 = 0.0;
      }
      else {
        double v16 = (float)(v14 - v15);
      }
      if (v16 >= v10)
      {
        if (v16 <= a5)
        {
          uint32x4_t v17 = (uint32x4_t)vceqq_f32(*v12, *a3);
          v17.i32[3] = v17.i32[2];
          if ((vminvq_u32(v17) & 0x80000000) != 0)
          {
            double v20 = 0.0;
          }
          else
          {
            float32x4_t v18 = vsubq_f32(*v12, *a3);
            float32x4_t v19 = vmulq_f32(v18, v18);
            double v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
          }
          if (v20 <= v11) {
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          }
          long long v21 = *v8++;
          uint64_t result = re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper(v9, v21, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      unsigned int v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

void *re::internal::GeomKDTree<re::Vector4<float>>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  if (a3 <= a2) {
    return 0;
  }
  unint64_t v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v9 = a1[6];
  double v10 = (void *)(v9 + 24 * v6);
  if (a3 - a2 != 1)
  {
    unint64_t v11 = *(void *)(a4 + 16);
    if (v11 > a2)
    {
      unint64_t v13 = (a3 + a2) >> 1;
      if (v11 > v13)
      {
        unint64_t v14 = (a3 - 1);
        if (v11 > v14)
        {
          unsigned int v85 = v6;
          float v15 = (unsigned __int8 *)(v9 + 24 * v6 + 20);
          uint64_t v16 = *(void *)(a4 + 32);
          float32x4_t v17 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v16 + 4 * a2));
          float32x4_t v18 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v16 + 4 * v13));
          float32x4_t v19 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v16 + 4 * v14));
          float32x4_t v20 = vsubq_f32(vmaxnmq_f32(vmaxnmq_f32(v17, v18), v19), vminnmq_f32(vminnmq_f32(v17, v18), v19));
          BOOL v22 = v20.f32[0] < v20.f32[3] || v20.f32[0] < v20.f32[1] || v20.f32[0] < v20.f32[2];
          uint64_t v83 = a1[6];
          if (v22)
          {
            if (v20.f32[1] < v20.f32[2] || v20.f32[1] < v20.f32[3])
            {
              if (v20.f32[2] >= v20.f32[3]) {
                char v24 = 2;
              }
              else {
                char v24 = 3;
              }
            }
            else
            {
              char v24 = 1;
            }
          }
          else
          {
            char v24 = 0;
          }
          *float v15 = v24;
          if (v13 != a3)
          {
            uint64_t v28 = *(void *)(a4 + 32);
            uint64_t v29 = (unsigned int *)(v28 + 4 * a3);
            uint64_t v30 = (unsigned int *)(v28 + 4 * a2);
            unint64_t v81 = (unsigned int *)(v28 + 4 * v13);
            unint64_t v82 = (a3 + a2) >> 1;
            do
            {
              unint64_t v31 = v29 - v30;
              if (v31 < 2) {
                break;
              }
              if (v31 == 3)
              {
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector4<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v30, v30 + 1, v29 - 1, *a1, v15);
                unint64_t v13 = v82;
                break;
              }
              if (v31 == 2)
              {
                uint64_t v71 = *(v29 - 1);
                uint64_t v72 = *v30;
                if (*(float *)(*a1 + 16 * v71 + 4 * *v15) < *(float *)(*a1 + 16 * v72 + 4 * *v15))
                {
                  *uint64_t v30 = v71;
                  *(v29 - 1) = v72;
                }
                break;
              }
              if ((char *)v29 - (char *)v30 <= 31)
              {
                for (; v30 != v29 - 1; ++v30)
                {
                  if (v30 != v29)
                  {
                    uint64_t v73 = v30 + 1;
                    if (v30 + 1 != v29)
                    {
                      unsigned int v75 = *v30;
                      unsigned int v76 = *v30;
                      unint64_t v77 = v30;
                      uint64_t v78 = v30 + 1;
                      do
                      {
                        unsigned int v80 = *v78++;
                        unsigned int v79 = v80;
                        uint64_t v74 = *a1 + 4 * *v15;
                        if (*(float *)(v74 + 16 * v80) < *(float *)(v74 + 16 * v76))
                        {
                          unsigned int v76 = v79;
                          unint64_t v77 = v73;
                        }
                        uint64_t v73 = v78;
                      }
                      while (v78 != v29);
                      if (v77 != v30)
                      {
                        *uint64_t v30 = *v77;
                        *unint64_t v77 = v75;
                      }
                    }
                  }
                }
                break;
              }
              float v32 = &v30[v31 >> 1];
              float v33 = v29 - 1;
              int v34 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector4<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v30, v32, v29 - 1, *a1, v15);
              uint64_t v35 = *v30;
              uint64_t v36 = *a1;
              uint64_t v37 = *v15;
              float v38 = *(float *)(*a1 + 16 * v35 + 4 * v37);
              float v39 = *(float *)(*a1 + 16 * *v32 + 4 * v37);
              if (v38 >= v39)
              {
                uint64_t v41 = v36 + 4 * v37;
                float v40 = v29 - 1;
                unint64_t v13 = v82;
                while (--v40 != v30)
                {
                  uint64_t v42 = *v40;
                  if (*(float *)(v41 + 16 * v42) < v39)
                  {
                    *uint64_t v30 = v42;
                    unsigned int *v40 = v35;
                    ++v34;
                    goto LABEL_41;
                  }
                }
                float v58 = v30 + 1;
                uint64_t v59 = *v33;
                if (v38 >= *(float *)(v36 + 16 * v59 + 4 * v37))
                {
                  unint64_t v54 = (unint64_t)v81;
                  if (v58 == v33) {
                    break;
                  }
                  while (1)
                  {
                    uint64_t v63 = *v58;
                    if (v38 < *(float *)(v41 + 16 * v63)) {
                      break;
                    }
                    if (++v58 == v33) {
                      goto LABEL_27;
                    }
                  }
                  *v58++ = v59;
                  unsigned int *v33 = v63;
                }
                else
                {
                  unint64_t v54 = (unint64_t)v81;
                }
                if (v58 == v33) {
                  break;
                }
                while (1)
                {
                  uint64_t v64 = v36 + 4 * *v15;
                  float v65 = *(float *)(v64 + 16 * *v30);
                  do
                  {
                    unsigned int v67 = *v58++;
                    unsigned int v66 = v67;
                  }
                  while (v65 >= *(float *)(v64 + 16 * v67));
                  uint64_t v68 = v58 - 1;
                  do
                  {
                    unsigned int v70 = *--v33;
                    unsigned int v69 = v70;
                  }
                  while (v65 < *(float *)(v64 + 16 * v70));
                  if (v68 >= v33) {
                    break;
                  }
                  *uint64_t v68 = v69;
                  unsigned int *v33 = v66;
                }
                uint64_t v30 = v58 - 1;
                if ((unint64_t)v68 > v54) {
                  break;
                }
              }
              else
              {
                float v40 = v29 - 1;
                unint64_t v13 = v82;
LABEL_41:
                unsigned int v43 = v30 + 1;
                if (v30 + 1 >= v40)
                {
                  uint64_t v49 = v30 + 1;
                }
                else
                {
                  unsigned int v44 = v30 + 1;
                  while (1)
                  {
                    uint64_t v45 = v36 + 4 * *v15;
                    float v46 = *(float *)(v45 + 16 * *v32);
                    do
                    {
                      unsigned int v48 = *v44++;
                      unsigned int v47 = v48;
                    }
                    while (*(float *)(v45 + 16 * v48) < v46);
                    uint64_t v49 = v44 - 1;
                    do
                    {
                      unsigned int v51 = *--v40;
                      unsigned int v50 = v51;
                    }
                    while (*(float *)(v45 + 16 * v51) >= v46);
                    if (v49 >= v40) {
                      break;
                    }
                    unsigned int *v49 = v50;
                    unsigned int *v40 = v47;
                    ++v34;
                    if (v49 == v32) {
                      float v32 = v40;
                    }
                  }
                }
                if (v49 != v32)
                {
                  uint64_t v52 = *v32;
                  uint64_t v53 = *v49;
                  if (*(float *)(v36 + 16 * v52 + 4 * *v15) < *(float *)(v36 + 16 * v53 + 4 * *v15))
                  {
                    unsigned int *v49 = v52;
                    unsigned int *v32 = v53;
                    ++v34;
                  }
                }
                unint64_t v54 = (unint64_t)v81;
                if (v49 == v81) {
                  break;
                }
                if (!v34)
                {
                  uint64_t v55 = v36 + 4 * *v15;
                  if (v49 <= v81)
                  {
                    uint64_t v60 = v49 + 1;
                    while (v60 != v29)
                    {
                      float v61 = *(float *)(v55 + 16 * *v60);
                      float v62 = *(float *)(v55 + 16 * *(v60++ - 1));
                      if (v61 < v62) {
                        goto LABEL_57;
                      }
                    }
                  }
                  else
                  {
                    while (v43 != v49)
                    {
                      float v56 = *(float *)(v55 + 16 * *v43);
                      float v57 = *(float *)(v55 + 16 * *(v43++ - 1));
                      if (v56 < v57) {
                        goto LABEL_57;
                      }
                    }
                  }
                  break;
                }
LABEL_57:
                if (v49 > v81) {
                  uint64_t v29 = v49;
                }
                else {
                  uint64_t v30 = v49 + 1;
                }
              }
            }
            while (v29 != (unsigned int *)v54);
          }
LABEL_27:
          if (*(void *)(a4 + 16) > v13)
          {
            uint64_t v25 = v83 + 24 * v85;
            *(_DWORD *)(v25 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * v13);
            int v26 = v13;
            *double v10 = re::internal::GeomKDTree<re::Vector4<float>>::buildHelper(a1, a2, v13, a4, a5);
            *(void *)(v25 + 8) = re::internal::GeomKDTree<re::Vector4<float>>::buildHelper(a1, (v26 + 1), a3, a4, a5);
            return v10;
          }
LABEL_105:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_104:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_105;
      }
LABEL_103:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_104;
    }
LABEL_102:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_103;
  }
  if (*(void *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_101:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_102;
  }
  *(_DWORD *)(v9 + 24 * v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(_DWORD *)(*(void *)(a4 + 32) + 4 * a2);
  *double v10 = 0;
  v10[1] = 0;
  return v10;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector4<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1;
  uint64_t v7 = *a5;
  float v8 = *(float *)(a4 + 16 * v5 + 4 * v7);
  uint64_t v9 = a4 + 16 * v6;
  uint64_t v10 = *a3;
  float v11 = *(float *)(a4 + 16 * v10 + 4 * v7);
  if (v8 < *(float *)(v9 + 4 * v7))
  {
    if (v11 < v8)
    {
      *a1 = v10;
      *a3 = v6;
      return 1;
    }
    *a1 = v5;
    *a2 = v6;
    uint64_t v14 = *a3;
    if (*(float *)(a4 + 16 * v14 + 4 * *a5) >= *(float *)(v9 + 4 * *a5)) {
      return 1;
    }
    *a2 = v14;
    *a3 = v6;
    return 2;
  }
  if (v11 < v8)
  {
    *a2 = v10;
    *a3 = v5;
    uint64_t v12 = *a2;
    uint64_t v13 = *a1;
    if (*(float *)(a4 + 16 * v12 + 4 * *a5) >= *(float *)(a4 + 16 * v13 + 4 * *a5)) {
      return 1;
    }
    *a1 = v12;
    *a2 = v13;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<re::Vector4<float>>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float32x4_t *a3, void *a4, double a5)
{
  if (a2)
  {
    float v8 = a2;
    uint64_t v9 = (void *)result;
    double v10 = -a5;
    double v11 = a5 * a5;
    do
    {
      uint64_t v12 = (float32x4_t *)(*v9 + 16 * *((unsigned int *)v8 + 4));
      uint64_t v13 = *((unsigned __int8 *)v8 + 20);
      float v14 = a3->f32[v13];
      float v15 = v12->f32[v13];
      if (v14 == v15) {
        double v16 = 0.0;
      }
      else {
        double v16 = (float)(v14 - v15);
      }
      if (v16 >= v10)
      {
        if (v16 <= a5)
        {
          if ((vminvq_u32((uint32x4_t)vceqq_f32(*v12, *a3)) & 0x80000000) != 0)
          {
            double v19 = 0.0;
          }
          else
          {
            float32x4_t v17 = vsubq_f32(*v12, *a3);
            int8x16_t v18 = (int8x16_t)vmulq_f32(v17, v17);
            double v19 = vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)));
          }
          if (v19 <= v11) {
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          }
          float32x4_t v20 = *v8++;
          uint64_t result = re::internal::GeomKDTree<re::Vector4<float>>::findWithinRadiusHelper(v9, v20, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      float v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + a2;
}

{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  double v11 = (unsigned int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          double v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v78 = *(a2 - 1);
                uint64_t v79 = *v12;
                int v80 = *(char *)(*a3 + v79);
                if (*(unsigned __int8 *)(*a3 + v78) == v80) {
                  BOOL v81 = v78 < v79;
                }
                else {
                  BOOL v81 = *(char *)(*a3 + v78) < v80;
                }
                if (v81)
                {
                  unsigned int *v12 = v78;
                  *(a2 - 1) = v79;
                }
                break;
              case 3uLL:
                uint64_t v82 = *a3;
                break;
              case 4uLL:
                break;
              case 5uLL:
                uint64_t v83 = v12 + 2;
                uint64_t v84 = v12 + 3;
                uint64_t v85 = *a3;
                uint64_t v86 = *(a2 - 1);
                uint64_t v87 = v12[3];
                int v88 = *(char *)(*a3 + v87);
                BOOL v89 = *(char *)(*a3 + v86) < v88;
                if (*(unsigned __int8 *)(*a3 + v86) == v88) {
                  BOOL v89 = v86 < v87;
                }
                if (v89)
                {
                  *uint64_t v84 = v86;
                  *(a2 - 1) = v87;
                  uint64_t v90 = *v84;
                  uint64_t v91 = *v83;
                  int v92 = *(char *)(v85 + v91);
                  BOOL v93 = *(char *)(v85 + v90) < v92;
                  if (*(unsigned __int8 *)(v85 + v90) == v92) {
                    BOOL v93 = v90 < v91;
                  }
                  if (v93)
                  {
                    _DWORD *v83 = v90;
                    *uint64_t v84 = v91;
                    uint64_t v94 = v12[1];
                    int v95 = *(char *)(v85 + v94);
                    BOOL v96 = *(char *)(v85 + v90) < v95;
                    if (*(unsigned __int8 *)(v85 + v90) == v95) {
                      BOOL v96 = v90 < v94;
                    }
                    if (v96)
                    {
                      v12[1] = v90;
                      void v12[2] = v94;
                      int v97 = *(char *)(v85 + v90);
                      int v98 = *(unsigned __int8 *)(v85 + v90);
                      uint64_t v99 = *v12;
                      int v100 = *(char *)(v85 + v99);
                      BOOL v101 = v97 < v100;
                      int v102 = v98 == v100 ? v90 < v99 : v101;
                      if (v102 == 1)
                      {
                        unsigned int *v12 = v90;
                        v12[1] = v99;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v103 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v104 = *a3;
                  uint64_t v105 = 4;
                  uint64_t v106 = v12;
                  do
                  {
                    uint64_t v108 = *v106;
                    uint64_t v107 = v106[1];
                    uint64_t v106 = v103;
                    int v109 = *(char *)(v104 + v108);
                    LODWORD(v103) = v108;
                    BOOL v110 = v107 < v108;
                    if (*(unsigned __int8 *)(v104 + v107) != v109) {
                      BOOL v110 = *(char *)(v104 + v107) < v109;
                    }
                    if (v110)
                    {
                      uint64_t v111 = v105;
                      while (1)
                      {
                        *(unsigned int *)((char *)v12 + v111) = v103;
                        uint64_t v112 = v111 - 4;
                        if (v111 == 4) {
                          break;
                        }
                        uint64_t v103 = (unsigned int *)*(unsigned int *)((char *)v12 + v111 - 8);
                        BOOL v113 = *(char *)(v104 + v107) < *((char *)v103 + v104);
                        if (*(unsigned __int8 *)(v104 + v107) == *((unsigned __int8 *)v103 + v104)) {
                          BOOL v113 = v107 < v103;
                        }
                        v111 -= 4;
                        if (!v113)
                        {
                          float32x4_t v114 = (unsigned int *)((char *)v12 + v112);
                          goto LABEL_125;
                        }
                      }
                      float32x4_t v114 = v12;
LABEL_125:
                      *float32x4_t v114 = v107;
                    }
                    uint64_t v103 = v106 + 1;
                    v105 += 4;
                  }
                  while (v106 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v156 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v157 = *a3;
                do
                {
                  uint64_t v159 = *v11;
                  uint64_t v158 = v11[1];
                  double v11 = v156;
                  int v160 = *(char *)(v157 + v159);
                  LODWORD(v156) = v159;
                  BOOL v161 = v158 < v159;
                  if (*(unsigned __int8 *)(v157 + v158) != v160) {
                    BOOL v161 = *(char *)(v157 + v158) < v160;
                  }
                  if (v161)
                  {
                    uint64_t v162 = v11;
                    do
                    {
                      *uint64_t v162 = v156;
                      uint64_t v156 = (unsigned int *)*(v162 - 2);
                      int v163 = *((char *)v156 + v157);
                      BOOL v164 = *(char *)(v157 + v158) < v163;
                      if (*(unsigned __int8 *)(v157 + v158) == v163) {
                        BOOL v164 = v158 < v156;
                      }
                      --v162;
                    }
                    while (v164);
                    *uint64_t v162 = v158;
                  }
                  uint64_t v156 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v115 = (v14 - 2) >> 1;
              uint64_t v116 = *a3;
              int64_t v117 = v115;
              do
              {
                int64_t v118 = v117;
                if (v115 >= v117)
                {
                  uint64_t v119 = (2 * v117) | 1;
                  uint64_t v120 = &v12[v119];
                  if (2 * v118 + 2 < (uint64_t)v14)
                  {
                    uint64_t v121 = *v120;
                    uint64_t v122 = v120[1];
                    int v123 = *(char *)(v116 + v122);
                    BOOL v124 = *(char *)(v116 + v121) < v123;
                    if (*(unsigned __int8 *)(v116 + v121) == v123) {
                      BOOL v124 = v121 < v122;
                    }
                    BOOL v125 = !v124;
                    if (v124) {
                      LODWORD(v126) = v120[1];
                    }
                    else {
                      LODWORD(v126) = *v120;
                    }
                    if (!v125)
                    {
                      ++v120;
                      uint64_t v119 = 2 * v118 + 2;
                    }
                  }
                  else
                  {
                    LODWORD(v126) = *v120;
                  }
                  int v127 = &v12[v118];
                  uint64_t v128 = *v127;
                  int v129 = *(char *)(v116 + v128);
                  if (*(unsigned __int8 *)(v116 + v126) == v129) {
                    uint64_t result = v126 < v128;
                  }
                  else {
                    uint64_t result = *(char *)(v116 + v126) < v129;
                  }
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *int v127 = v126;
                      int v127 = v120;
                      if (v115 < v119) {
                        break;
                      }
                      uint64_t v130 = (2 * v119) | 1;
                      uint64_t v120 = &v12[v130];
                      uint64_t v119 = 2 * v119 + 2;
                      if (v119 < (uint64_t)v14)
                      {
                        uint64_t v126 = *v120;
                        uint64_t v131 = v120[1];
                        int v132 = *(char *)(v116 + v131);
                        BOOL v133 = *(char *)(v116 + v126) < v132;
                        if (*(unsigned __int8 *)(v116 + v126) == v132) {
                          BOOL v133 = v126 < v131;
                        }
                        if (v133)
                        {
                          LODWORD(v126) = v120[1];
                          ++v120;
                        }
                        else
                        {
                          uint64_t v119 = v130;
                        }
                      }
                      else
                      {
                        LODWORD(v126) = *v120;
                        uint64_t v119 = v130;
                      }
                      int v134 = *(char *)(v116 + v128);
                      uint64_t result = *(unsigned __int8 *)(v116 + v126) == v134
                             ? v126 < v128
                             : *(char *)(v116 + v126) < v134;
                    }
                    while (result != 1);
                    *int v127 = v128;
                  }
                }
                int64_t v117 = v118 - 1;
              }
              while (v118);
              uint64_t v135 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v136 = 0;
                unsigned int v137 = *v12;
                uint64_t v138 = *a3;
                uint64_t v139 = v12;
                do
                {
                  uint64_t v140 = &v139[v136 + 1];
                  uint64_t v141 = (2 * v136) | 1;
                  uint64_t v136 = 2 * v136 + 2;
                  if (v136 >= v135)
                  {
                    LODWORD(v142) = *v140;
                    uint64_t v136 = v141;
                  }
                  else
                  {
                    uint64_t v142 = *v140;
                    uint64_t result = *(unsigned __int8 *)(v138 + v142);
                    uint64_t v143 = v140[1];
                    int v144 = *(char *)(v138 + v143);
                    BOOL v145 = *(char *)(v138 + v142) < v144;
                    if (result == v144) {
                      BOOL v145 = v142 < v143;
                    }
                    if (v145)
                    {
                      LODWORD(v142) = v140[1];
                      ++v140;
                    }
                    else
                    {
                      uint64_t v136 = v141;
                    }
                  }
                  *uint64_t v139 = v142;
                  uint64_t v139 = v140;
                }
                while (v136 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
                if (v140 == --a2)
                {
                  *uint64_t v140 = v137;
                }
                else
                {
                  *uint64_t v140 = *a2;
                  *a2 = v137;
                  uint64_t v146 = (char *)v140 - (char *)v12 + 4;
                  if (v146 >= 5)
                  {
                    unint64_t v147 = (((unint64_t)v146 >> 2) - 2) >> 1;
                    uint64_t v148 = &v12[v147];
                    uint64_t v149 = *v148;
                    uint64_t v150 = *v140;
                    int v151 = *(char *)(v138 + v150);
                    uint64_t result = v149 < v150;
                    BOOL v152 = *(char *)(v138 + v149) < v151;
                    if (*(unsigned __int8 *)(v138 + v149) == v151) {
                      BOOL v152 = v149 < v150;
                    }
                    if (v152)
                    {
                      do
                      {
                        *uint64_t v140 = v149;
                        uint64_t v140 = v148;
                        if (!v147) {
                          break;
                        }
                        unint64_t v147 = (v147 - 1) >> 1;
                        uint64_t v148 = &v12[v147];
                        uint64_t v149 = *v148;
                        int v153 = *(char *)(v138 + v150);
                        uint64_t result = v149 < v150;
                        BOOL v154 = *(char *)(v138 + v149) < v153;
                        if (*(unsigned __int8 *)(v138 + v149) == v153) {
                          BOOL v154 = v149 < v150;
                        }
                      }
                      while (v154);
                      *uint64_t v140 = v150;
                    }
                  }
                }
              }
              while (v135-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          double v16 = &v12[v14 >> 1];
          uint64_t v17 = *a3;
          if ((unint64_t)v13 >= 0x201)
          {
            unsigned int v18 = *v11;
            *double v11 = *v16;
            *double v16 = v18;
          }
          else
          {
          }
          --a4;
          uint64_t v19 = *v11;
          uint64_t v20 = *a3;
          if (a5)
          {
            int v21 = *(unsigned __int8 *)(v20 + v19);
            break;
          }
          uint64_t v22 = *(v11 - 1);
          int v23 = *(char *)(v20 + v22);
          int v21 = *(unsigned __int8 *)(v20 + v19);
          BOOL v24 = v22 < v19;
          if (v21 != v23) {
            BOOL v24 = v23 < *(char *)(v20 + v19);
          }
          if (v24) {
            break;
          }
          uint64_t v52 = *(a2 - 1);
          int v53 = *(char *)(v20 + v52);
          BOOL v54 = v19 < v52;
          if (v21 != v53) {
            BOOL v54 = v53 > (char)v21;
          }
          if (v54)
          {
            uint64_t v12 = v11;
            do
            {
              unsigned int v55 = v12[1];
              ++v12;
              int v56 = *(char *)(v20 + v55);
              BOOL v57 = v19 < v55;
              if (v21 != v56) {
                BOOL v57 = v56 > (char)v21;
              }
            }
            while (!v57);
          }
          else
          {
            float v58 = v11 + 1;
            do
            {
              uint64_t v12 = v58;
              if (v58 >= a2) {
                break;
              }
              ++v58;
              uint64_t v59 = *v12;
              int v60 = *(char *)(v20 + v59);
              BOOL v61 = v19 < v59;
              if (v21 != v60) {
                BOOL v61 = v60 > (char)v21;
              }
            }
            while (!v61);
          }
          float v62 = a2;
          if (v12 < a2)
          {
            float v62 = a2;
            do
            {
              unsigned int v63 = *--v62;
              int v64 = *(char *)(v20 + v63);
              BOOL v65 = v19 < v63;
              if (v21 != v64) {
                BOOL v65 = v64 > (char)v21;
              }
            }
            while (v65);
          }
          if (v12 < v62)
          {
            unsigned int v66 = *v12;
            unsigned int v67 = *v62;
            do
            {
              unsigned int *v12 = v67;
              *float v62 = v66;
              int v68 = *(unsigned __int8 *)(v20 + v19);
              do
              {
                unsigned int v69 = v12[1];
                ++v12;
                unsigned int v66 = v69;
                int v70 = *(char *)(v20 + v69);
                BOOL v71 = v19 < v69;
                if (v68 == v70) {
                  BOOL v72 = v71;
                }
                else {
                  BOOL v72 = v70 > (char)v68;
                }
              }
              while (!v72);
              do
              {
                unsigned int v73 = *--v62;
                unsigned int v67 = v73;
                int v74 = *(char *)(v20 + v73);
                BOOL v75 = v19 < v73;
                if (v68 == v74) {
                  BOOL v76 = v75;
                }
                else {
                  BOOL v76 = v74 > (char)v68;
                }
              }
              while (v76);
            }
            while (v12 < v62);
          }
          unint64_t v77 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *double v11 = *v77;
          }
          a5 = 0;
          *unint64_t v77 = v19;
        }
        uint64_t v25 = 0;
        do
        {
          uint64_t v26 = v11[v25 + 1];
          int v27 = *(char *)(v20 + v26);
          if (v21 == v27) {
            BOOL v28 = v26 < v19;
          }
          else {
            BOOL v28 = v27 < (char)v21;
          }
          ++v25;
        }
        while (v28);
        uint64_t v29 = &v11[v25];
        uint64_t v30 = a2;
        if (v25 == 1)
        {
          uint64_t v30 = a2;
          do
          {
            if (v29 >= v30) {
              break;
            }
            unsigned int v34 = *--v30;
            int v35 = *(char *)(v20 + v34);
            BOOL v36 = v34 < v19;
            if (v21 != v35) {
              BOOL v36 = v35 < (char)v21;
            }
          }
          while (!v36);
        }
        else
        {
          do
          {
            unsigned int v31 = *--v30;
            int v32 = *(char *)(v20 + v31);
            BOOL v33 = v31 < v19;
            if (v21 != v32) {
              BOOL v33 = v32 < (char)v21;
            }
          }
          while (!v33);
        }
        if (v29 >= v30)
        {
          unsigned int v50 = v29 - 1;
        }
        else
        {
          unsigned int v37 = *v30;
          unsigned int v38 = v26;
          float v39 = v29;
          float v40 = v30;
          do
          {
            unsigned int *v39 = v37;
            unsigned int *v40 = v38;
            int v41 = *(unsigned __int8 *)(v20 + v19);
            do
            {
              unsigned int v42 = v39[1];
              ++v39;
              unsigned int v38 = v42;
              int v43 = *(char *)(v20 + v42);
              BOOL v44 = v42 < v19;
              if (v41 == v43) {
                BOOL v45 = v44;
              }
              else {
                BOOL v45 = v43 < (char)v41;
              }
            }
            while (v45);
            do
            {
              unsigned int v46 = *--v40;
              unsigned int v37 = v46;
              int v47 = *(char *)(v20 + v46);
              BOOL v48 = v46 < v19;
              if (v41 == v47) {
                BOOL v49 = v48;
              }
              else {
                BOOL v49 = v47 < (char)v41;
              }
            }
            while (!v49);
          }
          while (v39 < v40);
          unsigned int v50 = v39 - 1;
        }
        if (v50 != v11) {
          *double v11 = *v50;
        }
        *unsigned int v50 = v19;
        if (v29 >= v30) {
          break;
        }
LABEL_49:
        a5 = 0;
        uint64_t v12 = v50 + 1;
      }
      uint64_t v12 = v50 + 1;
      if (result) {
        break;
      }
      if (!v51) {
        goto LABEL_49;
      }
    }
    a2 = v50;
    if (!v51) {
      continue;
    }
    return result;
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  int v5 = *(char *)(a4 + v4);
  int v6 = *(unsigned __int8 *)(a4 + v4);
  uint64_t v7 = *result;
  int v8 = *(char *)(a4 + v7);
  BOOL v9 = v4 < v7;
  if (v6 != v8) {
    BOOL v9 = v5 < v8;
  }
  uint64_t v10 = *a3;
  int v11 = *(char *)(a4 + v10);
  BOOL v12 = v11 < v5;
  if (v6 == v11) {
    BOOL v12 = v10 < v4;
  }
  if (v9)
  {
    if (v12)
    {
      *uint64_t result = v10;
LABEL_17:
      *a3 = v7;
      return result;
    }
    *uint64_t result = v4;
    *a2 = v7;
    uint64_t v17 = *a3;
    int v18 = *(char *)(a4 + v7);
    BOOL v19 = *(char *)(a4 + v17) < v18;
    if (*(unsigned __int8 *)(a4 + v17) == v18) {
      BOOL v19 = v17 < v7;
    }
    if (v19)
    {
      *a2 = v17;
      goto LABEL_17;
    }
  }
  else if (v12)
  {
    *a2 = v10;
    *a3 = v4;
    uint64_t v13 = *a2;
    uint64_t v14 = *result;
    int v15 = *(char *)(a4 + v14);
    BOOL v16 = *(char *)(a4 + v13) < v15;
    if (*(unsigned __int8 *)(a4 + v13) == v15) {
      BOOL v16 = v13 < v14;
    }
    if (v16)
    {
      *uint64_t result = v13;
      *a2 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      int v10 = *(char *)(*a3 + v9);
      if (*(unsigned __int8 *)(*a3 + v8) == v10) {
        BOOL v11 = v8 < v9;
      }
      else {
        BOOL v11 = *(char *)(*a3 + v8) < v10;
      }
      if (v11)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      uint64_t v26 = a1 + 2;
      int v27 = a1 + 3;
      uint64_t v28 = *a3;
      uint64_t v29 = *(a2 - 1);
      uint64_t v30 = a1[3];
      int v31 = *(char *)(*a3 + v30);
      BOOL v32 = *(char *)(*a3 + v29) < v31;
      if (*(unsigned __int8 *)(*a3 + v29) == v31) {
        BOOL v32 = v29 < v30;
      }
      if (v32)
      {
        _DWORD *v27 = v29;
        *(a2 - 1) = v30;
        uint64_t v33 = *v27;
        uint64_t v34 = *v26;
        int v35 = *(char *)(v28 + v34);
        BOOL v36 = *(char *)(v28 + v33) < v35;
        if (*(unsigned __int8 *)(v28 + v33) == v35) {
          BOOL v36 = v33 < v34;
        }
        if (v36)
        {
          *uint64_t v26 = v33;
          _DWORD *v27 = v34;
          uint64_t v37 = a1[1];
          int v38 = *(char *)(v28 + v37);
          BOOL v39 = *(char *)(v28 + v33) < v38;
          if (*(unsigned __int8 *)(v28 + v33) == v38) {
            BOOL v39 = v33 < v37;
          }
          if (v39)
          {
            a1[1] = v33;
            a1[2] = v37;
            int v40 = *(char *)(v28 + v33);
            int v41 = *(unsigned __int8 *)(v28 + v33);
            uint64_t v42 = *a1;
            int v43 = *(char *)(v28 + v42);
            BOOL v44 = v40 < v43;
            int v45 = v41 == v43 ? v33 < v42 : v44;
            if (v45 == 1)
            {
              *a1 = v33;
              a1[1] = v42;
            }
          }
        }
      }
      return 1;
    default:
      BOOL v12 = a1 + 2;
      uint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v14 = 0;
      uint64_t v15 = *a3;
      uint64_t v16 = 12;
      break;
  }
  while (1)
  {
    uint64_t v17 = *v13;
    uint64_t v18 = *v12;
    int v19 = *(char *)(v15 + v18);
    BOOL v20 = *(char *)(v15 + v17) < v19;
    if (*(unsigned __int8 *)(v15 + v17) == v19) {
      BOOL v20 = v17 < v18;
    }
    if (v20)
    {
      uint64_t v21 = v16;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v21) = v18;
        uint64_t v22 = v21 - 4;
        if (v21 == 4) {
          break;
        }
        uint64_t v18 = *(unsigned int *)((char *)a1 + v21 - 8);
        int v23 = *(char *)(v15 + v18);
        BOOL v24 = *(char *)(v15 + v17) < v23;
        if (*(unsigned __int8 *)(v15 + v17) == v23) {
          BOOL v24 = v17 < v18;
        }
        v21 -= 4;
        if (!v24)
        {
          uint64_t v25 = (unsigned int *)((char *)a1 + v22);
          goto LABEL_20;
        }
      }
      uint64_t v25 = a1;
LABEL_20:
      *uint64_t v25 = v17;
      if (++v14 == 8) {
        return v13 + 1 == a2;
      }
    }
    BOOL v12 = v13;
    v16 += 4;
    if (++v13 == a2) {
      return 1;
    }
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  uint64_t v13 = *a3;
  int v14 = *(char *)(*a5 + v13);
  BOOL v15 = *(char *)(*a5 + v12) < v14;
  if (*(unsigned __int8 *)(*a5 + v12) == v14) {
    BOOL v15 = v12 < v13;
  }
  if (v15)
  {
    *a3 = v12;
    *a4 = v13;
    uint64_t v16 = *a3;
    uint64_t v17 = *a2;
    int v18 = *(char *)(v11 + v17);
    BOOL v19 = *(char *)(v11 + v16) < v18;
    if (*(unsigned __int8 *)(v11 + v16) == v18) {
      BOOL v19 = v16 < v17;
    }
    if (v19)
    {
      *a2 = v16;
      *a3 = v17;
      uint64_t v20 = *a2;
      int v21 = *(char *)(v11 + v20);
      int v22 = *(unsigned __int8 *)(v11 + v20);
      uint64_t v23 = *a1;
      int v24 = *(char *)(v11 + v23);
      BOOL v25 = v21 < v24;
      if (v22 == v24) {
        BOOL v26 = v20 < v23;
      }
      else {
        BOOL v26 = v25;
      }
      if (v26)
      {
        *a1 = v20;
        *a2 = v23;
      }
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<short>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 2 * a2;
}

{
  if (*(void *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 2 * a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v76 = *(a2 - 1);
                uint64_t v77 = *v12;
                int v78 = *(__int16 *)(*a3 + 2 * v77);
                if (*(unsigned __int16 *)(*a3 + 2 * v76) == (unsigned __int16)v78) {
                  BOOL v79 = v76 < v77;
                }
                else {
                  BOOL v79 = *(__int16 *)(*a3 + 2 * v76) < v78;
                }
                if (v79)
                {
                  unsigned int *v12 = v76;
                  *(a2 - 1) = v77;
                }
                break;
              case 3uLL:
                uint64_t v80 = *a3;
                break;
              case 4uLL:
                break;
              case 5uLL:
                BOOL v81 = v12 + 2;
                uint64_t v82 = v12 + 3;
                uint64_t v83 = *a3;
                uint64_t v84 = *(a2 - 1);
                uint64_t v85 = v12[3];
                int v86 = *(__int16 *)(*a3 + 2 * v85);
                BOOL v87 = *(__int16 *)(*a3 + 2 * v84) < v86;
                if (*(unsigned __int16 *)(*a3 + 2 * v84) == (unsigned __int16)v86) {
                  BOOL v87 = v84 < v85;
                }
                if (v87)
                {
                  *uint64_t v82 = v84;
                  *(a2 - 1) = v85;
                  uint64_t v88 = *v82;
                  int v89 = *(unsigned __int16 *)(v83 + 2 * v88);
                  uint64_t v90 = *v81;
                  int v91 = *(unsigned __int16 *)(v83 + 2 * v90);
                  BOOL v92 = *(__int16 *)(v83 + 2 * v88) < (__int16)v91;
                  if (v89 == v91) {
                    BOOL v92 = v88 < v90;
                  }
                  if (v92)
                  {
                    *BOOL v81 = v88;
                    *uint64_t v82 = v90;
                    uint64_t v93 = v12[1];
                    int v94 = *(__int16 *)(v83 + 2 * v93);
                    if (v89 == (unsigned __int16)v94 ? v88 < v93 : v94 > (__int16)v89)
                    {
                      v12[1] = v88;
                      void v12[2] = v93;
                      uint64_t v96 = *v12;
                      int v97 = *(__int16 *)(v83 + 2 * v96);
                      if (v89 == (unsigned __int16)v97 ? v88 < v96 : v97 > (__int16)v89)
                      {
                        unsigned int *v12 = v88;
                        v12[1] = v96;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v99 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v100 = *a3;
                  uint64_t v101 = 4;
                  int v102 = v12;
                  do
                  {
                    uint64_t v104 = *v102;
                    uint64_t v103 = v102[1];
                    int v102 = v99;
                    int v105 = *(unsigned __int16 *)(v100 + 2 * v103);
                    int v106 = *(__int16 *)(v100 + 2 * v104);
                    BOOL v107 = *(__int16 *)(v100 + 2 * v103) < v106;
                    if (v105 == (unsigned __int16)v106) {
                      BOOL v107 = v103 < v104;
                    }
                    if (v107)
                    {
                      uint64_t v108 = v101;
                      while (1)
                      {
                        *(unsigned int *)((char *)v12 + v108) = v104;
                        uint64_t v109 = v108 - 4;
                        if (v108 == 4) {
                          break;
                        }
                        uint64_t v104 = *(unsigned int *)((char *)v12 + v108 - 8);
                        int v110 = *(__int16 *)(v100 + 2 * v104);
                        if (v105 == (unsigned __int16)v110) {
                          BOOL v111 = v103 < v104;
                        }
                        else {
                          BOOL v111 = v110 > (__int16)v105;
                        }
                        uint64_t v108 = v109;
                        if (!v111)
                        {
                          uint64_t v112 = (unsigned int *)((char *)v12 + v109);
                          goto LABEL_127;
                        }
                      }
                      uint64_t v112 = v12;
LABEL_127:
                      *uint64_t v112 = v103;
                    }
                    uint64_t v99 = v102 + 1;
                    v101 += 4;
                  }
                  while (v102 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v156 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v157 = *a3;
                do
                {
                  uint64_t v159 = *v11;
                  uint64_t v158 = v11[1];
                  uint64_t v11 = v156;
                  int v160 = *(unsigned __int16 *)(v157 + 2 * v158);
                  int v161 = *(__int16 *)(v157 + 2 * v159);
                  BOOL v162 = *(__int16 *)(v157 + 2 * v158) < v161;
                  if (v160 == (unsigned __int16)v161) {
                    BOOL v162 = v158 < v159;
                  }
                  if (v162)
                  {
                    int v163 = v11;
                    do
                    {
                      unsigned int *v163 = v159;
                      uint64_t v159 = *(v163 - 2);
                      int v164 = *(__int16 *)(v157 + 2 * v159);
                      if (v160 == (unsigned __int16)v164) {
                        BOOL v165 = v158 < v159;
                      }
                      else {
                        BOOL v165 = v164 > (__int16)v160;
                      }
                      --v163;
                    }
                    while (v165);
                    unsigned int *v163 = v158;
                  }
                  uint64_t v156 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v113 = (v14 - 2) >> 1;
              uint64_t v114 = *a3;
              int64_t v115 = v113;
              do
              {
                int64_t v116 = v115;
                if (v113 >= v115)
                {
                  uint64_t v117 = (2 * v115) | 1;
                  int64_t v118 = &v12[v117];
                  if (2 * v116 + 2 < (uint64_t)v14)
                  {
                    uint64_t v119 = *v118;
                    uint64_t v120 = v118[1];
                    int v121 = *(__int16 *)(v114 + 2 * v120);
                    BOOL v122 = *(__int16 *)(v114 + 2 * v119) < v121;
                    if (*(unsigned __int16 *)(v114 + 2 * v119) == (unsigned __int16)v121) {
                      BOOL v122 = v119 < v120;
                    }
                    if (v122) {
                      BOOL result = v120;
                    }
                    else {
                      BOOL result = v119;
                    }
                    if (v122)
                    {
                      ++v118;
                      uint64_t v117 = 2 * v116 + 2;
                    }
                  }
                  else
                  {
                    BOOL result = *v118;
                  }
                  int v123 = &v12[v116];
                  int v124 = *(__int16 *)(v114 + 2 * result);
                  uint64_t v125 = *v123;
                  int v126 = *(unsigned __int16 *)(v114 + 2 * v125);
                  if (v126 == (unsigned __int16)v124) {
                    BOOL v127 = result < v125;
                  }
                  else {
                    BOOL v127 = v124 < *(__int16 *)(v114 + 2 * v125);
                  }
                  if (!v127)
                  {
                    do
                    {
                      *int v123 = result;
                      int v123 = v118;
                      if (v113 < v117) {
                        break;
                      }
                      uint64_t v128 = (2 * v117) | 1;
                      int64_t v118 = &v12[v128];
                      uint64_t v117 = 2 * v117 + 2;
                      if (v117 < (uint64_t)v14)
                      {
                        BOOL result = *v118;
                        uint64_t v129 = v118[1];
                        int v130 = *(__int16 *)(v114 + 2 * v129);
                        BOOL v131 = *(__int16 *)(v114 + 2 * result) < v130;
                        if (*(unsigned __int16 *)(v114 + 2 * result) == (unsigned __int16)v130) {
                          BOOL v131 = result < v129;
                        }
                        BOOL result = v131 ? v129 : result;
                        if (v131) {
                          ++v118;
                        }
                        else {
                          uint64_t v117 = v128;
                        }
                      }
                      else
                      {
                        BOOL result = *v118;
                        uint64_t v117 = v128;
                      }
                      int v132 = *(__int16 *)(v114 + 2 * result);
                    }
                    while (!(v126 == (unsigned __int16)v132
                            ? result < v125
                            : v132 < (__int16)v126));
                    *int v123 = v125;
                  }
                }
                int64_t v115 = v116 - 1;
              }
              while (v116);
              uint64_t v134 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v135 = 0;
                unsigned int v136 = *v12;
                uint64_t v137 = *a3;
                uint64_t v138 = v12;
                do
                {
                  uint64_t v139 = &v138[v135 + 1];
                  uint64_t v140 = (2 * v135) | 1;
                  uint64_t v135 = 2 * v135 + 2;
                  if (v135 >= v134)
                  {
                    LODWORD(v141) = *v139;
                    uint64_t v135 = v140;
                  }
                  else
                  {
                    uint64_t v141 = *v139;
                    BOOL result = *(unsigned __int16 *)(v137 + 2 * v141);
                    uint64_t v142 = v139[1];
                    int v143 = *(__int16 *)(v137 + 2 * v142);
                    BOOL v144 = *(__int16 *)(v137 + 2 * v141) < v143;
                    if (result == (unsigned __int16)v143) {
                      BOOL v144 = v141 < v142;
                    }
                    if (v144)
                    {
                      LODWORD(v141) = v139[1];
                      ++v139;
                    }
                    else
                    {
                      uint64_t v135 = v140;
                    }
                  }
                  unsigned int *v138 = v141;
                  uint64_t v138 = v139;
                }
                while (v135 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
                if (v139 == --a2)
                {
                  *uint64_t v139 = v136;
                }
                else
                {
                  *uint64_t v139 = *a2;
                  *a2 = v136;
                  uint64_t v145 = (char *)v139 - (char *)v12 + 4;
                  if (v145 >= 5)
                  {
                    unint64_t v146 = (((unint64_t)v145 >> 2) - 2) >> 1;
                    unint64_t v147 = &v12[v146];
                    uint64_t v148 = *v147;
                    int v149 = *(__int16 *)(v137 + 2 * v148);
                    uint64_t v150 = *v139;
                    int v151 = *(unsigned __int16 *)(v137 + 2 * v150);
                    BOOL result = v148 < v150;
                    if (v151 == (unsigned __int16)v149
                       ? v148 < v150
                       : v149 < *(__int16 *)(v137 + 2 * v150))
                    {
                      do
                      {
                        *uint64_t v139 = v148;
                        uint64_t v139 = v147;
                        if (!v146) {
                          break;
                        }
                        unint64_t v146 = (v146 - 1) >> 1;
                        unint64_t v147 = &v12[v146];
                        uint64_t v148 = *v147;
                        int v153 = *(__int16 *)(v137 + 2 * v148);
                        BOOL result = v153 < (__int16)v151;
                      }
                      while (v151 == (unsigned __int16)v153
                            ? v148 < v150
                            : v153 < (__int16)v151);
                      *uint64_t v139 = v150;
                    }
                  }
                }
              }
              while (v134-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[v14 >> 1];
          uint64_t v17 = *a3;
          if ((unint64_t)v13 >= 0x201)
          {
            unsigned int v18 = *v11;
            *uint64_t v11 = *v16;
            *uint64_t v16 = v18;
          }
          else
          {
          }
          --a4;
          uint64_t v19 = *v11;
          uint64_t v20 = *a3;
          if (a5)
          {
            int v21 = *(unsigned __int16 *)(v20 + 2 * v19);
            break;
          }
          uint64_t v22 = *(v11 - 1);
          int v23 = *(__int16 *)(v20 + 2 * v22);
          int v21 = *(unsigned __int16 *)(v20 + 2 * v19);
          BOOL v24 = v22 < v19;
          if (v21 != (unsigned __int16)v23) {
            BOOL v24 = v23 < *(__int16 *)(v20 + 2 * v19);
          }
          if (v24) {
            break;
          }
          uint64_t v51 = *(a2 - 1);
          int v52 = *(__int16 *)(v20 + 2 * v51);
          BOOL v53 = v19 < v51;
          if (v21 != (unsigned __int16)v52) {
            BOOL v53 = v52 > (__int16)v21;
          }
          if (v53)
          {
            uint64_t v12 = v11;
            do
            {
              unsigned int v54 = v12[1];
              ++v12;
              int v55 = *(__int16 *)(v20 + 2 * v54);
              BOOL v56 = v19 < v54;
              if (v21 != (unsigned __int16)v55) {
                BOOL v56 = v55 > (__int16)v21;
              }
            }
            while (!v56);
          }
          else
          {
            BOOL v57 = v11 + 1;
            do
            {
              uint64_t v12 = v57;
              if (v57 >= a2) {
                break;
              }
              ++v57;
              uint64_t v58 = *v12;
              int v59 = *(__int16 *)(v20 + 2 * v58);
              BOOL v60 = v19 < v58;
              if (v21 != (unsigned __int16)v59) {
                BOOL v60 = v59 > (__int16)v21;
              }
            }
            while (!v60);
          }
          BOOL v61 = a2;
          if (v12 < a2)
          {
            BOOL v61 = a2;
            do
            {
              unsigned int v62 = *--v61;
              int v63 = *(__int16 *)(v20 + 2 * v62);
              BOOL v64 = v19 < v62;
              if (v21 != (unsigned __int16)v63) {
                BOOL v64 = v63 > (__int16)v21;
              }
            }
            while (v64);
          }
          if (v12 < v61)
          {
            unsigned int v65 = *v12;
            unsigned int v66 = *v61;
            do
            {
              unsigned int *v12 = v66;
              unsigned int *v61 = v65;
              do
              {
                unsigned int v67 = v12[1];
                ++v12;
                unsigned int v65 = v67;
                int v68 = *(__int16 *)(v20 + 2 * v67);
                BOOL v69 = v19 < v67;
                if (v21 == (unsigned __int16)v68) {
                  BOOL v70 = v69;
                }
                else {
                  BOOL v70 = v68 > (__int16)v21;
                }
              }
              while (!v70);
              do
              {
                unsigned int v71 = *--v61;
                unsigned int v66 = v71;
                int v72 = *(__int16 *)(v20 + 2 * v71);
                BOOL v73 = v19 < v71;
                if (v21 == (unsigned __int16)v72) {
                  BOOL v74 = v73;
                }
                else {
                  BOOL v74 = v72 > (__int16)v21;
                }
              }
              while (v74);
            }
            while (v12 < v61);
          }
          BOOL v75 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v75;
          }
          a5 = 0;
          unsigned int *v75 = v19;
        }
        uint64_t v25 = 0;
        do
        {
          uint64_t v26 = v11[v25 + 1];
          int v27 = *(__int16 *)(v20 + 2 * v26);
          if (v21 == (unsigned __int16)v27) {
            BOOL v28 = v26 < v19;
          }
          else {
            BOOL v28 = v27 < (__int16)v21;
          }
          ++v25;
        }
        while (v28);
        uint64_t v29 = &v11[v25];
        uint64_t v30 = a2;
        if (v25 == 1)
        {
          uint64_t v30 = a2;
          do
          {
            if (v29 >= v30) {
              break;
            }
            unsigned int v34 = *--v30;
            int v35 = *(__int16 *)(v20 + 2 * v34);
            BOOL v36 = v34 < v19;
            if (v21 != (unsigned __int16)v35) {
              BOOL v36 = v35 < (__int16)v21;
            }
          }
          while (!v36);
        }
        else
        {
          do
          {
            unsigned int v31 = *--v30;
            int v32 = *(__int16 *)(v20 + 2 * v31);
            BOOL v33 = v31 < v19;
            if (v21 != (unsigned __int16)v32) {
              BOOL v33 = v32 < (__int16)v21;
            }
          }
          while (!v33);
        }
        if (v29 >= v30)
        {
          BOOL v49 = v29 - 1;
        }
        else
        {
          unsigned int v37 = *v30;
          unsigned int v38 = v26;
          BOOL v39 = v29;
          int v40 = v30;
          do
          {
            unsigned int *v39 = v37;
            unsigned int *v40 = v38;
            do
            {
              unsigned int v41 = v39[1];
              ++v39;
              unsigned int v38 = v41;
              int v42 = *(__int16 *)(v20 + 2 * v41);
              BOOL v43 = v41 < v19;
              if (v21 == (unsigned __int16)v42) {
                BOOL v44 = v43;
              }
              else {
                BOOL v44 = v42 < (__int16)v21;
              }
            }
            while (v44);
            do
            {
              unsigned int v45 = *--v40;
              unsigned int v37 = v45;
              int v46 = *(__int16 *)(v20 + 2 * v45);
              BOOL v47 = v45 < v19;
              if (v21 == (unsigned __int16)v46) {
                BOOL v48 = v47;
              }
              else {
                BOOL v48 = v46 < (__int16)v21;
              }
            }
            while (!v48);
          }
          while (v39 < v40);
          BOOL v49 = v39 - 1;
        }
        if (v49 != v11) {
          *uint64_t v11 = *v49;
        }
        unsigned int *v49 = v19;
        if (v29 >= v30) {
          break;
        }
LABEL_49:
        a5 = 0;
        uint64_t v12 = v49 + 1;
      }
      uint64_t v12 = v49 + 1;
      if (result) {
        break;
      }
      if (!v50) {
        goto LABEL_49;
      }
    }
    a2 = v49;
    if (!v50) {
      continue;
    }
    return result;
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  int v5 = *(__int16 *)(a4 + 2 * v4);
  int v6 = *(unsigned __int16 *)(a4 + 2 * v4);
  uint64_t v7 = *result;
  int v8 = *(__int16 *)(a4 + 2 * v7);
  BOOL v9 = v5 < v8;
  if (v6 == (unsigned __int16)v8) {
    BOOL v9 = v4 < v7;
  }
  uint64_t v10 = *a3;
  int v11 = *(__int16 *)(a4 + 2 * v10);
  BOOL v12 = v11 < v5;
  if (v6 == (unsigned __int16)v11) {
    BOOL v12 = v10 < v4;
  }
  if (v9)
  {
    if (v12)
    {
      *BOOL result = v10;
LABEL_19:
      *a3 = v7;
      return result;
    }
    int v18 = *(unsigned __int16 *)(a4 + 2 * v7);
    *BOOL result = v4;
    *a2 = v7;
    uint64_t v19 = *a3;
    int v20 = *(__int16 *)(a4 + 2 * v19);
    if (v18 == (unsigned __int16)v20) {
      BOOL v21 = v19 < v7;
    }
    else {
      BOOL v21 = v20 < (__int16)v18;
    }
    if (v21)
    {
      *a2 = v19;
      goto LABEL_19;
    }
  }
  else if (v12)
  {
    *a2 = v10;
    *a3 = v4;
    uint64_t v13 = *a2;
    int v14 = *(unsigned __int16 *)(a4 + 2 * v13);
    uint64_t v15 = *result;
    int v16 = *(unsigned __int16 *)(a4 + 2 * v15);
    if (v14 == v16 ? v13 < v15 : (__int16)v14 < (__int16)v16)
    {
      *BOOL result = v13;
      *a2 = v15;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      int v10 = *(__int16 *)(*a3 + 2 * v9);
      if (*(unsigned __int16 *)(*a3 + 2 * v8) == (unsigned __int16)v10) {
        BOOL v11 = v8 < v9;
      }
      else {
        BOOL v11 = *(__int16 *)(*a3 + 2 * v8) < v10;
      }
      if (v11)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      int v27 = a1 + 2;
      BOOL v28 = a1 + 3;
      uint64_t v29 = *a3;
      uint64_t v30 = *(a2 - 1);
      uint64_t v31 = a1[3];
      int v32 = *(__int16 *)(*a3 + 2 * v31);
      BOOL v33 = *(__int16 *)(*a3 + 2 * v30) < v32;
      if (*(unsigned __int16 *)(*a3 + 2 * v30) == (unsigned __int16)v32) {
        BOOL v33 = v30 < v31;
      }
      if (v33)
      {
        _DWORD *v28 = v30;
        *(a2 - 1) = v31;
        uint64_t v34 = *v28;
        int v35 = *(unsigned __int16 *)(v29 + 2 * v34);
        uint64_t v36 = *v27;
        int v37 = *(unsigned __int16 *)(v29 + 2 * v36);
        BOOL v38 = *(__int16 *)(v29 + 2 * v34) < (__int16)v37;
        if (v35 == v37) {
          BOOL v38 = v34 < v36;
        }
        if (v38)
        {
          _DWORD *v27 = v34;
          _DWORD *v28 = v36;
          uint64_t v39 = a1[1];
          int v40 = *(__int16 *)(v29 + 2 * v39);
          if (v35 == (unsigned __int16)v40 ? v34 < v39 : v40 > (__int16)v35)
          {
            a1[1] = v34;
            a1[2] = v39;
            uint64_t v42 = *a1;
            int v43 = *(__int16 *)(v29 + 2 * v42);
            if (v35 == (unsigned __int16)v43 ? v34 < v42 : v43 > (__int16)v35)
            {
              *a1 = v34;
              a1[1] = v42;
            }
          }
        }
      }
      return 1;
    default:
      BOOL v12 = a1 + 2;
      uint64_t v13 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v14 = 0;
      uint64_t v15 = *a3;
      uint64_t v16 = 12;
      break;
  }
  while (1)
  {
    uint64_t v17 = *v13;
    int v18 = *(unsigned __int16 *)(v15 + 2 * v17);
    uint64_t v19 = *v12;
    int v20 = *(__int16 *)(v15 + 2 * v19);
    BOOL v21 = *(__int16 *)(v15 + 2 * v17) < v20;
    if (v18 == (unsigned __int16)v20) {
      BOOL v21 = v17 < v19;
    }
    if (v21)
    {
      uint64_t v22 = v16;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v22) = v19;
        uint64_t v23 = v22 - 4;
        if (v22 == 4) {
          break;
        }
        uint64_t v19 = *(unsigned int *)((char *)a1 + v22 - 8);
        int v24 = *(__int16 *)(v15 + 2 * v19);
        BOOL v25 = v17 < v19;
        if (v18 != (unsigned __int16)v24) {
          BOOL v25 = v24 > (__int16)v18;
        }
        uint64_t v22 = v23;
        if (!v25)
        {
          uint64_t v26 = (unsigned int *)((char *)a1 + v23);
          goto LABEL_20;
        }
      }
      uint64_t v26 = a1;
LABEL_20:
      *uint64_t v26 = v17;
      if (++v14 == 8) {
        return v13 + 1 == a2;
      }
    }
    BOOL v12 = v13;
    v16 += 4;
    if (++v13 == a2) {
      return 1;
    }
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  uint64_t v13 = *a3;
  int v14 = *(__int16 *)(*a5 + 2 * v13);
  BOOL v15 = *(__int16 *)(*a5 + 2 * v12) < v14;
  if (*(unsigned __int16 *)(*a5 + 2 * v12) == (unsigned __int16)v14) {
    BOOL v15 = v12 < v13;
  }
  if (v15)
  {
    *a3 = v12;
    *a4 = v13;
    uint64_t v16 = *a3;
    int v17 = *(unsigned __int16 *)(v11 + 2 * v16);
    uint64_t v18 = *a2;
    int v19 = *(unsigned __int16 *)(v11 + 2 * v18);
    if (v17 == v19 ? v16 < v18 : (__int16)v17 < (__int16)v19)
    {
      *a2 = v16;
      *a3 = v18;
      uint64_t v21 = *a2;
      int v22 = *(unsigned __int16 *)(v11 + 2 * v21);
      uint64_t v23 = *a1;
      int v24 = *(unsigned __int16 *)(v11 + 2 * v23);
      if (v22 == v24) {
        BOOL v25 = v21 < v23;
      }
      else {
        BOOL v25 = (__int16)v22 < (__int16)v24;
      }
      if (v25)
      {
        *a1 = v21;
        *a2 = v23;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v85 = *(a2 - 1);
                unsigned int v86 = *(unsigned __int8 *)(*a3 + v85);
                uint64_t v87 = *v12;
                unsigned int v88 = *(unsigned __int8 *)(*a3 + v87);
                BOOL v6 = v86 == v88;
                BOOL v89 = v86 < v88;
                if (v6) {
                  BOOL v89 = v85 < v87;
                }
                if (v89)
                {
                  unsigned int *v12 = v85;
                  *(a2 - 1) = v87;
                }
                break;
              case 3uLL:
                uint64_t v90 = *a3;
                break;
              case 4uLL:
                break;
              case 5uLL:
                int v91 = v12 + 2;
                BOOL v92 = v12 + 3;
                uint64_t v93 = *a3;
                uint64_t v94 = *(a2 - 1);
                unsigned int v95 = *(unsigned __int8 *)(*a3 + v94);
                uint64_t v96 = v12[3];
                unsigned int v97 = *(unsigned __int8 *)(*a3 + v96);
                BOOL v6 = v95 == v97;
                BOOL v98 = v95 < v97;
                if (v6) {
                  BOOL v98 = v94 < v96;
                }
                if (v98)
                {
                  *BOOL v92 = v94;
                  *(a2 - 1) = v96;
                  uint64_t v99 = *v92;
                  unsigned int v100 = *(unsigned __int8 *)(v93 + v99);
                  uint64_t v101 = *v91;
                  unsigned int v102 = *(unsigned __int8 *)(v93 + v101);
                  BOOL v6 = v100 == v102;
                  BOOL v103 = v100 < v102;
                  if (v6) {
                    BOOL v103 = v99 < v101;
                  }
                  if (v103)
                  {
                    *int v91 = v99;
                    *BOOL v92 = v101;
                    unsigned int v104 = *(unsigned __int8 *)(v93 + v99);
                    uint64_t v105 = v12[1];
                    unsigned int v106 = *(unsigned __int8 *)(v93 + v105);
                    BOOL v6 = v104 == v106;
                    BOOL v107 = v104 < v106;
                    if (v6) {
                      BOOL v107 = v99 < v105;
                    }
                    if (v107)
                    {
                      v12[1] = v99;
                      void v12[2] = v105;
                      unsigned int v108 = *(unsigned __int8 *)(v93 + v99);
                      uint64_t v109 = *v12;
                      unsigned int v110 = *(unsigned __int8 *)(v93 + v109);
                      BOOL v6 = v108 == v110;
                      BOOL v111 = v108 < v110;
                      if (v6) {
                        BOOL v111 = v99 < v109;
                      }
                      if (v111)
                      {
                        unsigned int *v12 = v99;
                        v12[1] = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                uint64_t v112 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v113 = *a3;
                  uint64_t v114 = 4;
                  int64_t v115 = v12;
                  do
                  {
                    uint64_t v117 = *v115;
                    uint64_t v116 = v115[1];
                    int64_t v115 = v112;
                    unsigned int v118 = *(unsigned __int8 *)(v113 + v116);
                    unsigned int v119 = *(unsigned __int8 *)(v113 + v117);
                    LODWORD(v112) = v117;
                    BOOL v120 = v116 < v117;
                    BOOL v6 = v118 == v119;
                    BOOL v121 = v118 < v119;
                    if (!v6) {
                      BOOL v120 = v121;
                    }
                    if (v120)
                    {
                      uint64_t v122 = v114;
                      do
                      {
                        *(unsigned int *)((char *)v12 + v122) = v112;
                        uint64_t v123 = v122 - 4;
                        if (v122 == 4)
                        {
                          uint64_t v129 = v12;
                          goto LABEL_119;
                        }
                        int v124 = (char *)v12 + v122;
                        unsigned int v125 = *(unsigned __int8 *)(v113 + v116);
                        uint64_t v112 = (unsigned int *)*((unsigned int *)v124 - 2);
                        unsigned int v126 = *((unsigned __int8 *)v112 + v113);
                        BOOL v6 = v125 == v126;
                        BOOL v127 = v125 < v126;
                        if (v6) {
                          BOOL v128 = v116 < v112;
                        }
                        else {
                          BOOL v128 = v127;
                        }
                        uint64_t v122 = v123;
                      }
                      while (v128);
                      uint64_t v129 = (unsigned int *)((char *)v12 + v123);
LABEL_119:
                      *uint64_t v129 = v116;
                    }
                    uint64_t v112 = v115 + 1;
                    v114 += 4;
                  }
                  while (v115 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v178 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v179 = *a3;
                do
                {
                  uint64_t v181 = *v11;
                  uint64_t v180 = v11[1];
                  uint64_t v11 = v178;
                  unsigned int v182 = *(unsigned __int8 *)(v179 + v180);
                  unsigned int v183 = *(unsigned __int8 *)(v179 + v181);
                  LODWORD(v178) = v181;
                  BOOL v184 = v180 < v181;
                  BOOL v6 = v182 == v183;
                  BOOL v185 = v182 < v183;
                  if (!v6) {
                    BOOL v184 = v185;
                  }
                  if (v184)
                  {
                    uint64_t v186 = v11;
                    do
                    {
                      *uint64_t v186 = v178;
                      unsigned int v187 = *(unsigned __int8 *)(v179 + v180);
                      uint64_t v178 = (unsigned int *)*(v186 - 2);
                      unsigned int v188 = *((unsigned __int8 *)v178 + v179);
                      BOOL v6 = v187 == v188;
                      BOOL v189 = v187 < v188;
                      if (v6) {
                        BOOL v189 = v180 < v178;
                      }
                      --v186;
                    }
                    while (v189);
                    *uint64_t v186 = v180;
                  }
                  uint64_t v178 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v130 = (v14 - 2) >> 1;
              uint64_t v131 = *a3;
              int64_t v132 = v130;
              do
              {
                int64_t v133 = v132;
                if (v130 >= v132)
                {
                  uint64_t v134 = (2 * v132) | 1;
                  uint64_t v135 = &v12[v134];
                  if (2 * v133 + 2 < (uint64_t)v14)
                  {
                    uint64_t v136 = *v135;
                    unsigned int v137 = *(unsigned __int8 *)(v131 + v136);
                    uint64_t v138 = v135[1];
                    unsigned int v139 = *(unsigned __int8 *)(v131 + v138);
                    BOOL v6 = v137 == v139;
                    BOOL v140 = v137 < v139;
                    if (v6) {
                      BOOL v140 = v136 < v138;
                    }
                    BOOL v141 = !v140;
                    if (v140) {
                      LODWORD(v142) = v135[1];
                    }
                    else {
                      LODWORD(v142) = *v135;
                    }
                    if (!v141)
                    {
                      ++v135;
                      uint64_t v134 = 2 * v133 + 2;
                    }
                  }
                  else
                  {
                    LODWORD(v142) = *v135;
                  }
                  int v143 = &v12[v133];
                  unsigned int v144 = *(unsigned __int8 *)(v131 + v142);
                  uint64_t v145 = *v143;
                  unsigned int v146 = *(unsigned __int8 *)(v131 + v145);
                  BOOL v6 = v144 == v146;
                  LODWORD(result) = v144 < v146;
                  if (v6) {
                    BOOL result = v142 < v145;
                  }
                  else {
                    BOOL result = result;
                  }
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *int v143 = v142;
                      int v143 = v135;
                      if (v130 < v134) {
                        break;
                      }
                      uint64_t v147 = (2 * v134) | 1;
                      uint64_t v135 = &v12[v147];
                      uint64_t v134 = 2 * v134 + 2;
                      if (v134 < (uint64_t)v14)
                      {
                        uint64_t v142 = *v135;
                        unsigned int v148 = *(unsigned __int8 *)(v131 + v142);
                        uint64_t v149 = v135[1];
                        unsigned int v150 = *(unsigned __int8 *)(v131 + v149);
                        BOOL v6 = v148 == v150;
                        BOOL v151 = v148 < v150;
                        if (v6) {
                          BOOL v151 = v142 < v149;
                        }
                        if (v151)
                        {
                          LODWORD(v142) = v135[1];
                          ++v135;
                        }
                        else
                        {
                          uint64_t v134 = v147;
                        }
                      }
                      else
                      {
                        LODWORD(v142) = *v135;
                        uint64_t v134 = v147;
                      }
                      unsigned int v152 = *(unsigned __int8 *)(v131 + v142);
                      unsigned int v153 = *(unsigned __int8 *)(v131 + v145);
                      BOOL v6 = v152 == v153;
                      LODWORD(result) = v152 < v153;
                      BOOL result = v6 ? v142 < v145 : result;
                    }
                    while (result != 1);
                    *int v143 = v145;
                  }
                }
                int64_t v132 = v133 - 1;
              }
              while (v133);
              uint64_t v154 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v155 = 0;
                unsigned int v156 = *v12;
                uint64_t v157 = *a3;
                uint64_t v158 = v12;
                do
                {
                  uint64_t v159 = &v158[v155 + 1];
                  uint64_t v160 = (2 * v155) | 1;
                  uint64_t v155 = 2 * v155 + 2;
                  if (v155 >= v154)
                  {
                    LODWORD(v161) = *v159;
                    uint64_t v155 = v160;
                  }
                  else
                  {
                    uint64_t v161 = *v159;
                    unsigned int v162 = *(unsigned __int8 *)(v157 + v161);
                    BOOL result = (uint64_t)(v159 + 1);
                    uint64_t v163 = v159[1];
                    unsigned int v164 = *(unsigned __int8 *)(v157 + v163);
                    BOOL v6 = v162 == v164;
                    BOOL v165 = v162 < v164;
                    if (v6) {
                      BOOL v165 = v161 < v163;
                    }
                    if (v165)
                    {
                      LODWORD(v161) = v159[1];
                      ++v159;
                    }
                    else
                    {
                      uint64_t v155 = v160;
                    }
                  }
                  unsigned int *v158 = v161;
                  uint64_t v158 = v159;
                }
                while (v155 <= (uint64_t)((unint64_t)(v154 - 2) >> 1));
                if (v159 == --a2)
                {
                  *uint64_t v159 = v156;
                }
                else
                {
                  *uint64_t v159 = *a2;
                  *a2 = v156;
                  uint64_t v166 = (char *)v159 - (char *)v12 + 4;
                  if (v166 >= 5)
                  {
                    unint64_t v167 = (((unint64_t)v166 >> 2) - 2) >> 1;
                    uint64_t v168 = &v12[v167];
                    uint64_t v169 = *v168;
                    unsigned int v170 = *(unsigned __int8 *)(v157 + v169);
                    uint64_t v171 = *v159;
                    unsigned int v172 = *(unsigned __int8 *)(v157 + v171);
                    BOOL v6 = v170 == v172;
                    BOOL v173 = v170 < v172;
                    if (v6) {
                      BOOL v173 = v169 < v171;
                    }
                    if (v173)
                    {
                      do
                      {
                        *uint64_t v159 = v169;
                        uint64_t v159 = v168;
                        if (!v167) {
                          break;
                        }
                        unint64_t v167 = (v167 - 1) >> 1;
                        uint64_t v168 = &v12[v167];
                        uint64_t v169 = *v168;
                        unsigned int v174 = *(unsigned __int8 *)(v157 + v169);
                        unsigned int v175 = *(unsigned __int8 *)(v157 + v171);
                        BOOL v6 = v174 == v175;
                        BOOL v176 = v174 < v175;
                        if (v6) {
                          BOOL v176 = v169 < v171;
                        }
                      }
                      while (v176);
                      *uint64_t v159 = v171;
                    }
                  }
                }
              }
              while (v154-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[v14 >> 1];
          uint64_t v17 = *a3;
          if ((unint64_t)v13 >= 0x201)
          {
            unsigned int v18 = *v11;
            *uint64_t v11 = *v16;
            *uint64_t v16 = v18;
          }
          else
          {
          }
          --a4;
          uint64_t v19 = *v11;
          uint64_t v20 = *a3;
          if (a5)
          {
            unsigned int v21 = *(unsigned __int8 *)(v20 + v19);
            break;
          }
          uint64_t v22 = *(v11 - 1);
          unsigned int v23 = *(unsigned __int8 *)(v20 + v22);
          unsigned int v21 = *(unsigned __int8 *)(v20 + v19);
          BOOL v24 = v22 < v19;
          BOOL v6 = v23 == v21;
          BOOL v25 = v23 < v21;
          if (!v6) {
            BOOL v24 = v25;
          }
          if (v24) {
            break;
          }
          uint64_t v55 = *(a2 - 1);
          unsigned int v56 = *(unsigned __int8 *)(v20 + v55);
          BOOL v57 = v19 < v55;
          BOOL v6 = v21 == v56;
          BOOL v58 = v21 < v56;
          if (!v6) {
            BOOL v57 = v58;
          }
          if (v57)
          {
            uint64_t v12 = v11;
            do
            {
              unsigned int v59 = v12[1];
              ++v12;
              unsigned int v60 = *(unsigned __int8 *)(v20 + v59);
              BOOL v61 = v19 < v59;
              BOOL v6 = v21 == v60;
              BOOL v62 = v21 < v60;
              if (!v6) {
                BOOL v61 = v62;
              }
            }
            while (!v61);
          }
          else
          {
            int v63 = v11 + 1;
            do
            {
              uint64_t v12 = v63;
              if (v63 >= a2) {
                break;
              }
              ++v63;
              uint64_t v64 = *v12;
              unsigned int v65 = *(unsigned __int8 *)(v20 + v64);
              BOOL v66 = v19 < v64;
              BOOL v6 = v21 == v65;
              BOOL v67 = v21 < v65;
              if (!v6) {
                BOOL v66 = v67;
              }
            }
            while (!v66);
          }
          int v68 = a2;
          if (v12 < a2)
          {
            int v68 = a2;
            do
            {
              unsigned int v69 = *--v68;
              unsigned int v70 = *(unsigned __int8 *)(v20 + v69);
              BOOL v71 = v19 < v69;
              BOOL v6 = v21 == v70;
              BOOL v72 = v21 < v70;
              if (!v6) {
                BOOL v71 = v72;
              }
            }
            while (v71);
          }
          if (v12 < v68)
          {
            unsigned int v73 = *v12;
            unsigned int v74 = *v68;
            do
            {
              unsigned int *v12 = v74;
              *int v68 = v73;
              unsigned int v75 = *(unsigned __int8 *)(v20 + v19);
              do
              {
                unsigned int v76 = v12[1];
                ++v12;
                unsigned int v73 = v76;
                unsigned int v77 = *(unsigned __int8 *)(v20 + v76);
                BOOL v78 = v19 < v76;
                BOOL v6 = v75 == v77;
                BOOL v79 = v75 < v77;
                if (v6) {
                  BOOL v79 = v78;
                }
              }
              while (!v79);
              do
              {
                unsigned int v80 = *--v68;
                unsigned int v74 = v80;
                unsigned int v81 = *(unsigned __int8 *)(v20 + v80);
                BOOL v82 = v19 < v80;
                BOOL v6 = v75 == v81;
                BOOL v83 = v75 < v81;
                if (v6) {
                  BOOL v83 = v82;
                }
              }
              while (v83);
            }
            while (v12 < v68);
          }
          uint64_t v84 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v84;
          }
          a5 = 0;
          *uint64_t v84 = v19;
        }
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = v11[v26 + 1];
          unsigned int v28 = *(unsigned __int8 *)(v20 + v27);
          BOOL v6 = v28 == v21;
          BOOL v29 = v28 < v21;
          if (v6) {
            BOOL v29 = v27 < v19;
          }
          ++v26;
        }
        while (v29);
        uint64_t v30 = &v11[v26];
        uint64_t v31 = a2;
        if (v26 == 1)
        {
          uint64_t v31 = a2;
          do
          {
            if (v30 >= v31) {
              break;
            }
            unsigned int v36 = *--v31;
            unsigned int v37 = *(unsigned __int8 *)(v20 + v36);
            BOOL v38 = v36 < v19;
            BOOL v6 = v37 == v21;
            BOOL v39 = v37 < v21;
            if (!v6) {
              BOOL v38 = v39;
            }
          }
          while (!v38);
        }
        else
        {
          do
          {
            unsigned int v32 = *--v31;
            unsigned int v33 = *(unsigned __int8 *)(v20 + v32);
            BOOL v34 = v32 < v19;
            BOOL v6 = v33 == v21;
            BOOL v35 = v33 < v21;
            if (!v6) {
              BOOL v34 = v35;
            }
          }
          while (!v34);
        }
        if (v30 >= v31)
        {
          BOOL v53 = v30 - 1;
        }
        else
        {
          unsigned int v40 = *v31;
          unsigned int v41 = v27;
          uint64_t v42 = v30;
          int v43 = v31;
          do
          {
            *uint64_t v42 = v40;
            unsigned int *v43 = v41;
            unsigned int v44 = *(unsigned __int8 *)(v20 + v19);
            do
            {
              unsigned int v45 = v42[1];
              ++v42;
              unsigned int v41 = v45;
              unsigned int v46 = *(unsigned __int8 *)(v20 + v45);
              BOOL v47 = v45 < v19;
              BOOL v6 = v46 == v44;
              BOOL v48 = v46 < v44;
              if (v6) {
                BOOL v48 = v47;
              }
            }
            while (v48);
            do
            {
              unsigned int v49 = *--v43;
              unsigned int v40 = v49;
              unsigned int v50 = *(unsigned __int8 *)(v20 + v49);
              BOOL v51 = v49 < v19;
              BOOL v6 = v50 == v44;
              BOOL v52 = v50 < v44;
              if (v6) {
                BOOL v52 = v51;
              }
            }
            while (!v52);
          }
          while (v42 < v43);
          BOOL v53 = v42 - 1;
        }
        if (v53 != v11) {
          *uint64_t v11 = *v53;
        }
        unsigned int *v53 = v19;
        if (v30 >= v31) {
          break;
        }
LABEL_46:
        a5 = 0;
        uint64_t v12 = v53 + 1;
      }
      uint64_t v12 = v53 + 1;
      if (result) {
        break;
      }
      if (!v54) {
        goto LABEL_46;
      }
    }
    a2 = v53;
    if (!v54) {
      continue;
    }
    return result;
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  unsigned int v5 = *(unsigned __int8 *)(a4 + v4);
  uint64_t v6 = *result;
  unsigned int v7 = *(unsigned __int8 *)(a4 + v6);
  BOOL v8 = v4 < v6;
  BOOL v9 = v5 == v7;
  BOOL v10 = v5 < v7;
  uint64_t v11 = *a3;
  unsigned int v12 = *(unsigned __int8 *)(a4 + v11);
  if (!v9) {
    BOOL v8 = v10;
  }
  BOOL v9 = v12 == v5;
  BOOL v13 = v12 < v5;
  if (v9) {
    BOOL v13 = v11 < v4;
  }
  if (v8)
  {
    if (v13)
    {
      *BOOL result = v11;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *BOOL result = v4;
    *a2 = v6;
    uint64_t v19 = *a3;
    unsigned int v20 = *(unsigned __int8 *)(a4 + v19);
    unsigned int v21 = *(unsigned __int8 *)(a4 + v6);
    BOOL v9 = v20 == v21;
    BOOL v22 = v20 < v21;
    if (v9) {
      BOOL v22 = v19 < v6;
    }
    if (v22)
    {
      *a2 = v19;
      goto LABEL_17;
    }
  }
  else if (v13)
  {
    *a2 = v11;
    *a3 = v4;
    uint64_t v14 = *a2;
    unsigned int v15 = *(unsigned __int8 *)(a4 + v14);
    uint64_t v16 = *result;
    unsigned int v17 = *(unsigned __int8 *)(a4 + v16);
    BOOL v9 = v15 == v17;
    BOOL v18 = v15 < v17;
    if (v9) {
      BOOL v18 = v14 < v16;
    }
    if (v18)
    {
      *BOOL result = v14;
      *a2 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      unsigned int v9 = *(unsigned __int8 *)(*a3 + v8);
      uint64_t v10 = *a1;
      unsigned int v11 = *(unsigned __int8 *)(*a3 + v10);
      BOOL v12 = v9 == v11;
      BOOL v13 = v9 < v11;
      if (v12) {
        BOOL v13 = v8 < v10;
      }
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      unsigned int v32 = a1 + 2;
      unsigned int v33 = a1 + 3;
      uint64_t v34 = *a3;
      uint64_t v35 = *(a2 - 1);
      unsigned int v36 = *(unsigned __int8 *)(*a3 + v35);
      uint64_t v37 = a1[3];
      unsigned int v38 = *(unsigned __int8 *)(*a3 + v37);
      BOOL v12 = v36 == v38;
      BOOL v39 = v36 < v38;
      if (v12) {
        BOOL v39 = v35 < v37;
      }
      if (v39)
      {
        _DWORD *v33 = v35;
        *(a2 - 1) = v37;
        uint64_t v40 = *v33;
        unsigned int v41 = *(unsigned __int8 *)(v34 + v40);
        uint64_t v42 = *v32;
        unsigned int v43 = *(unsigned __int8 *)(v34 + v42);
        BOOL v12 = v41 == v43;
        BOOL v44 = v41 < v43;
        if (v12) {
          BOOL v44 = v40 < v42;
        }
        if (v44)
        {
          _DWORD *v32 = v40;
          _DWORD *v33 = v42;
          unsigned int v45 = *(unsigned __int8 *)(v34 + v40);
          uint64_t v46 = a1[1];
          unsigned int v47 = *(unsigned __int8 *)(v34 + v46);
          BOOL v12 = v45 == v47;
          BOOL v48 = v45 < v47;
          if (v12) {
            BOOL v48 = v40 < v46;
          }
          if (v48)
          {
            a1[1] = v40;
            a1[2] = v46;
            unsigned int v49 = *(unsigned __int8 *)(v34 + v40);
            uint64_t v50 = *a1;
            unsigned int v51 = *(unsigned __int8 *)(v34 + v50);
            BOOL v12 = v49 == v51;
            BOOL v52 = v49 < v51;
            if (v12) {
              BOOL v52 = v40 < v50;
            }
            if (v52)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v14 = a1 + 2;
      unsigned int v15 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v16 = 0;
      uint64_t v17 = *a3;
      uint64_t v18 = 12;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v15;
    unsigned int v20 = *(unsigned __int8 *)(v17 + v19);
    uint64_t v21 = *v14;
    unsigned int v22 = *(unsigned __int8 *)(v17 + v21);
    BOOL v12 = v20 == v22;
    BOOL v23 = v20 < v22;
    if (v12) {
      BOOL v23 = v19 < v21;
    }
    if (v23)
    {
      uint64_t v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v21;
        uint64_t v25 = v24 - 4;
        if (v24 == 4) {
          break;
        }
        uint64_t v26 = (char *)a1 + v24;
        unsigned int v27 = *(unsigned __int8 *)(v17 + v19);
        uint64_t v21 = *((unsigned int *)v26 - 2);
        unsigned int v28 = *(unsigned __int8 *)(v17 + v21);
        BOOL v12 = v27 == v28;
        BOOL v29 = v27 < v28;
        if (v12) {
          BOOL v30 = v19 < v21;
        }
        else {
          BOOL v30 = v29;
        }
        uint64_t v24 = v25;
        if (!v30)
        {
          uint64_t v31 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_20;
        }
      }
      uint64_t v31 = a1;
LABEL_20:
      _DWORD *v31 = v19;
      if (++v16 == 8) {
        return v15 + 1 == a2;
      }
    }
    uint64_t v14 = v15;
    v18 += 4;
    if (++v15 == a2) {
      return 1;
    }
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  unsigned int v13 = *(unsigned __int8 *)(*a5 + v12);
  uint64_t v14 = *a3;
  unsigned int v15 = *(unsigned __int8 *)(*a5 + v14);
  BOOL v16 = v13 == v15;
  BOOL v17 = v13 < v15;
  if (v16) {
    BOOL v17 = v12 < v14;
  }
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    uint64_t v18 = *a3;
    unsigned int v19 = *(unsigned __int8 *)(v11 + v18);
    uint64_t v20 = *a2;
    unsigned int v21 = *(unsigned __int8 *)(v11 + v20);
    BOOL v16 = v19 == v21;
    BOOL v22 = v19 < v21;
    if (v16) {
      BOOL v22 = v18 < v20;
    }
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      uint64_t v23 = *a2;
      unsigned int v24 = *(unsigned __int8 *)(v11 + v23);
      uint64_t v25 = *a1;
      unsigned int v26 = *(unsigned __int8 *)(v11 + v25);
      BOOL v16 = v24 == v26;
      BOOL v27 = v24 < v26;
      if (v16) {
        BOOL v27 = v23 < v25;
      }
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v83 = *(a2 - 1);
                unsigned int v84 = *(unsigned __int16 *)(*a3 + 2 * v83);
                uint64_t v85 = *v12;
                unsigned int v86 = *(unsigned __int16 *)(*a3 + 2 * v85);
                BOOL v6 = v84 == v86;
                BOOL v87 = v84 < v86;
                if (v6) {
                  BOOL v87 = v83 < v85;
                }
                if (v87)
                {
                  unsigned int *v12 = v83;
                  *(a2 - 1) = v85;
                }
                break;
              case 3uLL:
                uint64_t v88 = *a3;
                break;
              case 4uLL:
                break;
              case 5uLL:
                BOOL v89 = v12 + 2;
                uint64_t v90 = v12 + 3;
                uint64_t v91 = *a3;
                uint64_t v92 = *(a2 - 1);
                unsigned int v93 = *(unsigned __int16 *)(*a3 + 2 * v92);
                uint64_t v94 = v12[3];
                unsigned int v95 = *(unsigned __int16 *)(*a3 + 2 * v94);
                BOOL v6 = v93 == v95;
                BOOL v96 = v93 < v95;
                if (v6) {
                  BOOL v96 = v92 < v94;
                }
                if (v96)
                {
                  *uint64_t v90 = v92;
                  *(a2 - 1) = v94;
                  uint64_t v97 = *v90;
                  unsigned int v98 = *(unsigned __int16 *)(v91 + 2 * v97);
                  uint64_t v99 = *v89;
                  unsigned int v100 = *(unsigned __int16 *)(v91 + 2 * v99);
                  BOOL v6 = v98 == v100;
                  BOOL v101 = v98 < v100;
                  if (v6) {
                    BOOL v101 = v97 < v99;
                  }
                  if (v101)
                  {
                    _DWORD *v89 = v97;
                    *uint64_t v90 = v99;
                    uint64_t v102 = v12[1];
                    unsigned int v103 = *(unsigned __int16 *)(v91 + 2 * v102);
                    BOOL v6 = v98 == v103;
                    BOOL v104 = v98 < v103;
                    if (v6) {
                      BOOL v104 = v97 < v102;
                    }
                    if (v104)
                    {
                      v12[1] = v97;
                      void v12[2] = v102;
                      uint64_t v105 = *v12;
                      unsigned int v106 = *(unsigned __int16 *)(v91 + 2 * v105);
                      BOOL v6 = v98 == v106;
                      BOOL v107 = v98 < v106;
                      if (v6) {
                        BOOL v107 = v97 < v105;
                      }
                      if (v107)
                      {
                        unsigned int *v12 = v97;
                        v12[1] = v105;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                unsigned int v108 = v12 + 1;
                if (v12 + 1 != a2)
                {
                  uint64_t v109 = *a3;
                  uint64_t v110 = 4;
                  BOOL v111 = v12;
                  do
                  {
                    uint64_t v113 = *v111;
                    uint64_t v112 = v111[1];
                    BOOL v111 = v108;
                    unsigned int v114 = *(unsigned __int16 *)(v109 + 2 * v112);
                    unsigned int v115 = *(unsigned __int16 *)(v109 + 2 * v113);
                    BOOL v6 = v114 == v115;
                    BOOL v116 = v114 < v115;
                    if (v6) {
                      BOOL v116 = v112 < v113;
                    }
                    if (v116)
                    {
                      uint64_t v117 = v110;
                      do
                      {
                        *(unsigned int *)((char *)v12 + v117) = v113;
                        uint64_t v118 = v117 - 4;
                        if (v117 == 4)
                        {
                          uint64_t v122 = v12;
                          goto LABEL_119;
                        }
                        uint64_t v113 = *(unsigned int *)((char *)v12 + v117 - 8);
                        unsigned int v119 = *(unsigned __int16 *)(v109 + 2 * v113);
                        BOOL v6 = v114 == v119;
                        BOOL v120 = v114 < v119;
                        if (v6) {
                          BOOL v121 = v112 < v113;
                        }
                        else {
                          BOOL v121 = v120;
                        }
                        uint64_t v117 = v118;
                      }
                      while (v121);
                      uint64_t v122 = (unsigned int *)((char *)v12 + v118);
LABEL_119:
                      *uint64_t v122 = v112;
                    }
                    unsigned int v108 = v111 + 1;
                    v110 += 4;
                  }
                  while (v111 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v168 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v169 = *a3;
                do
                {
                  uint64_t v171 = *v11;
                  uint64_t v170 = v11[1];
                  uint64_t v11 = v168;
                  unsigned int v172 = *(unsigned __int16 *)(v169 + 2 * v170);
                  unsigned int v173 = *(unsigned __int16 *)(v169 + 2 * v171);
                  BOOL v6 = v172 == v173;
                  BOOL v174 = v172 < v173;
                  if (v6) {
                    BOOL v174 = v170 < v171;
                  }
                  if (v174)
                  {
                    unsigned int v175 = v11;
                    do
                    {
                      *unsigned int v175 = v171;
                      uint64_t v171 = *(v175 - 2);
                      unsigned int v176 = *(unsigned __int16 *)(v169 + 2 * v171);
                      BOOL v6 = v172 == v176;
                      BOOL v177 = v172 < v176;
                      if (v6) {
                        BOOL v177 = v170 < v171;
                      }
                      --v175;
                    }
                    while (v177);
                    *unsigned int v175 = v170;
                  }
                  uint64_t v168 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v123 = (v14 - 2) >> 1;
              uint64_t v124 = *a3;
              int64_t v125 = v123;
              do
              {
                int64_t v126 = v125;
                if (v123 >= v125)
                {
                  uint64_t v127 = (2 * v125) | 1;
                  BOOL v128 = &v12[v127];
                  if (2 * v126 + 2 < (uint64_t)v14)
                  {
                    uint64_t v129 = *v128;
                    unsigned int v130 = *(unsigned __int16 *)(v124 + 2 * v129);
                    BOOL result = v128[1];
                    unsigned int v131 = *(unsigned __int16 *)(v124 + 2 * result);
                    BOOL v6 = v130 == v131;
                    BOOL v132 = v130 < v131;
                    if (v6) {
                      BOOL v132 = v129 < result;
                    }
                    if (v132) {
                      BOOL result = result;
                    }
                    else {
                      BOOL result = v129;
                    }
                    if (v132)
                    {
                      ++v128;
                      uint64_t v127 = 2 * v126 + 2;
                    }
                  }
                  else
                  {
                    BOOL result = *v128;
                  }
                  int64_t v133 = &v12[v126];
                  unsigned int v134 = *(unsigned __int16 *)(v124 + 2 * result);
                  uint64_t v135 = *v133;
                  unsigned int v136 = *(unsigned __int16 *)(v124 + 2 * v135);
                  BOOL v6 = v134 == v136;
                  BOOL v137 = v134 < v136;
                  if (v6) {
                    BOOL v137 = result < v135;
                  }
                  if (!v137)
                  {
                    do
                    {
                      *int64_t v133 = result;
                      int64_t v133 = v128;
                      if (v123 < v127) {
                        break;
                      }
                      uint64_t v138 = (2 * v127) | 1;
                      BOOL v128 = &v12[v138];
                      uint64_t v127 = 2 * v127 + 2;
                      if (v127 < (uint64_t)v14)
                      {
                        BOOL result = *v128;
                        unsigned int v139 = *(unsigned __int16 *)(v124 + 2 * result);
                        uint64_t v140 = v128[1];
                        unsigned int v141 = *(unsigned __int16 *)(v124 + 2 * v140);
                        BOOL v6 = v139 == v141;
                        BOOL v142 = v139 < v141;
                        if (v6) {
                          BOOL v142 = result < v140;
                        }
                        BOOL result = v142 ? v140 : result;
                        if (v142) {
                          ++v128;
                        }
                        else {
                          uint64_t v127 = v138;
                        }
                      }
                      else
                      {
                        BOOL result = *v128;
                        uint64_t v127 = v138;
                      }
                      unsigned int v143 = *(unsigned __int16 *)(v124 + 2 * result);
                      BOOL v6 = v143 == v136;
                      BOOL v144 = v143 < v136;
                      if (v6) {
                        BOOL v144 = result < v135;
                      }
                    }
                    while (!v144);
                    *int64_t v133 = v135;
                  }
                }
                int64_t v125 = v126 - 1;
              }
              while (v126);
              uint64_t v145 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v146 = 0;
                unsigned int v147 = *v12;
                uint64_t v148 = *a3;
                uint64_t v149 = v12;
                do
                {
                  unsigned int v150 = &v149[v146 + 1];
                  uint64_t v151 = (2 * v146) | 1;
                  uint64_t v146 = 2 * v146 + 2;
                  if (v146 >= v145)
                  {
                    LODWORD(v152) = *v150;
                    uint64_t v146 = v151;
                  }
                  else
                  {
                    uint64_t v152 = *v150;
                    unsigned int v153 = *(unsigned __int16 *)(v148 + 2 * v152);
                    BOOL result = (uint64_t)(v150 + 1);
                    uint64_t v154 = v150[1];
                    unsigned int v155 = *(unsigned __int16 *)(v148 + 2 * v154);
                    BOOL v6 = v153 == v155;
                    BOOL v156 = v153 < v155;
                    if (v6) {
                      BOOL v156 = v152 < v154;
                    }
                    if (v156)
                    {
                      LODWORD(v152) = v150[1];
                      ++v150;
                    }
                    else
                    {
                      uint64_t v146 = v151;
                    }
                  }
                  *uint64_t v149 = v152;
                  uint64_t v149 = v150;
                }
                while (v146 <= (uint64_t)((unint64_t)(v145 - 2) >> 1));
                if (v150 == --a2)
                {
                  *unsigned int v150 = v147;
                }
                else
                {
                  *unsigned int v150 = *a2;
                  *a2 = v147;
                  uint64_t v157 = (char *)v150 - (char *)v12 + 4;
                  if (v157 >= 5)
                  {
                    unint64_t v158 = (((unint64_t)v157 >> 2) - 2) >> 1;
                    uint64_t v159 = &v12[v158];
                    uint64_t v160 = *v159;
                    unsigned int v161 = *(unsigned __int16 *)(v148 + 2 * v160);
                    uint64_t v162 = *v150;
                    unsigned int v163 = *(unsigned __int16 *)(v148 + 2 * v162);
                    BOOL v6 = v161 == v163;
                    BOOL v164 = v161 < v163;
                    if (v6) {
                      BOOL v164 = v160 < v162;
                    }
                    if (v164)
                    {
                      do
                      {
                        *unsigned int v150 = v160;
                        unsigned int v150 = v159;
                        if (!v158) {
                          break;
                        }
                        unint64_t v158 = (v158 - 1) >> 1;
                        uint64_t v159 = &v12[v158];
                        uint64_t v160 = *v159;
                        unsigned int v165 = *(unsigned __int16 *)(v148 + 2 * v160);
                        BOOL v6 = v165 == v163;
                        BOOL v166 = v165 < v163;
                        if (v6) {
                          BOOL v166 = v160 < v162;
                        }
                      }
                      while (v166);
                      *unsigned int v150 = v162;
                    }
                  }
                }
              }
              while (v145-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          BOOL v16 = &v12[v14 >> 1];
          uint64_t v17 = *a3;
          if ((unint64_t)v13 >= 0x201)
          {
            unsigned int v18 = *v11;
            *uint64_t v11 = *v16;
            *BOOL v16 = v18;
          }
          else
          {
          }
          --a4;
          uint64_t v19 = *v11;
          uint64_t v20 = *a3;
          if (a5)
          {
            unsigned int v21 = *(unsigned __int16 *)(v20 + 2 * v19);
            break;
          }
          uint64_t v22 = *(v11 - 1);
          unsigned int v23 = *(unsigned __int16 *)(v20 + 2 * v22);
          unsigned int v21 = *(unsigned __int16 *)(v20 + 2 * v19);
          BOOL v24 = v22 < v19;
          BOOL v6 = v23 == v21;
          BOOL v25 = v23 < v21;
          if (!v6) {
            BOOL v24 = v25;
          }
          if (v24) {
            break;
          }
          uint64_t v54 = *(a2 - 1);
          unsigned int v55 = *(unsigned __int16 *)(v20 + 2 * v54);
          BOOL v56 = v19 < v54;
          BOOL v6 = v21 == v55;
          BOOL v57 = v21 < v55;
          if (!v6) {
            BOOL v56 = v57;
          }
          if (v56)
          {
            uint64_t v12 = v11;
            do
            {
              unsigned int v58 = v12[1];
              ++v12;
              unsigned int v59 = *(unsigned __int16 *)(v20 + 2 * v58);
              BOOL v60 = v19 < v58;
              BOOL v6 = v21 == v59;
              BOOL v61 = v21 < v59;
              if (!v6) {
                BOOL v60 = v61;
              }
            }
            while (!v60);
          }
          else
          {
            BOOL v62 = v11 + 1;
            do
            {
              uint64_t v12 = v62;
              if (v62 >= a2) {
                break;
              }
              ++v62;
              uint64_t v63 = *v12;
              unsigned int v64 = *(unsigned __int16 *)(v20 + 2 * v63);
              BOOL v65 = v19 < v63;
              BOOL v6 = v21 == v64;
              BOOL v66 = v21 < v64;
              if (!v6) {
                BOOL v65 = v66;
              }
            }
            while (!v65);
          }
          BOOL v67 = a2;
          if (v12 < a2)
          {
            BOOL v67 = a2;
            do
            {
              unsigned int v68 = *--v67;
              unsigned int v69 = *(unsigned __int16 *)(v20 + 2 * v68);
              BOOL v70 = v19 < v68;
              BOOL v6 = v21 == v69;
              BOOL v71 = v21 < v69;
              if (!v6) {
                BOOL v70 = v71;
              }
            }
            while (v70);
          }
          if (v12 < v67)
          {
            unsigned int v72 = *v12;
            unsigned int v73 = *v67;
            do
            {
              unsigned int *v12 = v73;
              *BOOL v67 = v72;
              do
              {
                unsigned int v74 = v12[1];
                ++v12;
                unsigned int v72 = v74;
                unsigned int v75 = *(unsigned __int16 *)(v20 + 2 * v74);
                BOOL v76 = v19 < v74;
                BOOL v6 = v21 == v75;
                BOOL v77 = v21 < v75;
                if (v6) {
                  BOOL v77 = v76;
                }
              }
              while (!v77);
              do
              {
                unsigned int v78 = *--v67;
                unsigned int v73 = v78;
                unsigned int v79 = *(unsigned __int16 *)(v20 + 2 * v78);
                BOOL v80 = v19 < v78;
                BOOL v6 = v21 == v79;
                BOOL v81 = v21 < v79;
                if (v6) {
                  BOOL v81 = v80;
                }
              }
              while (v81);
            }
            while (v12 < v67);
          }
          BOOL v82 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v82;
          }
          a5 = 0;
          *BOOL v82 = v19;
        }
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = v11[v26 + 1];
          unsigned int v28 = *(unsigned __int16 *)(v20 + 2 * v27);
          BOOL v6 = v28 == v21;
          BOOL v29 = v28 < v21;
          if (v6) {
            BOOL v29 = v27 < v19;
          }
          ++v26;
        }
        while (v29);
        BOOL v30 = &v11[v26];
        uint64_t v31 = a2;
        if (v26 == 1)
        {
          uint64_t v31 = a2;
          do
          {
            if (v30 >= v31) {
              break;
            }
            unsigned int v36 = *--v31;
            unsigned int v37 = *(unsigned __int16 *)(v20 + 2 * v36);
            BOOL v38 = v36 < v19;
            BOOL v6 = v37 == v21;
            BOOL v39 = v37 < v21;
            if (!v6) {
              BOOL v38 = v39;
            }
          }
          while (!v38);
        }
        else
        {
          do
          {
            unsigned int v32 = *--v31;
            unsigned int v33 = *(unsigned __int16 *)(v20 + 2 * v32);
            BOOL v34 = v32 < v19;
            BOOL v6 = v33 == v21;
            BOOL v35 = v33 < v21;
            if (!v6) {
              BOOL v34 = v35;
            }
          }
          while (!v34);
        }
        if (v30 >= v31)
        {
          BOOL v52 = v30 - 1;
        }
        else
        {
          unsigned int v40 = *v31;
          unsigned int v41 = v27;
          uint64_t v42 = v30;
          unsigned int v43 = v31;
          do
          {
            *uint64_t v42 = v40;
            unsigned int *v43 = v41;
            do
            {
              unsigned int v44 = v42[1];
              ++v42;
              unsigned int v41 = v44;
              unsigned int v45 = *(unsigned __int16 *)(v20 + 2 * v44);
              BOOL v46 = v44 < v19;
              BOOL v6 = v45 == v21;
              BOOL v47 = v45 < v21;
              if (v6) {
                BOOL v47 = v46;
              }
            }
            while (v47);
            do
            {
              unsigned int v48 = *--v43;
              unsigned int v40 = v48;
              unsigned int v49 = *(unsigned __int16 *)(v20 + 2 * v48);
              BOOL v50 = v48 < v19;
              BOOL v6 = v49 == v21;
              BOOL v51 = v49 < v21;
              if (v6) {
                BOOL v51 = v50;
              }
            }
            while (!v51);
          }
          while (v42 < v43);
          BOOL v52 = v42 - 1;
        }
        if (v52 != v11) {
          *uint64_t v11 = *v52;
        }
        unsigned int *v52 = v19;
        if (v30 >= v31) {
          break;
        }
LABEL_46:
        a5 = 0;
        uint64_t v12 = v52 + 1;
      }
      uint64_t v12 = v52 + 1;
      if (result) {
        break;
      }
      if (!v53) {
        goto LABEL_46;
      }
    }
    a2 = v52;
    if (!v53) {
      continue;
    }
    return result;
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  unsigned int v5 = *(unsigned __int16 *)(a4 + 2 * v4);
  uint64_t v6 = *result;
  unsigned int v7 = *(unsigned __int16 *)(a4 + 2 * v6);
  BOOL v8 = v4 < v6;
  uint64_t v9 = *a3;
  unsigned int v10 = *(unsigned __int16 *)(a4 + 2 * v9);
  if (v5 != v7) {
    BOOL v8 = v5 < v7;
  }
  BOOL v11 = v10 == v5;
  BOOL v12 = v10 < v5;
  if (v11) {
    BOOL v12 = v9 < v4;
  }
  if (v8)
  {
    if (v12)
    {
      *BOOL result = v9;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *BOOL result = v4;
    *a2 = v6;
    uint64_t v18 = *a3;
    unsigned int v19 = *(unsigned __int16 *)(a4 + 2 * v18);
    BOOL v11 = v19 == v7;
    BOOL v20 = v19 < v7;
    if (v11) {
      BOOL v20 = v18 < v6;
    }
    if (v20)
    {
      *a2 = v18;
      goto LABEL_17;
    }
  }
  else if (v12)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v13 = *a2;
    unsigned int v14 = *(unsigned __int16 *)(a4 + 2 * v13);
    uint64_t v15 = *result;
    unsigned int v16 = *(unsigned __int16 *)(a4 + 2 * v15);
    BOOL v11 = v14 == v16;
    BOOL v17 = v14 < v16;
    if (v11) {
      BOOL v17 = v13 < v15;
    }
    if (v17)
    {
      *BOOL result = v13;
      *a2 = v15;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      unsigned int v9 = *(unsigned __int16 *)(*a3 + 2 * v8);
      uint64_t v10 = *a1;
      unsigned int v11 = *(unsigned __int16 *)(*a3 + 2 * v10);
      BOOL v12 = v9 == v11;
      BOOL v13 = v9 < v11;
      if (v12) {
        BOOL v13 = v8 < v10;
      }
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      BOOL v30 = a1 + 2;
      uint64_t v31 = a1 + 3;
      uint64_t v32 = *a3;
      uint64_t v33 = *(a2 - 1);
      unsigned int v34 = *(unsigned __int16 *)(*a3 + 2 * v33);
      uint64_t v35 = a1[3];
      unsigned int v36 = *(unsigned __int16 *)(*a3 + 2 * v35);
      BOOL v12 = v34 == v36;
      BOOL v37 = v34 < v36;
      if (v12) {
        BOOL v37 = v33 < v35;
      }
      if (v37)
      {
        _DWORD *v31 = v33;
        *(a2 - 1) = v35;
        uint64_t v38 = *v31;
        unsigned int v39 = *(unsigned __int16 *)(v32 + 2 * v38);
        uint64_t v40 = *v30;
        unsigned int v41 = *(unsigned __int16 *)(v32 + 2 * v40);
        BOOL v12 = v39 == v41;
        BOOL v42 = v39 < v41;
        if (v12) {
          BOOL v42 = v38 < v40;
        }
        if (v42)
        {
          *BOOL v30 = v38;
          _DWORD *v31 = v40;
          uint64_t v43 = a1[1];
          unsigned int v44 = *(unsigned __int16 *)(v32 + 2 * v43);
          BOOL v12 = v39 == v44;
          BOOL v45 = v39 < v44;
          if (v12) {
            BOOL v45 = v38 < v43;
          }
          if (v45)
          {
            a1[1] = v38;
            a1[2] = v43;
            uint64_t v46 = *a1;
            unsigned int v47 = *(unsigned __int16 *)(v32 + 2 * v46);
            BOOL v12 = v39 == v47;
            BOOL v48 = v39 < v47;
            if (v12) {
              BOOL v48 = v38 < v46;
            }
            if (v48)
            {
              *a1 = v38;
              a1[1] = v46;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v14 = a1 + 2;
      uint64_t v15 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v16 = 0;
      uint64_t v17 = *a3;
      uint64_t v18 = 12;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v15;
    unsigned int v20 = *(unsigned __int16 *)(v17 + 2 * v19);
    uint64_t v21 = *v14;
    unsigned int v22 = *(unsigned __int16 *)(v17 + 2 * v21);
    BOOL v12 = v20 == v22;
    BOOL v23 = v20 < v22;
    if (v12) {
      BOOL v23 = v19 < v21;
    }
    if (v23)
    {
      uint64_t v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v21;
        uint64_t v25 = v24 - 4;
        if (v24 == 4) {
          break;
        }
        uint64_t v21 = *(unsigned int *)((char *)a1 + v24 - 8);
        unsigned int v26 = *(unsigned __int16 *)(v17 + 2 * v21);
        BOOL v27 = v19 < v21;
        BOOL v12 = v20 == v26;
        BOOL v28 = v20 < v26;
        if (!v12) {
          BOOL v27 = v28;
        }
        uint64_t v24 = v25;
        if (!v27)
        {
          BOOL v29 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_19;
        }
      }
      BOOL v29 = a1;
LABEL_19:
      *BOOL v29 = v19;
      if (++v16 == 8) {
        return v15 + 1 == a2;
      }
    }
    unsigned int v14 = v15;
    v18 += 4;
    if (++v15 == a2) {
      return 1;
    }
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  unsigned int v13 = *(unsigned __int16 *)(*a5 + 2 * v12);
  uint64_t v14 = *a3;
  unsigned int v15 = *(unsigned __int16 *)(*a5 + 2 * v14);
  BOOL v16 = v13 == v15;
  BOOL v17 = v13 < v15;
  if (v16) {
    BOOL v17 = v12 < v14;
  }
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    uint64_t v18 = *a3;
    unsigned int v19 = *(unsigned __int16 *)(v11 + 2 * v18);
    uint64_t v20 = *a2;
    unsigned int v21 = *(unsigned __int16 *)(v11 + 2 * v20);
    BOOL v16 = v19 == v21;
    BOOL v22 = v19 < v21;
    if (v16) {
      BOOL v22 = v18 < v20;
    }
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      uint64_t v23 = *a2;
      unsigned int v24 = *(unsigned __int16 *)(v11 + 2 * v23);
      uint64_t v25 = *a1;
      unsigned int v26 = *(unsigned __int16 *)(v11 + 2 * v25);
      BOOL v16 = v24 == v26;
      BOOL v27 = v24 < v26;
      if (v16) {
        BOOL v27 = v23 < v25;
      }
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v85 = *(a2 - 1);
                int v86 = *(_DWORD *)(*a3 + 4 * v85);
                uint64_t v87 = *v12;
                int v88 = *(_DWORD *)(*a3 + 4 * v87);
                BOOL v6 = v86 == v88;
                BOOL v89 = v86 < v88;
                if (v6) {
                  BOOL v89 = v85 < v87;
                }
                if (v89)
                {
                  unsigned int *v12 = v85;
                  *(a2 - 1) = v87;
                }
                break;
              case 3uLL:
                uint64_t v90 = *a3;
                break;
              case 4uLL:
                break;
              case 5uLL:
                uint64_t v91 = v12 + 2;
                uint64_t v92 = v12 + 3;
                uint64_t v93 = *a3;
                uint64_t v94 = *(a2 - 1);
                int v95 = *(_DWORD *)(*a3 + 4 * v94);
                uint64_t v96 = v12[3];
                int v97 = *(_DWORD *)(*a3 + 4 * v96);
                BOOL v6 = v95 == v97;
                BOOL v98 = v95 < v97;
                if (v6) {
                  BOOL v98 = v94 < v96;
                }
                if (v98)
                {
                  *uint64_t v92 = v94;
                  *(a2 - 1) = v96;
                  uint64_t v99 = *v92;
                  int v100 = *(_DWORD *)(v93 + 4 * v99);
                  uint64_t v101 = *v91;
                  int v102 = *(_DWORD *)(v93 + 4 * v101);
                  BOOL v6 = v100 == v102;
                  BOOL v103 = v100 < v102;
                  if (v6) {
                    BOOL v103 = v99 < v101;
                  }
                  if (v103)
                  {
                    *uint64_t v91 = v99;
                    *uint64_t v92 = v101;
                    int v104 = *(_DWORD *)(v93 + 4 * v99);
                    uint64_t v105 = v12[1];
                    int v106 = *(_DWORD *)(v93 + 4 * v105);
                    BOOL v6 = v104 == v106;
                    BOOL v107 = v104 < v106;
                    if (v6) {
                      BOOL v107 = v99 < v105;
                    }
                    if (v107)
                    {
                      v12[1] = v99;
                      void v12[2] = v105;
                      int v108 = *(_DWORD *)(v93 + 4 * v99);
                      uint64_t v109 = *v12;
                      int v110 = *(_DWORD *)(v93 + 4 * v109);
                      BOOL v6 = v108 == v110;
                      BOOL v111 = v108 < v110;
                      if (v6) {
                        BOOL v111 = v99 < v109;
                      }
                      if (v111)
                      {
                        unsigned int *v12 = v99;
                        v12[1] = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                unint64_t v112 = (unint64_t)(v12 + 1);
                if (v12 + 1 != a2)
                {
                  uint64_t v113 = *a3;
                  uint64_t v114 = 4;
                  unsigned int v115 = v12;
                  do
                  {
                    uint64_t v117 = *v115;
                    uint64_t v116 = v115[1];
                    unsigned int v115 = (unsigned int *)v112;
                    int v118 = *(_DWORD *)(v113 + 4 * v116);
                    int v119 = *(_DWORD *)(v113 + 4 * v117);
                    LODWORD(v112) = v117;
                    BOOL v120 = v116 < v117;
                    BOOL v6 = v118 == v119;
                    BOOL v121 = v118 < v119;
                    if (!v6) {
                      BOOL v120 = v121;
                    }
                    if (v120)
                    {
                      uint64_t v122 = v114;
                      do
                      {
                        *(unsigned int *)((char *)v12 + v122) = v112;
                        uint64_t v123 = v122 - 4;
                        if (v122 == 4)
                        {
                          uint64_t v129 = v12;
                          goto LABEL_119;
                        }
                        uint64_t v124 = (char *)v12 + v122;
                        int v125 = *(_DWORD *)(v113 + 4 * v116);
                        unint64_t v112 = *((unsigned int *)v124 - 2);
                        int v126 = *(_DWORD *)(v113 + 4 * v112);
                        BOOL v6 = v125 == v126;
                        BOOL v127 = v125 < v126;
                        if (v6) {
                          BOOL v128 = v116 < v112;
                        }
                        else {
                          BOOL v128 = v127;
                        }
                        uint64_t v122 = v123;
                      }
                      while (v128);
                      uint64_t v129 = (unsigned int *)((char *)v12 + v123);
LABEL_119:
                      *uint64_t v129 = v116;
                    }
                    unint64_t v112 = (unint64_t)(v115 + 1);
                    v114 += 4;
                  }
                  while (v115 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v178 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v179 = *a3;
                do
                {
                  uint64_t v181 = *v11;
                  uint64_t v180 = v11[1];
                  uint64_t v11 = v178;
                  int v182 = *(_DWORD *)(v179 + 4 * v180);
                  int v183 = *(_DWORD *)(v179 + 4 * v181);
                  LODWORD(v178) = v181;
                  BOOL v184 = v180 < v181;
                  BOOL v6 = v182 == v183;
                  BOOL v185 = v182 < v183;
                  if (!v6) {
                    BOOL v184 = v185;
                  }
                  if (v184)
                  {
                    uint64_t v186 = v11;
                    do
                    {
                      *uint64_t v186 = v178;
                      int v187 = *(_DWORD *)(v179 + 4 * v180);
                      uint64_t v178 = (unsigned int *)*(v186 - 2);
                      int v188 = *(_DWORD *)(v179 + 4 * (void)v178);
                      BOOL v6 = v187 == v188;
                      BOOL v189 = v187 < v188;
                      if (v6) {
                        BOOL v189 = v180 < v178;
                      }
                      --v186;
                    }
                    while (v189);
                    *uint64_t v186 = v180;
                  }
                  uint64_t v178 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v130 = (v14 - 2) >> 1;
              uint64_t v131 = *a3;
              int64_t v132 = v130;
              do
              {
                int64_t v133 = v132;
                if (v130 >= v132)
                {
                  uint64_t v134 = (2 * v132) | 1;
                  uint64_t v135 = &v12[v134];
                  if (2 * v133 + 2 < (uint64_t)v14)
                  {
                    uint64_t v136 = *v135;
                    int v137 = *(_DWORD *)(v131 + 4 * v136);
                    uint64_t v138 = v135[1];
                    int v139 = *(_DWORD *)(v131 + 4 * v138);
                    BOOL v6 = v137 == v139;
                    BOOL v140 = v137 < v139;
                    if (v6) {
                      BOOL v140 = v136 < v138;
                    }
                    BOOL v141 = !v140;
                    if (v140) {
                      LODWORD(v142) = v135[1];
                    }
                    else {
                      LODWORD(v142) = *v135;
                    }
                    if (!v141)
                    {
                      ++v135;
                      uint64_t v134 = 2 * v133 + 2;
                    }
                  }
                  else
                  {
                    LODWORD(v142) = *v135;
                  }
                  unsigned int v143 = &v12[v133];
                  int v144 = *(_DWORD *)(v131 + 4 * v142);
                  uint64_t v145 = *v143;
                  int v146 = *(_DWORD *)(v131 + 4 * v145);
                  BOOL v6 = v144 == v146;
                  LODWORD(result) = v144 < v146;
                  if (v6) {
                    BOOL result = v142 < v145;
                  }
                  else {
                    BOOL result = result;
                  }
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *unsigned int v143 = v142;
                      unsigned int v143 = v135;
                      if (v130 < v134) {
                        break;
                      }
                      uint64_t v147 = (2 * v134) | 1;
                      uint64_t v135 = &v12[v147];
                      uint64_t v134 = 2 * v134 + 2;
                      if (v134 < (uint64_t)v14)
                      {
                        uint64_t v142 = *v135;
                        int v148 = *(_DWORD *)(v131 + 4 * v142);
                        uint64_t v149 = v135[1];
                        int v150 = *(_DWORD *)(v131 + 4 * v149);
                        BOOL v6 = v148 == v150;
                        BOOL v151 = v148 < v150;
                        if (v6) {
                          BOOL v151 = v142 < v149;
                        }
                        if (v151)
                        {
                          LODWORD(v142) = v135[1];
                          ++v135;
                        }
                        else
                        {
                          uint64_t v134 = v147;
                        }
                      }
                      else
                      {
                        LODWORD(v142) = *v135;
                        uint64_t v134 = v147;
                      }
                      int v152 = *(_DWORD *)(v131 + 4 * v142);
                      int v153 = *(_DWORD *)(v131 + 4 * v145);
                      BOOL v6 = v152 == v153;
                      LODWORD(result) = v152 < v153;
                      BOOL result = v6 ? v142 < v145 : result;
                    }
                    while (result != 1);
                    *unsigned int v143 = v145;
                  }
                }
                int64_t v132 = v133 - 1;
              }
              while (v133);
              uint64_t v154 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v155 = 0;
                unsigned int v156 = *v12;
                uint64_t v157 = *a3;
                unint64_t v158 = v12;
                do
                {
                  uint64_t v159 = &v158[v155 + 1];
                  uint64_t v160 = (2 * v155) | 1;
                  uint64_t v155 = 2 * v155 + 2;
                  if (v155 >= v154)
                  {
                    LODWORD(v161) = *v159;
                    uint64_t v155 = v160;
                  }
                  else
                  {
                    uint64_t v161 = *v159;
                    int v162 = *(_DWORD *)(v157 + 4 * v161);
                    BOOL result = (uint64_t)(v159 + 1);
                    uint64_t v163 = v159[1];
                    int v164 = *(_DWORD *)(v157 + 4 * v163);
                    BOOL v6 = v162 == v164;
                    BOOL v165 = v162 < v164;
                    if (v6) {
                      BOOL v165 = v161 < v163;
                    }
                    if (v165)
                    {
                      LODWORD(v161) = v159[1];
                      ++v159;
                    }
                    else
                    {
                      uint64_t v155 = v160;
                    }
                  }
                  unsigned int *v158 = v161;
                  unint64_t v158 = v159;
                }
                while (v155 <= (uint64_t)((unint64_t)(v154 - 2) >> 1));
                if (v159 == --a2)
                {
                  *uint64_t v159 = v156;
                }
                else
                {
                  *uint64_t v159 = *a2;
                  *a2 = v156;
                  uint64_t v166 = (char *)v159 - (char *)v12 + 4;
                  if (v166 >= 5)
                  {
                    unint64_t v167 = (((unint64_t)v166 >> 2) - 2) >> 1;
                    uint64_t v168 = &v12[v167];
                    uint64_t v169 = *v168;
                    int v170 = *(_DWORD *)(v157 + 4 * v169);
                    uint64_t v171 = *v159;
                    int v172 = *(_DWORD *)(v157 + 4 * v171);
                    BOOL v6 = v170 == v172;
                    BOOL v173 = v170 < v172;
                    if (v6) {
                      BOOL v173 = v169 < v171;
                    }
                    if (v173)
                    {
                      do
                      {
                        *uint64_t v159 = v169;
                        uint64_t v159 = v168;
                        if (!v167) {
                          break;
                        }
                        unint64_t v167 = (v167 - 1) >> 1;
                        uint64_t v168 = &v12[v167];
                        uint64_t v169 = *v168;
                        int v174 = *(_DWORD *)(v157 + 4 * v169);
                        int v175 = *(_DWORD *)(v157 + 4 * v171);
                        BOOL v6 = v174 == v175;
                        BOOL v176 = v174 < v175;
                        if (v6) {
                          BOOL v176 = v169 < v171;
                        }
                      }
                      while (v176);
                      *uint64_t v159 = v171;
                    }
                  }
                }
              }
              while (v154-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          BOOL v16 = &v12[v14 >> 1];
          uint64_t v17 = *a3;
          if ((unint64_t)v13 >= 0x201)
          {
            unsigned int v18 = *v11;
            *uint64_t v11 = *v16;
            *BOOL v16 = v18;
          }
          else
          {
          }
          --a4;
          uint64_t v19 = *v11;
          uint64_t v20 = *a3;
          if (a5)
          {
            int v21 = *(_DWORD *)(v20 + 4 * v19);
            break;
          }
          uint64_t v22 = *(v11 - 1);
          int v23 = *(_DWORD *)(v20 + 4 * v22);
          int v21 = *(_DWORD *)(v20 + 4 * v19);
          BOOL v24 = v22 < v19;
          BOOL v6 = v23 == v21;
          BOOL v25 = v23 < v21;
          if (!v6) {
            BOOL v24 = v25;
          }
          if (v24) {
            break;
          }
          uint64_t v55 = *(a2 - 1);
          int v56 = *(_DWORD *)(v20 + 4 * v55);
          BOOL v57 = v19 < v55;
          BOOL v6 = v21 == v56;
          BOOL v58 = v21 < v56;
          if (!v6) {
            BOOL v57 = v58;
          }
          if (v57)
          {
            uint64_t v12 = v11;
            do
            {
              unsigned int v59 = v12[1];
              ++v12;
              int v60 = *(_DWORD *)(v20 + 4 * v59);
              BOOL v61 = v19 < v59;
              BOOL v6 = v21 == v60;
              BOOL v62 = v21 < v60;
              if (!v6) {
                BOOL v61 = v62;
              }
            }
            while (!v61);
          }
          else
          {
            uint64_t v63 = v11 + 1;
            do
            {
              uint64_t v12 = v63;
              if (v63 >= a2) {
                break;
              }
              ++v63;
              uint64_t v64 = *v12;
              int v65 = *(_DWORD *)(v20 + 4 * v64);
              BOOL v66 = v19 < v64;
              BOOL v6 = v21 == v65;
              BOOL v67 = v21 < v65;
              if (!v6) {
                BOOL v66 = v67;
              }
            }
            while (!v66);
          }
          unsigned int v68 = a2;
          if (v12 < a2)
          {
            unsigned int v68 = a2;
            do
            {
              unsigned int v69 = *--v68;
              int v70 = *(_DWORD *)(v20 + 4 * v69);
              BOOL v71 = v19 < v69;
              BOOL v6 = v21 == v70;
              BOOL v72 = v21 < v70;
              if (!v6) {
                BOOL v71 = v72;
              }
            }
            while (v71);
          }
          if (v12 < v68)
          {
            unsigned int v73 = *v12;
            unsigned int v74 = *v68;
            do
            {
              unsigned int *v12 = v74;
              *unsigned int v68 = v73;
              int v75 = *(_DWORD *)(v20 + 4 * v19);
              do
              {
                unsigned int v76 = v12[1];
                ++v12;
                unsigned int v73 = v76;
                int v77 = *(_DWORD *)(v20 + 4 * v76);
                BOOL v78 = v19 < v76;
                BOOL v6 = v75 == v77;
                BOOL v79 = v75 < v77;
                if (v6) {
                  BOOL v79 = v78;
                }
              }
              while (!v79);
              do
              {
                unsigned int v80 = *--v68;
                unsigned int v74 = v80;
                int v81 = *(_DWORD *)(v20 + 4 * v80);
                BOOL v82 = v19 < v80;
                BOOL v6 = v75 == v81;
                BOOL v83 = v75 < v81;
                if (v6) {
                  BOOL v83 = v82;
                }
              }
              while (v83);
            }
            while (v12 < v68);
          }
          unsigned int v84 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v84;
          }
          a5 = 0;
          *unsigned int v84 = v19;
        }
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = v11[v26 + 1];
          int v28 = *(_DWORD *)(v20 + 4 * v27);
          BOOL v6 = v28 == v21;
          BOOL v29 = v28 < v21;
          if (v6) {
            BOOL v29 = v27 < v19;
          }
          ++v26;
        }
        while (v29);
        BOOL v30 = &v11[v26];
        uint64_t v31 = a2;
        if (v26 == 1)
        {
          uint64_t v31 = a2;
          do
          {
            if (v30 >= v31) {
              break;
            }
            unsigned int v36 = *--v31;
            int v37 = *(_DWORD *)(v20 + 4 * v36);
            BOOL v38 = v36 < v19;
            BOOL v6 = v37 == v21;
            BOOL v39 = v37 < v21;
            if (!v6) {
              BOOL v38 = v39;
            }
          }
          while (!v38);
        }
        else
        {
          do
          {
            unsigned int v32 = *--v31;
            int v33 = *(_DWORD *)(v20 + 4 * v32);
            BOOL v34 = v32 < v19;
            BOOL v6 = v33 == v21;
            BOOL v35 = v33 < v21;
            if (!v6) {
              BOOL v34 = v35;
            }
          }
          while (!v34);
        }
        if (v30 >= v31)
        {
          BOOL v53 = v30 - 1;
        }
        else
        {
          unsigned int v40 = *v31;
          unsigned int v41 = v27;
          BOOL v42 = v30;
          uint64_t v43 = v31;
          do
          {
            *BOOL v42 = v40;
            unsigned int *v43 = v41;
            int v44 = *(_DWORD *)(v20 + 4 * v19);
            do
            {
              unsigned int v45 = v42[1];
              ++v42;
              unsigned int v41 = v45;
              int v46 = *(_DWORD *)(v20 + 4 * v45);
              BOOL v47 = v45 < v19;
              BOOL v6 = v46 == v44;
              BOOL v48 = v46 < v44;
              if (v6) {
                BOOL v48 = v47;
              }
            }
            while (v48);
            do
            {
              unsigned int v49 = *--v43;
              unsigned int v40 = v49;
              int v50 = *(_DWORD *)(v20 + 4 * v49);
              BOOL v51 = v49 < v19;
              BOOL v6 = v50 == v44;
              BOOL v52 = v50 < v44;
              if (v6) {
                BOOL v52 = v51;
              }
            }
            while (!v52);
          }
          while (v42 < v43);
          BOOL v53 = v42 - 1;
        }
        if (v53 != v11) {
          *uint64_t v11 = *v53;
        }
        unsigned int *v53 = v19;
        if (v30 >= v31) {
          break;
        }
LABEL_46:
        a5 = 0;
        uint64_t v12 = v53 + 1;
      }
      uint64_t v12 = v53 + 1;
      if (result) {
        break;
      }
      if (!v54) {
        goto LABEL_46;
      }
    }
    a2 = v53;
    if (!v54) {
      continue;
    }
    return result;
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  int v5 = *(_DWORD *)(a4 + 4 * v4);
  uint64_t v6 = *result;
  int v7 = *(_DWORD *)(a4 + 4 * v6);
  BOOL v8 = v4 < v6;
  BOOL v9 = v5 == v7;
  BOOL v10 = v5 < v7;
  uint64_t v11 = *a3;
  int v12 = *(_DWORD *)(a4 + 4 * v11);
  if (!v9) {
    BOOL v8 = v10;
  }
  BOOL v9 = v12 == v5;
  BOOL v13 = v12 < v5;
  if (v9) {
    BOOL v13 = v11 < v4;
  }
  if (v8)
  {
    if (v13)
    {
      *BOOL result = v11;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *BOOL result = v4;
    *a2 = v6;
    uint64_t v19 = *a3;
    int v20 = *(_DWORD *)(a4 + 4 * v19);
    int v21 = *(_DWORD *)(a4 + 4 * v6);
    BOOL v9 = v20 == v21;
    BOOL v22 = v20 < v21;
    if (v9) {
      BOOL v22 = v19 < v6;
    }
    if (v22)
    {
      *a2 = v19;
      goto LABEL_17;
    }
  }
  else if (v13)
  {
    *a2 = v11;
    *a3 = v4;
    uint64_t v14 = *a2;
    int v15 = *(_DWORD *)(a4 + 4 * v14);
    uint64_t v16 = *result;
    int v17 = *(_DWORD *)(a4 + 4 * v16);
    BOOL v9 = v15 == v17;
    BOOL v18 = v15 < v17;
    if (v9) {
      BOOL v18 = v14 < v16;
    }
    if (v18)
    {
      *BOOL result = v14;
      *a2 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      int v9 = *(_DWORD *)(*a3 + 4 * v8);
      uint64_t v10 = *a1;
      int v11 = *(_DWORD *)(*a3 + 4 * v10);
      BOOL v12 = v9 == v11;
      BOOL v13 = v9 < v11;
      if (v12) {
        BOOL v13 = v8 < v10;
      }
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      unsigned int v32 = a1 + 2;
      int v33 = a1 + 3;
      uint64_t v34 = *a3;
      uint64_t v35 = *(a2 - 1);
      int v36 = *(_DWORD *)(*a3 + 4 * v35);
      uint64_t v37 = a1[3];
      int v38 = *(_DWORD *)(*a3 + 4 * v37);
      BOOL v12 = v36 == v38;
      BOOL v39 = v36 < v38;
      if (v12) {
        BOOL v39 = v35 < v37;
      }
      if (v39)
      {
        _DWORD *v33 = v35;
        *(a2 - 1) = v37;
        uint64_t v40 = *v33;
        int v41 = *(_DWORD *)(v34 + 4 * v40);
        uint64_t v42 = *v32;
        int v43 = *(_DWORD *)(v34 + 4 * v42);
        BOOL v12 = v41 == v43;
        BOOL v44 = v41 < v43;
        if (v12) {
          BOOL v44 = v40 < v42;
        }
        if (v44)
        {
          _DWORD *v32 = v40;
          _DWORD *v33 = v42;
          int v45 = *(_DWORD *)(v34 + 4 * v40);
          uint64_t v46 = a1[1];
          int v47 = *(_DWORD *)(v34 + 4 * v46);
          BOOL v12 = v45 == v47;
          BOOL v48 = v45 < v47;
          if (v12) {
            BOOL v48 = v40 < v46;
          }
          if (v48)
          {
            a1[1] = v40;
            a1[2] = v46;
            int v49 = *(_DWORD *)(v34 + 4 * v40);
            uint64_t v50 = *a1;
            int v51 = *(_DWORD *)(v34 + 4 * v50);
            BOOL v12 = v49 == v51;
            BOOL v52 = v49 < v51;
            if (v12) {
              BOOL v52 = v40 < v50;
            }
            if (v52)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v14 = a1 + 2;
      int v15 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v16 = 0;
      uint64_t v17 = *a3;
      uint64_t v18 = 12;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v15;
    int v20 = *(_DWORD *)(v17 + 4 * v19);
    uint64_t v21 = *v14;
    int v22 = *(_DWORD *)(v17 + 4 * v21);
    BOOL v12 = v20 == v22;
    BOOL v23 = v20 < v22;
    if (v12) {
      BOOL v23 = v19 < v21;
    }
    if (v23)
    {
      uint64_t v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v21;
        uint64_t v25 = v24 - 4;
        if (v24 == 4) {
          break;
        }
        uint64_t v26 = (char *)a1 + v24;
        int v27 = *(_DWORD *)(v17 + 4 * v19);
        uint64_t v21 = *((unsigned int *)v26 - 2);
        int v28 = *(_DWORD *)(v17 + 4 * v21);
        BOOL v12 = v27 == v28;
        BOOL v29 = v27 < v28;
        if (v12) {
          BOOL v30 = v19 < v21;
        }
        else {
          BOOL v30 = v29;
        }
        uint64_t v24 = v25;
        if (!v30)
        {
          uint64_t v31 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_20;
        }
      }
      uint64_t v31 = a1;
LABEL_20:
      _DWORD *v31 = v19;
      if (++v16 == 8) {
        return v15 + 1 == a2;
      }
    }
    uint64_t v14 = v15;
    v18 += 4;
    if (++v15 == a2) {
      return 1;
    }
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  int v13 = *(_DWORD *)(*a5 + 4 * v12);
  uint64_t v14 = *a3;
  int v15 = *(_DWORD *)(*a5 + 4 * v14);
  BOOL v16 = v13 == v15;
  BOOL v17 = v13 < v15;
  if (v16) {
    BOOL v17 = v12 < v14;
  }
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    uint64_t v18 = *a3;
    int v19 = *(_DWORD *)(v11 + 4 * v18);
    uint64_t v20 = *a2;
    int v21 = *(_DWORD *)(v11 + 4 * v20);
    BOOL v16 = v19 == v21;
    BOOL v22 = v19 < v21;
    if (v16) {
      BOOL v22 = v18 < v20;
    }
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      uint64_t v23 = *a2;
      int v24 = *(_DWORD *)(v11 + 4 * v23);
      uint64_t v25 = *a1;
      int v26 = *(_DWORD *)(v11 + 4 * v25);
      BOOL v16 = v24 == v26;
      BOOL v27 = v24 < v26;
      if (v16) {
        BOOL v27 = v23 < v25;
      }
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v11 = (unsigned int *)result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = a2 - v12;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v85 = *(a2 - 1);
                unsigned int v86 = *(_DWORD *)(*a3 + 4 * v85);
                uint64_t v87 = *v12;
                unsigned int v88 = *(_DWORD *)(*a3 + 4 * v87);
                BOOL v6 = v86 == v88;
                BOOL v89 = v86 < v88;
                if (v6) {
                  BOOL v89 = v85 < v87;
                }
                if (v89)
                {
                  unsigned int *v12 = v85;
                  *(a2 - 1) = v87;
                }
                break;
              case 3uLL:
                uint64_t v90 = *a3;
                break;
              case 4uLL:
                break;
              case 5uLL:
                uint64_t v91 = v12 + 2;
                uint64_t v92 = v12 + 3;
                uint64_t v93 = *a3;
                uint64_t v94 = *(a2 - 1);
                unsigned int v95 = *(_DWORD *)(*a3 + 4 * v94);
                uint64_t v96 = v12[3];
                unsigned int v97 = *(_DWORD *)(*a3 + 4 * v96);
                BOOL v6 = v95 == v97;
                BOOL v98 = v95 < v97;
                if (v6) {
                  BOOL v98 = v94 < v96;
                }
                if (v98)
                {
                  *uint64_t v92 = v94;
                  *(a2 - 1) = v96;
                  uint64_t v99 = *v92;
                  unsigned int v100 = *(_DWORD *)(v93 + 4 * v99);
                  uint64_t v101 = *v91;
                  unsigned int v102 = *(_DWORD *)(v93 + 4 * v101);
                  BOOL v6 = v100 == v102;
                  BOOL v103 = v100 < v102;
                  if (v6) {
                    BOOL v103 = v99 < v101;
                  }
                  if (v103)
                  {
                    *uint64_t v91 = v99;
                    *uint64_t v92 = v101;
                    unsigned int v104 = *(_DWORD *)(v93 + 4 * v99);
                    uint64_t v105 = v12[1];
                    unsigned int v106 = *(_DWORD *)(v93 + 4 * v105);
                    BOOL v6 = v104 == v106;
                    BOOL v107 = v104 < v106;
                    if (v6) {
                      BOOL v107 = v99 < v105;
                    }
                    if (v107)
                    {
                      v12[1] = v99;
                      void v12[2] = v105;
                      unsigned int v108 = *(_DWORD *)(v93 + 4 * v99);
                      uint64_t v109 = *v12;
                      unsigned int v110 = *(_DWORD *)(v93 + 4 * v109);
                      BOOL v6 = v108 == v110;
                      BOOL v111 = v108 < v110;
                      if (v6) {
                        BOOL v111 = v99 < v109;
                      }
                      if (v111)
                      {
                        unsigned int *v12 = v99;
                        v12[1] = v109;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v13 <= 95)
          {
            if (a5)
            {
              if (v12 != a2)
              {
                unint64_t v112 = (unint64_t)(v12 + 1);
                if (v12 + 1 != a2)
                {
                  uint64_t v113 = *a3;
                  uint64_t v114 = 4;
                  unsigned int v115 = v12;
                  do
                  {
                    uint64_t v117 = *v115;
                    uint64_t v116 = v115[1];
                    unsigned int v115 = (unsigned int *)v112;
                    unsigned int v118 = *(_DWORD *)(v113 + 4 * v116);
                    unsigned int v119 = *(_DWORD *)(v113 + 4 * v117);
                    LODWORD(v112) = v117;
                    BOOL v120 = v116 < v117;
                    BOOL v6 = v118 == v119;
                    BOOL v121 = v118 < v119;
                    if (!v6) {
                      BOOL v120 = v121;
                    }
                    if (v120)
                    {
                      uint64_t v122 = v114;
                      do
                      {
                        *(unsigned int *)((char *)v12 + v122) = v112;
                        uint64_t v123 = v122 - 4;
                        if (v122 == 4)
                        {
                          uint64_t v129 = v12;
                          goto LABEL_119;
                        }
                        uint64_t v124 = (char *)v12 + v122;
                        unsigned int v125 = *(_DWORD *)(v113 + 4 * v116);
                        unint64_t v112 = *((unsigned int *)v124 - 2);
                        unsigned int v126 = *(_DWORD *)(v113 + 4 * v112);
                        BOOL v6 = v125 == v126;
                        BOOL v127 = v125 < v126;
                        if (v6) {
                          BOOL v128 = v116 < v112;
                        }
                        else {
                          BOOL v128 = v127;
                        }
                        uint64_t v122 = v123;
                      }
                      while (v128);
                      uint64_t v129 = (unsigned int *)((char *)v12 + v123);
LABEL_119:
                      *uint64_t v129 = v116;
                    }
                    unint64_t v112 = (unint64_t)(v115 + 1);
                    v114 += 4;
                  }
                  while (v115 + 1 != a2);
                }
              }
            }
            else if (v12 != a2)
            {
              uint64_t v178 = v12 + 1;
              if (v12 + 1 != a2)
              {
                uint64_t v179 = *a3;
                do
                {
                  uint64_t v181 = *v11;
                  uint64_t v180 = v11[1];
                  uint64_t v11 = v178;
                  unsigned int v182 = *(_DWORD *)(v179 + 4 * v180);
                  unsigned int v183 = *(_DWORD *)(v179 + 4 * v181);
                  LODWORD(v178) = v181;
                  BOOL v184 = v180 < v181;
                  BOOL v6 = v182 == v183;
                  BOOL v185 = v182 < v183;
                  if (!v6) {
                    BOOL v184 = v185;
                  }
                  if (v184)
                  {
                    uint64_t v186 = v11;
                    do
                    {
                      *uint64_t v186 = v178;
                      unsigned int v187 = *(_DWORD *)(v179 + 4 * v180);
                      uint64_t v178 = (unsigned int *)*(v186 - 2);
                      unsigned int v188 = *(_DWORD *)(v179 + 4 * (void)v178);
                      BOOL v6 = v187 == v188;
                      BOOL v189 = v187 < v188;
                      if (v6) {
                        BOOL v189 = v180 < v178;
                      }
                      --v186;
                    }
                    while (v189);
                    *uint64_t v186 = v180;
                  }
                  uint64_t v178 = v11 + 1;
                }
                while (v11 + 1 != a2);
              }
            }
            return result;
          }
          if (!a4)
          {
            if (v12 != a2)
            {
              int64_t v130 = (v14 - 2) >> 1;
              uint64_t v131 = *a3;
              int64_t v132 = v130;
              do
              {
                int64_t v133 = v132;
                if (v130 >= v132)
                {
                  uint64_t v134 = (2 * v132) | 1;
                  uint64_t v135 = &v12[v134];
                  if (2 * v133 + 2 < (uint64_t)v14)
                  {
                    uint64_t v136 = *v135;
                    unsigned int v137 = *(_DWORD *)(v131 + 4 * v136);
                    uint64_t v138 = v135[1];
                    unsigned int v139 = *(_DWORD *)(v131 + 4 * v138);
                    BOOL v6 = v137 == v139;
                    BOOL v140 = v137 < v139;
                    if (v6) {
                      BOOL v140 = v136 < v138;
                    }
                    BOOL v141 = !v140;
                    if (v140) {
                      LODWORD(v142) = v135[1];
                    }
                    else {
                      LODWORD(v142) = *v135;
                    }
                    if (!v141)
                    {
                      ++v135;
                      uint64_t v134 = 2 * v133 + 2;
                    }
                  }
                  else
                  {
                    LODWORD(v142) = *v135;
                  }
                  unsigned int v143 = &v12[v133];
                  unsigned int v144 = *(_DWORD *)(v131 + 4 * v142);
                  uint64_t v145 = *v143;
                  unsigned int v146 = *(_DWORD *)(v131 + 4 * v145);
                  BOOL v6 = v144 == v146;
                  LODWORD(result) = v144 < v146;
                  if (v6) {
                    BOOL result = v142 < v145;
                  }
                  else {
                    BOOL result = result;
                  }
                  if ((result & 1) == 0)
                  {
                    do
                    {
                      *unsigned int v143 = v142;
                      unsigned int v143 = v135;
                      if (v130 < v134) {
                        break;
                      }
                      uint64_t v147 = (2 * v134) | 1;
                      uint64_t v135 = &v12[v147];
                      uint64_t v134 = 2 * v134 + 2;
                      if (v134 < (uint64_t)v14)
                      {
                        uint64_t v142 = *v135;
                        unsigned int v148 = *(_DWORD *)(v131 + 4 * v142);
                        uint64_t v149 = v135[1];
                        unsigned int v150 = *(_DWORD *)(v131 + 4 * v149);
                        BOOL v6 = v148 == v150;
                        BOOL v151 = v148 < v150;
                        if (v6) {
                          BOOL v151 = v142 < v149;
                        }
                        if (v151)
                        {
                          LODWORD(v142) = v135[1];
                          ++v135;
                        }
                        else
                        {
                          uint64_t v134 = v147;
                        }
                      }
                      else
                      {
                        LODWORD(v142) = *v135;
                        uint64_t v134 = v147;
                      }
                      unsigned int v152 = *(_DWORD *)(v131 + 4 * v142);
                      unsigned int v153 = *(_DWORD *)(v131 + 4 * v145);
                      BOOL v6 = v152 == v153;
                      LODWORD(result) = v152 < v153;
                      BOOL result = v6 ? v142 < v145 : result;
                    }
                    while (result != 1);
                    *unsigned int v143 = v145;
                  }
                }
                int64_t v132 = v133 - 1;
              }
              while (v133);
              uint64_t v154 = (unint64_t)v13 >> 2;
              do
              {
                uint64_t v155 = 0;
                unsigned int v156 = *v12;
                uint64_t v157 = *a3;
                unint64_t v158 = v12;
                do
                {
                  uint64_t v159 = &v158[v155 + 1];
                  uint64_t v160 = (2 * v155) | 1;
                  uint64_t v155 = 2 * v155 + 2;
                  if (v155 >= v154)
                  {
                    LODWORD(v161) = *v159;
                    uint64_t v155 = v160;
                  }
                  else
                  {
                    uint64_t v161 = *v159;
                    unsigned int v162 = *(_DWORD *)(v157 + 4 * v161);
                    BOOL result = (uint64_t)(v159 + 1);
                    uint64_t v163 = v159[1];
                    unsigned int v164 = *(_DWORD *)(v157 + 4 * v163);
                    BOOL v6 = v162 == v164;
                    BOOL v165 = v162 < v164;
                    if (v6) {
                      BOOL v165 = v161 < v163;
                    }
                    if (v165)
                    {
                      LODWORD(v161) = v159[1];
                      ++v159;
                    }
                    else
                    {
                      uint64_t v155 = v160;
                    }
                  }
                  unsigned int *v158 = v161;
                  unint64_t v158 = v159;
                }
                while (v155 <= (uint64_t)((unint64_t)(v154 - 2) >> 1));
                if (v159 == --a2)
                {
                  *uint64_t v159 = v156;
                }
                else
                {
                  *uint64_t v159 = *a2;
                  *a2 = v156;
                  uint64_t v166 = (char *)v159 - (char *)v12 + 4;
                  if (v166 >= 5)
                  {
                    unint64_t v167 = (((unint64_t)v166 >> 2) - 2) >> 1;
                    uint64_t v168 = &v12[v167];
                    uint64_t v169 = *v168;
                    unsigned int v170 = *(_DWORD *)(v157 + 4 * v169);
                    uint64_t v171 = *v159;
                    unsigned int v172 = *(_DWORD *)(v157 + 4 * v171);
                    BOOL v6 = v170 == v172;
                    BOOL v173 = v170 < v172;
                    if (v6) {
                      BOOL v173 = v169 < v171;
                    }
                    if (v173)
                    {
                      do
                      {
                        *uint64_t v159 = v169;
                        uint64_t v159 = v168;
                        if (!v167) {
                          break;
                        }
                        unint64_t v167 = (v167 - 1) >> 1;
                        uint64_t v168 = &v12[v167];
                        uint64_t v169 = *v168;
                        unsigned int v174 = *(_DWORD *)(v157 + 4 * v169);
                        unsigned int v175 = *(_DWORD *)(v157 + 4 * v171);
                        BOOL v6 = v174 == v175;
                        BOOL v176 = v174 < v175;
                        if (v6) {
                          BOOL v176 = v169 < v171;
                        }
                      }
                      while (v176);
                      *uint64_t v159 = v171;
                    }
                  }
                }
              }
              while (v154-- > 2);
            }
            return result;
          }
          unint64_t v15 = v14 >> 1;
          BOOL v16 = &v12[v14 >> 1];
          uint64_t v17 = *a3;
          if ((unint64_t)v13 >= 0x201)
          {
            unsigned int v18 = *v11;
            *uint64_t v11 = *v16;
            *BOOL v16 = v18;
          }
          else
          {
          }
          --a4;
          uint64_t v19 = *v11;
          uint64_t v20 = *a3;
          if (a5)
          {
            unsigned int v21 = *(_DWORD *)(v20 + 4 * v19);
            break;
          }
          uint64_t v22 = *(v11 - 1);
          unsigned int v23 = *(_DWORD *)(v20 + 4 * v22);
          unsigned int v21 = *(_DWORD *)(v20 + 4 * v19);
          BOOL v24 = v22 < v19;
          BOOL v6 = v23 == v21;
          BOOL v25 = v23 < v21;
          if (!v6) {
            BOOL v24 = v25;
          }
          if (v24) {
            break;
          }
          uint64_t v55 = *(a2 - 1);
          unsigned int v56 = *(_DWORD *)(v20 + 4 * v55);
          BOOL v57 = v19 < v55;
          BOOL v6 = v21 == v56;
          BOOL v58 = v21 < v56;
          if (!v6) {
            BOOL v57 = v58;
          }
          if (v57)
          {
            uint64_t v12 = v11;
            do
            {
              unsigned int v59 = v12[1];
              ++v12;
              unsigned int v60 = *(_DWORD *)(v20 + 4 * v59);
              BOOL v61 = v19 < v59;
              BOOL v6 = v21 == v60;
              BOOL v62 = v21 < v60;
              if (!v6) {
                BOOL v61 = v62;
              }
            }
            while (!v61);
          }
          else
          {
            uint64_t v63 = v11 + 1;
            do
            {
              uint64_t v12 = v63;
              if (v63 >= a2) {
                break;
              }
              ++v63;
              uint64_t v64 = *v12;
              unsigned int v65 = *(_DWORD *)(v20 + 4 * v64);
              BOOL v66 = v19 < v64;
              BOOL v6 = v21 == v65;
              BOOL v67 = v21 < v65;
              if (!v6) {
                BOOL v66 = v67;
              }
            }
            while (!v66);
          }
          unsigned int v68 = a2;
          if (v12 < a2)
          {
            unsigned int v68 = a2;
            do
            {
              unsigned int v69 = *--v68;
              unsigned int v70 = *(_DWORD *)(v20 + 4 * v69);
              BOOL v71 = v19 < v69;
              BOOL v6 = v21 == v70;
              BOOL v72 = v21 < v70;
              if (!v6) {
                BOOL v71 = v72;
              }
            }
            while (v71);
          }
          if (v12 < v68)
          {
            unsigned int v73 = *v12;
            unsigned int v74 = *v68;
            do
            {
              unsigned int *v12 = v74;
              *unsigned int v68 = v73;
              unsigned int v75 = *(_DWORD *)(v20 + 4 * v19);
              do
              {
                unsigned int v76 = v12[1];
                ++v12;
                unsigned int v73 = v76;
                unsigned int v77 = *(_DWORD *)(v20 + 4 * v76);
                BOOL v78 = v19 < v76;
                BOOL v6 = v75 == v77;
                BOOL v79 = v75 < v77;
                if (v6) {
                  BOOL v79 = v78;
                }
              }
              while (!v79);
              do
              {
                unsigned int v80 = *--v68;
                unsigned int v74 = v80;
                unsigned int v81 = *(_DWORD *)(v20 + 4 * v80);
                BOOL v82 = v19 < v80;
                BOOL v6 = v75 == v81;
                BOOL v83 = v75 < v81;
                if (v6) {
                  BOOL v83 = v82;
                }
              }
              while (v83);
            }
            while (v12 < v68);
          }
          unsigned int v84 = v12 - 1;
          BOOL v5 = v12 - 1 >= v11;
          BOOL v6 = v12 - 1 == v11;
          if (v12 - 1 != v11) {
            *uint64_t v11 = *v84;
          }
          a5 = 0;
          *unsigned int v84 = v19;
        }
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = v11[v26 + 1];
          unsigned int v28 = *(_DWORD *)(v20 + 4 * v27);
          BOOL v6 = v28 == v21;
          BOOL v29 = v28 < v21;
          if (v6) {
            BOOL v29 = v27 < v19;
          }
          ++v26;
        }
        while (v29);
        BOOL v30 = &v11[v26];
        uint64_t v31 = a2;
        if (v26 == 1)
        {
          uint64_t v31 = a2;
          do
          {
            if (v30 >= v31) {
              break;
            }
            unsigned int v36 = *--v31;
            unsigned int v37 = *(_DWORD *)(v20 + 4 * v36);
            BOOL v38 = v36 < v19;
            BOOL v6 = v37 == v21;
            BOOL v39 = v37 < v21;
            if (!v6) {
              BOOL v38 = v39;
            }
          }
          while (!v38);
        }
        else
        {
          do
          {
            unsigned int v32 = *--v31;
            unsigned int v33 = *(_DWORD *)(v20 + 4 * v32);
            BOOL v34 = v32 < v19;
            BOOL v6 = v33 == v21;
            BOOL v35 = v33 < v21;
            if (!v6) {
              BOOL v34 = v35;
            }
          }
          while (!v34);
        }
        if (v30 >= v31)
        {
          BOOL v53 = v30 - 1;
        }
        else
        {
          unsigned int v40 = *v31;
          unsigned int v41 = v27;
          uint64_t v42 = v30;
          int v43 = v31;
          do
          {
            *uint64_t v42 = v40;
            unsigned int *v43 = v41;
            unsigned int v44 = *(_DWORD *)(v20 + 4 * v19);
            do
            {
              unsigned int v45 = v42[1];
              ++v42;
              unsigned int v41 = v45;
              unsigned int v46 = *(_DWORD *)(v20 + 4 * v45);
              BOOL v47 = v45 < v19;
              BOOL v6 = v46 == v44;
              BOOL v48 = v46 < v44;
              if (v6) {
                BOOL v48 = v47;
              }
            }
            while (v48);
            do
            {
              unsigned int v49 = *--v43;
              unsigned int v40 = v49;
              unsigned int v50 = *(_DWORD *)(v20 + 4 * v49);
              BOOL v51 = v49 < v19;
              BOOL v6 = v50 == v44;
              BOOL v52 = v50 < v44;
              if (v6) {
                BOOL v52 = v51;
              }
            }
            while (!v52);
          }
          while (v42 < v43);
          BOOL v53 = v42 - 1;
        }
        if (v53 != v11) {
          *uint64_t v11 = *v53;
        }
        unsigned int *v53 = v19;
        if (v30 >= v31) {
          break;
        }
LABEL_46:
        a5 = 0;
        uint64_t v12 = v53 + 1;
      }
      uint64_t v12 = v53 + 1;
      if (result) {
        break;
      }
      if (!v54) {
        goto LABEL_46;
      }
    }
    a2 = v53;
    if (!v54) {
      continue;
    }
    return result;
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  unsigned int v5 = *(_DWORD *)(a4 + 4 * v4);
  uint64_t v6 = *result;
  unsigned int v7 = *(_DWORD *)(a4 + 4 * v6);
  BOOL v8 = v4 < v6;
  BOOL v9 = v5 == v7;
  BOOL v10 = v5 < v7;
  uint64_t v11 = *a3;
  unsigned int v12 = *(_DWORD *)(a4 + 4 * v11);
  if (!v9) {
    BOOL v8 = v10;
  }
  BOOL v9 = v12 == v5;
  BOOL v13 = v12 < v5;
  if (v9) {
    BOOL v13 = v11 < v4;
  }
  if (v8)
  {
    if (v13)
    {
      *BOOL result = v11;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *BOOL result = v4;
    *a2 = v6;
    uint64_t v19 = *a3;
    unsigned int v20 = *(_DWORD *)(a4 + 4 * v19);
    unsigned int v21 = *(_DWORD *)(a4 + 4 * v6);
    BOOL v9 = v20 == v21;
    BOOL v22 = v20 < v21;
    if (v9) {
      BOOL v22 = v19 < v6;
    }
    if (v22)
    {
      *a2 = v19;
      goto LABEL_17;
    }
  }
  else if (v13)
  {
    *a2 = v11;
    *a3 = v4;
    uint64_t v14 = *a2;
    unsigned int v15 = *(_DWORD *)(a4 + 4 * v14);
    uint64_t v16 = *result;
    unsigned int v17 = *(_DWORD *)(a4 + 4 * v16);
    BOOL v9 = v15 == v17;
    BOOL v18 = v15 < v17;
    if (v9) {
      BOOL v18 = v14 < v16;
    }
    if (v18)
    {
      *BOOL result = v14;
      *a2 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      unsigned int v9 = *(_DWORD *)(*a3 + 4 * v8);
      uint64_t v10 = *a1;
      unsigned int v11 = *(_DWORD *)(*a3 + 4 * v10);
      BOOL v12 = v9 == v11;
      BOOL v13 = v9 < v11;
      if (v12) {
        BOOL v13 = v8 < v10;
      }
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      unsigned int v32 = a1 + 2;
      unsigned int v33 = a1 + 3;
      uint64_t v34 = *a3;
      uint64_t v35 = *(a2 - 1);
      unsigned int v36 = *(_DWORD *)(*a3 + 4 * v35);
      uint64_t v37 = a1[3];
      unsigned int v38 = *(_DWORD *)(*a3 + 4 * v37);
      BOOL v12 = v36 == v38;
      BOOL v39 = v36 < v38;
      if (v12) {
        BOOL v39 = v35 < v37;
      }
      if (v39)
      {
        _DWORD *v33 = v35;
        *(a2 - 1) = v37;
        uint64_t v40 = *v33;
        unsigned int v41 = *(_DWORD *)(v34 + 4 * v40);
        uint64_t v42 = *v32;
        unsigned int v43 = *(_DWORD *)(v34 + 4 * v42);
        BOOL v12 = v41 == v43;
        BOOL v44 = v41 < v43;
        if (v12) {
          BOOL v44 = v40 < v42;
        }
        if (v44)
        {
          _DWORD *v32 = v40;
          _DWORD *v33 = v42;
          unsigned int v45 = *(_DWORD *)(v34 + 4 * v40);
          uint64_t v46 = a1[1];
          unsigned int v47 = *(_DWORD *)(v34 + 4 * v46);
          BOOL v12 = v45 == v47;
          BOOL v48 = v45 < v47;
          if (v12) {
            BOOL v48 = v40 < v46;
          }
          if (v48)
          {
            a1[1] = v40;
            a1[2] = v46;
            unsigned int v49 = *(_DWORD *)(v34 + 4 * v40);
            uint64_t v50 = *a1;
            unsigned int v51 = *(_DWORD *)(v34 + 4 * v50);
            BOOL v12 = v49 == v51;
            BOOL v52 = v49 < v51;
            if (v12) {
              BOOL v52 = v40 < v50;
            }
            if (v52)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v14 = a1 + 2;
      unsigned int v15 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v16 = 0;
      uint64_t v17 = *a3;
      uint64_t v18 = 12;
      break;
  }
  while (1)
  {
    uint64_t v19 = *v15;
    unsigned int v20 = *(_DWORD *)(v17 + 4 * v19);
    uint64_t v21 = *v14;
    unsigned int v22 = *(_DWORD *)(v17 + 4 * v21);
    BOOL v12 = v20 == v22;
    BOOL v23 = v20 < v22;
    if (v12) {
      BOOL v23 = v19 < v21;
    }
    if (v23)
    {
      uint64_t v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v21;
        uint64_t v25 = v24 - 4;
        if (v24 == 4) {
          break;
        }
        uint64_t v26 = (char *)a1 + v24;
        unsigned int v27 = *(_DWORD *)(v17 + 4 * v19);
        uint64_t v21 = *((unsigned int *)v26 - 2);
        unsigned int v28 = *(_DWORD *)(v17 + 4 * v21);
        BOOL v12 = v27 == v28;
        BOOL v29 = v27 < v28;
        if (v12) {
          BOOL v30 = v19 < v21;
        }
        else {
          BOOL v30 = v29;
        }
        uint64_t v24 = v25;
        if (!v30)
        {
          uint64_t v31 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_20;
        }
      }
      uint64_t v31 = a1;
LABEL_20:
      _DWORD *v31 = v19;
      if (++v16 == 8) {
        return v15 + 1 == a2;
      }
    }
    uint64_t v14 = v15;
    v18 += 4;
    if (++v15 == a2) {
      return 1;
    }
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  unsigned int v13 = *(_DWORD *)(*a5 + 4 * v12);
  uint64_t v14 = *a3;
  unsigned int v15 = *(_DWORD *)(*a5 + 4 * v14);
  BOOL v16 = v13 == v15;
  BOOL v17 = v13 < v15;
  if (v16) {
    BOOL v17 = v12 < v14;
  }
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    uint64_t v18 = *a3;
    unsigned int v19 = *(_DWORD *)(v11 + 4 * v18);
    uint64_t v20 = *a2;
    unsigned int v21 = *(_DWORD *)(v11 + 4 * v20);
    BOOL v16 = v19 == v21;
    BOOL v22 = v19 < v21;
    if (v16) {
      BOOL v22 = v18 < v20;
    }
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      uint64_t v23 = *a2;
      unsigned int v24 = *(_DWORD *)(v11 + 4 * v23);
      uint64_t v25 = *a1;
      unsigned int v26 = *(_DWORD *)(v11 + 4 * v25);
      BOOL v16 = v24 == v26;
      BOOL v27 = v24 < v26;
      if (v16) {
        BOOL v27 = v23 < v25;
      }
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

float32x4_t *re::BoundingSphere::expandToIncludeSphere(float32x4_t *result, float32x4_t *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8 = &a2->f32[3];
  float32x4_t v9 = vsubq_f32(*a2, *result);
  float32x4_t v10 = vmulq_f32(v9, v9);
  *(float *)&a8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  LODWORD(v11) = HIDWORD(*(unsigned long long *)a2);
  float v12 = v11 + *(float *)&a8;
  LODWORD(v13) = HIDWORD(*(unsigned long long *)result);
  if ((float)(v11 + *(float *)&a8) >= v13)
  {
    if (v11 <= (float)(v13 + *(float *)&a8))
    {
      if (*(float *)&a8 >= 0.00001)
      {
        float32x4_t v15 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0));
        float v16 = v11 - *(float *)&a8;
        if (v16 < v13) {
          LODWORD(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = HIDWORD(*(unsigned long long *)result);
        }
        float32x4_t v17 = vaddq_f32(vaddq_f32(*result, vmulq_n_f32(v15, v12)), vsubq_f32(*result, vmulq_n_f32(v15, v16)));
        v18.i64[0] = 0x3F0000003F000000;
        v18.i64[1] = 0x3F0000003F000000;
        *BOOL result = vmulq_f32(v17, v18);
        float v14 = (float)(v12 + v16) * 0.5;
      }
      else
      {
        if (v13 >= v11) {
          uint64_t v8 = &result->f32[3];
        }
        float v14 = *v8;
      }
    }
    else
    {
      *BOOL result = *a2;
      float v14 = a2->f32[3];
    }
    result->f32[3] = v14;
  }
  return result;
}

uint64_t re::internal::addCapsuleCap(unsigned int **a1, unsigned int a2, unsigned int a3, float32x4_t *a4, float a5)
{
  unsigned int v6 = a3;
  unsigned int v7 = a2;
  uint64_t v8 = a1;
  if (a1[4]) {
    _ZF = a1[3] == 0;
  }
  else {
    _ZF = 1;
  }
  int v10 = !_ZF;
  int v114 = v10;
  uint64_t v11 = (uint64_t)*a1;
  unsigned int v115 = a1[1];
  uint64_t v116 = a1[2];
  uint64_t v12 = **a1;
  uint64_t v96 = *((void *)*a1 + 3);
  unsigned int v97 = v12 + 1;
  int v95 = a3 * a2;
  int v13 = v12 + 1 + a3 * a2;
  *(_DWORD *)uint64_t v11 = v13;
  *(_DWORD *)(v11 + 160) = v13;
  uint64_t v14 = *(void *)(v11 + 184);
  if (v14)
  {
    float32x4_t v15 = *(uint64_t **)(v11 + 200);
    uint64_t v16 = 8 * v14;
    do
    {
      uint64_t v17 = *v15++;
      (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, *(unsigned int *)(v11 + 160));
      v16 -= 8;
    }
    while (v16);
  }
  uint64_t v18 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v11 + 48), "vertexPosition");
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18)) {
    goto LABEL_95;
  }
  uint64_t v19 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v18, 0);
  unsigned int v104 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
  if (v104 <= v12) {
    goto LABEL_95;
  }
  float32x4_t v20 = 0uLL;
  float32x4_t v21 = vaddq_f32(a4[3], vmlaq_f32(vmlaq_n_f32(vmulq_f32(*a4, (float32x4_t)0), a4[1], a5), (float32x4_t)0, a4[2]));
  *(float32x4_t *)(v19 + 16 * v12) = vdivq_f32(v21, (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3));
  if (v116)
  {
    BOOL v22 = v8;
    uint64_t v23 = v8[2];
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v23 + 16))(v23)) {
      goto LABEL_96;
    }
    uint64_t v24 = re::internal::GeomTypedAttribute<double>::operator[](v23, 0);
    unsigned int v124 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 16))(v23);
    if (v124 <= v12) {
      goto LABEL_96;
    }
    *(void *)(v24 + 8 * v12) = 0x3F0000003F000000;
    float32x4_t v20 = 0uLL;
    uint64_t v8 = v22;
  }
  else
  {
    uint64_t v24 = 0;
    unsigned int v124 = -1;
  }
  if (v115)
  {
    uint64_t v25 = v19;
    float32x4_t v118 = a4[1];
    float32x4_t v120 = *a4;
    float32x4_t v122 = a4[2];
    uint64_t v26 = v8[1];
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v26 + 16))(v26)
      || (uint64_t v27 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v26, 0),
          unsigned int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 16))(v26),
          v28 <= v12))
    {
LABEL_97:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    float32x4_t v29 = v118;
    float32x4_t v20 = v120;
    float32x4_t v30 = v122;
    float32x4_t v31 = vmlaq_f32(vaddq_f32(vmulq_f32(v120, (float32x4_t)0), v118), (float32x4_t)0, v122);
    *(float32x4_t *)(v27 + 16 * v12) = v31;
    float32x4_t v32 = vmulq_f32(v31, (float32x4_t)xmmword_23435FD60);
    BOOL v111 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0] > 0.0;
    unint64_t v113 = v28;
    uint64_t v19 = v25;
  }
  else
  {
    uint64_t v27 = 0;
    BOOL v111 = 0;
    unint64_t v113 = 0xFFFFFFFFLL;
    float32x4_t v29 = 0uLL;
    float32x4_t v30 = 0uLL;
  }
  float32x4_t v121 = v20;
  float32x4_t v123 = v30;
  float32x4_t v119 = v29;
  int v94 = v12;
  if (!v114)
  {
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    unsigned int v35 = -1;
    unsigned int v36 = -1;
    if (!v6) {
      goto LABEL_57;
    }
    goto LABEL_34;
  }
  unsigned int v33 = v8;
  uint64_t v34 = v8[3];
  if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 16))(v34))
  {
    uint64_t v106 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v34, 0);
    unsigned int v112 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
  }
  else
  {
    unsigned int v112 = 0;
    uint64_t v106 = 0;
  }
  uint64_t v37 = v33[4];
  unsigned int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
  if (v35)
  {
    uint64_t v105 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v37, 0);
    unsigned int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
  }
  else
  {
    uint64_t v105 = 0;
  }
  unsigned int v36 = v112;
  if (v112 <= v12) {
    goto LABEL_93;
  }
  *(float32x4_t *)(v106 + 16 * v12) = vmlaq_f32(vmlaq_f32(v121, (float32x4_t)0, v119), (float32x4_t)0, v123);
  if (v35 <= v12)
  {
LABEL_94:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_95:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_97;
  }
  __asm { FMOV            V0.4S, #-1.0 }
  *(float32x4_t *)(v105 + 16 * v12) = vmlaq_f32(vmlaq_f32(vmulq_f32(v121, (float32x4_t)0), (float32x4_t)0, v119), _Q0, v123);
  if (v6)
  {
LABEL_34:
    unsigned int v42 = 0;
    float v43 = 6.2832 / (float)v7;
    float v44 = (float)v6;
    unint64_t v109 = v35;
    unint64_t v110 = v36;
    unsigned int v45 = v7;
    unsigned int v108 = v97;
    float v46 = 1.5708 / (float)v6;
    unsigned int v103 = v7;
    uint64_t v102 = v11;
    unsigned int v101 = v6;
    uint64_t v99 = v24;
    uint64_t v100 = v19;
    uint64_t v98 = v27;
    do
    {
      unsigned int v47 = v42 + 1;
      __float2 v48 = __sincosf_stret(v46 * (float)(v42 + 1));
      if (v7)
      {
        unsigned int v107 = v42 + 1;
        uint64_t v49 = 0;
        float v50 = (float)v42 + 1.0;
        uint64_t v51 = v106 + 16 * v108;
        uint64_t v52 = v27 + 16 * v108;
        float v53 = v50 / v44;
        if (v104 >= v108) {
          unsigned int v54 = v104 - v108;
        }
        else {
          unsigned int v54 = 0;
        }
        uint64_t v55 = v24 + 8 * v108;
        uint64_t v56 = v19 + 16 * v108;
        do
        {
          __float2 v58 = __sincosf_stret(v43 * (float)v49);
          if (v54 == v49) {
            goto LABEL_87;
          }
          unint64_t v59 = v108 + v49;
          v57.f32[0] = v48.__sinval * v58.__cosval;
          float32x4_t v60 = v57;
          v60.i32[1] = LODWORD(v48.__cosval);
          float32x4_t v61 = v60;
          v61.f32[2] = v58.__sinval * (float)-v48.__sinval;
          float32x4_t v62 = vmulq_n_f32(v61, a5);
          float32x4_t v63 = vaddq_f32(a4[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, v62.f32[0]), a4[1], *(float32x2_t *)v62.f32, 1), a4[2], v62, 2));
          *(float32x4_t *)(v56 + 16 * v49) = vdivq_f32(v63, (float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 3));
          if (v116)
          {
            if (v59 >= v124) {
              goto LABEL_88;
            }
            v64.f32[0] = (float)(v53 * v58.__cosval) + 1.0;
            v64.f32[1] = (float)(v53 * v58.__sinval) + 1.0;
            *(float32x2_t *)(v55 + 8 * v49) = vmul_f32(v64, (float32x2_t)0x3F0000003F000000);
          }
          if (v115)
          {
            if (v59 >= v113) {
              goto LABEL_89;
            }
            *(float32x4_t *)(v52 + 16 * v49) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v121, v57.f32[0]), v119, *(float32x2_t *)v60.f32, 1), v123, v61, 2);
          }
          if (v114)
          {
            if (v59 >= v110) {
              goto LABEL_90;
            }
            v65.i64[0] = LODWORD(v58.__sinval);
            v65.i64[1] = LODWORD(v58.__cosval);
            int8x16_t v66 = (int8x16_t)vnegq_f32(v65);
            if (v111) {
              unsigned int v67 = -1;
            }
            else {
              unsigned int v67 = 0;
            }
            float32x4_t v68 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v67), v66, (int8x16_t)v65);
            *(float32x4_t *)(v51 + 16 * v49) = v68;
            if (v59 >= v109) {
              goto LABEL_91;
            }
            float32x4_t v69 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61), (int8x16_t)v61, 0xCuLL), vnegq_f32(v68)), v61, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL));
            *(float32x4_t *)(v105 + 16 * v108 + 16 * v49) = vnegq_f32(vmlaq_lane_f32(vmlaq_n_f32(vmulq_laneq_f32(v121, v69, 2), v119, v69.f32[0]), v123, *(float32x2_t *)v69.f32, 1));
            *(float32x4_t *)(v51 + 16 * v49) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v121, COERCE_FLOAT(*(_OWORD *)(v51 + 16 * v49))), v119, *(float32x2_t *)(v51 + 16 * v49), 1), v123, *(float32x4_t *)(v51 + 16 * v49), 2);
          }
          ++v49;
        }
        while (v45 != v49);
        v108 += v49;
        unsigned int v7 = v103;
        uint64_t v11 = v102;
        unsigned int v6 = v101;
        uint64_t v24 = v99;
        uint64_t v19 = v100;
        uint64_t v27 = v98;
        unsigned int v47 = v107;
      }
      unsigned int v42 = v47;
    }
    while (v47 != v6);
  }
LABEL_57:
  int v70 = v96;
  uint64_t result = (uint64_t)re::DynamicArray<re::GeomCell4>::resize((void *)(v11 + 8), (v95 + v96));
  *(_DWORD *)(v11 + 272) = v95 + v96;
  uint64_t v72 = *(void *)(v11 + 296);
  if (v72)
  {
    unsigned int v73 = *(uint64_t **)(v11 + 312);
    uint64_t v74 = 8 * v72;
    do
    {
      uint64_t v75 = *v73++;
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v75 + 72))(v75, *(unsigned int *)(v11 + 272));
      v74 -= 8;
    }
    while (v74);
  }
  int v76 = v94;
  if (v7)
  {
    uint64_t v77 = 0;
    unint64_t v78 = *(void *)(v11 + 24);
    int v70 = v96 + v7;
    unsigned int v79 = v97;
    while (1)
    {
      unint64_t v80 = (v96 + v77);
      if (v78 <= v80) {
        break;
      }
      unsigned int v81 = v94 + v77 + 2;
      if (v7 - 1 == v77) {
        unsigned int v81 = v97;
      }
      BOOL v82 = (_DWORD *)(*(void *)(v11 + 40) + 16 * v80);
      *BOOL v82 = v94;
      v82[1] = v94 + v77 + 1;
      _OWORD v82[2] = v81;
      v82[3] = -1;
      if (v7 == ++v77) {
        goto LABEL_68;
      }
    }
LABEL_92:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_93:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_94;
  }
  unsigned int v79 = v97;
LABEL_68:
  if (v6 == 1) {
    return result;
  }
  int v83 = 0;
  unsigned int v84 = v7 - 1;
  int v85 = v94 + v7;
  do
  {
    if (!v7) {
      goto LABEL_84;
    }
    int v86 = 0;
    unsigned int v87 = v79 + v83 * v7;
    unint64_t v88 = *(void *)(v11 + 24);
    do
    {
      uint64_t v89 = (v70 + v86);
      int v90 = v85 + v86 + 2;
      LODWORD(result) = v76 + v86 + 2;
      if (v86 - v7 == -1) {
        uint64_t result = v87;
      }
      else {
        uint64_t result = result;
      }
      if (v86 - v7 == -1)
      {
        int v90 = v87 + v7;
        int v91 = v87 + v84 + v7;
      }
      else
      {
        int v91 = v85 + v86 + 1;
      }
      if (v86 - v7 == -1) {
        int v92 = v87 + v84;
      }
      else {
        int v92 = v76 + v86 + 1;
      }
      if (v88 <= v89)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_89:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_90:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_91:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_92;
      }
      uint64_t v93 = (int *)(*(void *)(v11 + 40) + 16 * v89);
      *uint64_t v93 = v92;
      v93[1] = v91;
      v93[2] = v90;
      v93[3] = result;
      ++v86;
    }
    while (v86 != v7);
    v70 += v86;
LABEL_84:
    ++v83;
    v76 += v7;
    v85 += v7;
  }
  while (v83 != v6 - 1);
  return result;
}

uint64_t re::buildCapsule(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  long long v122 = 0u;
  long long v121 = 0u;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v109);
  if (*a2 < 3u || !a2[1] || !a2[2])
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 16)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 17))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexNormal", 1, 7);
      if (*((unsigned char *)a2 + 16))
      {
        if (*((unsigned char *)a2 + 17))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v109);
    goto LABEL_13;
  }
  float32x4_t v120 = &v109;
  unsigned int v5 = v113;
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexPosition", 1, 7);
  if (*((unsigned char *)a2 + 17))
  {
    unsigned int v6 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexNormal", 1, 7);
    *(void *)&long long v121 = v6;
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v102 = v6;
  uint64_t v91 = a1;
  if (*((unsigned char *)a2 + 16))
  {
    unint64_t v8 = 0;
    *((void *)&v121 + 1) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexUV", 1, 6);
    uint64_t v103 = *((void *)&v121 + 1);
    if (*((unsigned char *)a2 + 16) && *((unsigned char *)a2 + 17))
    {
      unint64_t v8 = (unint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexTangent", 1, 7);
      *(void *)&long long v122 = v8;
      float32x4_t v9 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v113, "vertexBitangent", 1, 7);
      *((void *)&v122 + 1) = v9;
    }
    else
    {
      float32x4_t v9 = 0;
    }
  }
  else
  {
    unint64_t v8 = 0;
    float32x4_t v9 = 0;
    uint64_t v103 = 0;
  }
  float v10 = *((float *)a2 + 2);
  float32_t v11 = (float)(*((float *)a2 + 3) + (float)(v10 * -2.0)) * 0.5;
  v108[0] = (float32x4_t)xmmword_23435FD50;
  v108[1] = (float32x4_t)xmmword_23435FD60;
  v12.i32[0] = 0;
  v12.f32[1] = v11;
  v12.i32[2] = 0;
  v12.i32[3] = 1.0;
  float32x4_t v98 = v12;
  v108[2] = (float32x4_t)xmmword_23435FD80;
  v108[3] = v12;
  *(float32x2_t *)v12.f32 = vrsqrte_f32((float32x2_t)1065353216);
  *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32)));
  float32x4_t v13 = vmulq_n_f32((float32x4_t)xmmword_23435FD50, vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32))).f32[0]);
  float v14 = vmulq_f32(v13, v13).f32[0];
  float v15 = vmuls_lane_f32(v13.f32[1], *(float32x2_t *)v13.f32, 1);
  float v16 = vmuls_lane_f32(v13.f32[2], v13, 2);
  float v17 = vmuls_lane_f32(v13.f32[0], *(float32x2_t *)v13.f32, 1);
  float v18 = vmuls_lane_f32(v13.f32[0], v13, 2);
  v12.f32[0] = vmuls_lane_f32(v13.f32[1], v13, 2);
  float v19 = -0.000000087423 * v13.f32[0];
  float v20 = vmuls_lane_f32(-0.000000087423, *(float32x2_t *)v13.f32, 1);
  v13.f32[0] = vmuls_lane_f32(-0.000000087423, v13, 2);
  *(float *)&unsigned int v21 = v16 - (float)(1.0 - v16);
  v22.f32[0] = v14 - (float)(1.0 - v14);
  v22.f32[1] = v13.f32[0] + (float)(v17 * 2.0);
  v22.i64[1] = COERCE_UNSIGNED_INT(-(float)(v20 - (float)(v18 * 2.0)));
  v13.f32[0] = -(float)(v13.f32[0] - (float)(v17 * 2.0));
  v13.f32[1] = v15 - (float)(1.0 - v15);
  v13.i64[1] = COERCE_UNSIGNED_INT(v19 + (float)(v12.f32[0] * 2.0));
  float32x4_t v94 = v13;
  float32x4_t v95 = v22;
  v13.f32[0] = v20 + (float)(v18 * 2.0);
  v13.f32[1] = -(float)(v19 - (float)(v12.f32[0] * 2.0));
  v13.i64[1] = v21;
  float32x4_t v93 = v13;
  unint64_t v23 = *a2;
  unsigned int v24 = a2[2];
  re::internal::addCapsuleCap(&v120, *a2, v24, v108, v10);
  uint64_t v25 = 0;
  long long v123 = xmmword_23435FD50;
  long long v124 = xmmword_23435FD60;
  long long v125 = xmmword_23435FD80;
  float32x4_t v126 = v98;
  do
  {
    *(float32x4_t *)((char *)&v136 + v25) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, COERCE_FLOAT(*(long long *)((char *)&v123 + v25))), v94, *(float32x2_t *)((char *)&v123 + v25), 1), v93, *(float32x4_t *)((char *)&v123 + v25), 2), (float32x4_t)xmmword_23435FBB0, *(float32x4_t *)((char *)&v123 + v25), 3);
    v25 += 16;
  }
  while (v25 != 64);
  re::internal::addCapsuleCap(&v120, v23, v24, &v136, v10);
  *(void *)&long long v125 = 0;
  *(void *)&long long v124 = 0;
  long long v123 = 0uLL;
  DWORD2(v12re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  unsigned int v107 = 0;
  v104[1] = 0;
  unint64_t v105 = 0;
  v104[0] = 0;
  int v106 = 0;
  re::DynamicArray<float>::resize((uint64_t)&v123, v23);
  re::DynamicArray<float>::resize((uint64_t)v104, v23);
  unint64_t v26 = v124;
  if (v23)
  {
    uint64_t v27 = 0;
    int v28 = (v24 - 1) * v23;
    int v29 = (2 * v24 - 1) * v23 + 2;
    uint64_t v30 = v125;
    unint64_t v31 = v105;
    float32x4_t v32 = v107;
    int v33 = v28 + 1;
    unint64_t v34 = v23;
    while (v26 != v27)
    {
      *(_DWORD *)(v30 + 4 * v27) = v29 + v34 % v23;
      if (v31 == v27) {
        goto LABEL_111;
      }
      *v32++ = v33;
      ++v27;
      ++v33;
      if (!--v34) {
        goto LABEL_31;
      }
    }
LABEL_110:
    uint64_t v127 = 0;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    float32x4_t v136 = 0u;
    unint64_t v31 = v26;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v128 = 136315906;
    uint64_t v129 = "operator[]";
    __int16 v130 = 1024;
    int v131 = 789;
    __int16 v132 = 2048;
    unint64_t v133 = v31;
    __int16 v134 = 2048;
    uint64_t v135 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    uint64_t v127 = 0;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    float32x4_t v136 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v128 = 136315906;
    uint64_t v129 = "operator[]";
    __int16 v130 = 1024;
    int v131 = 789;
    __int16 v132 = 2048;
    unint64_t v133 = v31;
    __int16 v134 = 2048;
    uint64_t v135 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    uint64_t v127 = 0;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    float32x4_t v136 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v128 = 136315906;
    uint64_t v129 = "operator[]";
    __int16 v130 = 1024;
    int v131 = 797;
    __int16 v132 = 2048;
    unint64_t v133 = v8;
    __int16 v134 = 2048;
    uint64_t v135 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    uint64_t v127 = 0;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    float32x4_t v136 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v128 = 136315906;
    uint64_t v129 = "operator[]";
    __int16 v130 = 1024;
    int v131 = 609;
    __int16 v132 = 2048;
    unint64_t v133 = v31;
    __int16 v134 = 2048;
    uint64_t v135 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    uint64_t v127 = 0;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    float32x4_t v136 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v128 = 136315906;
    uint64_t v129 = "operator[]";
    __int16 v130 = 1024;
    int v131 = 797;
    __int16 v132 = 2048;
    unint64_t v133 = v8;
    __int16 v134 = 2048;
    uint64_t v135 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    uint64_t v127 = 0;
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    float32x4_t v136 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v128 = 136315906;
    uint64_t v129 = "operator[]";
    __int16 v130 = 1024;
    int v131 = 609;
    __int16 v132 = 2048;
    unint64_t v133 = v2;
    __int16 v134 = 2048;
    uint64_t v135 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_31:
  uint64_t v35 = (uint64_t)v9;
  if (v9) {
    BOOL v36 = v8 == 0;
  }
  else {
    BOOL v36 = 1;
  }
  int v37 = !v36;
  int v99 = v37;
  unsigned int v101 = v26;
  unsigned int v100 = a2[1];
  int v96 = v26 + 1;
  unsigned int v97 = v109;
  v109 += v96 + v96 * v100;
  unsigned int v114 = v109;
  if (v115)
  {
    unsigned int v38 = v116;
    uint64_t v39 = 8 * v115;
    do
    {
      uint64_t v40 = *v38++;
      (*(void (**)(uint64_t, void))(*(void *)v40 + 72))(v40, v114);
      v39 -= 8;
    }
    while (v39);
  }
  uint64_t v41 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v113, "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(void *)v41 + 16))(v41))
  {
    uint64_t v43 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v41, 0);
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41);
  }
  else
  {
    LODWORD(v5) = 0;
    uint64_t v43 = 0;
  }
  uint64_t v44 = (uint64_t)v102;
  uint64_t v45 = v103;
  if (v103)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v103 + 16))(v103))
    {
      uint64_t v46 = re::internal::GeomTypedAttribute<double>::operator[](v103, 0);
      unsigned int v47 = (*(uint64_t (**)(uint64_t))(*(void *)v103 + 16))(v103);
      uint64_t v48 = v46;
      unsigned int v49 = v47;
    }
    else
    {
      uint64_t v48 = 0;
      unsigned int v49 = 0;
    }
    uint64_t v44 = (uint64_t)v102;
    uint64_t v45 = v103;
  }
  else
  {
    uint64_t v48 = 0;
    unsigned int v49 = -1;
  }
  int v92 = a2;
  if (v44)
  {
    uint64_t v2 = v48;
    unsigned int v50 = v49;
    uint64_t v51 = v44;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44))
    {
      uint64_t v52 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v51, 0);
      unsigned int v53 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
    }
    else
    {
      uint64_t v52 = 0;
      unsigned int v53 = 0;
    }
    uint64_t v44 = v51;
    uint64_t v45 = v103;
    unsigned int v49 = v50;
    uint64_t v48 = v2;
  }
  else
  {
    uint64_t v52 = 0;
    unsigned int v53 = -1;
  }
  unsigned int v54 = v101;
  unsigned int v55 = v100;
  int v56 = v99;
  if (v99)
  {
    uint64_t v57 = v48;
    unsigned int v58 = v49;
    if ((*(unsigned int (**)(unint64_t))(*(void *)v8 + 16))(v8))
    {
      uint64_t v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v8, 0);
      unsigned int v59 = (*(uint64_t (**)(unint64_t))(*(void *)v8 + 16))(v8);
    }
    else
    {
      unsigned int v59 = 0;
      uint64_t v2 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 16))(v35))
    {
      uint64_t v61 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v35, 0);
      unsigned int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
    }
    else
    {
      unsigned int v63 = 0;
      uint64_t v61 = 0;
    }
    uint64_t v44 = (uint64_t)v102;
    uint64_t v45 = v103;
    unsigned int v54 = v101;
    unsigned int v55 = v100;
    unsigned int v64 = v97;
    int v56 = v99;
    int v65 = v96;
    unsigned int v49 = v58;
    uint64_t v48 = v57;
    unsigned int v62 = v59;
    uint64_t v60 = v2;
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    unsigned int v62 = -1;
    unsigned int v63 = -1;
    unsigned int v64 = v97;
    int v65 = v96;
  }
  unsigned int v66 = 0;
  float v67 = 1.0 / (float)v100;
  do
  {
    unint64_t v8 = v66 % v54;
    unint64_t v31 = v124;
    if ((unint64_t)v124 <= v8) {
      goto LABEL_112;
    }
    unint64_t v31 = *(unsigned int *)(v125 + 4 * v8);
    if (v5 <= v31) {
      goto LABEL_113;
    }
    uint64_t v2 = v105;
    if (v105 <= v8) {
      goto LABEL_114;
    }
    uint64_t v2 = v107[v8];
    if (v5 <= v2) {
      goto LABEL_115;
    }
    unsigned int v68 = 0;
    unsigned int v69 = v66 + v64;
    do
    {
      if (v5 <= v69)
      {
        uint64_t v127 = 0;
        long long v140 = 0u;
        long long v139 = 0u;
        long long v138 = 0u;
        long long v137 = 0u;
        float32x4_t v136 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v128 = 136315906;
        uint64_t v129 = "operator[]";
        __int16 v130 = 1024;
        int v131 = 609;
        __int16 v132 = 2048;
        unint64_t v133 = v69;
        __int16 v134 = 2048;
        uint64_t v135 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_104:
        uint64_t v127 = 0;
        long long v140 = 0u;
        long long v139 = 0u;
        long long v138 = 0u;
        long long v137 = 0u;
        float32x4_t v136 = 0u;
        unsigned int v63 = v49;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v128 = 136315906;
        uint64_t v129 = "operator[]";
        __int16 v130 = 1024;
        int v131 = 609;
        __int16 v132 = 2048;
        unint64_t v133 = v8;
        __int16 v134 = 2048;
        uint64_t v135 = v63;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_105:
        uint64_t v127 = 0;
        long long v140 = 0u;
        long long v139 = 0u;
        long long v138 = 0u;
        long long v137 = 0u;
        float32x4_t v136 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v128 = 136315906;
        uint64_t v129 = "operator[]";
        __int16 v130 = 1024;
        int v131 = 609;
        __int16 v132 = 2048;
        unint64_t v133 = v8;
        __int16 v134 = 2048;
        uint64_t v135 = v53;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_106:
        uint64_t v127 = 0;
        long long v140 = 0u;
        long long v139 = 0u;
        long long v138 = 0u;
        long long v137 = 0u;
        float32x4_t v136 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v128 = 136315906;
        uint64_t v129 = "operator[]";
        __int16 v130 = 1024;
        int v131 = 609;
        __int16 v132 = 2048;
        unint64_t v133 = v8;
        __int16 v134 = 2048;
        uint64_t v135 = v63;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_107:
        uint64_t v127 = 0;
        long long v140 = 0u;
        long long v139 = 0u;
        long long v138 = 0u;
        long long v137 = 0u;
        float32x4_t v136 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v128 = 136315906;
        uint64_t v129 = "operator[]";
        __int16 v130 = 1024;
        int v131 = 609;
        __int16 v132 = 2048;
        unint64_t v133 = v8;
        __int16 v134 = 2048;
        uint64_t v135 = v53;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_108:
        uint64_t v127 = 0;
        int v83 = &v120;
        long long v140 = 0u;
        long long v139 = 0u;
        long long v138 = 0u;
        long long v137 = 0u;
        float32x4_t v136 = 0u;
        unsigned int v90 = v62;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v128 = 136315906;
        uint64_t v129 = "operator[]";
        __int16 v130 = 1024;
        int v131 = 609;
        __int16 v132 = 2048;
        unint64_t v133 = v8;
        __int16 v134 = 2048;
        uint64_t v135 = v90;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_109:
        uint64_t v127 = 0;
        long long v140 = 0u;
        long long v139 = 0u;
        long long v138 = 0u;
        long long v137 = 0u;
        float32x4_t v136 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v128 = 136315906;
        uint64_t v129 = "operator[]";
        __int16 v130 = 1024;
        int v131 = 789;
        __int16 v132 = 2048;
        unint64_t v133 = v61;
        __int16 v134 = 2048;
        uint64_t v135 = (uint64_t)v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_110;
      }
      unint64_t v8 = v69;
      int v70 = (float32x4_t *)(v43 + 16 * v69);
      float32x4_t *v70 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v43 + 16 * v31), 1.0 - (float)(v67 * (float)v68)), vmulq_n_f32(*(float32x4_t *)(v43 + 16 * v2), v67 * (float)v68));
      if (v45)
      {
        if (v49 <= v69) {
          goto LABEL_104;
        }
        *(float *)&uint64_t v71 = (float)(1.0 / (float)v101) * (float)v66;
        *((float *)&v71 + 1) = v67 * (float)v68;
        *(void *)(v48 + 8 * v69) = v71;
      }
      if (v44)
      {
        if (v53 <= v69) {
          goto LABEL_105;
        }
        v42.i32[0] = v70->i32[0];
        v42.i32[2] = v70->i32[2];
        int32x4_t v72 = (int32x4_t)vmulq_f32(v42, v42);
        v72.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v72, 2), vadd_f32(*(float32x2_t *)v72.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1))).u32[0];
        float32x2_t v73 = vrsqrte_f32((float32x2_t)v72.u32[0]);
        float32x2_t v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v73, v73)));
        float32x4_t v42 = vmulq_n_f32(v42, vmul_f32(v74, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v74, v74))).f32[0]);
        *(float32x4_t *)(v52 + 16 * v69) = v42;
      }
      if (v56)
      {
        if (v63 <= v69) {
          goto LABEL_106;
        }
        *(_OWORD *)(v61 + 16 * v69) = xmmword_23435FD60;
        if (v53 <= v69) {
          goto LABEL_107;
        }
        if (v62 <= v69) {
          goto LABEL_108;
        }
        int8x16_t v75 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v52 + 16 * v69), *(int32x4_t *)(v52 + 16 * v69)), *(int8x16_t *)(v52 + 16 * v69), 0xCuLL), (float32x4_t)xmmword_23437C080), (float32x4_t)xmmword_23435FD80, *(float32x4_t *)(v52 + 16 * v69));
        float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL);
        *(float32x4_t *)(v60 + 16 * v69) = v42;
      }
      v69 += v65;
      ++v68;
    }
    while (v55 + 1 != v68);
    ++v66;
  }
  while (v66 <= v54);
  unsigned int v76 = v111;
  unsigned int v77 = v111 + v54 * v55;
  re::DynamicArray<re::GeomCell4>::resize(&v110, v77);
  unsigned int v117 = v77;
  if (v118)
  {
    unint64_t v78 = v119;
    uint64_t v79 = 8 * v118;
    do
    {
      uint64_t v80 = *v78++;
      (*(void (**)(uint64_t, void))(*(void *)v80 + 72))(v80, v117);
      v79 -= 8;
    }
    while (v79);
  }
  unsigned int v81 = v97;
  if (v100)
  {
    int v82 = 0;
    int v83 = v111;
    do
    {
      if (v101)
      {
        uint64_t v84 = v112;
        unsigned int v85 = v81 + 1;
        unsigned int v86 = v101;
        do
        {
          uint64_t v61 = v76;
          if ((unint64_t)v83 <= v76) {
            goto LABEL_109;
          }
          unsigned int v87 = (_DWORD *)(v84 + 16 * v76);
          *unsigned int v87 = v85 - 1;
          v87[1] = v85;
          void v87[2] = v101 + v85 + 1;
          v87[3] = v101 + v85;
          ++v76;
          ++v85;
          --v86;
        }
        while (v86);
        unsigned int v81 = v85 - 1;
      }
      ++v81;
      ++v82;
    }
    while (v82 != v100);
  }
  unint64_t v88 = (re::internal *)re::GeomMesh::operator=(v91, &v109);
  if (*((unsigned char *)v92 + 18)) {
    re::internal::mergeVertexPositions(v88, v89);
  }
  if (v104[0] && v107) {
    (*(void (**)(void))(*(void *)v104[0] + 40))();
  }
  if ((void)v123 && (void)v125) {
    (*(void (**)(void))(*(void *)v123 + 40))();
  }
LABEL_13:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v113);
  uint64_t result = v110;
  if (v110)
  {
    if (v112) {
      return (*(uint64_t (**)(void))(*(void *)v110 + 40))();
    }
  }
  return result;
}

void re::buildCapsule(re::GeomMesh *a1, unsigned __int16 *a2)
{
  uint64_t v3 = a2;
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 18))
  {
    int v32 = *((_DWORD *)a2 + 4);
    long long v31 = *(_OWORD *)a2;
    BYTE2(v32) = 0;
    re::buildCapsule(a1, &v31);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v31, 0);
  re::buildCapsule((uint64_t)&v31, v3);
  re::DynamicArray<re::GeomMesh>::clear(a1);
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 3uLL);
  int v5 = v3[2];
  if (!v3[2] || (unsigned int v6 = *v3, v6 < 3) || !v3[1])
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 3uLL, (re::GeomMesh *)&v31);
    goto LABEL_27;
  }
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  memset(v28, 0, sizeof(v28));
  int v29 = 0;
  uint64_t v24 = 0;
  memset(v25, 0, sizeof(v25));
  int v26 = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  v21[0] = 0;
  unint64_t v7 = v6 * v5;
  int v23 = 0;
  re::DynamicArray<float>::resize((uint64_t)v21, v7);
  unsigned int v8 = 0;
  char v9 = 1;
  uint64_t v10 = 736;
  do
  {
    uint64_t v11 = 0;
    char v12 = v9;
    uint64_t v13 = v22;
    uint64_t v14 = v24;
    do
    {
      if (v13 == v11)
      {
        *(void *)uint64_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v46[0] = 136315906;
        *(void *)&v46[1] = "operator[]";
        LOWORD(v46[3]) = 1024;
        *(_DWORD *)((char *)&v46[3] + 2) = 789;
        HIWORD(v46[4]) = 2048;
        *(void *)&uint64_t v46[5] = v13;
        LOWORD(v46[7]) = 2048;
        *(void *)((char *)&v46[7] + 2) = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        uint64_t v33 = 0;
        long long v47 = 0u;
        long long v48 = 0u;
        memset(v46, 0, sizeof(v46));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v39 = 136315906;
        *(void *)&v39[4] = "operator[]";
        __int16 v40 = 1024;
        int v41 = 789;
        __int16 v42 = 2048;
        uint64_t v43 = v13;
        __int16 v44 = 2048;
        uint64_t v45 = (unsigned __int16 *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_31;
      }
      *(_DWORD *)(v14 + 4 * v11) = v8 * v7 + v11;
      ++v11;
    }
    while (v7 != v11);
    uint64_t v19 = v14;
    uint64_t v20 = v13;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    re::makeMeshFromFaces((unint64_t)&v31, &v19, &v17, (uint64_t)v28, (uint64_t)v25, (unint64_t)&v34);
    uint64_t v13 = v8;
    unint64_t v2 = *((void *)a1 + 2);
    if (v2 <= v8) {
      goto LABEL_30;
    }
    re::GeomMesh::operator=((re::GeomMesh *)(*((void *)a1 + 4) + 736 * v8), (re::GeomMesh *)&v34);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v34);
    char v9 = 0;
    unsigned int v8 = 1;
  }
  while ((v12 & 1) != 0);
  uint64_t v3 = (unsigned __int16 *)(v3[1] * *v3);
  re::DynamicArray<float>::resize((uint64_t)v21, (unint64_t)v3);
  uint64_t v10 = v22;
  if (v3)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v24;
    while (v10 != v15)
    {
      *(_DWORD *)(v16 + 4 * v15) = 2 * v7 + v15;
      if (v3 == (unsigned __int16 *)++v15) {
        goto LABEL_16;
      }
    }
LABEL_31:
    *(void *)uint64_t v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v46[0] = 136315906;
    *(void *)&v46[1] = "operator[]";
    LOWORD(v46[3]) = 1024;
    *(_DWORD *)((char *)&v46[3] + 2) = 789;
    HIWORD(v46[4]) = 2048;
    *(void *)&uint64_t v46[5] = v10;
    LOWORD(v46[7]) = 2048;
    *(void *)((char *)&v46[7] + 2) = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    uint64_t v33 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    memset(v46, 0, sizeof(v46));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v39 = 136315906;
    *(void *)&v39[4] = "operator[]";
    __int16 v40 = 1024;
    int v41 = 789;
    __int16 v42 = 2048;
    uint64_t v43 = 2;
    __int16 v44 = 2048;
    uint64_t v45 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_16:
  uint64_t v19 = v24;
  uint64_t v20 = v10;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  re::makeMeshFromFaces((unint64_t)&v31, &v19, &v17, (uint64_t)v28, (uint64_t)v25, (unint64_t)&v34);
  uint64_t v3 = (unsigned __int16 *)*((void *)a1 + 2);
  if ((unint64_t)v3 <= 2) {
    goto LABEL_32;
  }
  re::GeomMesh::operator=((re::GeomMesh *)(*((void *)a1 + 4) + 1472), (re::GeomMesh *)&v34);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v34);
  if (v21[0] && v24) {
    (*(void (**)(void))(*(void *)v21[0] + 40))();
  }
  if (v25[0] && v27) {
    (*(void (**)(void))(*(void *)v25[0] + 40))();
  }
  if (v28[0])
  {
    if (v30) {
      (*(void (**)(void))(*(void *)v28[0] + 40))();
    }
  }
LABEL_27:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v31);
}

void re::DynamicArray<re::GeomMesh>::resize(uint64_t a1, unint64_t a2, re::GeomMesh *a3)
{
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return;
    }
    uint64_t v10 = 736 * a2;
    unint64_t v11 = a2;
    do
    {
      re::GeomMesh::~GeomMesh((re::GeomMesh *)(*(void *)(a1 + 32) + v10));
      ++v11;
      v10 += 736;
    }
    while (v11 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::GeomMesh>::setCapacity((void *)a1, a2);
      unint64_t v5 = *(void *)(a1 + 16);
    }
    unint64_t v7 = a2 - v5;
    if (a2 > v5)
    {
      uint64_t v8 = 736 * v5;
      do
      {
        uint64_t v9 = *(void *)(a1 + 32) + v8;
        *(void *)uint64_t v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        bzero((void *)(v9 + 16), 0x2C8uLL);
        re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(v9 + 16));
        *(void *)(v9 + 728) = 0;
        re::GeomMesh::copy(a3, (re::GeomMesh *)v9);
        v8 += 736;
        --v7;
      }
      while (v7);
    }
  }
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::internal::vertexInFace(unint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 a4)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a3 >= a1)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5[0] = *(_OWORD *)(a2 + 16 * a3);
  return *((unsigned int *)v5 + a4);
}

uint64_t re::internal::findSubmeshFaceVertex(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unsigned int v10 = *a2;
  int v7 = *(unsigned __int8 *)(a1 + 140);
  if (v7 == 2)
  {
    uint64_t v8 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(a1 + 144), &v10);
    if (v8 == -1) {
      return 0;
    }
    unint64_t v6 = *(void *)(a1 + 152) + 8 * v8 + 4;
    goto LABEL_10;
  }
  if (v7 == 1)
  {
    if (*(void *)(a1 + 160) <= v6) {
      return 0;
    }
    unint64_t v6 = *(void *)(a1 + 176) + 4 * v6;
LABEL_10:
    LODWORD(v6) = *(_DWORD *)v6;
    if (v6 == -1) {
      return 0;
    }
LABEL_11:
    *(_DWORD *)a3 = v6;
    *(unsigned char *)(a3 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *((unsigned char *)a2 + 4);
    return 1;
  }
  if (*(unsigned char *)(a1 + 140))
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    uint64_t result = _os_crash();
    __break(1u);
    return result;
  }
  if (*(_DWORD *)(a1 + 144) > v6) {
    goto LABEL_11;
  }
  return 0;
}

uint64_t re::internal::calculateCompatibleFaceVertexTopology(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = (unint64_t)&v83;
  uint64_t v102 = *MEMORY[0x263EF8340];
  unint64_t v8 = a1 + 16;
  re::internal::GeomVertexConnectivity::buildVertexConnectivity((unsigned int *)(a1 + 16), (uint64_t)v65);
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  *(void *)(a3 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<unsigned int>::resize((void *)a3, (4 * *(_DWORD *)(a1 + 40)), &re::kInvalidMeshIndex);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    unint64_t v3 = *(void *)(a3 + 16);
    uint64_t v13 = *(void *)(a3 + 32);
    uint64_t v14 = *(void *)(a1 + 56);
    do
    {
      unint64_t v15 = (4 * v12);
      if (v3 <= v15) {
        goto LABEL_111;
      }
      if (v12 == v10) {
        goto LABEL_112;
      }
      for (uint64_t i = 0; i != 16; i += 4)
        *(_DWORD *)(v13 + 4 * v11 + i) = *(_DWORD *)(v14 + i);
      if (*(_DWORD *)(v13 + 4 * v15 + 12) == -1)
      {
        unint64_t v15 = v15 | 3;
        if (v3 <= v15) {
          goto LABEL_114;
        }
        *(_DWORD *)(v13 + 4 * v15) = -1;
      }
      ++v12;
      v11 += 4;
      v14 += 16;
    }
    while (v12 != v10);
  }
  unint64_t v88 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  int v83 = 0;
  int v86 = 0;
  unsigned int v64 = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  uint64_t v60 = 0;
  v61[0] = 0;
  int v63 = 0;
  v57[1] = 0;
  unint64_t v58 = 0;
  int v56 = 0;
  v57[0] = 0;
  int v59 = 0;
  v53[1] = 0;
  unint64_t v54 = 0;
  v53[0] = 0;
  int v55 = 0;
  re::DynamicArray<float *>::setCapacity(&v83, 0x40uLL);
  re::DynamicArray<float *>::setCapacity(v61, 0x40uLL);
  re::DynamicArray<float *>::setCapacity(v57, 0x40uLL);
  re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v53, 0x40uLL);
  int v48 = *(_DWORD *)v8;
  if (!*(_DWORD *)v8) {
    goto LABEL_84;
  }
  unsigned int v17 = 0;
  do
  {
    unint64_t v54 = 0;
    ++v55;
    re::internal::GeomVertexConnectivity::faceVertices((re::internal::GeomVertexConnectivity *)v65, v17, v53);
    unsigned int v52 = v17;
    if (re::internal::GeomVertexConnectivity::faceCount((re::internal::GeomVertexConnectivity *)v65, v17) > 0x3F)
    {
      if (!*(void *)(a2 + 16)) {
        goto LABEL_83;
      }
      uint64_t v19 = 0;
      unsigned int v20 = 0;
      unint64_t v21 = v54;
      while (1)
      {
        if (!v21) {
          goto LABEL_116;
        }
        uint64_t v22 = *(void *)(*(void *)(a2 + 32) + 8 * v19);
        if (!re::internal::findSubmeshFaceVertex(v22, v56, (uint64_t)&v81)) {
          goto LABEL_29;
        }
        int v23 = re::internal::vertexInFace(*(void *)(v22 + 24), *(void *)(v22 + 40), v81, BYTE4(v81));
        unint64_t v21 = v54;
        if (v54 >= 2) {
          break;
        }
LABEL_27:
        uint64_t v19 = ++v20;
        if (*(void *)(a2 + 16) <= (unint64_t)v20) {
          goto LABEL_83;
        }
      }
      int v24 = v23;
      unint64_t v3 = 2;
      uint64_t v25 = 1;
      while (re::internal::findSubmeshFaceVertex(v22, &v56[2 * v25], (uint64_t)&v81)
           && re::internal::vertexInFace(*(void *)(v22 + 24), *(void *)(v22 + 40), v81, BYTE4(v81)) == v24)
      {
        uint64_t v25 = v3;
        unint64_t v21 = v54;
        BOOL v26 = v54 > v3;
        unint64_t v3 = (v3 + 1);
        if (!v26) {
          goto LABEL_27;
        }
      }
LABEL_29:
      uint64_t v27 = re::internal::GeomVertexConnectivity::faceCount((re::internal::GeomVertexConnectivity *)v65, v52);
      if (v27 < 2) {
        goto LABEL_83;
      }
      unint64_t v15 = v27;
      int v28 = 1;
      while (1)
      {
        uint64_t v29 = re::internal::GeomVertexConnectivity::faceVertex((re::internal::GeomVertexConnectivity *)v65, v52, v28);
        unint64_t v3 = 4 * v29 + BYTE4(v29);
        unint64_t v8 = *(void *)(a3 + 16);
        if (v8 <= v3) {
          break;
        }
        *(_DWORD *)(*(void *)(a3 + 32) + 4 * v3) = v9 + v28++ - 1;
        if (v15 == v28)
        {
          uint64_t v9 = (v9 + v28 - 1);
          goto LABEL_83;
        }
      }
LABEL_113:
      uint64_t v82 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v97 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v89 = 136315906;
      unsigned int v90 = "operator[]";
      __int16 v91 = 1024;
      int v92 = 789;
      __int16 v93 = 2048;
      unint64_t v94 = v3;
      __int16 v95 = 2048;
      int v96 = (void *)v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_114:
      v61[0] = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v97 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      LODWORD(v83) = 136315906;
      *(void *)(v7 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
      WORD2(v8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1024;
      *(_DWORD *)(v7 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 789;
      WORD1(v85) = 2048;
      *(void *)(v7 + 20) = v15;
      __int16 v87 = 2048;
      *(void *)(v7 + 30) = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_115:
      uint64_t v82 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v97 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v89 = 136315906;
      unsigned int v90 = "operator[]";
      __int16 v91 = 1024;
      int v92 = 789;
      __int16 v93 = 2048;
      unint64_t v94 = v3;
      __int16 v95 = 2048;
      int v96 = (void *)v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      uint64_t v82 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v97 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v89 = 136315906;
      unsigned int v90 = "operator[]";
      __int16 v91 = 1024;
      int v92 = 797;
      __int16 v93 = 2048;
      unint64_t v94 = 0;
      __int16 v95 = 2048;
      int v96 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v18 = a2;
    if (v85 != 1)
    {
      if (!v85)
      {
        if (v84 || (re::DynamicArray<float *>::setCapacity(&v83, 1uLL), !v85)) {
          *unint64_t v88 = 0;
        }
      }
      uint64_t v85 = 1;
      ++v86;
    }
    uint64_t v30 = (uint64_t)v88;
    *unint64_t v88 = 0;
    if (v54)
    {
      unint64_t v31 = 0;
      unsigned int v32 = 1;
      do
      {
        unint64_t v3 = 1 << v31;
        unsigned int v33 = re::Bitset<64>::toWordIndex(v30, v31);
        *(void *)(v30 + 8 * v33) |= v3;
        unint64_t v31 = v32;
        BOOL v26 = v54 > v32++;
      }
      while (v26);
    }
    ++v63;
    unint64_t v58 = 0;
    ++v59;
    if (!*(void *)(a2 + 16)) {
      goto LABEL_83;
    }
    unint64_t v34 = 0;
    int v35 = 0;
    unsigned int v49 = v9;
    do
    {
      int v51 = v35;
      uint64_t v10 = *(void *)(*(void *)(v18 + 32) + 8 * v34);
      uint64_t v62 = 0;
      ++v63;
      unint64_t v36 = v54;
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      if (!v54) {
        goto LABEL_58;
      }
      unint64_t v15 = 0;
      uint64_t v37 = 1;
      do
      {
        unint64_t v8 = v54;
        if (v54 <= v15) {
          goto LABEL_109;
        }
        uint64_t v79 = *(void *)&v56[2 * v15];
        re::Bitset<64>::toWordIndex((uint64_t)&v80, v15);
        unint64_t v8 = 1 << v15;
        if ((v80 & (1 << v15)) == 0)
        {
          if (re::internal::findSubmeshFaceVertex(v10, (unsigned int *)&v79, (uint64_t)&v77))
          {
            uint64_t v76 = 0;
            re::Bitset<64>::toWordIndex((uint64_t)&v76, v15);
            v76 |= v8;
            uint64_t v4 = (void *)re::internal::vertexInFace(*(void *)(v10 + 24), *(void *)(v10 + 40), v77, v78);
            unint64_t v7 = v37;
            if (v15 + 1 < v36)
            {
              while (1)
              {
                unint64_t v3 = v54;
                if (v54 <= v7) {
                  break;
                }
                *(void *)&long long v97 = *(void *)&v56[2 * v7];
                if (re::internal::findSubmeshFaceVertex(v10, (unsigned int *)&v97, (uint64_t)&v77)
                  && v4 == re::internal::vertexInFace(*(void *)(v10 + 24), *(void *)(v10 + 40), v77, v78))
                {
                  unint64_t v3 = 1 << v7;
                  re::Bitset<64>::toWordIndex((uint64_t)&v76, v7);
                  v76 |= 1 << v7;
                  re::Bitset<64>::toWordIndex((uint64_t)&v80, v7);
                  v80 |= 1 << v7;
                }
                if (v36 == ++v7) {
                  goto LABEL_52;
                }
              }
              uint64_t v82 = 0;
              long long v100 = 0u;
              long long v101 = 0u;
              long long v98 = 0u;
              long long v99 = 0u;
              long long v97 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v89 = 136315906;
              unsigned int v90 = "operator[]";
              __int16 v91 = 1024;
              int v92 = 797;
              __int16 v93 = 2048;
              unint64_t v94 = v7;
              __int16 v95 = 2048;
              int v96 = (void *)v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_109:
              uint64_t v82 = 0;
              long long v100 = 0u;
              long long v101 = 0u;
              long long v98 = 0u;
              long long v99 = 0u;
              long long v97 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v89 = 136315906;
              unsigned int v90 = "operator[]";
              __int16 v91 = 1024;
              int v92 = 797;
              __int16 v93 = 2048;
              unint64_t v94 = v15;
              __int16 v95 = 2048;
              int v96 = (void *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_110:
              uint64_t v82 = 0;
              long long v100 = 0u;
              long long v101 = 0u;
              long long v98 = 0u;
              long long v99 = 0u;
              long long v97 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              int v89 = 136315906;
              unsigned int v90 = "operator[]";
              __int16 v91 = 1024;
              int v92 = 789;
              __int16 v93 = 2048;
              unint64_t v94 = v7;
              __int16 v95 = 2048;
              int v96 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_111:
              v61[0] = 0;
              long long v100 = 0u;
              long long v101 = 0u;
              long long v98 = 0u;
              long long v99 = 0u;
              long long v97 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v83) = 136315906;
              *(void *)(v7 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
              WORD2(v8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1024;
              *(_DWORD *)(v7 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 789;
              WORD1(v85) = 2048;
              *(void *)(v7 + 20) = v15;
              __int16 v87 = 2048;
              *(void *)(v7 + 30) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_112:
              v61[0] = 0;
              long long v100 = 0u;
              long long v101 = 0u;
              long long v98 = 0u;
              long long v99 = 0u;
              long long v97 = 0u;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              LODWORD(v83) = 136315906;
              *(void *)(v7 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = "operator[]";
              WORD2(v8re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 1024;
              *(_DWORD *)(v7 + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 797;
              WORD1(v85) = 2048;
              *(void *)(v7 + 20) = v10;
              __int16 v87 = 2048;
              *(void *)(v7 + 30) = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_113;
            }
LABEL_52:
            re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v61, &v76);
          }
          else
          {
            re::Bitset<64>::toWordIndex((uint64_t)&v81, v15);
            v81 |= v8;
          }
          re::Bitset<64>::toWordIndex((uint64_t)&v80, v15);
          v80 |= v8;
        }
        ++v15;
        ++v37;
      }
      while (v15 != v36);
      if (v81) {
        re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v61, &v81);
      }
LABEL_58:
      unint64_t v58 = 0;
      ++v59;
      uint64_t v9 = v49;
      if (v85)
      {
        long long v38 = v88;
        uint64_t v39 = &v88[v85];
        __int16 v40 = v64;
        uint64_t v41 = v62;
        unint64_t v3 = 8 * v62;
        do
        {
          unint64_t v7 = v3;
          uint64_t v4 = v40;
          if (v41)
          {
            do
            {
              *(void *)&long long v97 = *v4 & *v38;
              if ((void)v97) {
                re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v57, &v97);
              }
              ++v4;
              v7 -= 8;
            }
            while (v7);
          }
          ++v38;
        }
        while (v38 != v39);
      }
      if (v83)
      {
        uint64_t v18 = a2;
        int v42 = v51;
        if (v57[0]) {
          re::DynamicArray<char const*>::copy(&v83, (uint64_t)v57);
        }
        else {
          uint64_t v85 = 0;
        }
        ++v86;
      }
      else
      {
        uint64_t v18 = a2;
        int v42 = v51;
        if (v57[0])
        {
          int v83 = (void *)v57[0];
          re::DynamicArray<float *>::setCapacity(&v83, v58);
          ++v86;
          re::DynamicArray<char const*>::copy(&v83, (uint64_t)v57);
        }
      }
      unint64_t v34 = (v42 + 1);
      int v35 = v42 + 1;
    }
    while (*(void *)(v18 + 16) > v34);
    unint64_t v3 = v85;
    if ((v85 & 0xFFFFFFFE) != 0)
    {
      uint64_t v43 = v88;
      unint64_t v8 = v85;
      uint64_t v10 = 1;
      while (1)
      {
        if (v10 == v3) {
          goto LABEL_115;
        }
        unint64_t v44 = v43[v10];
        if (v44) {
          break;
        }
LABEL_82:
        uint64_t v9 = (v9 + 1);
        if (++v10 == v8) {
          goto LABEL_83;
        }
      }
      unint64_t v15 = __clz(__rbit64(v44));
      while (1)
      {
        uint64_t v45 = re::internal::GeomVertexConnectivity::faceVertex((re::internal::GeomVertexConnectivity *)v65, v52, v15);
        unint64_t v7 = 4 * v45 + BYTE4(v45);
        uint64_t v4 = *(void **)(a3 + 16);
        if ((unint64_t)v4 <= v7) {
          goto LABEL_110;
        }
        *(_DWORD *)(*(void *)(a3 + 32) + 4 * v7) = v9;
        if (v15 <= 0x3E)
        {
          BOOL v46 = (v43[v10] & (-2 << v15)) == 0;
          unint64_t v15 = __clz(__rbit64(v43[v10] & (-2 << v15)));
          if (!v46) {
            continue;
          }
        }
        goto LABEL_82;
      }
    }
LABEL_83:
    unsigned int v17 = v52 + 1;
  }
  while (v52 + 1 != v48);
LABEL_84:
  if (v53[0] && v56) {
    (*(void (**)(void))(*(void *)v53[0] + 40))();
  }
  if (v57[0] && v60) {
    (*(void (**)(void))(*(void *)v57[0] + 40))();
  }
  if (v61[0] && v64) {
    (*(void (**)(void))(*(void *)v61[0] + 40))();
  }
  if (v83 && v88) {
    (*(void (**)(void))(*(void *)v83 + 40))();
  }
  if (v71)
  {
    if (v75) {
      (*(void (**)(void))(*(void *)v71 + 40))();
    }
    uint64_t v75 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0;
    ++v74;
  }
  if (v66)
  {
    if (v70) {
      (*(void (**)(void))(*(void *)v66 + 40))();
    }
    uint64_t v70 = 0;
    uint64_t v67 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = 0;
    ++v69;
  }
  if (v65[0] && v65[4]) {
    (*(void (**)(void))(*(void *)v65[0] + 40))();
  }
  return v9;
}

unint64_t re::internal::GeomVertexConnectivity::faceVertices(re::internal::GeomVertexConnectivity *a1, unsigned int a2, void *a3)
{
  if (*((void *)a1 + 2) <= (unint64_t)a2) {
    goto LABEL_8;
  }
  unint64_t v6 = *(unsigned int *)(*((void *)a1 + 4) + 4 * a2);
  re::DynamicArray<re::internal::GeomVertexConnectivity::FaceVertex>::resize(a3, v6);
  if (v6)
  {
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = re::internal::GeomVertexConnectivity::faceVertex(a1, a2, v7);
      if (a3[2] <= v7) {
        break;
      }
      uint64_t v9 = a3[4] + 8 * v7;
      *(unsigned char *)(v9 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = BYTE4(v8);
      *(_DWORD *)uint64_t v9 = v8;
      if (++v7 == v6) {
        return v6;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v6;
}

uint64_t re::internal::GeomVertexConnectivity::faceCount(re::internal::GeomVertexConnectivity *this, unsigned int a2)
{
  if (*((void *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((void *)this + 4) + 4 * a2);
}

re::GeomAttribute *re::internal::createAndCopyVertexAttribute(re::GeomAttribute *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*((unsigned __int8 *)result + 16) | 2) != 3) {
    return result;
  }
  unint64_t v6 = result;
  uint64_t result = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a4 + 48), *((char **)result + 1), 1, *((unsigned __int8 *)result + 17));
  if (!result) {
    return result;
  }
  if (!*(void *)(a2 + 16))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!*(void *)(a3 + 16)) {
    goto LABEL_10;
  }
  unint64_t v7 = *(uint64_t (**)(re::GeomAttribute *, re::GeomAttribute *))(*(void *)v6 + 40);
  return (re::GeomAttribute *)v7(v6, result);
}

uint64_t re::internal::GeomBaseMesh::addFaceVaryingAttribute(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v58[11] = *MEMORY[0x263EF8340];
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t v12 = v11;
  if (v11 != *((void *)a1 + 3))
  {
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    unsigned int v36 = 0;
    if (v11)
    {
      unsigned int v23 = 0;
      while (1)
      {
        unsigned int v35 = 0;
        uint64_t v24 = v23;
        unint64_t v16 = *(void *)(a5 + 16);
        if (v16 <= v23) {
          break;
        }
        unsigned int v35 = *(_DWORD *)(*(void *)(a5 + 32) + 4 * v23);
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addOrReplace((_anonymous_namespace_ *)&v37, &v35, &v36);
        unsigned int v23 = v36 + 1;
        unsigned int v36 = v23;
        if (v23 >= v11) {
          goto LABEL_17;
        }
      }
      *(void *)uint64_t v41 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v53 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v47 = 136315906;
      int v48 = "operator[]";
      __int16 v49 = 1024;
      *(_DWORD *)unsigned int v50 = 789;
      *(_WORD *)&v50[4] = 2048;
      *(void *)&v50[6] = v24;
      *(_WORD *)&v50[14] = 2048;
      *(void *)&v50[16] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      *(void *)uint64_t v41 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v53 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v47 = 136315906;
      int v48 = "operator[]";
      __int16 v49 = 1024;
      *(_DWORD *)unsigned int v50 = 789;
      *(_WORD *)&v50[4] = 2048;
      *(void *)&v50[6] = v11;
      *(_WORD *)&v50[14] = 2048;
      *(void *)&v50[16] = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      *(void *)uint64_t v41 = 0;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v53 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v47 = 136315906;
      int v48 = "operator[]";
      __int16 v49 = 1024;
      *(_DWORD *)unsigned int v50 = 789;
      *(_WORD *)&v50[4] = 2048;
      *(void *)&v50[6] = v5;
      *(_WORD *)&v50[14] = 2048;
      *(void *)&v50[16] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_17:
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v47, a5);
    re::GeomIndexMap::GeomIndexMap(v41, (uint64_t *)&v37);
    LODWORD(v53) = *(_DWORD *)a4;
    *((void *)&v53 + 1) = *(void *)(a4 + 8);
    long long v54 = *(_OWORD *)(a4 + 16);
    *((void *)&v55 + 1) = *(void *)(a4 + 40);
    *(void *)(a4 + 40) = 0;
    int v25 = *(_DWORD *)(a4 + 32);
    LODWORD(v55) = 1;
    *(_DWORD *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
    *(_DWORD *)(a4 + 32) = v25 + 2;
    *(void *)(a4 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v56, (uint64_t)&v47);
    re::GeomIndexMap::GeomIndexMap((uint64_t)v58, (uint64_t)v41);
    uint64_t v19 = re::internal::GeomAttributeManager::addFaceVaryingAttribute((uint64_t)a1 + 48, a2, a3, (re::internal::GeomAttributeFaceVaryingSubmesh *)&v53);
    re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v53, v26);
    switch(v42)
    {
      case 0:
        goto LABEL_28;
      case 2:
        int v28 = v46;
        if (!v46) {
          goto LABEL_28;
        }
        if (v44) {
          uint64_t v44 = 0;
        }
        uint64_t v27 = v43;
        if (!v43) {
          goto LABEL_28;
        }
        break;
      case 1:
        int v28 = v43;
        if (!v43 || (uint64_t v27 = v45) == 0)
        {
LABEL_28:
          if ((_BYTE)v49)
          {
            if (v49 == 2)
            {
              uint64_t v29 = v52;
              if (v52)
              {
                if (*(void *)&v50[10]) {
                  *(void *)&v50[10] = 0;
                }
                if (*(void *)&v50[2])
                {
                  uint64_t v30 = &v50[2];
LABEL_39:
                  (*(void (**)(uint64_t))(*(void *)v29 + 40))(v29);
LABEL_40:
                  *uint64_t v30 = 0;
                }
              }
            }
            else
            {
              if (v49 != 1)
              {
LABEL_73:
                re::internal::assertLog((re::internal *)4, (uint64_t)v27, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
                _os_crash();
                __break(1u);
                goto LABEL_74;
              }
              uint64_t v29 = *(void *)&v50[2];
              if (*(void *)&v50[2])
              {
                uint64_t v30 = v51;
                if (!v51[0]) {
                  goto LABEL_40;
                }
                goto LABEL_39;
              }
            }
          }
          uint64_t v31 = *((void *)&v40 + 1);
          if (!*((void *)&v40 + 1)) {
            return (uint64_t)v19;
          }
          if (*((void *)&v37 + 1)) {
            *((void *)&v37 + 1) = 0;
          }
          if (!(void)v37) {
            return (uint64_t)v19;
          }
LABEL_66:
          (*(void (**)(uint64_t))(*(void *)v31 + 40))(v31);
          return (uint64_t)v19;
        }
        break;
      default:
LABEL_72:
        re::internal::assertLog((re::internal *)4, (uint64_t)v27, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
        _os_crash();
        __break(1u);
        goto LABEL_73;
    }
    (*(void (**)(_anonymous_namespace_ *))(*(void *)v28 + 40))(v28);
    goto LABEL_28;
  }
  unint64_t v13 = *((void *)a1 + 3);
  *(void *)&long long v39 = 0;
  *(void *)&long long v38 = 0;
  long long v37 = 0uLL;
  DWORD2(v38) = 0;
  re::DynamicArray<unsigned int>::resize(&v37, v13, &re::kInvalidMeshIndex);
  if (v11)
  {
    uint64_t v14 = 0;
    uint64_t v11 = *(void *)(a5 + 16);
    uint64_t v15 = *(void *)(a5 + 32);
    unint64_t v16 = v38;
    uint64_t v17 = v39;
    while (v11 != v14)
    {
      unint64_t v5 = *(unsigned int *)(v15 + 4 * v14);
      if (v16 <= v5) {
        goto LABEL_70;
      }
      *(_DWORD *)(v17 + 4 * v5) = v14++;
      if (v12 == v14) {
        goto LABEL_7;
      }
    }
    goto LABEL_69;
  }
LABEL_7:
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v47, a5);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v41, (uint64_t)&v37);
  LODWORD(v53) = *(_DWORD *)a4;
  *((void *)&v53 + 1) = *(void *)(a4 + 8);
  long long v54 = *(_OWORD *)(a4 + 16);
  *((void *)&v55 + 1) = *(void *)(a4 + 40);
  *(void *)(a4 + 40) = 0;
  int v18 = *(_DWORD *)(a4 + 32);
  LODWORD(v55) = 1;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_DWORD *)(a4 + 32) = v18 + 2;
  *(void *)(a4 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v56, (uint64_t)&v47);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v58, (uint64_t)v41);
  uint64_t v19 = re::internal::GeomAttributeManager::addFaceVaryingAttribute((uint64_t)a1 + 48, a2, a3, (re::internal::GeomAttributeFaceVaryingSubmesh *)&v53);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v53, v20);
  if (!v42) {
    goto LABEL_51;
  }
  if (v42 != 2)
  {
    if (v42 == 1)
    {
      uint64_t v22 = v43;
      if (!v43) {
        goto LABEL_51;
      }
      unint64_t v21 = v45;
      if (!v45) {
        goto LABEL_51;
      }
      goto LABEL_50;
    }
    re::internal::assertLog((re::internal *)4, (uint64_t)v21, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v22 = v46;
  if (!v46) {
    goto LABEL_51;
  }
  if (v44) {
    uint64_t v44 = 0;
  }
  unint64_t v21 = v43;
  if (!v43) {
    goto LABEL_51;
  }
LABEL_50:
  (*(void (**)(_anonymous_namespace_ *))(*(void *)v22 + 40))(v22);
LABEL_51:
  if (!(_BYTE)v49) {
    goto LABEL_64;
  }
  if (v49 == 2)
  {
    uint64_t v32 = v52;
    if (v52)
    {
      if (*(void *)&v50[10]) {
        *(void *)&v50[10] = 0;
      }
      if (*(void *)&v50[2])
      {
        unsigned int v33 = &v50[2];
LABEL_62:
        (*(void (**)(uint64_t))(*(void *)v32 + 40))(v32);
LABEL_63:
        void *v33 = 0;
      }
    }
LABEL_64:
    uint64_t v31 = v37;
    if (!(void)v37 || !(void)v39) {
      return (uint64_t)v19;
    }
    goto LABEL_66;
  }
  if (v49 == 1)
  {
    uint64_t v32 = *(void *)&v50[2];
    if (*(void *)&v50[2])
    {
      unsigned int v33 = v51;
      if (!v51[0]) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    goto LABEL_64;
  }
LABEL_74:
  re::internal::assertLog((re::internal *)4, (uint64_t)v21, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::createAndCopyAttributesWithRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  unint64_t v5 = (re::internal::GeomAttributeContainer *)(a1 + 48);
  uint64_t result = re::internal::GeomAttributeManager::attributeCount(a1 + 48, a3);
  if (result)
  {
    int v7 = result;
    uint64_t v8 = 0;
    uint64_t v9 = (re::internal::GeomAttributeManager *)(a2 + 48);
    do
    {
      uint64_t v10 = re::internal::GeomAttributeManager::attributeByIndex(v5, v8, v3);
      uint64_t v11 = re::internal::GeomAttributeManager::addAttribute(v9, *(char **)(v10 + 8), *(unsigned __int8 *)(v10 + 16), *(unsigned __int8 *)(v10 + 17));
      uint64_t result = re::GeomAttribute::copyValues((re::GeomAttribute *)v10, v11);
      uint64_t v8 = (v8 + 1);
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t re::internal::buildMeshWithNewFaceVertexTopology(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v169 = *MEMORY[0x263EF8340];
  unint64_t v14 = (unint64_t)&v129;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v129);
  unsigned int v129 = a4;
  unsigned int v107 = a4;
  unsigned int v133 = a4;
  if (v134)
  {
    uint64_t v15 = v135;
    uint64_t v16 = 8 * v134;
    do
    {
      uint64_t v17 = *v15++;
      (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, v133);
      v16 -= 8;
    }
    while (v16);
  }
  uint64_t v18 = *(void *)(a1 + 40);
  re::DynamicArray<re::GeomCell4>::resize(v130, v18);
  unsigned int v136 = v18;
  if (v137)
  {
    uint64_t v19 = v138;
    uint64_t v20 = 8 * v137;
    do
    {
      uint64_t v21 = *v19++;
      (*(void (**)(uint64_t, void))(*(void *)v21 + 72))(v21, v136);
      v20 -= 8;
    }
    while (v20);
  }
  unint64_t v22 = *(void *)(a1 + 40);
  if (v22)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v14 = *(void *)(a5 + 16);
    uint64_t v25 = *(void *)(a5 + 32);
    unint64_t v8 = v130[2];
    uint64_t v26 = (_DWORD *)(v131 + 12);
    uint64_t v27 = *(void *)(a1 + 56) + 12;
    while (1)
    {
      if (v22 == v24) {
        goto LABEL_170;
      }
      unint64_t v7 = v23 & 0xFFFFFFFC;
      if (v14 <= v7) {
        break;
      }
      int v28 = *(_DWORD *)(v27 + 4 * v23);
      uint64_t v29 = (uint64_t *)(v25 + 4 * v7);
      if (v28 != -1) {
        int v28 = *((_DWORD *)v29 + 3);
      }
      if (v8 == v24) {
        goto LABEL_172;
      }
      uint64_t v30 = *v29;
      int v31 = *((_DWORD *)v29 + 2);
      *(void *)(v26 - 3) = v30;
      *(v26 - 1) = v31;
      *uint64_t v26 = v28;
      ++v24;
      v26 += 4;
      v23 += 4;
      if (v22 == v24) {
        goto LABEL_15;
      }
    }
LABEL_171:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v7;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_172:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v8;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_173:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v22;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_175:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v22;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_176:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v22;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_177;
  }
LABEL_15:
  re::internal::createAndCopyAttributesWithRate(a1 + 16, (uint64_t)&v129, 0);
  re::internal::createAndCopyAttributesWithRate(a1 + 16, (uint64_t)&v129, 2);
  re::internal::createAndCopyAttributesWithRate(a1 + 16, (uint64_t)&v129, 4);
  uint64_t v128 = 0;
  v125[1] = 0;
  float32x4_t v126 = 0;
  long long v124 = 0;
  v125[0] = 0;
  int v127 = 0;
  v121[1] = 0;
  unint64_t v122 = 0;
  v121[0] = 0;
  int v123 = 1;
  unint64_t v9 = (unint64_t)&re::kInvalidMeshIndex;
  re::DynamicArray<unsigned int>::resize(v121, v107, &re::kInvalidMeshIndex);
  float32x4_t v126 = 0;
  ++v127;
  re::DynamicArray<unsigned int>::resize(v125, v107, &re::kInvalidMeshIndex);
  uint64_t v33 = *(unsigned int *)(a1 + 16);
  if (v33)
  {
    uint64_t v34 = 0;
    unint64_t v22 = v122;
    unsigned int v35 = v124;
    unint64_t v14 = (unint64_t)v126;
    uint64_t v36 = v128;
    while (v22 != v34)
    {
      v35[v34] = v34;
      if (v14 == v34) {
        goto LABEL_174;
      }
      *(_DWORD *)(v36 + 4 * v3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v34;
      if (v33 == ++v34) {
        goto LABEL_20;
      }
    }
    goto LABEL_173;
  }
LABEL_20:
  unint64_t v22 = *(void *)(a1 + 40);
  if (!v22) {
    goto LABEL_32;
  }
  int v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = *(void *)(a1 + 56);
  unint64_t v8 = *(void *)(a5 + 16);
  do
  {
    if (v38 == v22) {
      goto LABEL_175;
    }
    uint64_t v40 = 0;
    *(_OWORD *)unsigned int v144 = *(_OWORD *)(v39 + 16 * v38);
    if (*(_DWORD *)&v144[12] == -1) {
      uint64_t v41 = 3;
    }
    else {
      uint64_t v41 = 4;
    }
    uint64_t v42 = *(void *)(a5 + 32);
    unint64_t v43 = v122;
    uint64_t v44 = v124;
    unint64_t v7 = (unint64_t)v126;
    uint64_t v45 = v128;
    do
    {
      unint64_t v46 = (v37 + v40);
      if (v8 <= v46)
      {
        *(void *)unsigned int v148 = 0;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v151 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 797;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v46;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_46;
      }
      unint64_t v14 = *(unsigned int *)(v42 + 4 * v46);
      if (v43 <= v14)
      {
        *(void *)unsigned int v148 = 0;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v151 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v43;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_165:
        *(void *)unsigned int v148 = 0;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v151 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_166:
        *(void *)unsigned int v148 = 0;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v151 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 797;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a6;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_167:
        *(void *)unsigned int v148 = 0;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v151 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a6;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = a7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_168:
        *(void *)unsigned int v148 = 0;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v151 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = a6;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_169;
      }
      uint64_t v32 = *(unsigned int *)&v144[4 * v40];
      v44[v14] = v32;
      if (v7 <= v14) {
        goto LABEL_165;
      }
      *(_DWORD *)(v45 + 4 * v1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v14;
      ++v40;
    }
    while (v41 != v40);
    ++v38;
    v37 += 4;
  }
  while (v38 != v22);
LABEL_32:
  if (!a6) {
    goto LABEL_54;
  }
  v166[4] = 0;
  memset(v166, 0, 28);
  re::DynamicArray<float>::resize((uint64_t)v166, v107);
  if (v107)
  {
    int v47 = 0;
    unint64_t v22 = v122;
    int v48 = v124;
    __int16 v49 = v126;
    uint64_t v50 = v128;
    unint64_t v7 = v166[2];
    uint64_t v51 = v166[4];
    while ((unsigned char *)v22 != v47)
    {
      if (v49 == v47) {
        goto LABEL_178;
      }
      unint64_t v8 = *(unsigned int *)(v50 + 4 * (void)v47);
      if (v7 <= v8) {
        goto LABEL_179;
      }
      *(_DWORD *)(v51 + 4 * v8) = v48[(void)v47++];
      if ((unsigned char *)v107 == v47) {
        goto LABEL_39;
      }
    }
LABEL_177:
    *(void *)unsigned int v148 = 0;
    __int16 v49 = v144;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v144 = 136315906;
    *(void *)&_OWORD v144[4] = "operator[]";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)&v144[14] = 789;
    *(_WORD *)&v144[18] = 2048;
    *(void *)&v144[20] = v22;
    __int16 v145 = 2048;
    *(void *)unsigned int v146 = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_178:
    *(void *)unsigned int v148 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v144 = 136315906;
    *(void *)&_OWORD v144[4] = "operator[]";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)&v144[14] = 789;
    *(_WORD *)&v144[18] = 2048;
    *(void *)&v144[20] = v49;
    __int16 v145 = 2048;
    *(void *)unsigned int v146 = v49;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    *(void *)unsigned int v148 = 0;
    uint64_t v76 = v144;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v144 = 136315906;
    *(void *)&_OWORD v144[4] = "operator[]";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)&v144[14] = 789;
    *(_WORD *)&v144[18] = 2048;
    *(void *)&v144[20] = v8;
    __int16 v145 = 2048;
    *(void *)unsigned int v146 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    v139[0] = 0;
    unint64_t v74 = (unint64_t)v144;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v148 = 136315906;
    *(void *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(void *)&v148[20] = v76;
    __int16 v149 = 2048;
    *(void *)unsigned int v150 = v76;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_181:
    v139[0] = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v148 = 136315906;
    *(void *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(void *)&v148[20] = v8;
    __int16 v149 = 2048;
    *(void *)unsigned int v150 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_182:
    v139[0] = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    unint64_t v80 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v148 = 136315906;
    *(void *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(void *)&v148[20] = v74;
    __int16 v149 = 2048;
    *(void *)unsigned int v150 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_183:
    v139[0] = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    unint64_t v58 = &_os_log_internal;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unsigned int v148 = 136315906;
    *(void *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(void *)&v148[20] = v8;
    __int16 v149 = 2048;
    *(void *)unsigned int v150 = v80;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_184:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    uint64_t v99 = v57;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v99;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_185:
    *(void *)unsigned int v144 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v58;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_186:
    re::internal::assertLog((re::internal *)4, v87, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_187:
    re::internal::assertLog((re::internal *)4, v59, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
  }
LABEL_39:
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v151, (uint64_t)v166);
  re::GeomIndexMap::operator=(a6, (uint64_t)&v151);
  if (!BYTE12(v151)) {
    goto LABEL_51;
  }
  if (BYTE12(v151) == 2)
  {
LABEL_46:
    uint64_t v52 = *((void *)&v155 + 1);
    if (*((void *)&v155 + 1))
    {
      if (*((void *)&v152 + 1)) {
        *((void *)&v152 + 1) = 0;
      }
      uint64_t v32 = v152;
      if ((void)v152) {
        goto LABEL_50;
      }
    }
    goto LABEL_51;
  }
  if (BYTE12(v151) == 1)
  {
    uint64_t v52 = v152;
    if (!(void)v152) {
      goto LABEL_51;
    }
    uint64_t v32 = v154;
    if (!(void)v154) {
      goto LABEL_51;
    }
LABEL_50:
    (*(void (**)(uint64_t))(*(void *)v52 + 40))(v52);
LABEL_51:
    if (v166[0])
    {
      uint64_t v32 = v166[4];
      if (v166[4]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v166[0] + 40))(v166[0], v166[4]);
      }
    }
LABEL_54:
    uint64_t v101 = a7;
    int v53 = *(_DWORD *)(a1 + 200);
    if (v53)
    {
      for (unsigned int i = 0; i != v53; ++i)
      {
        long long v55 = (re::GeomAttribute *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 176), i);
        re::DynamicArray<float>::DynamicArray((uint64_t)v118, v121);
        re::DynamicArray<float>::DynamicArray((uint64_t)v115, v125);
        re::internal::createAndCopyVertexAttribute(v55, (uint64_t)v118, (uint64_t)v115, (uint64_t)&v129);
        if (v115[0])
        {
          uint64_t v32 = v117;
          if (v117) {
            (*(void (**)(void, uint64_t))(*(void *)v115[0] + 40))(v115[0], v117);
          }
          uint64_t v117 = 0;
          memset(v115, 0, sizeof(v115));
          ++v116;
        }
        if (v118[0])
        {
          uint64_t v32 = v120;
          if (v120) {
            (*(void (**)(void, uint64_t))(*(void *)v118[0] + 40))(v118[0], v120);
          }
          uint64_t v120 = 0;
          memset(v118, 0, sizeof(v118));
          ++v119;
        }
      }
    }
    uint64_t v56 = a2;
    long long v100 = (const char **)a1;
    uint64_t v102 = *(unsigned int *)(a2 + 16);
    if (*(_DWORD *)(a2 + 16))
    {
      unint64_t v57 = 0;
      while (1)
      {
        unint64_t v58 = *(void *)(v56 + 16);
        if (v58 <= v57) {
          goto LABEL_184;
        }
        unsigned int v104 = *(re::internal **)(*(void *)(v56 + 32) + 8 * v57);
        unint64_t v105 = v57;
        a1 = re::internal::accessFaceVaryingAttributeSubmesh(v104, (const re::GeomAttribute *)v32);
        unint64_t v122 = 0;
        ++v123;
        re::DynamicArray<unsigned int>::resize(v121, v107, &re::kInvalidMeshIndex);
        float32x4_t v126 = 0;
        ++v127;
        re::DynamicArray<unsigned int>::resize(v125, v107, &re::kInvalidMeshIndex);
        unint64_t v9 = *(unsigned int *)(a1 + 24);
        if (*(_DWORD *)(a1 + 24)) {
          break;
        }
LABEL_91:
        if (v107)
        {
          unint64_t v58 = v122;
          if (v122 <= v107 - 1) {
            goto LABEL_185;
          }
          int v69 = 0;
          uint64_t v70 = v124;
          uint64_t v71 = v107;
          do
          {
            int v72 = *v70++;
            if (v72 == -1) {
              ++v69;
            }
            --v71;
          }
          while (v71);
          if (v69)
          {
            v166[4] = 0;
            memset(v166, 0, 28);
            *(void *)&v146[2] = 0;
            memset(v144, 0, sizeof(v144));
            unint64_t v73 = v107 - v69;
            re::DynamicArray<float>::resize((uint64_t)v166, v73);
            re::DynamicArray<float>::resize((uint64_t)v144, v73);
            unint64_t v74 = 0;
            unsigned int v75 = 0;
            uint64_t v76 = (unsigned char *)v122;
            unsigned int v77 = v124;
            unint64_t v9 = v166[2];
            uint64_t v78 = v166[4];
            a1 = (unint64_t)v126;
            uint64_t v79 = v128;
            unint64_t v80 = *(void *)&v144[16];
            uint64_t v81 = *(void *)&v146[2];
            do
            {
              if (v76 == (unsigned char *)v74) {
                goto LABEL_180;
              }
              int v82 = v77[v74];
              if (v82 != -1)
              {
                unint64_t v8 = v75;
                if (v9 <= v75) {
                  goto LABEL_181;
                }
                *(_DWORD *)(v78 + 4 * v75) = v82;
                if (a1 <= v74) {
                  goto LABEL_182;
                }
                if (v80 <= v75) {
                  goto LABEL_183;
                }
                *(_DWORD *)(v81 + 4 * v75++) = *(_DWORD *)(v79 + 4 * v74);
              }
              ++v74;
            }
            while (v107 != v74);
            re::DynamicArray<float>::operator=((uint64_t)v121, v166);
            re::DynamicArray<float>::operator=((uint64_t)v125, (uint64_t *)v144);
            if (*(void *)v144 && *(void *)&v146[2]) {
              (*(void (**)(void, void))(**(void **)v144 + 40))(*(void *)v144, *(void *)&v146[2]);
            }
            if (v166[0] && v166[4]) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v166[0] + 40))(v166[0], v166[4]);
            }
          }
        }
        re::DynamicArray<float>::DynamicArray((uint64_t)v112, v121);
        re::DynamicArray<float>::DynamicArray((uint64_t)v109, v125);
        re::internal::createAndCopyVertexAttribute(v104, (uint64_t)v112, (uint64_t)v109, (uint64_t)&v129);
        if (v109[0])
        {
          uint64_t v32 = v111;
          if (v111) {
            (*(void (**)(void, uint64_t))(*(void *)v109[0] + 40))(v109[0], v111);
          }
          uint64_t v111 = 0;
          memset(v109, 0, sizeof(v109));
          ++v110;
        }
        if (v112[0])
        {
          uint64_t v32 = v114;
          if (v114) {
            (*(void (**)(void, uint64_t))(*(void *)v112[0] + 40))(v112[0], v114);
          }
          uint64_t v114 = 0;
          memset(v112, 0, sizeof(v112));
          ++v113;
        }
        uint64_t v56 = a2;
        unint64_t v57 = v105 + 1;
        if (v105 + 1 == v102) {
          goto LABEL_121;
        }
      }
      unint64_t v22 = 0;
      while (2)
      {
        unint64_t v14 = *(void *)(a1 + 24);
        if (v14 <= v22) {
          goto LABEL_176;
        }
        *(_OWORD *)unsigned int v144 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * v22);
        if (*(_DWORD *)&v144[12] == -1) {
          uint64_t v60 = 3;
        }
        else {
          uint64_t v60 = 4;
        }
        LODWORD(v151) = v22;
        int v61 = *(unsigned __int8 *)(a1 + 60);
        if (v61 == 2)
        {
          uint64_t v63 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(a1 + 64), (unsigned int *)&v151);
          if (v63 != -1)
          {
            int v62 = *(_DWORD *)(*(void *)(a1 + 72) + 8 * v63 + 4);
            goto LABEL_85;
          }
        }
        else
        {
          if (v61 != 1)
          {
            if (*(unsigned char *)(a1 + 60)) {
              goto LABEL_187;
            }
            if (v22 >= *(unsigned int *)(a1 + 64)) {
              int v62 = -1;
            }
            else {
              int v62 = v22;
            }
LABEL_85:
            uint64_t v64 = 0;
            int v65 = 4 * v62;
            unint64_t v8 = *(void *)(a5 + 16);
            uint64_t v66 = *(void *)(a5 + 32);
            a7 = v122;
            uint64_t v67 = v124;
            unint64_t v7 = (unint64_t)v126;
            uint64_t v68 = v128;
            do
            {
              a6 = (v65 + v64);
              if (v8 <= a6) {
                goto LABEL_166;
              }
              a6 = *(unsigned int *)(v66 + 4 * a6);
              if (a7 <= a6) {
                goto LABEL_167;
              }
              v67[a6] = *(_DWORD *)&v144[4 * v64];
              if (v7 <= a6) {
                goto LABEL_168;
              }
              *(_DWORD *)(v68 + 4 * a6) = a6;
              ++v64;
            }
            while (v60 != v64);
            if (++v22 == v9) {
              goto LABEL_91;
            }
            continue;
          }
          if (*(void *)(a1 + 80) > v22)
          {
            int v62 = *(_DWORD *)(*(void *)(a1 + 96) + 4 * v22);
            goto LABEL_85;
          }
        }
        break;
      }
      int v62 = -1;
      goto LABEL_85;
    }
LABEL_121:
    uint64_t v83 = *(void *)(a3 + 16);
    if (v83)
    {
      unint64_t v9 = *(void *)(a3 + 32);
      a1 = v9 + 8 * v83;
      unint64_t v7 = (unint64_t)&v144[8];
      unint64_t v8 = (unint64_t)&v151 + 8;
      while (1)
      {
        uint64_t v84 = *(re::internal **)v9;
        uint64_t v85 = (const re::internal::GeomAttributeFaceVaryingSubmesh *)re::internal::accessFaceVaryingAttributeSubmesh(*(re::internal **)v9, (const re::GeomAttribute *)v32);
        re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v151, v85);
        uint64_t v86 = DWORD2(v152);
        *(void *)&v150[2] = 0;
        memset(v148, 0, sizeof(v148));
        if (DWORD2(v152)) {
          break;
        }
LABEL_137:
        *(_DWORD *)unsigned int v144 = v151;
        re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v144[8], (uint64_t *)&v151 + 1);
        if (!*(void *)&v144[16]) {
          re::DynamicArray<re::BlendNode>::setCapacity(&v144[8], 1uLL);
        }
        uint64_t v91 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v129, *((const char **)v84 + 1), *((unsigned __int8 *)v84 + 17), (uint64_t)v144, (uint64_t)v148);
        if (v91)
        {
          uint64_t v93 = v91;
          uint64_t v142 = 0;
          unint64_t v140 = 0;
          v139[0] = 0;
          v139[1] = 0;
          int v141 = 0;
          unsigned int v94 = (*(uint64_t (**)(re::internal *))(*(void *)v84 + 16))(v84);
          re::DynamicArray<float>::resize((uint64_t)v139, v94);
          if (v94)
          {
            uint64_t v95 = 0;
            unint64_t v22 = v140;
            uint64_t v96 = v142;
            while (v22 != v95)
            {
              *(_DWORD *)(v96 + 4 * v95) = v95;
              if (v94 == ++v95) {
                goto LABEL_144;
              }
            }
LABEL_169:
            uint64_t v143 = 0;
            unint64_t v14 = (unint64_t)&v158;
            long long v167 = 0u;
            long long v168 = 0u;
            memset(v166, 0, sizeof(v166));
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            int v158 = 136315906;
            uint64_t v159 = "operator[]";
            __int16 v160 = 1024;
            int v161 = 789;
            __int16 v162 = 2048;
            unint64_t v163 = v22;
            __int16 v164 = 2048;
            unint64_t v165 = v22;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_170:
            *(void *)unsigned int v144 = 0;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v151 = 0u;
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            LODWORD(v166[0]) = 136315906;
            *(uint64_t *)((char *)v166 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = (uint64_t)"operator[]";
            WORD2(v166[1]) = 1024;
            *(_DWORD *)((char *)&v166[1] + 6) = 797;
            WORD1(v166[2]) = 2048;
            *(uint64_t *)((char *)&v166[2] + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v22;
            WORD2(v166[3]) = 2048;
            *(uint64_t *)((char *)&v166[3] + 6) = v22;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_171;
          }
LABEL_144:
          (*(void (**)(re::internal *, uint64_t, void, uint64_t, uint64_t))(*(void *)v84 + 40))(v84, v93, v94, v142, v142);
          if (v139[0])
          {
            uint64_t v92 = v142;
            if (v142) {
              (*(void (**)(void, uint64_t))(*(void *)v139[0] + 40))(v139[0], v142);
            }
          }
        }
        if (*(void *)&v144[8])
        {
          uint64_t v92 = v147;
          if (v147) {
            (*(void (**)(void, uint64_t))(**(void **)&v144[8] + 40))(*(void *)&v144[8], v147);
          }
        }
        if (*(void *)v148)
        {
          uint64_t v92 = *(void *)&v150[2];
          if (*(void *)&v150[2]) {
            (*(void (**)(void, void))(**(void **)v148 + 40))(*(void *)v148, *(void *)&v150[2]);
          }
        }
        re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v151, v92);
        v9 += 8;
        if (v9 == a1) {
          goto LABEL_154;
        }
      }
      re::DynamicArray<int>::setCapacity(v148, DWORD2(v152));
      unint64_t v88 = 0;
      while (2)
      {
        *(_DWORD *)unsigned int v144 = 0;
        LODWORD(v166[0]) = v88;
        if (BYTE12(v154) == 2)
        {
          uint64_t v90 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(&v155, (unsigned int *)v166);
          if (v90 == -1) {
            goto LABEL_136;
          }
          int v89 = (_DWORD *)(*((void *)&v155 + 1) + 8 * v90 + 4);
        }
        else
        {
          if (BYTE12(v154) != 1)
          {
            if (BYTE12(v154)) {
              goto LABEL_186;
            }
            if (v88 < v155)
            {
              *(_DWORD *)unsigned int v144 = v88;
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (v156 <= v88) {
            goto LABEL_136;
          }
          int v89 = (_DWORD *)(v157 + 4 * v88);
        }
        *(_DWORD *)unsigned int v144 = *v89;
        if (*(_DWORD *)v144 != -1) {
LABEL_135:
        }
          re::DynamicArray<int>::add(v148, v144);
LABEL_136:
        if (++v88 == v86) {
          goto LABEL_137;
        }
        continue;
      }
    }
LABEL_154:
    long long v97 = (re *)re::GeomMesh::operator=(v101, &v129);
    re::GeomMesh::setName(v97, *v100);
    if (v121[0] && v124) {
      (*(void (**)(uint64_t, _DWORD *))(*(void *)v121[0] + 40))(v121[0], v124);
    }
    if (v125[0] && v128) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v125[0] + 40))(v125[0], v128);
    }
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v132);
    uint64_t result = v130[0];
    if (v130[0])
    {
      if (v131) {
        return (*(uint64_t (**)(void, uint64_t))(*(void *)v130[0] + 40))(v130[0], v131);
      }
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::buildMeshFromNewFaceVertices(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 0;
  if (*(_DWORD *)(a1 + 640))
  {
    unsigned int v6 = 0;
    do
    {
      uint64_t v21 = re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 64), v6);
      if (*(unsigned char *)(v21 + 16) == 3) {
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v22, &v21);
      }
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 640));
  }
  uint64_t v7 = *(unsigned int *)(a2 + 16);
  if (*(_DWORD *)(a2 + 16))
  {
    unint64_t v8 = *(unsigned int **)(a2 + 32);
    unsigned int v9 = -1;
    do
    {
      unsigned int v11 = *v8++;
      unsigned int v10 = v11;
      if (v11 >= v9 || v9 == -1) {
        unsigned int v13 = v10 + 1;
      }
      else {
        unsigned int v13 = v9;
      }
      if (v10 != -1) {
        unsigned int v9 = v13;
      }
      --v7;
    }
    while (v7);
  }
  else
  {
    unsigned int v9 = -1;
  }
  re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)v18, v22);
  uint64_t v17 = 0;
  memset(v15, 0, sizeof(v15));
  int v16 = 0;
  re::internal::buildMeshWithNewFaceVertexTopology(a1, (uint64_t)v18, (uint64_t)v15, v9, a2, 0, a3);
  if (v18[0])
  {
    if (v20) {
      (*(void (**)(void))(*(void *)v18[0] + 40))();
    }
    uint64_t v20 = 0;
    memset(v18, 0, sizeof(v18));
    ++v19;
  }
  if (v22[0] && v24) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  return 1;
}

uint64_t re::internal::buildMeshFromNewVertices(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v59);
  unint64_t j = a2[2];
  int v59 = j;
  unsigned int v63 = j;
  if (v64)
  {
    unsigned int v6 = v65;
    uint64_t v7 = 8 * v64;
    do
    {
      uint64_t v8 = *v6++;
      (*(void (**)(uint64_t, void))(*(void *)v8 + 72))(v8, v63);
      v7 -= 8;
    }
    while (v7);
  }
  unsigned int v9 = (re::internal::GeomAttributeContainer *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 40);
  re::DynamicArray<re::GeomCell4>::resize(v60, v10);
  unsigned int v66 = v10;
  if (v67)
  {
    unsigned int v11 = v68;
    uint64_t v12 = 8 * v67;
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t, void))(*(void *)v13 + 72))(v13, v66);
      v12 -= 8;
    }
    while (v12);
  }
  *(void *)&v76[2] = 0;
  memset(v74, 0, sizeof(v74));
  re::DynamicArray<unsigned int>::resize(v74, *(unsigned int *)v9, &re::kInvalidMeshIndex);
  unint64_t v14 = a2[2];
  if (v14)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a2[4];
    unsigned int v17 = 1;
    unint64_t v18 = *(void *)&v74[16];
    uint64_t v19 = *(void *)&v76[2];
    while (1)
    {
      unint64_t v20 = *(unsigned int *)(v16 + 4 * v15);
      if (v18 <= v20) {
        break;
      }
      unsigned int v21 = v17 - 1;
      uint64_t v15 = v17;
      BOOL v22 = v14 > v17++;
      *(_DWORD *)(v19 + 4 * v20) = v21;
      if (!v22) {
        goto LABEL_11;
      }
    }
LABEL_85:
    *(void *)&long long v70 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v88 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136315906;
    *(void *)&v78[4] = "operator[]";
    *(_WORD *)&unsigned char v78[12] = 1024;
    *(_DWORD *)&v78[14] = 789;
    *(_WORD *)&v78[18] = 2048;
    *(void *)&v78[20] = v20;
    __int16 v79 = 2048;
    *(void *)unint64_t v80 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_86;
  }
LABEL_11:
  unint64_t v18 = *(void *)(a1 + 40);
  if (!v18) {
    goto LABEL_25;
  }
  int v23 = 0;
  uint64_t v24 = *(void *)(a1 + 56);
  unint64_t v20 = *(void *)&v74[16];
  uint64_t v3 = v60[2];
  uint64_t v25 = v61;
  do
  {
    if (v23 == (unsigned char *)v18) {
      goto LABEL_87;
    }
    uint64_t v26 = 0;
    long long v70 = *(_OWORD *)(v24 + 16 * (void)v23);
    int v27 = HIDWORD(v70);
    if (HIDWORD(v70) == -1) {
      uint64_t v28 = 3;
    }
    else {
      uint64_t v28 = 4;
    }
    uint64_t v29 = *(void *)&v76[2];
    do
    {
      unint64_t v30 = *((unsigned int *)&v70 + v26);
      if (v20 <= v30)
      {
        *(void *)uint64_t v81 = 0;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v88 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v78 = 136315906;
        *(void *)&v78[4] = "operator[]";
        *(_WORD *)&unsigned char v78[12] = 1024;
        *(_DWORD *)&v78[14] = 789;
        *(_WORD *)&v78[18] = 2048;
        *(void *)&v78[20] = v30;
        __int16 v79 = 2048;
        *(void *)unint64_t v80 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_84:
        uint64_t v69 = 0;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v88 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v81 = 136315906;
        *(void *)&v81[4] = "operator[]";
        __int16 v82 = 1024;
        int v83 = 789;
        __int16 v84 = 2048;
        unint64_t v85 = j;
        __int16 v86 = 2048;
        unint64_t v87 = v30;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_85;
      }
      *((_DWORD *)&v70 + v26++) = *(_DWORD *)(v29 + 4 * v30);
    }
    while (v28 != v26);
    if (v23 == (unsigned char *)v3) {
      goto LABEL_88;
    }
    BOOL v42 = v27 == -1;
    int v31 = HIDWORD(v70);
    int v32 = DWORD2(v70);
    if (v42) {
      int v31 = -1;
    }
    uint64_t v33 = v25 + 16 * (void)v23;
    *(void *)uint64_t v33 = v70;
    *(_DWORD *)(v33 + 8) = v32;
    *(_DWORD *)(v33 + 12) = v31;
    ++v23;
  }
  while (v23 != (unsigned char *)v18);
LABEL_25:
  unint64_t v18 = j;
  if (*(void *)v74 && *(void *)&v76[2]) {
    (*(void (**)(void))(**(void **)v74 + 40))();
  }
  re::internal::createAndCopyAttributesWithRate((uint64_t)v9, (uint64_t)&v59, 0);
  re::internal::createAndCopyAttributesWithRate((uint64_t)v9, (uint64_t)&v59, 2);
  re::internal::createAndCopyAttributesWithRate((uint64_t)v9, (uint64_t)&v59, 4);
  *(void *)&void v80[2] = 0;
  memset(v78, 0, sizeof(v78));
  re::DynamicArray<float>::resize((uint64_t)v78, j);
  if (j)
  {
    uint64_t v34 = 0;
    unsigned int v9 = *(re::internal::GeomAttributeContainer **)&v78[16];
    uint64_t v35 = *(void *)&v80[2];
    while (v9 != v34)
    {
      *(_DWORD *)(v35 + 4 * (void)v3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v34;
      uint64_t v34 = (re::internal::GeomAttributeContainer *)((char *)v34 + 1);
      if ((re::internal::GeomAttributeContainer *)j == v34) {
        goto LABEL_32;
      }
    }
LABEL_86:
    *(void *)&long long v70 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v88 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)unint64_t v74 = 136315906;
    *(void *)&v74[4] = "operator[]";
    *(_WORD *)&v74[12] = 1024;
    *(_DWORD *)&v74[14] = 789;
    *(_WORD *)&v74[18] = 2048;
    *(void *)&unsigned char v74[20] = v9;
    __int16 v75 = 2048;
    *(void *)uint64_t v76 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    *(void *)&long long v70 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v88 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136315906;
    *(void *)&v78[4] = "operator[]";
    *(_WORD *)&unsigned char v78[12] = 1024;
    *(_DWORD *)&v78[14] = 797;
    *(_WORD *)&v78[18] = 2048;
    *(void *)&v78[20] = v18;
    __int16 v79 = 2048;
    *(void *)unint64_t v80 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    *(void *)uint64_t v81 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v88 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v78 = 136315906;
    *(void *)&v78[4] = "operator[]";
    *(_WORD *)&unsigned char v78[12] = 1024;
    *(_DWORD *)&v78[14] = 789;
    *(_WORD *)&v78[18] = 2048;
    *(void *)&v78[20] = v3;
    __int16 v79 = 2048;
    *(void *)unint64_t v80 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    re::internal::assertLog((re::internal *)4, v45, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680, a3);
    _os_crash();
    __break(1u);
  }
LABEL_32:
  int v36 = *(_DWORD *)(a1 + 200);
  if (v36)
  {
    for (unsigned int i = 0; i != v36; ++i)
    {
      uint64_t v38 = (re::GeomAttribute *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 176), i);
      re::DynamicArray<float>::DynamicArray((uint64_t)v56, a2);
      re::DynamicArray<float>::DynamicArray((uint64_t)v53, (uint64_t *)v78);
      re::internal::createAndCopyVertexAttribute(v38, (uint64_t)v56, (uint64_t)v53, (uint64_t)&v59);
      if (v53[0])
      {
        if (v55) {
          (*(void (**)(void))(*(void *)v53[0] + 40))();
        }
        uint64_t v55 = 0;
        memset(v53, 0, sizeof(v53));
        ++v54;
      }
      if (v56[0])
      {
        if (v58) {
          (*(void (**)(void))(*(void *)v56[0] + 40))();
        }
        uint64_t v58 = 0;
        memset(v56, 0, sizeof(v56));
        ++v57;
      }
    }
  }
  int v39 = *(_DWORD *)(a1 + 424);
  if (v39)
  {
    unsigned int v40 = 0;
    unsigned int v9 = (re::internal::GeomAttributeContainer *)(a1 + 400);
    unint64_t v18 = (unint64_t)&v74[8];
    do
    {
      unint64_t v20 = re::internal::GeomAttributeContainer::attributeByIndex(v9, v40);
      uint64_t v3 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v20, v41);
      *(_DWORD *)unint64_t v74 = *(_DWORD *)v3;
      re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v74[8], (uint64_t *)(v3 + 8));
      if (!*(void *)&v74[16]) {
        re::DynamicArray<re::BlendNode>::setCapacity(&v74[8], 1uLL);
      }
      if (*(unsigned char *)(v3 + 60)) {
        BOOL v42 = *(_DWORD *)(v3 + 48) == 0;
      }
      else {
        BOOL v42 = 1;
      }
      if (v42)
      {
        unint64_t v44 = *(unsigned int *)(v3 + 24);
        if (*(_DWORD *)(a1 + 40) == v44)
        {
          unint64_t v43 = (re::GeomAttribute *)re::internal::GeomBaseMesh::addFaceVaryingAttribute((uint64_t)&v59, *(const char **)(v20 + 8), *(unsigned __int8 *)(v20 + 17), (uint64_t)v74);
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v44 = *(unsigned int *)(v3 + 24);
      }
      uint64_t v73 = 0;
      unint64_t v71 = 0;
      long long v70 = 0uLL;
      int v72 = 0;
      re::DynamicArray<unsigned int>::resize(&v70, v44, &re::kInvalidMeshIndex);
      if (v44)
      {
        for (unint64_t j = 0; v44 != j; ++j)
        {
          LODWORD(v88) = j;
          int v46 = *(unsigned __int8 *)(v3 + 60);
          if (v46 == 2)
          {
            uint64_t v48 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((void *)(v3 + 64), (unsigned int *)&v88);
            if (v48 == -1) {
              goto LABEL_66;
            }
            int v47 = *(_DWORD *)(*(void *)(v3 + 72) + 8 * v48 + 4);
          }
          else
          {
            if (v46 != 1)
            {
              if (*(unsigned char *)(v3 + 60)) {
                goto LABEL_89;
              }
              if (j >= *(unsigned int *)(v3 + 64)) {
                int v47 = -1;
              }
              else {
                int v47 = j;
              }
              goto LABEL_67;
            }
            if (*(void *)(v3 + 80) <= j)
            {
LABEL_66:
              int v47 = -1;
              goto LABEL_67;
            }
            int v47 = *(_DWORD *)(*(void *)(v3 + 96) + 4 * j);
          }
LABEL_67:
          unint64_t v30 = v71;
          if (v71 <= j) {
            goto LABEL_84;
          }
          *(_DWORD *)(v73 + 4 * j) = v47;
        }
      }
      unint64_t v43 = (re::GeomAttribute *)re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v59, *(const char **)(v20 + 8), *(unsigned __int8 *)(v20 + 17), (uint64_t)v74, (uint64_t)&v70);
      if ((void)v70 && v73) {
        (*(void (**)(void))(*(void *)v70 + 40))();
      }
LABEL_72:
      re::GeomAttribute::copyValues((re::GeomAttribute *)v20, v43);
      if (*(void *)&v74[8] && v77) {
        (*(void (**)(void))(**(void **)&v74[8] + 40))();
      }
      ++v40;
    }
    while (v40 != v39);
  }
  __int16 v49 = (re *)re::GeomMesh::operator=(a3, &v59);
  re::GeomMesh::setName(v49, *(const char **)a1);
  if (*(void *)v78 && *(void *)&v80[2]) {
    (*(void (**)(void))(**(void **)v78 + 40))();
  }
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v62);
  if (v60[0] && v61) {
    (*(void (**)(void))(*(void *)v60[0] + 40))();
  }
  return 1;
}

uint64_t re::internal::GeomBaseMesh::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 24);
  unint64_t v7 = 0xFFFFFFFF00000000;
  unint64_t v32 = 0xFFFFFFFF00000000;
  int v33 = -1;
  char v34 = 0;
  int v8 = v6 - 1;
  if ((v6 - 1) >= 0xFFFFFFFE)
  {
    LODWORD(v35) = 0;
    int v8 = -1;
  }
  else
  {
    unint64_t v32 = v6;
    int v33 = v6 - 1;
    LODWORD(v35) = v6;
    unint64_t v7 = v6;
  }
  char v27 = 0;
  int v26 = v8;
  unint64_t v25 = v7;
  LODWORD(v28) = v7;
  uint64_t v9 = a1 + 48;
  LODWORD(v17) = *(_DWORD *)a4;
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v18 = *(void *)(a4 + 8);
  uint64_t v19 = v10;
  uint64_t v20 = v6;
  uint64_t v22 = *(void *)(a4 + 40);
  *(void *)(a4 + 40) = 0;
  int v11 = *(_DWORD *)(a4 + 32);
  LODWORD(v21) = 1;
  *(_DWORD *)a4 = 0;
  *(void *)(a4 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(a4 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(a4 + 32) = v11 + 2;
  *(void *)(a4 + 8) = 0;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v23, (uint64_t)&v32);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v24, (uint64_t)&v25);
  uint64_t v12 = re::internal::GeomAttributeManager::addFaceVaryingAttribute(v9, a2, a3, (re::internal::GeomAttributeFaceVaryingSubmesh *)&v17);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v17, v13);
  if (!v27) {
    goto LABEL_15;
  }
  if (v27 == 2)
  {
    uint64_t v15 = v31;
    if (!v31) {
      goto LABEL_15;
    }
    if (v29) {
      uint64_t v29 = 0;
    }
    uint64_t v14 = v28;
    if (!v28) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v27 != 1)
  {
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625, v17, v18, v19, v20, v21, v22);
    _os_crash();
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v15 = v28;
  if (v28)
  {
    uint64_t v14 = v30;
    if (v30) {
LABEL_14:
    }
      (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
  }
LABEL_15:
  switch(v34)
  {
    case 2:
      if (v39)
      {
        if (v36) {
          uint64_t v36 = 0;
        }
        if (v35)
        {
          (*(void (**)(uint64_t))(*(void *)v39 + 40))(v39);
          uint64_t v35 = 0;
        }
      }
      return (uint64_t)v12;
    case 1:
      if (v35)
      {
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v35 + 40))(v35);
        }
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      return (uint64_t)v12;
    case 0:
      LODWORD(v35) = 0;
      return (uint64_t)v12;
  }
LABEL_30:
  re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::buildMeshByConvertingFaceVaryingToVertexHelper(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v33 = 0;
  memset(v31, 0, sizeof(v31));
  int v32 = 0;
  uint64_t v30 = 0;
  memset(v28, 0, sizeof(v28));
  int v29 = 0;
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    re::DynamicArray<float *>::setCapacity(v31, v8);
    unint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      re::DynamicArray<float *>::setCapacity(v28, v9);
      uint64_t v10 = *(void *)(a2 + 16);
      if (v10)
      {
        int v11 = *(const char ***)(a2 + 32);
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), *v11);
          v24[0] = v13;
          if (*(unsigned char *)(v13 + 16) == 3)
          {
            uint64_t v14 = (re::internal *)v13;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v31, v24);
            uint64_t v27 = re::internal::accessFaceVaryingAttributeSubmesh(v14, v15);
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v28, &v27);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  uint64_t v26 = 0;
  memset(v24, 0, sizeof(v24));
  int v25 = 0;
  unsigned int v16 = re::internal::calculateCompatibleFaceVertexTopology(a1, (uint64_t)v28, (uint64_t)v24);
  re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)v21, v31);
  uint64_t v20 = 0;
  memset(v18, 0, sizeof(v18));
  int v19 = 0;
  re::internal::buildMeshWithNewFaceVertexTopology(a1, (uint64_t)v21, (uint64_t)v18, v16, (uint64_t)v24, a3, a4);
  if (v21[0])
  {
    if (v23) {
      (*(void (**)(void))(*(void *)v21[0] + 40))();
    }
    uint64_t v23 = 0;
    memset(v21, 0, sizeof(v21));
    ++v22;
  }
  if (v24[0] && v26) {
    (*(void (**)(void))(*(void *)v24[0] + 40))();
  }
  if (v28[0] && v30) {
    (*(void (**)(void))(*(void *)v28[0] + 40))();
  }
  if (v31[0] && v33) {
    (*(void (**)(void))(*(void *)v31[0] + 40))();
  }
  return 1;
}

uint64_t re::internal::buildMeshBySplittingFaceVaryingToVertexHelper(void *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v51 = 0;
  v48[1] = 0;
  uint64_t v49 = 0;
  v48[0] = 0;
  int v50 = 0;
  uint64_t v47 = 0;
  memset(v45, 0, sizeof(v45));
  int v46 = 0;
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    re::DynamicArray<float *>::setCapacity(v48, v8);
    unint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      re::DynamicArray<float *>::setCapacity(v45, v9);
      uint64_t v10 = *(void *)(a2 + 16);
      if (v10)
      {
        int v11 = *(const char ***)(a2 + 32);
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 8), *v11);
          v42[0] = v13;
          if (*(unsigned char *)(v13 + 16) == 3)
          {
            uint64_t v14 = (re::internal *)v13;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v48, v42);
            v39[0] = re::internal::accessFaceVaryingAttributeSubmesh(v14, v15);
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v45, v39);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  uint64_t v16 = a1[53];
  uint64_t v44 = 0;
  memset(v42, 0, sizeof(v42));
  int v43 = 0;
  if (v16)
  {
    re::DynamicArray<float *>::setCapacity(v42, v16);
    unsigned int v17 = 0;
    uint64_t v18 = v51;
    uint64_t v19 = v49;
    do
    {
      uint64_t v20 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 50), v17);
      v39[0] = v20;
      uint64_t v21 = 8 * v19;
      int v22 = v18;
      if (v19)
      {
        while (*v22 != v20)
        {
          ++v22;
          v21 -= 8;
          if (!v21) {
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v42, v39);
      }
      ++v17;
    }
    while (v17 != v16);
  }
  uint64_t v41 = 0;
  memset(v39, 0, sizeof(v39));
  int v40 = 0;
  unsigned int v23 = re::internal::calculateCompatibleFaceVertexTopology((uint64_t)a1, (uint64_t)v45, (uint64_t)v39);
  re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)v36, v48);
  re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)&v31, v42);
  re::internal::buildMeshWithNewFaceVertexTopology((unint64_t)a1, (uint64_t)v36, (uint64_t)&v31, v23, (uint64_t)v39, a3, a4);
  if (v31)
  {
    if (v35) {
      (*(void (**)(void))(*(void *)v31 + 40))();
    }
    uint64_t v35 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v31 = 0;
    ++v34;
  }
  if (v36[0])
  {
    if (v38) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v36[0] + 40))(v36[0], v38, v24, v25, v26);
    }
    uint64_t v38 = 0;
    memset(v36, 0, sizeof(v36));
    ++v37;
  }
  if (v39[0] && v41) {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v39[0] + 40))(v39[0], v41, v24, v25, v26, v27, v28, v29, v31, v32);
  }
  if (v42[0] && v44) {
    (*(void (**)(void))(*(void *)v42[0] + 40))();
  }
  if (v45[0] && v47) {
    (*(void (**)(void))(*(void *)v45[0] + 40))();
  }
  if (v48[0] && v51) {
    (*(void (**)(void))(*(void *)v48[0] + 40))();
  }
  return 1;
}

void *re::internal::GeomVertexConnectivity::buildVertexConnectivity@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v6 = (uint64_t *)(a2 + 32);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  unint64_t v7 = a2 + 72;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 6re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_DWORD *)(a2 + 10re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  uint64_t v8 = a1[6];
  unint64_t v9 = *a1;
  LODWORD(v32) = 0;
  re::DynamicArray<unsigned int>::resize((void *)a2, v9, &v32);
  if (!v8)
  {
    unint64_t v11 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = *((void *)a1 + 3);
  uint64_t v13 = *((void *)a1 + 5);
  unint64_t v2 = *(void *)(a2 + 16);
  do
  {
    if (v10 == v12) {
      goto LABEL_42;
    }
    uint64_t v14 = 0;
    long long v23 = *(_OWORD *)(v13 + 16 * v10);
    uint64_t v15 = *v6;
    if (HIDWORD(v23) == -1) {
      uint64_t v16 = 3;
    }
    else {
      uint64_t v16 = 4;
    }
    unint64_t v11 = (v11 + v16);
    do
    {
      unint64_t v3 = *((unsigned int *)&v23 + v14);
      if (v2 <= v3)
      {
        long long v36 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        uint64_t v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 789;
        __int16 v28 = 2048;
        unint64_t v29 = v3;
        __int16 v30 = 2048;
        unint64_t v31 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_38:
        long long v36 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        uint64_t v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 789;
        __int16 v28 = 2048;
        unint64_t v29 = v11;
        __int16 v30 = 2048;
        unint64_t v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        long long v36 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        uint64_t v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 789;
        __int16 v28 = 2048;
        unint64_t v29 = v11;
        __int16 v30 = 2048;
        unint64_t v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        long long v36 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        uint64_t v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 789;
        __int16 v28 = 2048;
        unint64_t v29 = v7;
        __int16 v30 = 2048;
        unint64_t v31 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        long long v36 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        uint64_t v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 789;
        __int16 v28 = 2048;
        unint64_t v29 = v11;
        __int16 v30 = 2048;
        unint64_t v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_42:
        *(void *)&long long v23 = 0;
        long long v36 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v24 = 136315906;
        uint64_t v25 = "operator[]";
        __int16 v26 = 1024;
        int v27 = 797;
        __int16 v28 = 2048;
        unint64_t v29 = v12;
        __int16 v30 = 2048;
        unint64_t v31 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_43;
      }
      ++*(_DWORD *)(v15 + 4 * v3);
      ++v14;
    }
    while (v16 != v14);
    ++v10;
  }
  while (v10 != v8);
LABEL_13:
  unint64_t v12 = *a1;
  re::DynamicArray<float>::resize(a2 + 40, v12);
  if (v12)
  {
    unint64_t v2 = *(void *)(a2 + 56);
    if (!v2) {
      goto LABEL_46;
    }
    **(_DWORD **)unint64_t v7 = 0;
    if (v12 > 1)
    {
      unint64_t v3 = 0;
      unint64_t v7 = *(void *)(a2 + 16);
      uint64_t v17 = *(void *)(a2 + 32);
      uint64_t v18 = (_DWORD *)(*(void *)(a2 + 72) + 4);
      while (v7 != v3)
      {
        if (v2 - 1 == v3) {
          goto LABEL_44;
        }
        *uint64_t v18 = *(_DWORD *)(v17 + 4 * v3) + *(v18 - 1);
        ++v18;
        *(_DWORD *)(v17 + 4 * v3++) = 0;
        if (v12 - 1 == v3) {
          goto LABEL_22;
        }
      }
LABEL_43:
      *(void *)&long long v23 = 0;
      long long v36 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      uint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v3;
      __int16 v30 = 2048;
      unint64_t v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      *(void *)&long long v23 = 0;
      long long v36 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      uint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v2;
      __int16 v30 = 2048;
      unint64_t v31 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      *(void *)&long long v23 = 0;
      long long v36 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      uint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 797;
      __int16 v28 = 2048;
      unint64_t v29 = v12;
      __int16 v30 = 2048;
      unint64_t v31 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      *(void *)&long long v23 = 0;
      long long v36 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      uint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = 0;
      __int16 v30 = 2048;
      unint64_t v31 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_47:
      *(void *)&long long v23 = 0;
      long long v36 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v24 = 136315906;
      uint64_t v25 = "operator[]";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2048;
      unint64_t v29 = v2;
      __int16 v30 = 2048;
      unint64_t v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    unint64_t v7 = *(void *)(a2 + 16);
LABEL_22:
    unint64_t v2 = (v12 - 1);
    if (v7 <= v2) {
      goto LABEL_47;
    }
    *(_DWORD *)(*v6 + 4 * v2) = 0;
  }
  unint64_t v7 = a2 + 80;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  LODWORD(v32) = 0;
  re::DynamicArray<unsigned int>::resize((void *)a2, v12, &v32);
  uint64_t result = re::DynamicArray<re::internal::GeomVertexConnectivity::FaceVertex>::resize((void *)(a2 + 80), v11);
  if (v8)
  {
    unint64_t v12 = 0;
    while (1)
    {
      unint64_t v11 = *((void *)a1 + 3);
      if (v11 <= v12) {
        goto LABEL_45;
      }
      uint64_t v20 = 0;
      long long v23 = *(_OWORD *)(*((void *)a1 + 5) + 16 * v12);
      if (HIDWORD(v23) == -1) {
        uint64_t v21 = 3;
      }
      else {
        uint64_t v21 = 4;
      }
      do
      {
        unint64_t v11 = *((unsigned int *)&v23 + v20);
        unint64_t v7 = *(void *)(a2 + 56);
        if (v7 <= v11) {
          goto LABEL_38;
        }
        unint64_t v7 = *(void *)(a2 + 16);
        if (v7 <= v11) {
          goto LABEL_39;
        }
        unint64_t v7 = (*(_DWORD *)(*(void *)(a2 + 32) + 4 * v11) + *(_DWORD *)(*(void *)(a2 + 72) + 4 * v11));
        unint64_t v2 = *(void *)(a2 + 96);
        if (v2 <= v7) {
          goto LABEL_40;
        }
        uint64_t v22 = *(void *)(a2 + 112) + 8 * v7;
        *(_DWORD *)uint64_t v22 = v12;
        *(unsigned char *)(v22 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v20;
        unint64_t v7 = *(void *)(a2 + 16);
        if (v7 <= v11) {
          goto LABEL_41;
        }
        ++*(_DWORD *)(*v6 + 4 * v11);
        ++v20;
      }
      while (v21 != v20);
      if (++v12 == v8) {
        return result;
      }
    }
  }
  return result;
}

void *re::DynamicArray<re::internal::GeomVertexConnectivity::FaceVertex>::resize(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else if (result[1] < a2)
  {
    uint64_t result = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, a2);
  }
  void v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::internal::GeomVertexConnectivity::faceVertex(re::internal::GeomVertexConnectivity *this, unsigned int a2, int a3)
{
  if (*((void *)this + 7) <= (unint64_t)a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  unint64_t v3 = (*(_DWORD *)(*((void *)this + 9) + 4 * a2) + a3);
  if (*((void *)this + 12) <= v3) {
    goto LABEL_5;
  }
  return *(void *)(*((void *)this + 14) + 8 * v3);
}

re::internal::GeomAttributeFaceVaryingSubmesh *re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(re::internal::GeomAttributeFaceVaryingSubmesh *this, const re::internal::GeomAttributeFaceVaryingSubmesh *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  unint64_t v4 = (void *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)this + 8, (uint64_t *)a2 + 1);
  if (!*((void *)this + 2)) {
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  }
  *((void *)this + 6) = *((void *)a2 + 6);
  *((_DWORD *)this + 1re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *((_DWORD *)a2 + 14);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  uint64_t v6 = (_DWORD *)((char *)this + 64);
  int v7 = *((unsigned __int8 *)a2 + 60);
  if (v7 == 2)
  {
    re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)v6, (uint64_t *)a2 + 8);
  }
  else if (v7 == 1)
  {
    re::DynamicArray<float>::DynamicArray((uint64_t)v6, (uint64_t *)a2 + 8);
  }
  else
  {
    if (*((unsigned char *)a2 + 60))
    {
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
      _os_crash();
      __break(1u);
      goto LABEL_17;
    }
    _DWORD *v6 = *((_DWORD *)a2 + 16);
  }
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *((void *)a2 + 16);
  *((_DWORD *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *((_DWORD *)a2 + 34);
  *((unsigned char *)this + 140) = *((unsigned char *)a2 + 140);
  uint64_t v8 = (_DWORD *)((char *)this + 144);
  int v9 = *((unsigned __int8 *)a2 + 140);
  if (v9 == 2)
  {
    re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)v8, (uint64_t *)a2 + 18);
    return this;
  }
  if (v9 == 1)
  {
    re::DynamicArray<float>::DynamicArray((uint64_t)v8, (uint64_t *)a2 + 18);
    return this;
  }
  if (!*((unsigned char *)a2 + 140))
  {
    _DWORD *v8 = *((_DWORD *)a2 + 36);
    return this;
  }
LABEL_17:
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
  uint64_t result = (re::internal::GeomAttributeFaceVaryingSubmesh *)_os_crash();
  __break(1u);
  return result;
}

_DWORD *re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addOrReplace(_anonymous_namespace_ *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a1, a2);
  if (v6 == -1)
  {
    return re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd(a1, a2, a3);
  }
  else
  {
    uint64_t v7 = *((void *)a1 + 1) + 8 * v6;
    *(_DWORD *)(v7 + re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *a3;
    return (_DWORD *)(v7 + 4);
  }
}

uint64_t re::Bitset<64>::toWordIndex(uint64_t a1, unint64_t a2)
{
  if (a2 < 0x40) {
    return 0;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %d.", "b < kBitCount", "toWordIndex", 345, a2, 64, v2, v3);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::triangulatePolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::internal::PolygonTriangulator<re::Vector3<float>>::PolygonTriangulator((uint64_t)v5, a1, a2);
  re::internal::PolygonTriangulator<re::Vector3<float>>::triangulateByPerimeter(v5, a3);
  if (v8)
  {
    if (v12) {
      (*(void (**)(void))(*(void *)v8 + 40))();
    }
    uint64_t v12 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0;
    ++v11;
  }
  uint64_t result = v6;
  if (v6)
  {
    if (v7) {
      return (*(uint64_t (**)(void))(*(void *)v6 + 40))();
    }
  }
  return result;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::triangulateByPerimeter(int *a1, uint64_t a2)
{
  re::internal::PolygonTriangulator<re::Vector3<float>>::resetCost(a1);
  re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost((uint64_t)a1, 0, (*(_DWORD *)(*((void *)a1 + 2) + 8) - 1));
  return re::internal::PolygonTriangulator<re::Vector3<float>>::retrieveTriangulation(a1, a2);
}

void *re::DynamicArray<float>::resize(void *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4 = result;
  unint64_t v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      uint64_t result = re::DynamicArray<int>::setCapacity(result, a2);
      unint64_t v5 = v4[2];
    }
    unint64_t v7 = a2 - v5;
    if (a2 > v5)
    {
      uint64_t v8 = (_DWORD *)(v4[4] + 4 * v5);
      do
      {
        *v8++ = *a3;
        --v7;
      }
      while (v7);
    }
  }
  void v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::PolygonTriangulator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  unint64_t v5 = (void *)(a1 + 24);
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  int v9 = -1;
  re::DynamicArray<unsigned int>::resize((void *)(a1 + 64), (v4 * v4), &v9);
  unint64_t v6 = (*(_DWORD *)a1 * *(_DWORD *)a1);
  int v8 = 0;
  re::DynamicArray<float>::resize(v5, v6, &v8);
  return a1;
}

void *re::internal::PolygonTriangulator<re::Vector3<float>>::resetCost(void *result)
{
  uint64_t v1 = result[5];
  if (v1)
  {
    unint64_t v2 = 0;
    do
    {
      if (v1 == v2)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(result[7] + 4 * v2) = -1082130432;
      if (result[10] <= v2) {
        goto LABEL_8;
      }
      *(_DWORD *)(result[12] + 4 * v2++) = -1;
    }
    while (v1 != v2);
  }
  return result;
}

float re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((int)a2 + 2 > a3)
  {
    float v6 = 0.0;
    int v7 = -1;
LABEL_17:
    *(_DWORD *)re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, a2, a3) = v7;
    *(float *)re::internal::PolygonTriangulator<re::Vector3<float>>::cost(a1, a2, a3) = v6;
    return v6;
  }
  if (*(float *)re::internal::PolygonTriangulator<re::Vector3<float>>::cost(a1, a2, a3) < 0.0)
  {
    if ((int)a2 + 1 >= a3)
    {
      int v7 = -1;
      float v6 = INFINITY;
    }
    else
    {
      int v7 = -1;
      int v8 = 1;
      float v6 = INFINITY;
      do
      {
        re::internal::PolygonTriangulator<re::Vector3<float>>::evalTrianglePerimeter(a1, a2, a2 + v8, a3);
        if (v9 <= v6)
        {
          float v10 = v9
              + re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost(a1, a2, (a2 + v8));
          if (v10 <= v6)
          {
            float v11 = v10
                + re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost(a1, (a2 + v8), a3);
            if (v11 < v6 || v8 == 1)
            {
              int v7 = a2 + v8;
              float v6 = v11;
            }
          }
        }
        ++v8;
      }
      while (a3 - a2 != v8);
    }
    goto LABEL_17;
  }
  return *(float *)re::internal::PolygonTriangulator<re::Vector3<float>>::cost(a1, a2, a3);
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::retrieveTriangulation(int *a1, uint64_t a2)
{
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  int v4 = *a1;
  unint64_t v5 = (3 * *a1 - 6);
  if (*(void *)(a2 + 8) < v5)
  {
    re::DynamicArray<int>::setCapacity((void *)a2, v5);
    int v4 = *a1;
  }
  return re::internal::PolygonTriangulator<re::Vector3<float>>::addTriangles((uint64_t)a1, 0, v4 - 1, (void *)a2);
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::cost(uint64_t a1, int a2, int a3)
{
  unint64_t v3 = (a3 + *(_DWORD *)a1 * a2);
  if (*(void *)(a1 + 40) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 56) + 4 * v3;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::evalTrianglePerimeter(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4 = *(uint64_t **)(result + 16);
  unint64_t v5 = v4[1];
  if (v5 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v5);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  unint64_t v7 = *(unsigned int *)(*v4 + 4 * a2);
  unint64_t v8 = *(void *)(*(void *)(result + 8) + 8);
  if (v8 <= v7)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, v8);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = a3;
  if (v5 <= a3)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v5);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = *(unsigned int *)(v6 + 4 * a3);
  if (v8 <= v10)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, v8);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v11 = a4;
  if (v5 <= a4)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v5);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v12 = *(unsigned int *)(v6 + 4 * a4);
  if (v8 <= v12)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, v8);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(uint64_t a1, int a2, int a3)
{
  unint64_t v3 = (a3 + *(_DWORD *)a1 * a2);
  if (*(void *)(a1 + 80) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 96) + 4 * v3;
}

{
  unint64_t v3;

  unint64_t v3 = (a3 + *(_DWORD *)a1 * a2);
  if (*(void *)(a1 + 80) <= v3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(void *)(a1 + 96) + 4 * v3);
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::addTriangles(uint64_t a1, int a2, unsigned int a3, void *a4)
{
  unsigned int v6 = a2;
  uint64_t result = re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    while (1)
    {
      uint64_t v9 = re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, v6, a3);
      uint64_t v11 = *(void **)(a1 + 16);
      unint64_t v12 = v11[1];
      if (v12 <= v6) {
        break;
      }
      uint64_t v13 = v9;
      re::DynamicArray<int>::add(a4, (_DWORD *)(*v11 + 4 * v6));
      uint64_t v15 = *(void **)(a1 + 16);
      uint64_t v16 = (int)v13;
      unint64_t v17 = v15[1];
      if (v17 <= (int)v13) {
        goto LABEL_8;
      }
      re::DynamicArray<int>::add(a4, (_DWORD *)(*v15 + 4 * (int)v13));
      uint64_t v19 = *(void **)(a1 + 16);
      unint64_t v20 = v19[1];
      if (v20 <= a3) {
        goto LABEL_9;
      }
      re::DynamicArray<int>::add(a4, (_DWORD *)(*v19 + 4 * a3));
      re::internal::PolygonTriangulator<re::Vector3<float>>::addTriangles(a1, v6, v13, a4);
      uint64_t result = re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, v13, a3);
      unsigned int v6 = v13;
      if ((result & 0x80000000) != 0) {
        return result;
      }
    }
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, v12);
    _os_crash();
    __break(1u);
LABEL_8:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v17);
    _os_crash();
    __break(1u);
LABEL_9:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, v20);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::add(_anonymous_namespace_ *result, _DWORD *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  unint64_t v5 = *((void *)result + 2);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)result)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationCommand>::setCapacity(result, v10);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationCommand>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v5 = *((void *)v3 + 2);
  }
  *(_DWORD *)(*((void *)v3 + 4) + 4 * v5) = *a2;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::GeomConnectivityManifold::buildIfManifold(unint64_t this, unint64_t a2, re::GeomConnectivityManifold *a3)
{
  uint64_t v166 = *MEMORY[0x263EF8340];
  re::GeomConnectivityManifold::GeomConnectivityManifold((re::GeomConnectivityManifold *)&v109);
  unsigned int v109 = *(_DWORD *)(this + 16);
  uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::GeomCell4>::operator=((uint64_t)v110, (uint64_t *)(this + 24));
  if (!v110[1]) {
    uint64_t v7 = (_anonymous_namespace_ *)re::DynamicArray<re::BlendNode>::setCapacity(v110, 1uLL);
  }
  unint64_t v8 = (unint64_t)v111;
  uint64_t v9 = v111;
  unsigned int v108 = (const re::GeomMesh *)a2;
  int v10 = 0;
  if (v111)
  {
    uint64_t v11 = (_DWORD *)(v112 + 8);
    uint64_t v12 = v111;
    do
    {
      if (*(v11 - 2) != -1 && *(v11 - 1) != -1 && *v11 != -1 && v11[1] != -1) {
        ++v10;
      }
      v11 += 4;
      --v12;
    }
    while (v12);
    int v13 = 0;
    uint64_t v14 = (_DWORD *)(v112 + 8);
    do
    {
      if (*(v14 - 2) != -1 && *(v14 - 1) != -1 && *v14 != -1 && v14[1] == -1) {
        ++v13;
      }
      v14 += 4;
      --v9;
    }
    while (v9);
  }
  else
  {
    int v13 = 0;
  }
  unint64_t v15 = v109;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v16 = (6 * v13 + 8 * v10);
  uint64_t v140 = 0;
  int v143 = 0;
  uint64_t v147 = 0;
  unint64_t v17 = (re::GeomConnectivityManifold *)&v149;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  int v146 = 0;
  re::DynamicArray<unsigned int>::resize(&v140, (4 * v8), &re::kInvalidMeshIndex);
  LODWORD(v161) = 0;
  re::DynamicArray<unsigned int>::resize((void *)&v144 + 1, v15, &v161);
  unint64_t v18 = (unint64_t)v111;
  unint64_t v19 = v111;
  if (v111)
  {
    unint64_t v20 = 0;
    BOOL v21 = 1;
    while (v20 != v111)
    {
      uint64_t v22 = 0;
      *(_OWORD *)uint64_t v157 = *(_OWORD *)(v112 + 16 * (void)v20);
      if (*(_DWORD *)&v157[12] == -1) {
        unint64_t v23 = 3;
      }
      else {
        unint64_t v23 = 4;
      }
      uint64_t v24 = 1;
      do
      {
        unint64_t v25 = v24;
        while (v25 < v23)
        {
          int v26 = *(_DWORD *)&v157[4 * v25++];
          if (*(_DWORD *)&v157[4 * v22] == v26)
          {
            if (!v21)
            {
LABEL_35:
              int v27 = 0;
              unint64_t v18 = 0;
              unint64_t v3 = 0;
              unint64_t v8 = (unint64_t)v157;
              unint64_t v4 = 0x20000000;
LABEL_36:
              this = (unint64_t)v111;
              if ((unint64_t)v111 <= v18) {
                goto LABEL_267;
              }
              __int16 v28 = 0;
              int v29 = v27 & 0x1FFFFFFF;
              *(_OWORD *)uint64_t v157 = *(_OWORD *)(v112 + 16 * v18);
              if (*(_DWORD *)&v157[12] == -1) {
                this = 3;
              }
              else {
                this = 4;
              }
              a2 = v27 & 0x1FFFFFFF;
              while (1)
              {
                __int16 v30 = (re::GeomConnectivityManifold *)((char *)v28 + 1);
                unsigned int v31 = *(_DWORD *)&v157[4 * (((unint64_t)v28 + 1) % this)];
                LODWORD(v161) = *(_DWORD *)&v157[4 * (void)v28];
                DWORD1(v161) = v31;
                *(_DWORD *)long long v154 = a2 | 0x80000000;
                a2 = (a2 + 0x20000000);
                __int16 v28 = v30;
                if ((re::GeomConnectivityManifold *)this == v30)
                {
                  ++v18;
                  int v27 = v29 + 1;
                  unint64_t v3 = v18 >= v19;
                  if (v18 == v19) {
                    goto LABEL_46;
                  }
                  goto LABEL_36;
                }
              }
              if (v3) {
                goto LABEL_46;
              }
            }
LABEL_154:
            uint64_t v81 = 0;
            *((void *)&v114 + 1) = 0;
            ++v115;
            uint64_t v118 = 0;
            ++v119;
            unint64_t v122 = 0;
            ++v123;
            goto LABEL_157;
          }
        }
        ++v22;
        ++v24;
      }
      while (v22 != v23 - 1);
      unint64_t v20 = (re::GeomConnectivityManifold *)((char *)v20 + 1);
      BOOL v21 = (unint64_t)v20 < v111;
      if (v20 == (re::GeomConnectivityManifold *)v111) {
        goto LABEL_35;
      }
    }
    goto LABEL_266;
  }
LABEL_46:
  unint64_t v19 = (unint64_t)&v113;
  *((void *)&v114 + 1) = 0;
  ++v115;
  if ((unint64_t)v114 < *((void *)&v150 + 1)) {
    re::DynamicArray<re::EvaluationCommand>::setCapacity(&v113, *((unint64_t *)&v150 + 1));
  }
  unint64_t v122 = 0;
  ++v123;
  uint64_t v118 = 0;
  ++v119;
  re::DynamicArray<float>::resize((uint64_t)v121, v109);
  re::DynamicArray<float>::resize((uint64_t)v117, (4 * v111));
  int v148 = 0;
  *(void *)uint64_t v157 = &v149;
  if ((unint64_t)v150 >= 0x10)
  {
    uint64_t v32 = 0;
    unint64_t v33 = (unint64_t)v150 >> 4;
    while (1)
    {
      unsigned __int16 v34 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v149 + v32)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v34 != 0xFFFF) {
        break;
      }
      v32 += 16;
      if (!--v33) {
        goto LABEL_74;
      }
    }
    uint64_t v35 = __clz(__rbit64((unsigned __int16)~v34)) + v32;
    *(void *)&v157[8] = (unsigned __int16)~v34;
    *(void *)&v157[16] = v35;
    if (v35 != -1)
    {
      LODWORD(vre::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
      do
      {
        long long v36 = (unsigned int *)(*(void *)(*(void *)v157 + 8) + 12 * v35);
        unint64_t v18 = *v36;
        this = v36[2];
        unint64_t v3 = this >> 29;
        unint64_t v8 = (this >> 29) & 3 | (4 * (this & 0x1FFFFFFF));
        if (v37 == -1)
        {
          if ((this & 0x80000000) == 0) {
            unsigned int v40 = this & 0xFFFFFFF | (v3 << 28) & 0x7FFFFFFF | 0x40000000;
          }
          else {
            unsigned int v40 = this & 0xFFFFFFF | (v3 << 28) | 0xC0000000;
          }
          LODWORD(v153) = v40;
          re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::add((_anonymous_namespace_ *)&v113, &v153);
          this = (unint64_t)v118;
          if ((unint64_t)v118 <= v8) {
            goto LABEL_262;
          }
          *(_DWORD *)(v120 + 4 * v8) = v40;
          this = (unint64_t)v122;
          if ((unint64_t)v122 <= v18) {
            goto LABEL_263;
          }
          *(_DWORD *)(v124 + 4 * v18) = v40;
          this = (unint64_t)v142;
          if ((unint64_t)v142 <= v8) {
            goto LABEL_264;
          }
          *(_DWORD *)(v144 + 4 * v8) = v4;
          this = *((void *)&v145 + 1);
          if (*((void *)&v145 + 1) <= v18) {
            goto LABEL_265;
          }
          ++*(_DWORD *)(v147 + 4 * v18);
          ++v148;
        }
        else
        {
          unsigned int v38 = *(_DWORD *)(*((void *)&v149 + 1) + 12 * v37 + 8);
          if (((v38 & this & 0x80000000) != 0) != __OFSUB__(v37, -1)) {
            unsigned int v39 = v38 & 0xFFFFFFF | (((v38 >> 29) & 3) << 28) | 0x80000000;
          }
          else {
            unsigned int v39 = v38 & 0xFFFFFFF | (((v38 >> 29) & 3) << 28);
          }
          LODWORD(v153) = v39;
          re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::add((_anonymous_namespace_ *)&v113, &v153);
          a2 = (unint64_t)v118;
          if ((unint64_t)v118 <= v8) {
            goto LABEL_259;
          }
          *(_DWORD *)(v120 + 4 * v8) = v39;
          unint64_t v8 = (v39 >> 28) & 3 | (4 * (v39 & 0xFFFFFFF));
          a2 = (unint64_t)v142;
          if ((unint64_t)v142 <= v8) {
            goto LABEL_260;
          }
          *(_DWORD *)(v144 + 4 * v8) = v4;
          a2 = *((void *)&v145 + 1);
          if (*((void *)&v145 + 1) <= v18) {
            goto LABEL_261;
          }
          if (!*(_DWORD *)(v147 + 4 * v18))
          {
            *(_DWORD *)(v147 + 4 * v18) = 1;
            a2 = (unint64_t)v122;
            if ((unint64_t)v122 <= v18) {
              goto LABEL_271;
            }
            *(_DWORD *)(v124 + 4 * v18) = this & 0xFFFFFFF | (((this >> 29) & 3) << 28) | 0x80000000;
          }
        }
        unint64_t v4 = (v4 + 1);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v157);
        uint64_t v35 = *(void *)&v157[16];
      }
      while (*(void *)&v157[16] != -1);
    }
  }
LABEL_74:
  unint64_t v18 = *((void *)&v114 + 1);
  if (*((void *)&v114 + 1))
  {
    uint64_t v41 = 0;
    unsigned int v42 = 0;
    while ((*(_DWORD *)(v116 + 4 * v41) & 0x80000000) != 0)
    {
      uint64_t v41 = ++v42;
      if (*((void *)&v114 + 1) <= (unint64_t)v42) {
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    unsigned int v42 = -1;
  }
  unint64_t v19 = (unint64_t)v111;
  unint64_t v43 = (unint64_t)v122;
  if (v122)
  {
    uint64_t v44 = 0;
    uint64_t v45 = v124;
    unsigned int v46 = 1;
    this = (unint64_t)v142;
    uint64_t v47 = v144;
    do
    {
      unsigned int v48 = *(_DWORD *)(v45 + 4 * v44);
      unsigned int v49 = v42;
      if ((v48 & 0x80000000) != 0)
      {
        unint64_t v3 = (v48 >> 28) & 3 | (4 * (v48 & 0xFFFFFFF));
        if (this <= v3) {
          goto LABEL_251;
        }
        unsigned int v49 = *(_DWORD *)(v47 + 4 * v3);
      }
      *(_DWORD *)(v45 + 4 * v4re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v49;
      uint64_t v44 = v46;
    }
    while (v43 > v46++);
  }
  if (!v19) {
    goto LABEL_98;
  }
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = v112;
  unint64_t v8 = (unint64_t)v118;
  while (2)
  {
    if (v52 == (void *)v19) {
      goto LABEL_250;
    }
    if (*(_DWORD *)(v53 + 16 * (void)v52 + 12) == -1) {
      uint64_t v54 = 3;
    }
    else {
      uint64_t v54 = 4;
    }
    this = (unint64_t)v142;
    uint64_t v55 = v144;
    uint64_t v56 = v120;
    unsigned int v57 = v51;
    do
    {
      unint64_t v3 = v57;
      if (v8 <= v57)
      {
        *(void *)uint64_t v157 = 0;
        long long v164 = 0u;
        long long v165 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v161 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v154 = 136315906;
        *(void *)&v154[4] = "operator[]";
        *(_WORD *)&v154[12] = 1024;
        *(_DWORD *)&v154[14] = 789;
        *(_WORD *)&v154[18] = 2048;
        *(void *)&v154[20] = v3;
        __int16 v155 = 2048;
        *(void *)unint64_t v156 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        uint64_t v70 = __clz(__rbit64(v69)) + v66;
        *(void *)&v157[8] = v69;
        *(void *)&v157[16] = v70;
        if (v70 != -1)
        {
          unint64_t v8 = *((void *)&v145 + 1);
          uint64_t v71 = v147;
          unint64_t v3 = 12;
          unint64_t v107 = (unint64_t)v111;
          uint64_t v72 = v112;
          while (1)
          {
            uint64_t v73 = *(void *)(*(void *)v157 + 8);
            unint64_t v74 = (unsigned int *)(v73 + 12 * v70);
            unint64_t v19 = *v74;
            unint64_t v18 = v74[1];
            {
              unsigned int v75 = *(_DWORD *)(v73 + 12 * v70 + 8);
              a2 = v75 & 0x1FFFFFFF;
              if (v107 <= a2) {
                goto LABEL_268;
              }
              long long v160 = *(_OWORD *)(v72 + 16 * a2);
              if (v8 <= v19) {
                goto LABEL_269;
              }
              int v76 = (v75 >> 29) & 3;
              if (HIDWORD(v160) == -1) {
                unsigned int v77 = 3;
              }
              else {
                unsigned int v77 = 4;
              }
              ++*(_DWORD *)(v71 + 4 * v19);
              unsigned int v78 = v76 + 1;
              if (v78 < v77) {
                unsigned int v77 = 0;
              }
              unint64_t v19 = *((unsigned int *)&v160 + v78 - v77);
              if (v8 <= v19) {
                goto LABEL_270;
              }
              ++*(_DWORD *)(v71 + 4 * v19);
            }
            else if (v18 > v19)
            {
              if (v8 <= v19) {
                goto LABEL_272;
              }
              ++*(_DWORD *)(v71 + 4 * v19);
              if (v8 <= v18) {
                goto LABEL_273;
              }
              ++*(_DWORD *)(v71 + 4 * v18);
            }
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v157);
            uint64_t v70 = *(void *)&v157[16];
            if (*(void *)&v157[16] == -1) {
              goto LABEL_137;
            }
          }
        }
        goto LABEL_137;
      }
      unsigned int v58 = *(_DWORD *)(v56 + 4 * v57);
      unsigned int v59 = v42;
      if ((v58 & 0x80000000) != 0)
      {
        unint64_t v4 = (v58 >> 28) & 3 | (4 * (v58 & 0xFFFFFFF));
        if (this <= v4)
        {
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 797;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v4;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_249:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v8;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_250:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 797;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v19;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_251:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 797;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v3;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_252:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = this;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_253:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v8;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_254:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v3;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_255:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v157 = 136315906;
          *(void *)&v157[4] = "operator[]";
          *(_WORD *)&v157[12] = 1024;
          *(_DWORD *)&v157[14] = 797;
          *(_WORD *)&v157[18] = 2048;
          *(void *)&v157[20] = v17;
          __int16 v158 = 2048;
          unint64_t v159 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_256:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v157 = 136315906;
          *(void *)&v157[4] = "operator[]";
          *(_WORD *)&v157[12] = 1024;
          *(_DWORD *)&v157[14] = 789;
          *(_WORD *)&v157[18] = 2048;
          *(void *)&v157[20] = v17;
          __int16 v158 = 2048;
          unint64_t v159 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_257:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v8;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_258:
          *(void *)uint64_t v157 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v3;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_259:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v8;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_260:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v8;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_261:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v18;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_262:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v8;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_263:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v18;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_264:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v8;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_265:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v18;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_266:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 797;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v18;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v18;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_267:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 797;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v18;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = this;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_268:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 797;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = a2;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v107;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_269:
          uint64_t v153 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v19;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_270:
          uint64_t v153 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v19;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_271:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v18;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = a2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_272:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v19;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_273:
          *(void *)&long long v160 = 0;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v161 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)long long v154 = 136315906;
          *(void *)&v154[4] = "operator[]";
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = 789;
          *(_WORD *)&v154[18] = 2048;
          *(void *)&v154[20] = v18;
          __int16 v155 = 2048;
          *(void *)unint64_t v156 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_274;
        }
        unsigned int v59 = *(_DWORD *)(v55 + 4 * v4);
      }
      *(_DWORD *)(v56 + 4 * v57++) = v59;
      --v54;
    }
    while (v54);
    uint64_t v52 = (void *)((char *)v52 + 1);
    v51 += 4;
    if (v52 != (void *)v19) {
      continue;
    }
    break;
  }
LABEL_98:
  float32x4_t v126 = 0;
  ++v127;
  unint64_t v19 = (unint64_t)&v129;
  uint64_t v131 = 0;
  ++v132;
  re::DynamicArray<float>::resize((uint64_t)v125, v18);
  unint64_t v60 = (v148 + v18) >> 1;
  if (v130 < v60) {
    re::DynamicArray<int>::setCapacity(&v129, v60);
  }
  LODWORD(v160) = 0;
  if (v18)
  {
    unsigned int v61 = 0;
    while (1)
    {
      unint64_t v8 = v61;
      unint64_t v4 = *((void *)&v114 + 1);
      if (*((void *)&v114 + 1) <= (unint64_t)v61) {
        goto LABEL_249;
      }
      unsigned int v62 = *(_DWORD *)(v116 + 4 * v61);
      int v63 = v131;
      if ((v62 & 0x40000000) != 0) {
        break;
      }
      this = (v62 >> 28) & 3 | (4 * (v62 & 0xFFFFFFF));
      a2 = (unint64_t)v118;
      if ((unint64_t)v118 <= this) {
        goto LABEL_252;
      }
      unint64_t v3 = *(unsigned int *)(v120 + 4 * this);
      if (*((void *)&v114 + 1) <= v3) {
        goto LABEL_254;
      }
      if ((v62 & 0xFFFFFFF) < (*(_DWORD *)(v116 + 4 * v3) & 0xFFFFFFFu))
      {
        this = (unint64_t)v126;
        if ((unint64_t)v126 <= v61) {
          goto LABEL_257;
        }
        uint64_t v64 = v128;
        *(_DWORD *)(v128 + 4 * v8) = v131;
        if (this <= v3) {
          goto LABEL_258;
        }
        int v65 = (_DWORD *)(v64 + 4 * v3);
        goto LABEL_112;
      }
LABEL_113:
      LODWORD(v160) = ++v61;
      if (v61 >= v18) {
        goto LABEL_114;
      }
    }
    this = (unint64_t)v126;
    if ((unint64_t)v126 <= v61) {
      goto LABEL_253;
    }
    int v65 = (_DWORD *)(v128 + 4 * v61);
LABEL_112:
    *int v65 = v63;
    re::DynamicArray<int>::add(&v129, &v160);
    unsigned int v61 = v160;
    goto LABEL_113;
  }
LABEL_114:
  *((void *)&v145 + 1) = 0;
  ++v146;
  LODWORD(v161) = 0;
  re::DynamicArray<unsigned int>::resize((void *)&v144 + 1, v109, &v161);
  *(void *)uint64_t v157 = &v149;
  if ((unint64_t)v150 >= 0x10)
  {
    uint64_t v66 = 0;
    unint64_t v67 = (unint64_t)v150 >> 4;
    do
    {
      unsigned __int16 v68 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v149 + v66)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      unint64_t v69 = (unsigned __int16)~v68;
      if (v68 != 0xFFFF) {
        goto LABEL_120;
      }
      v66 += 16;
    }
    while (--v67);
  }
LABEL_137:
  this = v109;
  *(void *)&v156[2] = 0;
  memset(v154, 0, sizeof(v154));
  if (v109)
  {
    unint64_t v17 = 0;
    unint64_t v19 = 0;
    while (1)
    {
      a2 = (unint64_t)v122;
      if (v122 <= v17) {
        goto LABEL_255;
      }
      if (*(_DWORD *)(v124 + 4 * (void)v17) == -1) {
        break;
      }
      re::GeomConnectivityManifold::fetchVertexOneRing((re::GeomConnectivityManifold *)&v109, v17, (uint64_t)v154);
      a2 = *((void *)&v145 + 1);
      if (*((void *)&v145 + 1) <= (unint64_t)v17) {
        goto LABEL_256;
      }
      uint64_t v79 = *(unsigned int *)(v147 + 4 * (void)v17);
      if (!v79 || *(void *)&v154[16] != v79) {
        break;
      }
      unint64_t v17 = (re::GeomConnectivityManifold *)((char *)v17 + 1);
      unint64_t v19 = (unint64_t)v17 >= this;
      if ((re::GeomConnectivityManifold *)this == v17)
      {
        if (*(void *)v154 && *(void *)&v156[2]) {
          (*(void (**)(void, void))(**(void **)v154 + 40))(*(void *)v154, *(void *)&v156[2]);
        }
        goto LABEL_156;
      }
    }
    if (*(void *)v154 && *(void *)&v156[2])
    {
      (*(void (**)(void, void))(**(void **)v154 + 40))(*(void *)v154, *(void *)&v156[2]);
      if (v19) {
        goto LABEL_156;
      }
      goto LABEL_154;
    }
    if ((v19 & 1) == 0) {
      goto LABEL_154;
    }
  }
LABEL_156:
  uint64_t v81 = 1;
LABEL_157:
  if (*((void *)&v152 + 1))
  {
    if (*((void *)&v149 + 1)) {
      *((void *)&v149 + 1) = 0;
    }
    if ((void)v149)
    {
      (*(void (**)(void, void))(**((void **)&v152 + 1) + 40))(*((void *)&v152 + 1), v149);
      *(void *)&long long v149 = 0;
    }
    long long v152 = 0u;
    long long v151 = 0u;
    long long v150 = 0u;
  }
  if (*((void *)&v144 + 1))
  {
    if (v147) {
      (*(void (**)(void, uint64_t))(**((void **)&v144 + 1) + 40))(*((void *)&v144 + 1), v147);
    }
    uint64_t v147 = 0;
    long long v145 = 0uLL;
    *((void *)&v144 + 1) = 0;
    ++v146;
  }
  if (v140)
  {
    if ((void)v144) {
      (*(void (**)(uint64_t, void))(*(void *)v140 + 40))(v140, v144);
    }
    *(void *)&long long v144 = 0;
    uint64_t v141 = 0;
    uint64_t v142 = 0;
    uint64_t v140 = 0;
    ++v143;
  }
  if (*((void *)&v152 + 1))
  {
    if (*((void *)&v149 + 1)) {
      *((void *)&v149 + 1) = 0;
    }
    if ((void)v149)
    {
      (*(void (**)(void, void))(**((void **)&v152 + 1) + 40))(*((void *)&v152 + 1), v149);
      *(void *)&long long v149 = 0;
    }
    long long v152 = 0u;
    long long v151 = 0u;
    long long v150 = 0u;
  }
  if (*((void *)&v144 + 1))
  {
    if (v147) {
      (*(void (**)(void, uint64_t))(**((void **)&v144 + 1) + 40))(*((void *)&v144 + 1), v147);
    }
    uint64_t v147 = 0;
    long long v145 = 0uLL;
    *((void *)&v144 + 1) = 0;
    ++v146;
  }
  if (v140 && (void)v144) {
    (*(void (**)(uint64_t, void))(*(void *)v140 + 40))(v140, v144);
  }
  if (v81)
  {
    *(_DWORD *)unsigned int v108 = v109;
    re::DynamicArray<re::GeomCell4>::operator=((uint64_t)v108 + 8, (uint64_t)v110);
    if (&v109 != (unsigned int *)v108)
    {
      uint64_t v83 = *((void *)v108 + 6);
      if (v83 && v113 && v83 != v113)
      {
LABEL_274:
        re::internal::assertLog((re::internal *)4, v82, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
        _os_crash();
        __break(1u);
        goto LABEL_275;
      }
      *((void *)v108 + 6) = v113;
      uint64_t v113 = v83;
      long long v84 = *(_OWORD *)((char *)v108 + 56);
      *(_OWORD *)((char *)v108 + 56) = v114;
      long long v114 = v84;
      uint64_t v85 = *((void *)v108 + 10);
      *((void *)v108 + 10) = v116;
      uint64_t v116 = v85;
      ++v115;
      ++*((_DWORD *)v108 + 18);
    }
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v108 + 88, (uint64_t)v117);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v108 + 128, (uint64_t)v121);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v108 + 168, (uint64_t)v125);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v108 + 208, (uint64_t)&v129);
    if (&v109 != (unsigned int *)v108)
    {
      unint64_t v87 = (void *)((char *)v108 + 248);
      uint64_t v88 = *((void *)v108 + 31);
      if (v88 && v134 && v88 != v134)
      {
LABEL_275:
        re::internal::assertLog((re::internal *)4, v86, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        _os_crash();
        __break(1u);
      }
      int v89 = v136;
      if (v136)
      {
        unint64_t v96 = v135;
        if (v135)
        {
          *((void *)v108 + 31) = v134;
          if (v96 >= *((void *)v108 + 32))
          {
            re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity(v87, v96);
            uint64_t v98 = *((void *)v108 + 32);
            int v99 = *((_DWORD *)v108 + 66);
            if (v98)
            {
              if (v99) {
                long long v100 = (char *)v108 + 272;
              }
              else {
                long long v100 = (void *)*((void *)v108 + 35);
              }
              if (v136) {
                uint64_t v101 = &v137;
              }
              else {
                uint64_t v101 = v138;
              }
              memmove(v100, v101, 8 * v98);
              int v99 = *((_DWORD *)v108 + 66);
              uint64_t v98 = *((void *)v108 + 32);
            }
            if (v99) {
              uint64_t v102 = (char *)v108 + 272;
            }
            else {
              uint64_t v102 = (char *)*((void *)v108 + 35);
            }
            uint64_t v103 = &v102[8 * v98];
            if (v136) {
              unsigned int v104 = &v137;
            }
            else {
              unsigned int v104 = v138;
            }
            memcpy(v103, &v104[v98], 8 * v96 - 8 * v98);
          }
          else
          {
            if (*((_DWORD *)v108 + 66)) {
              long long v97 = (char *)v108 + 272;
            }
            else {
              long long v97 = (void *)*((void *)v108 + 35);
            }
            memmove(v97, &v137, 8 * v96);
          }
          *((void *)v108 + 32) = v96;
          unsigned int v95 = v136 + 4;
        }
        else
        {
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v87);
          *((void *)v108 + 31) = v134;
          unsigned int v95 = v136 + 2;
        }
      }
      else
      {
        int v90 = *((_DWORD *)v108 + 66);
        unint64_t v91 = v135;
        *((void *)v108 + 31) = v134;
        *((void *)v108 + 32) = v91;
        long long v92 = (uint64_t *)*((void *)v108 + 35);
        uint64_t v94 = v137;
        uint64_t v93 = v138;
        uint64_t v137 = *((void *)v108 + 34);
        long long v138 = v92;
        *((_DWORD *)v108 + 66) = (v90 & 0xFFFFFFFE) + 2;
        *((void *)v108 + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = v94;
        *((void *)v108 + 35) = v93;
        unsigned int v95 = (v89 & 0xFFFFFFFE | v90 & 1) + 2;
        uint64_t v134 = v88;
      }
      *((_DWORD *)v108 + 66) += 2;
      *((void *)v108 + 37) = v139;
      unint64_t v135 = 0;
      int v136 = v95 + 2;
      uint64_t v139 = 0;
    }
  }
  if (v134)
  {
    int v105 = v136;
    if ((v136 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v134 + 40))(v134, v138);
      int v105 = v136;
    }
    uint64_t v134 = 0;
    unint64_t v135 = 0;
    int v136 = (v105 | 1) + 2;
  }
  if (v129)
  {
    if (v133) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v129 + 40))(v129, v133);
    }
    uint64_t v133 = 0;
    unint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v129 = 0;
    ++v132;
  }
  if (v125[0])
  {
    if (v128) {
      (*(void (**)(void, uint64_t))(*(void *)v125[0] + 40))(v125[0], v128);
    }
    uint64_t v128 = 0;
    v125[1] = 0;
    float32x4_t v126 = 0;
    v125[0] = 0;
    ++v127;
  }
  if (v121[0])
  {
    if (v124) {
      (*(void (**)(void, uint64_t))(*(void *)v121[0] + 40))(v121[0], v124);
    }
    uint64_t v124 = 0;
    v121[1] = 0;
    unint64_t v122 = 0;
    v121[0] = 0;
    ++v123;
  }
  if (v117[0])
  {
    if (v120) {
      (*(void (**)(void, uint64_t))(*(void *)v117[0] + 40))(v117[0], v120);
    }
    uint64_t v120 = 0;
    v117[1] = 0;
    uint64_t v118 = 0;
    v117[0] = 0;
    ++v119;
  }
  if (v113)
  {
    if (v116) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v113 + 40))(v113, v116);
    }
    uint64_t v116 = 0;
    long long v114 = 0uLL;
    uint64_t v113 = 0;
    ++v115;
  }
  if (v110[0] && v112) {
    (*(void (**)(void, uint64_t))(*(void *)v110[0] + 40))(v110[0], v112);
  }
  return v81;
}

void *re::HashBrown<re::anonymous namespace'::VertexPair,re::anonymous namespace'::FaceVertex,re::anonymous namespace'::HashEdge,re::anonymous namespace'::HashEdge,void,false>::init(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = result;
  result[7] = a2;
  unint64_t v4 = 151 * a3;
  unint64_t v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  unint64_t v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    unint64_t v7 = v5 >> 4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 13 * v6, 16);
    *unint64_t v3 = result;
    if (v4 >= 0x80)
    {
      uint64_t v8 = 0;
      *(void *)&long long v9 = -1;
      *((void *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      uint64_t result = (void *)*v3;
    }
    v3[1] = &result[2 * v7];
    unint64_t v6 = v3[2];
    if (v6)
    {
      uint64_t v10 = 0;
      for (unint64_t i = 0; i < v6; ++i)
      {
        uint64_t v12 = v3[1] + v10;
        *(void *)uint64_t v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        unint64_t v6 = v3[2];
        v10 += 12;
      }
    }
  }
  else
  {
    *uint64_t result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::HashBrown<re::anonymous namespace'::VertexPair,re::anonymous namespace'::FaceVertex,re::anonymous namespace'::HashEdge,re::anonymous namespace'::HashEdge,void,false>::find(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  if (!a1[7]) {
    return -1;
  }
  unint64_t v4 = a1[2];
  if (v4 < 0x10 || !a1[3]) {
    return -1;
  }
  unint64_t v7 = v4 >> 4;
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (a3 ^ ((unint64_t)a3 >> 30))) >> 27));
  unint64_t v11 = v10 ^ (v10 >> 31);
  if (v9 == v11) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v11 ^ v9;
  unint64_t v13 = v12 % v7;
  uint64_t v14 = *a1;
  int8x16_t v15 = vdupq_n_s8(v12 & 0x7F);
  int8x16_t v16 = (int8x16_t)xmmword_2343680E0;
  v17.i64[0] = -1;
  for (v17.i64[1] = -1; ; v17.i64[1] = -1)
  {
    int8x16_t v18 = *(int8x16_t *)(v14 + 16 * v13);
    unint64_t v19 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v15, v18), v16)))), (int8x8_t)0x3830282018100800);
    unint64_t v20 = __clz(__rbit64(v19));
    if (v20 <= 0x3F) {
      break;
    }
LABEL_15:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v18, v17), v16)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    int8x16_t v28 = v16;
    int8x16_t v29 = v15;
    if (++v13 == v7) {
      unint64_t v13 = 0;
    }
    uint64_t result = -1;
    int8x16_t v16 = v28;
    int8x16_t v15 = v29;
    v17.i64[0] = -1;
    if (v13 == v27) {
      return result;
    }
  }
  uint64_t v21 = 16 * v13;
  while (1)
  {
    uint64_t result = v20 + v21;
    unint64_t v23 = (int *)(a1[1] + 12 * (v20 + v21));
    int v25 = *v23;
    int v24 = v23[1];
    if (v25 == a2 && v24 == a3) {
      return result;
    }
    if (v20 <= 0x3E)
    {
      unint64_t v20 = __clz(__rbit64((-2 << v20) & v19));
      if (v20 < 0x40) {
        continue;
      }
    }
    goto LABEL_15;
  }
}

unint64_t re::HashBrown<re::anonymous namespace'::VertexPair,re::anonymous namespace'::FaceVertex,re::anonymous namespace'::HashEdge,re::anonymous namespace'::HashEdge,void,false>::h1(unsigned int a1, unsigned int a2)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (a1 ^ ((unint64_t)a1 >> 30));
  unint64_t v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                       * (a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  unint64_t v5 = v4 ^ (v4 >> 31);
  if (v3 == v5) {
    unint64_t v5 = 0;
  }
  return v5 ^ v3;
}

re::GeomConnectivityManifold *re::GeomConnectivityManifold::GeomConnectivityManifold(re::GeomConnectivityManifold *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 1) = 0;
  unint64_t v2 = (void *)((char *)this + 8);
  re::DynamicArray<re::BlendNode>::setCapacity(v2, 1uLL);
  int v3 = *((_DWORD *)this + 8);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 30) = 0;
  *((_DWORD *)this + 66) = 1;
  *((void *)this + 3re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 37) = 0;
  *(_DWORD *)this = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = v3 + 2;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 1;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 1;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 1;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 1;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((_DWORD *)this + 58) = 1;
  return this;
}

uint64_t re::DynamicArray<re::GeomCell4>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4) {
        re::DynamicArray<re::GeomCell4>::copy((void **)a1, (uint64_t)a2);
      }
      else {
        *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
      }
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::BlendNode>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::GeomCell4>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::GeomCell4>::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = *(void *)result;
    uint64_t v3 = *(void *)a2;
    if (*(void *)result) {
      BOOL v4 = v3 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4 || v2 == v3)
    {
      uint64_t v6 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)uint64_t result = v3;
      *(void *)(result + 8) = v7;
      *(void *)a2 = v2;
      *(void *)(a2 + 8) = v6;
      uint64_t v8 = *(void *)(result + 16);
      *(void *)(result + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = *(void *)(a2 + 16);
      *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v8;
      uint64_t v9 = *(void *)(result + 32);
      *(void *)(result + 32) = *(void *)(a2 + 32);
      *(void *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::HashBrown<re::anonymous namespace'::VertexPair,re::anonymous namespace'::FaceVertex,re::anonymous namespace'::HashEdge,re::anonymous namespace'::HashEdge,void,false>::internalAdd(uint64_t *result, unsigned int *a2, _DWORD *a3)
{
  unint64_t v5 = result;
  if (!result[7])
  {
  }
  uint64_t v6 = v5[4];
  if (!v6 || (unint64_t v7 = v5[2], v7 > 8 * v6))
  {
    unint64_t v7 = v5[2];
  }
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  unint64_t v10 = 0xBF58476D1CE4E5B9 * (a2[1] ^ ((unint64_t)a2[1] >> 30));
  unint64_t v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  if (v9 == v11) {
    unint64_t v11 = 0;
  }
  unint64_t v12 = v11 ^ v9;
  unint64_t v13 = v7 >> 4;
  unint64_t v14 = v12 % (v7 >> 4);
  uint64_t v15 = *v5;
  unint64_t v16 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*v5 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
  if (v16 >= 0x40)
  {
    do
    {
      if (v14 + 1 == v13) {
        unint64_t v14 = 0;
      }
      else {
        ++v14;
      }
      unint64_t v16 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v14)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v16 > 0x3F);
  }
  unint64_t v17 = v15 + 16 * v14;
  BOOL v18 = *(unsigned __int8 *)(v17 + v16) == 255;
  *(unsigned char *)(v17 + vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v12 & 0x7F;
  LODWORD(v17) = *a3;
  uint64_t v19 = 3 * (v16 + 16 * v14);
  uint64_t v20 = v5[1] + 4 * v19;
  *(void *)uint64_t v20 = *(void *)a2;
  *(_DWORD *)(v20 + 8) = v17;
  uint64_t v21 = v5[4] - v18;
  ++v5[3];
  v5[4] = v21;
  uint64_t v22 = (unsigned int *)(v5[1] + 4 * v19);
  unint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*v22 ^ ((unint64_t)*v22 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                            * (*v22 ^ ((unint64_t)*v22 >> 30))) >> 27));
  unint64_t v24 = v23 ^ (v23 >> 31);
  unint64_t v25 = v22[1] ^ ((unint64_t)v22[1] >> 30);
  unint64_t v26 = (0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v25) ^ ((0xBF58476D1CE4E5B9 * v25) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v25) ^ ((0xBF58476D1CE4E5B9 * v25) >> 27))) >> 31);
  if (v24 == v26) {
    unint64_t v26 = 0;
  }
  v5[5] ^= v24 ^ v26;
  return result;
}

uint64_t re::HashBrown<re::anonymous namespace'::VertexPair,re::anonymous namespace'::FaceVertex,re::anonymous namespace'::HashEdge,re::anonymous namespace'::HashEdge,void,false>::resize(uint64_t *a1)
{
  unint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  unint64_t v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  unint64_t v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7) {
    unint64_t v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  }
  unint64_t v6 = (v5 << 7) / 0x97;
  uint64_t v7 = a1[7];
  long long v27 = 0u;
  *(_OWORD *)int8x16_t v28 = 0u;
  if (v4 <= v3) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = v6;
  }
  memset(&v28[16], 0, 32);
  v25[0] = a1;
  unint64_t v10 = a1[2];
  if (v10 >= 0x10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    __n128 v13 = (__n128)xmmword_2343680E0;
    v9.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v14 != 0xFFFF) {
        break;
      }
      v11 += 16;
      if (!--v12) {
        goto LABEL_14;
      }
    }
    uint64_t v15 = __clz(__rbit64((unsigned __int16)~v14)) + v11;
    v25[1] = (unsigned __int16)~v14;
    uint64_t v26 = v15;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v25);
        uint64_t v15 = v26;
      }
      while (v26 != -1);
      unint64_t v10 = a1[2];
    }
  }
LABEL_14:
  uint64_t v17 = *(void *)&v28[40];
  *(void *)&v28[40] = a1[7];
  uint64_t result = *(void *)&v28[40];
  long long v18 = v27;
  long long v19 = *(_OWORD *)v28;
  *(void *)int8x16_t v28 = v10;
  uint64_t v20 = *a1;
  uint64_t v21 = a1[1];
  *(void *)&long long v27 = *a1;
  *((void *)&v27 + 1) = v21;
  long long v22 = *(_OWORD *)&v28[16];
  long long v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(void *)&v28[32];
  a1[7] = v17;
  *(_OWORD *)&unsigned char v28[24] = v23;
  long long v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)&v28[8] = v24;
  if (result)
  {
    if (v21) {
      *((void *)&v27 + 1) = 0;
    }
    if (v20) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
    }
  }
  return result;
}

uint64_t re::GeomMeshBVHTree::buildTree(uint64_t a1, void *a2, unsigned int a3, char *a4, unint64_t a5)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 <= v6) {
    goto LABEL_50;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  unsigned __int16 v14 = (void *)(v13 + 48 * v6);
  uint64_t result = re::GeomMesh::accessVertexPositions(*(re::GeomMesh **)a1);
  if (!a3)
  {
    uint64_t v39 = v13 + 48 * v6;
    *(void *)&long long v40 = 0x7F0000007FLL;
    *((void *)&v40 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v39 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(v39 + 32) = v40;
    uint64_t v37 = (float32x4_t *)(v39 + 16);
    *a2 = v14;
    goto LABEL_15;
  }
  unint64_t v7 = v16;
  uint64_t v17 = a2;
  long long v18 = (_DWORD *)(v13 + 48 * v6);
  unint64_t v19 = a5;
  uint64_t v20 = v13;
  uint64_t v21 = 0;
  unint64_t v22 = *(void *)(*(void *)a1 + 40);
  float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v24.i64[0] = 0x7F0000007FLL;
  v24.i32[2] = 127;
  do
  {
    unint64_t v25 = *(unsigned int *)&a4[v21];
    if (v22 <= v25)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 797;
      __int16 v57 = 2048;
      unint64_t v58 = v25;
      __int16 v59 = 2048;
      unint64_t v60 = v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      unint64_t v27 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 601;
      __int16 v57 = 2048;
      unint64_t v58 = v25;
      __int16 v59 = 2048;
      unint64_t v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 601;
      __int16 v57 = 2048;
      unint64_t v58 = v27;
      __int16 v59 = 2048;
      unint64_t v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 601;
      __int16 v57 = 2048;
      unint64_t v58 = v5;
      __int16 v59 = 2048;
      unint64_t v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_47:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 601;
      __int16 v57 = 2048;
      unint64_t v58 = a5;
      __int16 v59 = 2048;
      unint64_t v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_48:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 797;
      __int16 v57 = 2048;
      unint64_t v58 = v25;
      __int16 v59 = 2048;
      unint64_t v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_49:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 797;
      __int16 v57 = 2048;
      unint64_t v58 = v5;
      __int16 v59 = 2048;
      unint64_t v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_50:
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v54 = 136315906;
      *(void *)&v54[4] = "operator[]";
      __int16 v55 = 1024;
      int v56 = 789;
      __int16 v57 = 2048;
      unint64_t v58 = v6;
      __int16 v59 = 2048;
      unint64_t v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v26 = (unsigned int *)(*(void *)(*(void *)a1 + 56) + 16 * v25);
    unint64_t v25 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v5 = v26[2];
    a5 = v26[3];
    if (a5 != -1)
    {
      if (a5 >= v16) {
        goto LABEL_47;
      }
      float32x4_t v28 = *(float32x4_t *)(result + 16 * a5);
      v23.i32[3] = 0;
      v28.i32[3] = 0;
      float32x4_t v23 = vminnmq_f32(v23, v28);
      v24.i32[3] = 0;
      float32x4_t v24 = vmaxnmq_f32(v24, v28);
    }
    if (v25 >= v16) {
      goto LABEL_44;
    }
    if (v27 >= v16) {
      goto LABEL_45;
    }
    if (v5 >= v16) {
      goto LABEL_46;
    }
    v24.i32[3] = 0;
    float32x4_t v29 = *(float32x4_t *)(result + 16 * v25);
    v29.i32[3] = 0;
    float32x4_t v30 = vmaxnmq_f32(v24, v29);
    v30.i32[3] = 0;
    float32x4_t v31 = *(float32x4_t *)(result + 16 * v27);
    v31.i32[3] = 0;
    float32x4_t v32 = vmaxnmq_f32(v30, v31);
    v23.i32[3] = 0;
    float32x4_t v33 = vminnmq_f32(v23, v29);
    v33.i32[3] = 0;
    float32x4_t v34 = vminnmq_f32(v33, v31);
    float32x4_t v35 = *(float32x4_t *)(result + 16 * v5);
    v34.i32[3] = 0;
    v35.i32[3] = 0;
    float32x4_t v23 = vminnmq_f32(v34, v35);
    v32.i32[3] = 0;
    float32x4_t v24 = vmaxnmq_f32(v32, v35);
    v21 += 4;
  }
  while (4 * a3 != v21);
  uint64_t v13 = v20;
  long long v36 = (float32x4_t *)(v20 + 48 * v6);
  v36[1] = v23;
  void v36[2] = v24;
  uint64_t v37 = v36 + 1;
  unsigned __int16 v14 = v18;
  *uint64_t v17 = v18;
  a5 = v19;
  if (a3 == 1)
  {
    uint64_t v38 = 0;
    *long long v18 = *(_DWORD *)a4;
    goto LABEL_42;
  }
LABEL_15:
  uint64_t v41 = (float32x4_t *)(v13 + 48 * v6);
  float32x4_t v43 = v41[2];
  unsigned int v42 = v41 + 2;
  float32x4_t v44 = vsubq_f32(v43, *v37);
  uint64_t v45 = 2;
  if (v44.f32[1] >= v44.f32[2]) {
    uint64_t v45 = 1;
  }
  if (v44.f32[0] >= v44.f32[2] && v44.f32[0] >= v44.f32[1]) {
    uint64_t v45 = 0;
  }
  uint64_t v47 = a4;
  if (a3)
  {
    float v48 = (float)(v42->f32[v45] + *(float *)(v13 + 48 * v6 + 4 * v45 + 16)) * 0.5;
    uint64_t v47 = &a4[4 * a3];
    unint64_t v7 = *(void *)(a5 + 16);
    unsigned int v49 = a4;
    do
    {
      uint64_t v50 = *(void *)(a5 + 32) + 4 * v45;
      while (1)
      {
        unint64_t v25 = *(unsigned int *)v49;
        if (v7 <= v25) {
          goto LABEL_48;
        }
        if (*(float *)(v50 + 16 * v25) >= v48) {
          break;
        }
        v49 += 4;
        if (v49 == v47) {
          goto LABEL_35;
        }
      }
      do
      {
        v47 -= 4;
        if (v47 == v49)
        {
          uint64_t v47 = v49;
          goto LABEL_35;
        }
        unint64_t v5 = *(unsigned int *)v47;
        if (v7 <= v5) {
          goto LABEL_49;
        }
      }
      while (*(float *)(v50 + 16 * v5) >= v48);
      *(_DWORD *)unsigned int v49 = v5;
      v49 += 4;
      *(_DWORD *)uint64_t v47 = v25;
    }
    while (v47 != v49);
  }
LABEL_35:
  unint64_t v51 = (unint64_t)(v47 - a4) >> 2;
  if (v51 == a3 || v51 == 0) {
    uint64_t v53 = a3 >> 1;
  }
  else {
    uint64_t v53 = v51;
  }
  *(void *)&long long v61 = 0;
  *(void *)uint64_t v54 = 0;
  re::GeomMeshBVHTree::buildTree(a1, &v61, v53, a4, a5);
  uint64_t result = re::GeomMeshBVHTree::buildTree(a1, v54, a3 - v53, &a4[4 * v53], a5);
  uint64_t v38 = v61;
  *unsigned __int16 v14 = *(void *)v54;
LABEL_42:
  *(void *)(v13 + 48 * v6 + 8) = v38;
  return result;
}

uint64_t re::GeomMeshBVHTree::init(uint64_t this, const re::GeomMesh *a2)
{
  uint64_t v4 = this;
  uint64_t v53 = *MEMORY[0x263EF8340];
  *(_DWORD *)(this + 8) = 0;
  uint64_t v5 = *((void *)a2 + 5);
  uint64_t v36 = 0;
  v33[1] = 0;
  unint64_t v34 = 0;
  v33[0] = 0;
  int v35 = 0;
  if (!v5)
  {
    *(void *)this = 0;
    *(void *)(this + 32) = 0;
    ++*(_DWORD *)(this + 40);
    return this;
  }
  unint64_t v6 = a2;
  *(void *)this = a2;
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v33, v5);
  uint64_t v7 = re::GeomMesh::accessVertexPositions(v6);
  unsigned int v9 = v8;
  unint64_t v10 = 0;
  __asm
  {
    FMOV            V0.4S, #3.0
    FMOV            V1.4S, #0.25
  }
  do
  {
    unint64_t v17 = *((void *)v6 + 5);
    if (v17 <= v10)
    {
      *(void *)uint64_t v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v38 = 136315906;
      *(void *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 797;
      *(_WORD *)&v38[18] = 2048;
      *(void *)&v38[20] = v10;
      __int16 v39 = 2048;
      *(void *)long long v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      *(void *)uint64_t v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v38 = 136315906;
      *(void *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(void *)&v38[20] = v17;
      __int16 v39 = 2048;
      *(void *)long long v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      *(void *)uint64_t v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v38 = 136315906;
      *(void *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(void *)&v38[20] = v2;
      __int16 v39 = 2048;
      *(void *)long long v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      *(void *)uint64_t v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v38 = 136315906;
      *(void *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(void *)&v38[20] = v3;
      __int16 v39 = 2048;
      *(void *)long long v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      uint64_t v37 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v41 = 136315906;
      *(void *)&v41[4] = "operator[]";
      __int16 v42 = 1024;
      int v43 = 789;
      __int16 v44 = 2048;
      uint64_t v45 = v6;
      __int16 v46 = 2048;
      uint64_t v47 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      *(void *)uint64_t v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v38 = 136315906;
      *(void *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(void *)&v38[20] = v17;
      __int16 v39 = 2048;
      *(void *)long long v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      *(void *)uint64_t v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v38 = 136315906;
      *(void *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 789;
      *(_WORD *)&v38[18] = 2048;
      *(void *)&v38[20] = v10;
      __int16 v39 = 2048;
      *(void *)long long v40 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      *(void *)uint64_t v41 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v38 = 136315906;
      *(void *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 789;
      *(_WORD *)&v38[18] = 2048;
      *(void *)&v38[20] = v10;
      __int16 v39 = 2048;
      *(void *)long long v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_44;
    }
    long long v18 = (unsigned int *)(*((void *)v6 + 7) + 16 * v10);
    unint64_t v17 = *v18;
    if (v17 >= v8) {
      goto LABEL_37;
    }
    unint64_t v2 = v18[1];
    if (v2 >= v8) {
      goto LABEL_38;
    }
    uint64_t v3 = v18[2];
    if (v3 >= v8) {
      goto LABEL_39;
    }
    float32x4_t v19 = *(float32x4_t *)(v7 + 16 * v17);
    unint64_t v17 = v18[3];
    float32x4_t v20 = *(float32x4_t *)(v7 + 16 * v2);
    float32x4_t v21 = *(float32x4_t *)(v7 + 16 * v3);
    if (v17 == -1)
    {
      unint64_t v17 = v34;
      if (v34 <= v10) {
        goto LABEL_43;
      }
      float32x4_t v22 = vdivq_f32(vaddq_f32(vaddq_f32(v19, v20), v21), _Q0);
    }
    else
    {
      if (v17 >= v8) {
        goto LABEL_41;
      }
      unint64_t v2 = v34;
      if (v34 <= v10) {
        goto LABEL_42;
      }
      float32x4_t v22 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v19, v20), v21), *(float32x4_t *)(v7 + 16 * v17)), _Q1);
    }
    *(float32x4_t *)(v36 + 16 * v10++) = v22;
  }
  while (v10 != v5);
  *(void *)&uint64_t v40[2] = 0;
  memset(v38, 0, sizeof(v38));
  re::DynamicArray<float>::resize((uint64_t)v38, v5);
  float32x4_t v23 = 0;
  unint64_t v6 = *(const re::GeomMesh **)&v38[16];
  uint64_t v24 = *(void *)&v40[2];
  do
  {
    if (v6 == v23) {
      goto LABEL_40;
    }
    *(_DWORD *)(v24 + 4 * (void)v23) = v23;
    float32x4_t v23 = (const re::GeomMesh *)((char *)v23 + 1);
  }
  while ((const re::GeomMesh *)v5 != v23);
  unint64_t v25 = (2 * v5 - 1);
  unint64_t v26 = *(void *)(v4 + 32);
  if (v26 >= v25)
  {
    if (v26 > v25) {
      goto LABEL_27;
    }
  }
  else
  {
    if (*(void *)(v4 + 24) < v25)
    {
      re::DynamicArray<re::GeomMeshBVHTree::Node>::setCapacity((void *)(v4 + 16), (2 * v5 - 1));
      unint64_t v26 = *(void *)(v4 + 32);
    }
    if (v26 < v25)
    {
      uint64_t v27 = *(void *)(v4 + 48);
      uint64_t v28 = v27 + 48 * v26;
      uint64_t v29 = v27 + 48 * v25 - v28;
      if (v29 >= 1)
      {
        unint64_t v30 = v29 / 0x30uLL + 1;
        int32x4_t v31 = vdupq_n_s32(0x7F800000u);
        *(void *)&long long v32 = 0x7F0000007FLL;
        *((void *)&v32 + 1) = 0x7F0000007FLL;
        do
        {
          *(void *)uint64_t v28 = 0;
          *(void *)(v28 + 8) = 0;
          *(int32x4_t *)(v28 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v31;
          *(_OWORD *)(v28 + 32) = v32;
          --v30;
          v28 += 48;
        }
        while (v30 > 1);
      }
    }
LABEL_27:
    *(void *)(v4 + 32) = v25;
    ++*(_DWORD *)(v4 + 40);
    unint64_t v6 = *(const re::GeomMesh **)&v38[16];
  }
  if (!v6)
  {
LABEL_44:
    uint64_t v37 = 0;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)uint64_t v41 = 136315906;
    *(void *)&v41[4] = "operator[]";
    __int16 v42 = 1024;
    int v43 = 789;
    __int16 v44 = 2048;
    uint64_t v45 = 0;
    __int16 v46 = 2048;
    uint64_t v47 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::GeomMeshBVHTree::buildTree(v4, &v48, v5, *(char **)&v40[2], (unint64_t)v33);
  if (*(void *)v38 && *(void *)&v40[2]) {
    (*(void (**)(void))(**(void **)v38 + 40))();
  }
  this = v33[0];
  if (v33[0])
  {
    if (v36) {
      return (*(uint64_t (**)(void))(*(void *)v33[0] + 40))();
    }
  }
  return this;
}

void re::GeomMeshBVHTree::computeClosestPointHelper(re::GeomMesh **a1, void *a2, float32x4_t *a3, float *a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v60 = *MEMORY[0x263EF8340];
  for (unint64_t i = a2; ; unint64_t i = v11)
  {
    uint64_t v16 = i[1];
    uint64_t v15 = i + 1;
    uint64_t v14 = v16;
    if (!v16) {
      break;
    }
    uint64_t v17 = 0;
    float v18 = 0.0;
    do
    {
      float v19 = a3->f32[v17];
      float v20 = *(float *)(v14 + v17 * 4 + 16);
      if (v19 >= v20)
      {
        float v22 = *(float *)(v14 + v17 * 4 + 32);
        float v21 = 0.0;
        if (v19 > v22) {
          float v21 = v19 - v22;
        }
      }
      else
      {
        float v21 = v19 - v20;
      }
      float v18 = v18 + (float)(v21 * v21);
      ++v17;
    }
    while (v17 != 3);
    uint64_t v23 = 0;
    uint64_t v24 = *v11;
    float v25 = 0.0;
    do
    {
      float v26 = a3->f32[v23];
      float v27 = *(float *)(v24 + v23 * 4 + 16);
      if (v26 >= v27)
      {
        float v29 = *(float *)(v24 + v23 * 4 + 32);
        float v28 = 0.0;
        if (v26 > v29) {
          float v28 = v26 - v29;
        }
      }
      else
      {
        float v28 = v26 - v27;
      }
      float v25 = v25 + (float)(v28 * v28);
      ++v23;
    }
    while (v23 != 3);
    float v30 = *a4;
    if (v18 >= v25)
    {
      if (v25 < v30)
      {
        re::GeomMeshBVHTree::computeClosestPointHelper(a1, *v11, a3, a4, a5);
        float v30 = *a4;
      }
      uint64_t v11 = v15;
      if (v18 >= v30) {
        return;
      }
    }
    else
    {
      if (v18 < v30)
      {
        re::GeomMeshBVHTree::computeClosestPointHelper(a1, v14, a3, a4, a5);
        float v30 = *a4;
      }
      if (v25 >= v30) {
        return;
      }
    }
    uint64_t v11 = (void *)*v11;
  }
  uint64_t v31 = re::GeomMesh::accessVertexPositions(*a1);
  unint64_t v33 = *(unsigned int *)v11;
  unint64_t v34 = *a1;
  unint64_t v35 = *((void *)*a1 + 5);
  if (v35 <= v33)
  {
    v45.i64[0] = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v47 = 136315906;
    long long v48 = "operator[]";
    __int16 v49 = 1024;
    int v50 = 797;
    __int16 v51 = 2048;
    unint64_t v52 = v33;
    __int16 v53 = 2048;
    unint64_t v54 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_36;
  }
  LODWORD(v15) = v32;
  uint64_t v36 = (unsigned int *)(*((void *)v34 + 7) + 16 * v33);
  unint64_t v35 = *v36;
  if (v35 >= v32)
  {
LABEL_36:
    v45.i64[0] = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v47 = 136315906;
    long long v48 = "operator[]";
    __int16 v49 = 1024;
    int v50 = 601;
    __int16 v51 = 2048;
    unint64_t v52 = v35;
    __int16 v53 = 2048;
    unint64_t v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v6 = v36[1];
  if (v6 >= v32)
  {
LABEL_37:
    v45.i64[0] = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v47 = 136315906;
    long long v48 = "operator[]";
    __int16 v49 = 1024;
    int v50 = 601;
    __int16 v51 = 2048;
    unint64_t v52 = v6;
    __int16 v53 = 2048;
    unint64_t v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v7 = v36[2];
  if (v7 >= v32)
  {
LABEL_38:
    v45.i64[0] = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v55 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v47 = 136315906;
    long long v48 = "operator[]";
    __int16 v49 = 1024;
    int v50 = 601;
    __int16 v51 = 2048;
    unint64_t v52 = v7;
    __int16 v53 = 2048;
    unint64_t v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v5 = v36[3];
  long long v37 = 0uLL;
  long long v44 = 0u;
  float32x4_t v45 = 0u;
  if (v5 != -1)
  {
    if (v5 < v32)
    {
      *(void *)&long long v55 = 0;
      float v38 = re::computeDistanceSquaredFromPointToQuad(a3, (float32x4_t *)(v31 + 16 * v35), (float32x4_t *)(v31 + 16 * v6), (float32x4_t *)(v31 + 16 * v7), (float32x4_t *)(v31 + 16 * v5), &v45, (uint64_t *)&v55);
      *(void *)&long long v39 = v55;
      DWORD2(v39) = 0;
      long long v44 = v39;
      goto LABEL_32;
    }
LABEL_39:
    uint64_t v46 = 0;
    long long v58 = v37;
    long long v59 = v37;
    long long v56 = v37;
    long long v57 = v37;
    long long v55 = v37;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v47 = 136315906;
    long long v48 = "operator[]";
    __int16 v49 = 1024;
    int v50 = 601;
    __int16 v51 = 2048;
    unint64_t v52 = v5;
    __int16 v53 = 2048;
    unint64_t v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  geom_closest_point_to_triangle_3f();
  float32x4_t v45 = v40;
  float32x4_t v41 = vsubq_f32(v40, *a3);
  float32x4_t v42 = vmulq_f32(v41, v41);
  LODWORD(v38) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).u32[0];
LABEL_32:
  if (v38 < *a4)
  {
    *a4 = v38;
    *(_DWORD *)a5 = v33;
    float32x4_t v43 = v45;
    *(_OWORD *)(a5 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v44;
    *(float32x4_t *)(a5 + 32) = v43;
  }
}

float re::GeomMeshBVHTree::computeClosestPoint(re::GeomMeshBVHTree *a1, float32x4_t *a2, _DWORD *a3)
{
  float v8 = INFINITY;
  *a3 = -1;
  if (!*((void *)a1 + 4)) {
    return INFINITY;
  }
  unint64_t v6 = (void *)re::GeomMeshBVHTree::root(a1);
  re::GeomMeshBVHTree::computeClosestPointHelper((re::GeomMesh **)a1, v6, a2, &v8, (uint64_t)a3);
  return v8;
}

uint64_t re::GeomMeshBVHTree::root(re::GeomMeshBVHTree *this)
{
  if (!*((void *)this + 4))
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((void *)this + 6);
}

void *re::DynamicArray<re::GeomMeshBVHTree::Node>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v2 = result[1];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (*v4)
      {
        if (!a2)
        {
          unint64_t v6 = 0;
          if (!v2) {
            goto LABEL_8;
          }
          goto LABEL_7;
        }
        uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 16);
        if (result)
        {
          unint64_t v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 48 * v4[2]);
          uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 48 * a2, *(void *)(*v4 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
      }
      else
      {
        uint64_t result = (void *)re::DynamicArray<re::GeomMeshBVHTree::Node>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

uint64_t re::internal::accessFaceVaryingAttributeSubmesh(re::internal *this, const re::GeomAttribute *a2)
{
  switch(*((unsigned char *)this + 17))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
      return (uint64_t)this + 64;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "accessFaceVaryingAttributeSubmesh", 168);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233A8A9F8);
  }
}

char *re::GeomAttribute::setName(re::GeomAttribute *this, const char *__s)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5[2] + 40))(v5[2], v4);
  }
  unint64_t v6 = (re *)strlen(__s);
  unint64_t v7 = (char *)v6 + 1;
  float v8 = re::globalAllocators(v6);
  unsigned int v9 = (char *)(*(uint64_t (**)(uint64_t, char *, void))(*(void *)v8[2] + 32))(v8[2], v7, 0);
  *((void *)this + 1) = v9;
  return strcpy(v9, __s);
}

void re::GeomAttribute::~GeomAttribute(re::GeomAttribute *this)
{
  *(void *)this = &unk_26E70CE58;
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3[2] + 40))(v3[2], v2);
    *((void *)this + 1) = 0;
  }
}

uint64_t re::GeomAttribute::copyValues(re::GeomAttribute *this, re::GeomAttribute *a2)
{
  uint64_t v4 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)this + 16))(this);
  (*(void (**)(re::GeomAttribute *, uint64_t))(*(void *)a2 + 72))(a2, v4);
  uint64_t v5 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)this + 16))(this);
  unint64_t v6 = *(uint64_t (**)(re::GeomAttribute *, re::GeomAttribute *, uint64_t, void, void))(*(void *)this + 40);
  return v6(this, a2, v5, 0, 0);
}

re::GeomAttribute *re::GeomAttribute::createAttribute(re::GeomAttribute *this, const re::GeomAttribute *a2)
{
  uint64_t v3 = *((unsigned __int8 *)this + 16);
  uint64_t v4 = (const char *)*((void *)this + 1);
  uint64_t v5 = *((unsigned __int8 *)this + 17);
  if (v3 == 3)
  {
    unint64_t v6 = (re::internal::GeomAttributeFaceVaryingSubmesh *)re::internal::accessFaceVaryingAttributeSubmesh(this, (const re::GeomAttribute *)v3);
    FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(v4, v5, v6);
  }
  else
  {
    FaceVaryingAttribute = re::GeomAttribute::createAttribute(*((re **)this + 1), v3, v5, 0);
  }
  float v8 = FaceVaryingAttribute;
  re::GeomAttribute::copyValues(this, FaceVaryingAttribute);
  return v8;
}

re::GeomAttribute *re::GeomAttribute::createAttribute(re *a1, uint64_t a2, int a3, uint64_t a4)
{
  char v5 = a3;
  char v6 = a2;
  switch(a3)
  {
    case 0:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<short>(a1);
      break;
    case 1:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<unsigned short>(a1);
      break;
    case 2:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<int>(a1);
      break;
    case 3:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<unsigned int>(a1);
      break;
    case 4:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<float>(a1);
      break;
    case 5:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<double>(a1);
      break;
    case 6:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<re::Vector2<float>>(a1);
      break;
    case 7:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<re::Vector3<float>>(a1);
      break;
    case 8:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<re::Vector4<float>>(a1);
      break;
    case 9:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<unsigned char>(a1);
      break;
    case 10:
      float v8 = (re::GeomAttribute *)re::internal::newAttributePtr<signed char>(a1);
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "createAttribute", 353);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233A8AE10);
  }
  unsigned int v9 = v8;
  if (v8)
  {
    re::GeomAttribute::setName(v8, (const char *)a1);
    *((unsigned char *)v9 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v6;
    *((unsigned char *)v9 + 17) = v5;
    if (a4) {
      (*(void (**)(re::GeomAttribute *, uint64_t))(*(void *)v9 + 72))(v9, a4);
    }
  }
  return v9;
}

re::GeomAttribute *re::GeomAttribute::createFaceVaryingAttribute(const char *a1, uint64_t a2, re::internal::GeomAttributeFaceVaryingSubmesh *a3)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v8, a3);
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(a1, a2, (re *)v8);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v8, v6);
  return FaceVaryingAttribute;
}

uint64_t re::GeomAttribute::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)))
  {
    return 0;
  }
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56);
  return v5(a1, a2);
}

uint64_t re::internal::newAttributePtr<signed char>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70CED8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<short>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70CF60;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<int>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70CFE8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<unsigned char>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D070;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<unsigned short>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D0F8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<unsigned int>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D180;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<float>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D208;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<double>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D290;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<re::Vector2<float>>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D318;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<re::Vector3<float>>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D3A0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::newAttributePtr<re::Vector4<float>>(re *a1)
{
  uint64_t v1 = re::globalAllocators(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1[2] + 32))(v1[2], 64, 8);
  *(void *)uint64_t result = &unk_26E70D428;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

re::GeomAttribute *re::GeomAttribute::createFaceVaryingAttribute(const char *a1, uint64_t a2, re *a3)
{
  char v3 = a2;
  switch((int)a2)
  {
    case 0:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<short>(a3);
      break;
    case 1:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<unsigned short>(a3);
      break;
    case 2:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<int>(a3);
      break;
    case 3:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<unsigned int>(a3);
      break;
    case 4:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<float>(a3);
      break;
    case 5:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<double>(a3);
      break;
    case 6:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<re::Vector2<float>>(a3);
      break;
    case 7:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<re::Vector3<float>>(a3);
      break;
    case 8:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<re::Vector4<float>>(a3);
      break;
    case 9:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<unsigned char>(a3);
      break;
    case 10:
      char v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<signed char>(a3);
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "createFaceVaryingAttribute", 406);
      _os_crash();
      __break(1u);
      JUMPOUT(0x233A8B56CLL);
  }
  uint64_t v6 = v5;
  if (v5)
  {
    re::GeomAttribute::setName(v5, a1);
    *((unsigned char *)v6 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 3;
    *((unsigned char *)v6 + 17) = v3;
  }
  return v6;
}

uint64_t re::internal::newFaceVaryingAttributePtr<signed char>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D4B0;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<short>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D538;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<int>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D5C0;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<unsigned char>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D648;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<unsigned short>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D6D0;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<unsigned int>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D758;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<float>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D7E0;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<double>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D868;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<re::Vector2<float>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D8F0;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<re::Vector3<float>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70D978;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<re::Vector4<float>>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 272, 8);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(void *)uint64_t v3 = &unk_26E70DA00;
  *(void *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::GeomAttribute::freeAttribute(re::GeomAttribute *this, re::GeomAttribute *a2)
{
  if (*((unsigned __int8 *)this + 17) >= 0xBu)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "freeAttribute", 477);
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    (**(void (***)(re::GeomAttribute *))this)(this);
    uint64_t v4 = *(uint64_t (**)(uint64_t, re::GeomAttribute *))(*(void *)v3 + 40);
    return v4(v3, this);
  }
  return result;
}

void re::GeomAttribute::updateSubmesh(uint64_t a1, uint64_t a2)
{
}

void re::internal::GeomTypedAttribute<signed char>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70CED8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70CED8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<signed char>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<signed char>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

void *re::internal::GeomTypedAttribute<signed char>::copyValuesHelper(void *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v6 = result;
  if (a4)
  {
    if (a3)
    {
      uint64_t v7 = a3;
      while (1)
      {
        unsigned int v9 = *a4++;
        uint64_t v8 = v9;
        if (result[5] <= (unint64_t)v9) {
          break;
        }
        unint64_t v10 = *a5;
        if (*(void *)(a2 + 40) <= v10) {
          goto LABEL_15;
        }
        *(unsigned char *)(*(void *)(a2 + 56) + v10) = *(unsigned char *)(result[7] + v8);
        ++a5;
        if (!--v7) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      unint64_t v11 = 0;
      while (v6[5] > v11)
      {
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_17;
        }
        *(unsigned char *)(*(void *)(a2 + 56) + v11) = *(unsigned char *)(v6[7] + v11);
        if (result == ++v11) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    do
    {
      if (v5 <= v3) {
        goto LABEL_22;
      }
      uint64_t v6 = *(void *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(void *)(result + 40) <= v3) {
          goto LABEL_23;
        }
        char v7 = *(unsigned char *)(*(void *)(result + 56) + v3);
        unint64_t v8 = v4;
        int v9 = v4;
        while (1)
        {
          unint64_t v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == v10) {
            break;
          }
          unint64_t v11 = *(void *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8) {
            goto LABEL_19;
          }
          *(unsigned char *)(*(void *)(result + 56) + v8) = *(unsigned char *)(*(void *)(result + 56) + v10);
          unint64_t v12 = *(void *)(a2 + 16);
          if (v12 <= v8) {
            goto LABEL_20;
          }
          uint64_t v6 = *(void *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          unint64_t v8 = v10;
          int v9 = v10;
          if (v12 <= v10) {
            goto LABEL_21;
          }
        }
        if (*(void *)(result + 40) <= v8) {
          goto LABEL_24;
        }
        *(unsigned char *)(*(void *)(result + 56) + v8) = v7;
        unint64_t v5 = *(void *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(void *)(a2 + 32) + 4 * v8) = v9;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<signed char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 40);
  return v2 == *(void *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2) == 0;
}

void re::internal::GeomTypedAttribute<signed char>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<signed char>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<BOOL>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<short>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70CF60;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70CF60;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<short>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<short>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<unsigned short>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<short>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

void *re::internal::GeomTypedAttribute<short>::copyValuesHelper(void *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v6 = result;
  if (a4)
  {
    if (a3)
    {
      unint64_t v7 = result[5];
      uint64_t v8 = a3;
      while (1)
      {
        unsigned int v10 = *a4++;
        uint64_t v9 = v10;
        if (v7 <= v10) {
          break;
        }
        unint64_t v11 = *a5;
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_15;
        }
        *(_WORD *)(*(void *)(a2 + 56) + 2 * v11) = *(_WORD *)(result[7] + 2 * v9);
        ++a5;
        if (!--v8) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[5];
      while (v13 != v12)
      {
        if (*(void *)(a2 + 40) <= v12) {
          goto LABEL_17;
        }
        *(_WORD *)(*(void *)(a2 + 56) + 2 * v12) = *(_WORD *)(v6[7] + 2 * v12);
        if (result == ++v12) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<short>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v5 <= v3) {
        goto LABEL_18;
      }
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        unint64_t v7 = v4;
        if (v5 <= v4) {
          goto LABEL_19;
        }
        uint64_t v8 = *(void *)(result + 56);
        __int16 v9 = *(_WORD *)(v8 + 2 * v3);
        int v10 = v4;
        while (1)
        {
          unint64_t v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == v11) {
            break;
          }
          if (v2 <= v11)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7) {
            goto LABEL_17;
          }
          *(_WORD *)(v8 + 2 * v7) = *(_WORD *)(v8 + 2 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          unint64_t v7 = v11;
          int v10 = v11;
          if (v5 <= v11) {
            goto LABEL_19;
          }
        }
        if (v2 <= v7) {
          goto LABEL_20;
        }
        *(_WORD *)(v8 + 2 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  return v2 == *(void *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2) == 0;
}

void re::internal::GeomTypedAttribute<short>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<short>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<unsigned short>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<short>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<int>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70CFE8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70CFE8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<int>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<int>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<float>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<int>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

void *re::internal::GeomTypedAttribute<int>::copyValuesHelper(void *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v6 = result;
  if (a4)
  {
    if (a3)
    {
      unint64_t v7 = result[5];
      uint64_t v8 = a3;
      while (1)
      {
        unsigned int v10 = *a4++;
        uint64_t v9 = v10;
        if (v7 <= v10) {
          break;
        }
        unint64_t v11 = *a5;
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_15;
        }
        *(_DWORD *)(*(void *)(a2 + 56) + 4 * v11) = *(_DWORD *)(result[7] + 4 * v9);
        ++a5;
        if (!--v8) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[5];
      while (v13 != v12)
      {
        if (*(void *)(a2 + 40) <= v12) {
          goto LABEL_17;
        }
        *(_DWORD *)(*(void *)(a2 + 56) + 4 * v12) = *(_DWORD *)(v6[7] + 4 * v12);
        if (result == ++v12) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<int>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v5 <= v3) {
        goto LABEL_18;
      }
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        unint64_t v7 = v4;
        if (v5 <= v4) {
          goto LABEL_19;
        }
        uint64_t v8 = *(void *)(result + 56);
        int v9 = *(_DWORD *)(v8 + 4 * v3);
        int v10 = v4;
        while (1)
        {
          unint64_t v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == v11) {
            break;
          }
          if (v2 <= v11)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7) {
            goto LABEL_17;
          }
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v8 + 4 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          unint64_t v7 = v11;
          int v10 = v11;
          if (v5 <= v11) {
            goto LABEL_19;
          }
        }
        if (v2 <= v7) {
          goto LABEL_20;
        }
        *(_DWORD *)(v8 + 4 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  return v2 == *(void *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2) == 0;
}

void re::internal::GeomTypedAttribute<int>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<int>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<int>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<int>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<unsigned char>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D070;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D070;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

void *re::internal::GeomTypedAttribute<unsigned char>::copyValuesHelper(void *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v6 = result;
  if (a4)
  {
    if (a3)
    {
      uint64_t v7 = a3;
      while (1)
      {
        unsigned int v9 = *a4++;
        uint64_t v8 = v9;
        if (result[5] <= (unint64_t)v9) {
          break;
        }
        unint64_t v10 = *a5;
        if (*(void *)(a2 + 40) <= v10) {
          goto LABEL_15;
        }
        *(unsigned char *)(*(void *)(a2 + 56) + v10) = *(unsigned char *)(result[7] + v8);
        ++a5;
        if (!--v7) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      unint64_t v11 = 0;
      while (v6[5] > v11)
      {
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_17;
        }
        *(unsigned char *)(*(void *)(a2 + 56) + v11) = *(unsigned char *)(v6[7] + v11);
        if (result == ++v11) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    do
    {
      if (v5 <= v3) {
        goto LABEL_22;
      }
      uint64_t v6 = *(void *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(void *)(result + 40) <= v3) {
          goto LABEL_23;
        }
        char v7 = *(unsigned char *)(*(void *)(result + 56) + v3);
        unint64_t v8 = v4;
        int v9 = v4;
        while (1)
        {
          unint64_t v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == v10) {
            break;
          }
          unint64_t v11 = *(void *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8) {
            goto LABEL_19;
          }
          *(unsigned char *)(*(void *)(result + 56) + v8) = *(unsigned char *)(*(void *)(result + 56) + v10);
          unint64_t v12 = *(void *)(a2 + 16);
          if (v12 <= v8) {
            goto LABEL_20;
          }
          uint64_t v6 = *(void *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          unint64_t v8 = v10;
          int v9 = v10;
          if (v12 <= v10) {
            goto LABEL_21;
          }
        }
        if (*(void *)(result + 40) <= v8) {
          goto LABEL_24;
        }
        *(unsigned char *)(*(void *)(result + 56) + v8) = v7;
        unint64_t v5 = *(void *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(void *)(a2 + 32) + 4 * v8) = v9;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<unsigned char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 40);
  return v2 == *(void *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2) == 0;
}

void re::internal::GeomTypedAttribute<unsigned char>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<unsigned char>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<BOOL>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<unsigned short>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D0F8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D0F8;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<unsigned short>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

void *re::internal::GeomTypedAttribute<unsigned short>::copyValuesHelper(void *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v6 = result;
  if (a4)
  {
    if (a3)
    {
      unint64_t v7 = result[5];
      uint64_t v8 = a3;
      while (1)
      {
        unsigned int v10 = *a4++;
        uint64_t v9 = v10;
        if (v7 <= v10) {
          break;
        }
        unint64_t v11 = *a5;
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_15;
        }
        *(_WORD *)(*(void *)(a2 + 56) + 2 * v11) = *(_WORD *)(result[7] + 2 * v9);
        ++a5;
        if (!--v8) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[5];
      while (v13 != v12)
      {
        if (*(void *)(a2 + 40) <= v12) {
          goto LABEL_17;
        }
        *(_WORD *)(*(void *)(a2 + 56) + 2 * v12) = *(_WORD *)(v6[7] + 2 * v12);
        if (result == ++v12) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v5 <= v3) {
        goto LABEL_18;
      }
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        unint64_t v7 = v4;
        if (v5 <= v4) {
          goto LABEL_19;
        }
        uint64_t v8 = *(void *)(result + 56);
        __int16 v9 = *(_WORD *)(v8 + 2 * v3);
        int v10 = v4;
        while (1)
        {
          unint64_t v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == v11) {
            break;
          }
          if (v2 <= v11)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7) {
            goto LABEL_17;
          }
          *(_WORD *)(v8 + 2 * v7) = *(_WORD *)(v8 + 2 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          unint64_t v7 = v11;
          int v10 = v11;
          if (v5 <= v11) {
            goto LABEL_19;
          }
        }
        if (v2 <= v7) {
          goto LABEL_20;
        }
        *(_WORD *)(v8 + 2 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<unsigned short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  return v2 == *(void *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2) == 0;
}

void re::internal::GeomTypedAttribute<unsigned short>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<unsigned short>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<unsigned short>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<unsigned int>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D180;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D180;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<float>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

void *re::internal::GeomTypedAttribute<unsigned int>::copyValuesHelper(void *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v6 = result;
  if (a4)
  {
    if (a3)
    {
      unint64_t v7 = result[5];
      uint64_t v8 = a3;
      while (1)
      {
        unsigned int v10 = *a4++;
        uint64_t v9 = v10;
        if (v7 <= v10) {
          break;
        }
        unint64_t v11 = *a5;
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_15;
        }
        *(_DWORD *)(*(void *)(a2 + 56) + 4 * v11) = *(_DWORD *)(result[7] + 4 * v9);
        ++a5;
        if (!--v8) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v6[5];
      while (v13 != v12)
      {
        if (*(void *)(a2 + 40) <= v12) {
          goto LABEL_17;
        }
        *(_DWORD *)(*(void *)(a2 + 56) + 4 * v12) = *(_DWORD *)(v6[7] + 4 * v12);
        if (result == ++v12) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v5 <= v3) {
        goto LABEL_18;
      }
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        unint64_t v7 = v4;
        if (v5 <= v4) {
          goto LABEL_19;
        }
        uint64_t v8 = *(void *)(result + 56);
        int v9 = *(_DWORD *)(v8 + 4 * v3);
        int v10 = v4;
        while (1)
        {
          unint64_t v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == v11) {
            break;
          }
          if (v2 <= v11)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7) {
            goto LABEL_17;
          }
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v8 + 4 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          unint64_t v7 = v11;
          int v10 = v11;
          if (v5 <= v11) {
            goto LABEL_19;
          }
        }
        if (v2 <= v7) {
          goto LABEL_20;
        }
        *(_DWORD *)(v8 + 4 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<unsigned int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  return v2 == *(void *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2) == 0;
}

void re::internal::GeomTypedAttribute<unsigned int>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<unsigned int>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<int>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<float>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D208;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D208;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<float>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<float>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<float>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<float>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

float re::internal::GeomTypedAttribute<float>::copyValuesHelper(void *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  if (a4)
  {
    if (a3)
    {
      unint64_t v7 = a1[5];
      uint64_t v8 = a3;
      while (1)
      {
        unsigned int v10 = *a4++;
        uint64_t v9 = v10;
        if (v7 <= v10) {
          break;
        }
        unint64_t v11 = *a5;
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_15;
        }
        float result = *(float *)(a1[7] + 4 * v9);
        *(float *)(*(void *)(a2 + 56) + 4 * v11) = result;
        ++a5;
        if (!--v8) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = a1[5];
      while (v15 != v14)
      {
        if (*(void *)(a2 + 40) <= v14) {
          goto LABEL_17;
        }
        float result = *(float *)(a1[7] + 4 * v14);
        *(float *)(*(void *)(a2 + 56) + 4 * v14++) = result;
        if (v13 == v14) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<float>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v5 <= v3) {
        goto LABEL_18;
      }
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        unint64_t v7 = v4;
        if (v5 <= v4) {
          goto LABEL_19;
        }
        uint64_t v8 = *(void *)(result + 56);
        int v9 = *(_DWORD *)(v8 + 4 * v3);
        int v10 = v4;
        while (1)
        {
          unint64_t v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == v11) {
            break;
          }
          if (v2 <= v11)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7) {
            goto LABEL_17;
          }
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v8 + 4 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          unint64_t v7 = v11;
          int v10 = v11;
          if (v5 <= v11) {
            goto LABEL_19;
          }
        }
        if (v2 <= v7) {
          goto LABEL_20;
        }
        *(_DWORD *)(v8 + 4 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<float>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(float **)(a1 + 56);
  unsigned int v4 = *(float **)(a2 + 56);
  uint64_t v5 = 4 * v2 - 4;
  do
  {
    float v6 = *v3++;
    float v7 = v6;
    float v8 = *v4++;
    BOOL result = v7 == v8;
    BOOL v10 = v7 != v8 || v5 == 0;
    v5 -= 4;
  }
  while (!v10);
  return result;
}

void re::internal::GeomTypedAttribute<float>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<float>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<int>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<float>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<double>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D290;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D290;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<double>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<double>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<double>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<double>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

double re::internal::GeomTypedAttribute<double>::copyValuesHelper(void *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  if (a4)
  {
    if (a3)
    {
      unint64_t v7 = a1[5];
      uint64_t v8 = a3;
      while (1)
      {
        unsigned int v10 = *a4++;
        uint64_t v9 = v10;
        if (v7 <= v10) {
          break;
        }
        unint64_t v11 = *a5;
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_15;
        }
        double result = *(double *)(a1[7] + 8 * v9);
        *(double *)(*(void *)(a2 + 56) + 8 * v11) = result;
        ++a5;
        if (!--v8) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    int v13 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = a1[5];
      while (v15 != v14)
      {
        if (*(void *)(a2 + 40) <= v14) {
          goto LABEL_17;
        }
        double result = *(double *)(a1[7] + 8 * v14);
        *(double *)(*(void *)(a2 + 56) + 8 * v14++) = result;
        if (v13 == v14) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<double>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v5 <= v3) {
        goto LABEL_18;
      }
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        unint64_t v7 = v4;
        if (v5 <= v4) {
          goto LABEL_19;
        }
        uint64_t v8 = *(void *)(result + 56);
        uint64_t v9 = *(void *)(v8 + 8 * v3);
        int v10 = v4;
        while (1)
        {
          unint64_t v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == v11) {
            break;
          }
          if (v2 <= v11)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7) {
            goto LABEL_17;
          }
          *(void *)(v8 + 8 * v7) = *(void *)(v8 + 8 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          unint64_t v7 = v11;
          int v10 = v11;
          if (v5 <= v11) {
            goto LABEL_19;
          }
        }
        if (v2 <= v7) {
          goto LABEL_20;
        }
        *(void *)(v8 + 8 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<double>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(double **)(a1 + 56);
  unsigned int v4 = *(double **)(a2 + 56);
  uint64_t v5 = 8 * v2 - 8;
  do
  {
    double v6 = *v3++;
    double v7 = v6;
    double v8 = *v4++;
    BOOL result = v7 == v8;
    BOOL v10 = v7 != v8 || v5 == 0;
    v5 -= 8;
  }
  while (!v10);
  return result;
}

void re::internal::GeomTypedAttribute<double>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<double>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<float *>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<double>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector2<float>>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D318;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D318;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<unsigned long>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

void *re::internal::GeomTypedAttribute<re::Vector2<float>>::copyValuesHelper(void *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  double v6 = result;
  if (a4)
  {
    if (a3)
    {
      uint64_t v7 = a3;
      while (1)
      {
        unsigned int v9 = *a4++;
        uint64_t v8 = v9;
        if (result[5] <= (unint64_t)v9) {
          break;
        }
        unint64_t v10 = *a5;
        if (*(void *)(a2 + 40) <= v10) {
          goto LABEL_15;
        }
        *(void *)(*(void *)(a2 + 56) + 8 * v10) = *(void *)(result[7] + 8 * v8);
        ++a5;
        if (!--v7) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    BOOL result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    if (result)
    {
      unint64_t v11 = 0;
      while (v6[5] > v11)
      {
        if (*(void *)(a2 + 40) <= v11) {
          goto LABEL_17;
        }
        *(void *)(*(void *)(a2 + 56) + 8 * v11) = *(void *)(v6[7] + 8 * v11);
        if (result == ++v11) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    do
    {
      if (v5 <= v3) {
        goto LABEL_22;
      }
      uint64_t v6 = *(void *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(void *)(result + 40) <= v3) {
          goto LABEL_23;
        }
        uint64_t v7 = *(void *)(*(void *)(result + 56) + 8 * v3);
        unint64_t v8 = v4;
        int v9 = v4;
        while (1)
        {
          unint64_t v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == v10) {
            break;
          }
          unint64_t v11 = *(void *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8) {
            goto LABEL_19;
          }
          *(void *)(*(void *)(result + 56) + 8 * v8) = *(void *)(*(void *)(result + 56) + 8 * v10);
          unint64_t v12 = *(void *)(a2 + 16);
          if (v12 <= v8) {
            goto LABEL_20;
          }
          uint64_t v6 = *(void *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          unint64_t v8 = v10;
          int v9 = v10;
          if (v12 <= v10) {
            goto LABEL_21;
          }
        }
        if (*(void *)(result + 40) <= v8) {
          goto LABEL_24;
        }
        *(void *)(*(void *)(result + 56) + 8 * v8) = v7;
        unint64_t v5 = *(void *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(void *)(a2 + 32) + 4 * v8) = v9;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(float32x2_t **)(a1 + 56);
  unsigned int v4 = *(float32x2_t **)(a2 + 56);
  uint64_t v5 = 8 * v2 - 8;
  do
  {
    float32x2_t v6 = *v3++;
    float32x2_t v7 = v6;
    float32x2_t v8 = *v4++;
    uint32x2_t v9 = (uint32x2_t)vceq_f32(v7, v8);
    v9.i32[0] = vpmin_u32(v9, v9).u32[0];
    uint64_t result = (unsigned __int32)v9.i32[0] >> 31;
    if ((v9.i32[0] & 0x80000000) == 0) {
      break;
    }
    uint64_t v11 = v5;
    v5 -= 8;
  }
  while (v11);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector2<float>>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<re::Vector2<float>>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector3<float>>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D3A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D3A0;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<re::Vector3<float>>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

__n128 re::internal::GeomTypedAttribute<re::Vector3<float>>::copyValuesHelper(void *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  if (a4)
  {
    if (a3)
    {
      uint64_t v7 = a3;
      while (1)
      {
        unsigned int v9 = *a4++;
        uint64_t v8 = v9;
        if (a1[5] <= (unint64_t)v9) {
          break;
        }
        unint64_t v10 = *a5;
        if (*(void *)(a2 + 40) <= v10) {
          goto LABEL_15;
        }
        __n128 result = *(__n128 *)(a1[7] + 16 * v8);
        *(__n128 *)(*(void *)(a2 + 56) + 16 * v10) = result;
        ++a5;
        if (!--v7) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    int v12 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    if (v12)
    {
      unint64_t v13 = 0;
      while (a1[5] > v13)
      {
        if (*(void *)(a2 + 40) <= v13) {
          goto LABEL_17;
        }
        __n128 result = *(__n128 *)(a1[7] + 16 * v13);
        *(__n128 *)(*(void *)(a2 + 56) + 16 * v13++) = result;
        if (v13 == v12) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    do
    {
      if (v5 <= v3) {
        goto LABEL_22;
      }
      uint64_t v6 = *(void *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(void *)(result + 40) <= v3) {
          goto LABEL_23;
        }
        long long v12 = *(_OWORD *)(*(void *)(result + 56) + 16 * v3);
        unint64_t v7 = v4;
        int v8 = v4;
        while (1)
        {
          unint64_t v9 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == v9) {
            break;
          }
          unint64_t v10 = *(void *)(result + 40);
          if (v10 <= v9)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v10 <= v7) {
            goto LABEL_19;
          }
          *(_OWORD *)(*(void *)(result + 56) + 16 * v7) = *(_OWORD *)(*(void *)(result + 56) + 16 * v9);
          unint64_t v11 = *(void *)(a2 + 16);
          if (v11 <= v7) {
            goto LABEL_20;
          }
          uint64_t v6 = *(void *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v7) = v8;
          unint64_t v7 = v9;
          int v8 = v9;
          if (v11 <= v9) {
            goto LABEL_21;
          }
        }
        if (*(void *)(result + 40) <= v7) {
          goto LABEL_24;
        }
        *(_OWORD *)(*(void *)(result + 56) + 16 * v7) = v12;
        unint64_t v5 = *(void *)(a2 + 16);
        if (v5 <= v7)
        {
LABEL_25:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(void *)(a2 + 32) + 4 * v7) = v8;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(float32x4_t **)(a1 + 56);
  unsigned int v4 = *(float32x4_t **)(a2 + 56);
  uint64_t v5 = 16 * v2 - 16;
  do
  {
    float32x4_t v6 = *v3++;
    float32x4_t v7 = v6;
    float32x4_t v8 = *v4++;
    uint32x4_t v9 = (uint32x4_t)vceqq_f32(v7, v8);
    v9.i32[3] = v9.i32[2];
    v9.i32[0] = vminvq_u32(v9);
    uint64_t result = (unsigned __int32)v9.i32[0] >> 31;
    if ((v9.i32[0] & 0x80000000) == 0) {
      break;
    }
    uint64_t v11 = v5;
    v5 -= 16;
  }
  while (v11);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector3<float>>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<re::Vector3<float>>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<re::Quaternion<float>>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector4<float>>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  *(void *)a1 = &unk_26E70D428;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D428;
  re::DynamicArray<unsigned long>::deinit((uint64_t)a1 + 24);
  re::GeomAttribute::~GeomAttribute(a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::resize(unsigned char *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 16))(a1) == a2) {
    return 1;
  }
  if (a1[16] == 4)
  {
    re::DynamicArray<re::Vector4<float>>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 16) == 4)
  {
    *(void *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

__n128 re::internal::GeomTypedAttribute<re::Vector4<float>>::copyValuesHelper(void *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  if (a4)
  {
    if (a3)
    {
      uint64_t v7 = a3;
      while (1)
      {
        unsigned int v9 = *a4++;
        uint64_t v8 = v9;
        if (a1[5] <= (unint64_t)v9) {
          break;
        }
        unint64_t v10 = *a5;
        if (*(void *)(a2 + 40) <= v10) {
          goto LABEL_15;
        }
        __n128 result = *(__n128 *)(a1[7] + 16 * v8);
        *(__n128 *)(*(void *)(a2 + 56) + 16 * v10) = result;
        ++a5;
        if (!--v7) {
          return result;
        }
      }
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    int v12 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    if (v12)
    {
      unint64_t v13 = 0;
      while (a1[5] > v13)
      {
        if (*(void *)(a2 + 40) <= v13) {
          goto LABEL_17;
        }
        __n128 result = *(__n128 *)(a1[7] + 16 * v13);
        *(__n128 *)(*(void *)(a2 + 56) + 16 * v13++) = result;
        if (v13 == v12) {
          return result;
        }
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 40);
  if (v2)
  {
    unint64_t v3 = 0;
    unsigned int v4 = 0;
    unint64_t v5 = *(void *)(a2 + 16);
    do
    {
      if (v5 <= v3) {
        goto LABEL_22;
      }
      uint64_t v6 = *(void *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(void *)(result + 40) <= v3) {
          goto LABEL_23;
        }
        long long v7 = *(_OWORD *)(*(void *)(result + 56) + 16 * v3);
        unint64_t v8 = v4;
        int v9 = v4;
        while (1)
        {
          unint64_t v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == v10) {
            break;
          }
          unint64_t v11 = *(void *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8) {
            goto LABEL_19;
          }
          *(_OWORD *)(*(void *)(result + 56) + 16 * v8) = *(_OWORD *)(*(void *)(result + 56) + 16 * v10);
          unint64_t v12 = *(void *)(a2 + 16);
          if (v12 <= v8) {
            goto LABEL_20;
          }
          uint64_t v6 = *(void *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          unint64_t v8 = v10;
          int v9 = v10;
          if (v12 <= v10) {
            goto LABEL_21;
          }
        }
        if (*(void *)(result + 40) <= v8) {
          goto LABEL_24;
        }
        *(_OWORD *)(*(void *)(result + 56) + 16 * v8) = v7;
        unint64_t v5 = *(void *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(void *)(a2 + 32) + 4 * v8) = v9;
      }
      unint64_t v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(float32x4_t **)(a1 + 56);
  unsigned int v4 = *(float32x4_t **)(a2 + 56);
  uint64_t v5 = 16 * v2 - 16;
  do
  {
    float32x4_t v6 = *v3++;
    float32x4_t v7 = v6;
    float32x4_t v8 = *v4++;
    v7.i32[0] = vminvq_u32((uint32x4_t)vceqq_f32(v7, v8));
    uint64_t result = (unsigned __int32)v7.i32[0] >> 31;
    if ((v7.i32[0] & 0x80000000) == 0) {
      break;
    }
    uint64_t v10 = v5;
    v5 -= 16;
  }
  while (v10);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector4<float>>::resizeInternal(uint64_t a1, unsigned int a2)
{
}

void *re::internal::GeomTypedAttribute<re::Vector4<float>>::reserveInternal(void *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2) {
    return re::DynamicArray<re::Vector4<float>>::setCapacity(result + 3, a2);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::clearInternal(uint64_t result)
{
  *(void *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedFaceVaryingAttribute<signed char>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D4B0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70CED8;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D4B0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70CED8;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<signed char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)
    || memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<signed char>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  unsigned int v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

uint64_t re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v4;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = 0;
  *(void *)(a1 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v5;
  ++*(_DWORD *)(a2 + 32);
  ++*(_DWORD *)(a1 + 32);
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 2re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 4) = 0;
  ++*(_DWORD *)(a2 + 32);
  re::GeomIndexMap::GeomIndexMap(a1 + 48, a2 + 48);
  re::GeomIndexMap::GeomIndexMap(a1 + 128, a2 + 128);
  return a1;
}

uint64_t re::GeomIndexMap::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    return 0;
  }
  int v2 = *(unsigned __int8 *)(a1 + 12);
  int v3 = *(unsigned __int8 *)(a2 + 12);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    BOOL v7 = v2 != 1 && v3 != 1;
    BOOL v8 = v3 == 2 || v2 == 2;
    if (!v8 || v7) {
      return v5;
    }
    if (v2 == 1) {
      uint64_t v9 = a1 + 16;
    }
    else {
      uint64_t v9 = a2 + 16;
    }
    if (v2 == 2) {
      uint64_t v10 = (void *)(a1 + 16);
    }
    else {
      uint64_t v10 = (void *)(a2 + 16);
    }
    unsigned int v11 = *(_DWORD *)(v9 + 16);
    unsigned int v22 = 0;
    if (v11)
    {
      unsigned int v12 = 0;
      while (1)
      {
        unint64_t v13 = *(void *)(v9 + 16);
        if (v13 <= v12)
        {
          uint64_t v23 = 0;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v32 = 0u;
          uint64_t v20 = v12;
          unint64_t v21 = v13;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v24 = 136315906;
          float v25 = "operator[]";
          __int16 v26 = 1024;
          int v27 = 797;
          __int16 v28 = 2048;
          uint64_t v29 = v20;
          __int16 v30 = 2048;
          unint64_t v31 = v21;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        int v14 = *(_DWORD *)(*(void *)(v9 + 32) + 4 * v12);
        uint64_t v15 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v10, &v22);
        if (v15 == -1)
        {
          if (v14 != -1) {
            return 0;
          }
        }
        else if (v14 == -1 || *(_DWORD *)(v10[1] + 8 * v15 + 4) != v14)
        {
          return 0;
        }
        unsigned int v12 = v22 + 1;
        unsigned int v22 = v12;
        if (v12 >= v11) {
          return 1;
        }
      }
    }
    return 1;
  }
  if (v2 == 2)
  {
    uint64_t v16 = (uint64_t *)(a1 + 16);
    uint64_t v17 = (void *)(a2 + 16);
    return re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::operator==(v16, v17);
  }
  if (v2 == 1)
  {
    uint64_t v19 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 32) == v19) {
      return memcmp(*(const void **)(a1 + 48), *(const void **)(a2 + 48), 4 * v19) == 0;
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 12)) {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "operator==", 748);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::DynamicArray<re::GeomCell4>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2) {
      return 1;
    }
    int v3 = *(_DWORD **)(a1 + 32);
    uint64_t v4 = &v3[4 * v2];
    for (unint64_t i = *(_DWORD **)(a2 + 32); *v3 == *i; i += 4)
    {
      uint64_t v6 = 1;
      while (v6 != 4)
      {
        int v7 = v3[v6];
        int v8 = i[v6++];
        if (v7 != v8)
        {
          if ((unint64_t)(v6 - 2) < 3) {
            return 0;
          }
          break;
        }
      }
      v3 += 4;
      if (v3 == v4) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::operator==(uint64_t *a1, void *a2)
{
  if (a1[3] == a2[3] && a1[5] == a2[5] && a1[6] == a2[6])
  {
    v12[0] = a1;
    unint64_t v3 = a1[2];
    if (v3 < 0x10) {
      return 1;
    }
    uint64_t v4 = 0;
    uint64_t v5 = *a1;
    unint64_t v6 = v3 >> 4;
    while (1)
    {
      unsigned __int16 v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2343680E0)))), (int8x8_t)0x3830282018100800).u16[0];
      v12[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF) {
        break;
      }
      v4 += 16;
      if (!--v6) {
        return 1;
      }
    }
    uint64_t v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    uint64_t v13 = v8;
    if (v8 == -1) {
      return 1;
    }
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(v12[0] + 8) + 8 * v8);
      uint64_t v9 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a2, (unsigned int *)&v11);
      if (v9 == -1 || *(_DWORD *)(a2[1] + 8 * v9 + 4) != HIDWORD(v11)) {
        break;
      }
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v12);
      uint64_t v8 = v13;
      if (v13 == -1) {
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *re::internal::GeomAttributeFaceVaryingSubmesh::operator=(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 32);
  *a1 = *a2;
  uint64_t v5 = (uint64_t)(a1 + 32);
  re::DynamicArray<re::GeomCell4>::operator=((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  re::GeomIndexMap::operator=((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
  re::GeomIndexMap::operator=(v5, v4);
  return a1;
}

void re::internal::GeomTypedFaceVaryingAttribute<short>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D538;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70CF60;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D538;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70CF60;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)
    || memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<short>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<int>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D5C0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70CFE8;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D5C0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70CFE8;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)
    || memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<int>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<unsigned char>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D648;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D070;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D648;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D070;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)
    || memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned char>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<unsigned short>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D6D0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D0F8;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D6D0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D0F8;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)
    || memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned short>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<unsigned int>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D758;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D180;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D758;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D180;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)
    || memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned int>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<float>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D7E0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D208;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D7E0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D208;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<float>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v5 = *(float **)(a1 + 56);
    unint64_t v6 = *(float **)(a2 + 56);
    uint64_t v7 = 4 * v2;
    while (*v5 == *v6)
    {
      ++v5;
      ++v6;
      v7 -= 4;
      if (!v7) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<float>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<double>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D868;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D290;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D868;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D290;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<double>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v5 = *(double **)(a1 + 56);
    unint64_t v6 = *(double **)(a2 + 56);
    uint64_t v7 = 8 * v2;
    while (*v5 == *v6)
    {
      ++v5;
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<double>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<re::Vector2<float>>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D8F0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D318;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D8F0;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D318;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector2<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v5 = *(float32x2_t **)(a1 + 56);
    unint64_t v6 = *(float32x2_t **)(a2 + 56);
    uint64_t v7 = 8 * v2;
    do
    {
      uint32x2_t v8 = (uint32x2_t)vceq_f32(*v5, *v6);
      if ((vpmin_u32(v8, v8).u32[0] & 0x80000000) == 0) {
        return 0;
      }
      ++v5;
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector2<float>>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<re::Vector3<float>>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70D978;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D3A0;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70D978;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D3A0;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector3<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v5 = *(float32x4_t **)(a1 + 56);
    unint64_t v6 = *(float32x4_t **)(a2 + 56);
    uint64_t v7 = 16 * v2;
    do
    {
      uint32x4_t v8 = (uint32x4_t)vceqq_f32(*v5, *v6);
      v8.i32[3] = v8.i32[2];
      if ((vminvq_u32(v8) & 0x80000000) == 0) {
        return 0;
      }
      ++v5;
      ++v6;
      v7 -= 16;
    }
    while (v7);
  }
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector3<float>>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

void re::internal::GeomTypedFaceVaryingAttribute<re::Vector4<float>>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E70DA00;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D428;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_26E70DA00;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  *(void *)a1 = &unk_26E70D428;
  re::DynamicArray<unsigned long>::deinit(a1 + 24);
  re::GeomAttribute::~GeomAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector4<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2 != *(void *)(a2 + 40)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v5 = *(float32x4_t **)(a1 + 56);
    unint64_t v6 = *(float32x4_t **)(a2 + 56);
    uint64_t v7 = 16 * v2;
    while ((vminvq_u32((uint32x4_t)vceqq_f32(*v5, *v6)) & 0x80000000) != 0)
    {
      ++v5;
      ++v6;
      v7 -= 16;
      if (!v7) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (*(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 64)
    || !re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    || !re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return 0;
  }
  return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector4<float>>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  uint64_t v3 = a1[16];
  uint64_t v4 = *(uint64_t (**)(_DWORD *, uint64_t))(*(void *)a1 + 72);
  return v4(a1, v3);
}

uint64_t re::buildTube(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v222 = *MEMORY[0x263EF8340];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v197);
  unsigned int v4 = *a2;
  if (v4 < 3 || (int v5 = a2[1]) == 0)
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 16)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 17))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexNormal", 1, 7);
      if (*((unsigned char *)a2 + 16))
      {
        if (*((unsigned char *)a2 + 17))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v197);
    goto LABEL_24;
  }
  int v6 = v5 + 1;
  int v197 = 2 * (v4 + 1) * (v5 + 1) + 4 * (v4 + 1);
  unsigned int v202 = v197;
  if (v203)
  {
    uint64_t v7 = v204;
    uint64_t v8 = 8 * v203;
    do
    {
      uint64_t v9 = *v7++;
      (*(void (**)(uint64_t, void))(*(void *)v9 + 72))(v9, v202);
      v8 -= 8;
    }
    while (v8);
  }
  unint64_t v10 = 2 * v4 * v6;
  re::DynamicArray<re::GeomCell4>::resize(&v198, v10);
  unsigned int v205 = v10;
  if (v206)
  {
    uint64_t v11 = v207;
    uint64_t v12 = 8 * v206;
    do
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t, void))(*(void *)v13 + 72))(v13, v205);
      v12 -= 8;
    }
    while (v12);
  }
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexPosition", 1, 7);
  if (*((unsigned char *)a2 + 17)) {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexNormal", 1, 7);
  }
  if (*((unsigned char *)a2 + 16))
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexUV", 1, 6);
    if (*((unsigned char *)a2 + 17))
    {
      if (*((unsigned char *)a2 + 16))
      {
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexTangent", 1, 7);
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v201, "vertexBitangent", 1, 7);
      }
    }
  }
  uint64_t v14 = *a2;
  int v15 = a2[1];
  uint64_t v16 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v201, "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 16))(v16))
  {
    uint64_t v174 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v16, 0);
    unsigned int v175 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  else
  {
    unsigned int v175 = 0;
    uint64_t v174 = 0;
  }
  if (*((unsigned char *)a2 + 17))
  {
    uint64_t v20 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v201, "vertexNormal");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 16))(v20))
    {
      uint64_t v173 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v20, 0);
      uint64_t v21 = (*(unsigned int (**)(uint64_t))(*(void *)v20 + 16))(v20);
    }
    else
    {
      uint64_t v173 = 0;
      uint64_t v21 = 0;
    }
  }
  else
  {
    uint64_t v173 = 0;
    uint64_t v21 = 0xFFFFFFFFLL;
  }
  unint64_t v183 = v21;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v22 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v201, "vertexUV");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22))
    {
      uint64_t v172 = re::internal::GeomTypedAttribute<double>::operator[](v22, 0);
      uint64_t v23 = (*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22);
    }
    else
    {
      uint64_t v172 = 0;
      uint64_t v23 = 0;
    }
  }
  else
  {
    uint64_t v172 = 0;
    uint64_t v23 = 0xFFFFFFFFLL;
  }
  unint64_t v181 = v23;
  unint64_t v24 = (v14 + 1 + (v14 + 1) * v15);
  if (*((unsigned char *)a2 + 16)) {
    BOOL v25 = *((unsigned char *)a2 + 17) == 0;
  }
  else {
    BOOL v25 = 1;
  }
  int v26 = !v25;
  int v189 = v26;
  uint64_t v167 = a1;
  if (v25)
  {
    uint64_t v170 = 0;
    uint64_t v171 = 0;
    unsigned int v29 = -1;
    uint64_t v30 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v27 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v201, "vertexTangent");
    uint64_t v28 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v201, "vertexBitangent");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 16))(v27))
    {
      uint64_t v171 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v27, 0);
      unsigned int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
    }
    else
    {
      unsigned int v29 = 0;
      uint64_t v171 = 0;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28))
    {
      unint64_t v188 = 0;
      uint64_t v170 = 0;
      goto LABEL_53;
    }
    uint64_t v170 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v28, 0);
    uint64_t v30 = (*(unsigned int (**)(uint64_t))(*(void *)v28 + 16))(v28);
  }
  unint64_t v188 = v30;
LABEL_53:
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  LOWORD(v33) = a2[1];
  unint64_t v34 = v29;
  uint64_t v169 = v14;
  int v35 = v14 + 1;
  unint64_t v168 = v24;
  unsigned int v36 = v24;
  do
  {
    uint64_t v37 = 0;
    unsigned int v176 = v32;
    v17.f32[0] = (float)(unsigned __int16)v33;
    uint64_t v192 = v36;
    unint64_t v193 = v31;
    uint64_t v177 = v170 + 16 * v36;
    uint64_t v178 = v171 + 16 * v36;
    uint64_t v185 = v172 + 8 * v36;
    uint64_t v186 = v173 + 16 * v36;
    float v38 = (float32x4_t *)(v174 + 16 * v36);
    uint64_t v179 = v170 + 16 * v31;
    if (v175 >= v31) {
      unsigned int v39 = v175 - v31;
    }
    else {
      unsigned int v39 = 0;
    }
    BOOL v40 = v175 >= v36;
    unsigned int v41 = v175 - v36;
    if (v40) {
      unint64_t v42 = v41;
    }
    else {
      unint64_t v42 = 0;
    }
    uint64_t v180 = v171 + 16 * v31;
    uint64_t v43 = v172 + 8 * v31;
    uint64_t v33 = v173 + 16 * v31;
    unint64_t v44 = v174 + 16 * v31;
    *(float *)&long long v18 = (float)v32 / v17.f32[0];
    long long v191 = v18;
    do
    {
      v17.i16[0] = *a2;
      v17.f32[0] = (float)v37 / (float)v17.u32[0];
      float v195 = *((float *)a2 + 1);
      uint64_t v196 = v17.i64[0];
      float v45 = *((float *)a2 + 3);
      __float2 v46 = __sincosf_stret(v17.f32[0] * 6.2832);
      float v47 = *((float *)a2 + 2);
      __float2 v51 = __sincosf_stret((float)(1.0 - *(float *)&v196) * 6.2832);
      if (v39 == v37)
      {
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (v193 + v37);
        __int16 v215 = 2048;
        unint64_t v216 = v175;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_92:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (v192 + v37);
        __int16 v215 = 2048;
        unint64_t v216 = v175;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_93:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        unint64_t v94 = v73;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v193 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v94;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_94:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v192 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v183;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_95:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        LODWORD(v33) = &_os_log_internal;
        unint64_t v95 = v76;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v192 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v95;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_96:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        a2 = (unsigned __int16 *)&_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v193 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v181;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_97;
      }
      float v52 = v45 - v45;
      long long v18 = v191;
      float v53 = (float)(*(float *)&v191 * v195) + v195 * -0.5;
      float v54 = v45 + (float)(*(float *)&v191 * (float)(v45 - v45));
      *(float *)&long long v50 = v46.__cosval * v54;
      *((float *)&v50 + 1) = v53;
      *((float *)&v50 + 2) = -(float)(v54 * v46.__sinval);
      *(_OWORD *)(v44 + 16 * v37) = v50;
      if (v42 == v37) {
        goto LABEL_92;
      }
      unint64_t v55 = v192 + v37;
      unint64_t v56 = v193 + v37;
      v57.i32[1] = 0;
      v57.i32[3] = 0;
      v57.f32[0] = -v46.__sinval;
      v57.f32[2] = -v46.__cosval;
      v49.f32[0] = v52 * v46.__cosval;
      v49.f32[1] = v195;
      v49.f32[2] = -(float)(v46.__sinval * v52);
      int32x4_t v58 = (int32x4_t)vmulq_f32(v57, v57);
      v58.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v58, 2), vadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 1))).u32[0];
      float32x2_t v59 = vrsqrte_f32((float32x2_t)v58.u32[0]);
      float32x2_t v60 = vmul_f32(v59, vrsqrts_f32((float32x2_t)v58.u32[0], vmul_f32(v59, v59)));
      v58.i32[0] = vmul_f32(v60, vrsqrts_f32((float32x2_t)v58.u32[0], vmul_f32(v60, v60))).u32[0];
      int32x4_t v61 = (int32x4_t)vmulq_f32(v49, v49);
      float32x4_t v62 = vmulq_n_f32(v57, *(float *)v58.i32);
      v57.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1))).u32[0];
      *(float32x2_t *)v61.i8 = vrsqrte_f32((float32x2_t)v57.u32[0]);
      *(float32x2_t *)v61.i8 = vmul_f32(*(float32x2_t *)v61.i8, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8)));
      v61.i32[0] = vmul_f32(*(float32x2_t *)v61.i8, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8))).u32[0];
      float v63 = v47 + (float)(*(float *)&v191 * (float)(v47 - v47));
      v57.f32[0] = v51.__cosval * v63;
      v57.f32[1] = (float)(*(float *)&v191 * v195) + v195 * -0.5;
      v57.f32[2] = -(float)(v63 * v51.__sinval);
      v64.i32[1] = 0;
      v64.i32[3] = 0;
      v64.f32[0] = -v51.__sinval;
      v64.f32[2] = -v51.__cosval;
      v48.f32[0] = v51.__cosval * (float)(v47 - v47);
      v48.f32[1] = v195;
      v48.f32[2] = -(float)(v51.__sinval * (float)(v47 - v47));
      int32x4_t v65 = (int32x4_t)vmulq_f32(v64, v64);
      unsigned __int32 v66 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v65, 2), vadd_f32(*(float32x2_t *)v65.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1))).u32[0];
      float32x4_t v67 = vmulq_n_f32(v49, *(float *)v61.i32);
      float32x2_t v68 = vrsqrte_f32((float32x2_t)v66);
      float32x2_t v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)v66, vmul_f32(v68, v68)));
      float32x4_t v70 = vmulq_n_f32(v64, vmul_f32(v69, vrsqrts_f32((float32x2_t)v66, vmul_f32(v69, v69))).f32[0]);
      int32x4_t v71 = (int32x4_t)vmulq_f32(v48, v48);
      v71.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v71, 2), vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
      *(float32x2_t *)v61.i8 = vrsqrte_f32((float32x2_t)v71.u32[0]);
      *(float32x2_t *)v61.i8 = vmul_f32(*(float32x2_t *)v61.i8, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8)));
      float32x4_t v17 = vmulq_n_f32(v48, vmul_f32(*(float32x2_t *)v61.i8, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8))).f32[0]);
      float32x4_t v72 = vnegq_f32(v70);
      v38[v37] = v57;
      if (*((unsigned char *)a2 + 17))
      {
        unint64_t v73 = v183;
        if (v183 <= v56) {
          goto LABEL_93;
        }
        int8x16_t v74 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL), vnegq_f32(v62)), v67, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), (int8x16_t)v62, 0xCuLL));
        *(int8x16_t *)(v33 + 16 * v37) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), v74, 0xCuLL);
        if (v183 <= v55) {
          goto LABEL_94;
        }
        int8x16_t v75 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), v72), v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), (int8x16_t)v70, 0xCuLL));
        *(float32x4_t *)(v186 + 16 * v37) = vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL));
      }
      if (*((unsigned char *)a2 + 16))
      {
        unint64_t v76 = v181;
        if (v181 <= v55) {
          goto LABEL_95;
        }
        *(void *)(v185 + 8 * v37) = __PAIR64__(v191, v196);
        if (v181 <= v56) {
          goto LABEL_96;
        }
        *(void *)(v43 + 8 * v37) = __PAIR64__(v191, v196);
      }
      if (v189)
      {
        if (v56 >= v34)
        {
          uint64_t v208 = 0;
          long long v220 = 0u;
          long long v221 = 0u;
          long long v218 = 0u;
          long long v219 = 0u;
          long long v217 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v209 = 136315906;
          uint64_t v210 = "operator[]";
          __int16 v211 = 1024;
          int v212 = 609;
          __int16 v213 = 2048;
          unint64_t v214 = v193 + v37;
          __int16 v215 = 2048;
          unint64_t v216 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_103:
          uint64_t v208 = 0;
          long long v220 = 0u;
          long long v221 = 0u;
          long long v218 = 0u;
          long long v219 = 0u;
          long long v217 = 0u;
          a2 = (unsigned __int16 *)&_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v209 = 136315906;
          uint64_t v210 = "operator[]";
          __int16 v211 = 1024;
          int v212 = 609;
          __int16 v213 = 2048;
          unint64_t v214 = v193 + v37;
          __int16 v215 = 2048;
          unint64_t v216 = v188;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_104:
          uint64_t v208 = 0;
          long long v220 = 0u;
          long long v221 = 0u;
          long long v218 = 0u;
          long long v219 = 0u;
          long long v217 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v209 = 136315906;
          uint64_t v210 = "operator[]";
          __int16 v211 = 1024;
          int v212 = 609;
          __int16 v213 = 2048;
          unint64_t v214 = v192 + v37;
          __int16 v215 = 2048;
          unint64_t v216 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_105:
          uint64_t v208 = 0;
          long long v220 = 0u;
          long long v221 = 0u;
          long long v218 = 0u;
          long long v219 = 0u;
          long long v217 = 0u;
          LODWORD(v33) = &_os_log_internal;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v209 = 136315906;
          uint64_t v210 = "operator[]";
          __int16 v211 = 1024;
          int v212 = 609;
          __int16 v213 = 2048;
          unint64_t v214 = v192 + v37;
          __int16 v215 = 2048;
          unint64_t v216 = v188;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_106:
          uint64_t v192 = 0;
          unsigned int v187 = 0;
          goto LABEL_107;
        }
        *(float32x4_t *)(v180 + 16 * v37) = v62;
        if (v188 <= v56) {
          goto LABEL_103;
        }
        *(float32x4_t *)(v179 + 16 * v37) = v67;
        if (v55 >= v34) {
          goto LABEL_104;
        }
        *(float32x4_t *)(v178 + 16 * v37) = v72;
        if (v188 <= v55) {
          goto LABEL_105;
        }
        *(float32x4_t *)(v177 + 16 * v37) = v17;
      }
      ++v37;
    }
    while (v35 != v37);
    unsigned int v36 = v192 + v37;
    unsigned int v31 = v193 + v37;
    unsigned int v32 = v176 + 1;
    LODWORD(v33) = a2[1];
  }
  while (v176 < v33);
  unint64_t v42 = *a2;
  int v77 = v169;
  float v38 = (float32x4_t *)v201;
  unint64_t v78 = v168;
  if (!a2[1]) {
    goto LABEL_88;
  }
  int v79 = 0;
  uint64_t v80 = 0;
  int v81 = 0;
  int v82 = v42 * v33;
  unint64_t v83 = v199;
  uint64_t v84 = v169 + 1;
  int v85 = v168 + v169;
  uint64_t v86 = 8;
  do
  {
    if (!v42) {
      goto LABEL_87;
    }
    uint64_t v87 = 0;
    uint64_t v88 = v200;
    int v89 = (_DWORD *)(v200 + v86);
    do
    {
      unint64_t v90 = v80 + v87;
      if (v83 <= v80 + v87)
      {
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 789;
        __int16 v213 = 2048;
        unint64_t v214 = v90;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_195:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        int v124 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 789;
        __int16 v213 = 2048;
        unint64_t v214 = v90;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_196:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        int v209 = 136315906;
        __int16 v213 = 2048;
        unint64_t v214 = (v37 + v124);
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_197:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v180;
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_198:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v179;
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_199:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v178;
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_200:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v180;
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_201:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v188;
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_202:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v42;
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_203:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = v185;
        __int16 v215 = 2048;
        unint64_t v216 = v186;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_204:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v44;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_205:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v90;
        __int16 v215 = 2048;
        unint64_t v216 = v44;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_206:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_207:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v90;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_208:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v192;
        __int16 v215 = 2048;
        unint64_t v216 = v44;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_209:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v90;
        __int16 v215 = 2048;
        unint64_t v216 = v44;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_210:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v192;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_211:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v90;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_212:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 789;
        __int16 v213 = 2048;
        unint64_t v214 = v90;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_213:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 789;
        __int16 v213 = 2048;
        unint64_t v214 = v90;
        __int16 v215 = 2048;
        unint64_t v216 = v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_214:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v78;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_215:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v90;
        __int16 v215 = 2048;
        unint64_t v216 = v78;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_216:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        unint64_t v166 = v130;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v37;
        __int16 v215 = 2048;
        unint64_t v216 = v166;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_217:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v90;
        __int16 v215 = 2048;
        unint64_t v216 = v193;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_218:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v90;
        __int16 v215 = 2048;
        unint64_t v216 = v78;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_219:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v192;
        __int16 v215 = 2048;
        unint64_t v216 = v78;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_220:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v191;
        __int16 v215 = 2048;
        unint64_t v216 = v90;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_221:
        uint64_t v208 = 0;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v217 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v209 = 136315906;
        uint64_t v210 = "operator[]";
        __int16 v211 = 1024;
        int v212 = 609;
        __int16 v213 = 2048;
        unint64_t v214 = (unint64_t)v38 + v192;
        __int16 v215 = 2048;
        unint64_t v216 = v193;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(v89 - 2) = v79 + v87;
      *(v89 - 1) = v79 + v87 + 1;
      _DWORD *v89 = v77 + v87 + 2;
      v89[1] = v77 + v87 + 1;
      unint64_t v90 = (v82 + v87);
      if (v83 <= v90) {
        goto LABEL_195;
      }
      unint64_t v91 = (_DWORD *)(v88 + 16 * v90);
      *unint64_t v91 = v78 + v87;
      v91[1] = v78 + v87 + 1;
      v91[2] = v85 + v87 + 2;
      v91[3] = v85 + v87++ + 1;
      v89 += 4;
    }
    while (v42 != v87);
    v82 += v87;
LABEL_87:
    ++v81;
    v80 += v42;
    v79 += v84;
    v86 += 16 * v42;
    v85 += v84;
    v78 += v84;
    v77 += v84;
  }
  while (v81 != v33);
LABEL_88:
  uint64_t v92 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v201, "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(void *)v92 + 16))(v92))
  {
    uint64_t v196 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v92, 0);
    LODWORD(v195) = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 16))(v92);
    goto LABEL_98;
  }
LABEL_97:
  float v195 = 0.0;
  uint64_t v196 = 0;
LABEL_98:
  unsigned int v39 = v42 + 1;
  if (!*((unsigned char *)a2 + 17))
  {
    uint64_t v192 = 0;
    unsigned int v187 = -1;
    goto LABEL_107;
  }
  uint64_t v96 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v38, "vertexNormal");
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v96 + 16))(v96)) {
    goto LABEL_106;
  }
  uint64_t v192 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v96, 0);
  unsigned int v187 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 16))(v96);
LABEL_107:
  int v97 = v39 + v39 * v33;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v98 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v38, "vertexUV");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v98 + 16))(v98))
    {
      unint64_t v188 = re::internal::GeomTypedAttribute<double>::operator[](v98, 0);
      unsigned int v99 = (*(uint64_t (**)(uint64_t))(*(void *)v98 + 16))(v98);
    }
    else
    {
      unint64_t v188 = 0;
      unsigned int v99 = 0;
    }
  }
  else
  {
    unint64_t v188 = 0;
    unsigned int v99 = -1;
  }
  int v100 = v97 + v39;
  uint64_t v37 = (2 * v97);
  if (*((unsigned char *)a2 + 16)) {
    BOOL v101 = *((unsigned char *)a2 + 17) == 0;
  }
  else {
    BOOL v101 = 1;
  }
  int v102 = !v101;
  unsigned int v190 = v39;
  uint64_t v185 = v39 + v39 * v33;
  if (v101)
  {
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    unsigned int v109 = -1;
    unsigned int v106 = -1;
  }
  else
  {
    unsigned int v194 = v99;
    uint64_t v103 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v38, "vertexTangent");
    uint64_t v104 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v38, "vertexBitangent");
    if ((*(unsigned int (**)(uint64_t))(*(void *)v103 + 16))(v103))
    {
      uint64_t v105 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v103, 0);
      unsigned int v106 = (*(uint64_t (**)(uint64_t))(*(void *)v103 + 16))(v103);
    }
    else
    {
      unsigned int v106 = 0;
      uint64_t v105 = 0;
    }
    unsigned int v109 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 16))(v104);
    if (v109)
    {
      uint64_t v110 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v104, 0);
      unsigned int v109 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 16))(v104);
      uint64_t v107 = v110;
    }
    else
    {
      uint64_t v107 = 0;
    }
    unsigned int v39 = v190;
    uint64_t v108 = v105;
    unsigned int v99 = v194;
  }
  float v38 = 0;
  *(void *)&long long v191 = (2 * v100);
  unint64_t v111 = v39 * v33;
  unint64_t v193 = v109;
  unint64_t v90 = v37 + v39;
  unint64_t v78 = v106;
  unint64_t v83 = v99;
  unint64_t v44 = v187;
  if (LODWORD(v195) <= v90) {
    uint64_t v112 = v90;
  }
  else {
    uint64_t v112 = LODWORD(v195);
  }
  if (LODWORD(v195) <= v111) {
    uint64_t v113 = v111;
  }
  else {
    uint64_t v113 = LODWORD(v195);
  }
  uint64_t v186 = LODWORD(v195);
  if (LODWORD(v195) <= (unint64_t)v37) {
    uint64_t v114 = v37;
  }
  else {
    uint64_t v114 = LODWORD(v195);
  }
  int v115 = (_OWORD *)(v196 + 16 * v111);
  uint64_t v178 = v114;
  uint64_t v179 = v113;
  uint64_t v116 = (re::internal::GeomAttributeManager *)(v113 - v111);
  uint64_t v117 = v107 + 16 * v37;
  uint64_t v118 = v108 + 16 * v37;
  int v119 = (_OWORD *)(v196 + 16 * v37);
  uint64_t v120 = v37 - v114;
  uint64_t v182 = v107;
  uint64_t v184 = v108;
  uint64_t v121 = v107 + 16 * v90;
  uint64_t v122 = v108 + 16 * v90;
  uint64_t v180 = v112;
  unint64_t v123 = v90 - v112;
  int v124 = -1;
  long long v125 = (_OWORD *)(v196 + 16 * v90);
  do
  {
    if (LODWORD(v195) <= (v37 + v124)) {
      goto LABEL_196;
    }
    if (!(float32x4_t *)((char *)v38 + v123)) {
      goto LABEL_197;
    }
    LOWORD(v93) = *a2;
    *long long v125 = *(_OWORD *)(v196 + 16 * (v37 + v124));
    if (v116 == (re::internal::GeomAttributeManager *)v38) {
      goto LABEL_198;
    }
    if (!(float32x4_t *)((char *)v38 + v120)) {
      goto LABEL_199;
    }
    float32x4_t v126 = (char *)v38 + v37;
    int v127 = (char *)v38 + v90;
    _OWORD *v119 = *v115;
    if (*((unsigned char *)a2 + 17))
    {
      if ((unint64_t)v126 >= v44) {
        goto LABEL_204;
      }
      uint64_t v128 = (void *)(v192 + 16 * v37 + 16 * (void)v38);
      *uint64_t v128 = 0x3F80000000000000;
      v128[1] = 0;
      if ((unint64_t)v127 >= v44) {
        goto LABEL_205;
      }
      uint64_t v129 = (void *)(v192 + 16 * v90 + 16 * (void)v38);
      *uint64_t v129 = 0x3F80000000000000;
      v129[1] = 0;
    }
    if (*((unsigned char *)a2 + 16))
    {
      if ((unint64_t)v126 >= v83) {
        goto LABEL_206;
      }
      *(float *)&uint64_t v93 = (float)v38 / (float)v93;
      *(void *)(v188 + 8 * v37 + 8 * (void)v38) = v93;
      if ((unint64_t)v127 >= v83) {
        goto LABEL_207;
      }
      HIDWORD(v93) = 1.0;
      *(void *)(v188 + 8 * v90 + 8 * (void)v38) = v93;
    }
    if (v102)
    {
      if ((unint64_t)v126 >= v78) {
        goto LABEL_214;
      }
      *(_OWORD *)(v118 + 16 * (void)v38) = xmmword_23435FD50;
      if ((unint64_t)v127 >= v78) {
        goto LABEL_215;
      }
      *(_OWORD *)(v122 + 16 * (void)v38) = xmmword_23435FD50;
      BOOL v40 = (unint64_t)v126 >= v193;
      unint64_t v130 = v193;
      if (v40) {
        goto LABEL_216;
      }
      *(_OWORD *)(v117 + 16 * (void)v38) = xmmword_234382760;
      if ((unint64_t)v127 >= v193) {
        goto LABEL_217;
      }
      *(_OWORD *)(v121 + 16 * (void)v38) = xmmword_234382760;
    }
    ++v115;
    float v38 = (float32x4_t *)((char *)v38 + 1);
    ++v119;
    ++v125;
    --v124;
  }
  while (v42 + 1 != v38);
  int v131 = 0;
  float v38 = 0;
  unint64_t v90 = v191;
  unint64_t v132 = v191 + v190;
  if (LODWORD(v195) <= (unint64_t)v185) {
    uint64_t v133 = v185;
  }
  else {
    uint64_t v133 = LODWORD(v195);
  }
  if (LODWORD(v195) <= v132) {
    unint64_t v134 = v191 + v190;
  }
  else {
    unint64_t v134 = LODWORD(v195);
  }
  unint64_t v135 = (_OWORD *)(v196 + 16 * v185);
  if (LODWORD(v195) <= (unint64_t)v191) {
    uint64_t v136 = v191;
  }
  else {
    uint64_t v136 = LODWORD(v195);
  }
  uint64_t v180 = v133;
  uint64_t v137 = (re::internal::GeomAttributeManager *)(v133 - v185);
  unint64_t v138 = v188 + 8 * v191;
  uint64_t v139 = v192 + 16 * v191;
  uint64_t v140 = (_OWORD *)(v196 + 16 * v191);
  uint64_t v185 = v136;
  uint64_t v141 = v191 - v136;
  uint64_t v142 = v182 + 16 * v132;
  uint64_t v143 = v184 + 16 * v132;
  unint64_t v144 = v188 + 8 * v132;
  unint64_t v188 = v134;
  unint64_t v145 = v132 - v134;
  uint64_t v146 = v192 + 16 * v132;
  uint64_t v192 = v191 + v190;
  uint64_t v147 = (_OWORD *)(v196 + 16 * v132);
  do
  {
    if (v137 == (re::internal::GeomAttributeManager *)v38) {
      goto LABEL_200;
    }
    if (!(float32x4_t *)((char *)v38 + v145)) {
      goto LABEL_201;
    }
    LOWORD(v93) = *a2;
    *uint64_t v147 = *v135;
    if (LODWORD(v195) <= v42) {
      goto LABEL_202;
    }
    if (!(float32x4_t *)((char *)v38 + v141)) {
      goto LABEL_203;
    }
    int v148 = (char *)v38 + v90;
    long long v149 = (char *)v38 + v192;
    *uint64_t v140 = *(_OWORD *)(v196 + 16 * (v42 + v131));
    if (*((unsigned char *)a2 + 17))
    {
      if ((unint64_t)v149 >= v44) {
        goto LABEL_208;
      }
      long long v150 = (void *)(v146 + 16 * (void)v38);
      *long long v150 = 0xBF80000000000000;
      v150[1] = 0;
      if ((unint64_t)v148 >= v44) {
        goto LABEL_209;
      }
      long long v151 = (void *)(v139 + 16 * (void)v38);
      *long long v151 = 0xBF80000000000000;
      v151[1] = 0;
    }
    if (*((unsigned char *)a2 + 16))
    {
      if ((unint64_t)v149 >= v83) {
        goto LABEL_210;
      }
      *(float *)&uint64_t v93 = (float)v38 / (float)v93;
      *(void *)(v144 + 8 * (void)v38) = __PAIR64__(1.0, v93);
      if ((unint64_t)v148 >= v83) {
        goto LABEL_211;
      }
      *(void *)(v138 + 8 * (void)v38) = v93;
    }
    if (v102)
    {
      if ((unint64_t)v148 >= v78) {
        goto LABEL_218;
      }
      *(_OWORD *)(v184 + 16 * v191 + 16 * (void)v38) = xmmword_23435FD50;
      if ((unint64_t)v149 >= v78) {
        goto LABEL_219;
      }
      *(_OWORD *)(v143 + 16 * (void)v38) = xmmword_23435FD50;
      unint64_t v90 = v193;
      if ((unint64_t)v148 >= v193) {
        goto LABEL_220;
      }
      *(_OWORD *)(v182 + 16 * v191 + 16 * (void)v38) = xmmword_23435FD80;
      if ((unint64_t)v149 >= v193) {
        goto LABEL_221;
      }
      *(_OWORD *)(v142 + 16 * (void)v38) = xmmword_23435FD80;
      unint64_t v90 = v191;
    }
    ++v135;
    float v38 = (float32x4_t *)((char *)v38 + 1);
    ++v140;
    ++v147;
    --v131;
  }
  while (v42 + 1 != v38);
  int v152 = *a2;
  if (*a2)
  {
    int v153 = 0;
    int v154 = 2 * v152 * a2[1];
    unint64_t v83 = v199;
    uint64_t v155 = v200;
    int v156 = v42 + v37;
    do
    {
      unint64_t v90 = (v154 + v153);
      if (v83 <= v90) {
        goto LABEL_212;
      }
      uint64_t v157 = (_DWORD *)(v155 + 16 * v90);
      _DWORD *v157 = v37 + v153;
      v157[1] = v37 + v153 + 1;
      v157[2] = v156 + v153 + 2;
      v157[3] = v156 + v153++ + 1;
    }
    while (v152 != v153);
    int v158 = 0;
    uint64_t v159 = v200;
    int v160 = v37 + 2 * v42;
    int v161 = v160 + v42;
    int v162 = v154 + v153;
    do
    {
      unint64_t v90 = (v162 + v158);
      if (v83 <= v90) {
        goto LABEL_213;
      }
      long long v163 = (_DWORD *)(v159 + 16 * v90);
      _DWORD *v163 = v160 + v158 + 2;
      v163[1] = v160 + v158 + 3;
      v163[2] = v161 + v158 + 4;
      v163[3] = v161 + v158++ + 3;
    }
    while (v152 != v158);
  }
  long long v164 = (re::internal *)re::GeomMesh::operator=(v167, &v197);
  if (*((unsigned char *)a2 + 18)) {
    re::internal::mergeVertexPositions(v164, v165);
  }
LABEL_24:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v201);
  uint64_t result = v198;
  if (v198)
  {
    if (v200) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v198 + 40))(v198, v200);
    }
  }
  return result;
}

void re::buildTube(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = a2;
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 18))
  {
    int v33 = *((_DWORD *)a2 + 4);
    long long v32 = *(_OWORD *)a2;
    BYTE2(v33) = 0;
    re::buildTube(a1, &v32);
    return;
  }
  unint64_t i = (unint64_t)v40;
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v32, 0);
  re::buildTube((uint64_t)&v32, v2);
  re::DynamicArray<re::GeomMesh>::clear((re::GeomMesh *)a1);
  re::DynamicArray<re::GeomMesh>::resize(a1, 4uLL);
  unsigned int v5 = v2[1];
  if (!v2[1] || (unsigned int v6 = *v2, v6 < 3))
  {
    if (*(void *)(a1 + 16))
    {
      re::GeomMesh::copy((re::GeomMesh *)&v32, *(re::GeomMesh **)(a1 + 32));
      uint64_t v2 = *(unsigned __int16 **)(a1 + 16);
      if ((unint64_t)v2 > 1)
      {
        re::GeomMesh::copy((re::GeomMesh *)&v32, (re::GeomMesh *)(*(void *)(a1 + 32) + 736));
        uint64_t v2 = *(unsigned __int16 **)(a1 + 16);
        if ((unint64_t)v2 > 2)
        {
          re::GeomMesh::copy((re::GeomMesh *)&v32, (re::GeomMesh *)(*(void *)(a1 + 32) + 1472));
          uint64_t v2 = *(unsigned __int16 **)(a1 + 16);
          if ((unint64_t)v2 > 3)
          {
            re::GeomMesh::operator=((re::GeomMesh *)(*(void *)(a1 + 32) + 2208), (re::GeomMesh *)&v32);
            goto LABEL_33;
          }
LABEL_42:
          v29[0] = 0;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v35 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          v47[0] = 136315906;
          *(void *)(i + 52) = "operator[]";
          LOWORD(v47[3]) = 1024;
          *(_DWORD *)(i + 62) = 789;
          HIWORD(v47[4]) = 2048;
          *(void *)(i + 68) = 3;
          LOWORD(v47[7]) = 2048;
          *(void *)(i + 78) = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_41:
        v29[0] = 0;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v47[0] = 136315906;
        *(void *)(i + 52) = "operator[]";
        LOWORD(v47[3]) = 1024;
        *(_DWORD *)(i + 62) = 789;
        HIWORD(v47[4]) = 2048;
        *(void *)(i + 68) = 2;
        LOWORD(v47[7]) = 2048;
        *(void *)(i + 78) = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_42;
      }
LABEL_40:
      v29[0] = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v35 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v47[0] = 136315906;
      *(void *)(i + 52) = "operator[]";
      LOWORD(v47[3]) = 1024;
      *(_DWORD *)(i + 62) = 789;
      HIWORD(v47[4]) = 2048;
      *(void *)(i + 68) = 1;
      LOWORD(v47[7]) = 2048;
      *(void *)(i + 78) = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_41;
    }
LABEL_39:
    v29[0] = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v47[0] = 136315906;
    *(void *)(i + 52) = "operator[]";
    LOWORD(v47[3]) = 1024;
    *(_DWORD *)(i + 62) = 789;
    HIWORD(v47[4]) = 2048;
    *(void *)(i + 68) = 0;
    LOWORD(v47[7]) = 2048;
    *(void *)(i + 78) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  memset(v29, 0, sizeof(v29));
  int v30 = 0;
  uint64_t v25 = 0;
  memset(v26, 0, sizeof(v26));
  int v27 = 0;
  v22[1] = 0;
  unint64_t v23 = 0;
  v22[0] = 0;
  unint64_t i = v6 * (unint64_t)v5;
  int v24 = 0;
  re::DynamicArray<float>::resize((uint64_t)v22, i);
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  char v9 = 1;
  do
  {
    uint64_t v10 = 0;
    char v11 = v9;
    unint64_t v12 = v7;
    unint64_t v13 = v23;
    uint64_t v14 = v25;
    do
    {
      if (v13 == v10)
      {
        *(void *)BOOL v40 = 0;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v47[0] = 136315906;
        *(void *)&v47[1] = "operator[]";
        LOWORD(v47[3]) = 1024;
        *(_DWORD *)((char *)&v47[3] + 2) = 789;
        HIWORD(v47[4]) = 2048;
        *(void *)&v47[5] = v13;
        LOWORD(v47[7]) = 2048;
        *(void *)((char *)&v47[7] + 2) = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        *(void *)BOOL v40 = 0;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v35 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v47[0] = 136315906;
        *(void *)&v47[1] = "operator[]";
        LOWORD(v47[3]) = 1024;
        *(_DWORD *)((char *)&v47[3] + 2) = 789;
        HIWORD(v47[4]) = 2048;
        *(void *)&v47[5] = v12;
        LOWORD(v47[7]) = 2048;
        *(void *)((char *)&v47[7] + 2) = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        uint64_t v34 = 0;
        long long v48 = 0u;
        long long v49 = 0u;
        memset(v47, 0, sizeof(v47));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)BOOL v40 = 136315906;
        *(void *)&v40[4] = "operator[]";
        __int16 v41 = 1024;
        int v42 = 789;
        __int16 v43 = 2048;
        unint64_t v44 = v8;
        __int16 v45 = 2048;
        unint64_t v46 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_38:
        uint64_t v34 = 0;
        uint64_t v2 = (unsigned __int16 *)v40;
        long long v48 = 0u;
        long long v49 = 0u;
        memset(v47, 0, sizeof(v47));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)BOOL v40 = 136315906;
        *(void *)&v40[4] = "operator[]";
        __int16 v41 = 1024;
        int v42 = 789;
        __int16 v43 = 2048;
        unint64_t v44 = i;
        __int16 v45 = 2048;
        unint64_t v46 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_39;
      }
      *(_DWORD *)(v14 + 4 * v10) = v12 + v10;
      ++v10;
    }
    while (i != v10);
    uint64_t v20 = v14;
    unint64_t v21 = v13;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    re::makeMeshFromFaces((unint64_t)&v32, &v20, &v18, (uint64_t)v29, (uint64_t)v26, (unint64_t)&v35);
    unint64_t v13 = *(void *)(a1 + 16);
    if (v13 <= v8) {
      goto LABEL_37;
    }
    unint64_t v13 = v12 + v10;
    re::GeomMesh::operator=((re::GeomMesh *)(*(void *)(a1 + 32) + 736 * v8), (re::GeomMesh *)&v35);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v35);
    char v9 = 0;
    unint64_t v7 = (v12 + v10);
    unint64_t v8 = 1;
  }
  while ((v11 & 1) != 0);
  unint64_t v15 = *v2;
  re::DynamicArray<float>::resize((uint64_t)v22, v15);
  unint64_t v8 = (v12 + v10);
  for (unint64_t i = 2; i != 4; ++i)
  {
    unint64_t v12 = v23;
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v25;
      do
      {
        if (v12 == v16) {
          goto LABEL_36;
        }
        *(_DWORD *)(v17 + 4 * vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 16) = v8 + v16;
        ++v16;
      }
      while (v15 != v16);
      unint64_t v8 = (v8 + v16);
    }
    uint64_t v20 = v25;
    unint64_t v21 = v12;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    re::makeMeshFromFaces((unint64_t)&v32, &v20, &v18, (uint64_t)v29, (uint64_t)v26, (unint64_t)&v35);
    unint64_t v13 = *(void *)(a1 + 16);
    if (v13 <= i) {
      goto LABEL_38;
    }
    re::GeomMesh::operator=((re::GeomMesh *)(*(void *)(a1 + 32) + 736 * i), (re::GeomMesh *)&v35);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v35);
  }
  if (v22[0] && v25) {
    (*(void (**)(void))(*(void *)v22[0] + 40))();
  }
  if (v26[0] && v28) {
    (*(void (**)(void))(*(void *)v26[0] + 40))();
  }
  if (v29[0])
  {
    if (v31) {
      (*(void (**)(void))(*(void *)v29[0] + 40))();
    }
  }
LABEL_33:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v32);
}

void re::internal::fillFaces(uint64_t a1, int a2, unint64_t a3)
{
  re::DynamicArray<float>::resize(a1, a3);
  if (a3)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = 1;
    do
    {
      if (v7 <= v6)
      {
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v8 + 4 * v6) = a2 + v9 - 1;
      unint64_t v6 = v9++;
    }
    while (v6 < a3);
  }
}

uint64_t re::internal::makeSubmesh(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  uint64_t v9 = 0;
  v6[1] = a3;
  memset(v7, 0, sizeof(v7));
  int v8 = 0;
  v5[1] = 0;
  v6[0] = a4;
  v5[0] = 0;
  re::makeMeshFromFaces(a2, v6, v5, (uint64_t)v10, (uint64_t)v7, a1);
  if (v7[0] && v9) {
    (*(void (**)(void))(*(void *)v7[0] + 40))();
  }
  uint64_t result = v10[0];
  if (v10[0])
  {
    if (v12) {
      return (*(uint64_t (**)(void))(*(void *)v10[0] + 40))(v10[0]);
    }
  }
  return result;
}

void re::internal::capBoundary(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *a1;
  uint64_t v11 = *((void *)a1 + 3);
  unsigned int v12 = v10 + v9 + 1;
  *a1 = v12;
  unint64_t v13 = (re::internal::GeomAttributeManager *)(a1 + 12);
  a1[40] = v12;
  uint64_t v14 = *((void *)a1 + 23);
  if (v14)
  {
    unint64_t v15 = (uint64_t *)*((void *)a1 + 25);
    uint64_t v16 = 8 * v14;
    do
    {
      uint64_t v17 = *v15++;
      (*(void (**)(uint64_t, void))(*(void *)v17 + 72))(v17, a1[40]);
      v16 -= 8;
    }
    while (v16);
  }
  re::DynamicArray<re::GeomCell4>::resize((void *)a1 + 1, (v11 + v9));
  a1[68] = v11 + v9;
  uint64_t v18 = *((void *)a1 + 37);
  if (v18)
  {
    uint64_t v19 = (uint64_t *)*((void *)a1 + 39);
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = *v19++;
      (*(void (**)(uint64_t, void))(*(void *)v21 + 72))(v21, a1[68]);
      v20 -= 8;
    }
    while (v20);
  }
  uint64_t v22 = re::internal::GeomAttributeManager::attributeByName(v13, "vertexPosition");
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v22 + 16))(v22)
    || (uint64_t v79 = a3,
        uint64_t v23 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v22, 0),
        unsigned int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22),
        v24 <= v10))
  {
LABEL_84:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  float32x4_t v25 = 0uLL;
  *(_OWORD *)(v23 + 16 * v10) = 0u;
  if (v9)
  {
    unint64_t v26 = 0;
    while (1)
    {
      unint64_t v27 = (v11 + v26);
      if (*((void *)a1 + 3) <= v27) {
        break;
      }
      unsigned int v28 = v10 + v26 + 1;
      if (v9 - 1 == v26) {
        int v29 = v10;
      }
      else {
        int v29 = v10 + v26 + 1;
      }
      int v30 = (_DWORD *)(*((void *)a1 + 5) + 16 * v27);
      *int v30 = v10;
      v30[1] = v28;
      void v30[2] = v29 + 1;
      v30[3] = -1;
      if (*(void *)(a2 + 16) <= v26) {
        goto LABEL_72;
      }
      uint64_t v31 = *(unsigned int *)(*(void *)(a2 + 32) + 4 * v26);
      if (v24 <= v31) {
        goto LABEL_73;
      }
      if (v24 + ~v10 == v26) {
        goto LABEL_74;
      }
      *(_OWORD *)(v23 + 16 * v28) = *(_OWORD *)(v23 + 16 * v31);
      float32x4_t v25 = vaddq_f32(*(float32x4_t *)(v23 + 16 * v10), *(float32x4_t *)(v23 + 16 * v28));
      *(float32x4_t *)(v23 + 16 * v10) = v25;
      if (v9 == ++v26) {
        goto LABEL_19;
      }
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_72:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_73:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_75:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
LABEL_19:
  float32x4_t v32 = vmulq_n_f32(v25, 1.0 / (float)v9);
  *(float32x4_t *)(v23 + 16 * v10) = v32;
  if (a4)
  {
    if (v9)
    {
      uint64_t v33 = 0;
      unint64_t v34 = *(void *)(a2 + 16);
      uint64_t v35 = *(void *)(a2 + 32);
      float32x4_t v36 = 0uLL;
      while (v34 != v33)
      {
        if (v9 - 1 == v33) {
          unint64_t v37 = 0;
        }
        else {
          unint64_t v37 = v33 + 1;
        }
        if (v34 <= v37) {
          goto LABEL_78;
        }
        uint64_t v38 = *(unsigned int *)(v35 + 4 * v33);
        if (v24 <= v38) {
          goto LABEL_79;
        }
        uint64_t v39 = *(unsigned int *)(v35 + 4 * v37);
        if (v24 <= v39) {
          goto LABEL_80;
        }
        ++v33;
        float32x4_t v40 = vsubq_f32(*(float32x4_t *)(v23 + 16 * v38), v32);
        float32x4_t v41 = vsubq_f32(*(float32x4_t *)(v23 + 16 * v39), v32);
        int8x16_t v42 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL), vnegq_f32(v40)), v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL));
        float32x4_t v36 = vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), v42, 0xCuLL));
        if (v9 == v33) {
          goto LABEL_32;
        }
      }
      goto LABEL_77;
    }
    float32x4_t v36 = 0uLL;
LABEL_32:
    int32x4_t v43 = (int32x4_t)vmulq_f32(v36, v36);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
    float32x2_t v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    float32x2_t v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
    LODWORD(v77) = vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).u32[0];
    float32x4_t v78 = v36;
    if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 16))(a4))
    {
      uint64_t v46 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a4, 0);
      unsigned int v47 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    }
    else
    {
      unsigned int v47 = 0;
      uint64_t v46 = 0;
    }
    float32x4_t v48 = vmulq_n_f32(v78, v77);
    LODWORD(v49) = v47 - v10;
    if (v47 >= v10) {
      uint64_t v49 = v49;
    }
    else {
      uint64_t v49 = 0;
    }
    uint64_t v50 = v9 + 1;
    uint64_t v51 = v10;
    do
    {
      if (!v49) {
        goto LABEL_75;
      }
      *(float32x4_t *)(v46 + 16 * v51) = v48;
      --v49;
      ++v51;
      --v50;
    }
    while (v50);
    if (a5 && a6)
    {
      float32x4_t v81 = v48;
      if ((*(unsigned int (**)(uint64_t))(*(void *)a5 + 16))(a5))
      {
        uint64_t v52 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a5, 0);
        unsigned int v53 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
      }
      else
      {
        unsigned int v53 = 0;
        uint64_t v52 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a6 + 16))(a6))
      {
        uint64_t v54 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a6, 0);
        unsigned int v55 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
      }
      else
      {
        unsigned int v55 = 0;
        uint64_t v54 = 0;
      }
      if (v10 < (int)v10 + (int)v9 + 1)
      {
        float32x4_t v56 = vmulq_f32(v81, (float32x4_t)xmmword_23435FD60);
        float32x4_t v57 = vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1));
        float32x4_t v58 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), v57);
        v57.i64[0] = 0;
        int8x16_t v59 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v58, v57), 0), (int8x16_t)xmmword_234382760, (int8x16_t)xmmword_23435FD80);
        if (v53 <= v10) {
          uint64_t v60 = v10;
        }
        else {
          uint64_t v60 = v53;
        }
        if (v55 <= v10) {
          uint64_t v61 = v10;
        }
        else {
          uint64_t v61 = v55;
        }
        float32x4_t v62 = (int8x16_t *)(v54 + 16 * v10);
        int v63 = v9 + 1;
        float32x4_t v64 = (_OWORD *)(v52 + 16 * v10);
        uint64_t v65 = v61 - v10;
        uint64_t v66 = v60 - v10;
        while (v66)
        {
          *float32x4_t v64 = xmmword_23435FD50;
          if (!v65) {
            goto LABEL_82;
          }
          *v62++ = v59;
          ++v64;
          --v65;
          --v66;
          if (!--v63) {
            goto LABEL_60;
          }
        }
LABEL_81:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_82:
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_83;
      }
    }
  }
LABEL_60:
  if (v79)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v79 + 16))(v79))
    {
      uint64_t v67 = re::internal::GeomTypedAttribute<double>::operator[](v79, 0);
      unsigned int v68 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 16))(v79);
      if (!v9) {
        goto LABEL_68;
      }
    }
    else
    {
      unsigned int v68 = 0;
      uint64_t v67 = 0;
      if (!v9)
      {
LABEL_68:
        if (v68 <= v10)
        {
LABEL_83:
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_84;
        }
        *(void *)(v67 + 8 * v10) = 0x3F0000003F000000;
        return;
      }
    }
    uint64_t v69 = 0;
    unsigned int v70 = v10 + 1;
    __asm { FMOV            V9.2S, #1.0 }
    while (v68 > v70 + v69)
    {
      __float2 v76 = __sincosf_stret((float)(6.2832 / (float)v9) * (float)v69);
      *(float32x2_t *)(v67 + 8 * v70 + 8 * v69++) = vmul_f32(vadd_f32((float32x2_t)__PAIR64__(LODWORD(v76.__sinval), LODWORD(v76.__cosval)), _D9), (float32x2_t)0x3F0000003F000000);
      if ((int)v69 + 1 > v9) {
        goto LABEL_68;
      }
    }
LABEL_76:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_77:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_78:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_81;
  }
}

uint64_t re::buildCone(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v102);
  uint64_t v7 = *a2;
  if (v7 < 3 || (int v8 = a2[1]) == 0)
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 13)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 14))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexNormal", 1, 7);
      if (*((unsigned char *)a2 + 13))
      {
        if (*((unsigned char *)a2 + 14))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v102);
    goto LABEL_14;
  }
  uint64_t v79 = a1;
  int v81 = v7 + 1;
  uint64_t v9 = (uint64_t)v106;
  unsigned int v102 = v7 + (v7 + 1) * v8;
  unsigned int v107 = v102;
  if (v108)
  {
    uint64_t v10 = v109;
    uint64_t v11 = 8 * v108;
    do
    {
      uint64_t v12 = *v10++;
      (*(void (**)(uint64_t, void))(*(void *)v12 + 72))(v12, v107);
      v11 -= 8;
    }
    while (v11);
    int v8 = a2[1];
    int v13 = *a2;
  }
  else
  {
    int v13 = v7;
  }
  int v15 = v13 * v8;
  re::DynamicArray<re::GeomCell4>::resize(&v103, (v13 * v8));
  unsigned int v110 = v15;
  if (v111)
  {
    uint64_t v16 = v112;
    uint64_t v17 = 8 * v111;
    do
    {
      uint64_t v18 = *v16++;
      (*(void (**)(uint64_t, void))(*(void *)v18 + 72))(v18, v110);
      v17 -= 8;
    }
    while (v17);
  }
  uint64_t v19 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexPosition", 1, 7);
  uint64_t v20 = (uint64_t)v19;
  if (*((unsigned char *)a2 + 13)) {
    BOOL v21 = *((unsigned char *)a2 + 14) == 0;
  }
  else {
    BOOL v21 = 1;
  }
  int v22 = !v21;
  int v99 = v22;
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v19 + 16))(v19))
  {
    uint64_t v85 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v20, 0);
    unsigned int v86 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
  }
  else
  {
    unsigned int v86 = 0;
    uint64_t v85 = 0;
  }
  if (*((unsigned char *)a2 + 14))
  {
    unsigned int v24 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexNormal", 1, 7);
    unsigned int v25 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v24 + 16))(v24);
    if (v25)
    {
      uint64_t v91 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v24, 0);
      unsigned int v25 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v24 + 16))(v24);
    }
    else
    {
      uint64_t v91 = 0;
    }
  }
  else
  {
    uint64_t v91 = 0;
    unsigned int v25 = -1;
  }
  unsigned int v84 = v25;
  if (*((unsigned char *)a2 + 13))
  {
    unint64_t v26 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexUV", 1, 6);
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v26 + 16))(v26))
    {
      uint64_t v90 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v26, 0);
      unsigned int v27 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v26 + 16))(v26);
    }
    else
    {
      uint64_t v90 = 0;
      unsigned int v27 = 0;
    }
    unsigned int v25 = v84;
  }
  else
  {
    uint64_t v90 = 0;
    unsigned int v27 = -1;
  }
  if (v99)
  {
    unsigned int v28 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexTangent", 1, 7);
    int v29 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexBitangent", 1, 7);
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v28 + 16))(v28))
    {
      uint64_t v88 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v28, 0);
      unsigned int v30 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v28 + 16))(v28);
    }
    else
    {
      unsigned int v30 = 0;
      uint64_t v88 = 0;
    }
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(void *)v29 + 16))(v29))
    {
      uint64_t v87 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v29, 0);
      unsigned int v83 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v29 + 16))(v29);
    }
    else
    {
      unsigned int v83 = 0;
      uint64_t v87 = 0;
    }
    unsigned int v25 = v84;
  }
  else
  {
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    unsigned int v83 = -1;
    unsigned int v30 = -1;
  }
  unsigned int v31 = a2[1];
  unint64_t v82 = v7;
  unsigned int v77 = v27;
  unsigned int v78 = v30;
  unsigned int v80 = v31;
  if (a2[1])
  {
    unsigned int v32 = 0;
    unsigned int v33 = 0;
    uint64_t v92 = v83;
    unint64_t v93 = v30;
    unint64_t v34 = v7 + 1;
    unint64_t v94 = v27;
    unint64_t v95 = v25;
    do
    {
      uint64_t v35 = 0;
      unsigned int v89 = v32;
      float v36 = (float)v32 / (float)(unsigned __int16)v31;
      *(float *)v23.i32 = v36 * 0.5;
      *(float *)&v23.i32[1] = v36;
      int8x16_t v97 = v23;
      float v98 = v36;
      unint64_t v37 = v33;
      unint64_t v38 = v87 + 16 * v33;
      uint64_t v2 = v88 + 16 * v33;
      uint64_t v9 = v90 + 8 * v33;
      *(float *)v23.i32 = 1.0 - v36;
      float32x2_t v96 = (float32x2_t)COERCE_UNSIGNED_INT(1.0 - v36);
      if (v86 >= v33) {
        uint64_t v3 = v86 - v33;
      }
      else {
        uint64_t v3 = 0;
      }
      uint64_t v7 = v91 + 16 * v33;
      uint64_t v4 = v85 + 16 * v33;
      do
      {
        v23.i16[0] = *a2;
        float v39 = *((float *)a2 + 2);
        float v100 = (float)v35 / (float)v23.u32[0];
        float v101 = *((float *)a2 + 1);
        __float2 v41 = __sincosf_stret(v100 * 6.2832);
        if (v3 == v35)
        {
          *(void *)uint64_t v117 = 0;
          long long v127 = 0u;
          long long v128 = 0u;
          long long v125 = 0u;
          long long v126 = 0u;
          long long v124 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v114 = 136315906;
          *(void *)&v114[4] = "operator[]";
          *(_WORD *)&v114[12] = 1024;
          *(_DWORD *)&v114[14] = 609;
          *(_WORD *)&v114[18] = 2048;
          *(void *)&v114[20] = (v37 + v35);
          __int16 v115 = 2048;
          *(void *)uint64_t v116 = v86;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_114;
        }
        unint64_t v42 = v37 + v35;
        v43.i32[1] = 0;
        v43.i32[3] = 0;
        v43.f32[0] = -v41.__sinval;
        v43.f32[2] = -v41.__cosval;
        v40.f32[0] = (float)(0.0 - v39) * v41.__cosval;
        v40.f32[1] = v101;
        v40.f32[2] = -(float)(v41.__sinval * (float)(0.0 - v39));
        int32x4_t v44 = (int32x4_t)vmulq_f32(v43, v43);
        v44.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2), vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1))).u32[0];
        float32x2_t v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
        float32x2_t v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
        v44.i32[0] = vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).u32[0];
        int32x4_t v47 = (int32x4_t)vmulq_f32(v40, v40);
        v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
        float32x4_t v48 = vmulq_n_f32(v43, *(float *)v44.i32);
        *(float32x2_t *)v43.f32 = vrsqrte_f32((float32x2_t)v47.u32[0]);
        *(float32x2_t *)v43.f32 = vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)));
        float32x4_t v49 = vmulq_n_f32(v40, vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32))).f32[0]);
        float v50 = v39 + (float)(v98 * (float)(0.0 - v39));
        *(float *)v23.i32 = v41.__cosval * v50;
        v43.f32[0] = (float)(v98 * v101) + v101 * -0.5;
        v23.i32[1] = v43.i32[0];
        *(float *)&v23.i32[2] = -(float)(v50 * v41.__sinval);
        *(int8x16_t *)(v4 + 16 * v35) = v23;
        if (*((unsigned char *)a2 + 14))
        {
          if (v42 >= v95) {
            goto LABEL_115;
          }
          int8x16_t v23 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v48)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
          *(int8x16_t *)(v7 + 16 * v35) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL);
        }
        if (*((unsigned char *)a2 + 13))
        {
          if (v42 >= v94) {
            goto LABEL_116;
          }
          int8x16_t v23 = v97;
          *(float32x2_t *)(v9 + 8 * v35) = vadd_f32(*(float32x2_t *)v97.i8, vmul_n_f32(v96, v100));
        }
        if (v99)
        {
          if (v42 >= v93) {
            goto LABEL_117;
          }
          *(float32x4_t *)(v2 + 16 * v35) = v48;
          if (v42 >= v83) {
            goto LABEL_118;
          }
          *(float32x4_t *)(v38 + 16 * v35) = v49;
        }
        ++v35;
      }
      while (v34 != v35);
      unsigned int v33 = v37 + v35;
      unsigned int v32 = v89 + 1;
      unsigned int v31 = a2[1];
    }
    while (v89 + 1 < v31);
  }
  unsigned int v51 = v81 * v80;
  int v52 = *a2;
  if (*a2)
  {
    LODWORD(v53) = 0;
    *((void *)&v53 + 1) = 0;
    unint64_t v38 = v83;
    *((float *)&v53 + 1) = *((float *)a2 + 1) * 0.5;
    unint64_t v54 = v51 + v52;
    unint64_t v34 = v78;
    uint64_t v7 = v84;
    uint64_t v9 = v77;
    uint64_t v2 = v86;
    if (v86 <= (unint64_t)v51) {
      uint64_t v3 = v81 * v80;
    }
    else {
      uint64_t v3 = v86;
    }
    unsigned int v55 = (_OWORD *)(v87 + 16 * v51);
    float32x4_t v56 = (_OWORD *)(v88 + 16 * v51);
    unint64_t v37 = v81 * v80;
    float32x4_t v58 = (_OWORD *)(v91 + 16 * v51);
    do
    {
      if (v3 == v37) {
        goto LABEL_119;
      }
      *(_OWORD *)(v85 + 16 * v37) = v53;
      if (*((unsigned char *)a2 + 13))
      {
        if (v37 >= v77) {
          goto LABEL_122;
        }
        *(void *)(v90 + 8 * v37) = 0x3F8000003F000000;
      }
      int v57 = -(int)v82 - 1;
      unsigned int v59 = v57 + v37;
      if (*((unsigned char *)a2 + 14))
      {
        if (v84 <= v59) {
          goto LABEL_123;
        }
        if (v37 >= v84) {
          goto LABEL_124;
        }
        *float32x4_t v58 = *(_OWORD *)(v91 + 16 * v59);
      }
      if (v99)
      {
        if (v78 <= v59) {
          goto LABEL_125;
        }
        if (v37 >= v78) {
          goto LABEL_126;
        }
        uint64_t v4 = (v57 + v37);
        _OWORD *v56 = *(_OWORD *)(v88 + 16 * v4);
        if (v83 <= v59) {
          goto LABEL_127;
        }
        if (v37 >= v83) {
          goto LABEL_128;
        }
        _OWORD *v55 = *(_OWORD *)(v87 + 16 * v4);
      }
      ++v37;
      ++v55;
      ++v56;
      ++v58;
    }
    while (v37 < v54);
    unsigned int v31 = a2[1];
    int v52 = *a2;
  }
  unsigned int v60 = v31 - 1;
  unint64_t v37 = v82;
  if (v31 == 1)
  {
    unsigned int v65 = 0;
    if (!v52) {
      goto LABEL_104;
    }
    goto LABEL_101;
  }
  unsigned int v61 = 0;
  int v62 = 0;
  int v63 = 0;
  unint64_t v34 = v104;
  int v64 = v82;
  do
  {
    unsigned int v65 = v61;
    if (v52)
    {
      int v66 = 0;
      uint64_t v67 = v105;
      unsigned int v65 = v61 + v52;
      while (1)
      {
        unint64_t v38 = v61 + v66;
        if (v34 <= v38) {
          break;
        }
        unsigned int v68 = (_DWORD *)(v67 + 16 * v38);
        *unsigned int v68 = v62 + v66;
        v68[1] = v62 + v66 + 1;
        v68[2] = v64 + v66 + 2;
        v68[3] = v64 + v66++ + 1;
        if (v52 == v66) {
          goto LABEL_97;
        }
      }
LABEL_114:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      uint64_t v35 = &_os_log_internal;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 789;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v38;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_115:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37 + v35;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v95;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37 + v35;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v94;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_117:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37 + v35;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v93;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_118:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37 + v35;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v92;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_119:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v3;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_120:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 789;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v38;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_121:
      uint64_t v113 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v117 = 136315906;
      *(void *)&v117[4] = "operator[]";
      __int16 v118 = 1024;
      int v119 = 789;
      __int16 v120 = 2048;
      unint64_t v121 = v34;
      __int16 v122 = 2048;
      unint64_t v123 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_122:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_123:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_DWORD *)uint64_t v114 = 136315906;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = (~v82 + v37);
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_124:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_125:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_DWORD *)uint64_t v114 = 136315906;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = (~v82 + v37);
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_126:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_127:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v4;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v38;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_128:
      *(void *)uint64_t v117 = 0;
      long long v127 = 0u;
      long long v128 = 0u;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v124 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v114 = 136315906;
      *(void *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(void *)&v114[20] = v37;
      __int16 v115 = 2048;
      *(void *)uint64_t v116 = v38;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_97:
    ++v63;
    v64 += v81;
    v62 += v81;
    v61 += v52;
  }
  while (v63 != v60);
  if (v52)
  {
LABEL_101:
    unint64_t v34 = v104;
    uint64_t v69 = v105;
    int v70 = v51 - v82;
    do
    {
      unint64_t v38 = v65;
      if (v34 <= v65) {
        goto LABEL_120;
      }
      int32x4_t v71 = (_DWORD *)(v69 + 16 * v65);
      *int32x4_t v71 = v70 - 1;
      v71[1] = v70;
      v71[2] = v51;
      v71[3] = -1;
      ++v65;
      ++v51;
      ++v70;
    }
    while (--v52);
  }
LABEL_104:
  if (*((unsigned char *)a2 + 12))
  {
    uint64_t v72 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexUV");
    unint64_t v38 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexNormal");
    uint64_t v7 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexTangent");
    uint64_t v9 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexBitangent");
    *(void *)&v116[2] = 0;
    memset(v114, 0, sizeof(v114));
    re::DynamicArray<float>::resize((uint64_t)v114, v82);
    uint64_t v73 = 0;
    unint64_t v34 = *(void *)&v114[16];
    uint64_t v74 = *(void *)&v116[2];
    do
    {
      if (v34 == v73) {
        goto LABEL_121;
      }
      *(_DWORD *)(v74 + 4 * v73++) = v37;
      unint64_t v37 = (v37 - 1);
    }
    while (v82 != v73);
    re::internal::capBoundary(&v102, (uint64_t)v114, v72, v38, v7, v9);
    if (*(void *)v114 && *(void *)&v116[2]) {
      (*(void (**)(void))(**(void **)v114 + 40))();
    }
  }
  int8x16_t v75 = (re::internal *)re::GeomMesh::operator=(v79, &v102);
  if (*((unsigned char *)a2 + 15)) {
    re::internal::mergeVertexPositions(v75, v76);
  }
LABEL_14:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v106);
  uint64_t result = v103;
  if (v103)
  {
    if (v105) {
      return (*(uint64_t (**)(void))(*(void *)v103 + 40))();
    }
  }
  return result;
}

void re::buildCone(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = a2;
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 15))
  {
    v12[0] = *(_OWORD *)a2;
    HIBYTE(v12[0]) = 0;
    re::buildCone(a1, v12);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)v12, 0);
  re::buildCone((uint64_t)v12, v2);
  re::DynamicArray<re::GeomMesh>::clear((re::GeomMesh *)a1);
  if (*((unsigned char *)v2 + 12)) {
    unint64_t v4 = 2;
  }
  else {
    unint64_t v4 = 1;
  }
  re::DynamicArray<re::GeomMesh>::resize(a1, v4);
  unint64_t v5 = *v2;
  if (v5 >= 3)
  {
    unsigned int v6 = v2[1];
    if (v2[1])
    {
      uint64_t v11 = 0;
      v8[1] = 0;
      uint64_t v9 = 0;
      v8[0] = 0;
      int v10 = 0;
      re::internal::fillFaces((uint64_t)v8, 0, v6 * (unint64_t)v5);
      re::internal::makeSubmesh((unint64_t)&v14, (unint64_t)v12, v9, v11);
      if (*(void *)(a1 + 16))
      {
        re::GeomMesh::operator=(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)&v14);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v14);
        if (!*((unsigned char *)v2 + 12)) {
          goto LABEL_13;
        }
        if (*(void *)(a1 + 16))
        {
          re::internal::fillFaces((uint64_t)v8, *(_DWORD *)(*(void *)(a1 + 32) + 40), *v2);
          re::internal::makeSubmesh((unint64_t)&v14, (unint64_t)v12, v9, v11);
          uint64_t v2 = *(unsigned __int16 **)(a1 + 16);
          if ((unint64_t)v2 > 1)
          {
            re::GeomMesh::operator=((re::GeomMesh *)(*(void *)(a1 + 32) + 736), (re::GeomMesh *)&v14);
            re::GeomMesh::~GeomMesh((re::GeomMesh *)&v14);
LABEL_13:
            if (v8[0])
            {
              if (v11) {
                (*(void (**)(void))(*(void *)v8[0] + 40))();
              }
            }
            goto LABEL_21;
          }
LABEL_28:
          uint64_t v13 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
          memset(v26, 0, sizeof(v26));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v19 = 136315906;
          *(void *)&v19[4] = "operator[]";
          __int16 v20 = 1024;
          int v21 = 789;
          __int16 v22 = 2048;
          uint64_t v23 = 1;
          __int16 v24 = 2048;
          unsigned int v25 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_27:
        *(void *)uint64_t v19 = 0;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v14 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v26[0] = 136315906;
        *(void *)&v26[1] = "operator[]";
        LOWORD(v26[3]) = 1024;
        *(_DWORD *)((char *)&v26[3] + 2) = 789;
        HIWORD(v26[4]) = 2048;
        *(void *)&v26[5] = 0;
        LOWORD(v26[7]) = 2048;
        *(void *)((char *)&v26[7] + 2) = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_28;
      }
LABEL_26:
      uint64_t v13 = 0;
      long long v27 = 0u;
      long long v28 = 0u;
      memset(v26, 0, sizeof(v26));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v19 = 136315906;
      *(void *)&v19[4] = "operator[]";
      __int16 v20 = 1024;
      int v21 = 789;
      __int16 v22 = 2048;
      uint64_t v23 = 0;
      __int16 v24 = 2048;
      unsigned int v25 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_27;
    }
  }
  if (!*(void *)(a1 + 16))
  {
    v8[0] = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v26[0] = 136315906;
    *(void *)&v26[1] = "operator[]";
    LOWORD(v26[3]) = 1024;
    *(_DWORD *)((char *)&v26[3] + 2) = 789;
    HIWORD(v26[4]) = 2048;
    *(void *)&v26[5] = 0;
    LOWORD(v26[7]) = 2048;
    *(void *)((char *)&v26[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  re::GeomMesh::operator=(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)v12);
  if (*((unsigned char *)v2 + 12))
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v7)
    {
      if (v7 != 1)
      {
        re::GeomMesh::copy(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)(*(void *)(a1 + 32) + 736));
        goto LABEL_21;
      }
LABEL_25:
      v8[0] = 0;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v14 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v26[0] = 136315906;
      *(void *)&v26[1] = "operator[]";
      LOWORD(v26[3]) = 1024;
      *(_DWORD *)((char *)&v26[3] + 2) = 789;
      HIWORD(v26[4]) = 2048;
      *(void *)&v26[5] = 1;
      LOWORD(v26[7]) = 2048;
      *(void *)((char *)&v26[7] + 2) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    v8[0] = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    v26[0] = 136315906;
    *(void *)&v26[1] = "operator[]";
    LOWORD(v26[3]) = 1024;
    *(_DWORD *)((char *)&v26[3] + 2) = 789;
    HIWORD(v26[4]) = 2048;
    *(void *)&v26[5] = 0;
    LOWORD(v26[7]) = 2048;
    *(void *)((char *)&v26[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
LABEL_21:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v12);
}

uint64_t (***re::buildCylinder(uint64_t a1, unsigned __int16 *a2))(void)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (*a2 >= 3u && a2[1])
  {
    _OWORD v44[3] = re::globalAllocators((re *)a1)[2];
    v44[0] = &unk_26E70DA88;
    v44[1] = a2;
    v44[4] = v44;
    int v4 = *a2;
    int v5 = a2[1];
    unsigned __int8 v32 = 0;
    __int16 v36 = 0;
    int v37 = v4;
    int v38 = v5;
    char v33 = *((unsigned char *)a2 + 18);
    int v6 = *((unsigned __int8 *)a2 + 19);
    char v34 = *((unsigned char *)a2 + 19);
    if (v33) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    char v8 = !v7;
    char v35 = v8;
    re::buildParametricSurface((re::GeomMesh *)a1, (uint64_t)v44, &v32);
    if (*((unsigned __int8 *)a2 + 16) | *((unsigned __int8 *)a2 + 17))
    {
      unint64_t v10 = *a2;
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v39, (const re::internal::GeomBaseMesh *)(a1 + 16));
      if (*((unsigned char *)a2 + 17))
      {
        uint64_t v11 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexUV");
        uint64_t v12 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexNormal");
        uint64_t v13 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexTangent");
        uint64_t v14 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexBitangent");
        unsigned int v31 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v27 = 0;
        int v30 = 0;
        re::DynamicArray<float>::resize((uint64_t)&v27, v10);
        if (v10)
        {
          uint64_t v15 = 0;
          uint64_t v16 = v29;
          long long v17 = v31;
          while (v16 + v15)
          {
            *v17++ = v10 + v15--;
            if (!(v10 + v15)) {
              goto LABEL_15;
            }
          }
          uint64_t v43 = 0;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v53 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v45 = 136315906;
          float32x2_t v46 = "operator[]";
          __int16 v47 = 1024;
          int v48 = 789;
          __int16 v49 = 2048;
          uint64_t v50 = v16;
          __int16 v51 = 2048;
          uint64_t v52 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_43:
          uint64_t v43 = 0;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v53 = 0u;
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          int v45 = 136315906;
          float32x2_t v46 = "operator[]";
          __int16 v47 = 1024;
          int v48 = 789;
          __int16 v49 = 2048;
          uint64_t v50 = v16;
          __int16 v51 = 2048;
          uint64_t v52 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_15:
        re::internal::capBoundary(&v39, (uint64_t)&v27, v11, v12, v13, v14);
        if (v27 && v31) {
          (*(void (**)(void))(*(void *)v27 + 40))();
        }
      }
      if (*((unsigned char *)a2 + 16))
      {
        uint64_t v18 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexUV");
        uint64_t v19 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexNormal");
        uint64_t v20 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexTangent");
        uint64_t v21 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexBitangent");
        int v22 = a2[1];
        unsigned int v31 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v27 = 0;
        int v30 = 0;
        re::DynamicArray<float>::resize((uint64_t)&v27, v10);
        if (v10)
        {
          uint64_t v23 = 0;
          int v24 = (v10 + 1) * v22;
          uint64_t v16 = v29;
          unsigned int v25 = v31;
          while (v16 != v23)
          {
            v25[v23] = v24 + v23;
            if (v10 == ++v23) {
              goto LABEL_23;
            }
          }
          goto LABEL_43;
        }
LABEL_23:
        re::internal::capBoundary(&v39, (uint64_t)&v27, v18, v19, v20, v21);
        if (v27 && v31) {
          (*(void (**)(void))(*(void *)v27 + 40))();
        }
      }
      re::GeomMesh::operator=(a1, &v39);
      re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v42);
      if (v40)
      {
        uint64_t v9 = v41;
        if (v41) {
          ((void (*)(void))(*v40)[5])();
        }
      }
    }
    if (*((unsigned char *)a2 + 20)) {
      re::internal::mergeVertexPositions((re::internal *)a1, v9);
    }
    return re::FunctionBase<24ul,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::destroyCallable((uint64_t)v44);
  }
  else
  {
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v39);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 18)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 19))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexNormal", 1, 7);
      if (*((unsigned char *)a2 + 18))
      {
        if (*((unsigned char *)a2 + 19))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v39);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v42);
    uint64_t result = v40;
    if (v40 && v41) {
      return (uint64_t (***)(void))((uint64_t (*)(void))(*v40)[5])();
    }
  }
  return result;
}

void re::buildCylinder(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v21 = *((void *)a2 + 2);
    long long v20 = *(_OWORD *)a2;
    BYTE4(v21) = 0;
    re::buildCylinder(a1, &v20);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v20, 0);
  re::buildCylinder((uint64_t)&v20, a2);
  re::DynamicArray<re::GeomMesh>::clear((re::GeomMesh *)a1);
  re::DynamicArray<re::GeomMesh>::resize(a1, *((unsigned __int8 *)a2 + 16) + (unint64_t)*((unsigned __int8 *)a2 + 17) + 1);
  unsigned int v4 = a2[1];
  if (a2[1])
  {
    unsigned int v5 = *a2;
    if (v5 >= 3)
    {
      uint64_t v19 = 0;
      v16[1] = 0;
      uint64_t v17 = 0;
      v16[0] = 0;
      int v18 = 0;
      re::internal::fillFaces((uint64_t)v16, 0, v5 * (unint64_t)v4);
      re::internal::makeSubmesh((unint64_t)&v23, (unint64_t)&v20, v17, v19);
      if (*(void *)(a1 + 16))
      {
        re::GeomMesh::operator=(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)&v23);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v23);
        unsigned int v6 = *((unsigned __int8 *)a2 + 16);
        if (!*((unsigned char *)a2 + 16))
        {
          int v7 = 0;
LABEL_16:
          if (!*((unsigned char *)a2 + 17)) {
            goto LABEL_20;
          }
          unint64_t v11 = v6;
          unint64_t v12 = *(void *)(a1 + 16);
          if (v12 > v6)
          {
            int v13 = v7 + *(_DWORD *)(*(void *)(a1 + 32) + 736 * v6 + 40);
            unint64_t v10 = v6 + 1;
            re::internal::fillFaces((uint64_t)v16, v13, *a2);
            re::internal::makeSubmesh((unint64_t)&v23, (unint64_t)&v20, v17, v19);
            unint64_t v14 = *(void *)(a1 + 16);
            if (v14 > v10)
            {
              re::GeomMesh::operator=((re::GeomMesh *)(*(void *)(a1 + 32) + 736 * v10), (re::GeomMesh *)&v23);
              re::GeomMesh::~GeomMesh((re::GeomMesh *)&v23);
LABEL_20:
              if (v16[0])
              {
                if (v19) {
                  (*(void (**)(void))(*(void *)v16[0] + 40))();
                }
              }
              goto LABEL_28;
            }
            goto LABEL_38;
          }
          goto LABEL_36;
        }
        if (*(void *)(a1 + 16))
        {
          int v7 = *(_DWORD *)(*(void *)(a1 + 32) + 40);
          re::internal::fillFaces((uint64_t)v16, v7, *a2);
          re::internal::makeSubmesh((unint64_t)&v23, (unint64_t)&v20, v17, v19);
          unint64_t v8 = *(void *)(a1 + 16);
          if (v8 > 1)
          {
            re::GeomMesh::operator=((re::GeomMesh *)(*(void *)(a1 + 32) + 736), (re::GeomMesh *)&v23);
            re::GeomMesh::~GeomMesh((re::GeomMesh *)&v23);
            unsigned int v6 = 1;
            goto LABEL_16;
          }
          goto LABEL_33;
        }
LABEL_32:
        *(void *)uint64_t v28 = 0;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v35[0] = 136315906;
        *(void *)&v35[1] = "operator[]";
        LOWORD(v35[3]) = 1024;
        *(_DWORD *)((char *)&v35[3] + 2) = 789;
        HIWORD(v35[4]) = 2048;
        *(void *)&v35[5] = 0;
        LOWORD(v35[7]) = 2048;
        *(void *)((char *)&v35[7] + 2) = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        uint64_t v22 = 0;
        long long v36 = 0u;
        long long v37 = 0u;
        memset(v35, 0, sizeof(v35));
        unint64_t v15 = v8;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v28 = 136315906;
        *(void *)&v28[4] = "operator[]";
        __int16 v29 = 1024;
        int v30 = 789;
        __int16 v31 = 2048;
        uint64_t v32 = 1;
        __int16 v33 = 2048;
        unint64_t v34 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_34;
      }
      uint64_t v22 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      memset(v35, 0, sizeof(v35));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v28 = 136315906;
      *(void *)&v28[4] = "operator[]";
      __int16 v29 = 1024;
      int v30 = 789;
      __int16 v31 = 2048;
      uint64_t v32 = 0;
      __int16 v33 = 2048;
      unint64_t v34 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v16[0] = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v35[0] = 136315906;
      *(void *)&v35[1] = "operator[]";
      LOWORD(v35[3]) = 1024;
      *(_DWORD *)((char *)&v35[3] + 2) = 789;
      HIWORD(v35[4]) = 2048;
      *(void *)&v35[5] = 0;
      LOWORD(v35[7]) = 2048;
      *(void *)((char *)&v35[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_32;
    }
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_31;
  }
  re::GeomMesh::operator=(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)&v20);
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9)
    {
LABEL_34:
      v16[0] = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v35[0] = 136315906;
      *(void *)&v35[1] = "operator[]";
      LOWORD(v35[3]) = 1024;
      *(_DWORD *)((char *)&v35[3] + 2) = 789;
      HIWORD(v35[4]) = 2048;
      *(void *)&v35[5] = 0;
      LOWORD(v35[7]) = 2048;
      *(void *)((char *)&v35[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_35;
    }
    if (v9 == 1)
    {
LABEL_35:
      v16[0] = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v35[0] = 136315906;
      *(void *)&v35[1] = "operator[]";
      LOWORD(v35[3]) = 1024;
      *(_DWORD *)((char *)&v35[3] + 2) = 789;
      HIWORD(v35[4]) = 2048;
      *(void *)&v35[5] = 1;
      LOWORD(v35[7]) = 2048;
      *(void *)((char *)&v35[7] + 2) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      *(void *)uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      unint64_t v14 = v11;
      unint64_t v10 = v12;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v35[0] = 136315906;
      *(void *)&v35[1] = "operator[]";
      LOWORD(v35[3]) = 1024;
      *(_DWORD *)((char *)&v35[3] + 2) = 789;
      HIWORD(v35[4]) = 2048;
      *(void *)&v35[5] = v14;
      LOWORD(v35[7]) = 2048;
      *(void *)((char *)&v35[7] + 2) = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_37;
    }
    re::GeomMesh::copy(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)(*(void *)(a1 + 32) + 736));
    unint64_t v10 = 2;
  }
  else
  {
    unint64_t v10 = 1;
  }
  if (*((unsigned char *)a2 + 17))
  {
    unint64_t v14 = *(void *)(a1 + 16);
    if (!v14)
    {
LABEL_37:
      v16[0] = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v35[0] = 136315906;
      *(void *)&v35[1] = "operator[]";
      LOWORD(v35[3]) = 1024;
      *(_DWORD *)((char *)&v35[3] + 2) = 789;
      HIWORD(v35[4]) = 2048;
      *(void *)&v35[5] = 0;
      LOWORD(v35[7]) = 2048;
      *(void *)((char *)&v35[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      uint64_t v22 = 0;
      long long v36 = 0u;
      long long v37 = 0u;
      memset(v35, 0, sizeof(v35));
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      *(_DWORD *)uint64_t v28 = 136315906;
      *(void *)&v28[4] = "operator[]";
      __int16 v29 = 1024;
      int v30 = 789;
      __int16 v31 = 2048;
      uint64_t v32 = v10;
      __int16 v33 = 2048;
      unint64_t v34 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v16[0] = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      v35[0] = 136315906;
      *(void *)&v35[1] = "operator[]";
      LOWORD(v35[3]) = 1024;
      *(_DWORD *)((char *)&v35[3] + 2) = 789;
      HIWORD(v35[4]) = 2048;
      *(void *)&v35[5] = v10;
      LOWORD(v35[7]) = 2048;
      *(void *)((char *)&v35[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v14 <= v10) {
      goto LABEL_39;
    }
    re::GeomMesh::copy(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)(*(void *)(a1 + 32) + 736 * v10));
  }
LABEL_28:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v20);
}

uint64_t re::buildSphere(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v116);
  unsigned int v4 = *a2;
  if (*((unsigned char *)a2 + 9)) {
    BOOL v5 = *((unsigned char *)a2 + 8) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  if (v4 <= 2)
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexPosition", 1, 7);
    if (*((unsigned char *)a2 + 8)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexUV", 1, 6);
    }
    if (*((unsigned char *)a2 + 9)) {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexNormal", 1, 7);
    }
    if (v6)
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexTangent", 1, 7);
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexBitangent", 1, 7);
    }
    re::GeomMesh::operator=(a1, &v116);
    goto LABEL_112;
  }
  unsigned int v104 = v4 + 1;
  int v7 = (v4 - 1) * (v4 + 1);
  unsigned int v116 = v7 + 2 * v4;
  unsigned int v120 = v116;
  unsigned int v8 = v4;
  if (v121)
  {
    uint64_t v9 = v122;
    uint64_t v10 = 8 * v121;
    do
    {
      uint64_t v11 = *v9++;
      (*(void (**)(uint64_t, void))(*(void *)v11 + 72))(v11, v120);
      v10 -= 8;
    }
    while (v10);
    unsigned int v8 = *a2;
  }
  int v12 = v8 * v8;
  re::DynamicArray<re::GeomCell4>::resize(v117, v8 * v8);
  unsigned int v123 = v12;
  if (v124)
  {
    int v13 = v125;
    uint64_t v14 = 8 * v124;
    do
    {
      uint64_t v15 = *v13++;
      (*(void (**)(uint64_t, void))(*(void *)v15 + 72))(v15, v123);
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t v16 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexPosition", 1, 7);
  unsigned int v17 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v16 + 16))(v16);
  if (v17)
  {
    uint64_t v18 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v16, 0);
    unsigned int v17 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v16 + 16))(v16);
  }
  else
  {
    uint64_t v18 = 0;
  }
  unsigned int v106 = v4;
  int v103 = (v4 - 1) * (v4 + 1);
  unsigned int v19 = v7 + v4;
  unint64_t v20 = v17;
  uint64_t v102 = a1;
  unsigned int v105 = v4 - 1;
  unint64_t v109 = v7 + v4;
  if (v6)
  {
    uint64_t v21 = (uint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexTangent", 1, 7);
    uint64_t v22 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexBitangent", 1, 7);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 16))(v21))
    {
      uint64_t v23 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v21, 0);
      LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
    }
    else
    {
      LODWORD(v21) = 0;
      uint64_t v23 = 0;
    }
    unsigned int v26 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v22 + 16))(v22);
    unsigned int v19 = v109;
    if (v26)
    {
      uint64_t v24 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v22, 0);
      unsigned int v26 = (*(uint64_t (**)(re::GeomAttribute *))(*(void *)v22 + 16))(v22);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v23;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    unsigned int v26 = -1;
    LODWORD(v21) = -1;
  }
  unint64_t v27 = 0;
  uint64_t v21 = v21;
  if (v20 >= v19) {
    unint64_t v28 = v20 - v19;
  }
  else {
    unint64_t v28 = 0;
  }
  uint64_t v110 = v24;
  uint64_t v111 = v25;
  unint64_t v113 = v26;
  uint64_t v114 = v24 + 16 * v19;
  uint64_t v29 = v25 + 16 * v19;
  long long v30 = xmmword_23435FD90;
  long long v31 = xmmword_23435FD60;
  unint64_t v32 = v18 + 16 * v19;
  do
  {
    if (v20 == v27) {
      goto LABEL_121;
    }
    *(_OWORD *)(v18 + 16 * v27) = v30;
    if (v28 == v27) {
      goto LABEL_122;
    }
    *(_OWORD *)(v32 + 16 * v27) = v31;
    if (v6)
    {
      LOWORD(v31) = *a2;
      __double2 v34 = __sincos_stret((double)v27 * 6.28318531 / (double)(unint64_t)v31);
      v33.f64[0] = v34.__sinval;
      unint64_t v35 = v21;
      if (v27 >= v21) {
        goto LABEL_125;
      }
      v33.f64[1] = v34.__cosval;
      *(float32x2_t *)&v33.f64[0] = vcvt_f32_f64(v33);
      float32x4_t v36 = vnegq_f32((float32x4_t)vzip1q_s32((int32x4_t)v33, (int32x4_t)v33));
      v36.i32[1] = 0;
      *(float32x4_t *)(v111 + 16 * v27) = v36;
      if (v109 + v27 >= v21) {
        goto LABEL_126;
      }
      *(float32x4_t *)(v29 + 16 * v27) = v36;
      unint64_t v37 = v113;
      if (v27 >= v113) {
        goto LABEL_127;
      }
      int8x16_t v38 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v111 + 16 * v27), *(int32x4_t *)(v111 + 16 * v27)), *(int8x16_t *)(v111 + 16 * v27), 0xCuLL), vnegq_f32(*(float32x4_t *)(v18 + 16 * v27))), *(float32x4_t *)(v111 + 16 * v27), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v18 + 16 * v27), *(int32x4_t *)(v18 + 16 * v27)), *(int8x16_t *)(v18 + 16 * v27), 0xCuLL));
      *(int8x16_t *)(v110 + 16 * v27) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL);
      if (v109 + v27 >= v113) {
        goto LABEL_128;
      }
      int8x16_t v39 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v29 + 16 * v27), *(int32x4_t *)(v29 + 16 * v27)), *(int8x16_t *)(v29 + 16 * v27), 0xCuLL), vnegq_f32(*(float32x4_t *)(v32 + 16 * v27))), *(float32x4_t *)(v29 + 16 * v27), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v32 + 16 * v27), *(int32x4_t *)(v32 + 16 * v27)), *(int8x16_t *)(v32 + 16 * v27), 0xCuLL));
      *(int8x16_t *)(v114 + 16 * v27) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), v39, 0xCuLL);
      long long v30 = xmmword_23435FD90;
      long long v31 = xmmword_23435FD60;
    }
    ++v27;
  }
  while (v106 != v27);
  uint64_t v112 = (float32x4_t *)v18;
  unsigned int v40 = *a2;
  uint64_t v41 = v111;
  if (v40 < 2) {
    goto LABEL_68;
  }
  unsigned int v42 = 1;
  unsigned int v43 = v106;
  unint64_t v107 = v20;
  do
  {
    unint64_t v27 = v43;
    unsigned int v108 = v42;
    __double2 v45 = __sincos_stret((double)v42 * 3.14159265 / (double)(unsigned __int16)v40 + -1.57079633);
    *(double *)v44.i64 = v45.__cosval;
    unint64_t v28 = 0;
    unint64_t v32 = v110 + 16 * v43;
    float sinval = v45.__sinval;
    float v115 = sinval;
    if (v20 >= v43) {
      unint64_t v20 = v20 - v43;
    }
    else {
      unint64_t v20 = 0;
    }
    uint64_t v47 = v41 + 16 * v43;
    int v48 = &v112[v43];
    do
    {
      v44.i16[0] = *a2;
      __double2 v51 = __sincos_stret((double)v28 * 6.28318531 / (double)v44.u64[0]);
      *(double *)v44.i64 = v51.__cosval;
      v49.f64[0] = v51.__sinval;
      if (v20 == v28)
      {
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        int v127 = 136315906;
        __int16 v131 = 2048;
        unint64_t v132 = (v27 + v28);
        __int16 v133 = 2048;
        unint64_t v134 = v107;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        int v127 = 136315906;
        __int16 v131 = 2048;
        unint64_t v132 = (v21 + v32);
        __int16 v133 = 2048;
        unint64_t v134 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 789;
        __int16 v131 = 2048;
        unint64_t v132 = v28;
        __int16 v133 = 2048;
        unint64_t v134 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v27 + v28;
        __int16 v133 = 2048;
        unint64_t v134 = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v27 + v28;
        __int16 v133 = 2048;
        unint64_t v134 = v113;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_121:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v20;
        __int16 v133 = 2048;
        unint64_t v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        int v127 = 136315906;
        __int16 v131 = 2048;
        unint64_t v132 = (v109 + v27);
        __int16 v133 = 2048;
        unint64_t v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_123:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 789;
        __int16 v131 = 2048;
        unint64_t v132 = v32;
        __int16 v133 = 2048;
        unint64_t v134 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_124:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 789;
        __int16 v131 = 2048;
        unint64_t v132 = v28;
        __int16 v133 = 2048;
        unint64_t v134 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_125:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        unint64_t v95 = v35;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v27;
        __int16 v133 = 2048;
        unint64_t v134 = v95;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_126:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        unint64_t v96 = v35;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v109 + v27;
        __int16 v133 = 2048;
        unint64_t v134 = v96;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_127:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        unint64_t v97 = v37;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v27;
        __int16 v133 = 2048;
        unint64_t v134 = v97;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_128:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        unint64_t v98 = v37;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v109 + v27;
        __int16 v133 = 2048;
        unint64_t v134 = v98;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_129:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v28;
        __int16 v133 = 2048;
        unint64_t v134 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_130:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v32;
        __int16 v133 = 2048;
        unint64_t v134 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_131:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v20;
        __int16 v133 = 2048;
        unint64_t v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_132:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v127 = 136315906;
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        __int16 v131 = 2048;
        unint64_t v132 = v27;
        __int16 v133 = 2048;
        unint64_t v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_133:
        uint64_t v126 = 0;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v135 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        long long v128 = "operator[]";
        __int16 v129 = 1024;
        int v130 = 609;
        int v127 = 136315906;
        __int16 v131 = 2048;
        unint64_t v132 = (v27 + v28);
        __int16 v133 = 2048;
        unint64_t v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_134;
      }
      v50.f32[0] = v45.__cosval * v51.__cosval;
      float32_t v52 = v51.__sinval * -v45.__cosval;
      v50.f32[1] = v115;
      v50.f32[2] = v52;
      v48[v28] = v50;
      if (v6)
      {
        if (v27 + v28 >= v21) {
          goto LABEL_119;
        }
        v49.f64[1] = v51.__cosval;
        *(float32x2_t *)&v49.f64[0] = vcvt_f32_f64(v49);
        float32x4_t v53 = vnegq_f32((float32x4_t)vzip1q_s32((int32x4_t)v49, (int32x4_t)v49));
        v53.i32[1] = 0;
        *(float32x4_t *)(v47 + 16 * v28) = v53;
        if (v27 + v28 >= v113) {
          goto LABEL_120;
        }
        int8x16_t v44 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), vnegq_f32(v48[v28])), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48[v28], (int32x4_t)v48[v28]), (int8x16_t)v48[v28], 0xCuLL));
        *(int8x16_t *)(v32 + 16 * v28) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), v44, 0xCuLL);
      }
      ++v28;
    }
    while (v106 != v28);
    unint64_t v20 = v107;
    if (v107 <= v27) {
      goto LABEL_132;
    }
    unsigned int v54 = v27 + v28;
    if (v107 <= (int)v27 + (int)v28) {
      goto LABEL_133;
    }
    uint64_t v41 = v111;
    v112[v54] = v112[v27];
    if ((v6 & 1) == 0) {
      goto LABEL_67;
    }
    unint64_t v55 = v21;
    if (v21 <= v27) {
      goto LABEL_136;
    }
    unint64_t v32 = (v27 + v28);
    if (v21 <= v54)
    {
LABEL_137:
      uint64_t v126 = 0;
      long long v138 = 0u;
      long long v139 = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v135 = 0u;
      unint64_t v100 = v55;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v127 = 136315906;
      long long v128 = "operator[]";
      __int16 v129 = 1024;
      int v130 = 609;
      __int16 v131 = 2048;
      unint64_t v132 = v32;
      __int16 v133 = 2048;
      unint64_t v134 = v100;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_138:
      uint64_t v126 = 0;
      long long v138 = 0u;
      long long v139 = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v135 = 0u;
      unint64_t v101 = v56;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v127 = 136315906;
      long long v128 = "operator[]";
      __int16 v129 = 1024;
      int v130 = 609;
      __int16 v131 = 2048;
      unint64_t v132 = v27;
      __int16 v133 = 2048;
      unint64_t v134 = v101;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_139:
      uint64_t v126 = 0;
      long long v138 = 0u;
      long long v139 = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      long long v135 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v127 = 136315906;
      long long v128 = "operator[]";
      __int16 v129 = 1024;
      int v130 = 609;
      __int16 v131 = 2048;
      unint64_t v132 = v32;
      __int16 v133 = 2048;
      unint64_t v134 = v113;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_OWORD *)(v111 + 16 * v32) = *(_OWORD *)(v111 + 16 * v27);
    unint64_t v56 = v113;
    if (v113 <= v27) {
      goto LABEL_138;
    }
    if (v113 <= v54) {
      goto LABEL_139;
    }
    *(_OWORD *)(v110 + 16 * v32) = *(_OWORD *)(v110 + 16 * v27);
LABEL_67:
    unsigned int v43 = v27 + v28 + 1;
    unsigned int v42 = v108 + 1;
    unsigned int v40 = *a2;
  }
  while (v108 + 1 < v40);
LABEL_68:
  if (*((unsigned char *)a2 + 8))
  {
    uint64_t v21 = (uint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexUV", 1, 6);
    unsigned int v57 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
    if (v57)
    {
      unint64_t v27 = re::internal::GeomTypedAttribute<double>::operator[](v21, 0);
      unsigned int v57 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 16))(v21);
    }
    else
    {
      unint64_t v27 = 0;
    }
    unint64_t v32 = v109;
    uint64_t v60 = 0;
    unsigned int v61 = 0;
    LOWORD(v58) = *a2;
    unint64_t v28 = v57;
    unint64_t v62 = v57 - v109;
    if (v57 < v109) {
      unint64_t v62 = 0;
    }
    do
    {
      if (8 * v57 == v60) {
        goto LABEL_129;
      }
      LOWORD(v59) = *a2;
      *(float *)&uint64_t v63 = (float)(0.5 / (float)v58) + (float)((float)v61 / (float)LODWORD(v59));
      HIWORD(v59) = WORD1(v63);
      *(void *)(v27 + v60) = v63;
      if (!v62) {
        goto LABEL_130;
      }
      HIDWORD(v63) = 1.0;
      *(void *)(v27 + 8 * v32++) = v63;
      --v62;
      ++v61;
      v60 += 8;
    }
    while (8 * v106 != v60);
    if (v105)
    {
      int v64 = 0;
      unsigned int v65 = v106;
      do
      {
        unint64_t v32 = 0;
        LOWORD(v63) = *a2;
        float v66 = 1.0 - (float)((float)(v105 - v64) / (float)v63);
        uint64_t v21 = v65;
        unsigned int v67 = v57 - v65;
        if (v57 < v65) {
          unsigned int v67 = 0;
        }
        unint64_t v68 = v27 + 8 * v65;
        do
        {
          if (v67 == v32) {
            goto LABEL_117;
          }
          LOWORD(v59) = *a2;
          float v59 = (float)LODWORD(v59);
          *(float *)&uint64_t v63 = (float)v32 / v59;
          *((float *)&v63 + 1) = v66;
          *(void *)(v68 + 8 * v32++) = v63;
        }
        while (v106 + 1 != v32);
        unsigned int v65 = v21 + v32;
        ++v64;
      }
      while (v64 != v105);
    }
  }
  if (!*((unsigned char *)a2 + 9))
  {
LABEL_94:
    uint64_t v76 = v116;
    unsigned int v70 = v106;
    if (!v116) {
      goto LABEL_98;
    }
    unint64_t v77 = v20;
    while (v77)
    {
      *uint64_t v112 = vmulq_n_f32(*v112, *((float *)a2 + 1));
      ++v112;
      --v77;
      if (!--v76) {
        goto LABEL_98;
      }
    }
    goto LABEL_131;
  }
  unint64_t v27 = (unint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexNormal", 1, 7);
  if ((*(unsigned int (**)(unint64_t))(*(void *)v27 + 16))(v27))
  {
    unint64_t v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v27, 0);
    unint64_t v32 = (*(unsigned int (**)(unint64_t))(*(void *)v27 + 16))(v27);
  }
  else
  {
    unint64_t v32 = 0;
    unint64_t v28 = 0;
  }
  uint64_t v69 = v116;
  unsigned int v70 = v106;
  if (v116)
  {
    uint64_t v71 = 0;
    while (v20 != v71)
    {
      if (v32 == v71) {
        goto LABEL_135;
      }
      float32x4_t v72 = v112[v71];
      int32x4_t v73 = (int32x4_t)vmulq_f32(v72, v72);
      v73.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v73, 2), vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1))).u32[0];
      float32x2_t v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
      float32x2_t v75 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74)));
      *(float32x4_t *)(v28 + 16 * v71++) = vmulq_n_f32(v72, vmul_f32(v75, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v75, v75))).f32[0]);
      if (v69 == v71) {
        goto LABEL_94;
      }
    }
LABEL_134:
    uint64_t v126 = 0;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v135 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v127 = 136315906;
    long long v128 = "operator[]";
    __int16 v129 = 1024;
    int v130 = 609;
    __int16 v131 = 2048;
    unint64_t v132 = v20;
    __int16 v133 = 2048;
    unint64_t v134 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_135:
    uint64_t v126 = 0;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v135 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v127 = 136315906;
    long long v128 = "operator[]";
    __int16 v129 = 1024;
    int v130 = 609;
    __int16 v131 = 2048;
    unint64_t v132 = v32;
    __int16 v133 = 2048;
    unint64_t v134 = v32;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_136:
    uint64_t v126 = 0;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v135 = 0u;
    unint64_t v99 = v55;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v127 = 136315906;
    long long v128 = "operator[]";
    __int16 v129 = 1024;
    int v130 = 609;
    __int16 v131 = 2048;
    unint64_t v132 = v27;
    __int16 v133 = 2048;
    unint64_t v134 = v99;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_137;
  }
LABEL_98:
  uint64_t v78 = 0;
  unint64_t v32 = v117[2];
  uint64_t v79 = (_DWORD *)(v118 + 8);
  int v80 = v103;
  do
  {
    if (v32 == v78) {
      goto LABEL_123;
    }
    *(v79 - 2) = v78;
    *(v79 - 1) = v70 + v78 + 1;
    *uint64_t v79 = v70 + v78;
    v79[1] = -1;
    v79 += 4;
    ++v78;
  }
  while (v106 != v78);
  unsigned int v81 = (*a2 - 1) * v70;
  uint64_t v82 = v118;
  unsigned int v83 = v106;
  do
  {
    unint64_t v28 = v81;
    if (v32 <= v81) {
      goto LABEL_124;
    }
    unsigned int v84 = (_DWORD *)(v82 + 16 * v81);
    *unsigned int v84 = v80 - 1;
    v84[1] = v80;
    v84[2] = v70 + v80;
    v84[3] = -1;
    ++v81;
    ++v80;
    --v83;
  }
  while (v83);
  if (v105)
  {
    unsigned int v85 = v70 - 2;
    int v86 = 0;
    int v87 = 2 * v70;
    unsigned int v88 = v70;
    do
    {
      int v89 = 0;
      uint64_t v90 = v118;
      do
      {
        unint64_t v28 = v88 + v89;
        if (v32 <= v28) {
          goto LABEL_118;
        }
        uint64_t v91 = (_DWORD *)(v90 + 16 * v28);
        *uint64_t v91 = v70 + v89;
        v91[1] = v70 + v89 + 1;
        v91[2] = v87 + v89 + 2;
        v91[3] = v87 + v89++ + 1;
      }
      while (v106 != v89);
      ++v86;
      v87 += v104;
      v70 += v104;
      v88 += v89;
    }
    while (v86 != v85);
  }
  uint64_t v92 = (re::internal *)re::GeomMesh::operator=(v102, &v116);
  if (*((unsigned char *)a2 + 10)) {
    re::internal::mergeVertexPositions(v92, v93);
  }
LABEL_112:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v119);
  uint64_t result = v117[0];
  if (v117[0])
  {
    if (v118) {
      return (*(uint64_t (**)(void))(*(void *)v117[0] + 40))();
    }
  }
  return result;
}