uint64_t re::ecs2::MeshSmoothSystem::willAddSystemToECSService(re::ecs2::MeshSmoothSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  *((void *)this + 15) = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  v5 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v5);
  *((void *)this + 16) = result;
  return result;
}

double re::ecs2::MeshSmoothSystem::willRemoveSystemFromECSService(re::ecs2::MeshSmoothSystem *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::MeshSmoothSystem::willAddSceneToECSService(re::ecs2::MeshSmoothSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  v4 = (char *)this + 176;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::MeshSmoothSystem *)((char *)this + 296);
  unint64_t v6 = *((void *)this + 38);
  int v7 = *((_DWORD *)this + 78);
  if (v6 >= 0xB)
  {
    if (v7) {
      v8 = (void *)((char *)this + 320);
    }
    else {
      v8 = (void *)*((void *)this + 41);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    v9 = (uint64_t *)((char *)this + 320);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    v9 = (uint64_t *)*((void *)this + 41);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 296, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSmoothSystem *)((char *)this + 232), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 344;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 27);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 23);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 22, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 23);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 192)) {
    v19 = (char *)this + 200;
  }
  else {
    v19 = (char *)*((void *)this + 26);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 27);
  ++*((_DWORD *)this + 56);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 27);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 27) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshSmoothSystem *)((char *)this + 232), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 27);
  unint64_t v29 = *((void *)this + 42);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 42) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 42) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 312)) {
      v33 = (char *)this + 320;
    }
    else {
      v33 = (char *)*((void *)this + 41);
    }
    *(void *)&v33[8 * *((void *)this + 38) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 27);
  unint64_t v35 = *((void *)this + 48);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 48) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MeshSmoothSystem *)((char *)this + 344), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 48) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 360)) {
      v39 = (char *)this + 368;
    }
    else {
      v39 = (char *)*((void *)this + 47);
    }
    *(void *)&v39[8 * *((void *)this + 44) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  v15 = (char *)this + 344;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 408)) {
    return;
  }
  unint64_t v40 = *((void *)this + 44);
  int v41 = *((_DWORD *)this + 90);
  if (v40 >= 0xB)
  {
    if (v41) {
      v42 = (void *)((char *)this + 368);
    }
    else {
      v42 = (void *)*((void *)this + 47);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((void *)this + 49);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    v43 = (uint64_t *)((char *)this + 368);
    if (!v40) {
      return;
    }
  }
  else
  {
    v43 = (uint64_t *)*((void *)this + 47);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::MeshSmoothSystem::willRemoveSceneFromECSService(re::ecs2::MeshSmoothSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  v3 = (uint64_t *)((char *)this + 232);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 29, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 30) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 296, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 344, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 176, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      void *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t re::ecs2::MeshSmoothSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v38[0] = a3;
  v38[1] = a4;
  unint64_t v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v37);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if (isStatisticCollectionEnabled)
  {
    uint64_t v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    unint64_t v10 = v9 ? *(void *)(v9 + 24) : 0;
    uint64_t v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      unint64_t v12 = v11[452].u64[0];
      if (v12 >= v10) {
        unint64_t v12 = v10;
      }
      v11[452].i64[0] = v12;
      unint64_t v13 = v11[452].u64[1];
      if (v13 <= v10) {
        unint64_t v13 = v10;
      }
      v11[452].i64[1] = v13;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[453] = vaddq_s64(v11[453], v14);
      *(unsigned char *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36, 3041, a1);
  uint64_t v15 = *(void *)(a1 + 104);
  if (v15 && (*(unsigned char *)(v15 + 424) & 0x10) == 0) {
    goto LABEL_41;
  }
  uint64_t v39 = a2;
  unint64_t v16 = *(void *)(*(void *)(a1 + 240)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 232), &v39)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 344, v16);
  unint64_t v17 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 176, v16);
  uint64_t v18 = *(void *)(*v17 + 224);
  unint64_t v19 = v17[3];
  unint64_t v20 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v17[2] + 8, v19);
  if (*(_DWORD *)(v20 + 40)) {
    int v21 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v18 + 24))(v18, v38, v17, v19, v20, 0);
  }
  else {
    int v21 = 0;
  }
  unint64_t v22 = v17[5];
  unint64_t v23 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v17[2] + 8, v22);
  if (*(_DWORD *)(v23 + 40)) {
    v21 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v18 + 32))(v18, v38, v17, v22, v23, 0);
  }
  unint64_t v24 = v17[6];
  unint64_t v25 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v17[2] + 8, v24);
  if (!*(_DWORD *)(v25 + 40))
  {
    if (!v21) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((v21 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v18 + 40))(v18, v38, v17, v24, v25, 0)))LABEL_20:re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 344, v16); {
LABEL_21:
  }
  if (!*(unsigned char *)(a1 + 408)) {
    goto LABEL_41;
  }
  unint64_t v26 = *(void *)(a1 + 352);
  int v27 = *(_DWORD *)(a1 + 360);
  if (v26 >= 0xB)
  {
    if (v27) {
      unint64_t v28 = (void *)(a1 + 368);
    }
    else {
      unint64_t v28 = *(void **)(a1 + 376);
    }
    uint64_t v30 = 8 * v26;
    while (!*v28)
    {
      ++v28;
      v30 -= 8;
      if (!v30) {
        goto LABEL_41;
      }
    }
LABEL_39:
    unint64_t v34 = *(re::ecs2::System **)(a1 + 392);
    if (!*((unsigned char *)v34 + 86)) {
      re::ecs2::System::queueToRun(v34, 0.0);
    }
    goto LABEL_41;
  }
  if (v27)
  {
    unint64_t v29 = (uint64_t *)(a1 + 368);
    if (!v26) {
      goto LABEL_41;
    }
  }
  else
  {
    unint64_t v29 = *(uint64_t **)(a1 + 376);
    if (!v26) {
      goto LABEL_41;
    }
  }
  uint64_t v31 = 0;
  uint64_t v32 = 8 * v26;
  do
  {
    uint64_t v33 = *v29++;
    v31 |= v33;
    v32 -= 8;
  }
  while (v32);
  if (v31) {
    goto LABEL_39;
  }
LABEL_41:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v36);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v37);
}

void *re::ecs2::allocInfo_MeshSmoothAttributes(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_213, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_213))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF869C0, "MeshSmoothAttributes");
    __cxa_guard_release(&_MergedGlobals_213);
  }
  return &unk_26AF869C0;
}

void re::ecs2::initInfo_MeshSmoothAttributes(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0xC51B688E53129BA4;
  v14[1] = "MeshSmoothAttributes";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86970, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF86970);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::IntrospectionInfo<re::DynamicArray<unsigned int>>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "iterations";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF86998 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "lambdas";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF869A0 = v12;
      __cxa_guard_release(&qword_26AF86970);
    }
  }
  *((void *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF86998;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSmoothAttributes>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSmoothAttributes>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSmoothAttributes>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSmoothAttributes>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

double re::internal::defaultConstruct<re::ecs2::MeshSmoothAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshSmoothAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 40);
  return re::DynamicArray<unsigned long>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::MeshSmoothAttributes>(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshSmoothAttributes>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 40);
  return re::DynamicArray<unsigned long>::deinit(a1);
}

void *re::ecs2::allocInfo_MeshSmoothComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86980))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86A38, "MeshSmoothComponent");
    __cxa_guard_release(&qword_26AF86980);
  }
  return &unk_26AF86A38;
}

void re::ecs2::initInfo_MeshSmoothComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v18[0] = 0x92BED4AA627EFA44;
  v18[1] = "MeshSmoothComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86988, memory_order_acquire) & 1) == 0)
  {
    v4 = (re *)__cxa_guard_acquire(&qword_26AF86988);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF869A8 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      uint64_t v9 = v8;
      unint64_t v10 = (re::ecs2 *)qword_26AF86978;
      if (!qword_26AF86978)
      {
        unint64_t v10 = (re::ecs2 *)re::ecs2::allocInfo_MeshSmoothAttributes(v8);
        qword_26AF86978 = (uint64_t)v10;
        re::ecs2::initInfo_MeshSmoothAttributes(v10, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "attributes";
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF869B0 = v12;
      long long v13 = re::introspectionAllocator((re *)v12);
      long long v15 = re::introspect_AssetHandle((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "assignedMeshDeformation";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x7000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF869B8 = v16;
      __cxa_guard_release(&qword_26AF86988);
    }
  }
  *((void *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF869A8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSmoothComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSmoothComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSmoothComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSmoothComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v17 = v19;
}

uint64_t re::internal::defaultConstruct<re::ecs2::MeshSmoothComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshSmoothComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshSmoothComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshSmoothComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshSmoothComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSmoothComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSmoothComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSmoothComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSmoothComponent>, this);
}

void *re::ecs2::allocInfo_MeshSmoothSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86990, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86990))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86AB0, "MeshSmoothSystem");
    __cxa_guard_release(&qword_26AF86990);
  }
  return &unk_26AF86AB0;
}

void re::ecs2::initInfo_MeshSmoothSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xD08070BBCBB71854;
  v5[1] = "MeshSmoothSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1A000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MeshSmoothSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshSmoothSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshSmoothSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshSmoothSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshSmoothSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::MeshSmoothSystem *re::internal::defaultConstruct<re::ecs2::MeshSmoothSystem>(uint64_t a1, uint64_t a2, re::ecs2::MeshSmoothSystem *a3)
{
  return re::ecs2::MeshSmoothSystem::MeshSmoothSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::MeshSmoothSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 22);
  a3[17] = &unk_26E6FB958;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 19);
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshSmoothSystem>(void *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 22);
  a1[17] = &unk_26E6FB958;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 19);
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshSmoothSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSmoothSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSmoothSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSmoothSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSmoothSystem>, this);
}

uint64_t re::ecs2::MeshSmoothComponentStateImpl::dependsOnComponents(re::ecs2::MeshSmoothComponentStateImpl *this)
{
  return *((void *)this + 4);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshSmoothComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 24;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      v6 += 8;
    }
    while (v6 != 56);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshSmoothComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::MeshSmoothSystem::~MeshSmoothSystem(re::ecs2::MeshSmoothSystem *this)
{
  *((void *)this + 17) = &unk_26E6FB958;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 19);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22);
  *((void *)this + 17) = &unk_26E6FB958;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 19);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MeshSmoothSystem::typeInfo(re::ecs2::MeshSmoothSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshSmoothSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshSmoothSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshSmoothSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshSmoothSystem>, 0);
}

void *re::FixedArray<unsigned int>::init<int>(void *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  *unint64_t result = a2;
  result[1] = a3;
  if (!a3) {
    return result;
  }
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = result;
  unint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a2 + 32))(a2, 4 * a3, 4);
  v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    unint64_t result = (void *)_os_crash();
    __break(1u);
    return result;
  }
  unint64_t v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_DWORD *)unint64_t result = *a4;
      unint64_t result = (void *)((char *)result + 4);
      --v8;
    }
    while (v8);
  }
  *(_DWORD *)unint64_t result = *a4;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  unint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    unint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *unint64_t v10 = &unk_26E6FBA48;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    v10[3] = 0;
    v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    int64x2_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int64x2_t v14 = v11;
    v14[1] = v13;
    long long v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FBAA0;
    v16[1] = a1;
    v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    unint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v20 = v17;
    v20[1] = v19;
    int v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FBAF8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    unint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *unint64_t v26 = v23;
    v26[1] = v25;
    int v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FBB50;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      unint64_t v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FBA48;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        int v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *int v41 = v38;
        v41[1] = v40;
        v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FBAA0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        unint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FBAF8;
        v49[1] = a1;
        v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        unint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FBB50;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int64x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int64x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int64x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)(v4 + 192);
    }
    else {
      unint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    int64x2_t v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    unint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FBA48;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FBA48;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FBAA0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FBAA0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FBAF8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FBAF8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FBB50;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FBB50;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(void *result, unint64_t a2)
{
  unint64_t v4 = result;
  uint64_t v5 = *result;
  if (a2 && !v5)
  {
    uint64_t result = (void *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(v4, a2);
    int v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  int v7 = *((_DWORD *)result + 4);
  if (v7) {
    uint64_t v8 = 2;
  }
  else {
    uint64_t v8 = result[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        uint64_t v14 = result + 3;
        uint64_t v15 = v4[4];
        if (v7) {
          uint64_t v16 = v4 + 3;
        }
        else {
          uint64_t v16 = (const void *)v4[4];
        }
        memcpy(v14, v16, 8 * v9);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 8 * a2;
        uint64_t v10 = (void *)(*(uint64_t (**)(void, unint64_t, uint64_t))(*(void *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          uint64_t v12 = v10;
          if (v4[2]) {
            uint64_t v13 = v4 + 3;
          }
          else {
            uint64_t v13 = (const void *)v4[4];
          }
          uint64_t result = memcpy(v10, v13, 8 * v4[1]);
          int v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            uint64_t result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v4 + 40))(*v4, v4[4]);
            int v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*v4 + 8));
      uint64_t result = (void *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::add(uint64_t a1, void *a2)
{
  uint64_t result = re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(v5 + 8 * v6) = *a2;
  *(void *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  v1 = result;
  if (*(void *)result)
  {
    unint64_t v2 = *((void *)result + 1);
    if (*((unsigned char *)result + 16)) {
      unint64_t v3 = 2;
    }
    else {
      unint64_t v3 = *((void *)result + 3);
    }
    if (v2 >= v3)
    {
      return re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::growCapacity(result, v2 + 1);
    }
  }
  else
  {
    unint64_t v4 = *((void *)v1 + 1) + 1;
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  if (!*(void *)result)
  {
    uint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if (*((unsigned char *)result + 16))
  {
    if (a2 <= 2) {
      return result;
    }
    unint64_t v5 = 4;
  }
  else
  {
    unint64_t v4 = *((void *)result + 3);
    if (v4 >= a2) {
      return result;
    }
    unint64_t v5 = 2 * v4;
  }
  if (v5 > a2) {
    a2 = v5;
  }
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshSmoothComponent> *,2ul>::setCapacity(result, a2);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::MeshSmoothComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6DFEE8;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 56) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_DWORD *)(v2 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  inited = (re *)objc_initWeak((id *)(v2 + 136), 0);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 176) = re::globalAllocators(inited)[2];
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  return a1;
}

re::ecs2::MeshSmoothSystem *re::ecs2::MeshSmoothSystem::MeshSmoothSystem(re::ecs2::MeshSmoothSystem *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E6FB9C0;
  uint64_t v3 = v2 + 136;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(void *)(v2 + 136) = &unk_26E6FB958;
  *(void *)(v2 + 144) = v2;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 152) = 0;
  uint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  unint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 152), (uint64_t)v9);
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 48) = 1;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 25) = 0;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 78) = 1;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 90) = 1;
  *(_OWORD *)((char *)this + 393) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  int v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 37, 0);
  *((_DWORD *)this + 78) += 2;
  *((void *)this + 42) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 43, 0);
  *((_DWORD *)this + 90) += 2;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = this;
  *((void *)this + 50) = v3;
  *((unsigned char *)this + 408) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

id re::internal::defaultRetain<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshSmoothSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void ___ZN2re19CARESortingDefaults15normalThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::floatValue((re::Defaults *)"CASortingNormalThreshold", a2, (uint64_t)v3);
  float v2 = v4;
  if (!v3[0]) {
    float v2 = 0.0001;
  }
  re::CARESortingDefaults::normalThreshold(void)::sortingNormalThreshold = LODWORD(v2);
}

void ___ZN2re19CARESortingDefaults17distanceThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::floatValue((re::Defaults *)"CASortingDistanceThreshold", a2, (uint64_t)v3);
  float v2 = v4;
  if (!v3[0]) {
    float v2 = 0.0005;
  }
  re::CARESortingDefaults::distanceThreshold(void)::sortingDistanceThreshold = LODWORD(v2);
}

void ___ZN2re19CARESortingDefaults29displacementOrderingThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  re::Defaults::floatValue((re::Defaults *)"CASortingDisplacementOrderingThreshold", a2, (uint64_t)v3);
  float v2 = v4;
  if (!v3[0]) {
    float v2 = 0.0001;
  }
  re::CARESortingDefaults::displacementOrderingThreshold(void)::sortingDisplacementOrderingThreshold = LODWORD(v2);
}

void ___ZN2re19CARESortingDefaults28enableDrawLayerSortingGroupsEv_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::Defaults::BOOLValue((re::Defaults *)"CAREEnableDrawLayerSortingGroups", a2, (char *)&v6);
  if ((_BYTE)v6) {
    char v3 = BYTE1(v6);
  }
  else {
    char v3 = 0;
  }
  re::gEnableDrawLayerSortingGroups = v3;
  float v4 = *re::sortingLogObjects(v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (re::gEnableDrawLayerSortingGroups) {
      unint64_t v5 = "enabled";
    }
    else {
      unint64_t v5 = "disabled";
    }
    int v6 = 136315138;
    int v7 = v5;
    _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "DrawLayerSortingGroups is now %s.", (uint8_t *)&v6, 0xCu);
  }
}

void *re::ecs2::allocInfo_SubsceneComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86B30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86B30))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86B48, "SubsceneComponent");
    __cxa_guard_release(&qword_26AF86B30);
  }
  return &unk_26AF86B48;
}

void re::ecs2::initInfo_SubsceneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x88FEEDB7C0BE1FE2;
  v13[1] = "SubsceneComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_214, memory_order_acquire) & 1) == 0)
  {
    float v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_214);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86B38 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "m_subscene";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF86B40 = v11;
      __cxa_guard_release(&_MergedGlobals_214);
    }
  }
  *((void *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF86B38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SubsceneComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SubsceneComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SubsceneComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SubsceneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::SubsceneComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F12B8;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::SubsceneComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::SubsceneComponent>(uint64_t a1)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F12B8;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::SubsceneComponent>(void *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SubsceneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SubsceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SubsceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SubsceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SubsceneComponent>, this);
}

uint64_t re::ecs2::SubsceneComponent::setSubscene(uint64_t a1, uint64_t *a2)
{
  float v4 = *(re::ecs2::ECSSerialization **)(a1 + 16);
  (*(void (**)(void))(*((void *)v4 + 38) + 16))();
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)v4 + 312);
  uint64_t result = re::AssetHandle::operator=(a1 + 32, a2);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    unsigned int v8 = atomic_load((unsigned int *)(v7 + 704));
    if (v8 == 2)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9) {
        uint64_t v10 = *(AssetService **)(v9 + 24);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t result = re::ecs2::ECSSerialization::loadFromAsset(v4, v10, (AssetService *)(a1 + 32), v6);
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  return result;
}

void *re::ecs2::allocInfo_LinkedTLEComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_215, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_215))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86BD8, "LinkedTLEComponent");
    __cxa_guard_release(&_MergedGlobals_215);
  }
  return &unk_26AF86BD8;
}

void re::ecs2::initInfo_LinkedTLEComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x181663CBD41226D2;
  v9[1] = "LinkedTLEComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86BD0, memory_order_acquire) & 1) == 0)
  {
    float v4 = (re *)__cxa_guard_acquire(&qword_26AF86BD0);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86BC8 = v7;
      __cxa_guard_release(&qword_26AF86BD0);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF86BC8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::LinkedTLEComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::LinkedTLEComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LinkedTLEComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LinkedTLEComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::LinkedTLEComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F43A0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::LinkedTLEComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::LinkedTLEComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F43A0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::LinkedTLEComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_LinkedTLEComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LinkedTLEComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LinkedTLEComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LinkedTLEComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LinkedTLEComponent>, this);
}

void *re::ecs2::allocInfo_ColliderComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_216, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_216))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86C90, "ColliderComponent");
    __cxa_guard_release(&_MergedGlobals_216);
  }
  return &unk_26AF86C90;
}

void re::ecs2::initInfo_ColliderComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v29[0] = 0x92DE29B139D12E92;
  v29[1] = "ColliderComponent";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86C58, memory_order_acquire) & 1) == 0)
  {
    float v4 = (re *)__cxa_guard_acquire(&qword_26AF86C58);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86C60 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      long long v10 = re::introspect_AssetHandle((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "shape";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF86C68 = v11;
      long long v12 = re::introspectionAllocator((re *)v11);
      long long v14 = re::introspect_CollisionObjectType((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "type";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x3800000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF86C70 = v15;
      uint64_t v16 = re::introspectionAllocator((re *)v15);
      uint64_t v18 = re::introspect_uint32_t((re *)1, v17);
      uint64_t v19 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, 72, 8);
      *(_DWORD *)uint64_t v19 = 1;
      *(void *)(v19 + 8) = "group";
      *(void *)(v19 + 16) = v18;
      *(void *)(v19 + 24) = 0;
      *(void *)(v19 + 32) = 0x4000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_26AF86C78 = v19;
      unint64_t v20 = re::introspectionAllocator((re *)v19);
      uint64_t v22 = re::introspect_uint32_t((re *)1, v21);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v20 + 32))(v20, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "mask";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x4400000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF86C80 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      unint64_t v26 = re::introspect_uint32_t((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "interactionType";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x3C00000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF86C88 = v27;
      __cxa_guard_release(&qword_26AF86C58);
    }
  }
  *((void *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((void *)this + 8) = &qword_26AF86C60;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ColliderComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ColliderComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ColliderComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ColliderComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v28 = v30;
}

uint64_t re::internal::defaultConstruct<re::ecs2::ColliderComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ColliderComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ColliderComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ColliderComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ColliderComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ColliderComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ColliderComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ColliderComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ColliderComponent>, this);
}

void re::ecs2::ColliderComponent::removeFromSimulation(re::ecs2::ColliderComponent *this)
{
  v11[4] = *MEMORY[0x263EF8340];
  if (*((void *)this + 12))
  {
    float v2 = (id *)((char *)this + 160);
    WeakRetained = objc_loadWeakRetained((id *)this + 20);
    if (WeakRetained)
    {
      float v4 = WeakRetained;
      uint64_t v5 = *((void *)this + 12);
      uint64_t v6 = *((void *)this + 13);
      v11[0] = &unk_26E6FBC90;
      v11[1] = v6;
      v11[3] = v11;
      v10[3] = v10;
      uint64_t v9 = v5;
      v10[0] = &unk_26E6FBC90;
      v10[1] = v6;
      std::__function::__value_func<void ()(re::CollisionObject *)>::~__value_func[abi:nn180100](v11);
      std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>>::operator=[abi:nn180100]((uint64_t *)this + 15, &v9);
      std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>>::~unique_ptr[abi:nn180100](&v9);
      uint64_t v7 = v4[6];
      long long v8 = (re::CollisionObject *)*((void *)this + 12);
      re::ContactSetCollection::remove((re::ContactSetCollection *)(*(void *)(v7 + 128) + 72), v8);
      (*(void (**)(void, re::CollisionObject *))(**(void **)(v7 + 128) + 200))(*(void *)(v7 + 128), v8);
      *((void *)v8 + 7) = 0;
      objc_destroyWeak(v2);
      *((void *)this + 20) = 0;
    }
    *((void *)this + 12) = 0;
  }
}

re::CollisionObject **re::ecs2::ColliderComponent::setUnmanagedCollisionObject(re::CollisionObject **this, re::CollisionObject *a2)
{
  if (this[12] != a2)
  {
    uint64_t v3 = this;
    re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)this);
    v3[12] = a2;
    return (re::CollisionObject **)re::AssetHandle::operator=((uint64_t)(v3 + 9), (uint64_t *)v3 + 4);
  }
  return this;
}

uint64_t *std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>>::operator=[abi:nn180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(re::CollisionObject *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  std::__function::__value_func<void ()(re::CollisionObject *)>::operator=[abi:nn180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t re::AssetHandle::asset<re::CollisionShapeAsset>(re::CollisionShapeAsset *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  float v2 = re::CollisionShapeAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = re::AssetHandle::assetInfo(a1);
      if (v6[17]) {
        uint64_t v7 = (char *)v6[18];
      }
      else {
        uint64_t v7 = (char *)v6 + 137;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

BOOL re::ecs2::ColliderComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v49[0] = v12,
        (v49[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v46, a5, 0);
    unint64_t v15 = v46;
    unint64_t v14 = v47;
    unint64_t v46 = a4;
    unint64_t v47 = v15;
    unint64_t v48 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v16 = (re *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v47);
        uint64_t v17 = *(void *)v16;
        uint64_t v18 = *(void *)(*(void *)v16 + 16);
        uint64_t v19 = *(unsigned __int16 *)(v18 + 82);
        if (!*(_WORD *)(v18 + 82)) {
          goto LABEL_20;
        }
        unint64_t v20 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v21 = vld1q_dup_s16(v20);
        uint64_t v22 = *(int16x8_t **)(v18 + 88);
        int v23 = 1;
        uint64_t v24 = v22;
        uint64_t v25 = *(unsigned __int16 *)(v18 + 82);
        while (1)
        {
          uint16x8_t v26 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v21, *v24), (int8x16_t)xmmword_23436BBD0);
          v26.i16[0] = vmaxvq_u16(v26);
          if (v26.i32[0]) {
            break;
          }
          v23 -= 8;
          ++v24;
          if (!--v25) {
            goto LABEL_13;
          }
        }
        if (v26.u16[0] - v23 < *(unsigned __int16 *)(v18 + 80))
        {
          unint64_t v27 = v46;
          unint64_t v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v47);
          uint64_t v29 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
          unint64_t v30 = *(void *)(a3 + 32);
          goto LABEL_36;
        }
LABEL_13:
        uint64_t v31 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        int16x8_t v32 = vld1q_dup_s16(v31);
        int v33 = 1;
        while (1)
        {
          uint16x8_t v34 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v32, *v22), (int8x16_t)xmmword_23436BBD0);
          v34.i16[0] = vmaxvq_u16(v34);
          if (v34.i32[0]) {
            break;
          }
          v33 -= 8;
          ++v22;
          if (!--v19) {
            goto LABEL_20;
          }
        }
        if (v34.u16[0] - v33 < *(unsigned __int16 *)(v18 + 80))
        {
          uint64_t v35 = *re::ecsComponentsLogObjects(v16);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            __int16 v45 = 0;
            _os_log_error_impl(&dword_233120000, v35, OS_LOG_TYPE_ERROR, "Collider component cannot exist on the same entity that contains a character controller component. Deactivating collider component.", (uint8_t *)&v45, 2u);
          }
        }
        else
        {
LABEL_20:
          uint64_t v36 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v49, v18);
          if (v36) {
            uint64_t v37 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v36);
          }
          else {
            uint64_t v37 = 0;
          }
          if ((*(unsigned char *)(v18 + 288) & 1) != 0 && *(void *)(v17 + 40) && v37 != 0)
          {
            WeakRetained = (char *)objc_loadWeakRetained((id *)(v17 + 160));
            if (WeakRetained)
            {
              v42 = WeakRetained - 8;
            }
            else
            {
              v42 = 0;
            }
            if (v42 != (char *)v37) {
              re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
            }
            unint64_t v27 = v46;
            unint64_t v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v47);
            uint64_t v29 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
            unint64_t v30 = *(void *)(a3 + 40);
LABEL_36:
            re::ecs2::ComponentBucketsBase::moveComponent(v29, v27, v28, v30);
            goto LABEL_37;
          }
        }
        unint64_t v39 = v46;
        unint64_t v40 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v47);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v39, v40, *(void *)(a3 + 32));
        re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
LABEL_37:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v47);
      }
      while (v47 != a5 || (unsigned __int16)v48 != 0xFFFF || WORD1(v48) != 0xFFFF);
    }
    BOOL v43 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v43 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50);
  return v43;
}

BOOL re::ecs2::ColliderComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54, 3047, a1);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (!v9
    || (uint64_t v10 = v9,
        uint64_t v11 = *(void *)(a3 + 8),
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9),
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 40))(v10, v11),
        v53[0] = v12,
        (v53[1] = v13) == 0))
  {
    BOOL v14 = 0;
    goto LABEL_8;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  unint64_t v50 = a4;
  uint64_t v51 = *(void *)buf;
  uint64_t v52 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 0xFFFF0000)
  {
    while (1)
    {
      uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v51);
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = (re::CollisionShapeAsset *)(*(void *)v16 + 32);
      uint64_t v19 = *(void *)(*(void *)v16 + 40);
      if (!v19
        || (unint64_t v20 = *(re::ecs2::TransformComponent ***)(v17 + 16), v21 = atomic_load((unsigned int *)(v19 + 704)),
                                                                 v21 != 2))
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(*(void *)v16 + 32));
        re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
        goto LABEL_23;
      }
      uint64_t v22 = *(void *)(v17 + 96);
      if (!v22) {
        break;
      }
      int v23 = *(_DWORD *)(v22 + 88);
      if (*(void *)(v17 + 80) != *(void *)(v17 + 40) || v23 != *(_DWORD *)(v17 + 60)) {
        break;
      }
LABEL_34:
      unint64_t v45 = v50;
      unint64_t v46 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v51);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v45, v46, *(void *)(a3 + 48));
LABEL_23:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v51);
      if (v51 == a5 && (unsigned __int16)v52 == 0xFFFF && WORD1(v52) == 0xFFFF) {
        goto LABEL_6;
      }
    }
    uint64_t v25 = (float32x4_t *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v53, *(void *)(v17 + 16));
    re::ecs2::TransformComponent::worldMatrix4x4F(v20, (const re::ecs2::Entity *)1, buf);
    re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v25, (uint64_t)buf, v49);
    *(_OWORD *)buf = 0u;
    long long v55 = 0u;
    float32x4_t v56 = (float32x4_t)xmmword_23435FBB0;
    uint16x8_t v26 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)v49, (int32x4_t *)buf, &v56, &v55);
    long long v27 = v55;
    v28.i64[0] = __PAIR64__(v55, DWORD1(v55));
    v28.i64[1] = __PAIR64__(*(unsigned int *)buf, DWORD2(v55));
    if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(v28), (int8x16_t)vcgezq_f32(v28)))) & 0xF) != 0|| (float32x4_t v29 = v56, v30 = (int8x16_t)vmulq_f32(v56, v56), v31 = vaddv_f32(vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL))), v31 != 1.0)&& fabsf(v31 + -1.0) > 0.00001)
    {
      int16x8_t v32 = *re::ecsComponentsLogObjects(v26);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v32, OS_LOG_TYPE_ERROR, "NaN or non-unit rotation detected in transform (Collider). Skipping.", buf, 2u);
      }
      re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
      unint64_t v33 = v50;
      unint64_t v34 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v51);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v33, v34, *(void *)(a3 + 32));
      goto LABEL_23;
    }
    uint64_t v48 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation((re::ecs2::PhysicsSimulationData *)v25);
    re::ecs2::ColliderComponent::removeFromSimulation((re::ecs2::ColliderComponent *)v17);
    unint64_t v36 = *(void *)(re::AssetHandle::asset<re::CollisionShapeAsset>(v18) + 8);
    re::AssetHandle::operator=(v17 + 72, (uint64_t *)v18);
    unint64_t v37 = v36;
    uint64_t v38 = *(void *)(v17 + 120);
    unint64_t v39 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) >> 27));
    unint64_t v40 = *(unsigned int *)(v17 + 60);
    unint64_t v41 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v40 ^ (v40 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v40 ^ (v40 >> 30))) >> 27));
    uint64_t v42 = (((v39 ^ (v39 >> 31)) << 6) + ((v39 ^ (v39 >> 31)) >> 2) + (v41 ^ (v41 >> 31)) - 0x61C8864680B583E9) ^ v39 ^ (v39 >> 31);
    if (v38)
    {
      uint64_t v43 = *(void *)(v17 + 112);
      *(void *)(v17 + 120) = 0;
      if (v42 == v43) {
        goto LABEL_33;
      }
      unint64_t v47 = v37;
      std::function<void ()(re::CollisionObject *)>::operator()(v17 + 128, v38);
      unint64_t v37 = v47;
      unint64_t v40 = *(unsigned int *)(v17 + 60);
    }
    else
    {
      *(void *)(v17 + 120) = 0;
    }
    *(_OWORD *)buf = v27;
    float32x4_t v58 = v29;
LABEL_33:
    *(void *)(v17 + 96) = v38;
    *(void *)(v17 + 112) = v42;
    *(void *)(v38 + 40) = *(void *)(v17 + 16);
    objc_storeWeak((id *)(v17 + 160), (id)(v48 + 8));
    uint64_t v44 = *(void *)(*(void *)(v48 + 56) + 128);
    *(void *)(*(void *)(v17 + 96) + 56) = v44;
    (*(void (**)(uint64_t))(*(void *)v44 + 192))(v44);
    re::AssetHandle::operator=(v17 + 72, (uint64_t *)v18);
    goto LABEL_34;
  }
LABEL_6:
  BOOL v14 = *(_DWORD *)(a5 + 40) != 0;
LABEL_8:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v54);
  return v14;
}

BOOL re::ecs2::ColliderComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v38, 3047, a1);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (v11
    && (uint64_t v12 = v11,
        uint64_t v13 = *(void *)(a3 + 8),
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11),
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 40))(v12, v13),
        v37[0] = v14,
        (v37[1] = v15) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v42, a5, 0);
    unint64_t v35 = a4;
    float32x4_t v36 = v42[0];
    if (v42[0].i64[0] != a5 || v42[0].u16[4] != 0xFFFFLL || (v42[0].i32[2] & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        uint64_t v17 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v36);
        uint64_t v18 = *(re::ecs2::ColliderComponent **)v17;
        uint64_t v19 = *(re::ecs2::TransformComponent ***)(*(void *)v17 + 16);
        unint64_t v20 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v37, (uint64_t)v19);
        unsigned int v21 = (float32x4_t *)v20;
        if (!a6 || re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v20) == a6)
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v19, (const re::ecs2::Entity *)1, v42);
          re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v21, (uint64_t)v42, v34);
          float32x4_t v41 = 0u;
          float32x4_t v39 = 0u;
          float32x4_t v40 = (float32x4_t)xmmword_23435FBB0;
          uint64_t v22 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)v34, (int32x4_t *)&v41, &v40, &v39);
          v42[0] = v41;
          v42[1] = v40;
          v42[2] = v39;
          v23.i64[0] = __PAIR64__(v39.u32[0], v39.u32[1]);
          v23.i64[1] = __PAIR64__(v41.u32[0], v39.u32[2]);
          if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_2343978C0, vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23)))) & 0xF) == 0&& ((int8x16_t v24 = (int8x16_t)vmulq_f32(v40, v40), v25 = vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))), v25 == 1.0)|| fabsf(v25 + -1.0) <= 0.00001))
          {
            v34[0] = v39;
            v34[1] = v40;
            float32x4_t v29 = *(_OWORD **)(*((void *)v18 + 12) + 16);
            float32x4_t v30 = v40;
            v29[1] = v39;
            void v29[2] = v30;
            (*(void (**)(_OWORD *, _OWORD *))(*(void *)v29 + 64))(v29, v34);
            re::CollisionObject::setScale(*((void *)v18 + 12), v42);
            float v31 = (void *)*((void *)v18 + 12);
            uint64_t v32 = *((void *)v18 + 8);
            if (v31[4] != v32)
            {
              v31[4] = v32;
              (*(void (**)(void *))(*v31 + 80))(v31);
            }
          }
          else
          {
            uint16x8_t v26 = *re::ecsComponentsLogObjects(v22);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              LOWORD(v34[0]) = 0;
              _os_log_error_impl(&dword_233120000, v26, OS_LOG_TYPE_ERROR, "NaN or non-unit rotation detected in transform (PhysicsSystem_Collider). Skipping.", (uint8_t *)v34, 2u);
            }
            re::ecs2::ColliderComponent::removeFromSimulation(v18);
            unint64_t v27 = v35;
            unint64_t v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v36);
            re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v27, v28, *(void *)(a3 + 32));
          }
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v36);
      }
      while (v36.i64[0] != a5 || v36.u16[4] != 0xFFFF || v36.u16[5] != 0xFFFF);
    }
    BOOL v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    BOOL v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v38);
  return v16;
}

uint64_t re::ecs2::ColliderComponentStateImpl::dependsOnComponents(re::ecs2::ColliderComponentStateImpl *this)
{
  return *((void *)this + 3);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ColliderComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    uint64_t v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::ColliderComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::ColliderComponent>(uint64_t a1)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 160) = 0;
  float v2 = (id *)(a1 + 160);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6DFC48;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  *(unsigned char *)(v3 + 56) = 0;
  *(void *)(v3 + 60) = 0x100000000;
  *(_DWORD *)(v3 + 68) = -1;
  *(void *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)(v3 + 120) = 0;
  objc_initWeak(v2, 0);
  return a1;
}

void std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26E6FBC90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6FBC90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::operator()(uint64_t result, void *a2)
{
  uint64_t v2 = (void (***)(void))*a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(result + 8);
    (**v2)(*a2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v3 + 40);
    return v4(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1},std::allocator<std::unique_ptr<re::CollisionObject,std::function<void ()(re::CollisionObject*)>> re::toUniquePtr<re::CollisionObject>(re::CollisionObject*,re::Allocator *)::{lambda(re::CollisionObject*)#1}>,void ()(re::CollisionObject*)>::target_type()
{
}

void *std::__function::__value_func<void ()(re::CollisionObject *)>::operator=[abi:nn180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(re::CollisionObject *)>::operator=[abi:nn180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(re::CollisionObject *)>::operator=[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 re::ecs2::VideoProxyComponent::impl::deinitPixelBufferGroup(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a1 + 160))
  {
    uint64_t v5 = (re::VideoAsset *)(a1 + 152);
    if (a3 == 1)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)(a1 + 152));
      ++*(_DWORD *)(*(void *)(a1 + 160) + 260);
      unint64_t v7 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>(v5);
      if (!v7) {
        goto LABEL_9;
      }
      re::VideoAsset::clearFutureUserProvidedVideoPixelBuffers(v7);
      goto LABEL_8;
    }
    if (!a3)
    {
      re::AssetHandle::mutateAssetCommon((re::AssetHandle *)(a1 + 152));
      ++*(_DWORD *)(*(void *)(a1 + 160) + 260);
      uint64_t v6 = (re::VideoAsset *)re::AssetHandle::asset<re::VideoAsset>(v5);
      if (v6)
      {
        re::VideoAsset::clearCurrentUserProvidedVideoPixelBuffers(v6);
LABEL_8:
        uint64_t v8 = *(void *)(a1 + 160);
        *(unsigned char *)(v8 + 256) = 1;
        re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v8);
        re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(*(re::internal::AssetEntry **)(a1 + 160));
      }
    }
  }
LABEL_9:
  if (*(void *)a2)
  {
    unint64_t v9 = 0;
    do
      CVPixelBufferRelease(*(CVPixelBufferRef *)(a2 + 8 * v9++ + 16));
    while (v9 < *(void *)a2);
  }
  *(void *)a2 = 0;
  ++*(_DWORD *)(a2 + 8);
  uint64_t v10 = *(const void **)(a2 + 32);
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(a2 + 32) = 0;
  uint64_t v11 = MEMORY[0x263F01090];
  __n128 result = *(__n128 *)MEMORY[0x263F01090];
  *(_OWORD *)(a2 + 44) = *MEMORY[0x263F01090];
  *(void *)(a2 + 60) = *(void *)(v11 + 16);
  return result;
}

uint64_t re::ecs2::VideoProxyComponent::impl::generateAsset(re::ecs2::VideoProxyComponent::impl *this, re::AssetManager *a2)
{
  re::VideoAsset::makeVideoMutableMemoryAsset(v12, a2, (AssetService *)a2);
  uint64_t v3 = (re::AssetHandle *)re::AssetHandle::operator=((uint64_t)this + 152, v12);
  re::AssetHandle::mutateAssetCommon(v3);
  ++*(_DWORD *)(*((void *)this + 20) + 260);
  uint64_t v4 = re::AssetHandle::asset<re::VideoAsset>((re::ecs2::VideoProxyComponent::impl *)((char *)this + 152));
  if (v4)
  {
    uint64_t v5 = (re::VideoAsset *)v4;
    int v18 = 0;
    uint64_t v6 = *((void *)this + 1);
    memcpy(v19, (char *)this + 24, 8 * v6);
    uint64_t v17 = v6;
    long long v7 = *(_OWORD *)((char *)this + 56);
    v19[1] = *(_OWORD *)((char *)this + 40);
    v19[2] = v7;
    int v20 = *((_DWORD *)this + 18);
    re::VideoAsset::setCurrentUserProvidedVideoPixelBuffers(v5, (uint64_t)&v17);
    uint64_t v17 = 0;
    ++v18;
    int v14 = 0;
    uint64_t v8 = *((void *)this + 10);
    memcpy(v15, (char *)this + 96, 8 * v8);
    uint64_t v13 = v8;
    long long v9 = *((_OWORD *)this + 8);
    v15[1] = *((_OWORD *)this + 7);
    v15[2] = v9;
    int v16 = *((_DWORD *)this + 36);
    re::VideoAsset::setFutureUserProvidedVideoPixelBuffers(v5, (uint64_t)&v13);
    *((void *)v5 + 27) = 0;
    uint64_t v10 = *((void *)this + 20);
    *(unsigned char *)(v10 + 256) = 1;
    re::internal::AssetEntry::updateMutatedRuntimeAssetSize((os_unfair_lock_s *)v10);
    re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(*((re::internal::AssetEntry **)this + 20));
  }
  re::AssetHandle::payloadDidChangeIfPossible((re::ecs2::VideoProxyComponent::impl *)((char *)this + 152));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  return (uint64_t)this + 152;
}

void re::ecs2::VideoProxyComponent::impl::addAttachmentsToVideoComponent(re::ecs2::VideoProxyComponent::impl *this, re::ecs2::VideoComponent *a2)
{
  *(void *)&v30.var0 = 0xC49C914A9995F024;
  v30.var1 = "REVideoAttachmentTextureVideoBlur";
  v31[0] = 0;
  v31[1] = "";
  a2 = (re::ecs2::VideoComponent *)((char *)a2 + 80);
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v30);
  re::StringID::destroyString((re::StringID *)v31);
  re::StringID::destroyString((re::StringID *)&v30);
  *(void *)&v28.var0 = 0xFFB9D6614348A962;
  v28.var1 = "REVideoAttachmentChannelID1TexturePlane0";
  v29[0] = 0;
  v29[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v28);
  re::StringID::destroyString((re::StringID *)v29);
  re::StringID::destroyString((re::StringID *)&v28);
  *(void *)&v26.var0 = 0xFFB9D6614348A964;
  v26.var1 = "REVideoAttachmentChannelID1TexturePlane1";
  v27[0] = 0;
  v27[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v26);
  re::StringID::destroyString((re::StringID *)v27);
  re::StringID::destroyString((re::StringID *)&v26);
  *(void *)&v24.var0 = 0xFFB9D6614348A966;
  v24.var1 = "REVideoAttachmentChannelID1TexturePlane2";
  v25[0] = 0;
  v25[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v24);
  re::StringID::destroyString((re::StringID *)v25);
  re::StringID::destroyString((re::StringID *)&v24);
  *(void *)&v22.var0 = 0xA572F05B07043CA0;
  v22.var1 = "REVideoAttachmentChannelID2TexturePlane0";
  v23[0] = 0;
  v23[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v22);
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v22);
  *(void *)&v20.var0 = 0xA572F05B07043CA2;
  v20.var1 = "REVideoAttachmentChannelID2TexturePlane1";
  v21[0] = 0;
  v21[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v20);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)&v20);
  *(void *)&v18.var0 = 0xA572F05B07043CA4;
  v18.var1 = "REVideoAttachmentChannelID2TexturePlane2";
  v19[0] = 0;
  v19[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v18);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v16.var0 = 0x83807E236D5174B2;
  v16.var1 = "REVideoAttachmentConstantYCbCrMatrix";
  v17[0] = 0;
  v17[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v16);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)&v16);
  *(void *)&v14.var0 = 0x652E145D102D3908;
  v14.var1 = "REVideoAttachmentConstantImageFunction";
  v15[0] = 0;
  v15[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v14);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)&v14);
  *(void *)&v12.var0 = 0x963DA5D75AB5D342;
  v12.var1 = "REVideoAttachmentSpill";
  v13[0] = 0;
  v13[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(a2, &v12);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)&v12);
}

unsigned char *re::ecs2::VideoProxyComponent::impl::update(unsigned char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 && a5)
  {
    long long v7 = result;
    if (!*result)
    {
      uint64_t v8 = (re::ecs2::VideoProxyComponent::impl *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      *long long v7 = 1;
      re::ecs2::VideoProxyComponent::impl::addAttachmentsToVideoComponent(v8, v8);
    }
    __n128 result = (unsigned char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      long long v9 = result;
      result[291] = 1;
      re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)(v7 + 152));
      re::AssetHandle::operator=((uint64_t)(v9 + 168), v10);
      v9[73] = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
      __n128 result = (unsigned char *)re::AssetHandle::operator=((uint64_t)(v9 + 32), (uint64_t *)(a3 + 32));
      v9[308] = *(unsigned char *)(*(void *)(a3 + 56) + 196);
    }
  }
  return result;
}

float32x2_t re::ecs2::VideoProxyComponent::impl::postBufferRetrievalUpdate(float32x2_t *this, float32x2_t result, re::ecs2::Entity *a3, re::AssetManager *a4)
{
  if (a3)
  {
    if (a4)
    {
      uint64_t v5 = (re::ecs2::Entity *)((char *)a3 + 32);
      uint64_t v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v8)
        {
          long long v9 = (float32x2_t *)v8;
          uint64_t v10 = *(void *)(v7 + 56);
          if (*(void *)(v10 + 160)
            && (uint64_t v11 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v10 + 152))) != 0)
          {
            uint64_t v12 = *(void *)(v11 + 192);
            if (v12) {
              float v13 = *(float *)(v12 + 2624);
            }
            else {
              float v13 = 0.0;
            }
            if (fabsf(v13) < 0.000001) {
              int v14 = 1;
            }
            else {
              int v14 = 2;
            }
          }
          else
          {
            int v14 = 1;
          }
          float32x2_t v15 = this[22];
          float32x2_t v16 = this[23];
          __int32 v17 = this[24].i32[0];
          v9[28] = v15;
          v9[29] = v16;
          __n128 result = vmul_f32(vadd_f32(v15, v16), (float32x2_t)0x3F0000003F000000);
          v9[30] = result;
          v9[31].i32[0] = v17;
          v9[31].i32[1] = v14;
        }
      }
    }
  }
  return result;
}

void *re::ecs2::allocInfo_VideoProxyComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_217, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_217))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86D20, "VideoProxyComponent");
    __cxa_guard_release(&_MergedGlobals_217);
  }
  return &unk_26AF86D20;
}

void re::ecs2::initInfo_VideoProxyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x6B0AC0336B6E06D4;
  v9[1] = "VideoProxyComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86D18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86D18);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86D10 = v7;
      __cxa_guard_release(&qword_26AF86D18);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF86D10;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoProxyComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoProxyComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoProxyComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoProxyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

re::ecs2::VideoProxyComponent *re::internal::defaultConstruct<re::ecs2::VideoProxyComponent>(int a1, int a2, re::ecs2::VideoProxyComponent *this)
{
  return re::ecs2::VideoProxyComponent::VideoProxyComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoProxyComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoProxyComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoProxyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoProxyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoProxyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoProxyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoProxyComponent>, this);
}

re::ecs2::VideoProxyComponent *re::ecs2::VideoProxyComponent::VideoProxyComponent(re::ecs2::VideoProxyComponent *this)
{
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6FBD20;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 32) = 0;
  uint64_t v3 = re::globalAllocators((re *)v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3[2] + 32))(v3[2], 200, 8);
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_DWORD *)(v4 + 48) = -1;
  uint64_t v5 = (long long *)MEMORY[0x263F01090];
  *(_DWORD *)(v4 + 120) = -1;
  *(void *)(v4 + 184) = 0x3F8000003F800000;
  *(void *)(v4 + 192) = 0;
  long long v6 = *v5;
  *(_OWORD *)(v4 + 52) = *v5;
  uint64_t v7 = *((void *)v5 + 2);
  *(void *)(v4 + 68) = v7;
  *(void *)(v4 + 140) = v7;
  *(_OWORD *)(v4 + 124) = v6;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(unsigned char *)(v4 + 196) = 0;
  *((void *)this + 7) = v4;
  return this;
}

void re::ecs2::VideoProxyComponent::~VideoProxyComponent(re::ecs2::VideoProxyComponent *this)
{
  *(void *)this = &unk_26E6FBD20;
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = re::globalAllocators(this)[2];
    re::ecs2::VideoProxyComponent::impl::deinitPixelBufferGroup(v2, v2 + 8, 0);
    re::ecs2::VideoProxyComponent::impl::deinitPixelBufferGroup(v2, v2 + 80, 1);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 + 152));
    *(void *)(v2 + 80) = 0;
    ++*(_DWORD *)(v2 + 88);
    *(void *)(v2 + 8) = 0;
    ++*(_DWORD *)(v2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v2);
  }
  re::AssetHandle::~AssetHandle((re::ecs2::VideoProxyComponent *)((char *)this + 32));
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::VideoProxyComponent::~VideoProxyComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void re::ecs2::VideoProxyComponent::update(uint64_t a1, uint64_t a2, const re::AssetHandle *a3, uint64_t a4)
{
  uint64_t v7 = *(unsigned char **)(a1 + 56);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v9, a3);
  re::ecs2::VideoProxyComponent::impl::update(v7, a2, a1, v8, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::AssetHandle::asset<re::VideoAsset>(re::VideoAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = re::VideoAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      long long v6 = v4;
      uint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        uint64_t v8 = (char *)v7[18];
      }
      else {
        uint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      long long v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

void *re::ecs2::allocInfo_AnimationSceneService(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_218))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86DA0, "AnimationSceneService");
    __cxa_guard_release(&_MergedGlobals_218);
  }
  return &unk_26AF86DA0;
}

void re::ecs2::initInfo_AnimationSceneService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x7787547DA612D41ALL;
  v5[1] = "AnimationSceneService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AnimationSceneService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

uint64_t re::ecs2::introspect_AnimationSceneService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationSceneService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationSceneService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationSceneService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationSceneService>, this);
}

void re::ecs2::CARESortingDebugging::dumpSorting(re::ecs2::CARESortingDebugging *this, __CFString *a2, const re::ecs2::CARESortingManager *a3)
{
  uint64_t v190 = *MEMORY[0x263EF8340];
  long long v4 = a2;
  v155 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 2, "");
  uint64_t v185 = 0;
  uint64_t v186 = 0;
  int v187 = 1;
  uint64_t v188 = 0;
  v189 = 0;
  *(void *)&long long v180 = &v185;
  obuint64_t j = v4;
  uint64_t v159 = *((unsigned int *)a3 + 22);
  uint64_t v5 = 0;
  if (v159)
  {
    long long v6 = (int *)(*((void *)a3 + 9) + 8);
    while (1)
    {
      int v7 = *v6;
      v6 += 46;
      if (v7 < 0) {
        break;
      }
      if (v159 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)a3 + 22);
        break;
      }
    }
  }
  v171 = a3;
  if (v159 != v5)
  {
    uint64_t v8 = v5;
    unsigned int v9 = *((_DWORD *)a3 + 22);
    do
    {
      int v162 = v5;
      uint64_t v10 = *((void *)a3 + 9) + 184 * v8;
      uint64_t v11 = v10 + 24;
      id v172 = (id)*(unsigned int *)(v10 + 56);
      uint64_t v12 = 0;
      if (v172)
      {
        float v13 = (int *)(*(void *)(v10 + 40) + 8);
        while (1)
        {
          int v14 = *v13;
          v13 += 6;
          if (v14 < 0) {
            break;
          }
          if (v172 == (id)++v12)
          {
            LODWORD(v12) = v172;
            break;
          }
        }
      }
      if (v172 != v12)
      {
        uint64_t v15 = v12;
        uint64_t v168 = v11;
        do
        {
          uint64_t v16 = *(void *)(v11 + 16) + 24 * v15;
          uint64_t v19 = *(void *)(v16 + 16);
          __int32 v17 = (uint64_t *)(v16 + 16);
          uint64_t v18 = v19;
          uint64_t v20 = *(unsigned int *)(v19 + 232);
          if (v20)
          {
            uint64_t v21 = 0;
            StringID v22 = (int *)(*(void *)(v18 + 216) + 8);
            while (1)
            {
              int v23 = *v22;
              v22 += 6;
              if (v23 < 0) {
                break;
              }
              if (v20 == ++v21)
              {
                LODWORD(v21) = v20;
                break;
              }
            }
          }
          else
          {
            LODWORD(v21) = 0;
          }
          if (v20 != v21)
          {
            v165 = v17;
            uint64_t v24 = v21;
            do
            {
              uint64_t v25 = *(void *)(v18 + 216) + 24 * v24;
              uint64_t v28 = *(void *)(v25 + 16);
              uint64_t v27 = v25 + 16;
              uint64_t v26 = v28;
              if (*(_DWORD *)(v28 + 300))
              {
                uint64_t v29 = *(unsigned int *)(v26 + 304);
                if (v29)
                {
                  uint64_t v30 = 0;
                  float v31 = (int *)(*(void *)(v26 + 288) + 8);
                  while (1)
                  {
                    int v32 = *v31;
                    v31 += 6;
                    if (v32 < 0) {
                      break;
                    }
                    if (v29 == ++v30)
                    {
                      LODWORD(v30) = *(_DWORD *)(v26 + 304);
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v30) = 0;
                }
                if (v29 != v30)
                {
                  uint64_t v33 = v30;
                  do
                  {
                    re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()((uint64_t *)&v180, *(void *)(*(void *)(v26 + 288) + 24 * v33 + 16));
                    if (*(_DWORD *)(v26 + 304) <= (v30 + 1)) {
                      int v34 = v30 + 1;
                    }
                    else {
                      int v34 = *(_DWORD *)(v26 + 304);
                    }
                    int v35 = v30;
                    while (1)
                    {
                      uint64_t v33 = (v35 + 1);
                      if (v34 - 1 == v35) {
                        break;
                      }
                      ++v35;
                      LODWORD(v30) = v33;
                      if ((*(_DWORD *)(*(void *)(v26 + 288) + 24 * v33 + 8) & 0x80000000) != 0) {
                        goto LABEL_40;
                      }
                    }
                    LODWORD(v30) = v34;
LABEL_40:
                    ;
                  }
                  while (v29 != v30);
                  uint64_t v26 = *(void *)v27;
                  LODWORD(v29) = *(_DWORD *)(*(void *)v27 + 304);
                }
                uint64_t v36 = 0;
                if (v29)
                {
                  unint64_t v37 = (int *)(*(void *)(v26 + 288) + 8);
                  while (1)
                  {
                    int v38 = *v37;
                    v37 += 6;
                    if (v38 < 0) {
                      break;
                    }
                    if (v29 == ++v36)
                    {
                      LODWORD(v36) = v29;
                      break;
                    }
                  }
                }
                if (v29 == v36)
                {
                  int v39 = 0;
                }
                else
                {
                  uint64_t v40 = v36;
                  while (1)
                  {
                    uint64_t v41 = *(void *)(*(void *)(v26 + 288) + 24 * v40 + 16);
                    re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()((uint64_t *)&v180, v41);
                    uint64_t v42 = *(void *)(v41 + 208);
                    if (v42)
                    {
                      if (*(void *)(v42 + 32)) {
                        break;
                      }
                    }
                    if (*(_DWORD *)(v26 + 304) <= (v36 + 1)) {
                      int v43 = v36 + 1;
                    }
                    else {
                      int v43 = *(_DWORD *)(v26 + 304);
                    }
                    while (1)
                    {
                      uint64_t v40 = (v36 + 1);
                      if (v43 - 1 == v36) {
                        break;
                      }
                      LODWORD(v36) = v36 + 1;
                      int v44 = v40;
                      if ((*(_DWORD *)(*(void *)(v26 + 288) + 24 * v40 + 8) & 0x80000000) != 0) {
                        goto LABEL_59;
                      }
                    }
                    int v44 = v43;
LABEL_59:
                    LODWORD(v36) = v44;
                    if (v29 == v44)
                    {
                      int v39 = 0;
                      goto LABEL_62;
                    }
                  }
                  int v39 = 1;
LABEL_62:
                  uint64_t v26 = *(void *)v27;
                  LODWORD(v29) = *(_DWORD *)(*(void *)v27 + 304);
                }
                uint64_t v45 = *(void *)(v26 + 288);
                uint64_t v46 = 0;
                if (v29)
                {
                  unint64_t v47 = (int *)(v45 + 8);
                  while (1)
                  {
                    int v48 = *v47;
                    v47 += 6;
                    if (v48 < 0) {
                      break;
                    }
                    if (v29 == ++v46)
                    {
                      LODWORD(v46) = v29;
                      break;
                    }
                  }
                }
                uint64_t v49 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(v45 + 24 * v46 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v49) {
                  int v50 = v39;
                }
                else {
                  int v50 = 0;
                }
                if (v50 == 1)
                {
                  uint64_t v52 = *(void *)(v49 + 176);
                  uint64_t v51 = v49 + 176;
                  uint64_t v53 = v52 ? v51 : v51 - 144;
                  if (!*(unsigned char *)(v53 + 9))
                  {
                    v184[0].n128_u64[0] = (unint64_t)@"Portals z-fighting";
                    v184[0].n128_u64[1] = objc_msgSend(NSString, "stringWithFormat:", @"MeshSortingGroup %llu contains portals but does not use depth bias. Potential z-fighting.", *(void *)v53);
                    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add((uint64_t)&v185, v184);
                  }
                }
              }
              if (*(_DWORD *)(v18 + 232) <= (v21 + 1)) {
                int v54 = v21 + 1;
              }
              else {
                int v54 = *(_DWORD *)(v18 + 232);
              }
              while (1)
              {
                uint64_t v24 = (v21 + 1);
                if (v54 - 1 == v21) {
                  break;
                }
                LODWORD(v21) = v21 + 1;
                int v55 = v24;
                if ((*(_DWORD *)(*(void *)(v18 + 216) + 24 * v24 + 8) & 0x80000000) != 0) {
                  goto LABEL_84;
                }
              }
              int v55 = v54;
LABEL_84:
              LODWORD(v21) = v55;
            }
            while (v20 != v55);
            uint64_t v18 = *v165;
          }
          uint64_t v56 = *(unsigned int *)(v18 + 280);
          a3 = v171;
          uint64_t v57 = 0;
          if (v56)
          {
            float32x4_t v58 = (int *)(*(void *)(v18 + 264) + 8);
            while (1)
            {
              int v59 = *v58;
              v58 += 6;
              if (v59 < 0) {
                break;
              }
              if (v56 == ++v57)
              {
                LODWORD(v57) = *(_DWORD *)(v18 + 280);
                break;
              }
            }
          }
          if (v56 != v57)
          {
            uint64_t v60 = v57;
            do
            {
              re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()((uint64_t *)&v180, *(void *)(*(void *)(v18 + 264) + 24 * v60 + 16));
              if (*(_DWORD *)(v18 + 280) <= (v57 + 1)) {
                int v61 = v57 + 1;
              }
              else {
                int v61 = *(_DWORD *)(v18 + 280);
              }
              int v62 = v57;
              while (1)
              {
                uint64_t v60 = (v62 + 1);
                if (v61 - 1 == v62) {
                  break;
                }
                ++v62;
                LODWORD(v57) = v60;
                if ((*(_DWORD *)(*(void *)(v18 + 264) + 24 * v60 + 8) & 0x80000000) != 0) {
                  goto LABEL_101;
                }
              }
              LODWORD(v57) = v61;
LABEL_101:
              ;
            }
            while (v56 != v57);
          }
          uint64_t v11 = v168;
          if (*(_DWORD *)(v168 + 32) <= (v12 + 1)) {
            int v63 = v12 + 1;
          }
          else {
            int v63 = *(_DWORD *)(v168 + 32);
          }
          while (1)
          {
            uint64_t v15 = (v12 + 1);
            if (v63 - 1 == v12) {
              break;
            }
            LODWORD(v12) = v12 + 1;
            int v64 = v15;
            if ((*(_DWORD *)(*(void *)(v168 + 16) + 24 * v15 + 8) & 0x80000000) != 0) {
              goto LABEL_109;
            }
          }
          int v64 = v63;
LABEL_109:
          LODWORD(v12) = v64;
        }
        while (v172 != v64);
        unsigned int v9 = *((_DWORD *)v171 + 22);
      }
      int v65 = v162;
      if (v9 <= v162 + 1) {
        unsigned int v66 = v162 + 1;
      }
      else {
        unsigned int v66 = v9;
      }
      while (1)
      {
        uint64_t v8 = (v65 + 1);
        if (v66 - 1 == v65) {
          break;
        }
        ++v65;
        unsigned int v67 = v8;
        if ((*(_DWORD *)(*((void *)a3 + 9) + 184 * v8 + 8) & 0x80000000) != 0) {
          goto LABEL_118;
        }
      }
      unsigned int v67 = v66;
LABEL_118:
      LODWORD(v5) = v67;
    }
    while (v159 != v67);
  }
  v68 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 2, "");
  v69 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 4, "");
  if (v186)
  {
    [(__CFString *)obj appendFormat:@"%@Warnings: \n", v68];
    uint64_t v70 = (v187 & 1) != 0 ? &v188 : v189;
    if (v186)
    {
      v71 = &v70[2 * v186];
      do
      {
        uint64_t v72 = *v70;
        uint64_t v73 = v70[1];
        v70 += 2;
        [(__CFString *)obj appendFormat:@"%@⚠️ %@: %@\n", v69, v72, v73];
      }
      while (v70 != v71);
    }
  }

  if (v185)
  {
    if (v186)
    {
      v74 = v189;
      if (v187) {
        v74 = &v188;
      }
      uint64_t v75 = 16 * v186;
      uint64_t v76 = (id *)(v74 + 1);
      do
      {

        v76 += 2;
        v75 -= 16;
      }
      while (v75);
    }
    if ((v187 & 1) == 0) {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v185 + 40))(v185, v189);
    }
  }

  [(__CFString *)obj appendFormat:@"%@DirtyEntities count: %d\n", v155, *((unsigned int *)a3 + 45)];
  [(__CFString *)obj appendFormat:@"%@InactiveEntities count: %d\n", v155, *((unsigned int *)a3 + 57)];
  [(__CFString *)obj appendFormat:@"%@DirtyTransformEntities count: %d\n", v155, re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount];
  [(__CFString *)obj appendFormat:@"%@HierarchicalDirtiedTransformEntities count: %d\n", v155, re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount];
  [(__CFString *)obj appendFormat:@"%@DirtyAnchorEntities count: %d\n", v155, re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount];
  [(__CFString *)obj appendFormat:@"%@DirtyInactiveEntities count: %d\n", v155, re::ecs2::CARESortingDebugging::m_dirtyInactiveEntities];
  [(__CFString *)obj appendFormat:@"%@Cached EntityWorldTransforms count: %d\n", v155, *((unsigned int *)a3 + 119)];
  [(__CFString *)obj appendFormat:@"%@EntitiesRemovedFromSortGroups count: %d\n", v155, re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups];
  [(__CFString *)obj appendFormat:@"%@EntitiesAddedToSortGroups count: %d\n", v155, re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups];
  [(__CFString *)obj appendFormat:@"%@SortGroupsResorted count: %d\n", v155, re::ecs2::CARESortingDebugging::m_sortGroupsResorted];
  [(__CFString *)obj appendFormat:@"%@CodirGroupsWithDirtyEntities count: %d\n", v155, re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities];
  [(__CFString *)obj appendFormat:@"%@SortGroupsRecalculatedOverrides count: %d\n", v155, re::ecs2::CARESortingDebugging::m_sortGroupsRecalculatedOverrides];
  [(__CFString *)obj appendFormat:@"%@EntitiesRecalculatedOverrides count: %d\n", v155, re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides];
  [(__CFString *)obj appendFormat:@"%@EntitiesRecalculatedOverridesMeshSortingComponentDirtied count: %d\n", v155, re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied];
  [(__CFString *)obj appendFormat:@"%@HighestPriorityInGroup: %u\n", v155, re::ecs2::CARESortingDebugging::m_highestPriorityInGroup];
  [(__CFString *)obj appendFormat:@"%@HighestPriorityGroupId: %llu\n", v155, re::ecs2::CARESortingDebugging::m_highestPriorityGroupId];
  [(__CFString *)obj appendFormat:@"%@EntitiesActivated count: %d\n", v155, re::ecs2::CARESortingDebugging::m_entitiesActivated];
  [(__CFString *)obj appendFormat:@"%@EntitiesDeactivated count: %d\n", v155, re::ecs2::CARESortingDebugging::m_entitiesDeactivated];
  [(__CFString *)obj appendFormat:@"%@UISortingComponentActivated count: %d\n", v155, re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated];
  [(__CFString *)obj appendFormat:@"%@UISortingComponentDeactivated count: %d\n", v155, re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated];
  v173 = obj;
  v77 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 2, "");
  v160 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 4, "");
  v78 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 6, "");
  if (qword_26AF86E40 != -1) {
    dispatch_once(&qword_26AF86E40, &__block_literal_global_20);
  }
  id v79 = (id)qword_26AF86E38;
  if ([v79 count])
  {
    v154 = v77;
    [(__CFString *)v173 appendFormat:@"%@Graph:\n", v77];
    long long v182 = 0u;
    long long v183 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    id v153 = v79;
    id obja = v79;
    uint64_t v166 = [obja countByEnumeratingWithState:&v180 objects:&v185 count:16];
    if (v166)
    {
      uint64_t v163 = *(void *)v181;
      do
      {
        for (uint64_t i = 0; i != v166; ++i)
        {
          if (*(void *)v181 != v163) {
            objc_enumerationMutation(obja);
          }
          v81 = *(void **)(*((void *)&v180 + 1) + 8 * i);
          uint64_t v82 = [v81 objectForKey:@"action"];
          v83 = (void *)v82;
          if (v82) {
            [(__CFString *)v173 appendFormat:@"%@%@:\n", v160, v82];
          }
          v169 = v83;
          long long v178 = 0u;
          long long v179 = 0u;
          long long v176 = 0u;
          long long v177 = 0u;
          id v84 = v81;
          uint64_t v85 = [v84 countByEnumeratingWithState:&v176 objects:v184 count:16];
          if (v85)
          {
            uint64_t v86 = v85;
            uint64_t v87 = *(void *)v177;
            do
            {
              for (uint64_t j = 0; j != v86; ++j)
              {
                if (*(void *)v177 != v87) {
                  objc_enumerationMutation(v84);
                }
                v89 = *(__CFString **)(*((void *)&v176 + 1) + 8 * j);
                if (v89 != @"action")
                {
                  v90 = [v84 objectForKey:*(void *)(*((void *)&v176 + 1) + 8 * j)];
                  [(__CFString *)v173 appendFormat:@"%@%@: %@\n", v78, v89, v90];
                }
              }
              uint64_t v86 = [v84 countByEnumeratingWithState:&v176 objects:v184 count:16];
            }
            while (v86);
          }
        }
        uint64_t v166 = [obja countByEnumeratingWithState:&v180 objects:&v185 count:16];
      }
      while (v166);
    }

    a3 = v171;
    id v79 = v153;
    v77 = v154;
  }

  [(__CFString *)v173 appendString:@"\n"];
  [(__CFString *)v173 appendFormat:@"World states: %u\n", *((unsigned int *)a3 + 21)];
  id objb = (id)*((unsigned int *)a3 + 22);
  uint64_t v91 = 0;
  if (objb)
  {
    v92 = (int *)(*((void *)a3 + 9) + 8);
    while (1)
    {
      int v93 = *v92;
      v92 += 46;
      if (v93 < 0) {
        break;
      }
      if (objb == (id)++v91)
      {
        LODWORD(v91) = *((_DWORD *)a3 + 22);
        break;
      }
    }
  }
  if (objb != v91)
  {
    uint64_t v94 = 0;
    uint64_t v95 = v91;
    while (1)
    {
      uint64_t v96 = *((void *)a3 + 9) + 184 * v95;
      uint64_t v97 = v96 + 24;
      uint64_t v98 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 2, "");
      uint64_t v99 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 4, "");
      [(__CFString *)v173 appendFormat:@"%@[%u] World root id: %llu\n", v98, v94, *(void *)(v96 + 16)];
      v167 = (void *)v99;
      [(__CFString *)v173 appendFormat:@"%@Codirectional Groups (aka CAMeshCodirectionalGroup): %u\n", v99, *(unsigned int *)(v96 + 52)];
      uint64_t v100 = *(unsigned int *)(v96 + 56);
      v161 = (void *)v98;
      int v164 = v94;
      uint64_t v101 = 0;
      if (v100)
      {
        v102 = (int *)(*(void *)(v97 + 16) + 8);
        v103 = v173;
        while (1)
        {
          int v104 = *v102;
          v102 += 6;
          if (v104 < 0) {
            break;
          }
          if (v100 == ++v101)
          {
            LODWORD(v101) = v100;
            break;
          }
        }
      }
      else
      {
        v103 = v173;
      }
      if (v100 != v101)
      {
        uint64_t v105 = 0;
        uint64_t v106 = v101;
        do
        {
          uint64_t v107 = *(void *)(*(void *)(v97 + 16) + 24 * v106 + 16);
          if (v107)
          {
            id v108 = (id)(v107 + 8);
            uint64_t v175 = v107;
            id v109 = (id)(v107 + 8);
            re::ecs2::CARESortingDebugging::dumpCodirectionalGroup(v173, &v175, v105, (uint64_t)v171);

            uint64_t v175 = 0;
            [(__CFString *)v173 appendString:@"\n"];
          }
          else
          {
            uint64_t v175 = 0;
            re::ecs2::CARESortingDebugging::dumpCodirectionalGroup(v173, &v175, v105, (uint64_t)v171);
            [(__CFString *)v173 appendString:@"\n"];
          }
          uint64_t v105 = (v105 + 1);
          if (*(_DWORD *)(v97 + 32) <= (v101 + 1)) {
            int v110 = v101 + 1;
          }
          else {
            int v110 = *(_DWORD *)(v97 + 32);
          }
          v103 = v173;
          while (1)
          {
            uint64_t v106 = (v101 + 1);
            if (v110 - 1 == v101) {
              break;
            }
            LODWORD(v101) = v101 + 1;
            int v111 = v106;
            if ((*(_DWORD *)(*(void *)(v97 + 16) + 24 * v106 + 8) & 0x80000000) != 0) {
              goto LABEL_182;
            }
          }
          int v111 = v110;
LABEL_182:
          LODWORD(v101) = v111;
        }
        while (v100 != v111);
      }
      [(__CFString *)v103 appendFormat:@"%@CoplanarOverlapping Groups (aka CAMeshSortGroup):\n", v167];
      uint64_t v170 = *(unsigned int *)(v97 + 32);
      uint64_t v112 = 0;
      if (v170)
      {
        v113 = (int *)(*(void *)(v97 + 16) + 8);
        v114 = v173;
        while (1)
        {
          int v115 = *v113;
          v113 += 6;
          if (v115 < 0) {
            break;
          }
          if (v170 == ++v112)
          {
            LODWORD(v112) = *(_DWORD *)(v97 + 32);
            break;
          }
        }
      }
      else
      {
        v114 = v173;
      }
      if (v170 != v112)
      {
        uint64_t v116 = 0;
        uint64_t v117 = v112;
        while (1)
        {
          uint64_t v118 = *(void *)(*(void *)(v97 + 16) + 24 * v117 + 16);
          if (v118) {
            id v119 = (id)(v118 + 8);
          }
          uint64_t v120 = *(unsigned int *)(v118 + 232);
          if (v120)
          {
            uint64_t v121 = 0;
            v122 = (int *)(*(void *)(v118 + 216) + 8);
            while (1)
            {
              int v123 = *v122;
              v122 += 6;
              if (v123 < 0) {
                break;
              }
              if (v120 == ++v121)
              {
                LODWORD(v121) = *(_DWORD *)(v118 + 232);
                break;
              }
            }
          }
          else
          {
            LODWORD(v121) = 0;
          }
          if (v120 != v121) {
            break;
          }
          if (v118) {
            goto LABEL_214;
          }
LABEL_215:
          if (*(_DWORD *)(v97 + 32) <= (v112 + 1)) {
            int v130 = v112 + 1;
          }
          else {
            int v130 = *(_DWORD *)(v97 + 32);
          }
          v114 = v173;
          while (1)
          {
            uint64_t v117 = (v112 + 1);
            if (v130 - 1 == v112) {
              break;
            }
            LODWORD(v112) = v112 + 1;
            int v131 = v117;
            if ((*(_DWORD *)(*(void *)(v97 + 16) + 24 * v117 + 8) & 0x80000000) != 0) {
              goto LABEL_223;
            }
          }
          int v131 = v130;
LABEL_223:
          LODWORD(v112) = v131;
          if (v170 == v131) {
            goto LABEL_224;
          }
        }
        uint64_t v124 = v121;
        do
        {
          uint64_t v125 = *(void *)(*(void *)(v118 + 216) + 24 * v124 + 16);
          uint64_t v174 = v125;
          if (v125)
          {
            v126 = (void *)(v125 + 8);
            id v127 = (id)(v125 + 8);
            re::ecs2::CARESortingDebugging::dumpSortingGroup(v173, &v174, v116, v171);

            uint64_t v174 = 0;
          }
          else
          {
            re::ecs2::CARESortingDebugging::dumpSortingGroup(v173, &v174, v116, v171);
          }
          [(__CFString *)v173 appendString:@"\n"];
          uint64_t v116 = (v116 + 1);
          if (*(_DWORD *)(v118 + 232) <= (v121 + 1)) {
            int v128 = v121 + 1;
          }
          else {
            int v128 = *(_DWORD *)(v118 + 232);
          }
          while (1)
          {
            uint64_t v124 = (v121 + 1);
            if (v128 - 1 == v121) {
              break;
            }
            LODWORD(v121) = v121 + 1;
            int v129 = v124;
            if ((*(_DWORD *)(*(void *)(v118 + 216) + 24 * v124 + 8) & 0x80000000) != 0) {
              goto LABEL_213;
            }
          }
          int v129 = v128;
LABEL_213:
          LODWORD(v121) = v129;
        }
        while (v120 != v129);
LABEL_214:

        goto LABEL_215;
      }
LABEL_224:
      [(__CFString *)v114 appendFormat:@"%@Not in CoplanaOverlapping (aka unsortedPlanarEntities):\n", v167];
      uint64_t v133 = *(unsigned int *)(v97 + 32);
      if (v133)
      {
        uint64_t v134 = 0;
        v135 = (int *)(*(void *)(v97 + 16) + 8);
        v136 = v173;
        while (1)
        {
          int v137 = *v135;
          v135 += 6;
          if (v137 < 0) {
            break;
          }
          if (v133 == ++v134)
          {
            LODWORD(v134) = *(_DWORD *)(v97 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v134) = 0;
        v136 = v173;
      }
      if (v133 != v134) {
        break;
      }
LABEL_263:
      uint64_t v94 = (v164 + 1);
      [(__CFString *)v136 appendString:@"\n"];

      a3 = v171;
      if (*((_DWORD *)v171 + 22) <= (v91 + 1)) {
        int v151 = v91 + 1;
      }
      else {
        int v151 = *((_DWORD *)v171 + 22);
      }
      while (1)
      {
        uint64_t v95 = (v91 + 1);
        if (v151 - 1 == v91) {
          break;
        }
        LODWORD(v91) = v91 + 1;
        int v152 = v95;
        if ((*(_DWORD *)(*((void *)v171 + 9) + 184 * v95 + 8) & 0x80000000) != 0) {
          goto LABEL_270;
        }
      }
      int v152 = v151;
LABEL_270:
      LODWORD(v91) = v152;
      if (objb == v152) {
        goto LABEL_271;
      }
    }
    uint64_t v138 = 0;
    uint64_t v139 = v134;
    while (1)
    {
      uint64_t v140 = *(void *)(*(void *)(v97 + 16) + 24 * v139 + 16);
      if (v140) {
        id v141 = (id)(v140 + 8);
      }
      uint64_t v142 = *(unsigned int *)(v140 + 280);
      if (v142)
      {
        uint64_t v143 = 0;
        v144 = (int *)(*(void *)(v140 + 264) + 8);
        while (1)
        {
          int v145 = *v144;
          v144 += 6;
          if (v145 < 0) {
            break;
          }
          if (v142 == ++v143)
          {
            LODWORD(v143) = *(_DWORD *)(v140 + 280);
            break;
          }
        }
      }
      else
      {
        LODWORD(v143) = 0;
      }
      if (v142 != v143) {
        break;
      }
      if (v140) {
        goto LABEL_253;
      }
LABEL_254:
      if (*(_DWORD *)(v97 + 32) <= (v134 + 1)) {
        int v149 = v134 + 1;
      }
      else {
        int v149 = *(_DWORD *)(v97 + 32);
      }
      v136 = v173;
      while (1)
      {
        uint64_t v139 = (v134 + 1);
        if (v149 - 1 == v134) {
          break;
        }
        LODWORD(v134) = v134 + 1;
        int v150 = v139;
        if ((*(_DWORD *)(*(void *)(v97 + 16) + 24 * v139 + 8) & 0x80000000) != 0) {
          goto LABEL_262;
        }
      }
      int v150 = v149;
LABEL_262:
      LODWORD(v134) = v150;
      if (v133 == v150) {
        goto LABEL_263;
      }
    }
    uint64_t v146 = v143;
    do
    {
      re::ecs2::CARESortingDebugging::dumpEntity((re::ecs2::CARESortingDebugging *)v173, *(NSMutableString **)(*(void *)(v140 + 264) + 24 * v146 + 16), (const re::ecs2::Entity *)3, v138, (uint64_t)v171, v132);
      [(__CFString *)v173 appendString:@"\n"];
      uint64_t v138 = (v138 + 1);
      if (*(_DWORD *)(v140 + 280) <= (v143 + 1)) {
        int v147 = v143 + 1;
      }
      else {
        int v147 = *(_DWORD *)(v140 + 280);
      }
      int v148 = v143;
      while (1)
      {
        uint64_t v146 = (v148 + 1);
        if (v147 - 1 == v148) {
          break;
        }
        ++v148;
        LODWORD(v143) = v146;
        if ((*(_DWORD *)(*(void *)(v140 + 264) + 24 * v146 + 8) & 0x80000000) != 0) {
          goto LABEL_252;
        }
      }
      LODWORD(v143) = v147;
LABEL_252:
      ;
    }
    while (v142 != v143);
LABEL_253:

    goto LABEL_254;
  }
LABEL_271:
}

id anonymous namespace'::getIndentString(_anonymous_namespace_ *this)
{
  uint64_t v1 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", (2 * this), "");
  return v1;
}

void re::ecs2::CARESortingDebugging::dumpCodirectionalGroup(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  id v19 = a1;
  int v7 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 6, "");
  uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 8, "");
  [v19 appendFormat:@"%@[%u] CAMeshCodirectionalGroup ID: %llu\n", v7, a3, *(void *)(*a2 + 16)];
  [v19 appendFormat:@"%@averagePosition: (%f, %f, %f)\n", v8, *(float *)(*a2 + 128), *(float *)(*a2 + 132), *(float *)(*a2 + 136)];
  [v19 appendFormat:@"%@averageNormal: (%f, %f, %f)\n", v8, *(float *)(*a2 + 112), *(float *)(*a2 + 116), *(float *)(*a2 + 120)];
  [v19 appendFormat:@"%@initialPosition: (%f, %f, %f)\n", v8, *(float *)(*a2 + 96), *(float *)(*a2 + 100), *(float *)(*a2 + 104)];
  [v19 appendFormat:@"%@initialNormal: (%f, %f, %f)\n", v8, *(float *)(*a2 + 80), *(float *)(*a2 + 84), *(float *)(*a2 + 88)];
  [v19 appendFormat:@"%@entities count: %d\n", v8, *(unsigned int *)(*a2 + 52)];
  uint64_t v10 = *a2;
  uint64_t v11 = *(unsigned int *)(*a2 + 56);
  if (v11)
  {
    uint64_t v12 = 0;
    float v13 = (int *)(*(void *)(v10 + 40) + 8);
    while (1)
    {
      int v14 = *v13;
      v13 += 6;
      if (v14 < 0) {
        break;
      }
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(*a2 + 56);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if (v11 != v12)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v12;
    do
    {
      re::ecs2::CARESortingDebugging::dumpEntity((re::ecs2::CARESortingDebugging *)v19, *(NSMutableString **)(*(void *)(v10 + 40) + 24 * v16 + 16), (const re::ecs2::Entity *)5, v15, a4, v9);
      uint64_t v15 = (v15 + 1);
      if (*(_DWORD *)(v10 + 56) <= (v12 + 1)) {
        int v17 = v12 + 1;
      }
      else {
        int v17 = *(_DWORD *)(v10 + 56);
      }
      int v18 = v12;
      while (1)
      {
        uint64_t v16 = (v18 + 1);
        if (v17 - 1 == v18) {
          break;
        }
        ++v18;
        LODWORD(v12) = v16;
        if ((*(_DWORD *)(*(void *)(v10 + 40) + 24 * v16 + 8) & 0x80000000) != 0) {
          goto LABEL_17;
        }
      }
      LODWORD(v12) = v17;
LABEL_17:
      ;
    }
    while (v11 != v12);
  }
}

void re::ecs2::CARESortingDebugging::dumpSortingGroup(void *a1, uint64_t *a2, uint64_t a3, re::ecs2::CARESortingManager *a4)
{
  id v7 = a1;
  uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 6, "");
  unsigned int v9 = objc_msgSend(NSString, "stringWithFormat:", @"%*s", 8, "");
  v67.n128_u64[0] = 0;
  v67.n128_u16[4] = 0;
  char v68 = 0;
  char v70 = 0;
  char v71 = 0;
  uint64_t v10 = *(unsigned int *)(*a2 + 304);
  uint64_t v11 = *(void *)(*a2 + 288);
  uint64_t v12 = 0;
  if (v10)
  {
    float v13 = (int *)(v11 + 8);
    while (1)
    {
      int v14 = *v13;
      v13 += 6;
      if (v14 < 0) {
        break;
      }
      if (v10 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(*a2 + 304);
        break;
      }
    }
  }
  uint64_t v15 = *(void *)(v11 + 24 * v12 + 16);
  int v64 = (void *)v8;
  if (!v15)
  {
    int v63 = 0;
    uint64_t v21 = 0;
    StringID v22 = @"false";
    int v23 = @"undefined";
    goto LABEL_53;
  }
  uint64_t v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v16)
  {
    uint64_t v18 = *(void *)(v16 + 176);
    int v17 = (__n128 *)(v16 + 176);
    if (v18) {
      id v19 = v17;
    }
    else {
      id v19 = v17 - 9;
    }
    *(void *)&double v20 = re::ecs2::MeshSortGroupToken::operator=(&v67, v19).n128_u64[0];
    objc_msgSend(NSString, "stringWithFormat:", @"%llu", v20, v67.n128_u64[0]);
    uint64_t v60 = (__CFString *)objc_claimAutoreleasedReturnValue();
    int v63 = [NSNumber numberWithUnsignedLongLong:v67.n128_u64[0]];
    re::ecs2::CARESortingManager::tryGetCodirectionalGroupForEntity(a4, (const re::ecs2::Entity *)v15, (uint64_t *)&v65);
    uint64_t v21 = v65;
  }
  else
  {
    uint64_t v21 = 0;
    int v63 = 0;
    uint64_t v60 = @"undefined";
  }
  uint64_t v24 = v15;
  do
  {
    uint64_t v25 = v24;
    uint64_t v24 = *(void *)(v24 + 24);
  }
  while (v24);
  if (!*(void *)(v25 + 16))
  {
    StringID v22 = @"false";
LABEL_32:
    int v23 = v60;
    goto LABEL_53;
  }
  uint64_t v26 = v15;
  do
  {
    uint64_t v27 = v26;
    uint64_t v26 = *(void *)(v26 + 24);
  }
  while (v26);
  StringID v22 = @"false";
  if (!*(void *)(*(void *)(v27 + 16) + 56)) {
    goto LABEL_32;
  }
  uint64_t v28 = v15;
  do
  {
    uint64_t v29 = v28;
    uint64_t v28 = *(void *)(v28 + 24);
  }
  while (v28);
  uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v29 + 16) + 56) + 32))(*(void *)(*(void *)(v29 + 16) + 56));
  uint64_t v31 = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v30);
  uint64_t v58 = a3;
  int v59 = v21;
  if (!v31) {
    goto LABEL_35;
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31);
  (*(void (**)(float32x4_t **__return_ptr))(*(void *)v32 + 8))(&v65);
  uint64_t v33 = (_BYTE)v65 ? v66 : 0;
  uint64_t v61 = v33;
  uint64_t v34 = *a2;
  uint64_t v35 = *(unsigned int *)(*a2 + 304);
  if (v35)
  {
    uint64_t v36 = 0;
    unint64_t v37 = (int *)(*(void *)(v34 + 288) + 8);
    while (1)
    {
      int v38 = *v37;
      v37 += 6;
      if (v38 < 0) {
        break;
      }
      if (v35 == ++v36)
      {
        LODWORD(v36) = *(_DWORD *)(*a2 + 304);
        break;
      }
    }
  }
  else
  {
    LODWORD(v36) = 0;
  }
  if (v35 != v36)
  {
    char v39 = 0;
    uint64_t v40 = v36;
    while (1)
    {
      (*(void (**)(float32x4_t **__return_ptr, uint64_t, void))(*(void *)v32 + 8))(&v65, v32, *(void *)(*(void *)(v34 + 288) + 24 * v40 + 16));
      uint64_t v41 = (_BYTE)v65 ? v66 : 0;
      if (v41 != v61) {
        break;
      }
      if (*(_DWORD *)(v34 + 304) <= (v36 + 1)) {
        int v42 = v36 + 1;
      }
      else {
        int v42 = *(_DWORD *)(v34 + 304);
      }
      while (1)
      {
        uint64_t v40 = (v36 + 1);
        if (v42 - 1 == v36) {
          break;
        }
        LODWORD(v36) = v36 + 1;
        int v43 = v40;
        if ((*(_DWORD *)(*(void *)(v34 + 288) + 24 * v40 + 8) & 0x80000000) != 0) {
          goto LABEL_49;
        }
      }
      int v43 = v42;
LABEL_49:
      LODWORD(v36) = v43;
      if (v35 == v43) {
        goto LABEL_50;
      }
    }
    char v39 = 1;
  }
  else
  {
LABEL_35:
    char v39 = 0;
  }
LABEL_50:
  StringID v22 = @"false";
  if (v39) {
    StringID v22 = @"true";
  }
  uint64_t v8 = (uint64_t)v64;
  uint64_t v21 = v59;
  int v23 = v60;
  a3 = v58;
LABEL_53:
  [v7 appendFormat:@"%@[%u] CAMeshSortGroup ID: %@\n", v8, a3, v23];
  [v7 appendFormat:@"%@containsMixedWorlds: %@\n", v9, v22];
  [v7 appendFormat:@"%@sortGroupPosition: (%f, %f, %f)\n", v9, *(float *)(*a2 + 32), *(float *)(*a2 + 36), *(float *)(*a2 + 40)];
  int v44 = [v7 appendFormat:@"%@sortGroupNormal: (%f, %f, %f)\n", v9, *(float *)(*a2 + 16), *(float *)(*a2 + 20), *(float *)(*a2 + 24)];
  [v7 appendFormat:@"%@sortGroupSortingConfiguration: %@\n", v9, v44];

  if (v67.n128_u8[8] == 5 && v68)
  {
    float32x4_t v62 = v69;
    [v7 appendFormat:@"%@sortGroupSortPointOverride: (%f, %f, %f)\n", v9, v69.f32[0], v69.f32[1], v69.f32[2]];
    if (v21)
    {
      uint64_t v45 = v21;
      float32x4_t v46 = vmulq_f32(vsubq_f32(v62, v21[8]), v21[7]);
      [v7 appendFormat:@"%@sortGroupSortPointOverrideDisplacement: %f\n", v9, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]];
    }
    else
    {
      [v7 appendFormat:@"%@sortGroupSortPointOverrideDisplacement: None\n", v9];
      uint64_t v45 = 0;
    }
  }
  else
  {
    uint64_t v45 = v21;
    [v7 appendFormat:@"%@sortGroupSortPointOverride: None\n", v9];
    [v7 appendFormat:@"%@sortGroupSortPointOverrideDisplacement: None\n", v9, v57];
  }
  [v7 appendFormat:@"%@entities count: %d\n", v9, *(unsigned int *)(*a2 + 300)];
  uint64_t v48 = *a2;
  uint64_t v49 = *(unsigned int *)(*a2 + 304);
  if (v49)
  {
    uint64_t v50 = 0;
    uint64_t v51 = (int *)(*(void *)(v48 + 288) + 8);
    while (1)
    {
      int v52 = *v51;
      v51 += 6;
      if (v52 < 0) {
        break;
      }
      if (v49 == ++v50)
      {
        LODWORD(v50) = *(_DWORD *)(*a2 + 304);
        break;
      }
    }
  }
  else
  {
    LODWORD(v50) = 0;
  }
  if (v49 != v50)
  {
    uint64_t v53 = 0;
    uint64_t v54 = v50;
    do
    {
      re::ecs2::CARESortingDebugging::dumpEntity((re::ecs2::CARESortingDebugging *)v7, *(NSMutableString **)(*(void *)(v48 + 288) + 24 * v54 + 16), (const re::ecs2::Entity *)5, v53, (uint64_t)a4, v47);
      uint64_t v53 = (v53 + 1);
      if (*(_DWORD *)(v48 + 304) <= (v50 + 1)) {
        int v55 = v50 + 1;
      }
      else {
        int v55 = *(_DWORD *)(v48 + 304);
      }
      int v56 = v50;
      while (1)
      {
        uint64_t v54 = (v56 + 1);
        if (v55 - 1 == v56) {
          break;
        }
        ++v56;
        LODWORD(v50) = v54;
        if ((*(_DWORD *)(*(void *)(v48 + 288) + 24 * v54 + 8) & 0x80000000) != 0) {
          goto LABEL_74;
        }
      }
      LODWORD(v50) = v55;
LABEL_74:
      ;
    }
    while (v49 != v50);
  }
  if (v45) {
}
  }

void re::ecs2::CARESortingDebugging::dumpEntity(re::ecs2::CARESortingDebugging *this, NSMutableString *a2, const re::ecs2::Entity *a3, uint64_t a4, uint64_t a5, const re::ecs2::CARESortingManager *a6)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  v11 = uint64_t v10 = this;
  uint64_t v12 = v126 = (int)a3;
  int v128 = (void *)v11;
  [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@[%u] Entity ID: %llu\n", v11, a4, a2[37].super];
  [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@name: %s\n", v12, a2[35].super];
  int v130 = (void *)v12;
  *(void *)&long long v145 = 0;
  *((void *)&v143 + 1) = 0;
  *(void *)&long long v144 = 0;
  DWORD2(v144) = 0;
  float v13 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v143, 0x40uLL);
  int v14 = ++DWORD2(v144);
  super = a2[3].super;
  if (super)
  {
    uint64_t v16 = a2;
    do
    {
      if ((super[288] & 0x80) != 0) {
        break;
      }
      uint64_t v17 = v144;
      if ((unint64_t)v144 >= *((void *)&v143 + 1))
      {
        unint64_t v18 = v144 + 1;
        if (*((void *)&v143 + 1) < (unint64_t)(v144 + 1))
        {
          if ((void)v143)
          {
            unint64_t v19 = 2 * *((void *)&v143 + 1);
            if (!*((void *)&v143 + 1)) {
              unint64_t v19 = 8;
            }
            if (v19 <= v18) {
              unint64_t v20 = v144 + 1;
            }
            else {
              unint64_t v20 = v19;
            }
            float v13 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v143, v20);
            int v14 = DWORD2(v144);
          }
          else
          {
            float v13 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(&v143, v18);
            int v14 = DWORD2(v144) + 1;
          }
        }
        uint64_t v17 = v144;
      }
      *(void *)(v145 + 8 * v17) = v16;
      *(void *)&long long v144 = v17 + 1;
      DWORD2(v144) = ++v14;
      uint64_t v21 = v16[3].super;
      if (v21) {
        uint64_t v16 = (v21[288] & 0x80) != 0 ? 0 : (NSMutableString *)v16[3].super;
      }
      else {
        uint64_t v16 = 0;
      }
      super = v16[3].super;
    }
    while (super);
  }
  uint64_t v131 = a5;
  int v129 = (re::ecs2::TransformComponent *)a2;
  StringID v22 = [MEMORY[0x263F089D8] stringWithCapacity:256];
  [v22 appendString:@"/"];
  if ((void)v144)
  {
    uint64_t v23 = 8 * v144;
    uint64_t v24 = v145 - 8;
    do
    {
      uint64_t v25 = *(void **)(v24 + v23);
      unint64_t v26 = v25[34];
      if (v26 >= 0xFFFFFFFFFFFFFFFELL && (v25[34] & 1) == 0)
      {
        uint64_t v28 = (unsigned char *)v25[35];
      }
      else
      {
        uint64_t v28 = (unsigned char *)v25[35];
        if (v26 > 1 || !v28) {
          goto LABEL_32;
        }
      }
      if (!*v28)
      {
        objc_msgSend(v22, "appendFormat:", @"%llu/", v25[37]);
        goto LABEL_34;
      }
LABEL_32:
      uint64_t v29 = [NSString stringWithCString:v28 encoding:4];
      uint64_t v30 = [v29 stringByReplacingOccurrencesOfString:@"/" withString:&stru_26E738380];
      [v22 appendFormat:@"%@/", v30];

LABEL_34:
      v23 -= 8;
    }
    while (v23);
  }
  uint64_t v31 = [v22 stringByReplacingOccurrencesOfString:@"\n" withString:@"\\n"];

  if ((void)v143 && (void)v145) {
    (*(void (**)(uint64_t))(*(void *)v143 + 40))(v143);
  }
  uint64_t v32 = v130;
  [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@path: %@\n", v130, v31];

  [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@worldMatrix:\n", v130];
  uint64_t v33 = v129;
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v129, (const re::ecs2::Entity *)1, v136);
  v35 = uint64_t v34 = (_anonymous_namespace_ *)(v126 + 2);
  [(re::ecs2::CARESortingDebugging *)v10 appendString:v35];

  if (!*(void *)(v131 + 448)) {
    goto LABEL_40;
  }
  unint64_t v36 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)v129 ^ ((unint64_t)v129 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)v129 ^ ((unint64_t)v129 >> 30))) >> 27));
  uint64_t v37 = *(unsigned int *)(*(void *)(v131 + 456) + 4 * ((v36 ^ (v36 >> 31)) % *(unsigned int *)(v131 + 472)));
  if (v37 == 0x7FFFFFFF) {
    goto LABEL_40;
  }
  uint64_t v62 = *(void *)(v131 + 464);
  if (*(re::ecs2::TransformComponent **)(v62 + 160 * v37 + 16) != v129)
  {
    while (1)
    {
      LODWORD(v37) = *(_DWORD *)(v62 + 160 * v37 + 8) & 0x7FFFFFFF;
      if (v37 == 0x7FFFFFFF) {
        break;
      }
      if (*(re::ecs2::TransformComponent **)(v62 + 160 * v37 + 16) == v129) {
        goto LABEL_69;
      }
    }
LABEL_40:
    [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@cached worldMatrix: none\n", v130];
    goto LABEL_41;
  }
LABEL_69:
  int v63 = (float *)(v62 + 160 * v37 + 32);
  if (re::areAlmostEqual<float>(v136, v63))
  {
    [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@cached worldMatrix: up to date\n", v130];
  }
  else
  {
    uint64_t v97 = [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@cached worldMatrix: outdated\n", v130];
    [(re::ecs2::CARESortingDebugging *)v10 appendString:v97];
  }
LABEL_41:
  int v38 = v129;
  do
  {
    char v39 = v38;
    int v38 = (re::ecs2::TransformComponent *)*((void *)v38 + 3);
  }
  while (v38);
  if (*((void *)v39 + 2))
  {
    uint64_t v40 = v129;
    do
    {
      uint64_t v41 = v40;
      uint64_t v40 = (re::ecs2::TransformComponent *)*((void *)v40 + 3);
    }
    while (v40);
    if (*(void *)(*((void *)v41 + 2) + 56))
    {
      int v42 = v129;
      do
      {
        int v43 = v42;
        int v42 = (re::ecs2::TransformComponent *)*((void *)v42 + 3);
      }
      while (v42);
      uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(*((void *)v43 + 2) + 56) + 32))(*(void *)(*((void *)v43 + 2) + 56));
      uint64_t v45 = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v44);
      if (v45)
      {
        uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 24))(v45);
        (*(void (**)(long long *__return_ptr))(*(void *)v46 + 8))(&v143);
        if ((_BYTE)v143) {
          uint64_t v47 = *((void *)&v143 + 1);
        }
        else {
          uint64_t v47 = 0;
        }
        [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@worldRootId: %llu\n", v130, v47];
      }
    }
  }
  uint64_t v48 = *((void *)v129 + 26);
  if (v48)
  {
    if (*(void *)(v48 + 32)) {
      uint64_t v49 = @"true";
    }
    else {
      uint64_t v49 = @"false";
    }
  }
  else
  {
    uint64_t v49 = @"false";
  }
  [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@isPortal: %@\n", v130, v49];
  re::ecs2::CARESortingManager::tryGetCodirectionalGroupForEntity((re::ecs2::CARESortingManager *)v131, v129, (uint64_t *)&v135);
  uint64_t v50 = v135;
  if (v135)
  {
    [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@CAMeshCodirectionalGroupId: %llu\n", v130, v135[1].i64[0]];
    [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@averageNormal: (%f, %f, %f)\n", v130, v50[7].f32[0], v50[7].f32[1], v50[7].f32[2]];
    [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@averagePosition: (%f, %f, %f)\n", v130, v50[8].f32[0], v50[8].f32[1], v50[8].f32[2]];
  }
  else
  {
    [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@CodirectionalGroup: none\n", v130, v109, v113, v115];
  }
  [(re::ecs2::CARESortingDebugging *)v10 appendFormat:@"%@UISortingComponent:\n", v130];
  uint64_t v51 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::TransformComponent *)((char *)v129 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v53 = int v52 = v10;
  uint64_t v54 = (void *)v53;
  if (v51)
  {
    float32x4_t v55 = v51[3];
    float32x4_t v56 = v51[4];
    uint32x4_t v57 = (uint32x4_t)vcgtq_f32(v55, v56);
    v57.i32[3] = v57.i32[2];
    if ((vmaxvq_u32(v57) & 0x80000000) != 0)
    {
      float v60 = v51[2].f32[2];
      v61.i32[0] = v51[2].i32[1];
      v61.i32[1] = v51[2].i32[0];
    }
    else
    {
      float32x4_t v58 = vsubq_f32(v56, v55);
      v58.i32[3] = 0;
      float32x4_t v59 = vmaxnmq_f32(v58, (float32x4_t)0);
      float v60 = v59.f32[2];
      int32x2_t v61 = vrev64_s32(*(int32x2_t *)v59.f32);
    }
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@extends: (%f, %f, %f)\n", v53, *(float *)&v61.i32[1], *(float *)v61.i32, v60];
    uint32x4_t v64 = (uint32x4_t)vcgtq_f32(v51[3], v51[4]);
    v64.i32[3] = v64.i32[2];
    if ((vmaxvq_u32(v64) & 0x80000000) != 0) {
      float v65 = v51[2].f32[2] * 0.5;
    }
    else {
      LODWORD(v65) = v51[4].i64[1];
    }
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@halfZExtent: %f\n", v54, v65];
    float32x4_t v66 = v51[3];
    float32x4_t v132 = v51[4];
    uint32x4_t v67 = (uint32x4_t)vcgtq_f32(v66, v132);
    v67.i32[3] = v67.i32[2];
    if ((vmaxvq_u32(v67) & 0x80000000) != 0)
    {
      float32x4_t v68 = v51[2];
      v69.i64[0] = 0xBF000000BF000000;
      v69.i64[1] = 0xBF000000BF000000;
      float32x4_t v66 = vmulq_f32(v68, v69);
      v69.i64[0] = 0x3F0000003F000000;
      v69.i64[1] = 0x3F0000003F000000;
      float32x4_t v132 = vmulq_f32(v68, v69);
    }
    float32x4_t v123 = v66;
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@AABB min: (%f, %f, %f)\n", v54, v66.f32[0], v66.f32[1], v66.f32[2]];
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@AABB max: (%f, %f, %f)\n", v54, v132.f32[0], v132.f32[1], v132.f32[2]];
    uint32x4_t v70 = (uint32x4_t)vcgtq_f32(v123, v132);
    v70.i32[3] = v70.i32[2];
    if ((vmaxvq_u32(v70) & 0x80000000) != 0)
    {
      int8x16_t v72 = 0uLL;
      double v73 = 0.0;
    }
    else
    {
      float32x4_t v71 = vaddq_f32(v132, v123);
      int8x16_t v72 = (int8x16_t)vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v71.f32), (float32x2_t)0x3F0000003F000000));
      double v73 = vmuls_lane_f32(0.5, v71, 2);
    }
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@AABB center: (%f, %f, %f)\n", v54, vextq_s8(v72, v72, 8uLL), *(void *)&v73];
    uint64_t v74 = v51[5].u32[0];
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86E30, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26AF86E30))
    {
      uint64_t v134 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 4294967293);
      v137.i64[0] = (uint64_t)v134;
      *(void *)&long long v143 = @"kSortCategoryMin";
      uint64_t v125 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 4294967294);
      v137.i64[1] = (uint64_t)v125;
      *((void *)&v143 + 1) = @"kBackDecoration";
      v122 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 0xFFFFFFFFLL);
      v138.i64[0] = (uint64_t)v122;
      *(void *)&long long v144 = @"kBehindUIContent";
      uint64_t v121 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 0);
      v138.i64[1] = (uint64_t)v121;
      *((void *)&v144 + 1) = @"kUIContent";
      uint64_t v120 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 1);
      uint64_t v139 = v120;
      *(void *)&long long v145 = @"kAboveUIContent";
      id v119 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 2);
      uint64_t v140 = v119;
      *((void *)&v145 + 1) = @"kFrontDecoration";
      uint64_t v118 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 3);
      id v141 = v118;
      *(void *)&long long v146 = @"kServerCARE";
      uint64_t v117 = objc_msgSend(NSString, "stringWithFormat:", @"%u", 4);
      uint64_t v142 = v117;
      *((void *)&v146 + 1) = @"kSortCategoryMax";
      qword_26AF86E28 = [NSDictionary dictionaryWithObjects:&v143 forKeys:&v137 count:8];

      __cxa_guard_release(&qword_26AF86E30);
    }
    uint64_t v75 = (void *)qword_26AF86E28;
    uint64_t v76 = objc_msgSend(NSString, "stringWithFormat:", @"%u", v74);
    v77 = [v75 valueForKey:v76];

    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@sortCategory: %@\n", v54, v77];
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@sortPriorityHint: %d\n", v54, v51[5].u32[1]];
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@caSortOrder: %d\n", v54, v51[5].u32[2]];
    if (v51[5].i8[12]) {
      v78 = @"true";
    }
    else {
      v78 = @"false";
    }
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@isCaLayer: %@\n", v54, v78];
    if (v51[5].i8[13]) {
      id v79 = @"true";
    }
    else {
      id v79 = @"false";
    }
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@doesCaLayerNeedMesh: %@\n", v54, v79];
    uint64_t v34 = (_anonymous_namespace_ *)(v126 + 2);
  }
  else
  {
    [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@None\n", v53];
  }

  [(re::ecs2::CARESortingDebugging *)v52 appendFormat:@"%@MeshSortingComponent:\n", v130];
  v80 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::TransformComponent *)((char *)v129 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v81 = v52;
  uint64_t v82 = v133 = v34;
  v83 = (void *)v82;
  if (v80)
  {
    v85 = id v84 = (_anonymous_namespace_ *)(v126 + 3);
    uint64_t v86 = v80 + 11;
    uint64_t v87 = 11;
    if (!v80[11].i64[0])
    {
      uint64_t v87 = 2;
      uint64_t v86 = v80 + 2;
    }
    uint64_t v88 = v80[v87].i64[0];
    unsigned int v89 = v86->u8[8];
    int v90 = v86->u8[9];
    int v124 = v86[1].u8[0];
    float32x4_t v127 = v86[2];
    [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@groupId: %llu\n", v83, v88];
    [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@priorityInGroup: %d\n", v83, v80[10].u32[0]];
    [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@depthPriorityInGroup: %d\n", v83, v80[10].u32[1]];
    [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@sortPointOverride: (%f, %f, %f)\n", v83, v80[19].f32[0], v80[19].f32[1], v80[19].f32[2]];
    uint64_t v91 = v135;
    if (v135)
    {
      float32x4_t v92 = vmulq_f32(vsubq_f32(v80[19], v135[8]), v135[7]);
      [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@sortPointOverrideDisplacement: %f\n", v83, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0]];
    }
    else
    {
      [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@sortPointOverrideDisplacement: None\n", v83, v111];
    int v93 = };
    [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@sortConfiguration: %@\n", v83, v93];

    uint64_t v94 = @"false";
    if (v90) {
      uint64_t v94 = @"true";
    }
    [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@useDepthBias: %@\n", v83, v94];
    if (v88)
    {
      [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@sortGroupData:\n", v83];
      if (v89 == 5 && v124)
      {
        unsigned int v95 = 5;
        [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@perMeshGroupSortPointOverride: (%f, %f, %f)\n", v85, v127.f32[0], v127.f32[1], v127.f32[2]];
        if (v91)
        {
          float32x4_t v96 = vmulq_f32(vsubq_f32(v127, v91[8]), v91[7]);
          [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@perMeshGroupSortPointOverrideDisplacement: %f\n", v85, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).f32[0]];
        }
        else
        {
          [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@perMeshGroupSortPointOverrideDisplacement: None\n", v85, v112];
        }
      }
      else
      {
        unsigned int v95 = v89;
        [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@perMeshGroupSortPointOverride: None\n", v85, v110];
      }
      uint64_t v33 = v129;
      v98 = uint64_t v32 = v130;
      [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@perMeshSortGroupConfiguration: %@\n", v85, v98];
    }
    else
    {
      [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@sortGroupData: not-in-mesh-sort-group\n", v83];
      uint64_t v33 = v129;
      uint64_t v32 = v130;
    }
  }
  else
  {
    [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@None\n", v82];
    id v84 = (_anonymous_namespace_ *)(v126 + 3);
  }

  [(re::ecs2::CARESortingDebugging *)v81 appendFormat:@"%@MeshComponent:\n", v32];
  uint64_t v99 = *((void *)v33 + 22);
  v102 = v101 = uint64_t v100 = v81;
  if (v99)
  {
    [(re::ecs2::CARESortingDebugging *)v100 appendFormat:@"%@MeshAsset:\n", v101];
    v103 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v99 + 32));
    int v104 = v128;
    if (v103)
    {
      long long v143 = xmmword_23435FD50;
      long long v144 = xmmword_23435FD60;
      long long v145 = xmmword_23435FD80;
      long long v146 = xmmword_23435FBB0;
      re::MeshAsset::aabbFromMesh(v103, (float32x4_t *)&v143, (uint64_t)&v137);
      [(re::ecs2::CARESortingDebugging *)v100 appendFormat:@"%@AABB min: (%f, %f, %f)\n", v102, v137.f32[0], v137.f32[1], v137.f32[2]];
      [(re::ecs2::CARESortingDebugging *)v100 appendFormat:@"%@AABB max: (%f, %f, %f)\n", v102, v138.f32[0], v138.f32[1], v138.f32[2]];
      uint32x4_t v105 = (uint32x4_t)vcgtq_f32(v137, v138);
      v105.i32[3] = v105.i32[2];
      if ((vmaxvq_u32(v105) & 0x80000000) != 0)
      {
        int8x16_t v107 = 0uLL;
        double v108 = 0.0;
      }
      else
      {
        float32x4_t v106 = vaddq_f32(v137, v138);
        int8x16_t v107 = (int8x16_t)vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v106.f32), (float32x2_t)0x3F0000003F000000));
        double v108 = vmuls_lane_f32(0.5, v106, 2);
      }
      [(re::ecs2::CARESortingDebugging *)v100 appendFormat:@"%@AABB center: (%f, %f, %f)\n", v102, vextq_s8(v107, v107, 8uLL), *(void *)&v108];
    }
    else
    {
      [(re::ecs2::CARESortingDebugging *)v100 appendFormat:@"%@Not Loaded\n", v102, v110, v114, v116];
    }
  }
  else
  {
    [(re::ecs2::CARESortingDebugging *)v100 appendFormat:@"%@None\n", v101];
    int v104 = v128;
  }

  if (v135) {
}
  }

id anonymous namespace'::stringifyMeshSortingConfiguration(unsigned int a1)
{
  v15[6] = *MEMORY[0x263EF8340];
  unint64_t v1 = 0x263F08000uLL;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86E20, memory_order_acquire) & 1) == 0)
  {
    unsigned int v6 = a1;
    int v7 = __cxa_guard_acquire(&qword_26AF86E20);
    a1 = v6;
    if (v7)
    {
      uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%hhu", 0);
      v15[0] = @"kCentroid";
      unsigned int v9 = objc_msgSend(NSString, "stringWithFormat:", @"%hhu", 1, v8);
      v14[1] = v9;
      v15[1] = @"kFurthestRadial";
      uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @"%hhu", 2);
      void v14[2] = v10;
      void v15[2] = @"kNearestRadial";
      uint64_t v11 = objc_msgSend(NSString, "stringWithFormat:", @"%hhu", 3);
      v14[3] = v11;
      _OWORD v15[3] = @"kFurthestOBB";
      uint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"%hhu", 4);
      v14[4] = v12;
      v15[4] = @"kNearestOBB";
      float v13 = objc_msgSend(NSString, "stringWithFormat:", @"%hhu", 5);
      v14[5] = v13;
      v15[5] = @"kCentroidWithOverride";
      _MergedGlobals_219 = [NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:6];

      unint64_t v1 = 0x263F08000;
      __cxa_guard_release(&qword_26AF86E20);
      a1 = v6;
    }
  }
  uint64_t v2 = (void *)_MergedGlobals_219;
  uint64_t v3 = objc_msgSend(*(id *)(v1 + 2880), "stringWithFormat:", @"%hhu", a1);
  long long v4 = [v2 valueForKey:v3];

  return v4;
}

id anonymous namespace'::stringifyMatrix4x4(float *a1, _anonymous_namespace_ *this)
{
  uint64_t v3 = ;
  objc_msgSend(NSString, "stringWithFormat:", @"%@[%.5f, %.5f, %.5f, %.5f]\n%@[%.5f, %.5f, %.5f, %.5f]\n%@[%.5f, %.5f, %.5f, %.5f]\n%@[%.5f, %.5f, %.5f, %.5f]\n", v3, *a1, a1[1], a1[2], a1[3], v3, a1[4], a1[5], a1[6], a1[7], v3, a1[8], a1[9], a1[10], a1[11], v3,
    a1[12],
    a1[13],
    a1[14],
  long long v4 = a1[15]);

  return v4;
}

void re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::$_0::operator()(uint64_t *a1, uint64_t a2)
{
  long long v4 = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    float32x4_t v5 = v4[3];
    float32x4_t v6 = v4[4];
    uint32x4_t v7 = (uint32x4_t)vcgtq_f32(v5, v6);
    v7.i32[3] = v7.i32[2];
    if ((vmaxvq_u32(v7) & 0x80000000) != 0)
    {
      float32x4_t v8 = v4[2];
      v9.i64[0] = 0xBF000000BF000000;
      v9.i64[1] = 0xBF000000BF000000;
      float32x4_t v5 = vmulq_f32(v8, v9);
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      float32x4_t v6 = vmulq_f32(v8, v10);
    }
    float32x4_t v11 = vsubq_f32(v6, v5);
    v11.i32[3] = 0;
    unint64_t v12 = vmaxnmq_f32(v11, (float32x4_t)0).u64[0];
    if (fabsf(*(float *)&v12) < 0.00001 || fabsf(*((float *)&v12 + 1)) < 0.00001)
    {
      uint64_t v13 = *a1;
      v27.i64[0] = @"Zero area";
      v27.i64[1] = objc_msgSend(NSString, "stringWithFormat:", @"UISortingComponent with a zero XY area in entity #%llu.", *(void *)(a2 + 296));
      re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(v13, (__n128 *)&v27);
    }
  }
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)a2, (const re::ecs2::Entity *)1, &v27);
  float32x4_t v14 = (float32x4_t)v29;
  float32x4_t v15 = vmulq_f32(v27, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), v29, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v29, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL), (int8x16_t)v28, 8uLL)));
  BOOL v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0] <= 0.0;
  float v17 = -1.0;
  if (!v16) {
    float v17 = 1.0;
  }
  float32x4_t v18 = vmulq_f32(v27, v27);
  float32x4_t v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)));
  float32x4_t v20 = vmulq_f32((float32x4_t)v28, (float32x4_t)v28);
  v19.f32[0] = sqrtf(v19.f32[0]);
  v19.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]);
  unint64_t v21 = vmulq_n_f32(v19, v17).u64[0];
  if (fabsf(*(float *)&v21) < 0.00001 || fabsf(*((float *)&v21 + 1)) < 0.00001)
  {
    uint64_t v22 = *a1;
    v26.n128_u64[0] = (unint64_t)@"Zero area";
    int8x16_t v25 = v29;
    v26.n128_u64[1] = objc_msgSend(NSString, "stringWithFormat:", @"Transform with a zero XY area in entity #%llu.", *(void *)(a2 + 296));
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(v22, &v26);

    float32x4_t v14 = (float32x4_t)v25;
  }
  float32x4_t v23 = vmulq_f32(v14, v14);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]) < 1.0e-10)
  {
    uint64_t v24 = *a1;
    v26.n128_u64[0] = (unint64_t)@"Zero normal";
    v26.n128_u64[1] = objc_msgSend(NSString, "stringWithFormat:", @"Almost-zero normal in entity #%llu.", *(void *)(a2 + 296));
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(v24, &v26);
  }
}

__n128 re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::add(uint64_t a1, __n128 *a2)
{
  if (!*(void *)a1)
  {
    unint64_t v10 = *(void *)(a1 + 8) + 1;
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity((void *)a1, v10);
    int v11 = *(_DWORD *)(a1 + 16) + 2;
    *(_DWORD *)(a1 + 16) = v11;
    if ((v11 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v12 = a1 + 24;
    goto LABEL_19;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 1) == 0)
  {
    unint64_t v6 = *(void *)(a1 + 24);
    BOOL v8 = v4 >= v6;
    unint64_t v7 = v4 + 1;
    BOOL v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      unint64_t v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  unint64_t v7 = v4 + 1;
  if (v7 < 2)
  {
LABEL_11:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  unint64_t v9 = 2;
LABEL_14:
  if (v9 <= v7) {
    unint64_t v13 = v7;
  }
  else {
    unint64_t v13 = v9;
  }
  re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity((void *)a1, v13);
  if (*(_DWORD *)(a1 + 16)) {
    goto LABEL_18;
  }
LABEL_12:
  uint64_t v12 = *(void *)(a1 + 32);
LABEL_19:
  uint64_t v14 = *(void *)(a1 + 8);
  __n128 result = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(__n128 *)(v12 + 16 * v14) = result;
  *(void *)(a1 + 8) = v14 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

void ___ZN12_GLOBAL__N_123ensureGraphCurrentFrameEv_block_invoke()
{
  uint64_t v0 = [MEMORY[0x263EFF980] array];
  unint64_t v1 = (void *)qword_26AF86E38;
  qword_26AF86E38 = v0;
}

void re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity(void *a1, unint64_t a2)
{
  uint64_t v5 = *a1;
  if (a2 && !v5)
  {
    re::DynamicOverflowArray<re::ecs2::CARESortingDebugging::dumpWarnings(NSMutableString *,re::ecs2::CARESortingManager const*,unsigned int)::Warning,1ul>::setCapacity(a1, a2);
    int v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return;
  }
  int v7 = *((_DWORD *)a1 + 4);
  if (v7) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a1[3];
  }
  if (v8 != a2)
  {
    unint64_t v9 = a1[1];
    if (v9 <= a2 && (a2 > 1 || (v7 & 1) == 0))
    {
      if (a2 < 2)
      {
        uint64_t v15 = a1[4];
        if (v9)
        {
          if (v7) {
            BOOL v16 = (id *)(a1 + 3);
          }
          else {
            BOOL v16 = (id *)a1[4];
          }
          long long v17 = *(_OWORD *)v16;
          *BOOL v16 = 0;
          v16[1] = 0;
          *(_OWORD *)(a1 + 3) = v17;

          uint64_t v5 = *a1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v15);
        int v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        uint64_t v2 = 16 * a2;
        uint64_t v10 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v5 + 32))(v5, 16 * a2, 8);
        if (v10)
        {
          uint64_t v12 = v10;
          int v13 = *((_DWORD *)a1 + 4);
          if (v13) {
            uint64_t v14 = a1 + 3;
          }
          else {
            uint64_t v14 = (void *)a1[4];
          }
          uint64_t v18 = a1[1];
          if (v18)
          {
            float32x4_t v19 = &v14[2 * v18];
            float32x4_t v20 = (_OWORD *)v10;
            do
            {
              long long v21 = *(_OWORD *)v14;
              *uint64_t v14 = 0;
              v14[1] = 0;
              *v20++ = v21;

              uint64_t v22 = (void *)*v14;
              v14 += 2;
            }
            while (v14 != v19);
            int v13 = *((_DWORD *)a1 + 4);
          }
          if ((v13 & 1) == 0)
          {
            (*(void (**)(void, void))(*(void *)*a1 + 40))(*a1, a1[4]);
            int v13 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v13 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v12;
          return;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(void *)(*a1 + 8));
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t re::ecs2::ComponentStatePayload::lightArraysForEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v86 = 0;
  uint64_t v87 = a2;
  uint64_t v5 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(*(void *)(a1 + 32), &v87);
  if (v5)
  {
    unint64_t v6 = *v5;
    unint64_t v86 = *v5;
  }
  else
  {
    unint64_t v6 = 0;
  }
  int v7 = (re *)(*(void *(**)(uint8_t *__return_ptr))(**(void **)a3 + 8))(buf);
  if (buf[0]) {
    uint64_t v9 = *(void *)&buf[8];
  }
  else {
    uint64_t v9 = 0;
  }
  *(void *)&long long v84 = v6;
  *((void *)&v84 + 1) = v9;
  uint64_t v85 = ((v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9 + v9) ^ v6;
  uint64_t v10 = *(void *)(a1 + 48);
  int v11 = *(_DWORD *)(v10 + 4412);
  if (v11)
  {
    if (*(void *)(v10 + 4384))
    {
      uint64_t v12 = *(unsigned int *)(*(void *)(v10 + 4392)
                            + 4
                            * ((((v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9 + v9) ^ v6) % *(unsigned int *)(v10 + 4408)));
      if (v12 != 0x7FFFFFFF)
      {
        uint64_t v13 = *(void *)(v10 + 4400);
        uint64_t v14 = v13 + 280 * v12;
        uint64_t v16 = *(void *)(v14 + 8);
        uint64_t v15 = *(void *)(v14 + 16);
        if (v16 == v6 && v15 == v9) {
          return v13 + 280 * v12 + 32;
        }
        while (1)
        {
          LODWORD(v12) = *(_DWORD *)(v13 + 280 * v12) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF) {
            break;
          }
          uint64_t v18 = v13 + 280 * v12;
          uint64_t v20 = *(void *)(v18 + 8);
          uint64_t v19 = *(void *)(v18 + 16);
          if (v20 == v6 && v19 == v9) {
            return v13 + 280 * v12 + 32;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v23 = *(void *)(v10 + 16);
    if (v23)
    {
      uint64_t v22 = (_WORD *)(v10 + 56);
      uint64_t v24 = 272 * v23;
      while (*((void *)v22 - 3) != v6 || *((void *)v22 - 2) != v9)
      {
        v22 += 136;
        v24 -= 272;
        if (!v24) {
          goto LABEL_26;
        }
      }
      return (uint64_t)v22;
    }
  }
LABEL_26:
  if (*(_DWORD *)(a1 + 24) >= 0x10000u)
  {
    if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::ComponentStatePayload::lightArraysForEntity(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged, 1u) & 1) == 0)
    {
      int8x16_t v25 = *re::graphicsLogObjects(v7);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v25, OS_LOG_TYPE_DEFAULT, "LightSystem: lightContextId is exceeding 16 bit, some lights will not be visible", buf, 2u);
      }
    }
    return 0;
  }
  LOWORD(v64) = 0;
  long long v66 = 0uLL;
  uint64_t v65 = 0;
  int v67 = 0;
  uint64_t v83 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  int v70 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  int v73 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  int v76 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  int v79 = 0;
  int v82 = 0;
  long long v81 = 0u;
  long long v80 = 0u;
  if (v11)
  {
    uint64_t v26 = v10 + 4384;
LABEL_33:
    uint64_t v22 = (_WORD *)re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addNew(v26, (uint64_t)&v84, (uint64_t)&v64);
    goto LABEL_65;
  }
  int32x4_t v28 = (uint64_t *)(v10 + 16);
  uint64_t v27 = *(void *)(v10 + 16);
  uint64_t v29 = v10 + 32;
  if (v27)
  {
    uint64_t v30 = 0;
    do
    {
      if (*(void *)(v10 + v30 + 32) == v6 && *(void *)(v10 + v30 + 40) == v9)
      {
        uint64_t v22 = (_WORD *)(v10 + v30 + 56);
        goto LABEL_65;
      }
      v30 += 272;
    }
    while (272 * v27 != v30);
    if ((v27 & 0xFFFFFFF0) != 0)
    {
      if (!*(void *)(v10 + 4384))
      {
        uint64_t v31 = *(uint64_t **)v10;
        if (!*(void *)v10)
        {
        }
        re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::init(v10 + 4384, (uint64_t)v31, 32);
        uint64_t v27 = *v28;
        if (!*v28)
        {
LABEL_57:
          re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear((void *)(v10 + 16));
          uint64_t v26 = v10 + 4384;
          goto LABEL_33;
        }
      }
      uint64_t v32 = v29 + 272 * v27;
      while (1)
      {
        unint64_t v33 = *(void *)(v29 + 16);
        if (*(void *)(v10 + 4384))
        {
          unint64_t v34 = v33 % *(unsigned int *)(v10 + 4408);
          uint64_t v35 = *(unsigned int *)(*(void *)(v10 + 4392) + 4 * v34);
          if (v35 != 0x7FFFFFFF)
          {
            uint64_t v36 = *(void *)(v10 + 4400);
            do
            {
              uint64_t v37 = v36 + 280 * v35;
              uint64_t v39 = *(void *)(v37 + 8);
              uint64_t v38 = *(void *)(v37 + 16);
              if (v39 == *(void *)v29 && v38 == *(void *)(v29 + 8)) {
                goto LABEL_56;
              }
              LODWORD(v35) = *(_DWORD *)(v36 + 280 * v35) & 0x7FFFFFFF;
            }
            while (v35 != 0x7FFFFFFF);
          }
        }
        else
        {
          LODWORD(v34) = 0;
        }
        re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(v10 + 4384, v34, v33, (long long *)v29, v29 + 24);
        ++*(_DWORD *)(v10 + 4424);
LABEL_56:
        v29 += 272;
        if (v29 == v32) {
          goto LABEL_57;
        }
      }
    }
  }
  *(_OWORD *)buf = v84;
  uint64_t v89 = v85;
  __int16 v90 = 0;
  uint64_t v91 = 0;
  uint64_t v65 = 0;
  long long v92 = 0u;
  long long v66 = 0u;
  int v67 = 1;
  int v93 = 1;
  long long v68 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v69 = 0u;
  int v70 = 1;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  int v73 = 1;
  int v96 = 1;
  int v99 = 1;
  long long v74 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v75 = 0u;
  int v76 = 1;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  int v102 = 1;
  int v105 = 1;
  long long v80 = 0u;
  long long v106 = 0u;
  long long v107 = v81;
  long long v81 = 0u;
  uint64_t v109 = 0;
  uint64_t v83 = 0;
  int v79 = 1;
  ++v82;
  int v108 = 1;
  if ((unint64_t)*v28 < 0x10)
  {
    uint64_t v41 = v29 + 272 * *v28;
    *(_OWORD *)uint64_t v41 = v84;
    *(void *)(v41 + 16) = v85;
    *(_WORD *)(v41 + 24) = 0;
    *(void *)(v41 + 40) = 0;
    *(void *)(v41 + 48) = 0;
    *(_DWORD *)(v41 + 56) = 0;
    *(void *)(v41 + 32) = v91;
    uint64_t v91 = 0;
    *(void *)(v41 + 40) = v92;
    *(void *)&long long v92 = 0;
    uint64_t v42 = *(void *)(v41 + 48);
    *(void *)(v41 + 48) = *((void *)&v92 + 1);
    *((void *)&v92 + 1) = v42;
    *(void *)(v41 + 64) = v94;
    *(void *)&long long v94 = 0;
    ++v93;
    ++*(_DWORD *)(v41 + 56);
    *(void *)(v41 + 80) = 0;
    *(void *)(v41 + 88) = 0;
    *(_DWORD *)(v41 + 96) = 0;
    *(void *)(v41 + 72) = *((void *)&v94 + 1);
    *((void *)&v94 + 1) = 0;
    *(void *)(v41 + 80) = v95;
    *(void *)&long long v95 = 0;
    uint64_t v43 = *(void *)(v41 + 88);
    *(void *)(v41 + 88) = *((void *)&v95 + 1);
    *((void *)&v95 + 1) = v43;
    *(void *)(v41 + 104) = v97;
    *(void *)&long long v97 = 0;
    ++v96;
    ++*(_DWORD *)(v41 + 96);
    *(void *)(v41 + 120) = 0;
    *(void *)(v41 + 128) = 0;
    *(_DWORD *)(v41 + 136) = 0;
    *(void *)(v41 + 112) = *((void *)&v97 + 1);
    *((void *)&v97 + 1) = 0;
    *(void *)&long long v98 = 0;
    uint64_t v44 = *(void *)(v41 + 128);
    *(void *)(v41 + 128) = 0;
    *((void *)&v98 + 1) = v44;
    *(void *)(v41 + 144) = 0;
    *(void *)&long long v100 = 0;
    int v99 = 2;
    ++*(_DWORD *)(v41 + 136);
    *(void *)(v41 + 160) = 0;
    *(void *)(v41 + 168) = 0;
    *(void *)(v41 + 152) = 0;
    *(_DWORD *)(v41 + 176) = 0;
    *((void *)&v100 + 1) = 0;
    *(void *)&long long v101 = 0;
    uint64_t v45 = *(void *)(v41 + 168);
    *(void *)(v41 + 168) = 0;
    *((void *)&v101 + 1) = v45;
    *(void *)(v41 + 184) = 0;
    *(void *)&long long v103 = 0;
    int v102 = 2;
    ++*(_DWORD *)(v41 + 176);
    *(_DWORD *)(v41 + 216) = 0;
    *(void *)(v41 + 200) = 0;
    *(void *)(v41 + 208) = 0;
    *(void *)(v41 + 192) = *((void *)&v103 + 1);
    *((void *)&v103 + 1) = 0;
    *(void *)(v41 + 200) = v104;
    *(void *)&long long v104 = 0;
    uint64_t v46 = *(void *)(v41 + 208);
    *(void *)(v41 + 208) = *((void *)&v104 + 1);
    *((void *)&v104 + 1) = v46;
    *(void *)(v41 + 224) = v106;
    *(void *)&long long v106 = 0;
    ++v105;
    ++*(_DWORD *)(v41 + 216);
    *(void *)(v41 + 240) = 0;
    *(void *)(v41 + 248) = 0;
    *(_DWORD *)(v41 + 256) = 0;
    *(void *)(v41 + 232) = *((void *)&v106 + 1);
    *((void *)&v106 + 1) = 0;
    *(void *)(v41 + 240) = v107;
    *(void *)&long long v107 = 0;
    uint64_t v47 = *(void *)(v41 + 248);
    *(void *)(v41 + 248) = *((void *)&v107 + 1);
    *((void *)&v107 + 1) = v47;
    *(void *)(v41 + 264) = v109;
    uint64_t v109 = 0;
    ++v108;
    ++*(_DWORD *)(v41 + 256);
    ++*(void *)(v10 + 16);
    ++*(_DWORD *)(v10 + 24);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v106 + 8);
    re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v103 + 8);
    re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v100 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v97 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v94 + 8);
    if (v91)
    {
      uint64_t v48 = v94;
      if ((void)v94) {
        (*(void (**)(void))(*(void *)v91 + 40))();
      }
    }
    if (!*v28)
    {
      re::internal::assertLog((re::internal *)6, v48, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, *v28 - 1, 0, v64);
      _os_crash();
      __break(1u);
LABEL_89:
      re::internal::assertLog((re::internal *)6, v60, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v61, 0);
      _os_crash();
      __break(1u);
      goto LABEL_90;
    }
    uint64_t v22 = (_WORD *)(v29 + 272 * (*v28 - 1) + 24);
LABEL_65:
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v80 + 8);
    re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v77 + 8);
    re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v74 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v71 + 8);
    re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v68 + 8);
    if (v65)
    {
      uint64_t v49 = v68;
      if ((void)v68) {
        (*(void (**)(void))(*(void *)v65 + 40))();
      }
    }
    int v50 = *(_DWORD *)(a1 + 24);
    if (v6) {
      __int16 v51 = *(_DWORD *)(a1 + 24);
    }
    else {
      __int16 v51 = 0;
    }
    *uint64_t v22 = v51;
    *(_DWORD *)(a1 + 24) = v50 + 1;
    uint64_t v52 = *(void *)(a1 + 40);
    if (*(_DWORD *)(v52 + 316))
    {
      uint64_t v53 = v52 + 288;
LABEL_73:
      re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v53, (uint64_t *)&v86, v22);
      return (uint64_t)v22;
    }
    uint64_t v54 = v52 + 32;
    unint64_t v55 = *(void *)(v52 + 16);
    uint64_t v56 = v86;
    if (v55)
    {
      uint64_t v57 = 0;
      while (*(void *)(v52 + v57 + 32) != v86)
      {
        v57 += 16;
        if (16 * v55 == v57)
        {
          if ((v55 & 0xFFFFFFF0) == 0) {
            goto LABEL_86;
          }
          if (*(void *)(v52 + 288)) {
            goto LABEL_83;
          }
          float32x4_t v58 = *(uint64_t **)v52;
          if (!*(void *)v52)
          {
          }
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v52 + 288, (uint64_t)v58, 32);
          unint64_t v55 = *(void *)(v52 + 16);
          if (v55)
          {
LABEL_83:
            uint64_t v59 = v54 + 16 * v55;
            do
            {
              re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v52 + 288, (uint64_t *)v54, (_WORD *)(v54 + 8));
              v54 += 16;
            }
            while (v54 != v59);
          }
          *(void *)(v52 + 16) = 0;
          ++*(_DWORD *)(v52 + 24);
          uint64_t v53 = v52 + 288;
          goto LABEL_73;
        }
      }
      return (uint64_t)v22;
    }
LABEL_86:
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(v55, v49);
    uint64_t v61 = *(void *)(v52 + 16);
    uint64_t v62 = v54 + 16 * v61;
    *(void *)uint64_t v62 = v56;
    *(_WORD *)(v62 + 8) = v51;
    ++*(_DWORD *)(v52 + 24);
    *(void *)(v52 + 16) = v61 + 1;
    if (v61 != -1) {
      return (uint64_t)v22;
    }
    goto LABEL_89;
  }
LABEL_90:
  re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re::DynamicString *re::DynamicArray<re::DirectionalLightInfo>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::DirectionalLightInfo>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(v5 + 144 * v4), a2);
  long long v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)result + 3) = v7;
  long long v8 = *((_OWORD *)a2 + 4);
  long long v9 = *((_OWORD *)a2 + 5);
  long long v10 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)result + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)result + 5) = v9;
  *((_OWORD *)result + 6) = v10;
  *((_OWORD *)result + 4) = v8;
  *(void *)((char *)result + 124) = *(void *)((char *)a2 + 124);
  int v11 = *((unsigned __int8 *)a2 + 132);
  *((unsigned char *)result + 132) = v11;
  if (v11) {
    *(unsigned char *)(v5 + 144 * v4 + 133) = *((unsigned char *)a2 + 133);
  }
  uint64_t v12 = v5 + 144 * v4;
  uint64_t v13 = *(void *)((char *)a2 + 134);
  *(_WORD *)(v12 + 142) = *((_WORD *)a2 + 71);
  *(void *)(v12 + 134) = v13;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

re::DynamicString *re::DynamicArray<re::SpotLightInfo>::add(uint64_t a1, re::DynamicString *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::SpotLightInfo>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::SpotLightInfo>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(v11 + 240 * v5), a2);
  long long v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)result + 3) = v13;
  long long v14 = *((_OWORD *)a2 + 4);
  long long v15 = *((_OWORD *)a2 + 5);
  long long v16 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)result + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)result + 5) = v15;
  *((_OWORD *)result + 6) = v16;
  *((_OWORD *)result + 4) = v14;
  long long v18 = *((_OWORD *)a2 + 11);
  long long v17 = *((_OWORD *)a2 + 12);
  long long v19 = *((_OWORD *)a2 + 10);
  *(_OWORD *)((char *)result + 204) = *(_OWORD *)((char *)a2 + 204);
  *((_OWORD *)result + 11) = v18;
  *((_OWORD *)result + 12) = v17;
  *((_OWORD *)result + 10) = v19;
  long long v20 = *((_OWORD *)a2 + 9);
  *((_OWORD *)result + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)result + 9) = v20;
  int v21 = *((unsigned __int8 *)a2 + 220);
  *((unsigned char *)result + 220) = v21;
  if (v21) {
    *(unsigned char *)(v11 + 240 * v5 + 221) = *((unsigned char *)a2 + 221);
  }
  uint64_t v22 = v11 + 240 * v5;
  __int16 v23 = *((_WORD *)a2 + 111);
  *(unsigned char *)(v22 + 224) = *((unsigned char *)a2 + 224);
  *(_WORD *)(v22 + 2re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v23;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re::DynamicString *re::DynamicArray<re::PointLightInfo>::add(uint64_t a1, re::DynamicString *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::PointLightInfo>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::PointLightInfo>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(v11 + 224 * v5), a2);
  long long v13 = *((_OWORD *)a2 + 3);
  *((_OWORD *)result + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)result + 3) = v13;
  long long v14 = *((_OWORD *)a2 + 4);
  long long v15 = *((_OWORD *)a2 + 5);
  long long v16 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)result + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)result + 5) = v15;
  *((_OWORD *)result + 6) = v16;
  *((_OWORD *)result + 4) = v14;
  long long v18 = *((_OWORD *)a2 + 11);
  long long v17 = *((_OWORD *)a2 + 12);
  long long v19 = *((_OWORD *)a2 + 10);
  *((_DWORD *)result + 52) = *((_DWORD *)a2 + 52);
  *((_OWORD *)result + 11) = v18;
  *((_OWORD *)result + 12) = v17;
  *((_OWORD *)result + 10) = v19;
  long long v20 = *((_OWORD *)a2 + 9);
  *((_OWORD *)result + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)result + 9) = v20;
  int v21 = *((unsigned __int8 *)a2 + 212);
  *((unsigned char *)result + 212) = v21;
  if (v21) {
    *(unsigned char *)(v11 + 224 * v5 + 213) = *((unsigned char *)a2 + 213);
  }
  *(_WORD *)(v11 + 224 * v5 + 214) = *((_WORD *)a2 + 107);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__n128 re::DynamicArray<re::RectAreaLightInfo>::add(uint64_t a1, re::DynamicString *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::RectAreaLightInfo>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RectAreaLightInfo>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = re::DynamicString::DynamicString((re::DynamicString *)(*(void *)(a1 + 32) + 144 * v5), a2);
  long long v12 = *((_OWORD *)a2 + 3);
  *((_OWORD *)v11 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)v11 + 3) = v12;
  __n128 result = *((__n128 *)a2 + 4);
  long long v14 = *((_OWORD *)a2 + 5);
  long long v15 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)v11 + 108) = *(_OWORD *)((char *)a2 + 108);
  *((_OWORD *)v11 + 5) = v14;
  *((_OWORD *)v11 + 6) = v15;
  *((__n128 *)v11 + 4) = result;
  uint64_t v16 = *((void *)a2 + 16);
  *((unsigned char *)v11 + 136) = *((unsigned char *)a2 + 136);
  *((void *)v11 + 16) = v16;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

__n128 re::DynamicArray<re::AmbientLightInfo>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::AABB>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::AABB>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = (_OWORD *)(*(void *)(a1 + 32) + 32 * v5);
  __n128 result = *(__n128 *)a2;
  long long v13 = *(_OWORD *)(a2 + 16);
  *uint64_t v11 = *(_OWORD *)a2;
  v11[1] = v13;
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re::ecs2::PointLightComponentStateImpl *re::ecs2::PointLightComponentStateImpl::PointLightComponentStateImpl(re::ecs2::PointLightComponentStateImpl *this)
{
  uint64_t v2 = (void *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *uint64_t v2 = &unk_26E6FBDC8;
  uint64_t v3 = (uint64_t)(v2 + 13);
  unint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  unint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  unint64_t v5 = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FC248;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

double anonymous namespace'::updateProjectionPointLightInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double result)
{
  *(unsigned char *)(a1 + 215) = (a2 | a3) != 0;
  if (!(a2 | a3))
  {
    *(_DWORD *)(a1 + 208) = 0;
    if (!a4) {
      return result;
    }
    float v8 = *(float *)(a1 + 116);
    float v9 = *(float *)(a1 + 120);
    goto LABEL_34;
  }
  LODWORD(result) = *(_DWORD *)(a1 + 116);
  float v6 = *(float *)(a1 + 120);
  if (a2)
  {
    if (*(unsigned char *)(a1 + 212)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(unsigned char *)(a2 + 32) == 0;
    }
    if (!v7)
    {
      if (!*(unsigned char *)(a1 + 212) || *(unsigned char *)(a2 + 32))
      {
        if (!*(unsigned char *)(a1 + 212) && *(unsigned char *)(a2 + 32)) {
          *(unsigned char *)(a1 + 212) = 1;
        }
        *(unsigned char *)(a1 + 213) = *(unsigned char *)(a2 + 33);
      }
      else
      {
        *(unsigned char *)(a1 + 212) = 0;
      }
    }
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 28);
    if (*(unsigned char *)(a2 + 36)) {
      uint64_t v11 = (float *)(a2 + 40);
    }
    else {
      uint64_t v11 = (float *)&kDefaultLightShadowNearPlane;
    }
    float v8 = *v11;
    long long v12 = (float *)(a1 + 200);
    if (*(unsigned char *)(a2 + 44)) {
      long long v12 = (float *)(a2 + 48);
    }
    float v9 = *v12;
  }
  else
  {
    if (a3) {
      float v10 = *(float *)(a3 + 28);
    }
    else {
      float v10 = 1.0;
    }
    *(float *)(a1 + 208) = v10;
    float v9 = v6;
    float v8 = *(float *)&result;
  }
  if (*(float *)(a1 + 200) <= v9) {
    float v9 = *(float *)(a1 + 200);
  }
  if ((a4 & 1) != 0 || (v8 == *(float *)&result ? (BOOL v13 = v9 == v6) : (BOOL v13 = 0), !v13))
  {
    *(float *)(a1 + 116) = v8;
    *(float *)(a1 + 120) = v9;
LABEL_34:
    re::Projection::makePerspectiveFieldOfViewReverseDepth(1.5708, 1.0, v8, v9, v16);
    long long v14 = v16[1];
    *(_OWORD *)(a1 + 128) = v16[0];
    *(_OWORD *)(a1 + 144) = v14;
    __n128 result = *(double *)&v17;
    long long v15 = v18;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v15;
  }
  return result;
}

void anonymous namespace'::getAnchorScale(_anonymous_namespace_ *this, const re::ecs2::Entity *a2)
{
  *(unsigned char *)this = 0;
  if (a2)
  {
    uint64_t v2 = (float32x4_t *)*((void *)a2 + 17);
    if (v2)
    {
      float32x4_t v4 = v2[3];
      float32x4_t v5 = v2[4];
      float32x4_t v6 = v2[5];
      float32x4_t v7 = vmulq_f32(v4, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL), (int8x16_t)v6, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v5, (int8x16_t)v5, 0xCuLL), (int8x16_t)v5, 8uLL)));
      float v8 = -1.0;
      float32x4_t v9 = vmulq_f32(v4, v4);
      float32x4_t v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0] > 0.0)float v8 = 1.0; {
      float32x4_t v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, v10));
      }
      v11.f32[0] = sqrtf(v11.f32[0]);
      float32x4_t v12 = vmulq_f32(v5, v5);
      float32x4_t v13 = vmulq_f32(v6, v6);
      v11.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
      v11.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
      float32x4_t v14 = vmulq_n_f32(v11, v8);
      float v15 = v14.f32[1];
      float v16 = v14.f32[2];
      if ((v14.f32[0] == v14.f32[1]
         || vabds_f32(v14.f32[0], v14.f32[1]) < (float)((float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[1])) + 1.0)
                                                      * 0.00001))
        && (v14.f32[0] == v14.f32[2]
         || vabds_f32(v14.f32[0], v14.f32[2]) < (float)((float)((float)(fabsf(v14.f32[0]) + fabsf(v14.f32[2])) + 1.0)
                                                      * 0.00001)))
      {
        goto LABEL_13;
      }
      {
        __int32 v19 = v14.i32[0];
        long long v17 = *re::graphicsLogObjects(this);
        BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        v14.i32[0] = v19;
        if (v18)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v17, OS_LOG_TYPE_DEFAULT, "LightSystem: non uniform system scale detected in AnchorComponent", buf, 2u);
          v14.i32[0] = v19;
        }
      }
      v14.f32[0] = fmaxf(fmaxf(v14.f32[0], v16), v15);
      if (!*(unsigned char *)this) {
LABEL_13:
      }
        *(unsigned char *)this = 1;
      *((_DWORD *)this + 1) = v14.i32[0];
    }
  }
}

re::ecs2::SpotLightComponentStateImpl *re::ecs2::SpotLightComponentStateImpl::SpotLightComponentStateImpl(re::ecs2::SpotLightComponentStateImpl *this)
{
  uint64_t v2 = (void *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *uint64_t v2 = &unk_26E6FBE08;
  uint64_t v3 = (uint64_t)(v2 + 13);
  float32x4_t v5 = re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  float32x4_t v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  float32x4_t v5 = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FC208;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

double anonymous namespace'::updateProjectionSpotLightInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double result)
{
  *(unsigned char *)(a1 + 224) = (a2 | a3) != 0;
  if (!(a2 | a3))
  {
    *(_DWORD *)(a1 + 216) = 0;
    if (!a4) {
      return result;
    }
    float v8 = *(float *)(a1 + 116);
    float v9 = *(float *)(a1 + 120);
    goto LABEL_34;
  }
  LODWORD(result) = *(_DWORD *)(a1 + 116);
  float v6 = *(float *)(a1 + 120);
  if (a2)
  {
    if (*(unsigned char *)(a1 + 220)) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = *(unsigned char *)(a2 + 32) == 0;
    }
    if (!v7)
    {
      if (!*(unsigned char *)(a1 + 220) || *(unsigned char *)(a2 + 32))
      {
        if (!*(unsigned char *)(a1 + 220) && *(unsigned char *)(a2 + 32)) {
          *(unsigned char *)(a1 + 220) = 1;
        }
        *(unsigned char *)(a1 + 221) = *(unsigned char *)(a2 + 33);
      }
      else
      {
        *(unsigned char *)(a1 + 220) = 0;
      }
    }
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 28);
    if (*(unsigned char *)(a2 + 36)) {
      float32x4_t v11 = (float *)(a2 + 40);
    }
    else {
      float32x4_t v11 = (float *)&kDefaultLightShadowNearPlane;
    }
    float v8 = *v11;
    float32x4_t v12 = (float *)(a1 + 200);
    if (*(unsigned char *)(a2 + 44)) {
      float32x4_t v12 = (float *)(a2 + 48);
    }
    float v9 = *v12;
  }
  else
  {
    if (a3) {
      float v10 = *(float *)(a3 + 28);
    }
    else {
      float v10 = 1.0;
    }
    *(float *)(a1 + 216) = v10;
    float v9 = v6;
    float v8 = *(float *)&result;
  }
  if (*(float *)(a1 + 200) <= v9) {
    float v9 = *(float *)(a1 + 200);
  }
  if ((a4 & 1) != 0 || (v8 == *(float *)&result ? (BOOL v13 = v9 == v6) : (BOOL v13 = 0), !v13))
  {
    *(float *)(a1 + 116) = v8;
    *(float *)(a1 + 120) = v9;
LABEL_34:
    re::Projection::makePerspectiveFieldOfViewReverseDepth(*(float *)(a1 + 208), 1.0, v8, v9, v16);
    long long v14 = v16[1];
    *(_OWORD *)(a1 + 128) = v16[0];
    *(_OWORD *)(a1 + 144) = v14;
    __n128 result = *(double *)&v17;
    long long v15 = v18;
    *(_OWORD *)(a1 + 160) = v17;
    *(_OWORD *)(a1 + 176) = v15;
  }
  return result;
}

re::ecs2::DirectionalLightComponentStateImpl *re::ecs2::DirectionalLightComponentStateImpl::DirectionalLightComponentStateImpl(re::ecs2::DirectionalLightComponentStateImpl *this)
{
  uint64_t v2 = (void *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *uint64_t v2 = &unk_26E6FBE48;
  uint64_t v3 = (uint64_t)(v2 + 13);
  float32x4_t v5 = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  float32x4_t v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FC1C8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

re::ecs2::FrustumLightComponentStateImpl *re::ecs2::FrustumLightComponentStateImpl::FrustumLightComponentStateImpl(re::ecs2::FrustumLightComponentStateImpl *this)
{
  uint64_t v2 = (void *)re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::BaseLightComponentStateImpl((uint64_t)this);
  *uint64_t v2 = &unk_26E6FBE88;
  uint64_t v3 = (uint64_t)(v2 + 13);
  float32x4_t v5 = re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add((uint64_t)(v2 + 13), &v5);
  float32x4_t v5 = re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(v3, &v5);
  return this;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FC108;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

uint64_t re::MeshAsset::partCountForModel(re::MeshAsset *this, unint64_t a2)
{
  uint64_t v2 = 416;
  if (!*((unsigned char *)this + 952)) {
    uint64_t v2 = 24;
  }
  if (*(void *)((char *)this + v2) <= a2)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "modelIndex < modelCount()", "partCountForModel", 139);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "meshManager != nullptr", "partCountForModel", 142);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (!*((unsigned char *)this + 952))
  {
    if (*((void *)this + 3) > a2)
    {
      uint64_t v4 = *((void *)this + 5) + (a2 << 9) + 208;
      return *(void *)v4;
    }
LABEL_14:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v3 = *((void *)this + 55);
  if (!v3) {
    goto LABEL_12;
  }
  if (*((void *)this + 52) <= a2)
  {
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = re::DataArray<re::MeshModel>::get(v3 + 8, *(void *)(*((void *)this + 54) + 8 * a2)) + 56;
  return *(void *)v4;
}

__n128 re::MeshAsset::boundingBoxForPartOnModel@<Q0>(re::MeshAsset *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (re::MeshAsset::partCountForModel(this, a2) <= a3)
  {
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "partIndex < partCountForModel(modelIndex)", "boundingBoxForPartOnModel", 253);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "meshManager != nullptr", "boundingBoxForPartOnModel", 256);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  if (!*((unsigned char *)this + 952))
  {
    if (*((void *)this + 3) > a2)
    {
      unint64_t v12 = *((void *)this + 5) + (a2 << 9);
      if (*(void *)(v12 + 208) > a3)
      {
        uint64_t v11 = *(void *)(v12 + 224) + (a3 << 8) + 96;
        goto LABEL_10;
      }
LABEL_16:
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = *((void *)this + 55);
  if (!v9) {
    goto LABEL_12;
  }
  if (*((void *)this + 52) <= a2)
  {
LABEL_13:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = re::DataArray<re::MeshModel>::get(v9 + 8, *(void *)(*((void *)this + 54) + 8 * a2));
  if (*(void *)(v10 + 56) <= a3)
  {
LABEL_14:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v10 + 64) + 560 * a3 + 432;
LABEL_10:
  __n128 result = *(__n128 *)v11;
  long long v14 = *(_OWORD *)(v11 + 16);
  *a4 = *(_OWORD *)v11;
  a4[1] = v14;
  return result;
}

void re::ecs2::LightSystem::updateScenes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    uint64_t v4 = a2[1];
    if (v4)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = 8 * v4;
      do
      {
        v5 += 8;
        re::ecs2::LightSystem::updateSceneInternal(a1);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

void re::ecs2::LightSystem::updateSceneInternal(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v611 = *MEMORY[0x263EF8340];
  v533[0] = v4;
  v533[1] = v5;
  v526 = v6;
  if (!v6) {
    return;
  }
  uint64_t v7 = v3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v532);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v531, 3025, v7);
  if (!*(void *)(v7 + 120)) {
    goto LABEL_662;
  }
  if (!*(void *)(v7 + 112))
  {
LABEL_663:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 1441);
    _os_crash();
    __break(1u);
LABEL_664:
    re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, v33, 0);
    _os_crash();
    __break(1u);
  }
  uint64_t v496 = (*(uint64_t (**)(void))(**(void **)(v7 + 136) + 24))(*(void *)(v7 + 136));
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v496 + 16))();
  int v10 = *(_DWORD *)(v9 + 124);
  if (!v10) {
    int v10 = *(_DWORD *)(v9 + 16);
  }
  int v495 = v10;
  uint64_t v11 = *(void *)(v7 + 112);
  uint64_t v12 = *(void *)(v11 + 104);
  if (v12)
  {
    v504 = (re::DynamicString **)re::RenderFrameBox::get(v12 + 344, 0xFFFFFFFFFFFFFFFuLL);
    uint64_t v11 = *(void *)(v7 + 112);
  }
  else
  {
    v504 = 0;
  }
  int v523 = *(unsigned __int8 *)(v11 + 274);
  v542.i64[0] = 0;
  v542.i32[2] = 0;
  v543.i64[0] = 0;
  v543.i32[2] = 0;
  long long v577 = 0u;
  long long v578 = 0u;
  int v579 = 0;
  uint64_t v580 = 0x7FFFFFFFLL;
  BOOL v13 = *(char **)(v11 + 152);
  v535[0] = (*(uint64_t (**)(void))(**(void **)(v7 + 144) + 16))(*(void *)(v7 + 144));
  uint64_t v14 = *(void *)(*(void *)(v7 + 112) + 88);
  if (v14)
  {
    v606.i8[0] = 0;
    *(void *)v581 = 0xFB51CF9FCBD130BALL;
    *(void *)&v581[8] = "overrides:enableshadows";
    BOOL v15 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v14, v581, &v606) == 0;
    re::StringID::destroyString((re::StringID *)v581);
    __int8 v1 = v606.i8[0];
    *(void *)v581 = 0x556F25DBCF9A2F18;
    *(void *)&v581[8] = "overrides:enablelightspill";
    BOOL v16 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v14, v581, &v606) == 0;
    re::StringID::destroyString((re::StringID *)v581);
    __int8 v2 = v606.i8[0];
  }
  else
  {
    BOOL v16 = 0;
    BOOL v15 = 0;
  }
  uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(v7 + 160) + 40))(*(void *)(v7 + 160));
  uint64_t v19 = v17;
  if (*(_DWORD *)(v17 + 316))
  {
    uint64_t v20 = *(unsigned int *)(v17 + 312);
    if (v20) {
      memset_pattern16(*(void **)(v17 + 296), &unk_2343655D0, 4 * v20);
    }
    uint64_t v21 = *(unsigned int *)(v19 + 320);
    if (v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 24 * v21;
      do
      {
        uint64_t v24 = *(void *)(v19 + 304);
        int v25 = *(_DWORD *)(v24 + v22);
        if (v25 < 0) {
          *(_DWORD *)(v24 + vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v25 & 0x7FFFFFFF;
        }
        v22 += 24;
      }
      while (v23 != v22);
    }
    *(_DWORD *)(v19 + 324) = 0x7FFFFFFF;
    *(void *)(v19 + 316) = 0;
    uint64_t v26 = (_DWORD *)(v19 + 328);
  }
  else
  {
    *(void *)(v17 + 16) = 0;
    uint64_t v26 = (_DWORD *)(v17 + 24);
  }
  ++*v26;
  *(_WORD *)v581 = 0;
  uint64_t v27 = v19 + 32;
  unint64_t v28 = *(void *)(v19 + 16);
  if (!v28) {
    goto LABEL_34;
  }
  uint64_t v29 = 0;
  do
  {
    if (!*(void *)(v19 + v29 + 32)) {
      goto LABEL_35;
    }
    v29 += 16;
  }
  while (16 * v28 != v29);
  if ((v28 & 0xFFFFFFF0) != 0)
  {
    if (*(void *)(v19 + 288)) {
      goto LABEL_31;
    }
    uint64_t v30 = *(uint64_t **)v19;
    if (!*(void *)v19)
    {
    }
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(v19 + 288, (uint64_t)v30, 32);
    unint64_t v28 = *(void *)(v19 + 16);
    if (v28)
    {
LABEL_31:
      unint64_t v31 = v27 + 16 * v28;
      do
      {
        re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v19 + 288, (uint64_t *)v27, (_WORD *)(v27 + 8));
        v27 += 16;
      }
      while (v27 != v31);
    }
    *(void *)(v19 + 16) = 0;
    ++*(_DWORD *)(v19 + 24);
    re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(v19 + 288, &re::kInvalidLightGroupId, v581);
  }
  else
  {
LABEL_34:
    re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(v28, v18);
    uint64_t v33 = *(void *)(v19 + 16);
    uint64_t v34 = v27 + 16 * v33;
    *(void *)uint64_t v34 = 0;
    *(_WORD *)(v34 + 8) = 0;
    ++*(_DWORD *)(v19 + 24);
    *(void *)(v19 + 16) = v33 + 1;
    if (v33 == -1) {
      goto LABEL_664;
    }
  }
LABEL_35:
  if (v13) {
    char v35 = *v13;
  }
  else {
    char v35 = 0;
  }
  uint64_t v36 = (*(uint64_t (**)(void))(**(void **)(v7 + 160) + 32))(*(void *)(v7 + 160));
  uint64_t v37 = (*(uint64_t (**)(void))(**(void **)(v7 + 160) + 40))(*(void *)(v7 + 160));
  *(void *)v538 = v7;
  *(void *)&v538[8] = v535;
  v538[16] = v15;
  if (v15) {
    v538[17] = v1;
  }
  v538[18] = v16;
  if (v16) {
    v538[19] = v2;
  }
  v538[20] = v35;
  *(void *)v539 = v36;
  *(void *)&v539[8] = v37;
  *(void *)&v539[16] = &v542;
  int v38 = *(_DWORD *)(v37 + 316);
  if (!v38) {
    int v38 = *(_DWORD *)(v37 + 16);
  }
  *(_DWORD *)&v538[24] = v38;
  uint64_t v527 = v7 + 2088;
  memset(v581, 0, 36);
  *(void *)&v581[36] = 0x7FFFFFFFLL;
  uint64_t v39 = *(unsigned int *)(v7 + 1936);
  if (v39)
  {
    uint64_t v40 = 0;
    uint64_t v41 = (int *)(*(void *)(v7 + 1920) + 8);
    while (1)
    {
      int v42 = *v41;
      v41 += 18;
      if (v42 < 0) {
        break;
      }
      if (v39 == ++v40)
      {
        LODWORD(v40) = *(_DWORD *)(v7 + 1936);
        break;
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if (v39 != v40)
  {
    uint64_t v43 = v40;
    do
    {
      uint64_t v44 = *(void *)(v7 + 1920) + 72 * v43;
      uint64_t v45 = v44 + 24;
      v606.i64[0] = *(void *)(v44 + 16);
      uint64_t v46 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 2144), &v606);
      if (v46 != -1)
      {
        uint64_t v47 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v527, *(void *)(*(void *)(v7 + 2152) + 16 * v46 + 8));
        uint64_t v48 = *(unsigned int *)(v45 + 32);
        if (v48)
        {
          uint64_t v49 = 0;
          int v50 = (int *)(*(void *)(v45 + 16) + 8);
          while (1)
          {
            int v51 = *v50;
            v50 += 6;
            if (v51 < 0) {
              break;
            }
            if (v48 == ++v49)
            {
              LODWORD(v49) = *(_DWORD *)(v45 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v49) = 0;
        }
        if (v48 != v49)
        {
          uint64_t v52 = v49;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::checkRenderOptionChanges(v47, *(void **)(*(void *)(v45 + 16) + 24 * v52 + 16), (re::ecs2::RenderOptions *)v535, (uint64_t)v581);
            if (*(_DWORD *)(v45 + 32) <= (v49 + 1)) {
              int v53 = v49 + 1;
            }
            else {
              int v53 = *(_DWORD *)(v45 + 32);
            }
            int v54 = v49;
            while (1)
            {
              uint64_t v52 = (v54 + 1);
              if (v53 - 1 == v54) {
                break;
              }
              ++v54;
              LODWORD(v49) = v52;
              if ((*(_DWORD *)(*(void *)(v45 + 16) + 24 * v52 + 8) & 0x80000000) != 0) {
                goto LABEL_69;
              }
            }
            LODWORD(v49) = v53;
LABEL_69:
            ;
          }
          while (v48 != v49);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v45);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v581);
      if (*(_DWORD *)(v7 + 1936) <= (v40 + 1)) {
        int v55 = v40 + 1;
      }
      else {
        int v55 = *(_DWORD *)(v7 + 1936);
      }
      while (1)
      {
        uint64_t v43 = (v40 + 1);
        if (v55 - 1 == v40) {
          break;
        }
        LODWORD(v40) = v40 + 1;
        int v56 = v43;
        if ((*(_DWORD *)(*(void *)(v7 + 1920) + 72 * v43 + 8) & 0x80000000) != 0) {
          goto LABEL_77;
        }
      }
      int v56 = v55;
LABEL_77:
      LODWORD(v40) = v56;
    }
    while (v39 != v56);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v581);
  *(void *)v581 = v526;
  unint64_t v57 = *(void *)(*(void *)(v7 + 2152)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 2144), v581)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 2256, v57);
  float32x4_t v58 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v527, v57);
  uint64_t v59 = *(void *)(*v58 + 224);
  unint64_t v60 = v58[3];
  unint64_t v61 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v58[2] + 8, v60);
  if (*(_DWORD *)(v61 + 40)) {
    int v62 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v59 + 24))(v59, v533, v58, v60, v61, v538);
  }
  else {
    int v62 = 0;
  }
  unint64_t v63 = v58[5];
  unint64_t v64 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v58[2] + 8, v63);
  if (*(_DWORD *)(v64 + 40)) {
    v62 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v59 + 32))(v59, v533, v58, v63, v64, v538);
  }
  unint64_t v65 = v58[6];
  uint64_t v66 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v58[2] + 8, v65);
  if (*(_DWORD *)(v66 + 40))
  {
    uint64_t v66 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, uint64_t, unsigned char *))(*(void *)v59 + 40))(v59, v533, v58, v65, v66, v538);
    if (((v62 | v66) & 1) == 0) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  if (v62) {
LABEL_85:
  }
    uint64_t v66 = re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 2256, v57);
LABEL_86:
  if (!*(unsigned char *)(v7 + 2320)) {
    goto LABEL_106;
  }
  unint64_t v68 = *(void *)(v7 + 2264);
  int v69 = *(_DWORD *)(v7 + 2272);
  if (v68 >= 0xB)
  {
    if (v69) {
      int v70 = (void *)(v7 + 2280);
    }
    else {
      int v70 = *(void **)(v7 + 2288);
    }
    uint64_t v72 = 8 * v68;
    while (!*v70)
    {
      ++v70;
      v72 -= 8;
      if (!v72) {
        goto LABEL_106;
      }
    }
LABEL_104:
    uint64_t v66 = *(void *)(v7 + 2304);
    if (!*(unsigned char *)(v66 + 86)) {
      re::ecs2::System::queueToRun((re::ecs2::System *)v66, 0.0);
    }
    goto LABEL_106;
  }
  if (v69)
  {
    long long v71 = (uint64_t *)(v7 + 2280);
    if (!v68) {
      goto LABEL_106;
    }
  }
  else
  {
    long long v71 = *(uint64_t **)(v7 + 2288);
    if (!v68) {
      goto LABEL_106;
    }
  }
  uint64_t v73 = 0;
  uint64_t v74 = 8 * v68;
  do
  {
    uint64_t v75 = *v71++;
    int v67 = v75;
    v73 |= v75;
    v74 -= 8;
  }
  while (v74);
  if (v73) {
    goto LABEL_104;
  }
LABEL_106:
  if (v523) {
    goto LABEL_107;
  }
  uint64_t v511 = v7 + 360;
  memset(v581, 0, 36);
  *(void *)&v581[36] = 0x7FFFFFFFLL;
  uint64_t v79 = *(unsigned int *)(v7 + 208);
  if (v79)
  {
    uint64_t v80 = 0;
    long long v81 = (int *)(*(void *)(v7 + 192) + 8);
    while (1)
    {
      int v82 = *v81;
      v81 += 18;
      if (v82 < 0) {
        break;
      }
      if (v79 == ++v80)
      {
        LODWORD(v80) = *(_DWORD *)(v7 + 208);
        break;
      }
    }
  }
  else
  {
    LODWORD(v80) = 0;
  }
  if (v79 != v80)
  {
    uint64_t v279 = v80;
    do
    {
      uint64_t v280 = *(void *)(v7 + 192) + 72 * v279;
      uint64_t v281 = v280 + 24;
      v606.i64[0] = *(void *)(v280 + 16);
      uint64_t v282 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 416), &v606);
      if (v282 != -1)
      {
        uint64_t v283 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v511, *(void *)(*(void *)(v7 + 424) + 16 * v282 + 8));
        uint64_t v284 = *(unsigned int *)(v281 + 32);
        if (v284)
        {
          uint64_t v285 = 0;
          v286 = (int *)(*(void *)(v281 + 16) + 8);
          while (1)
          {
            int v287 = *v286;
            v286 += 6;
            if (v287 < 0) {
              break;
            }
            if (v284 == ++v285)
            {
              LODWORD(v285) = *(_DWORD *)(v281 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v285) = 0;
        }
        if (v284 != v285)
        {
          uint64_t v288 = v285;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::checkRenderOptionChanges(v283, *(void **)(*(void *)(v281 + 16) + 24 * v288 + 16), (re::ecs2::RenderOptions *)v535, (uint64_t)v581);
            if (*(_DWORD *)(v281 + 32) <= (v285 + 1)) {
              int v289 = v285 + 1;
            }
            else {
              int v289 = *(_DWORD *)(v281 + 32);
            }
            int v290 = v285;
            while (1)
            {
              uint64_t v288 = (v290 + 1);
              if (v289 - 1 == v290) {
                break;
              }
              ++v290;
              LODWORD(v285) = v288;
              if ((*(_DWORD *)(*(void *)(v281 + 16) + 24 * v288 + 8) & 0x80000000) != 0) {
                goto LABEL_312;
              }
            }
            LODWORD(v285) = v289;
LABEL_312:
            ;
          }
          while (v284 != v285);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v281);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v581);
      if (*(_DWORD *)(v7 + 208) <= (v80 + 1)) {
        int v291 = v80 + 1;
      }
      else {
        int v291 = *(_DWORD *)(v7 + 208);
      }
      while (1)
      {
        uint64_t v279 = (v80 + 1);
        if (v291 - 1 == v80) {
          break;
        }
        LODWORD(v80) = v80 + 1;
        int v292 = v279;
        if ((*(_DWORD *)(*(void *)(v7 + 192) + 72 * v279 + 8) & 0x80000000) != 0) {
          goto LABEL_320;
        }
      }
      int v292 = v291;
LABEL_320:
      LODWORD(v80) = v292;
    }
    while (v79 != v292);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v581);
  uint64_t v515 = v7 + 792;
  memset(v581, 0, 36);
  *(void *)&v581[36] = 0x7FFFFFFFLL;
  uint64_t v293 = *(unsigned int *)(v7 + 640);
  if (v293)
  {
    uint64_t v294 = 0;
    v295 = (int *)(*(void *)(v7 + 624) + 8);
    while (1)
    {
      int v296 = *v295;
      v295 += 18;
      if (v296 < 0) {
        break;
      }
      if (v293 == ++v294)
      {
        LODWORD(v294) = *(_DWORD *)(v7 + 640);
        break;
      }
    }
  }
  else
  {
    LODWORD(v294) = 0;
  }
  if (v293 != v294)
  {
    uint64_t v297 = v294;
    do
    {
      uint64_t v298 = *(void *)(v7 + 624) + 72 * v297;
      uint64_t v299 = v298 + 24;
      v606.i64[0] = *(void *)(v298 + 16);
      uint64_t v300 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 848), &v606);
      if (v300 != -1)
      {
        uint64_t v301 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v515, *(void *)(*(void *)(v7 + 856) + 16 * v300 + 8));
        uint64_t v302 = *(unsigned int *)(v299 + 32);
        if (v302)
        {
          uint64_t v303 = 0;
          v304 = (int *)(*(void *)(v299 + 16) + 8);
          while (1)
          {
            int v305 = *v304;
            v304 += 6;
            if (v305 < 0) {
              break;
            }
            if (v302 == ++v303)
            {
              LODWORD(v303) = *(_DWORD *)(v299 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v303) = 0;
        }
        if (v302 != v303)
        {
          uint64_t v306 = v303;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::checkRenderOptionChanges(v301, *(void **)(*(void *)(v299 + 16) + 24 * v306 + 16), (re::ecs2::RenderOptions *)v535, (uint64_t)v581);
            if (*(_DWORD *)(v299 + 32) <= (v303 + 1)) {
              int v307 = v303 + 1;
            }
            else {
              int v307 = *(_DWORD *)(v299 + 32);
            }
            int v308 = v303;
            while (1)
            {
              uint64_t v306 = (v308 + 1);
              if (v307 - 1 == v308) {
                break;
              }
              ++v308;
              LODWORD(v303) = v306;
              if ((*(_DWORD *)(*(void *)(v299 + 16) + 24 * v306 + 8) & 0x80000000) != 0) {
                goto LABEL_346;
              }
            }
            LODWORD(v303) = v307;
LABEL_346:
            ;
          }
          while (v302 != v303);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v299);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v581);
      if (*(_DWORD *)(v7 + 640) <= (v294 + 1)) {
        int v309 = v294 + 1;
      }
      else {
        int v309 = *(_DWORD *)(v7 + 640);
      }
      while (1)
      {
        uint64_t v297 = (v294 + 1);
        if (v309 - 1 == v294) {
          break;
        }
        LODWORD(v294) = v294 + 1;
        int v310 = v297;
        if ((*(_DWORD *)(*(void *)(v7 + 624) + 72 * v297 + 8) & 0x80000000) != 0) {
          goto LABEL_354;
        }
      }
      int v310 = v309;
LABEL_354:
      LODWORD(v294) = v310;
    }
    while (v293 != v310);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v581);
  uint64_t v520 = v7 + 1224;
  memset(v581, 0, 36);
  *(void *)&v581[36] = 0x7FFFFFFFLL;
  uint64_t v311 = *(unsigned int *)(v7 + 1072);
  if (v311)
  {
    uint64_t v312 = 0;
    v313 = (int *)(*(void *)(v7 + 1056) + 8);
    while (1)
    {
      int v314 = *v313;
      v313 += 18;
      if (v314 < 0) {
        break;
      }
      if (v311 == ++v312)
      {
        LODWORD(v312) = *(_DWORD *)(v7 + 1072);
        break;
      }
    }
  }
  else
  {
    LODWORD(v312) = 0;
  }
  if (v311 != v312)
  {
    uint64_t v315 = v312;
    do
    {
      uint64_t v316 = *(void *)(v7 + 1056) + 72 * v315;
      uint64_t v317 = v316 + 24;
      v606.i64[0] = *(void *)(v316 + 16);
      uint64_t v318 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 1280), &v606);
      if (v318 != -1)
      {
        uint64_t v319 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v520, *(void *)(*(void *)(v7 + 1288) + 16 * v318 + 8));
        uint64_t v320 = *(unsigned int *)(v317 + 32);
        if (v320)
        {
          uint64_t v321 = 0;
          v322 = (int *)(*(void *)(v317 + 16) + 8);
          while (1)
          {
            int v323 = *v322;
            v322 += 6;
            if (v323 < 0) {
              break;
            }
            if (v320 == ++v321)
            {
              LODWORD(v321) = *(_DWORD *)(v317 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v321) = 0;
        }
        if (v320 != v321)
        {
          uint64_t v324 = v321;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::checkRenderOptionChanges(v319, *(void **)(*(void *)(v317 + 16) + 24 * v324 + 16), (re::ecs2::RenderOptions *)v535, (uint64_t)v581);
            if (*(_DWORD *)(v317 + 32) <= (v321 + 1)) {
              int v325 = v321 + 1;
            }
            else {
              int v325 = *(_DWORD *)(v317 + 32);
            }
            int v326 = v321;
            while (1)
            {
              uint64_t v324 = (v326 + 1);
              if (v325 - 1 == v326) {
                break;
              }
              ++v326;
              LODWORD(v321) = v324;
              if ((*(_DWORD *)(*(void *)(v317 + 16) + 24 * v324 + 8) & 0x80000000) != 0) {
                goto LABEL_380;
              }
            }
            LODWORD(v321) = v325;
LABEL_380:
            ;
          }
          while (v320 != v321);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v317);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v581);
      if (*(_DWORD *)(v7 + 1072) <= (v312 + 1)) {
        int v327 = v312 + 1;
      }
      else {
        int v327 = *(_DWORD *)(v7 + 1072);
      }
      while (1)
      {
        uint64_t v315 = (v312 + 1);
        if (v327 - 1 == v312) {
          break;
        }
        LODWORD(v312) = v312 + 1;
        int v328 = v315;
        if ((*(_DWORD *)(*(void *)(v7 + 1056) + 72 * v315 + 8) & 0x80000000) != 0) {
          goto LABEL_388;
        }
      }
      int v328 = v327;
LABEL_388:
      LODWORD(v312) = v328;
    }
    while (v311 != v328);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v581);
  uint64_t v522 = v7 + 1656;
  memset(v581, 0, 36);
  *(void *)&v581[36] = 0x7FFFFFFFLL;
  uint64_t v329 = *(unsigned int *)(v7 + 1504);
  if (v329)
  {
    uint64_t v330 = 0;
    v331 = (int *)(*(void *)(v7 + 1488) + 8);
    while (1)
    {
      int v332 = *v331;
      v331 += 18;
      if (v332 < 0) {
        break;
      }
      if (v329 == ++v330)
      {
        LODWORD(v330) = *(_DWORD *)(v7 + 1504);
        break;
      }
    }
  }
  else
  {
    LODWORD(v330) = 0;
  }
  if (v329 != v330)
  {
    uint64_t v333 = v330;
    do
    {
      uint64_t v334 = *(void *)(v7 + 1488) + 72 * v333;
      uint64_t v335 = v334 + 24;
      v606.i64[0] = *(void *)(v334 + 16);
      uint64_t v336 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 1712), &v606);
      if (v336 != -1)
      {
        uint64_t v337 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v522, *(void *)(*(void *)(v7 + 1720) + 16 * v336 + 8));
        uint64_t v338 = *(unsigned int *)(v335 + 32);
        if (v338)
        {
          uint64_t v339 = 0;
          v340 = (int *)(*(void *)(v335 + 16) + 8);
          while (1)
          {
            int v341 = *v340;
            v340 += 6;
            if (v341 < 0) {
              break;
            }
            if (v338 == ++v339)
            {
              LODWORD(v339) = *(_DWORD *)(v335 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v339) = 0;
        }
        if (v338 != v339)
        {
          uint64_t v342 = v339;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::checkRenderOptionChanges(v337, *(void **)(*(void *)(v335 + 16) + 24 * v342 + 16), (re::ecs2::RenderOptions *)v535, (uint64_t)v581);
            if (*(_DWORD *)(v335 + 32) <= (v339 + 1)) {
              int v343 = v339 + 1;
            }
            else {
              int v343 = *(_DWORD *)(v335 + 32);
            }
            int v344 = v339;
            while (1)
            {
              uint64_t v342 = (v344 + 1);
              if (v343 - 1 == v344) {
                break;
              }
              ++v344;
              LODWORD(v339) = v342;
              if ((*(_DWORD *)(*(void *)(v335 + 16) + 24 * v342 + 8) & 0x80000000) != 0) {
                goto LABEL_414;
              }
            }
            LODWORD(v339) = v343;
LABEL_414:
            ;
          }
          while (v338 != v339);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v335);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v581);
      if (*(_DWORD *)(v7 + 1504) <= (v330 + 1)) {
        int v345 = v330 + 1;
      }
      else {
        int v345 = *(_DWORD *)(v7 + 1504);
      }
      while (1)
      {
        uint64_t v333 = (v330 + 1);
        if (v345 - 1 == v330) {
          break;
        }
        LODWORD(v330) = v330 + 1;
        int v346 = v333;
        if ((*(_DWORD *)(*(void *)(v7 + 1488) + 72 * v333 + 8) & 0x80000000) != 0) {
          goto LABEL_422;
        }
      }
      int v346 = v345;
LABEL_422:
      LODWORD(v330) = v346;
    }
    while (v329 != v346);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v581);
  uint64_t v525 = v7 + 2520;
  memset(v581, 0, 36);
  *(void *)&v581[36] = 0x7FFFFFFFLL;
  uint64_t v347 = *(unsigned int *)(v7 + 2368);
  if (v347)
  {
    uint64_t v348 = 0;
    v349 = (int *)(*(void *)(v7 + 2352) + 8);
    while (1)
    {
      int v350 = *v349;
      v349 += 18;
      if (v350 < 0) {
        break;
      }
      if (v347 == ++v348)
      {
        LODWORD(v348) = *(_DWORD *)(v7 + 2368);
        break;
      }
    }
  }
  else
  {
    LODWORD(v348) = 0;
  }
  if (v347 != v348)
  {
    uint64_t v351 = v348;
    do
    {
      uint64_t v352 = *(void *)(v7 + 2352) + 72 * v351;
      uint64_t v353 = v352 + 24;
      v606.i64[0] = *(void *)(v352 + 16);
      uint64_t v354 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 2576), &v606);
      if (v354 != -1)
      {
        uint64_t v355 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v525, *(void *)(*(void *)(v7 + 2584) + 16 * v354 + 8));
        uint64_t v356 = *(unsigned int *)(v353 + 32);
        if (v356)
        {
          uint64_t v357 = 0;
          v358 = (int *)(*(void *)(v353 + 16) + 8);
          while (1)
          {
            int v359 = *v358;
            v358 += 6;
            if (v359 < 0) {
              break;
            }
            if (v356 == ++v357)
            {
              LODWORD(v357) = *(_DWORD *)(v353 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v357) = 0;
        }
        if (v356 != v357)
        {
          uint64_t v360 = v357;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::checkRenderOptionChanges(v355, *(void **)(*(void *)(v353 + 16) + 24 * v360 + 16), (re::ecs2::RenderOptions *)v535, (uint64_t)v581);
            if (*(_DWORD *)(v353 + 32) <= (v357 + 1)) {
              int v361 = v357 + 1;
            }
            else {
              int v361 = *(_DWORD *)(v353 + 32);
            }
            int v362 = v357;
            while (1)
            {
              uint64_t v360 = (v362 + 1);
              if (v361 - 1 == v362) {
                break;
              }
              ++v362;
              LODWORD(v357) = v360;
              if ((*(_DWORD *)(*(void *)(v353 + 16) + 24 * v360 + 8) & 0x80000000) != 0) {
                goto LABEL_448;
              }
            }
            LODWORD(v357) = v361;
LABEL_448:
            ;
          }
          while (v356 != v357);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v353);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v581);
      if (*(_DWORD *)(v7 + 2368) <= (v348 + 1)) {
        int v363 = v348 + 1;
      }
      else {
        int v363 = *(_DWORD *)(v7 + 2368);
      }
      while (1)
      {
        uint64_t v351 = (v348 + 1);
        if (v363 - 1 == v348) {
          break;
        }
        LODWORD(v348) = v348 + 1;
        int v364 = v351;
        if ((*(_DWORD *)(*(void *)(v7 + 2352) + 72 * v351 + 8) & 0x80000000) != 0) {
          goto LABEL_456;
        }
      }
      int v364 = v363;
LABEL_456:
      LODWORD(v348) = v364;
    }
    while (v347 != v364);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v581);
  uint64_t v530 = v7 + 2952;
  memset(v581, 0, 36);
  *(void *)&v581[36] = 0x7FFFFFFFLL;
  uint64_t v365 = *(unsigned int *)(v7 + 2800);
  if (v365)
  {
    uint64_t v366 = 0;
    v367 = (int *)(*(void *)(v7 + 2784) + 8);
    while (1)
    {
      int v368 = *v367;
      v367 += 18;
      if (v368 < 0) {
        break;
      }
      if (v365 == ++v366)
      {
        LODWORD(v366) = *(_DWORD *)(v7 + 2800);
        break;
      }
    }
  }
  else
  {
    LODWORD(v366) = 0;
  }
  if (v365 != v366)
  {
    uint64_t v369 = v366;
    do
    {
      uint64_t v370 = *(void *)(v7 + 2784) + 72 * v369;
      uint64_t v371 = v370 + 24;
      v606.i64[0] = *(void *)(v370 + 16);
      uint64_t v372 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 3008), &v606);
      if (v372 != -1)
      {
        uint64_t v373 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v530, *(void *)(*(void *)(v7 + 3016) + 16 * v372 + 8));
        uint64_t v374 = *(unsigned int *)(v371 + 32);
        if (v374)
        {
          uint64_t v375 = 0;
          v376 = (int *)(*(void *)(v371 + 16) + 8);
          while (1)
          {
            int v377 = *v376;
            v376 += 6;
            if (v377 < 0) {
              break;
            }
            if (v374 == ++v375)
            {
              LODWORD(v375) = *(_DWORD *)(v371 + 32);
              break;
            }
          }
        }
        else
        {
          LODWORD(v375) = 0;
        }
        if (v374 != v375)
        {
          uint64_t v378 = v375;
          do
          {
            re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::checkRenderOptionChanges(v373, *(void **)(*(void *)(v371 + 16) + 24 * v378 + 16), (re::ecs2::RenderOptions *)v535, (uint64_t)v581);
            if (*(_DWORD *)(v371 + 32) <= (v375 + 1)) {
              int v379 = v375 + 1;
            }
            else {
              int v379 = *(_DWORD *)(v371 + 32);
            }
            int v380 = v375;
            while (1)
            {
              uint64_t v378 = (v380 + 1);
              if (v379 - 1 == v380) {
                break;
              }
              ++v380;
              LODWORD(v375) = v378;
              if ((*(_DWORD *)(*(void *)(v371 + 16) + 24 * v378 + 8) & 0x80000000) != 0) {
                goto LABEL_482;
              }
            }
            LODWORD(v375) = v379;
LABEL_482:
            ;
          }
          while (v374 != v375);
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v371);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v581);
      if (*(_DWORD *)(v7 + 2800) <= (v366 + 1)) {
        int v381 = v366 + 1;
      }
      else {
        int v381 = *(_DWORD *)(v7 + 2800);
      }
      while (1)
      {
        uint64_t v369 = (v366 + 1);
        if (v381 - 1 == v366) {
          break;
        }
        LODWORD(v366) = v366 + 1;
        int v382 = v369;
        if ((*(_DWORD *)(*(void *)(v7 + 2784) + 72 * v369 + 8) & 0x80000000) != 0) {
          goto LABEL_490;
        }
      }
      int v382 = v381;
LABEL_490:
      LODWORD(v366) = v382;
    }
    while (v365 != v382);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v581);
  *(void *)v581 = v526;
  unint64_t v383 = *(void *)(*(void *)(v7 + 424)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 416), v581)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 528, v383);
  v384 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v511, v383);
  uint64_t v385 = *(void *)(*v384 + 224);
  unint64_t v386 = v384[3];
  unint64_t v387 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v384[2] + 8, v386);
  if (*(_DWORD *)(v387 + 40)) {
    int v388 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v385 + 24))(v385, v533, v384, v386, v387, v538);
  }
  else {
    int v388 = 0;
  }
  unint64_t v389 = v384[5];
  unint64_t v390 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v384[2] + 8, v389);
  if (*(_DWORD *)(v390 + 40)) {
    v388 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v385 + 32))(v385, v533, v384, v389, v390, v538);
  }
  unint64_t v391 = v384[6];
  unint64_t v392 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v384[2] + 8, v391);
  if (*(_DWORD *)(v392 + 40))
  {
    if (((v388 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v385 + 40))(v385, v533, v384, v391, v392, v538)) & 1) == 0)goto LABEL_499; {
    goto LABEL_498;
    }
  }
  if (v388) {
LABEL_498:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 528, v383);
LABEL_499:
  if (!*(unsigned char *)(v7 + 592)) {
    goto LABEL_519;
  }
  unint64_t v393 = *(void *)(v7 + 536);
  int v394 = *(_DWORD *)(v7 + 544);
  if (v393 < 0xB)
  {
    if (v394) {
      v396 = (uint64_t *)(v7 + 552);
    }
    else {
      v396 = *(uint64_t **)(v7 + 560);
    }
    if (!v393) {
      goto LABEL_519;
    }
    uint64_t v398 = 0;
    uint64_t v399 = 8 * v393;
    do
    {
      uint64_t v400 = *v396++;
      v398 |= v400;
      v399 -= 8;
    }
    while (v399);
    if (!v398) {
      goto LABEL_519;
    }
  }
  else
  {
    if (v394) {
      v395 = (void *)(v7 + 552);
    }
    else {
      v395 = *(void **)(v7 + 560);
    }
    uint64_t v397 = 8 * v393;
    while (!*v395)
    {
      ++v395;
      v397 -= 8;
      if (!v397) {
        goto LABEL_519;
      }
    }
  }
  v401 = *(re::ecs2::System **)(v7 + 576);
  if (!*((unsigned char *)v401 + 86)) {
    re::ecs2::System::queueToRun(v401, 0.0);
  }
LABEL_519:
  *(void *)v581 = v526;
  unint64_t v402 = *(void *)(*(void *)(v7 + 856)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 848), v581)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 960, v402);
  v403 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v515, v402);
  uint64_t v404 = *(void *)(*v403 + 224);
  unint64_t v405 = v403[3];
  unint64_t v406 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v403[2] + 8, v405);
  if (*(_DWORD *)(v406 + 40)) {
    int v407 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v404 + 24))(v404, v533, v403, v405, v406, v538);
  }
  else {
    int v407 = 0;
  }
  unint64_t v408 = v403[5];
  unint64_t v409 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v403[2] + 8, v408);
  if (*(_DWORD *)(v409 + 40)) {
    v407 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v404 + 32))(v404, v533, v403, v408, v409, v538);
  }
  unint64_t v410 = v403[6];
  unint64_t v411 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v403[2] + 8, v410);
  if (*(_DWORD *)(v411 + 40))
  {
    if (((v407 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v404 + 40))(v404, v533, v403, v410, v411, v538)) & 1) == 0)goto LABEL_527; {
    goto LABEL_526;
    }
  }
  if (v407) {
LABEL_526:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 960, v402);
LABEL_527:
  if (!*(unsigned char *)(v7 + 1024)) {
    goto LABEL_547;
  }
  unint64_t v412 = *(void *)(v7 + 968);
  int v413 = *(_DWORD *)(v7 + 976);
  if (v412 < 0xB)
  {
    if (v413) {
      v415 = (uint64_t *)(v7 + 984);
    }
    else {
      v415 = *(uint64_t **)(v7 + 992);
    }
    if (!v412) {
      goto LABEL_547;
    }
    uint64_t v417 = 0;
    uint64_t v418 = 8 * v412;
    do
    {
      uint64_t v419 = *v415++;
      v417 |= v419;
      v418 -= 8;
    }
    while (v418);
    if (!v417) {
      goto LABEL_547;
    }
  }
  else
  {
    if (v413) {
      v414 = (void *)(v7 + 984);
    }
    else {
      v414 = *(void **)(v7 + 992);
    }
    uint64_t v416 = 8 * v412;
    while (!*v414)
    {
      ++v414;
      v416 -= 8;
      if (!v416) {
        goto LABEL_547;
      }
    }
  }
  v420 = *(re::ecs2::System **)(v7 + 1008);
  if (!*((unsigned char *)v420 + 86)) {
    re::ecs2::System::queueToRun(v420, 0.0);
  }
LABEL_547:
  *(void *)v581 = v526;
  unint64_t v421 = *(void *)(*(void *)(v7 + 1288)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 1280), v581)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 1392, v421);
  v422 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v520, v421);
  uint64_t v423 = *(void *)(*v422 + 224);
  unint64_t v424 = v422[3];
  unint64_t v425 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v422[2] + 8, v424);
  if (*(_DWORD *)(v425 + 40)) {
    int v426 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v423 + 24))(v423, v533, v422, v424, v425, v538);
  }
  else {
    int v426 = 0;
  }
  unint64_t v427 = v422[5];
  unint64_t v428 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v422[2] + 8, v427);
  if (*(_DWORD *)(v428 + 40)) {
    v426 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v423 + 32))(v423, v533, v422, v427, v428, v538);
  }
  unint64_t v429 = v422[6];
  unint64_t v430 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v422[2] + 8, v429);
  if (*(_DWORD *)(v430 + 40))
  {
    if (((v426 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v423 + 40))(v423, v533, v422, v429, v430, v538)) & 1) == 0)goto LABEL_555; {
    goto LABEL_554;
    }
  }
  if (v426) {
LABEL_554:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 1392, v421);
LABEL_555:
  if (!*(unsigned char *)(v7 + 1456)) {
    goto LABEL_575;
  }
  unint64_t v431 = *(void *)(v7 + 1400);
  int v432 = *(_DWORD *)(v7 + 1408);
  if (v431 < 0xB)
  {
    if (v432) {
      v434 = (uint64_t *)(v7 + 1416);
    }
    else {
      v434 = *(uint64_t **)(v7 + 1424);
    }
    if (!v431) {
      goto LABEL_575;
    }
    uint64_t v436 = 0;
    uint64_t v437 = 8 * v431;
    do
    {
      uint64_t v438 = *v434++;
      v436 |= v438;
      v437 -= 8;
    }
    while (v437);
    if (!v436) {
      goto LABEL_575;
    }
  }
  else
  {
    if (v432) {
      v433 = (void *)(v7 + 1416);
    }
    else {
      v433 = *(void **)(v7 + 1424);
    }
    uint64_t v435 = 8 * v431;
    while (!*v433)
    {
      ++v433;
      v435 -= 8;
      if (!v435) {
        goto LABEL_575;
      }
    }
  }
  v439 = *(re::ecs2::System **)(v7 + 1440);
  if (!*((unsigned char *)v439 + 86)) {
    re::ecs2::System::queueToRun(v439, 0.0);
  }
LABEL_575:
  *(void *)v581 = v526;
  unint64_t v440 = *(void *)(*(void *)(v7 + 1720)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 1712), v581)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 1824, v440);
  v441 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v522, v440);
  uint64_t v442 = *(void *)(*v441 + 224);
  unint64_t v443 = v441[3];
  unint64_t v444 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v441[2] + 8, v443);
  if (*(_DWORD *)(v444 + 40)) {
    int v445 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v442 + 24))(v442, v533, v441, v443, v444, v538);
  }
  else {
    int v445 = 0;
  }
  unint64_t v446 = v441[5];
  unint64_t v447 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v441[2] + 8, v446);
  if (*(_DWORD *)(v447 + 40)) {
    v445 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v442 + 32))(v442, v533, v441, v446, v447, v538);
  }
  unint64_t v448 = v441[6];
  unint64_t v449 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v441[2] + 8, v448);
  if (*(_DWORD *)(v449 + 40))
  {
    if (((v445 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v442 + 40))(v442, v533, v441, v448, v449, v538)) & 1) == 0)goto LABEL_583; {
    goto LABEL_582;
    }
  }
  if (v445) {
LABEL_582:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 1824, v440);
LABEL_583:
  if (!*(unsigned char *)(v7 + 1888)) {
    goto LABEL_603;
  }
  unint64_t v450 = *(void *)(v7 + 1832);
  int v451 = *(_DWORD *)(v7 + 1840);
  if (v450 < 0xB)
  {
    if (v451) {
      v453 = (uint64_t *)(v7 + 1848);
    }
    else {
      v453 = *(uint64_t **)(v7 + 1856);
    }
    if (!v450) {
      goto LABEL_603;
    }
    uint64_t v455 = 0;
    uint64_t v456 = 8 * v450;
    do
    {
      uint64_t v457 = *v453++;
      v455 |= v457;
      v456 -= 8;
    }
    while (v456);
    if (!v455) {
      goto LABEL_603;
    }
  }
  else
  {
    if (v451) {
      v452 = (void *)(v7 + 1848);
    }
    else {
      v452 = *(void **)(v7 + 1856);
    }
    uint64_t v454 = 8 * v450;
    while (!*v452)
    {
      ++v452;
      v454 -= 8;
      if (!v454) {
        goto LABEL_603;
      }
    }
  }
  v458 = *(re::ecs2::System **)(v7 + 1872);
  if (!*((unsigned char *)v458 + 86)) {
    re::ecs2::System::queueToRun(v458, 0.0);
  }
LABEL_603:
  *(void *)v581 = v526;
  unint64_t v459 = *(void *)(*(void *)(v7 + 2584)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 2576), v581)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 2688, v459);
  v460 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v525, v459);
  uint64_t v461 = *(void *)(*v460 + 224);
  unint64_t v462 = v460[3];
  unint64_t v463 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v460[2] + 8, v462);
  if (*(_DWORD *)(v463 + 40)) {
    int v464 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v461 + 24))(v461, v533, v460, v462, v463, v538);
  }
  else {
    int v464 = 0;
  }
  unint64_t v465 = v460[5];
  unint64_t v466 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v460[2] + 8, v465);
  if (*(_DWORD *)(v466 + 40)) {
    v464 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v461 + 32))(v461, v533, v460, v465, v466, v538);
  }
  unint64_t v467 = v460[6];
  unint64_t v468 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v460[2] + 8, v467);
  if (*(_DWORD *)(v468 + 40))
  {
    if (((v464 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v461 + 40))(v461, v533, v460, v467, v468, v538)) & 1) == 0)goto LABEL_611; {
    goto LABEL_610;
    }
  }
  if (v464) {
LABEL_610:
  }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 2688, v459);
LABEL_611:
  if (!*(unsigned char *)(v7 + 2752)) {
    goto LABEL_631;
  }
  unint64_t v469 = *(void *)(v7 + 2696);
  int v470 = *(_DWORD *)(v7 + 2704);
  if (v469 < 0xB)
  {
    if (v470) {
      v472 = (uint64_t *)(v7 + 2712);
    }
    else {
      v472 = *(uint64_t **)(v7 + 2720);
    }
    if (!v469) {
      goto LABEL_631;
    }
    uint64_t v474 = 0;
    uint64_t v475 = 8 * v469;
    do
    {
      uint64_t v476 = *v472++;
      v474 |= v476;
      v475 -= 8;
    }
    while (v475);
    if (!v474) {
      goto LABEL_631;
    }
  }
  else
  {
    if (v470) {
      v471 = (void *)(v7 + 2712);
    }
    else {
      v471 = *(void **)(v7 + 2720);
    }
    uint64_t v473 = 8 * v469;
    while (!*v471)
    {
      ++v471;
      v473 -= 8;
      if (!v473) {
        goto LABEL_631;
      }
    }
  }
  v477 = *(re::ecs2::System **)(v7 + 2736);
  if (!*((unsigned char *)v477 + 86)) {
    re::ecs2::System::queueToRun(v477, 0.0);
  }
LABEL_631:
  *(void *)v581 = v526;
  unint64_t v478 = *(void *)(*(void *)(v7 + 3016)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v7 + 3008), v581)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(v7 + 3120, v478);
  v479 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v530, v478);
  uint64_t v480 = *(void *)(*v479 + 224);
  unint64_t v481 = v479[3];
  unint64_t v482 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v479[2] + 8, v481);
  if (*(_DWORD *)(v482 + 40)) {
    int v483 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v480 + 24))(v480, v533, v479, v481, v482, v538);
  }
  else {
    int v483 = 0;
  }
  unint64_t v484 = v479[5];
  unint64_t v485 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v479[2] + 8, v484);
  if (*(_DWORD *)(v485 + 40)) {
    v483 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, unsigned char *))(*(void *)v480 + 32))(v480, v533, v479, v484, v485, v538);
  }
  unint64_t v65 = v479[6];
  uint64_t v66 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v479[2] + 8, v65);
  if (*(_DWORD *)(v66 + 40))
  {
    uint64_t v66 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, uint64_t, unsigned char *))(*(void *)v480 + 40))(v480, v533, v479, v65, v66, v538);
    if (((v483 | v66) & 1) == 0) {
      goto LABEL_639;
    }
    goto LABEL_638;
  }
  if (v483) {
LABEL_638:
  }
    uint64_t v66 = re::DynamicBitset<unsigned long long,256ul>::setBit(v7 + 3120, v478);
LABEL_639:
  if (!*(unsigned char *)(v7 + 3184)) {
    goto LABEL_107;
  }
  unint64_t v486 = *(void *)(v7 + 3128);
  int v487 = *(_DWORD *)(v7 + 3136);
  if (v486 < 0xB)
  {
    if (v487) {
      v489 = (uint64_t *)(v7 + 3144);
    }
    else {
      v489 = *(uint64_t **)(v7 + 3152);
    }
    if (!v486) {
      goto LABEL_107;
    }
    uint64_t v491 = 0;
    uint64_t v492 = 8 * v486;
    do
    {
      uint64_t v493 = *v489++;
      int v67 = v493;
      v491 |= v493;
      v492 -= 8;
    }
    while (v492);
    if (!v491) {
      goto LABEL_107;
    }
  }
  else
  {
    if (v487) {
      v488 = (void *)(v7 + 3144);
    }
    else {
      v488 = *(void **)(v7 + 3152);
    }
    uint64_t v490 = 8 * v486;
    while (!*v488)
    {
      ++v488;
      v490 -= 8;
      if (!v490) {
        goto LABEL_107;
      }
    }
  }
  uint64_t v66 = *(void *)(v7 + 3168);
  if (!*(unsigned char *)(v66 + 86)) {
    re::ecs2::System::queueToRun((re::ecs2::System *)v66, 0.0);
  }
LABEL_107:
  v503 = (re::RenderFrameData *)(v504 + 33);
  int v76 = HIDWORD(v578);
  if (HIDWORD(v578))
  {
    int v67 = v579;
    if (v579)
    {
      uint64_t v77 = 0;
      long long v78 = (_DWORD *)v578;
      while ((*v78 & 0x80000000) == 0)
      {
        v78 += 70;
        if (v579 == ++v77)
        {
          LODWORD(v77) = v579;
          break;
        }
      }
      LODWORD(v65) = v77;
    }
    else
    {
      LODWORD(v65) = 0;
    }
    uint64_t v83 = (float32x4_t *)&v577;
    long long v84 = (float32x4_t *)&v577;
  }
  else
  {
    uint64_t v83 = &v544;
    long long v84 = &v544 + 17 * v543.i64[0];
  }
  BOOL v85 = v83 == v84;
  if (HIDWORD(v578)) {
    BOOL v85 = v67 == v65;
  }
  if (!v85)
  {
    unint64_t v528 = 0;
    unint64_t v90 = 0;
    unint64_t v89 = 0;
    unint64_t v88 = 0;
    unint64_t v87 = 0;
    unint64_t v86 = 0;
    v497 = v84;
    int v499 = HIDWORD(v578);
    int v498 = v67;
    while (1)
    {
      unint64_t v524 = v87;
      unint64_t v521 = v88;
      if (v76)
      {
        uint64_t v91 = v83[1].i64[0] + 280 * v65;
        long long v92 = (float32x4_t *)(v91 + 8);
        int v93 = (__int8 *)(v91 + 32);
      }
      else
      {
        int v93 = &v83[1].i8[8];
        long long v92 = v83;
      }
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v526, (const re::ecs2::Scene *)v92->i64[1], v504, v534);
      uint64_t v505 = *((void *)v93 + 3);
      uint64_t v507 = *((void *)v93 + 8);
      uint64_t v509 = *((void *)v93 + 13);
      uint64_t v512 = *((void *)v93 + 18);
      uint64_t v513 = *((void *)v93 + 23);
      uint64_t v516 = *((void *)v93 + 28);
      v536[0] = *(void *)&v534[0] >> 1;
      uint64_t v94 = re::RenderFrameData::stream(v503, (const re::WeakStringID *)v536);
      long long v95 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v94, v537);
      if (!v95)
      {
        uint64_t v96 = *(void *)(*(void *)(v94 + 48) + 8);
        uint64_t v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v96 + 32))(v96, 56, 8);
        *(void *)uint64_t v97 = 0;
        *(void *)(v97 + 8) = 0;
        *(_DWORD *)(v97 + 16) = 1;
        *(void *)(v97 + 32) = 0;
        *(void *)(v97 + 40) = 0;
        *(void *)(v97 + 24) = 0;
        *(_DWORD *)(v97 + 48) = 0;
        long long v98 = (re *)re::BucketArray<re::LightInfoArrays,4ul>::init(v97, v96, 1uLL);
        uint64_t v99 = re::globalAllocators(v98)[2];
        v606.i64[0] = (uint64_t)&unk_26E6FCF10;
        v606.i64[1] = v96;
        v607.i64[1] = v99;
        v608.i64[0] = (uint64_t)&v606;
        *(void *)&v581[8] = v97;
        *(void *)v581 = std::__any_imp::_SmallHandler<re::BucketArray<re::LightInfoArrays,4ul> *>::__handle[abi:nn180100];
        *((void *)&v582 + 1) = v99;
        uint64_t v583 = 0;
        re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v581[32], (uint64_t)&v606);
        long long v95 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v94, v537, (re *)v581);
        if (v583)
        {
          *(void *)v541 = v581;
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v583 + 16))(v583, v541);
        }
        re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v581[32]);
        if (*(void *)v581) {
          (*(void (**)(void, unsigned char *, void, void, void))v581)(0, v581, 0, 0, 0);
        }
        re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v606);
      }
      __int16 v101 = *(_WORD *)v93;
      uint64_t v102 = *((void *)v93 + 2);
      *(void *)&v581[8] = *((void *)v93 + 1);
      *((void *)v93 + 1) = 0;
      *(void *)&v581[16] = v102;
      *((void *)v93 + 2) = 0;
      *(void *)&v581[24] = *((void *)v93 + 3);
      *((void *)v93 + 3) = 0;
      uint64_t v103 = *((void *)v93 + 6);
      *(void *)&v581[40] = *((void *)v93 + 5);
      *((void *)v93 + 5) = 0;
      ++*((_DWORD *)v93 + 8);
      *(_DWORD *)&v581[32] = 1;
      *(void *)&long long v582 = v103;
      *((void *)v93 + 6) = 0;
      uint64_t v104 = *((void *)v93 + 8);
      *((void *)&v582 + 1) = *((void *)v93 + 7);
      *((void *)v93 + 7) = 0;
      uint64_t v583 = v104;
      *((void *)v93 + 8) = 0;
      uint64_t v105 = *((void *)v93 + 11);
      uint64_t v585 = *((void *)v93 + 10);
      *((void *)v93 + 10) = 0;
      ++*((_DWORD *)v93 + 18);
      int v584 = 1;
      uint64_t v586 = v105;
      *((void *)v93 + 11) = 0;
      uint64_t v106 = *((void *)v93 + 13);
      uint64_t v587 = *((void *)v93 + 12);
      *((void *)v93 + 12) = 0;
      uint64_t v588 = v106;
      *((void *)v93 + 13) = 0;
      uint64_t v107 = *((void *)v93 + 16);
      uint64_t v590 = *((void *)v93 + 15);
      *((void *)v93 + 15) = 0;
      ++*((_DWORD *)v93 + 28);
      int v589 = 1;
      uint64_t v591 = v107;
      *((void *)v93 + 16) = 0;
      uint64_t v108 = *((void *)v93 + 18);
      uint64_t v592 = *((void *)v93 + 17);
      *((void *)v93 + 17) = 0;
      uint64_t v593 = v108;
      *((void *)v93 + 18) = 0;
      uint64_t v109 = *((void *)v93 + 21);
      uint64_t v595 = *((void *)v93 + 20);
      *((void *)v93 + 20) = 0;
      ++*((_DWORD *)v93 + 38);
      int v594 = 1;
      uint64_t v596 = v109;
      *((void *)v93 + 21) = 0;
      uint64_t v110 = *((void *)v93 + 23);
      uint64_t v597 = *((void *)v93 + 22);
      *((void *)v93 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
      uint64_t v598 = v110;
      *((void *)v93 + 23) = 0;
      uint64_t v111 = *((void *)v93 + 26);
      uint64_t v600 = *((void *)v93 + 25);
      *((void *)v93 + 25) = 0;
      ++*((_DWORD *)v93 + 48);
      int v599 = 1;
      uint64_t v601 = v111;
      *((void *)v93 + 26) = 0;
      uint64_t v112 = *((void *)v93 + 28);
      uint64_t v602 = *((void *)v93 + 27);
      *((void *)v93 + 27) = 0;
      uint64_t v603 = v112;
      *((void *)v93 + 28) = 0;
      uint64_t v605 = *((void *)v93 + 30);
      *((void *)v93 + 30) = 0;
      ++*((_DWORD *)v93 + 58);
      int v604 = 1;
      unint64_t v113 = *(void *)(v100 + 40);
      unint64_t v114 = *(void *)(v100 + 8);
      *(_WORD *)v581 = v101;
      if (v113 + 1 > 4 * v114)
      {
        re::BucketArray<re::LightInfoArrays,4ul>::setBucketsCapacity((void *)v100, (v113 + 4) >> 2);
        unint64_t v114 = *(void *)(v100 + 8);
      }
      unint64_t v115 = v113 >> 2;
      if (v114 <= v113 >> 2) {
        goto LABEL_660;
      }
      if (*(unsigned char *)(v100 + 16)) {
        uint64_t v116 = v100 + 24;
      }
      else {
        uint64_t v116 = *(void *)(v100 + 32);
      }
      uint64_t v117 = *(void *)(v116 + 8 * v115);
      ++*(void *)(v100 + 40);
      ++*(_DWORD *)(v100 + 48);
      uint64_t v118 = v117 + 248 * (v113 & 3);
      *(_WORD *)uint64_t v118 = *(_WORD *)v581;
      *(void *)(v118 + 40) = 0;
      *(void *)(v118 + 16) = 0;
      *(void *)(v118 + 24) = 0;
      *(void *)(v118 + 8) = 0;
      *(_DWORD *)(v118 + 32) = 0;
      *(void *)(v118 + 8) = *(void *)&v581[8];
      *(void *)&v581[8] = 0;
      *(void *)(v118 + 16) = *(void *)&v581[16];
      *(void *)&v581[16] = 0;
      *(void *)(v118 + 24) = *(void *)&v581[24];
      *(void *)&v581[24] = 0;
      *(void *)(v118 + 40) = *(void *)&v581[40];
      *(void *)&v581[40] = 0;
      ++*(_DWORD *)&v581[32];
      ++*(_DWORD *)(v118 + 32);
      *(void *)(v118 + 80) = 0;
      *(void *)(v118 + 56) = 0;
      *(void *)(v118 + 64) = 0;
      *(void *)(v118 + 48) = 0;
      *(_DWORD *)(v118 + 72) = 0;
      *(void *)(v118 + 48) = v582;
      *(void *)&long long v582 = 0;
      *(void *)(v118 + 56) = *((void *)&v582 + 1);
      *((void *)&v582 + 1) = 0;
      *(void *)(v118 + 64) = v583;
      uint64_t v583 = 0;
      *(void *)(v118 + 80) = v585;
      uint64_t v585 = 0;
      ++v584;
      ++*(_DWORD *)(v118 + 72);
      *(void *)(v118 + 120) = 0;
      *(void *)(v118 + 96) = 0;
      *(void *)(v118 + 104) = 0;
      *(void *)(v118 + 88) = 0;
      *(_DWORD *)(v118 + 112) = 0;
      *(void *)(v118 + 88) = v586;
      uint64_t v586 = 0;
      *(void *)(v118 + 96) = v587;
      uint64_t v587 = 0;
      *(void *)(v118 + 104) = v588;
      uint64_t v588 = 0;
      *(void *)(v118 + 120) = v590;
      uint64_t v590 = 0;
      int v589 = 2;
      ++*(_DWORD *)(v118 + 112);
      *(void *)(v118 + 160) = 0;
      *(void *)(v118 + 136) = 0;
      *(void *)(v118 + 144) = 0;
      *(void *)(v118 + 128) = 0;
      *(_DWORD *)(v118 + 152) = 0;
      *(void *)(v118 + 128) = v591;
      uint64_t v591 = 0;
      *(void *)(v118 + 136) = v592;
      uint64_t v592 = 0;
      *(void *)(v118 + 144) = v593;
      uint64_t v593 = 0;
      *(void *)(v118 + 160) = v595;
      uint64_t v595 = 0;
      int v594 = 2;
      ++*(_DWORD *)(v118 + 152);
      *(void *)(v118 + 200) = 0;
      *(void *)(v118 + 176) = 0;
      *(void *)(v118 + 184) = 0;
      *(void *)(v118 + 168) = 0;
      *(_DWORD *)(v118 + 192) = 0;
      *(void *)(v118 + 168) = v596;
      uint64_t v596 = 0;
      *(void *)(v118 + 176) = v597;
      uint64_t v597 = 0;
      *(void *)(v118 + 184) = v598;
      uint64_t v598 = 0;
      *(void *)(v118 + 200) = v600;
      uint64_t v600 = 0;
      int v599 = 2;
      ++*(_DWORD *)(v118 + 192);
      *(void *)(v118 + 240) = 0;
      *(void *)(v118 + 216) = 0;
      *(void *)(v118 + 224) = 0;
      *(void *)(v118 + 208) = 0;
      *(_DWORD *)(v118 + 232) = 0;
      *(void *)(v118 + 208) = v601;
      uint64_t v601 = 0;
      *(void *)(v118 + 216) = v602;
      uint64_t v602 = 0;
      *(void *)(v118 + 224) = v603;
      uint64_t v603 = 0;
      *(void *)(v118 + 240) = v605;
      uint64_t v605 = 0;
      int v604 = 2;
      ++*(_DWORD *)(v118 + 232);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v601);
      re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v596);
      re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v591);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v586);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v582);
      if (*(void *)&v581[8])
      {
        uint64_t v119 = *(void *)&v581[40];
        if (*(void *)&v581[40]) {
          (*(void (**)(void))(**(void **)&v581[8] + 40))();
        }
      }
      uint64_t v120 = *(void *)(v100 + 40);
      if (!v120) {
        break;
      }
      re::BucketArray<re::LightInfoArrays,4ul>::operator[](v100, v120 - 1);
      re::StringID::destroyString((re::StringID *)v534);
      int v76 = v499;
      if (v499)
      {
        unsigned __int32 v121 = v65 + 1;
        uint64_t v122 = 280 * (v65 + 1);
        unint64_t v123 = v521;
        uint64_t v125 = v497;
        int v124 = v498;
        uint64_t v127 = v513;
        uint64_t v126 = v516;
        uint64_t v66 = v509;
        uint64_t v128 = v512;
        uint64_t v129 = v507;
        uint64_t v130 = v505;
        do
        {
          LODWORD(v65) = v121;
          if (v121 >= v83[2].i32[0]) {
            break;
          }
          int v131 = *(_DWORD *)(v83[1].i64[0] + v122);
          ++v121;
          v122 += 280;
        }
        while ((v131 & 0x80000000) == 0);
      }
      else
      {
        v83 += 17;
        unint64_t v123 = v521;
        uint64_t v125 = v497;
        int v124 = v498;
        uint64_t v127 = v513;
        uint64_t v126 = v516;
        uint64_t v66 = v509;
        uint64_t v128 = v512;
        uint64_t v129 = v507;
        uint64_t v130 = v505;
      }
      v528 += v130;
      v90 += v129;
      v89 += v66;
      unint64_t v88 = v128 + v123;
      unint64_t v87 = v127 + v524;
      v86 += v126;
      BOOL v132 = v83 == v125;
      if (v499) {
        BOOL v132 = v124 == v65;
      }
      if (v132) {
        goto LABEL_155;
      }
    }
LABEL_661:
    re::internal::assertLog((re::internal *)4, v119, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_662:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) ", "m_assetService", "updateSceneInternal", 1440);
    _os_crash();
    __break(1u);
    goto LABEL_663;
  }
  unint64_t v86 = 0;
  unint64_t v87 = 0;
  unint64_t v88 = 0;
  unint64_t v89 = 0;
  unint64_t v90 = 0;
  unint64_t v528 = 0;
LABEL_155:
  uint64_t isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v66);
  if (isStatisticCollectionEnabled)
  {
    uint64_t isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    uint64_t v134 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
    if (v134)
    {
      unint64_t v135 = v134[392].u64[0];
      if (v135 >= v528) {
        unint64_t v135 = v528;
      }
      v134[392].i64[0] = v135;
      unint64_t v136 = v134[392].u64[1];
      if (v136 <= v528) {
        unint64_t v136 = v528;
      }
      v134[392].i64[1] = v136;
      int64x2_t v137 = vdupq_n_s64(1uLL);
      v137.i64[0] = v528;
      v134[393] = vaddq_s64(v134[393], v137);
      *(unsigned char *)(isStatisticCollectionEnabled + 184) = 0;
    }
  }
  uint64_t v138 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if (v138)
  {
    uint64_t v138 = re::profilerThreadContext((re *)v138);
    uint64_t v139 = *(int64x2_t **)(v138 + 152);
    if (v139)
    {
      unint64_t v140 = v139[396].u64[0];
      if (v140 >= v90) {
        unint64_t v140 = v90;
      }
      v139[396].i64[0] = v140;
      unint64_t v141 = v139[396].u64[1];
      if (v141 <= v90) {
        unint64_t v141 = v90;
      }
      v139[396].i64[1] = v141;
      int64x2_t v142 = vdupq_n_s64(1uLL);
      v142.i64[0] = v90;
      v139[397] = vaddq_s64(v139[397], v142);
      *(unsigned char *)(v138 + 184) = 0;
    }
  }
  uint64_t v143 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v138);
  if (v143)
  {
    uint64_t v143 = re::profilerThreadContext((re *)v143);
    long long v144 = *(int64x2_t **)(v143 + 152);
    if (v144)
    {
      unint64_t v145 = v144[416].u64[0];
      if (v145 >= v89) {
        unint64_t v145 = v89;
      }
      v144[416].i64[0] = v145;
      unint64_t v146 = v144[416].u64[1];
      if (v146 <= v89) {
        unint64_t v146 = v89;
      }
      v144[416].i64[1] = v146;
      int64x2_t v147 = vdupq_n_s64(1uLL);
      v147.i64[0] = v89;
      v144[417] = vaddq_s64(v144[417], v147);
      *(unsigned char *)(v143 + 184) = 0;
    }
  }
  uint64_t v148 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v143);
  if (v148)
  {
    uint64_t v148 = re::profilerThreadContext((re *)v148);
    int v149 = *(int64x2_t **)(v148 + 152);
    if (v149)
    {
      unint64_t v150 = v149[408].u64[0];
      if (v150 >= v88) {
        unint64_t v150 = v88;
      }
      v149[408].i64[0] = v150;
      unint64_t v151 = v149[408].u64[1];
      if (v151 <= v88) {
        unint64_t v151 = v88;
      }
      v149[408].i64[1] = v151;
      int64x2_t v152 = vdupq_n_s64(1uLL);
      v152.i64[0] = v88;
      v149[409] = vaddq_s64(v149[409], v152);
      *(unsigned char *)(v148 + 184) = 0;
    }
  }
  unint64_t v153 = v88 + v89;
  uint64_t v154 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v148);
  if (v154)
  {
    uint64_t v154 = re::profilerThreadContext((re *)v154);
    v155 = *(int64x2_t **)(v154 + 152);
    if (v155)
    {
      unint64_t v156 = v155[400].u64[0];
      if (v156 >= v87) {
        unint64_t v156 = v87;
      }
      v155[400].i64[0] = v156;
      unint64_t v157 = v155[400].u64[1];
      if (v157 <= v87) {
        unint64_t v157 = v87;
      }
      v155[400].i64[1] = v157;
      int64x2_t v158 = vdupq_n_s64(1uLL);
      v158.i64[0] = v87;
      v155[401] = vaddq_s64(v155[401], v158);
      *(unsigned char *)(v154 + 184) = 0;
    }
  }
  unint64_t v159 = v87 + v86 + v153;
  uint64_t v161 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v154);
  if (v161)
  {
    uint64_t v161 = re::profilerThreadContext((re *)v161);
    int v162 = *(int64x2_t **)(v161 + 152);
    if (v162)
    {
      unint64_t v163 = v162[424].u64[0];
      if (v163 >= v86) {
        unint64_t v163 = v86;
      }
      v162[424].i64[0] = v163;
      unint64_t v164 = v162[424].u64[1];
      if (v164 <= v86) {
        unint64_t v164 = v86;
      }
      v162[424].i64[1] = v164;
      int64x2_t v165 = vdupq_n_s64(1uLL);
      v165.i64[0] = v86;
      v162[425] = vaddq_s64(v162[425], v165);
      *(unsigned char *)(v161 + 184) = 0;
    }
  }
  unint64_t v160 = v90 + v528;
  unint64_t v166 = v159 + v90 + v528;
  v167 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v161);
  if (v167)
  {
    uint64_t v168 = re::profilerThreadContext(v167);
    v169 = *(int64x2_t **)(v168 + 152);
    if (v169)
    {
      unint64_t v170 = v169[384].u64[0];
      if (v170 >= v166) {
        unint64_t v170 = v159 + v160;
      }
      v169[384].i64[0] = v170;
      unint64_t v171 = v169[384].u64[1];
      if (v171 <= v166) {
        unint64_t v171 = v159 + v160;
      }
      v169[384].i64[1] = v171;
      int64x2_t v172 = vdupq_n_s64(1uLL);
      v172.i64[0] = v159 + v160;
      v169[385] = vaddq_s64(v169[385], v172);
      *(unsigned char *)(v168 + 184) = 0;
    }
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (re::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear(&v543);
  re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit((uint64_t *)&v577);
  v542.i64[0] = 0;
  v542.i32[2] = 0;
  re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit((uint64_t *)&v577);
  v173 = (_anonymous_namespace_ *)re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear(&v543);
  memset(v541, 0, 36);
  *(void *)&v541[36] = 0x7FFFFFFFLL;
  uint64_t v174 = *(re::RenderManager ****)(v7 + 112);
  uint64_t v514 = *(void *)(v7 + 120);
  uint64_t v175 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v526 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v175)
  {
    long long v176 = *(float32x4_t ***)(v175 + 40);
    uint64_t v177 = *(void *)(v175 + 24);
    uint64_t v178 = re::RenderManager::perFrameAllocator((re::RenderManager *)v174);
    if (v177)
    {
      long long v179 = (void *)v178;
      v529 = &v176[v177];
      __asm { FMOV            V10.2S, #1.0 }
      int32x4_t v494 = vdupq_n_s32(0x7F800000u);
      do
      {
        v184 = *v176;
        uint64_t v185 = (*v176)[1].i64[0];
        if (*v176) {
          _ZF = *(void *)(v185 + 240) == 0;
        }
        else {
          _ZF = 1;
        }
        if (!_ZF)
        {
          unint64_t v187 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v185 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          uint64_t v188 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v185 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          uint64_t v517 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v185 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          uint64_t v189 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v185 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          uint64_t v190 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v185 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          long long v192 = xmmword_23435FD60;
          long long v191 = xmmword_23435FD50;
          if (v187 | v188 || v189 != 0)
          {
            uint64_t v194 = v190;
            uint64_t v195 = v184[2].i64[1];
            if (v195) {
              goto LABEL_667;
            }
            (*(void (**)(float32x4_t *__return_ptr, __int128, __int128))(*(void *)v514 + 8))(&v542, xmmword_23435FD50, xmmword_23435FD60);
            float32x4_t v196 = v184[2];
            v184[2] = v542;
            float32x4_t v542 = v196;
            uint64_t v197 = v184[3].i64[0];
            v184[3].i64[0] = v543.i64[0];
            v543.i64[0] = v197;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v542);
            uint64_t v195 = v184[2].i64[1];
            long long v192 = xmmword_23435FD60;
            long long v191 = xmmword_23435FD50;
            if (v195)
            {
LABEL_667:
              unsigned int v198 = atomic_load((unsigned int *)(v195 + 704));
              if (v198 == 2)
              {
                *(_OWORD *)v538 = v191;
                *(_OWORD *)&v538[16] = v192;
                *(_OWORD *)v539 = xmmword_23435FD80;
                if (v187)
                {
                  float v199 = *(float *)(v187 + 52) * 0.5;
                  float v518 = v199 / tanf(*(float *)(v187 + 32) * 0.5);
                  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v185, (const re::ecs2::Entity *)1, &v606);
                  uint64_t v200 = 0;
                  *(void *)&long long v201 = 0;
                  *((void *)&v201 + 1) = __PAIR64__(1.0, LODWORD(v518));
                  float32x4_t v202 = v606;
                  float32x4_t v203 = v607;
                  float32x4_t v204 = v608;
                  float32x4_t v205 = v609;
                  *(_OWORD *)v581 = xmmword_23435FD50;
                  *(_OWORD *)&v581[16] = xmmword_23435FD60;
                  *(_OWORD *)&v581[32] = xmmword_23435FD80;
                  long long v582 = v201;
                  do
                  {
                    *(float32x4_t *)((char *)&v542 + v200) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v202, COERCE_FLOAT(*(_OWORD *)&v581[v200])), v203, *(float32x2_t *)&v581[v200], 1), v204, *(float32x4_t *)&v581[v200], 2), v205, *(float32x4_t *)&v581[v200], 3);
                    v200 += 16;
                  }
                  while (v200 != 64);
                  float32x4_t v501 = v544;
                  float32x4_t v502 = v543;
                  float32x4_t v506 = v542;
                  float32x4_t v508 = v545;
                  float v206 = v518 + 0.00001;
                  float v207 = *(float *)(v187 + 48);
                  float v208 = *(float *)(v187 + 52);
LABEL_238:
                  *(void *)&v538[4] = 0;
                  *(void *)&v538[12] = 0;
                  *(void *)&v538[24] = 0;
                  *(void *)v539 = 0;
                  *(void *)&v539[12] = 0;
                  *(void *)&v539[20] = 0;
                  *(float *)v538 = v207;
                  *(float *)&v538[20] = v208;
                  *(float *)&v539[8] = v206;
                  *(_DWORD *)&v539[28] = 1065353216;
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v537, (const re::AssetHandle *)&v184[2]);
                  v536[0] = v537;
                  v536[1] = 1;
                  v230 = (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v179 + 32))(v179, 24, 8);
                  v230[1] = 0;
                  v230[2] = 0;
                  uint64_t *v230 = 0;
                  v231 = (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v179 + 32))(v179, 24, 8);
                  v231[1] = 0;
                  v231[2] = 0;
                  uint64_t *v231 = 0;
                  v232 = (uint64_t *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v179 + 32))(v179, 24, 8);
                  v232[1] = 0;
                  v232[2] = 0;
                  uint64_t *v232 = 0;
                  uint64_t v233 = *(void *)(v185 + 192);
                  if (v233)
                  {
                    uint64_t v234 = *(void *)(v233 + 104);
                    uint64_t v235 = *(void *)(v233 + 88);
                    v542.i64[0] = v234;
                    v542.i64[1] = v235;
                    re::MaterialAssetHelper::extractMaterialDataFromMaterialParameterBlocks(v179, v536, &v542, v230, v231);
                  }
                  v500 = v231;
                  v519 = v230;
                  v510 = v232;
                  re::MaterialAssetHelper::extractMaterialDataFromMaterialAssetHandles(v179, v536, 0, v230, v232);
                  re::MeshAsset::assetType(v236);
                  (*(void (**)(void *__return_ptr))(*(void *)v514 + 32))(v535);
                  v237 = (re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v535);
                  re::MeshAsset::boundingBoxForModel(v237, 0, &v542);
                  re::AABB::transform(&v542, (float32x4_t *)v538, (uint64_t)v534);
                  v238 = (re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v535);
                  unint64_t v239 = re::MeshAsset::partCountForModel(v238, 0);
                  unint64_t v114 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v179 + 32))(v179, 24, 8);
                  *(void *)(v114 + 8) = 0;
                  *(void *)(v114 + 16) = 0;
                  *(void *)unint64_t v114 = 0;
                  re::FixedArray<re::AABB>::init<>(v114, (uint64_t)v179, v239);
                  if (v239)
                  {
                    uint64_t v240 = 0;
                    unint64_t v241 = 0;
                    while (1)
                    {
                      re::MeshAsset::boundingBoxForPartOnModel(v237, 0, v241, &v606);
                      unint64_t v115 = *(void *)(v114 + 8);
                      if (v115 <= v241) {
                        break;
                      }
                      v242 = (float32x4_t *)(*(void *)(v114 + 16) + v240);
                      float32x4_t v243 = v607;
                      float32x4_t *v242 = v606;
                      v242[1] = v243;
                      ++v241;
                      v240 += 32;
                      if (v239 == v241) {
                        goto LABEL_244;
                      }
                    }
                    uint64_t v540 = 0;
                    float32x4_t v545 = 0u;
                    long long v546 = 0u;
                    float32x4_t v543 = 0u;
                    float32x4_t v544 = 0u;
                    float32x4_t v542 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v581 = 136315906;
                    *(void *)&v581[4] = "operator[]";
                    *(_WORD *)&v581[12] = 1024;
                    *(_DWORD *)&v581[14] = 468;
                    *(_WORD *)&v581[18] = 2048;
                    *(void *)&v581[20] = v241;
                    *(_WORD *)&v581[28] = 2048;
                    *(void *)&v581[30] = v115;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_660:
                    v537[0] = 0;
                    float32x4_t v609 = 0u;
                    long long v610 = 0u;
                    float32x4_t v607 = 0u;
                    float32x4_t v608 = 0u;
                    float32x4_t v606 = 0u;
                    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v541 = 136315906;
                    *(void *)&v541[4] = "operator[]";
                    *(_WORD *)&v541[12] = 1024;
                    *(_DWORD *)&v541[14] = 858;
                    *(_WORD *)&v541[18] = 2048;
                    *(void *)&v541[20] = v115;
                    *(_WORD *)&v541[28] = 2048;
                    *(void *)&v541[30] = v114;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_661;
                  }
LABEL_244:
                  char v562 = 0;
                  char v563 = 0;
                  long long v564 = 0u;
                  float32x4_t v542 = 0u;
                  float32x4_t v543 = 0u;
                  v544.i64[0] = 0;
                  float32x4_t v545 = 0u;
                  long long v546 = 0u;
                  long long v547 = 0u;
                  long long v548 = 0u;
                  long long v549 = 0u;
                  long long v550 = 0u;
                  long long v551 = 0u;
                  long long v552 = 0u;
                  char v553 = 0;
                  long long v554 = 0u;
                  long long v555 = 0u;
                  long long v556 = 0u;
                  long long v557 = 0u;
                  long long v558 = 0u;
                  long long v559 = 0u;
                  long long v560 = 0u;
                  memset(v561, 0, 28);
                  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                  }
                  uint64_t v565 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                  uint64_t v566 = _D10;
                  int v567 = 1065353216;
                  long long v568 = 0u;
                  memset(v569, 0, 19);
                  *(void *)((char *)&v569[2] + 4) = 0xFFFFFFFF00000001;
                  int32x4_t v570 = v494;
                  *(void *)&long long v244 = 0x7F0000007FLL;
                  *((void *)&v244 + 1) = 0x7F0000007FLL;
                  long long v571 = v244;
                  uint64_t v572 = 0;
                  char v573 = 0;
                  uint64_t v574 = 0;
                  char v575 = 0;
                  uint64_t v576 = 0x10100010001;
                  uint64_t v245 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)v535);
                  v246 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v179 + 32))(v179, 24, 8);
                  unint64_t v247 = *(void *)(v245 + 376);
                  *(void *)v581 = *(void *)(v245 + 392);
                  *(void *)&v581[8] = v247;
                  v246[1] = 0;
                  v246[2] = 0;
                  void *v246 = 0;
                  re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(v246, (uint64_t)v179, v247);
                  re::FixedArray<re::SkinningInfluence>::copy(v246, (const void **)v581);
                  uint64_t v248 = v246[1];
                  v542.i64[0] = v246[2];
                  v542.i64[1] = v248;
                  *(void *)v581 = v534;
                  *(void *)&v581[8] = 1;
                  uint64_t v249 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v179 + 32))(v179, 72, 8);
                  v543.i64[1] = re::MeshBoundingBoxes::MeshBoundingBoxes(v249, (uint64_t)v179, (const void **)v581, 1);
                  uint64_t v250 = *(void *)(v114 + 8);
                  *(void *)v581 = *(void *)(v114 + 16);
                  *(void *)&v581[8] = v250;
                  uint64_t v251 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v179 + 32))(v179, 72, 8);
                  uint64_t v252 = re::MeshBoundingBoxes::MeshBoundingBoxes(v251, (uint64_t)v179, (const void **)v581, 1);
                  unint64_t v253 = 0;
                  v544.i64[0] = v252;
                  float32x4_t v606 = *(float32x4_t *)v538;
                  float32x4_t v607 = *(float32x4_t *)&v538[16];
                  float32x4_t v608 = *(float32x4_t *)v539;
                  float32x4_t v609 = *(float32x4_t *)&v539[16];
                  do
                  {
                    *(float32x4_t *)&v581[v253] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v506, COERCE_FLOAT(*(_OWORD *)((char *)&v606 + v253))), v502, *(float32x2_t *)&v606.f32[v253 / 4], 1), v501, *(float32x4_t *)((char *)&v606 + v253), 2), v508, *(float32x4_t *)((char *)&v606 + v253), 3);
                    v253 += 16;
                  }
                  while (v253 != 64);
                  float32x4_t v545 = *(float32x4_t *)v581;
                  long long v546 = *(_OWORD *)&v581[16];
                  long long v547 = *(_OWORD *)&v581[32];
                  long long v548 = v582;
                  uint64_t v254 = v519[1];
                  *(void *)&long long v549 = v519[2];
                  *((void *)&v549 + 1) = v254;
                  uint64_t v255 = v500[1];
                  *(void *)&long long v554 = v500[2];
                  *((void *)&v554 + 1) = v255;
                  uint64_t v256 = v510[1];
                  *(void *)&long long v555 = v510[2];
                  *((void *)&v555 + 1) = v256;
                  LODWORD(v257) = v569[0] & 0xFFFFFFF7;
                  HIDWORD(v257) = HIDWORD(v569[0]) | 8;
                  uint64_t v258 = *(void *)(v185 + 296);
                  v569[0] = v257;
                  int32x4_t v570 = (int32x4_t)v534[0];
                  long long v571 = v534[1];
                  v569[1] = v258;
                  uint64_t v572 = v252;
                  v259 = v174[3];
                  *(void *)v581 = *(void *)(v185 + 296);
                  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v259 + 129), (uint64_t *)v581))
                  {
                    v260 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(v174[3], *(void *)(v185 + 296));
                    *(void *)&long long v558 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v260, v179);
                  }
                  (*(void (**)(unsigned char *__return_ptr))(*(void *)v496 + 8))(v581);
                  if (v581[0]) {
                    unint64_t v261 = *(void *)&v581[8];
                  }
                  else {
                    unint64_t v261 = 0;
                  }
                  v606.i64[0] = v261;
                  *(void *)&v581[16] = 0;
                  *(_DWORD *)&v581[24] = 0;
                  *(void *)&v581[32] = 0;
                  *(_OWORD *)v581 = (unint64_t)v179;
                  re::DynamicArray<re::MeshScene>::setCapacity(v581, 0);
                  ++*(_DWORD *)&v581[24];
                  unint64_t v262 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v261 ^ (v261 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v261 ^ (v261 >> 30))) >> 27));
                  unint64_t v263 = v262 ^ (v262 >> 31);
                  if (*(void *)v541)
                  {
                    unint64_t v264 = v263 % *(unsigned int *)&v541[24];
                    uint64_t v265 = *(unsigned int *)(*(void *)&v541[8] + 4 * v264);
                    if (v265 != 0x7FFFFFFF)
                    {
                      while (*(void *)(*(void *)&v541[16] + (v265 << 6) + 16) != v261)
                      {
                        uint64_t v265 = *(_DWORD *)(*(void *)&v541[16] + (v265 << 6) + 8) & 0x7FFFFFFF;
                        if (v265 == 0x7FFFFFFF) {
                          goto LABEL_259;
                        }
                      }
                      unint64_t v267 = *(void *)&v541[16] + (v265 << 6);
                      goto LABEL_261;
                    }
                  }
                  else
                  {
                    LODWORD(v264) = 0;
                  }
LABEL_259:
                  unsigned int v266 = re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v541, v264, v263, &v606, (uint64_t)v581);
                  ++*(_DWORD *)&v541[40];
                  unint64_t v267 = *(void *)&v541[16] + ((unint64_t)v266 << 6);
LABEL_261:
                  if (*(void *)(v267 + 24)) {
                    re::DynamicArray<re::MeshScene>::add((_anonymous_namespace_ *)(v267 + 24), (long long *)&v542);
                  }
                  re::DynamicArray<re::MeshScene>::deinit((uint64_t)v581);
                  if (v561[2])
                  {
                    if ((void)v559) {
                      *(void *)&long long v559 = 0;
                    }
                    if (*((void *)&v558 + 1)) {
                      (*(void (**)(void))(*(void *)v561[2] + 40))();
                    }
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v535);
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)v537);
                  goto LABEL_269;
                }
                re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v185, (const re::ecs2::Entity *)1, &v542);
                if (v188)
                {
                  float32x4_t v508 = v545;
                  int32x4_t v209 = (int32x4_t)vmulq_f32(v542, v542);
                  v209.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v209, 2), vadd_f32(*(float32x2_t *)v209.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v209.i8, 1))).u32[0];
                  float32x2_t v210 = vrsqrte_f32((float32x2_t)v209.u32[0]);
                  float32x2_t v211 = vmul_f32(v210, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v210, v210)));
                  float32x4_t v225 = vmulq_n_f32(v542, vmul_f32(v211, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v211, v211))).f32[0]);
                  float32x4_t v212 = vmulq_f32(v543, v225);
                  float32x4_t v213 = vmulq_f32(v225, v225);
                  v213.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v213, 2), vaddq_f32(v213, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v213.f32, 1))).f32[0];
                  float32x4_t v214 = vsubq_f32(v543, vmulq_n_f32(v225, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v212, 2), vaddq_f32(v212, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v212.f32, 1))).f32[0]/ v213.f32[0]));
                  int32x4_t v215 = (int32x4_t)vmulq_f32(v214, v214);
                  v215.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v215, 2), vadd_f32(*(float32x2_t *)v215.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.i8, 1))).u32[0];
                  float32x2_t v216 = vrsqrte_f32((float32x2_t)v215.u32[0]);
                  float32x2_t v217 = vmul_f32(v216, vrsqrts_f32((float32x2_t)v215.u32[0], vmul_f32(v216, v216)));
                  v215.i32[0] = vmul_f32(v217, vrsqrts_f32((float32x2_t)v215.u32[0], vmul_f32(v217, v217))).u32[0];
                  float32x4_t v218 = vmulq_f32(v544, v225);
                  float32x4_t v219 = vmulq_n_f32(v214, *(float *)v215.i32);
                  float32x4_t v220 = vsubq_f32(v544, vmulq_n_f32(v225, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v218, 2), vaddq_f32(v218, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v218.f32, 1))).f32[0]/ v213.f32[0]));
                  float32x4_t v221 = vmulq_f32(v544, v219);
                  float32x4_t v222 = vmulq_f32(v219, v219);
                  float32x4_t v223 = vsubq_f32(v220, vmulq_n_f32(v219, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v221, 2), vaddq_f32(v221, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v222, 2), vaddq_f32(v222, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 1))).f32[0]));
                  int32x4_t v224 = (int32x4_t)vmulq_f32(v223, v223);
                  v224.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v224, 2), vadd_f32(*(float32x2_t *)v224.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.i8, 1))).u32[0];
                  *(float32x2_t *)v222.f32 = vrsqrte_f32((float32x2_t)v224.u32[0]);
                  *(float32x2_t *)v222.f32 = vmul_f32(*(float32x2_t *)v222.f32, vrsqrts_f32((float32x2_t)v224.u32[0], vmul_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32)));
                  float32x4_t v226 = vmulq_n_f32(v223, vmul_f32(*(float32x2_t *)v222.f32, vrsqrts_f32((float32x2_t)v224.u32[0], vmul_f32(*(float32x2_t *)v222.f32, *(float32x2_t *)v222.f32))).f32[0]);
                  v225.i32[3] = v542.i32[3];
                  v219.i32[3] = v543.i32[3];
                  float32x4_t v502 = v219;
                  v226.i32[3] = v544.i32[3];
                  if (!v194) {
                    goto LABEL_233;
                  }
LABEL_231:
                  if (*(unsigned char *)(v194 + 36))
                  {
                    v228 = (float *)(v194 + 40);
                    goto LABEL_236;
                  }
                }
                else
                {
                  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v185, (const re::ecs2::Entity *)1, &v542);
                  float32x4_t v227 = v545;
                  v227.i32[3] = 1.0;
                  float32x4_t v508 = v227;
                  float32x4_t v225 = (float32x4_t)xmmword_23435FD50;
                  float32x4_t v502 = (float32x4_t)xmmword_23435FD60;
                  float32x4_t v226 = (float32x4_t)xmmword_23435FD80;
                  if (v194) {
                    goto LABEL_231;
                  }
                }
LABEL_233:
                float v229 = 0.01;
                if (v517 && *(unsigned char *)(v517 + 36))
                {
                  v228 = (float *)(v517 + 40);
LABEL_236:
                  float v229 = *v228;
                }
                float32x4_t v501 = v226;
                float32x4_t v506 = v225;
                float v207 = v229 + 0.00001;
                float v208 = v207;
                float v206 = v207;
                goto LABEL_238;
              }
            }
            re::AssetHandle::loadAsync((re::AssetHandle *)&v184[2]);
          }
        }
LABEL_269:
        ++v176;
      }
      while (v176 != v529);
    }
  }
  else
  {
    re::RenderManager::perFrameAllocator((re::RenderManager *)v174);
  }
  int v268 = *(_DWORD *)&v541[32];
  if (*(_DWORD *)&v541[32])
  {
    uint64_t v269 = 0;
    v270 = (int *)(*(void *)&v541[16] + 8);
    while (1)
    {
      int v271 = *v270;
      v270 += 16;
      if (v271 < 0) {
        break;
      }
      if (*(unsigned int *)&v541[32] == ++v269)
      {
        LODWORD(v269) = *(_DWORD *)&v541[32];
        break;
      }
    }
  }
  else
  {
    LODWORD(v269) = 0;
  }
  if (*(_DWORD *)&v541[32] != v269)
  {
    uint64_t v272 = v269;
    uint64_t v273 = *(void *)&v541[16];
    unsigned int v274 = *(_DWORD *)&v541[32];
    do
    {
      uint64_t v275 = v273 + (v272 << 6);
      if (*(void *)(v275 + 40))
      {
        re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v526, *(const re::ecs2::Scene **)(v275 + 16), v504, &v542);
        *(void *)v581 = (unint64_t)v542.i64[0] >> 1;
        uint64_t v276 = **(void **)(re::RenderFrameData::stream(v503, (const re::WeakStringID *)v581) + 48);
        (*(void (**)(void))(v276 + 848))();
        re::StringID::destroyString((re::StringID *)&v542);
        unsigned int v274 = *(_DWORD *)&v541[32];
        uint64_t v273 = *(void *)&v541[16];
      }
      if (v274 <= (int)v269 + 1) {
        unsigned int v277 = v269 + 1;
      }
      else {
        unsigned int v277 = v274;
      }
      while (1)
      {
        uint64_t v272 = (v269 + 1);
        if (v277 - 1 == v269) {
          break;
        }
        LODWORD(v269) = v269 + 1;
        unsigned int v278 = v272;
        if ((*(_DWORD *)(v273 + (v272 << 6) + 8) & 0x80000000) != 0) {
          goto LABEL_289;
        }
      }
      unsigned int v278 = v277;
LABEL_289:
      LODWORD(v269) = v278;
    }
    while (v268 != v278);
  }
  re::HashTable<unsigned long long,re::MeshSceneCollection,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v541);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v531);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v532);
}

uint64_t re::ecs2::LightSystem::willAddSystemToECSService(re::ecs2::LightSystem *this)
{
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v2);
  *((void *)this + 20) = result;
  return result;
}

double re::ecs2::LightSystem::willRemoveSystemFromECSService(re::ecs2::LightSystem *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

uint64_t re::ecs2::LightSystem::willAddSceneToECSService(re::ecs2::LightSystem *this, re::EventBus **a2)
{
  uint64_t v406 = *MEMORY[0x263EF8340];
  v367 = (re::ecs2::Scene *)a2;
  uint64_t v4 = *((void *)this + 20);
  if (v4) {
    (*(void (**)(uint64_t, re::EventBus **))(*(void *)v4 + 56))(v4, a2);
  }
  int v368 = (re::ecs2::Scene *)a2;
  unint64_t v5 = *((void *)this + 61);
  int v6 = *((_DWORD *)this + 124);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)((char *)this + 504);
    }
    else {
      uint64_t v7 = (void *)*((void *)this + 64);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  if (v6)
  {
    uint64_t v8 = (uint64_t *)((char *)this + 504);
    if (!v5) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)*((void *)this + 64);
    if (!v5) {
      goto LABEL_19;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_18:
    *(void *)&long long v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 480, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 360, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::init(v13, (uint64_t)this + 360, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 416), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 480, v388);
    uint64_t v14 = (char *)this + 528;
    unint64_t v15 = v388;
    goto LABEL_51;
  }
LABEL_19:
  long long v392 = 0u;
  long long v395 = 0u;
  long long v388 = 0u;
  *(void *)&long long v389 = 0;
  long long v390 = 0u;
  long long v391 = 0u;
  *((void *)&v389 + 1) = -1;
  *(void *)&long long v392 = 0;
  DWORD2(v392) = 1;
  uint64_t v393 = 0;
  uint64_t v394 = 0;
  unint64_t v16 = *((void *)this + 50);
  *(void *)&long long v395 = 0;
  unint64_t v17 = *((void *)this + 46);
  DWORD2(v395) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 45, (v16 + 4) >> 2);
    unint64_t v17 = *((void *)this + 46);
  }
  unint64_t v18 = v16 >> 2;
  if (v17 <= v16 >> 2)
  {
    uint64_t v369 = 0;
    long long v404 = 0u;
    long long v405 = 0u;
    long long v402 = 0u;
    long long v403 = 0u;
    long long v401 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(void *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    __int16 v397 = 2048;
    unint64_t v398 = v16 >> 2;
    __int16 v399 = 2048;
    unint64_t v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_478:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_479:
    uint64_t v369 = 0;
    long long v404 = 0u;
    long long v405 = 0u;
    long long v402 = 0u;
    long long v403 = 0u;
    long long v401 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(void *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    __int16 v397 = 2048;
    unint64_t v398 = v18;
    __int16 v399 = 2048;
    unint64_t v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_480:
    re::internal::assertLog((re::internal *)4, v67, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_481:
    uint64_t v369 = 0;
    long long v404 = 0u;
    long long v405 = 0u;
    long long v402 = 0u;
    long long v403 = 0u;
    long long v401 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(void *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    __int16 v397 = 2048;
    unint64_t v398 = v18;
    __int16 v399 = 2048;
    unint64_t v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_482:
    re::internal::assertLog((re::internal *)4, v109, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_483:
    uint64_t v369 = 0;
    long long v404 = 0u;
    long long v405 = 0u;
    long long v402 = 0u;
    long long v403 = 0u;
    long long v401 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(void *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    __int16 v397 = 2048;
    unint64_t v398 = v18;
    __int16 v399 = 2048;
    unint64_t v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_484:
    re::internal::assertLog((re::internal *)4, v151, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_485:
    uint64_t v369 = 0;
    long long v404 = 0u;
    long long v405 = 0u;
    long long v402 = 0u;
    long long v403 = 0u;
    long long v401 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(void *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    __int16 v397 = 2048;
    unint64_t v398 = v18;
    __int16 v399 = 2048;
    unint64_t v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_486:
    re::internal::assertLog((re::internal *)4, v193, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_487:
    uint64_t v369 = 0;
    long long v404 = 0u;
    long long v405 = 0u;
    long long v402 = 0u;
    long long v403 = 0u;
    long long v401 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(void *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    __int16 v397 = 2048;
    unint64_t v398 = v18;
    __int16 v399 = 2048;
    unint64_t v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_488:
    re::internal::assertLog((re::internal *)4, v235, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_489:
    uint64_t v369 = 0;
    long long v404 = 0u;
    long long v405 = 0u;
    long long v402 = 0u;
    long long v403 = 0u;
    long long v401 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315906;
    *(void *)&v396[4] = "operator[]";
    *(_WORD *)&v396[12] = 1024;
    *(_DWORD *)&v396[14] = 858;
    __int16 v397 = 2048;
    unint64_t v398 = v18;
    __int16 v399 = 2048;
    unint64_t v400 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_490;
  }
  if (*((unsigned char *)this + 376)) {
    uint64_t v19 = (char *)this + 384;
  }
  else {
    uint64_t v19 = (char *)*((void *)this + 49);
  }
  uint64_t v20 = *(void *)&v19[8 * v18];
  ++*((void *)this + 50);
  ++*((_DWORD *)this + 102);
  uint64_t v21 = v20 + 112 * (v16 & 3);
  long long v22 = v388;
  long long v23 = v389;
  long long v24 = v390;
  *(void *)(v21 + 48) = v391;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  uint64_t v26 = *((void *)this + 50);
  if (!v26) {
    goto LABEL_478;
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 360, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::init(v27, (uint64_t)this + 360, (uint64_t)v368);
  *(void *)&long long v401 = *((void *)this + 50) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 416), &v368, (uint64_t *)&v401);
  unint64_t v28 = *((void *)this + 50);
  unint64_t v29 = *((void *)this + 65);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 65) = v28;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 480), v30, &v388);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 65) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 496)) {
      uint64_t v33 = (char *)this + 504;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 64);
    }
    *(void *)&v33[8 * *((void *)this + 61) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 50);
  unint64_t v35 = *((void *)this + 71);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 71) = v34;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 528), v36, &v388);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 71) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 544)) {
      uint64_t v39 = (char *)this + 552;
    }
    else {
      uint64_t v39 = (char *)*((void *)this + 70);
    }
    *(void *)&v39[8 * *((void *)this + 67) - 8] &= v37;
  }
  unint64_t v15 = v401;
  uint64_t v14 = (char *)this + 528;
LABEL_51:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v14, v15);
  if (!*((unsigned char *)this + 592)) {
    goto LABEL_69;
  }
  unint64_t v40 = *((void *)this + 67);
  int v41 = *((_DWORD *)this + 136);
  if (v40 >= 0xB)
  {
    if (v41) {
      int v42 = (void *)((char *)this + 552);
    }
    else {
      int v42 = (void *)*((void *)this + 70);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        goto LABEL_69;
      }
    }
LABEL_67:
    uint64_t v48 = (re::ecs2::System *)*((void *)this + 72);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    goto LABEL_69;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 552);
    if (!v40) {
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 70);
    if (!v40) {
      goto LABEL_69;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_67;
  }
LABEL_69:
  int v368 = (re::ecs2::Scene *)a2;
  unint64_t v49 = *((void *)this + 115);
  int v50 = *((_DWORD *)this + 232);
  if (v49 >= 0xB)
  {
    if (v50) {
      int v51 = (void *)((char *)this + 936);
    }
    else {
      int v51 = (void *)*((void *)this + 118);
    }
    uint64_t v53 = 8 * v49;
    while (!*v51)
    {
      ++v51;
      v53 -= 8;
      if (!v53) {
        goto LABEL_85;
      }
    }
    goto LABEL_84;
  }
  if (v50)
  {
    uint64_t v52 = (uint64_t *)((char *)this + 936);
    if (!v49) {
      goto LABEL_85;
    }
  }
  else
  {
    uint64_t v52 = (uint64_t *)*((void *)this + 118);
    if (!v49) {
      goto LABEL_85;
    }
  }
  uint64_t v54 = 0;
  uint64_t v55 = 8 * v49;
  do
  {
    uint64_t v56 = *v52++;
    v54 |= v56;
    v55 -= 8;
  }
  while (v55);
  if (v54)
  {
LABEL_84:
    *(void *)&long long v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 912, 0);
    uint64_t v57 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 792, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::init(v57, (uint64_t)this + 792, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 848), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 912, v388);
    float32x4_t v58 = (char *)this + 960;
    unint64_t v59 = v388;
    goto LABEL_117;
  }
LABEL_85:
  long long v392 = 0u;
  long long v395 = 0u;
  long long v388 = 0u;
  *(void *)&long long v389 = 0;
  long long v390 = 0u;
  long long v391 = 0u;
  *((void *)&v389 + 1) = -1;
  *(void *)&long long v392 = 0;
  DWORD2(v392) = 1;
  uint64_t v393 = 0;
  uint64_t v394 = 0;
  unint64_t v60 = *((void *)this + 104);
  *(void *)&long long v395 = 0;
  unint64_t v17 = *((void *)this + 100);
  DWORD2(v395) = 0;
  if (v60 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 99, (v60 + 4) >> 2);
    unint64_t v17 = *((void *)this + 100);
  }
  unint64_t v18 = v60 >> 2;
  if (v17 <= v60 >> 2) {
    goto LABEL_479;
  }
  if (*((unsigned char *)this + 808)) {
    unint64_t v61 = (char *)this + 816;
  }
  else {
    unint64_t v61 = (char *)*((void *)this + 103);
  }
  uint64_t v62 = *(void *)&v61[8 * v18];
  ++*((void *)this + 104);
  ++*((_DWORD *)this + 210);
  uint64_t v63 = v62 + 112 * (v60 & 3);
  long long v64 = v388;
  long long v65 = v389;
  long long v66 = v390;
  *(void *)(v63 + 48) = v391;
  *(_OWORD *)(v63 + 16) = v65;
  *(_OWORD *)(v63 + 32) = v66;
  *(_OWORD *)uint64_t v63 = v64;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v63 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  uint64_t v68 = *((void *)this + 104);
  if (!v68) {
    goto LABEL_480;
  }
  uint64_t v69 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 792, v68 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::init(v69, (uint64_t)this + 792, (uint64_t)v368);
  *(void *)&long long v401 = *((void *)this + 104) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 848), &v368, (uint64_t *)&v401);
  unint64_t v70 = *((void *)this + 104);
  unint64_t v71 = *((void *)this + 119);
  if ((v70 & 0x3F) != 0) {
    unint64_t v72 = (v70 >> 6) + 1;
  }
  else {
    unint64_t v72 = v70 >> 6;
  }
  *((void *)this + 119) = v70;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 912), v72, &v388);
  if (v70 && v71 > v70)
  {
    uint64_t v73 = 63;
    uint64_t v74 = *((void *)this + 119) & 0x3FLL;
    if (v74 && v74 != 63) {
      uint64_t v73 = ~(-1 << v74);
    }
    if (*((unsigned char *)this + 928)) {
      uint64_t v75 = (char *)this + 936;
    }
    else {
      uint64_t v75 = (char *)*((void *)this + 118);
    }
    *(void *)&v75[8 * *((void *)this + 115) - 8] &= v73;
  }
  unint64_t v76 = *((void *)this + 104);
  unint64_t v77 = *((void *)this + 125);
  if ((v76 & 0x3F) != 0) {
    unint64_t v78 = (v76 >> 6) + 1;
  }
  else {
    unint64_t v78 = v76 >> 6;
  }
  *((void *)this + 125) = v76;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 960), v78, &v388);
  if (v76 && v77 > v76)
  {
    uint64_t v79 = 63;
    uint64_t v80 = *((void *)this + 125) & 0x3FLL;
    if (v80 && v80 != 63) {
      uint64_t v79 = ~(-1 << v80);
    }
    if (*((unsigned char *)this + 976)) {
      long long v81 = (char *)this + 984;
    }
    else {
      long long v81 = (char *)*((void *)this + 124);
    }
    *(void *)&v81[8 * *((void *)this + 121) - 8] &= v79;
  }
  unint64_t v59 = v401;
  float32x4_t v58 = (char *)this + 960;
LABEL_117:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v58, v59);
  if (!*((unsigned char *)this + 1024)) {
    goto LABEL_135;
  }
  unint64_t v82 = *((void *)this + 121);
  int v83 = *((_DWORD *)this + 244);
  if (v82 >= 0xB)
  {
    if (v83) {
      long long v84 = (void *)((char *)this + 984);
    }
    else {
      long long v84 = (void *)*((void *)this + 124);
    }
    uint64_t v86 = 8 * v82;
    while (!*v84)
    {
      ++v84;
      v86 -= 8;
      if (!v86) {
        goto LABEL_135;
      }
    }
LABEL_133:
    unint64_t v90 = (re::ecs2::System *)*((void *)this + 126);
    if (!*((unsigned char *)v90 + 86)) {
      re::ecs2::System::queueToRun(v90, 0.0);
    }
    goto LABEL_135;
  }
  if (v83)
  {
    BOOL v85 = (uint64_t *)((char *)this + 984);
    if (!v82) {
      goto LABEL_135;
    }
  }
  else
  {
    BOOL v85 = (uint64_t *)*((void *)this + 124);
    if (!v82) {
      goto LABEL_135;
    }
  }
  uint64_t v87 = 0;
  uint64_t v88 = 8 * v82;
  do
  {
    uint64_t v89 = *v85++;
    v87 |= v89;
    v88 -= 8;
  }
  while (v88);
  if (v87) {
    goto LABEL_133;
  }
LABEL_135:
  int v368 = (re::ecs2::Scene *)a2;
  unint64_t v91 = *((void *)this + 169);
  int v92 = *((_DWORD *)this + 340);
  if (v91 >= 0xB)
  {
    if (v92) {
      int v93 = (void *)((char *)this + 1368);
    }
    else {
      int v93 = (void *)*((void *)this + 172);
    }
    uint64_t v95 = 8 * v91;
    while (!*v93)
    {
      ++v93;
      v95 -= 8;
      if (!v95) {
        goto LABEL_151;
      }
    }
    goto LABEL_150;
  }
  if (v92)
  {
    uint64_t v94 = (uint64_t *)((char *)this + 1368);
    if (!v91) {
      goto LABEL_151;
    }
  }
  else
  {
    uint64_t v94 = (uint64_t *)*((void *)this + 172);
    if (!v91) {
      goto LABEL_151;
    }
  }
  uint64_t v96 = 0;
  uint64_t v97 = 8 * v91;
  do
  {
    uint64_t v98 = *v94++;
    v96 |= v98;
    v97 -= 8;
  }
  while (v97);
  if (v96)
  {
LABEL_150:
    *(void *)&long long v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 1344, 0);
    uint64_t v99 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1224, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::init(v99, (uint64_t)this + 1224, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1280), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1344, v388);
    uint64_t v100 = (char *)this + 1392;
    unint64_t v101 = v388;
    goto LABEL_183;
  }
LABEL_151:
  long long v392 = 0u;
  long long v395 = 0u;
  long long v388 = 0u;
  *(void *)&long long v389 = 0;
  long long v390 = 0u;
  long long v391 = 0u;
  *((void *)&v389 + 1) = -1;
  *(void *)&long long v392 = 0;
  DWORD2(v392) = 1;
  uint64_t v393 = 0;
  uint64_t v394 = 0;
  unint64_t v102 = *((void *)this + 158);
  *(void *)&long long v395 = 0;
  unint64_t v17 = *((void *)this + 154);
  DWORD2(v395) = 0;
  if (v102 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 153, (v102 + 4) >> 2);
    unint64_t v17 = *((void *)this + 154);
  }
  unint64_t v18 = v102 >> 2;
  if (v17 <= v102 >> 2) {
    goto LABEL_481;
  }
  if (*((unsigned char *)this + 1240)) {
    uint64_t v103 = (char *)this + 1248;
  }
  else {
    uint64_t v103 = (char *)*((void *)this + 157);
  }
  uint64_t v104 = *(void *)&v103[8 * v18];
  ++*((void *)this + 158);
  ++*((_DWORD *)this + 318);
  uint64_t v105 = v104 + 112 * (v102 & 3);
  long long v106 = v388;
  long long v107 = v389;
  long long v108 = v390;
  *(void *)(v105 + 48) = v391;
  *(_OWORD *)(v105 + 16) = v107;
  *(_OWORD *)(v105 + 32) = v108;
  *(_OWORD *)uint64_t v105 = v106;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v105 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  uint64_t v110 = *((void *)this + 158);
  if (!v110) {
    goto LABEL_482;
  }
  uint64_t v111 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1224, v110 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::init(v111, (uint64_t)this + 1224, (uint64_t)v368);
  *(void *)&long long v401 = *((void *)this + 158) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1280), &v368, (uint64_t *)&v401);
  unint64_t v112 = *((void *)this + 158);
  unint64_t v113 = *((void *)this + 173);
  if ((v112 & 0x3F) != 0) {
    unint64_t v114 = (v112 >> 6) + 1;
  }
  else {
    unint64_t v114 = v112 >> 6;
  }
  *((void *)this + 173) = v112;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1344), v114, &v388);
  if (v112 && v113 > v112)
  {
    uint64_t v115 = 63;
    uint64_t v116 = *((void *)this + 173) & 0x3FLL;
    if (v116 && v116 != 63) {
      uint64_t v115 = ~(-1 << v116);
    }
    if (*((unsigned char *)this + 1360)) {
      uint64_t v117 = (char *)this + 1368;
    }
    else {
      uint64_t v117 = (char *)*((void *)this + 172);
    }
    *(void *)&v117[8 * *((void *)this + 169) - 8] &= v115;
  }
  unint64_t v118 = *((void *)this + 158);
  unint64_t v119 = *((void *)this + 179);
  if ((v118 & 0x3F) != 0) {
    unint64_t v120 = (v118 >> 6) + 1;
  }
  else {
    unint64_t v120 = v118 >> 6;
  }
  *((void *)this + 179) = v118;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1392), v120, &v388);
  if (v118 && v119 > v118)
  {
    uint64_t v121 = 63;
    uint64_t v122 = *((void *)this + 179) & 0x3FLL;
    if (v122 && v122 != 63) {
      uint64_t v121 = ~(-1 << v122);
    }
    if (*((unsigned char *)this + 1408)) {
      unint64_t v123 = (char *)this + 1416;
    }
    else {
      unint64_t v123 = (char *)*((void *)this + 178);
    }
    *(void *)&v123[8 * *((void *)this + 175) - 8] &= v121;
  }
  unint64_t v101 = v401;
  uint64_t v100 = (char *)this + 1392;
LABEL_183:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v100, v101);
  if (!*((unsigned char *)this + 1456)) {
    goto LABEL_201;
  }
  unint64_t v124 = *((void *)this + 175);
  int v125 = *((_DWORD *)this + 352);
  if (v124 >= 0xB)
  {
    if (v125) {
      uint64_t v126 = (void *)((char *)this + 1416);
    }
    else {
      uint64_t v126 = (void *)*((void *)this + 178);
    }
    uint64_t v128 = 8 * v124;
    while (!*v126)
    {
      ++v126;
      v128 -= 8;
      if (!v128) {
        goto LABEL_201;
      }
    }
LABEL_199:
    BOOL v132 = (re::ecs2::System *)*((void *)this + 180);
    if (!*((unsigned char *)v132 + 86)) {
      re::ecs2::System::queueToRun(v132, 0.0);
    }
    goto LABEL_201;
  }
  if (v125)
  {
    uint64_t v127 = (uint64_t *)((char *)this + 1416);
    if (!v124) {
      goto LABEL_201;
    }
  }
  else
  {
    uint64_t v127 = (uint64_t *)*((void *)this + 178);
    if (!v124) {
      goto LABEL_201;
    }
  }
  uint64_t v129 = 0;
  uint64_t v130 = 8 * v124;
  do
  {
    uint64_t v131 = *v127++;
    v129 |= v131;
    v130 -= 8;
  }
  while (v130);
  if (v129) {
    goto LABEL_199;
  }
LABEL_201:
  int v368 = (re::ecs2::Scene *)a2;
  unint64_t v133 = *((void *)this + 223);
  int v134 = *((_DWORD *)this + 448);
  if (v133 >= 0xB)
  {
    if (v134) {
      unint64_t v135 = (void *)((char *)this + 1800);
    }
    else {
      unint64_t v135 = (void *)*((void *)this + 226);
    }
    uint64_t v137 = 8 * v133;
    while (!*v135)
    {
      ++v135;
      v137 -= 8;
      if (!v137) {
        goto LABEL_217;
      }
    }
    goto LABEL_216;
  }
  if (v134)
  {
    unint64_t v136 = (uint64_t *)((char *)this + 1800);
    if (!v133) {
      goto LABEL_217;
    }
  }
  else
  {
    unint64_t v136 = (uint64_t *)*((void *)this + 226);
    if (!v133) {
      goto LABEL_217;
    }
  }
  uint64_t v138 = 0;
  uint64_t v139 = 8 * v133;
  do
  {
    uint64_t v140 = *v136++;
    v138 |= v140;
    v139 -= 8;
  }
  while (v139);
  if (v138)
  {
LABEL_216:
    *(void *)&long long v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 1776, 0);
    uint64_t v141 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1656, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::init(v141, (uint64_t)this + 1656, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1712), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1776, v388);
    int64x2_t v142 = (char *)this + 1824;
    unint64_t v143 = v388;
    goto LABEL_249;
  }
LABEL_217:
  long long v392 = 0u;
  long long v395 = 0u;
  long long v388 = 0u;
  *(void *)&long long v389 = 0;
  long long v390 = 0u;
  long long v391 = 0u;
  *((void *)&v389 + 1) = -1;
  *(void *)&long long v392 = 0;
  DWORD2(v392) = 1;
  uint64_t v393 = 0;
  uint64_t v394 = 0;
  unint64_t v144 = *((void *)this + 212);
  *(void *)&long long v395 = 0;
  unint64_t v17 = *((void *)this + 208);
  DWORD2(v395) = 0;
  if (v144 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 207, (v144 + 4) >> 2);
    unint64_t v17 = *((void *)this + 208);
  }
  unint64_t v18 = v144 >> 2;
  if (v17 <= v144 >> 2) {
    goto LABEL_483;
  }
  if (*((unsigned char *)this + 1672)) {
    unint64_t v145 = (char *)this + 1680;
  }
  else {
    unint64_t v145 = (char *)*((void *)this + 211);
  }
  uint64_t v146 = *(void *)&v145[8 * v18];
  ++*((void *)this + 212);
  ++*((_DWORD *)this + 426);
  uint64_t v147 = v146 + 112 * (v144 & 3);
  long long v148 = v388;
  long long v149 = v389;
  long long v150 = v390;
  *(void *)(v147 + 48) = v391;
  *(_OWORD *)(v147 + 16) = v149;
  *(_OWORD *)(v147 + 32) = v150;
  *(_OWORD *)uint64_t v147 = v148;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v147 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  uint64_t v152 = *((void *)this + 212);
  if (!v152) {
    goto LABEL_484;
  }
  uint64_t v153 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1656, v152 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::init(v153, (uint64_t)this + 1656, (uint64_t)v368);
  *(void *)&long long v401 = *((void *)this + 212) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 1712), &v368, (uint64_t *)&v401);
  unint64_t v154 = *((void *)this + 212);
  unint64_t v155 = *((void *)this + 227);
  if ((v154 & 0x3F) != 0) {
    unint64_t v156 = (v154 >> 6) + 1;
  }
  else {
    unint64_t v156 = v154 >> 6;
  }
  *((void *)this + 227) = v154;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1776), v156, &v388);
  if (v154 && v155 > v154)
  {
    uint64_t v157 = 63;
    uint64_t v158 = *((void *)this + 227) & 0x3FLL;
    if (v158 && v158 != 63) {
      uint64_t v157 = ~(-1 << v158);
    }
    if (*((unsigned char *)this + 1792)) {
      unint64_t v159 = (char *)this + 1800;
    }
    else {
      unint64_t v159 = (char *)*((void *)this + 226);
    }
    *(void *)&v159[8 * *((void *)this + 223) - 8] &= v157;
  }
  unint64_t v160 = *((void *)this + 212);
  unint64_t v161 = *((void *)this + 233);
  if ((v160 & 0x3F) != 0) {
    unint64_t v162 = (v160 >> 6) + 1;
  }
  else {
    unint64_t v162 = v160 >> 6;
  }
  *((void *)this + 233) = v160;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 1824), v162, &v388);
  if (v160 && v161 > v160)
  {
    uint64_t v163 = 63;
    uint64_t v164 = *((void *)this + 233) & 0x3FLL;
    if (v164 && v164 != 63) {
      uint64_t v163 = ~(-1 << v164);
    }
    if (*((unsigned char *)this + 1840)) {
      int64x2_t v165 = (char *)this + 1848;
    }
    else {
      int64x2_t v165 = (char *)*((void *)this + 232);
    }
    *(void *)&v165[8 * *((void *)this + 229) - 8] &= v163;
  }
  unint64_t v143 = v401;
  int64x2_t v142 = (char *)this + 1824;
LABEL_249:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v142, v143);
  if (!*((unsigned char *)this + 1888)) {
    goto LABEL_267;
  }
  unint64_t v166 = *((void *)this + 229);
  int v167 = *((_DWORD *)this + 460);
  if (v166 >= 0xB)
  {
    if (v167) {
      uint64_t v168 = (void *)((char *)this + 1848);
    }
    else {
      uint64_t v168 = (void *)*((void *)this + 232);
    }
    uint64_t v170 = 8 * v166;
    while (!*v168)
    {
      ++v168;
      v170 -= 8;
      if (!v170) {
        goto LABEL_267;
      }
    }
LABEL_265:
    uint64_t v174 = (re::ecs2::System *)*((void *)this + 234);
    if (!*((unsigned char *)v174 + 86)) {
      re::ecs2::System::queueToRun(v174, 0.0);
    }
    goto LABEL_267;
  }
  if (v167)
  {
    v169 = (uint64_t *)((char *)this + 1848);
    if (!v166) {
      goto LABEL_267;
    }
  }
  else
  {
    v169 = (uint64_t *)*((void *)this + 232);
    if (!v166) {
      goto LABEL_267;
    }
  }
  uint64_t v171 = 0;
  uint64_t v172 = 8 * v166;
  do
  {
    uint64_t v173 = *v169++;
    v171 |= v173;
    v172 -= 8;
  }
  while (v172);
  if (v171) {
    goto LABEL_265;
  }
LABEL_267:
  int v368 = (re::ecs2::Scene *)a2;
  unint64_t v175 = *((void *)this + 277);
  int v176 = *((_DWORD *)this + 556);
  if (v175 >= 0xB)
  {
    if (v176) {
      uint64_t v177 = (void *)((char *)this + 2232);
    }
    else {
      uint64_t v177 = (void *)*((void *)this + 280);
    }
    uint64_t v179 = 8 * v175;
    while (!*v177)
    {
      ++v177;
      v179 -= 8;
      if (!v179) {
        goto LABEL_283;
      }
    }
    goto LABEL_282;
  }
  if (v176)
  {
    uint64_t v178 = (uint64_t *)((char *)this + 2232);
    if (!v175) {
      goto LABEL_283;
    }
  }
  else
  {
    uint64_t v178 = (uint64_t *)*((void *)this + 280);
    if (!v175) {
      goto LABEL_283;
    }
  }
  uint64_t v180 = 0;
  uint64_t v181 = 8 * v175;
  do
  {
    uint64_t v182 = *v178++;
    v180 |= v182;
    v181 -= 8;
  }
  while (v181);
  if (v180)
  {
LABEL_282:
    *(void *)&long long v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 2208, 0);
    uint64_t v183 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2088, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::init(v183, (uint64_t)this + 2088, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2144), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2208, v388);
    v184 = (char *)this + 2256;
    unint64_t v185 = v388;
    goto LABEL_315;
  }
LABEL_283:
  long long v392 = 0u;
  long long v395 = 0u;
  long long v388 = 0u;
  *(void *)&long long v389 = 0;
  long long v390 = 0u;
  long long v391 = 0u;
  *((void *)&v389 + 1) = -1;
  *(void *)&long long v392 = 0;
  DWORD2(v392) = 1;
  uint64_t v393 = 0;
  uint64_t v394 = 0;
  unint64_t v186 = *((void *)this + 266);
  *(void *)&long long v395 = 0;
  unint64_t v17 = *((void *)this + 262);
  DWORD2(v395) = 0;
  if (v186 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 261, (v186 + 4) >> 2);
    unint64_t v17 = *((void *)this + 262);
  }
  unint64_t v18 = v186 >> 2;
  if (v17 <= v186 >> 2) {
    goto LABEL_485;
  }
  if (*((unsigned char *)this + 2104)) {
    unint64_t v187 = (char *)this + 2112;
  }
  else {
    unint64_t v187 = (char *)*((void *)this + 265);
  }
  uint64_t v188 = *(void *)&v187[8 * v18];
  ++*((void *)this + 266);
  ++*((_DWORD *)this + 534);
  uint64_t v189 = v188 + 112 * (v186 & 3);
  long long v190 = v388;
  long long v191 = v389;
  long long v192 = v390;
  *(void *)(v189 + 48) = v391;
  *(_OWORD *)(v189 + 16) = v191;
  *(_OWORD *)(v189 + 32) = v192;
  *(_OWORD *)uint64_t v189 = v190;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v189 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  uint64_t v194 = *((void *)this + 266);
  if (!v194) {
    goto LABEL_486;
  }
  uint64_t v195 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2088, v194 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::init(v195, (uint64_t)this + 2088, (uint64_t)v368);
  *(void *)&long long v401 = *((void *)this + 266) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2144), &v368, (uint64_t *)&v401);
  unint64_t v196 = *((void *)this + 266);
  unint64_t v197 = *((void *)this + 281);
  if ((v196 & 0x3F) != 0) {
    unint64_t v198 = (v196 >> 6) + 1;
  }
  else {
    unint64_t v198 = v196 >> 6;
  }
  *((void *)this + 281) = v196;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2208), v198, &v388);
  if (v196 && v197 > v196)
  {
    uint64_t v199 = 63;
    uint64_t v200 = *((void *)this + 281) & 0x3FLL;
    if (v200 && v200 != 63) {
      uint64_t v199 = ~(-1 << v200);
    }
    if (*((unsigned char *)this + 2224)) {
      long long v201 = (char *)this + 2232;
    }
    else {
      long long v201 = (char *)*((void *)this + 280);
    }
    *(void *)&v201[8 * *((void *)this + 277) - 8] &= v199;
  }
  unint64_t v202 = *((void *)this + 266);
  unint64_t v203 = *((void *)this + 287);
  if ((v202 & 0x3F) != 0) {
    unint64_t v204 = (v202 >> 6) + 1;
  }
  else {
    unint64_t v204 = v202 >> 6;
  }
  *((void *)this + 287) = v202;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2256), v204, &v388);
  if (v202 && v203 > v202)
  {
    uint64_t v205 = 63;
    uint64_t v206 = *((void *)this + 287) & 0x3FLL;
    if (v206 && v206 != 63) {
      uint64_t v205 = ~(-1 << v206);
    }
    if (*((unsigned char *)this + 2272)) {
      float v207 = (char *)this + 2280;
    }
    else {
      float v207 = (char *)*((void *)this + 286);
    }
    *(void *)&v207[8 * *((void *)this + 283) - 8] &= v205;
  }
  unint64_t v185 = v401;
  v184 = (char *)this + 2256;
LABEL_315:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v184, v185);
  if (!*((unsigned char *)this + 2320)) {
    goto LABEL_333;
  }
  unint64_t v208 = *((void *)this + 283);
  int v209 = *((_DWORD *)this + 568);
  if (v208 >= 0xB)
  {
    if (v209) {
      float32x2_t v210 = (void *)((char *)this + 2280);
    }
    else {
      float32x2_t v210 = (void *)*((void *)this + 286);
    }
    uint64_t v212 = 8 * v208;
    while (!*v210)
    {
      ++v210;
      v212 -= 8;
      if (!v212) {
        goto LABEL_333;
      }
    }
LABEL_331:
    float32x2_t v216 = (re::ecs2::System *)*((void *)this + 288);
    if (!*((unsigned char *)v216 + 86)) {
      re::ecs2::System::queueToRun(v216, 0.0);
    }
    goto LABEL_333;
  }
  if (v209)
  {
    float32x2_t v211 = (uint64_t *)((char *)this + 2280);
    if (!v208) {
      goto LABEL_333;
    }
  }
  else
  {
    float32x2_t v211 = (uint64_t *)*((void *)this + 286);
    if (!v208) {
      goto LABEL_333;
    }
  }
  uint64_t v213 = 0;
  uint64_t v214 = 8 * v208;
  do
  {
    uint64_t v215 = *v211++;
    v213 |= v215;
    v214 -= 8;
  }
  while (v214);
  if (v213) {
    goto LABEL_331;
  }
LABEL_333:
  int v368 = (re::ecs2::Scene *)a2;
  unint64_t v217 = *((void *)this + 331);
  int v218 = *((_DWORD *)this + 664);
  if (v217 >= 0xB)
  {
    if (v218) {
      float32x4_t v219 = (void *)((char *)this + 2664);
    }
    else {
      float32x4_t v219 = (void *)*((void *)this + 334);
    }
    uint64_t v221 = 8 * v217;
    while (!*v219)
    {
      ++v219;
      v221 -= 8;
      if (!v221) {
        goto LABEL_349;
      }
    }
    goto LABEL_348;
  }
  if (v218)
  {
    float32x4_t v220 = (uint64_t *)((char *)this + 2664);
    if (!v217) {
      goto LABEL_349;
    }
  }
  else
  {
    float32x4_t v220 = (uint64_t *)*((void *)this + 334);
    if (!v217) {
      goto LABEL_349;
    }
  }
  uint64_t v222 = 0;
  uint64_t v223 = 8 * v217;
  do
  {
    uint64_t v224 = *v220++;
    v222 |= v224;
    v223 -= 8;
  }
  while (v223);
  if (v222)
  {
LABEL_348:
    *(void *)&long long v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 2640, 0);
    uint64_t v225 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2520, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::init(v225, (uint64_t)this + 2520, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2576), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2640, v388);
    float32x4_t v226 = (char *)this + 2688;
    unint64_t v227 = v388;
    goto LABEL_381;
  }
LABEL_349:
  long long v392 = 0u;
  long long v395 = 0u;
  long long v388 = 0u;
  *(void *)&long long v389 = 0;
  long long v390 = 0u;
  long long v391 = 0u;
  *((void *)&v389 + 1) = -1;
  *(void *)&long long v392 = 0;
  DWORD2(v392) = 1;
  uint64_t v393 = 0;
  uint64_t v394 = 0;
  unint64_t v228 = *((void *)this + 320);
  *(void *)&long long v395 = 0;
  unint64_t v17 = *((void *)this + 316);
  DWORD2(v395) = 0;
  if (v228 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 315, (v228 + 4) >> 2);
    unint64_t v17 = *((void *)this + 316);
  }
  unint64_t v18 = v228 >> 2;
  if (v17 <= v228 >> 2) {
    goto LABEL_487;
  }
  if (*((unsigned char *)this + 2536)) {
    float v229 = (char *)this + 2544;
  }
  else {
    float v229 = (char *)*((void *)this + 319);
  }
  uint64_t v230 = *(void *)&v229[8 * v18];
  ++*((void *)this + 320);
  ++*((_DWORD *)this + 642);
  uint64_t v231 = v230 + 112 * (v228 & 3);
  long long v232 = v388;
  long long v233 = v389;
  long long v234 = v390;
  *(void *)(v231 + 48) = v391;
  *(_OWORD *)(v231 + 16) = v233;
  *(_OWORD *)(v231 + 32) = v234;
  *(_OWORD *)uint64_t v231 = v232;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v231 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  uint64_t v236 = *((void *)this + 320);
  if (!v236) {
    goto LABEL_488;
  }
  uint64_t v237 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2520, v236 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::init(v237, (uint64_t)this + 2520, (uint64_t)v368);
  *(void *)&long long v401 = *((void *)this + 320) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 2576), &v368, (uint64_t *)&v401);
  unint64_t v238 = *((void *)this + 320);
  unint64_t v239 = *((void *)this + 335);
  if ((v238 & 0x3F) != 0) {
    unint64_t v240 = (v238 >> 6) + 1;
  }
  else {
    unint64_t v240 = v238 >> 6;
  }
  *((void *)this + 335) = v238;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2640), v240, &v388);
  if (v238 && v239 > v238)
  {
    uint64_t v241 = 63;
    uint64_t v242 = *((void *)this + 335) & 0x3FLL;
    if (v242 && v242 != 63) {
      uint64_t v241 = ~(-1 << v242);
    }
    if (*((unsigned char *)this + 2656)) {
      float32x4_t v243 = (char *)this + 2664;
    }
    else {
      float32x4_t v243 = (char *)*((void *)this + 334);
    }
    *(void *)&v243[8 * *((void *)this + 331) - 8] &= v241;
  }
  unint64_t v244 = *((void *)this + 320);
  unint64_t v245 = *((void *)this + 341);
  if ((v244 & 0x3F) != 0) {
    unint64_t v246 = (v244 >> 6) + 1;
  }
  else {
    unint64_t v246 = v244 >> 6;
  }
  *((void *)this + 341) = v244;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 2688), v246, &v388);
  if (v244 && v245 > v244)
  {
    uint64_t v247 = 63;
    uint64_t v248 = *((void *)this + 341) & 0x3FLL;
    if (v248 && v248 != 63) {
      uint64_t v247 = ~(-1 << v248);
    }
    if (*((unsigned char *)this + 2704)) {
      uint64_t v249 = (char *)this + 2712;
    }
    else {
      uint64_t v249 = (char *)*((void *)this + 340);
    }
    *(void *)&v249[8 * *((void *)this + 337) - 8] &= v247;
  }
  unint64_t v227 = v401;
  float32x4_t v226 = (char *)this + 2688;
LABEL_381:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v226, v227);
  if (!*((unsigned char *)this + 2752)) {
    goto LABEL_399;
  }
  unint64_t v250 = *((void *)this + 337);
  int v251 = *((_DWORD *)this + 676);
  if (v250 >= 0xB)
  {
    if (v251) {
      uint64_t v252 = (void *)((char *)this + 2712);
    }
    else {
      uint64_t v252 = (void *)*((void *)this + 340);
    }
    uint64_t v254 = 8 * v250;
    while (!*v252)
    {
      ++v252;
      v254 -= 8;
      if (!v254) {
        goto LABEL_399;
      }
    }
LABEL_397:
    uint64_t v258 = (re::ecs2::System *)*((void *)this + 342);
    if (!*((unsigned char *)v258 + 86)) {
      re::ecs2::System::queueToRun(v258, 0.0);
    }
    goto LABEL_399;
  }
  if (v251)
  {
    unint64_t v253 = (uint64_t *)((char *)this + 2712);
    if (!v250) {
      goto LABEL_399;
    }
  }
  else
  {
    unint64_t v253 = (uint64_t *)*((void *)this + 340);
    if (!v250) {
      goto LABEL_399;
    }
  }
  uint64_t v255 = 0;
  uint64_t v256 = 8 * v250;
  do
  {
    uint64_t v257 = *v253++;
    v255 |= v257;
    v256 -= 8;
  }
  while (v256);
  if (v255) {
    goto LABEL_397;
  }
LABEL_399:
  int v368 = (re::ecs2::Scene *)a2;
  unint64_t v259 = *((void *)this + 385);
  int v260 = *((_DWORD *)this + 772);
  if (v259 >= 0xB)
  {
    if (v260) {
      unint64_t v261 = (void *)((char *)this + 3096);
    }
    else {
      unint64_t v261 = (void *)*((void *)this + 388);
    }
    uint64_t v263 = 8 * v259;
    while (!*v261)
    {
      ++v261;
      v263 -= 8;
      if (!v263) {
        goto LABEL_415;
      }
    }
    goto LABEL_414;
  }
  if (v260)
  {
    unint64_t v262 = (uint64_t *)((char *)this + 3096);
    if (!v259) {
      goto LABEL_415;
    }
  }
  else
  {
    unint64_t v262 = (uint64_t *)*((void *)this + 388);
    if (!v259) {
      goto LABEL_415;
    }
  }
  uint64_t v264 = 0;
  uint64_t v265 = 8 * v259;
  do
  {
    uint64_t v266 = *v262++;
    v264 |= v266;
    v265 -= 8;
  }
  while (v265);
  if (v264)
  {
LABEL_414:
    *(void *)&long long v388 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 3072, 0);
    uint64_t v267 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2952, v388);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::init(v267, (uint64_t)this + 2952, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 3008), &v368, (uint64_t *)&v388);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 3072, v388);
    int v268 = (char *)this + 3120;
    unint64_t v269 = v388;
    goto LABEL_447;
  }
LABEL_415:
  long long v392 = 0u;
  long long v395 = 0u;
  long long v388 = 0u;
  *(void *)&long long v389 = 0;
  long long v390 = 0u;
  long long v391 = 0u;
  *((void *)&v389 + 1) = -1;
  *(void *)&long long v392 = 0;
  DWORD2(v392) = 1;
  uint64_t v393 = 0;
  uint64_t v394 = 0;
  unint64_t v270 = *((void *)this + 374);
  *(void *)&long long v395 = 0;
  unint64_t v17 = *((void *)this + 370);
  DWORD2(v395) = 0;
  if (v270 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 369, (v270 + 4) >> 2);
    unint64_t v17 = *((void *)this + 370);
  }
  unint64_t v18 = v270 >> 2;
  if (v17 <= v270 >> 2) {
    goto LABEL_489;
  }
  if (*((unsigned char *)this + 2968)) {
    int v271 = (char *)this + 2976;
  }
  else {
    int v271 = (char *)*((void *)this + 373);
  }
  uint64_t v272 = *(void *)&v271[8 * v18];
  ++*((void *)this + 374);
  ++*((_DWORD *)this + 750);
  uint64_t v273 = v272 + 112 * (v270 & 3);
  long long v274 = v388;
  long long v275 = v389;
  long long v276 = v390;
  *(void *)(v273 + 48) = v391;
  *(_OWORD *)(v273 + 16) = v275;
  *(_OWORD *)(v273 + 32) = v276;
  *(_OWORD *)uint64_t v273 = v274;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v273 + 56, (uint64_t)&v391 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v388);
  uint64_t v278 = *((void *)this + 374);
  if (!v278)
  {
LABEL_490:
    re::internal::assertLog((re::internal *)4, v277, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v279 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2952, v278 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::init(v279, (uint64_t)this + 2952, (uint64_t)v368);
  *(void *)&long long v401 = *((void *)this + 374) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::LightSystem *)((char *)this + 3008), &v368, (uint64_t *)&v401);
  unint64_t v280 = *((void *)this + 374);
  unint64_t v281 = *((void *)this + 389);
  if ((v280 & 0x3F) != 0) {
    unint64_t v282 = (v280 >> 6) + 1;
  }
  else {
    unint64_t v282 = v280 >> 6;
  }
  *((void *)this + 389) = v280;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 3072), v282, &v388);
  if (v280 && v281 > v280)
  {
    uint64_t v283 = 63;
    uint64_t v284 = *((void *)this + 389) & 0x3FLL;
    if (v284 && v284 != 63) {
      uint64_t v283 = ~(-1 << v284);
    }
    if (*((unsigned char *)this + 3088)) {
      uint64_t v285 = (char *)this + 3096;
    }
    else {
      uint64_t v285 = (char *)*((void *)this + 388);
    }
    *(void *)&v285[8 * *((void *)this + 385) - 8] &= v283;
  }
  unint64_t v286 = *((void *)this + 374);
  unint64_t v287 = *((void *)this + 395);
  if ((v286 & 0x3F) != 0) {
    unint64_t v288 = (v286 >> 6) + 1;
  }
  else {
    unint64_t v288 = v286 >> 6;
  }
  *((void *)this + 395) = v286;
  *(void *)&long long v388 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::LightSystem *)((char *)this + 3120), v288, &v388);
  if (v286 && v287 > v286)
  {
    uint64_t v289 = 63;
    uint64_t v290 = *((void *)this + 395) & 0x3FLL;
    if (v290 && v290 != 63) {
      uint64_t v289 = ~(-1 << v290);
    }
    if (*((unsigned char *)this + 3136)) {
      int v291 = (char *)this + 3144;
    }
    else {
      int v291 = (char *)*((void *)this + 394);
    }
    *(void *)&v291[8 * *((void *)this + 391) - 8] &= v289;
  }
  unint64_t v269 = v401;
  int v268 = (char *)this + 3120;
LABEL_447:
  int v292 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v268, v269);
  if (!*((unsigned char *)this + 3184)) {
    goto LABEL_465;
  }
  unint64_t v293 = *((void *)this + 391);
  int v294 = *((_DWORD *)this + 784);
  if (v293 >= 0xB)
  {
    if (v294) {
      v295 = (void *)((char *)this + 3144);
    }
    else {
      v295 = (void *)*((void *)this + 394);
    }
    uint64_t v297 = 8 * v293;
    while (!*v295)
    {
      ++v295;
      v297 -= 8;
      if (!v297) {
        goto LABEL_465;
      }
    }
LABEL_463:
    int v292 = (re::ecs2::System *)*((void *)this + 396);
    if (!*((unsigned char *)v292 + 86)) {
      re::ecs2::System::queueToRun(v292, 0.0);
    }
    goto LABEL_465;
  }
  if (v294)
  {
    int v296 = (uint64_t *)((char *)this + 3144);
    if (!v293) {
      goto LABEL_465;
    }
  }
  else
  {
    int v296 = (uint64_t *)*((void *)this + 394);
    if (!v293) {
      goto LABEL_465;
    }
  }
  uint64_t v298 = 0;
  uint64_t v299 = 8 * v293;
  do
  {
    uint64_t v300 = *v296++;
    v298 |= v300;
    v299 -= 8;
  }
  while (v299);
  if (v298) {
    goto LABEL_463;
  }
LABEL_465:
  uint64_t v369 = (re::ecs2::Scene *)a2;
  uint64_t v301 = a2[36];
  if (v301)
  {
    uint64_t v302 = re::globalAllocators(v292)[2];
    *((void *)&v389 + 1) = v302;
    uint64_t v303 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v302 + 32))(v302, 32, 0);
    *uint64_t v303 = &unk_26E6FCC68;
    v303[1] = (char *)this + 168;
    v303[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::handleSceneEntityWillRemove;
    v303[3] = 0;
    *(void *)&long long v390 = v303;
    *((void *)&v402 + 1) = v302;
    *(void *)&long long v403 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
    *(void *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v301, (uint64_t)&v401, 0, 0);
    *(void *)&v396[8] = v304;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v401);
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 224, (uint64_t *)&v369, v396);
    int v292 = (re::ecs2::System *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v388);
    int v305 = a2[36];
    uint64_t v369 = (re::ecs2::Scene *)a2;
    if (v305)
    {
      uint64_t v306 = re::globalAllocators(v292)[2];
      *((void *)&v389 + 1) = v306;
      int v307 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v306 + 32))(v306, 32, 0);
      *int v307 = &unk_26E6FCCC0;
      v307[1] = (char *)this + 600;
      v307[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::handleSceneEntityWillRemove;
      v307[3] = 0;
      *(void *)&long long v390 = v307;
      *((void *)&v402 + 1) = v306;
      *(void *)&long long v403 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
      *(void *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v305, (uint64_t)&v401, 0, 0);
      *(void *)&v396[8] = v308;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v401);
      re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 656, (uint64_t *)&v369, v396);
      int v292 = (re::ecs2::System *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v388);
      int v309 = a2[36];
      uint64_t v369 = (re::ecs2::Scene *)a2;
      if (v309)
      {
        uint64_t v310 = re::globalAllocators(v292)[2];
        *((void *)&v389 + 1) = v310;
        uint64_t v311 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v310 + 32))(v310, 32, 0);
        *uint64_t v311 = &unk_26E6FCD18;
        v311[1] = (char *)this + 1032;
        v311[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::handleSceneEntityWillRemove;
        v311[3] = 0;
        *(void *)&long long v390 = v311;
        *((void *)&v402 + 1) = v310;
        *(void *)&long long v403 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
        *(void *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v309, (uint64_t)&v401, 0, 0);
        *(void *)&v396[8] = v312;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v401);
        re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 1088, (uint64_t *)&v369, v396);
        int v292 = (re::ecs2::System *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v388);
        v313 = a2[36];
        uint64_t v369 = (re::ecs2::Scene *)a2;
        if (v313)
        {
          uint64_t v314 = re::globalAllocators(v292)[2];
          *((void *)&v389 + 1) = v314;
          uint64_t v315 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v314 + 32))(v314, 32, 0);
          *uint64_t v315 = &unk_26E6FCD70;
          v315[1] = (char *)this + 1464;
          v315[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::handleSceneEntityWillRemove;
          v315[3] = 0;
          *(void *)&long long v390 = v315;
          *((void *)&v402 + 1) = v314;
          *(void *)&long long v403 = 0;
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
          *(void *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v313, (uint64_t)&v401, 0, 0);
          *(void *)&v396[8] = v316;
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v401);
          re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 1520, (uint64_t *)&v369, v396);
          int v292 = (re::ecs2::System *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v388);
          uint64_t v317 = a2[36];
          uint64_t v369 = (re::ecs2::Scene *)a2;
          if (v317)
          {
            uint64_t v318 = re::globalAllocators(v292)[2];
            *((void *)&v389 + 1) = v318;
            uint64_t v319 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v318 + 32))(v318, 32, 0);
            *uint64_t v319 = &unk_26E6FCDC8;
            v319[1] = (char *)this + 1896;
            v319[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::handleSceneEntityWillRemove;
            v319[3] = 0;
            *(void *)&long long v390 = v319;
            *((void *)&v402 + 1) = v318;
            *(void *)&long long v403 = 0;
            re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
            *(void *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v317, (uint64_t)&v401, 0, 0);
            *(void *)&v396[8] = v320;
            re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v401);
            re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 1952, (uint64_t *)&v369, v396);
            int v292 = (re::ecs2::System *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v388);
            uint64_t v321 = a2[36];
            uint64_t v369 = (re::ecs2::Scene *)a2;
            if (v321)
            {
              uint64_t v322 = re::globalAllocators(v292)[2];
              *((void *)&v389 + 1) = v322;
              int v323 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v322 + 32))(v322, 32, 0);
              *int v323 = &unk_26E6FCE20;
              v323[1] = (char *)this + 2328;
              v323[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::handleSceneEntityWillRemove;
              v323[3] = 0;
              *(void *)&long long v390 = v323;
              *((void *)&v402 + 1) = v322;
              *(void *)&long long v403 = 0;
              re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
              *(void *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v321, (uint64_t)&v401, 0, 0);
              *(void *)&v396[8] = v324;
              re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v401);
              re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 2384, (uint64_t *)&v369, v396);
              int v292 = (re::ecs2::System *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v388);
              int v325 = a2[36];
              uint64_t v369 = (re::ecs2::Scene *)a2;
              if (v325)
              {
                uint64_t v326 = re::globalAllocators(v292)[2];
                *((void *)&v389 + 1) = v326;
                int v327 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v326 + 32))(v326, 32, 0);
                *int v327 = &unk_26E6FCE78;
                v327[1] = (char *)this + 2760;
                v327[2] = re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::handleSceneEntityWillRemove;
                v327[3] = 0;
                *(void *)&long long v390 = v327;
                *((void *)&v402 + 1) = v326;
                *(void *)&long long v403 = 0;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator=<24ul>((uint64_t)&v401, (uint64_t)&v388);
                *(void *)v396 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v325, (uint64_t)&v401, 0, 0);
                *(void *)&v396[8] = v328;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v401);
                re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 2816, (uint64_t *)&v369, v396);
                int v292 = (re::ecs2::System *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::destroyCallable((uint64_t)&v388);
              }
            }
          }
        }
      }
    }
  }
  long long v388 = 0uLL;
  LODWORD(v389) = 1;
  long long v390 = 0uLL;
  *((void *)&v389 + 1) = 0;
  LODWORD(v391) = 0;
  uint64_t v330 = a2[36];
  uint64_t v386 = re::globalAllocators((re *)v329)[2];
  v331 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v386 + 32))(v386, 32, 0);
  void *v331 = &unk_26E6FC058;
  v331[1] = this;
  v331[2] = re::ecs2::LightSystem::componentDidAactivateEventHandler;
  v331[3] = 0;
  unint64_t v387 = v331;
  uint64_t v332 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v330, (uint64_t)v385, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v334 = v333;
  uint64_t v335 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *uint64_t v335 = v332;
  v335[1] = v334;
  uint64_t v336 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v385);
  uint64_t v383 = re::globalAllocators(v336)[2];
  uint64_t v337 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v383 + 32))(v383, 32, 0);
  *uint64_t v337 = &unk_26E6FC0B0;
  v337[1] = this;
  v337[2] = re::ecs2::LightSystem::componentWillDeactivateEventHandler;
  v337[3] = 0;
  v384 = v337;
  uint64_t v338 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v330, (uint64_t)v382, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v340 = v339;
  int v341 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *int v341 = v338;
  v341[1] = v340;
  uint64_t v342 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v382);
  uint64_t v380 = re::globalAllocators(v342)[2];
  int v343 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v380 + 32))(v380, 32, 0);
  *int v343 = &unk_26E6FC058;
  v343[1] = this;
  v343[2] = re::ecs2::LightSystem::componentDidAactivateEventHandler;
  v343[3] = 0;
  int v381 = v343;
  uint64_t v344 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v330, (uint64_t)v379, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v346 = v345;
  uint64_t v347 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *uint64_t v347 = v344;
  v347[1] = v346;
  uint64_t v348 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v379);
  uint64_t v377 = re::globalAllocators(v348)[2];
  v349 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v377 + 32))(v377, 32, 0);
  void *v349 = &unk_26E6FC0B0;
  v349[1] = this;
  v349[2] = re::ecs2::LightSystem::componentWillDeactivateEventHandler;
  v349[3] = 0;
  uint64_t v378 = v349;
  uint64_t v350 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v330, (uint64_t)v376, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v352 = v351;
  uint64_t v353 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *uint64_t v353 = v350;
  v353[1] = v352;
  uint64_t v354 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v376);
  uint64_t v374 = re::globalAllocators(v354)[2];
  uint64_t v355 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v374 + 32))(v374, 32, 0);
  *uint64_t v355 = &unk_26E6FC058;
  v355[1] = this;
  v355[2] = re::ecs2::LightSystem::componentDidAactivateEventHandler;
  v355[3] = 0;
  uint64_t v375 = v355;
  uint64_t v356 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v330, (uint64_t)v373, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v358 = v357;
  int v359 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *int v359 = v356;
  v359[1] = v358;
  uint64_t v360 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v373);
  uint64_t v371 = re::globalAllocators(v360)[2];
  int v361 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v371 + 32))(v371, 32, 0);
  *int v361 = &unk_26E6FC0B0;
  v361[1] = this;
  v361[2] = re::ecs2::LightSystem::componentWillDeactivateEventHandler;
  v361[3] = 0;
  uint64_t v372 = v361;
  uint64_t v362 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v330, (uint64_t)v370, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  uint64_t v364 = v363;
  uint64_t v365 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v388);
  *uint64_t v365 = v362;
  v365[1] = v364;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v370);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 3192, (uint64_t *)&v367, (uint64_t)&v388);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v388);
  uint64_t result = v388;
  if ((void)v388)
  {
    if ((v389 & 1) == 0) {
      return (*(uint64_t (**)(void))(*(void *)v388 + 40))();
    }
  }
  return result;
}

uint64_t re::ecs2::LightSystem::componentDidAactivateEventHandler(uint64_t a1, re::ecs2::ComponentTypeBase *a2, re::ecs2::LightSystem **a3)
{
  uint64_t v3 = (void *)re::ecs2::LightSystem::lightComponentFromShadowMapComponentType(a3[1], a2, (re::ecs2::Entity *)a3);
  if (v3) {
    re::ecs2::Component::markDirty(v3);
  }
  return 0;
}

uint64_t re::ecs2::LightSystem::componentWillDeactivateEventHandler(uint64_t a1, re::ecs2::ComponentTypeBase *a2, re::ecs2::LightSystem **a3)
{
  uint64_t v3 = (void *)re::ecs2::LightSystem::lightComponentFromShadowMapComponentType(a3[1], a2, (re::ecs2::Entity *)a3);
  if (v3) {
    re::ecs2::Component::markDirty(v3);
  }
  return 0;
}

uint64_t re::ecs2::LightSystem::willRemoveSceneFromECSService(re::ecs2::LightSystem *this, re::ecs2::Scene *a2)
{
  long long v108 = a2;
  uint64_t v3 = (char *)this + 3192;
  uint64_t v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 3192, (uint64_t *)&v108);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(v4 + 40);
    if (v6)
    {
      for (unint64_t i = 0; i != v6; ++i)
      {
        uint64_t v8 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v5, i);
        if (*((void *)v108 + 36)) {
          re::EventBus::unsubscribe(*((void *)v108 + 36), *(void *)v8, *(void *)(v8 + 8));
        }
      }
    }
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v108);
  uint64_t v109 = v108;
  uint64_t v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 52, &v109);
  if (v9 != -1)
  {
    uint64_t v10 = *((void *)this + 53) + 16 * v9;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 480, *(void *)(v10 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 528, *(void *)(v10 + 8));
    uint64_t v11 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 360, *(void *)(v10 + 8));
    if (*v11)
    {
      uint64_t v12 = v11;
      *uint64_t v11 = 0;
      uint64_t v13 = v11 + 1;
      uint64_t v14 = *(void *)(v11[1] + 288);
      if (v14)
      {
        uint64_t v15 = v11[12];
        if (v15)
        {
          for (unint64_t j = 0; j != v15; ++j)
          {
            uint64_t v17 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v12 + 7), j);
            re::EventBus::unsubscribe(v14, *(void *)v17, *(void *)(v17 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v12 + 7));
      uint64_t v18 = 0;
      uint64_t v19 = v12 + 3;
      do
      {
        uint64_t v20 = (re::ecs2::ComponentBucketsBase *)v12[2];
        if (*(void *)v20) {
          re::ecs2::ComponentBucketsBase::removeBucket(v20, v19[v18]);
        }
        v19[v18++] = -1;
      }
      while (v18 != 4);
      *uint64_t v13 = 0;
      v13[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 52, &v109);
  }
  uint64_t v109 = v108;
  uint64_t v21 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 106, &v109);
  if (v21 != -1)
  {
    uint64_t v22 = *((void *)this + 107) + 16 * v21;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 912, *(void *)(v22 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 960, *(void *)(v22 + 8));
    long long v23 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 792, *(void *)(v22 + 8));
    if (*v23)
    {
      long long v24 = v23;
      *long long v23 = 0;
      uint64_t v25 = v23 + 1;
      uint64_t v26 = *(void *)(v23[1] + 288);
      if (v26)
      {
        uint64_t v27 = v23[12];
        if (v27)
        {
          for (unint64_t k = 0; k != v27; ++k)
          {
            uint64_t v29 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v24 + 7), k);
            re::EventBus::unsubscribe(v26, *(void *)v29, *(void *)(v29 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v24 + 7));
      uint64_t v30 = 0;
      uint64_t v31 = v24 + 3;
      do
      {
        uint64_t v32 = (re::ecs2::ComponentBucketsBase *)v24[2];
        if (*(void *)v32) {
          re::ecs2::ComponentBucketsBase::removeBucket(v32, v31[v30]);
        }
        v31[v30++] = -1;
      }
      while (v30 != 4);
      *uint64_t v25 = 0;
      v25[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 106, &v109);
  }
  uint64_t v109 = v108;
  uint64_t v33 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 160, &v109);
  if (v33 != -1)
  {
    uint64_t v34 = *((void *)this + 161) + 16 * v33;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 1344, *(void *)(v34 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1392, *(void *)(v34 + 8));
    unint64_t v35 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1224, *(void *)(v34 + 8));
    if (*v35)
    {
      unint64_t v36 = v35;
      *unint64_t v35 = 0;
      uint64_t v37 = v35 + 1;
      uint64_t v38 = *(void *)(v35[1] + 288);
      if (v38)
      {
        uint64_t v39 = v35[12];
        if (v39)
        {
          for (unint64_t m = 0; m != v39; ++m)
          {
            uint64_t v41 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v36 + 7), m);
            re::EventBus::unsubscribe(v38, *(void *)v41, *(void *)(v41 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v36 + 7));
      uint64_t v42 = 0;
      uint64_t v43 = v36 + 3;
      do
      {
        uint64_t v44 = (re::ecs2::ComponentBucketsBase *)v36[2];
        if (*(void *)v44) {
          re::ecs2::ComponentBucketsBase::removeBucket(v44, v43[v42]);
        }
        v43[v42++] = -1;
      }
      while (v42 != 4);
      *uint64_t v37 = 0;
      v37[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 160, &v109);
  }
  uint64_t v109 = v108;
  uint64_t v45 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 214, &v109);
  if (v45 != -1)
  {
    uint64_t v46 = *((void *)this + 215) + 16 * v45;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 1776, *(void *)(v46 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 1824, *(void *)(v46 + 8));
    uint64_t v47 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 1656, *(void *)(v46 + 8));
    if (*v47)
    {
      uint64_t v48 = v47;
      *uint64_t v47 = 0;
      unint64_t v49 = v47 + 1;
      uint64_t v50 = *(void *)(v47[1] + 288);
      if (v50)
      {
        uint64_t v51 = v47[12];
        if (v51)
        {
          for (unint64_t n = 0; n != v51; ++n)
          {
            uint64_t v53 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v48 + 7), n);
            re::EventBus::unsubscribe(v50, *(void *)v53, *(void *)(v53 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v48 + 7));
      uint64_t v54 = 0;
      uint64_t v55 = v48 + 3;
      do
      {
        uint64_t v56 = (re::ecs2::ComponentBucketsBase *)v48[2];
        if (*(void *)v56) {
          re::ecs2::ComponentBucketsBase::removeBucket(v56, v55[v54]);
        }
        v55[v54++] = -1;
      }
      while (v54 != 4);
      *unint64_t v49 = 0;
      v49[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 214, &v109);
  }
  uint64_t v109 = v108;
  uint64_t v57 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 268, &v109);
  if (v57 != -1)
  {
    uint64_t v58 = *((void *)this + 269) + 16 * v57;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 2208, *(void *)(v58 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2256, *(void *)(v58 + 8));
    unint64_t v59 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2088, *(void *)(v58 + 8));
    if (*v59)
    {
      unint64_t v60 = v59;
      void *v59 = 0;
      unint64_t v61 = v59 + 1;
      uint64_t v62 = *(void *)(v59[1] + 288);
      if (v62)
      {
        uint64_t v63 = v59[12];
        if (v63)
        {
          for (iunint64_t i = 0; ii != v63; ++ii)
          {
            uint64_t v65 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v60 + 7), ii);
            re::EventBus::unsubscribe(v62, *(void *)v65, *(void *)(v65 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v60 + 7));
      uint64_t v66 = 0;
      uint64_t v67 = v60 + 3;
      do
      {
        uint64_t v68 = (re::ecs2::ComponentBucketsBase *)v60[2];
        if (*(void *)v68) {
          re::ecs2::ComponentBucketsBase::removeBucket(v68, v67[v66]);
        }
        v67[v66++] = -1;
      }
      while (v66 != 4);
      *unint64_t v61 = 0;
      v61[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 268, &v109);
  }
  uint64_t v109 = v108;
  uint64_t v69 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 322, &v109);
  if (v69 != -1)
  {
    uint64_t v70 = *((void *)this + 323) + 16 * v69;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 2640, *(void *)(v70 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 2688, *(void *)(v70 + 8));
    unint64_t v71 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2520, *(void *)(v70 + 8));
    if (*v71)
    {
      unint64_t v72 = v71;
      void *v71 = 0;
      uint64_t v73 = v71 + 1;
      uint64_t v74 = *(void *)(v71[1] + 288);
      if (v74)
      {
        uint64_t v75 = v71[12];
        if (v75)
        {
          for (junint64_t j = 0; jj != v75; ++jj)
          {
            uint64_t v77 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v72 + 7), jj);
            re::EventBus::unsubscribe(v74, *(void *)v77, *(void *)(v77 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v72 + 7));
      uint64_t v78 = 0;
      uint64_t v79 = v72 + 3;
      do
      {
        uint64_t v80 = (re::ecs2::ComponentBucketsBase *)v72[2];
        if (*(void *)v80) {
          re::ecs2::ComponentBucketsBase::removeBucket(v80, v79[v78]);
        }
        v79[v78++] = -1;
      }
      while (v78 != 4);
      *uint64_t v73 = 0;
      v73[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 322, &v109);
  }
  uint64_t v109 = v108;
  uint64_t v81 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 376, &v109);
  if (v81 != -1)
  {
    uint64_t v82 = *((void *)this + 377) + 16 * v81;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 3072, *(void *)(v82 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 3120, *(void *)(v82 + 8));
    int v83 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 2952, *(void *)(v82 + 8));
    if (*v83)
    {
      long long v84 = v83;
      void *v83 = 0;
      BOOL v85 = v83 + 1;
      uint64_t v86 = *(void *)(v83[1] + 288);
      if (v86)
      {
        uint64_t v87 = v83[12];
        if (v87)
        {
          for (kunint64_t k = 0; kk != v87; ++kk)
          {
            uint64_t v89 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v84 + 7), kk);
            re::EventBus::unsubscribe(v86, *(void *)v89, *(void *)(v89 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v84 + 7));
      uint64_t v90 = 0;
      unint64_t v91 = v84 + 3;
      do
      {
        int v92 = (re::ecs2::ComponentBucketsBase *)v84[2];
        if (*(void *)v92) {
          re::ecs2::ComponentBucketsBase::removeBucket(v92, v91[v90]);
        }
        v91[v90++] = -1;
      }
      while (v90 != 4);
      *BOOL v85 = 0;
      v85[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 376, &v109);
  }
  uint64_t v109 = v108;
  uint64_t v93 = *((void *)v108 + 36);
  if (v93)
  {
    uint64_t v94 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 224, (uint64_t *)&v109);
    if (v94) {
      re::EventBus::unsubscribe(v93, *(void *)v94, *(void *)(v94 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 224, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 176, (uint64_t *)&v109);
  uint64_t v109 = v108;
  uint64_t v95 = *((void *)v108 + 36);
  if (v95)
  {
    uint64_t v96 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 656, (uint64_t *)&v109);
    if (v96) {
      re::EventBus::unsubscribe(v95, *(void *)v96, *(void *)(v96 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 656, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 608, (uint64_t *)&v109);
  uint64_t v109 = v108;
  uint64_t v97 = *((void *)v108 + 36);
  if (v97)
  {
    uint64_t v98 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 1088, (uint64_t *)&v109);
    if (v98) {
      re::EventBus::unsubscribe(v97, *(void *)v98, *(void *)(v98 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1088, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1040, (uint64_t *)&v109);
  uint64_t v109 = v108;
  uint64_t v99 = *((void *)v108 + 36);
  if (v99)
  {
    uint64_t v100 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 1520, (uint64_t *)&v109);
    if (v100) {
      re::EventBus::unsubscribe(v99, *(void *)v100, *(void *)(v100 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1520, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1472, (uint64_t *)&v109);
  uint64_t v109 = v108;
  uint64_t v101 = *((void *)v108 + 36);
  if (v101)
  {
    uint64_t v102 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 1952, (uint64_t *)&v109);
    if (v102) {
      re::EventBus::unsubscribe(v101, *(void *)v102, *(void *)(v102 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1952, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 1904, (uint64_t *)&v109);
  uint64_t v109 = v108;
  uint64_t v103 = *((void *)v108 + 36);
  if (v103)
  {
    uint64_t v104 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 2384, (uint64_t *)&v109);
    if (v104) {
      re::EventBus::unsubscribe(v103, *(void *)v104, *(void *)(v104 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2384, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2336, (uint64_t *)&v109);
  uint64_t v109 = v108;
  uint64_t v105 = *((void *)v108 + 36);
  if (v105)
  {
    uint64_t v106 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 2816, (uint64_t *)&v109);
    if (v106) {
      re::EventBus::unsubscribe(v105, *(void *)v106, *(void *)(v106 + 8));
    }
  }
  re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2816, (uint64_t *)&v109);
  re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 2768, (uint64_t *)&v109);
  uint64_t result = *((void *)this + 20);
  if (result) {
    return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(void *)result + 64))(result, v108);
  }
  return result;
}

uint64_t re::ecs2::LightSystem::lightComponentFromShadowMapComponentType(re::ecs2::LightSystem *this, re::ecs2::ComponentTypeBase *a2, re::ecs2::Entity *a3)
{
  if (re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)this)
  {
    uint64_t v4 = (const re::ecs2::ComponentTypeBase **)&re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)this)
  {
    uint64_t v4 = (const re::ecs2::ComponentTypeBase **)&re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  else
  {
    if (re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)this) {
      return 0;
    }
    uint64_t v4 = (const re::ecs2::ComponentTypeBase **)&re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  }
  return re::ecs2::EntityComponentCollection::get((re::ecs2::ComponentTypeBase *)((char *)a2 + 32), *v4);
}

void *re::ecs2::allocInfo_LightSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86E50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86E50))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF86E58, "LightSystem");
    __cxa_guard_release(&qword_26AF86E50);
  }
  return &unk_26AF86E58;
}

void re::ecs2::initInfo_LightSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x1CEFB079BB7258ALL;
  v5[1] = "LightSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xCA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_LightSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::LightSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::LightSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LightSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LightSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::LightSystem *re::internal::defaultConstruct<re::ecs2::LightSystem>(int a1, int a2, re::ecs2::LightSystem *this)
{
  return re::ecs2::LightSystem::LightSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::LightSystem>(uint64_t a1, uint64_t a2, re::ecs2::LightSystem *a3)
{
}

uint64_t re::ecs2::introspect_LightSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightSystem>, this);
}

void re::ecs2::LightSystem::~LightSystem(re::ecs2::LightSystem *this)
{
  re::ecs2::LightSystem::~LightSystem(this);
  JUMPOUT(0x237DBCBD0);
}

{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 399);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2952);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 3008);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3072);
  *((void *)this + 389) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3120);
  *((void *)this + 396) = 0;
  *((void *)this + 395) = 0;
  *((void *)this + 397) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3120);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3072);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 3008);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2952);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2952);
  *((void *)this + 345) = &unk_26E6FC108;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2864);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 352);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 346);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2520);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2576);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2640);
  *((void *)this + 335) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2688);
  *((void *)this + 342) = 0;
  *((void *)this + 341) = 0;
  *((void *)this + 343) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2688);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2640);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2576);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2520);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2520);
  *((void *)this + 291) = &unk_26E6FC148;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2432);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 298);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 292);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2088);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2144);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2208);
  *((void *)this + 281) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2256);
  *((void *)this + 288) = 0;
  *((void *)this + 287) = 0;
  *((void *)this + 289) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2256);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2208);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 2144);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 2088);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2088);
  *((void *)this + 237) = &unk_26E6FC188;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 2000);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 244);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 238);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1656);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1712);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1776);
  *((void *)this + 227) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1824);
  *((void *)this + 234) = 0;
  *((void *)this + 233) = 0;
  *((void *)this + 235) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1824);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1776);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1712);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1656);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1656);
  *((void *)this + 183) = &unk_26E6FC1C8;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1568);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 190);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 184);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1224);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1280);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1344);
  *((void *)this + 173) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1392);
  *((void *)this + 180) = 0;
  *((void *)this + 179) = 0;
  *((void *)this + 181) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1392);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1344);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 1280);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 1224);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1224);
  *((void *)this + 129) = &unk_26E6FC208;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 1136);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 136);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 130);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 792);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 848);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 912);
  *((void *)this + 119) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 960);
  *((void *)this + 126) = 0;
  *((void *)this + 125) = 0;
  *((void *)this + 127) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 960);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 912);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 848);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 792);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 792);
  *((void *)this + 75) = &unk_26E6FC248;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 704);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 82);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 76);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 360);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 416);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 480);
  *((void *)this + 65) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 528);
  *((void *)this + 72) = 0;
  *((void *)this + 71) = 0;
  *((void *)this + 73) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 528);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 480);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 416);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 360);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 360);
  *((void *)this + 21) = &unk_26E6FC288;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 272);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 28);
  re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 22);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::LightSystem::typeInfo(re::ecs2::LightSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightSystem>, 0);
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1 = a1 + 128;
  if ((*(unsigned char *)(a1 + 120) & 1) == 0) {
    return *(void *)(a1 + 136);
  }
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v24 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  {
    uint64_t v23 = *(void *)(a2 + 8);
    long long v26 = 0u;
    memset(v25, 0, sizeof(v25));
    DWORD1(v26) = 0x7FFFFFFF;
    uint64_t v22 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 8, &v23, (uint64_t *)v25);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v25);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v22, &v24);
  }
  else
  {
    uint64_t v5 = (re::ecs2::EntityComponentCollection *)(a3 + 32);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result) {
      BOOL v7 = re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      uint64_t v8 = result;
      uint64_t v9 = re::ecs2::EntityComponentCollection::get(v5, a4);
      re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)(v8 + 48));
      long long v10 = *(_OWORD *)(v8 + 128);
      long long v28 = *(_OWORD *)(v8 + 112);
      long long v29 = v10;
      v30[0] = *(_OWORD *)(v8 + 144);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(v8 + 156);
      long long v11 = *(_OWORD *)(v8 + 96);
      long long v26 = *(_OWORD *)(v8 + 80);
      long long v27 = v11;
      long long v12 = *(_OWORD *)(v8 + 208);
      long long v13 = *(_OWORD *)(v8 + 224);
      int v36 = *(_DWORD *)(v8 + 256);
      long long v33 = v12;
      long long v34 = v13;
      long long v35 = *(_OWORD *)(v8 + 240);
      long long v14 = *(_OWORD *)(v8 + 176);
      long long v15 = *(_OWORD *)(v8 + 192);
      long long v31 = v14;
      long long v32 = v15;
      char v37 = *(unsigned char *)(v8 + 260);
      if (v37) {
        char v38 = *(unsigned char *)(v8 + 261);
      }
      __int16 v39 = *(_WORD *)(v8 + 262);
      re::DynamicString::operator=((re::DynamicString *)(v8 + 48), (re::DynamicString *)v25);
      long long v16 = v27;
      *(_OWORD *)(v8 + 80) = v26;
      *(_OWORD *)(v8 + 96) = v16;
      *(_OWORD *)(v8 + 156) = *(_OWORD *)((char *)v30 + 12);
      long long v17 = v30[0];
      long long v18 = v28;
      *(_OWORD *)(v8 + 128) = v29;
      *(_OWORD *)(v8 + 144) = v17;
      *(_OWORD *)(v8 + 112) = v18;
      long long v19 = v32;
      *(_OWORD *)(v8 + 176) = v31;
      *(_OWORD *)(v8 + 192) = v19;
      *(_DWORD *)(v8 + 256) = v36;
      long long v20 = v35;
      long long v21 = v33;
      *(_OWORD *)(v8 + 224) = v34;
      *(_OWORD *)(v8 + 240) = v20;
      *(_OWORD *)(v8 + 208) = v21;
      if (*(unsigned char *)(v8 + 260) || v37)
      {
        if (!*(unsigned char *)(v8 + 260) || v37)
        {
          if (!*(unsigned char *)(v8 + 260) && v37) {
            *(unsigned char *)(v8 + 260) = 1;
          }
          *(unsigned char *)(v8 + 261) = v38;
        }
        else
        {
          *(unsigned char *)(v8 + 260) = 0;
        }
      }
      *(_WORD *)(v8 + 262) = v39;
      uint64_t result = *(void *)&v25[0];
      if (*(void *)&v25[0])
      {
        if (BYTE8(v25[0])) {
          return (*(uint64_t (**)(void))(**(void **)&v25[0] + 40))();
        }
      }
    }
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v36, a5, 0);
  long long v33 = v36[0];
  if (*(void *)&v36[0] != a5 || WORD4(v36[0]) != 0xFFFFLL || (DWORD2(v36[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v33);
      if (*(unsigned char *)re::ecs2::RenderOptions::forEntity(v9, *(void *)(*(void *)v12 + 16)))
      {
        long long v13 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v33);
        uint64_t v14 = *(void *)v13;
        long long v15 = *(void **)(*(void *)v13 + 16);
        memset(v36, 0, sizeof(v36));
        re::DynamicString::setCapacity(v36, 0);
        long long v40 = 0u;
        memset(v41, 0, 20);
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        *(void *)&v41[20] = 0x412000003C23D70ALL;
        __int16 v48 = 0;
        long long v45 = 0u;
        memset(v46, 0, sizeof(v46));
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        *(void *)uint64_t v46 = v15[37];
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v34, v15[35], *(void *)v46);
        re::DynamicString::operator=((re::DynamicString *)v36, (re::DynamicString *)&v34);
        if (v34 && (v35 & 1) != 0) {
          (*(void (**)(void))(*(void *)v34 + 40))();
        }
        unint64_t v16 = *(unsigned int *)(v14 + 280) | ((unint64_t)*(unsigned __int8 *)(v14 + 288) << 32);
        uint64_t v34 = *(void *)(v14 + 272);
        unint64_t v35 = v16;
        *(void *)&long long v17 = re::ColorGamut3F::as(&v34, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v17) = v18;
        *(_OWORD *)uint64_t v41 = v17;
        *(_DWORD *)&v41[16] = *(_DWORD *)(v14 + 28);
        *(void *)&v46[8] = *(void *)(v14 + 32);
        *(_DWORD *)&v41[20] = 1008981770;
        *(_DWORD *)&v41[24] = *(_DWORD *)&v46[8];
        long long v19 = (re::ecs2::EntityComponentCollection *)(v15 + 4);
        uint64_t v20 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v21 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        LOBYTE(v48) = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
        if (HIBYTE(v48) && *(unsigned char *)(a6 + 16)) {
          HIBYTE(v48) = *(unsigned char *)(a6 + 17);
        }
        if ((_BYTE)v48 && *(unsigned char *)(a6 + 18)) {
          LOBYTE(v48) = *(unsigned char *)(a6 + 19);
        }
        re::DynamicString::operator=((re::DynamicString *)(v14 + 48), (re::DynamicString *)v36);
        long long v23 = v38;
        *(_OWORD *)(v14 + 80) = v37;
        *(_OWORD *)(v14 + 96) = v23;
        *(_OWORD *)(v14 + 156) = *(_OWORD *)&v41[12];
        long long v24 = *(_OWORD *)v41;
        long long v25 = v39;
        *(_OWORD *)(v14 + 128) = v40;
        *(_OWORD *)(v14 + 144) = v24;
        *(_OWORD *)(v14 + 112) = v25;
        *(_DWORD *)(v14 + 256) = *(_DWORD *)&v46[16];
        long long v26 = *(_OWORD *)v46;
        long long v27 = v44;
        *(_OWORD *)(v14 + 224) = v45;
        *(_OWORD *)(v14 + 240) = v26;
        long long v28 = v42;
        *(_OWORD *)(v14 + 192) = v43;
        *(_OWORD *)(v14 + 208) = v27;
        *(_OWORD *)(v14 + 176) = v28;
        if (*(unsigned char *)(v14 + 260) || v46[20])
        {
          if (!*(unsigned char *)(v14 + 260) || v46[20])
          {
            if (!*(unsigned char *)(v14 + 260) && v46[20]) {
              *(unsigned char *)(v14 + 260) = 1;
            }
            *(unsigned char *)(v14 + 261) = v47;
          }
          else
          {
            *(unsigned char *)(v14 + 260) = 0;
          }
        }
        *(_WORD *)(v14 + 262) = v48;
        if (*(void *)&v36[0] && (BYTE8(v36[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v36[0] + 40))();
        }
        unsigned int v29 = 3;
      }
      else
      {
        unsigned int v29 = 1;
      }
      unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v33);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::setComponentState(a3, a4, v30, v29);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v33);
    }
    while ((void)v33 != a5 || WORD4(v33) != 0xFFFF || WORD5(v33) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PointLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 136) + 24))(*(void *)(*(void *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  uint64_t v53 = *(void *)buf;
  uint64_t v54 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    float32x4_t v52 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v53);
      uint64_t v13 = *(void *)v12;
      unint64_t v14 = *(re::ecs2::TransformComponent ***)(*(void *)v12 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v14, (const re::ecs2::Entity *)1, buf);
      float32x4_t v15 = v59;
      *(_OWORD *)(v13 + 80) = *(_OWORD *)buf;
      *(float32x4_t *)(v13 + 96) = v15;
      long long v16 = v61;
      *(float32x4_t *)(v13 + 112) = v60;
      *(_OWORD *)(v13 + 128) = v16;
      if (v56[0])
      {
        float v22 = v57;
        float v23 = *(float *)(v13 + 36);
        *(float *)(v13 + 248) = v57 * *(float *)(v13 + 32);
        *(float *)(v13 + 160) = *(float *)(v13 + 28) * powf(v22, v23);
      }
      uint64_t v24 = 0;
      v18.i64[0] = *(void *)(v13 + 80);
      LODWORD(v21) = *(_DWORD *)(v13 + 88);
      v19.i64[0] = *(void *)(v13 + 96);
      v20.i64[0] = *(void *)(v13 + 112);
      int32x4_t v25 = vzip1q_s32((int32x4_t)v18, (int32x4_t)v20);
      v18.i32[2] = v21;
      DWORD1(v21) = *(_DWORD *)(v13 + 104);
      DWORD2(v21) = *(_DWORD *)(v13 + 120);
      v62[0] = vzip1q_s32(v25, (int32x4_t)v19);
      v62[1] = vzip2q_s32(v25, vdupq_lane_s32(*(int32x2_t *)v19.f32, 1));
      v62[2] = v21;
      v19.i32[2] = DWORD1(v21);
      v20.i32[2] = DWORD2(v21);
      do
      {
        *(float32x4_t *)&buf[v24 * 16] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v62[v24])), v19, *(float32x2_t *)&v62[v24], 1), v20, (float32x4_t)v62[v24], 2);
        ++v24;
      }
      while (v24 != 3);
      v26.i32[3] = v60.i32[3];
      float32x4_t v27 = (float32x4_t)vcgeq_f32(v52, vabdq_f32((float32x4_t)xmmword_23435FD80, v60));
      float32x4_t v28 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v52, vabdq_f32((float32x4_t)xmmword_23435FD60, v59)), (int8x16_t)vcgeq_f32(v52, vabdq_f32((float32x4_t)xmmword_23435FD50, *(float32x4_t *)buf))), (int8x16_t)v27);
      v28.i32[3] = v28.i32[2];
      if ((vminvq_u32((uint32x4_t)v28) & 0x80000000) == 0)
      {
        if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::PointLightComponentStateImpl::processUpdatingComponent(re::ecs2::PointLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged, 1u) & 1) == 0)
        {
          unsigned int v29 = *re::ecsComponentsLogObjects(v17);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233120000, v29, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
          }
        }
        v28.i64[0] = *(void *)(v13 + 80);
        v26.i64[0] = *(void *)(v13 + 96);
        v27.i64[0] = *(void *)(v13 + 112);
        v28.i32[2] = *(_DWORD *)(v13 + 88);
        v26.i32[2] = *(_DWORD *)(v13 + 104);
        v27.i32[2] = *(_DWORD *)(v13 + 120);
        int32x4_t v30 = (int32x4_t)vmulq_f32(v28, v28);
        v30.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))).u32[0];
        float32x2_t v31 = vrsqrte_f32((float32x2_t)v30.u32[0]);
        float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v31, v31)));
        float32x4_t v33 = vmulq_n_f32(v28, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v32, v32))).f32[0]);
        float32x4_t v34 = vmulq_f32(v26, v33);
        float32x4_t v35 = vmulq_f32(v33, v33);
        v35.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0];
        float32x4_t v36 = vsubq_f32(v26, vmulq_n_f32(v33, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]/ v35.f32[0]));
        int32x4_t v37 = (int32x4_t)vmulq_f32(v36, v36);
        v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
        float32x2_t v38 = vrsqrte_f32((float32x2_t)v37.u32[0]);
        float32x2_t v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v38, v38)));
        float32x4_t v40 = vmulq_n_f32(v36, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v39, v39))).f32[0]);
        float32x4_t v41 = vmulq_f32(v27, v33);
        float32x4_t v42 = vmulq_n_f32(v33, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]/ v35.f32[0]);
        float32x4_t v43 = vmulq_f32(v27, v40);
        float32x4_t v44 = vsubq_f32(v27, v42);
        v42.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0];
        float32x4_t v45 = vmulq_f32(v40, v40);
        float32x4_t v46 = vsubq_f32(v44, vmulq_n_f32(v40, v42.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0]));
        int32x4_t v47 = (int32x4_t)vmulq_f32(v46, v46);
        v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
        *(float32x2_t *)v45.f32 = vrsqrte_f32((float32x2_t)v47.u32[0]);
        *(float32x2_t *)v45.f32 = vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32)));
        *(void *)(v13 + 80) = v33.i64[0];
        *(_DWORD *)(v13 + 88) = v33.i32[2];
        *(void *)(v13 + 96) = v40.i64[0];
        *(_DWORD *)(v13 + 104) = v40.i32[2];
        float32x4_t v48 = vmulq_n_f32(v46, vmul_f32(*(float32x2_t *)v45.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v45.f32))).f32[0]);
        *(void *)(v13 + 112) = v48.i64[0];
        *(_DWORD *)(v13 + 120) = v48.i32[2];
      }
      uint64_t v49 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v14, (uint64_t)&v55);
      if (v49) {
        re::DynamicArray<re::PointLightInfo>::add(v49 + 168, (re::DynamicString *)(v13 + 48));
      }
      unint64_t v50 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v53);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v50, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v53);
    }
    while (v53 != a5 || (unsigned __int16)v54 != 0xFFFF || WORD1(v54) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1 = a1 + 128;
  if ((*(unsigned char *)(a1 + 120) & 1) == 0) {
    return *(void *)(a1 + 136);
  }
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v24 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  {
    uint64_t v23 = *(void *)(a2 + 8);
    long long v26 = 0u;
    memset(v25, 0, sizeof(v25));
    DWORD1(v26) = 0x7FFFFFFF;
    uint64_t v22 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 8, &v23, (uint64_t *)v25);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v25);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v22, &v24);
  }
  else
  {
    uint64_t v5 = (re::ecs2::EntityComponentCollection *)(a3 + 32);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result) {
      BOOL v7 = re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      uint64_t v8 = result;
      uint64_t v9 = re::ecs2::EntityComponentCollection::get(v5, a4);
      re::DynamicString::DynamicString((re::DynamicString *)v25, (const re::DynamicString *)(v8 + 48));
      long long v10 = *(_OWORD *)(v8 + 128);
      long long v28 = *(_OWORD *)(v8 + 112);
      long long v29 = v10;
      v30[0] = *(_OWORD *)(v8 + 144);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(v8 + 156);
      long long v11 = *(_OWORD *)(v8 + 96);
      long long v26 = *(_OWORD *)(v8 + 80);
      long long v27 = v11;
      long long v12 = *(_OWORD *)(v8 + 208);
      long long v13 = *(_OWORD *)(v8 + 224);
      *(_OWORD *)&v35[12] = *(_OWORD *)(v8 + 252);
      long long v33 = v12;
      long long v34 = v13;
      *(_OWORD *)float32x4_t v35 = *(_OWORD *)(v8 + 240);
      long long v14 = *(_OWORD *)(v8 + 176);
      long long v15 = *(_OWORD *)(v8 + 192);
      long long v31 = v14;
      long long v32 = v15;
      char v36 = *(unsigned char *)(v8 + 268);
      if (v36) {
        char v37 = *(unsigned char *)(v8 + 269);
      }
      __int16 v38 = *(_WORD *)(v8 + 270);
      char v39 = *(unsigned char *)(v8 + 272);
      re::DynamicString::operator=((re::DynamicString *)(v8 + 48), (re::DynamicString *)v25);
      long long v16 = v27;
      *(_OWORD *)(v8 + 80) = v26;
      *(_OWORD *)(v8 + 96) = v16;
      *(_OWORD *)(v8 + 156) = *(_OWORD *)((char *)v30 + 12);
      long long v17 = v30[0];
      long long v18 = v28;
      *(_OWORD *)(v8 + 128) = v29;
      *(_OWORD *)(v8 + 144) = v17;
      *(_OWORD *)(v8 + 112) = v18;
      long long v19 = v32;
      *(_OWORD *)(v8 + 176) = v31;
      *(_OWORD *)(v8 + 192) = v19;
      *(_OWORD *)(v8 + 252) = *(_OWORD *)&v35[12];
      long long v20 = *(_OWORD *)v35;
      long long v21 = v33;
      *(_OWORD *)(v8 + 224) = v34;
      *(_OWORD *)(v8 + 240) = v20;
      *(_OWORD *)(v8 + 208) = v21;
      if (*(unsigned char *)(v8 + 268) || v36)
      {
        if (!*(unsigned char *)(v8 + 268) || v36)
        {
          if (!*(unsigned char *)(v8 + 268) && v36) {
            *(unsigned char *)(v8 + 268) = 1;
          }
          *(unsigned char *)(v8 + 269) = v37;
        }
        else
        {
          *(unsigned char *)(v8 + 268) = 0;
        }
      }
      *(_WORD *)(v8 + 270) = v38;
      *(unsigned char *)(v8 + 272) = v39;
      uint64_t result = *(void *)&v25[0];
      if (*(void *)&v25[0])
      {
        if (BYTE8(v25[0])) {
          return (*(uint64_t (**)(void))(**(void **)&v25[0] + 40))();
        }
      }
    }
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  long long v32 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v37, a5, 0);
  long long v34 = v37[0];
  if (*(void *)&v37[0] != a5 || WORD4(v37[0]) != 0xFFFFLL || (DWORD2(v37[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
      if (*(unsigned char *)re::ecs2::RenderOptions::forEntity(v32, *(void *)(*(void *)v11 + 16)))
      {
        long long v12 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v34);
        uint64_t v13 = *(void *)v12;
        long long v14 = *(void **)(*(void *)v12 + 16);
        memset(v37, 0, sizeof(v37));
        re::DynamicString::setCapacity(v37, 0);
        long long v41 = 0u;
        memset(v42, 0, 20);
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        *(void *)&v42[20] = 0x412000003C23D70ALL;
        __int16 v49 = 0;
        char v50 = 0;
        long long v46 = 0u;
        memset(v47, 0, sizeof(v47));
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        *(void *)int32x4_t v47 = v14[37];
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v35, v14[35], *(void *)v47);
        re::DynamicString::operator=((re::DynamicString *)v37, (re::DynamicString *)&v35);
        if (v35 && (v36 & 1) != 0) {
          (*(void (**)(void))(*(void *)v35 + 40))();
        }
        unint64_t v15 = *(unsigned int *)(v13 + 296) | ((unint64_t)*(unsigned __int8 *)(v13 + 304) << 32);
        uint64_t v35 = *(void *)(v13 + 288);
        unint64_t v36 = v15;
        *(void *)&long long v16 = re::ColorGamut3F::as(&v35, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v16) = v17;
        *(_OWORD *)float32x4_t v42 = v16;
        *(_DWORD *)&v42[16] = *(_DWORD *)(v13 + 28);
        int8x16_t v18 = *(int8x16_t *)(v13 + 32);
        *(int8x16_t *)&v47[8] = vextq_s8(v18, v18, 8uLL);
        *(_DWORD *)&v42[20] = 1008981770;
        *(_DWORD *)&v42[24] = v18.i32[2];
        LOBYTE(v49) = 0;
        long long v19 = (re::ecs2::EntityComponentCollection *)(v14 + 4);
        uint64_t v20 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v21 = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        HIBYTE(v49) = re::ecs2::EntityComponentCollection::get(v19, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
        if (v50 && *(unsigned char *)(a6 + 16)) {
          char v50 = *(unsigned char *)(a6 + 17);
        }
        if (HIBYTE(v49) && *(unsigned char *)(a6 + 18)) {
          HIBYTE(v49) = *(unsigned char *)(a6 + 19);
        }
        re::DynamicString::operator=((re::DynamicString *)(v13 + 48), (re::DynamicString *)v37);
        long long v23 = v39;
        *(_OWORD *)(v13 + 80) = v38;
        *(_OWORD *)(v13 + 96) = v23;
        *(_OWORD *)(v13 + 156) = *(_OWORD *)&v42[12];
        long long v24 = *(_OWORD *)v42;
        long long v25 = v40;
        *(_OWORD *)(v13 + 128) = v41;
        *(_OWORD *)(v13 + 144) = v24;
        *(_OWORD *)(v13 + 112) = v25;
        *(_OWORD *)(v13 + 252) = *(_OWORD *)&v47[12];
        long long v26 = *(_OWORD *)v47;
        long long v27 = v45;
        *(_OWORD *)(v13 + 224) = v46;
        *(_OWORD *)(v13 + 240) = v26;
        long long v28 = v43;
        *(_OWORD *)(v13 + 192) = v44;
        *(_OWORD *)(v13 + 208) = v27;
        *(_OWORD *)(v13 + 176) = v28;
        if (*(unsigned char *)(v13 + 268) || v47[28])
        {
          if (!*(unsigned char *)(v13 + 268) || v47[28])
          {
            if (!*(unsigned char *)(v13 + 268) && v47[28]) {
              *(unsigned char *)(v13 + 268) = 1;
            }
            *(unsigned char *)(v13 + 269) = v48;
          }
          else
          {
            *(unsigned char *)(v13 + 268) = 0;
          }
        }
        *(_WORD *)(v13 + 270) = v49;
        *(unsigned char *)(v13 + 272) = v50;
        if (*(void *)&v37[0] && (BYTE8(v37[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v37[0] + 40))();
        }
        unsigned int v29 = 3;
      }
      else
      {
        unsigned int v29 = 1;
      }
      unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v34);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::setComponentState(a3, a4, v30, v29);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v34);
    }
    while ((void)v34 != a5 || WORD4(v34) != 0xFFFF || WORD5(v34) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SpotLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v56 = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 136) + 24))(*(void *)(*(void *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  uint64_t v54 = *(void *)buf;
  uint64_t v55 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    float32x4_t v53 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v54);
      uint64_t v13 = *(void *)v12;
      unint64_t v14 = *(re::ecs2::TransformComponent ***)(*(void *)v12 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v14, (const re::ecs2::Entity *)1, buf);
      float32x4_t v15 = v60;
      *(_OWORD *)(v13 + 80) = *(_OWORD *)buf;
      *(float32x4_t *)(v13 + 96) = v15;
      float32x4_t v16 = v62;
      *(float32x4_t *)(v13 + 112) = v61;
      *(float32x4_t *)(v13 + 128) = v16;
      if (v57[0])
      {
        float v22 = v58;
        float v23 = *(float *)(v13 + 44);
        *(float *)(v13 + 248) = v58 * *(float *)(v13 + 40);
        *(float *)(v13 + 160) = *(float *)(v13 + 28) * powf(v22, v23);
        re::Projection::makePerspectiveFieldOfViewReverseDepth(*(float *)(v13 + 256), 1.0, v22 * *(float *)(v13 + 164), v22 * *(float *)(v13 + 168), buf);
        float32x4_t v24 = v60;
        *(_OWORD *)(v13 + 176) = *(_OWORD *)buf;
        *(float32x4_t *)(v13 + 192) = v24;
        v18.i64[1] = v61.i64[1];
        float32x4_t v19 = v62;
        *(float32x4_t *)(v13 + 208) = v61;
        *(float32x4_t *)(v13 + 224) = v19;
      }
      uint64_t v25 = 0;
      v18.i64[0] = *(void *)(v13 + 80);
      LODWORD(v21) = *(_DWORD *)(v13 + 88);
      v19.i64[0] = *(void *)(v13 + 96);
      v20.i64[0] = *(void *)(v13 + 112);
      int32x4_t v26 = vzip1q_s32((int32x4_t)v18, (int32x4_t)v20);
      v18.i32[2] = v21;
      DWORD1(v21) = *(_DWORD *)(v13 + 104);
      DWORD2(v21) = *(_DWORD *)(v13 + 120);
      v63[0] = vzip1q_s32(v26, (int32x4_t)v19);
      v63[1] = vzip2q_s32(v26, vdupq_lane_s32(*(int32x2_t *)v19.f32, 1));
      v63[2] = v21;
      v19.i32[2] = DWORD1(v21);
      v20.i32[2] = DWORD2(v21);
      do
      {
        *(float32x4_t *)&buf[v25 * 16] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v63[v25])), v19, *(float32x2_t *)&v63[v25], 1), v20, (float32x4_t)v63[v25], 2);
        ++v25;
      }
      while (v25 != 3);
      v27.i32[3] = v61.i32[3];
      float32x4_t v28 = (float32x4_t)vcgeq_f32(v53, vabdq_f32((float32x4_t)xmmword_23435FD80, v61));
      float32x4_t v29 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v53, vabdq_f32((float32x4_t)xmmword_23435FD60, v60)), (int8x16_t)vcgeq_f32(v53, vabdq_f32((float32x4_t)xmmword_23435FD50, *(float32x4_t *)buf))), (int8x16_t)v28);
      v29.i32[3] = v29.i32[2];
      if ((vminvq_u32((uint32x4_t)v29) & 0x80000000) == 0)
      {
        if ((atomic_exchange((atomic_uchar *volatile)&re::ecs2::SpotLightComponentStateImpl::processUpdatingComponent(re::ecs2::SpotLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged, 1u) & 1) == 0)
        {
          unint64_t v30 = *re::ecsComponentsLogObjects(v17);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233120000, v30, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
          }
        }
        v29.i64[0] = *(void *)(v13 + 80);
        v27.i64[0] = *(void *)(v13 + 96);
        v28.i64[0] = *(void *)(v13 + 112);
        v29.i32[2] = *(_DWORD *)(v13 + 88);
        v27.i32[2] = *(_DWORD *)(v13 + 104);
        v28.i32[2] = *(_DWORD *)(v13 + 120);
        int32x4_t v31 = (int32x4_t)vmulq_f32(v29, v29);
        v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
        float32x2_t v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
        float32x2_t v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
        float32x4_t v34 = vmulq_n_f32(v29, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).f32[0]);
        float32x4_t v35 = vmulq_f32(v27, v34);
        float32x4_t v36 = vmulq_f32(v34, v34);
        v36.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0];
        float32x4_t v37 = vsubq_f32(v27, vmulq_n_f32(v34, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0]/ v36.f32[0]));
        int32x4_t v38 = (int32x4_t)vmulq_f32(v37, v37);
        v38.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
        float32x2_t v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
        float32x2_t v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
        float32x4_t v41 = vmulq_n_f32(v37, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
        float32x4_t v42 = vmulq_f32(v28, v34);
        float32x4_t v43 = vmulq_n_f32(v34, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]/ v36.f32[0]);
        float32x4_t v44 = vmulq_f32(v28, v41);
        float32x4_t v45 = vsubq_f32(v28, v43);
        v43.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0];
        float32x4_t v46 = vmulq_f32(v41, v41);
        float32x4_t v47 = vsubq_f32(v45, vmulq_n_f32(v41, v43.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]));
        int32x4_t v48 = (int32x4_t)vmulq_f32(v47, v47);
        v48.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1))).u32[0];
        *(float32x2_t *)v46.f32 = vrsqrte_f32((float32x2_t)v48.u32[0]);
        *(float32x2_t *)v46.f32 = vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32)));
        *(void *)(v13 + 80) = v34.i64[0];
        *(_DWORD *)(v13 + 88) = v34.i32[2];
        *(void *)(v13 + 96) = v41.i64[0];
        *(_DWORD *)(v13 + 104) = v41.i32[2];
        float32x4_t v49 = vmulq_n_f32(v47, vmul_f32(*(float32x2_t *)v46.f32, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v46.f32, *(float32x2_t *)v46.f32))).f32[0]);
        *(void *)(v13 + 112) = v49.i64[0];
        *(_DWORD *)(v13 + 120) = v49.i32[2];
      }
      uint64_t v50 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v14, (uint64_t)&v56);
      if (v50) {
        re::DynamicArray<re::SpotLightInfo>::add(v50 + 128, (re::DynamicString *)(v13 + 48));
      }
      unint64_t v51 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v54);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v51, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v54);
    }
    while (v54 != a5 || (unsigned __int16)v55 != 0xFFFF || WORD1(v55) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1 = a1 + 128;
  if ((*(unsigned char *)(a1 + 120) & 1) == 0) {
    return *(void *)(a1 + 136);
  }
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3, const re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v22 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
  {
    uint64_t v21 = *(void *)(a2 + 8);
    long long v24 = 0u;
    memset(v23, 0, sizeof(v23));
    DWORD1(v24) = 0x7FFFFFFF;
    uint64_t v12 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(a1 + 8, &v21, (uint64_t *)v23);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v12, &v22);
  }
  else
  {
    uint64_t v5 = (re::ecs2::EntityComponentCollection *)(a3 + 32);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result) {
      BOOL v7 = re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      uint64_t v8 = result;
      uint64_t v9 = re::ecs2::EntityComponentCollection::get(v5, a4);
      if (*(unsigned char *)(v8 + 32))
      {
        re::DynamicString::DynamicString((re::DynamicString *)v23, (const re::DynamicString *)(v8 + 192));
        long long v10 = *(_OWORD *)(v8 + 272);
        long long v26 = *(_OWORD *)(v8 + 256);
        long long v27 = v10;
        *(_OWORD *)float32x4_t v28 = *(_OWORD *)(v8 + 288);
        *(_OWORD *)&v28[12] = *(_OWORD *)(v8 + 300);
        long long v11 = *(_OWORD *)(v8 + 240);
        long long v24 = *(_OWORD *)(v8 + 224);
        long long v25 = v11;
        char v30 = *(unsigned char *)(v8 + 324);
        if (v30) {
          char v31 = *(unsigned char *)(v8 + 325);
        }
        *(_WORD *)float32x2_t v32 = *(_WORD *)(v8 + 326);
        int32x2_t v29 = vrev64_s32(*(int32x2_t *)(v9 + 28));
        if (v30 || *(unsigned char *)(v9 + 36))
        {
          if (!v30 || *(unsigned char *)(v9 + 36))
          {
            if (!v30) {
              char v30 = *(unsigned char *)(v9 + 36) != 0;
            }
            char v31 = *(unsigned char *)(v9 + 37);
          }
          else
          {
            char v30 = 0;
          }
        }
        *(void *)&v28[20] = *(void *)(v9 + 40);
        *(_DWORD *)&v32[2] = *(_DWORD *)(v9 + 48);
        v32[0] = *(unsigned char *)(v9 + 38);
        v32[6] = *(unsigned char *)(v9 + 52);
        re::DynamicString::operator=((re::DynamicString *)(v8 + 192), (re::DynamicString *)v23);
        long long v15 = v25;
        *(_OWORD *)(v8 + 224) = v24;
        *(_OWORD *)(v8 + 240) = v15;
        *(_OWORD *)(v8 + 300) = *(_OWORD *)&v28[12];
        long long v16 = *(_OWORD *)v28;
        long long v17 = v26;
        *(_OWORD *)(v8 + 272) = v27;
        *(_OWORD *)(v8 + 288) = v16;
        *(_OWORD *)(v8 + 256) = v17;
        *(int32x2_t *)(v8 + 316) = v29;
        if (*(unsigned char *)(v8 + 324) || v30)
        {
          if (!*(unsigned char *)(v8 + 324) || v30)
          {
            if (!*(unsigned char *)(v8 + 324) && v30) {
              *(unsigned char *)(v8 + 324) = 1;
            }
            *(unsigned char *)(v8 + 325) = v31;
          }
          else
          {
            *(unsigned char *)(v8 + 324) = 0;
          }
        }
        *(_DWORD *)(v8 + 326) = *(_DWORD *)v32;
        *(_DWORD *)(v8 + 329) = *(_DWORD *)&v32[3];
      }
      else
      {
        re::DynamicString::DynamicString((re::DynamicString *)v23, (const re::DynamicString *)(v8 + 48));
        long long v13 = *(_OWORD *)(v8 + 128);
        long long v26 = *(_OWORD *)(v8 + 112);
        long long v27 = v13;
        *(_OWORD *)float32x4_t v28 = *(_OWORD *)(v8 + 144);
        *(_OWORD *)&v28[12] = *(_OWORD *)(v8 + 156);
        long long v14 = *(_OWORD *)(v8 + 96);
        long long v24 = *(_OWORD *)(v8 + 80);
        long long v25 = v14;
        char v30 = *(unsigned char *)(v8 + 180);
        if (v30) {
          char v31 = *(unsigned char *)(v8 + 181);
        }
        *(_DWORD *)float32x2_t v32 = *(_DWORD *)(v8 + 182);
        *(_WORD *)&v32[4] = *(_WORD *)(v8 + 186);
        int32x2_t v29 = vrev64_s32(*(int32x2_t *)(v9 + 28));
        if (v30 || *(unsigned char *)(v9 + 36))
        {
          if (!v30 || *(unsigned char *)(v9 + 36))
          {
            if (!v30) {
              char v30 = *(unsigned char *)(v9 + 36) != 0;
            }
            char v31 = *(unsigned char *)(v9 + 37);
          }
          else
          {
            char v30 = 0;
          }
        }
        *(void *)&v28[20] = *(void *)(v9 + 40);
        *(_DWORD *)&v32[6] = *(_DWORD *)(v9 + 48);
        v32[2] = *(unsigned char *)(v9 + 38);
        v32[3] = *(unsigned char *)(v9 + 52);
        re::DynamicString::operator=((re::DynamicString *)(v8 + 48), (re::DynamicString *)v23);
        long long v18 = *(_OWORD *)&v28[12];
        long long v19 = v27;
        *(_OWORD *)(v8 + 112) = v26;
        *(_OWORD *)(v8 + 128) = v19;
        *(_OWORD *)(v8 + 144) = *(_OWORD *)v28;
        *(_OWORD *)(v8 + 156) = v18;
        long long v20 = v25;
        *(_OWORD *)(v8 + 80) = v24;
        *(_OWORD *)(v8 + 96) = v20;
        *(int32x2_t *)(v8 + 172) = v29;
        if (*(unsigned char *)(v8 + 180) || v30)
        {
          if (!*(unsigned char *)(v8 + 180) || v30)
          {
            if (!*(unsigned char *)(v8 + 180) && v30) {
              *(unsigned char *)(v8 + 180) = 1;
            }
            *(unsigned char *)(v8 + 181) = v31;
          }
          else
          {
            *(unsigned char *)(v8 + 180) = 0;
          }
        }
        *(void *)(v8 + 182) = *(void *)v32;
        *(_WORD *)(v8 + 190) = *(_WORD *)&v32[8];
      }
      uint64_t result = *(void *)&v23[0];
      if (*(void *)&v23[0])
      {
        if (BYTE8(v23[0])) {
          return (*(uint64_t (**)(void))(**(void **)&v23[0] + 40))();
        }
      }
    }
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  float32x4_t v35 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v40, a5, 0);
  long long v37 = v40;
  if ((void)v40 != a5 || WORD4(v40) != 0xFFFFLL || (DWORD2(v40) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
      if (*(unsigned char *)re::ecs2::RenderOptions::forEntity(v35, *(void *)(*(void *)v10 + 16)))
      {
        uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v37);
        uint64_t v12 = *(void *)v11;
        long long v13 = *(void **)(*(void *)v11 + 16);
        uint64_t v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        long long v15 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        long long v16 = v15;
        if (*(unsigned char *)(v12 + 32))
        {
          long long v40 = 0u;
          long long v41 = 0u;
          re::DynamicString::setCapacity(&v40, 0);
          long long v45 = 0u;
          memset(v46, 0, 20);
          long long v43 = 0u;
          long long v44 = 0u;
          long long v42 = 0u;
          *(void *)&v46[20] = 0x412000003C23D70ALL;
          int32x2_t v47 = 0;
          BOOL v48 = 0;
          v50[0] = 1;
          *(_DWORD *)&v50[2] = 1065353216;
          v50[6] = 1;
          re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v38, v13[35], v13[37]);
          re::DynamicString::operator=((re::DynamicString *)&v40, (re::DynamicString *)&v38);
          if (v38 && (v39 & 1) != 0) {
            (*(void (**)(void))(*(void *)v38 + 40))();
          }
          unint64_t v17 = *(unsigned int *)(v12 + 344) | ((unint64_t)*(unsigned __int8 *)(v12 + 352) << 32);
          uint64_t v38 = *(void *)(v12 + 336);
          unint64_t v39 = v17;
          *(void *)&long long v18 = re::ColorGamut3F::as(&v38, *(unsigned __int8 *)(a6 + 20), 1);
          DWORD2(v18) = v19;
          *(_OWORD *)float32x4_t v46 = v18;
          *(_DWORD *)&v46[16] = *(_DWORD *)(v12 + 28);
          if ((unint64_t)v16 | v14)
          {
            if (v14)
            {
              int32x2_t v47 = vrev64_s32(*(int32x2_t *)(v14 + 28));
              if (v48 || *(unsigned char *)(v14 + 36))
              {
                if (!v48 || *(unsigned char *)(v14 + 36))
                {
                  if (!v48) {
                    BOOL v48 = *(unsigned char *)(v14 + 36) != 0;
                  }
                  char v49 = *(unsigned char *)(v14 + 37);
                }
                else
                {
                  BOOL v48 = 0;
                }
              }
              *(void *)&v46[20] = *(void *)(v14 + 40);
              v50[0] = *(unsigned char *)(v14 + 38);
              *(_DWORD *)&v50[2] = *(_DWORD *)(v14 + 48);
              v50[6] = *(unsigned char *)(v14 + 52);
            }
            else
            {
              int32x2_t v24 = (int32x2_t)0x40A000003F800000;
              if (v16) {
                int32x2_t v24 = *(int32x2_t *)((char *)v16 + 28);
              }
              int32x2_t v47 = vrev64_s32(v24);
            }
          }
          else
          {
            int32x2_t v47 = 0;
          }
          long long v26 = re::DynamicString::operator=((re::DynamicString *)(v12 + 192), (re::DynamicString *)&v40);
          long long v27 = v45;
          *(_OWORD *)(v12 + 256) = v44;
          *(_OWORD *)(v12 + 272) = v27;
          *(_OWORD *)(v12 + 288) = *(_OWORD *)v46;
          *(_OWORD *)((char *)v26 + 108) = *(_OWORD *)&v46[12];
          long long v28 = v43;
          *(_OWORD *)(v12 + 224) = v42;
          *(_OWORD *)(v12 + 240) = v28;
          *(int32x2_t *)((char *)v26 + 124) = v47;
          if (*(unsigned char *)(v12 + 324) || v48)
          {
            if (!*(unsigned char *)(v12 + 324) || v48)
            {
              if (!*(unsigned char *)(v12 + 324) && v48) {
                *(unsigned char *)(v12 + 324) = 1;
              }
              *(unsigned char *)(v12 + 325) = v49;
            }
            else
            {
              *(unsigned char *)(v12 + 324) = 0;
            }
          }
          *(_DWORD *)(v12 + 326) = *(_DWORD *)v50;
          *(_DWORD *)(v12 + 329) = *(_DWORD *)&v50[3];
        }
        else
        {
          long long v40 = 0u;
          long long v41 = 0u;
          re::DynamicString::setCapacity(&v40, 0);
          long long v45 = 0u;
          memset(v46, 0, 20);
          long long v43 = 0u;
          long long v44 = 0u;
          long long v42 = 0u;
          *(void *)&v46[20] = 0x412000003C23D70ALL;
          int32x2_t v47 = 0;
          BOOL v48 = 0;
          *(_DWORD *)uint64_t v50 = 16842752;
          *(_DWORD *)&v50[6] = 1065353216;
          re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v38, v13[35], v13[37]);
          re::DynamicString::operator=((re::DynamicString *)&v40, (re::DynamicString *)&v38);
          if (v38 && (v39 & 1) != 0) {
            (*(void (**)(void))(*(void *)v38 + 40))();
          }
          unint64_t v21 = *(unsigned int *)(v12 + 344) | ((unint64_t)*(unsigned __int8 *)(v12 + 352) << 32);
          uint64_t v38 = *(void *)(v12 + 336);
          unint64_t v39 = v21;
          *(void *)&long long v22 = re::ColorGamut3F::as(&v38, *(unsigned __int8 *)(a6 + 20), 1);
          DWORD2(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v23;
          *(_OWORD *)float32x4_t v46 = v22;
          *(_DWORD *)&v46[16] = *(_DWORD *)(v12 + 28);
          v50[0] = ((unint64_t)v16 | v14) != 0;
          if ((unint64_t)v16 | v14)
          {
            if (v14)
            {
              int32x2_t v47 = vrev64_s32(*(int32x2_t *)(v14 + 28));
              if (v48 || *(unsigned char *)(v14 + 36))
              {
                if (!v48 || *(unsigned char *)(v14 + 36))
                {
                  if (!v48) {
                    BOOL v48 = *(unsigned char *)(v14 + 36) != 0;
                  }
                  char v49 = *(unsigned char *)(v14 + 37);
                }
                else
                {
                  BOOL v48 = 0;
                }
              }
              *(void *)&v46[20] = *(void *)(v14 + 40);
              v50[2] = *(unsigned char *)(v14 + 38);
              *(_DWORD *)&v50[6] = *(_DWORD *)(v14 + 48);
              v50[3] = *(unsigned char *)(v14 + 52);
            }
            else
            {
              int32x2_t v25 = (int32x2_t)0x40A000003F800000;
              if (v16) {
                int32x2_t v25 = *(int32x2_t *)((char *)v16 + 28);
              }
              int32x2_t v47 = vrev64_s32(v25);
            }
            if (*(unsigned char *)(a6 + 16)) {
              v50[0] = *(unsigned char *)(a6 + 17);
            }
          }
          else
          {
            int32x2_t v47 = 0;
          }
          re::DynamicString::operator=((re::DynamicString *)(v12 + 48), (re::DynamicString *)&v40);
          long long v29 = *(_OWORD *)&v46[12];
          long long v30 = v45;
          *(_OWORD *)(v12 + 112) = v44;
          *(_OWORD *)(v12 + 128) = v30;
          *(_OWORD *)(v12 + 144) = *(_OWORD *)v46;
          *(_OWORD *)(v12 + 156) = v29;
          long long v31 = v43;
          *(_OWORD *)(v12 + 80) = v42;
          *(_OWORD *)(v12 + 96) = v31;
          *(int32x2_t *)(v12 + 172) = v47;
          if (*(unsigned char *)(v12 + 180) || v48)
          {
            if (!*(unsigned char *)(v12 + 180) || v48)
            {
              if (!*(unsigned char *)(v12 + 180) && v48) {
                *(unsigned char *)(v12 + 180) = 1;
              }
              *(unsigned char *)(v12 + 181) = v49;
            }
            else
            {
              *(unsigned char *)(v12 + 180) = 0;
            }
          }
          *(void *)(v12 + 182) = *(void *)v50;
          *(_WORD *)(v12 + 190) = *(_WORD *)&v50[8];
        }
        if (void)v40 && (BYTE8(v40)) {
          (*(void (**)(void))(*(void *)v40 + 40))();
        }
        unsigned int v20 = 3;
      }
      else
      {
        unsigned int v20 = 1;
      }
      unint64_t v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v37);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::setComponentState(a3, a4, v32, v20);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v37);
    }
    while ((void)v37 != a5 || WORD4(v37) != 0xFFFF || WORD5(v37) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::DirectionalLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v99 = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 136) + 24))(*(void *)(*(void *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  uint64_t v97 = *(void *)buf;
  uint64_t v98 = *(void *)&buf[8];
  BOOL v9 = *(void *)buf == a5 && *(unsigned __int16 *)&buf[8] == 0xFFFFLL;
  if (!v9 || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    float32x4_t v95 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v97);
      uint64_t v12 = *(void *)v11;
      long long v13 = *(re::ecs2::TransformComponent ***)(*(void *)v11 + 16);
      uint64_t v14 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v13, (uint64_t)&v99);
      if (v14)
      {
        uint64_t v15 = v14;
        if (*(unsigned char *)(v12 + 32))
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v13, (const re::ecs2::Entity *)1, buf);
          uint64_t v17 = 0;
          float32x4_t v18 = v101;
          *(_OWORD *)(v12 + 224) = *(_OWORD *)buf;
          *(float32x4_t *)(v12 + 240) = v18;
          v21.i64[1] = v102.i64[1];
          float32x4_t v22 = v103;
          *(float32x4_t *)(v12 + 256) = v102;
          *(float32x4_t *)(v12 + 272) = v22;
          v21.i64[0] = *(void *)(v12 + 224);
          LODWORD(v19) = *(_DWORD *)(v12 + 232);
          v22.i64[0] = *(void *)(v12 + 240);
          v23.i64[0] = *(void *)(v12 + 256);
          int32x4_t v20 = vzip1q_s32((int32x4_t)v21, (int32x4_t)v23);
          v21.i32[2] = v19;
          DWORD1(v19) = *(_DWORD *)(v12 + 248);
          DWORD2(v19) = *(_DWORD *)(v12 + 264);
          int32x4_t v104 = vzip1q_s32(v20, (int32x4_t)v22);
          int32x4_t v105 = vzip2q_s32(v20, vdupq_lane_s32(*(int32x2_t *)v22.f32, 1));
          long long v106 = v19;
          v22.i32[2] = DWORD1(v19);
          v23.i32[2] = DWORD2(v19);
          do
          {
            *(float32x4_t *)&buf[v17] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)((char *)&v104 + v17))), v22, *(float32x2_t *)&v104.i8[v17], 1), v23, *(float32x4_t *)((char *)&v104 + v17), 2);
            v17 += 16;
          }
          while (v17 != 48);
          v24.i32[3] = v102.i32[3];
          float32x4_t v25 = (float32x4_t)vcgeq_f32(v95, vabdq_f32((float32x4_t)xmmword_23435FD80, v102));
          float32x4_t v26 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v95, vabdq_f32((float32x4_t)xmmword_23435FD60, v101)), (int8x16_t)vcgeq_f32(v95, vabdq_f32((float32x4_t)xmmword_23435FD50, *(float32x4_t *)buf))), (int8x16_t)v25);
          v26.i32[3] = v26.i32[2];
          if ((vminvq_u32((uint32x4_t)v26) & 0x80000000) == 0)
          {
            if ((atomic_exchange((atomic_uchar *volatile)&_MergedGlobals_220, 1u) & 1) == 0)
            {
              long long v27 = *re::ecsComponentsLogObjects((re *)v16);
              BOOL v16 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
              if (v16)
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_233120000, v27, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
              }
            }
            v26.i64[0] = *(void *)(v12 + 224);
            v24.i64[0] = *(void *)(v12 + 240);
            v25.i64[0] = *(void *)(v12 + 256);
            v26.i32[2] = *(_DWORD *)(v12 + 232);
            v24.i32[2] = *(_DWORD *)(v12 + 248);
            v25.i32[2] = *(_DWORD *)(v12 + 264);
            int32x4_t v28 = (int32x4_t)vmulq_f32(v26, v26);
            v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2), vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1))).u32[0];
            float32x2_t v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
            float32x2_t v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)));
            float32x4_t v31 = vmulq_n_f32(v26, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
            float32x4_t v32 = vmulq_f32(v24, v31);
            float32x4_t v33 = vmulq_f32(v31, v31);
            v33.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0];
            float32x4_t v34 = vsubq_f32(v24, vmulq_n_f32(v31, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]/ v33.f32[0]));
            int32x4_t v35 = (int32x4_t)vmulq_f32(v34, v34);
            v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
            float32x2_t v36 = vrsqrte_f32((float32x2_t)v35.u32[0]);
            float32x2_t v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v36, v36)));
            float32x4_t v38 = vmulq_n_f32(v34, vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37))).f32[0]);
            float32x4_t v39 = vmulq_f32(v25, v31);
            float32x4_t v40 = vmulq_n_f32(v31, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]/ v33.f32[0]);
            float32x4_t v41 = vmulq_f32(v25, v38);
            float32x4_t v42 = vsubq_f32(v25, v40);
            v40.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
            float32x4_t v43 = vmulq_f32(v38, v38);
            float32x4_t v44 = vsubq_f32(v42, vmulq_n_f32(v38, v40.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]));
            int32x4_t v45 = (int32x4_t)vmulq_f32(v44, v44);
            v45.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1))).u32[0];
            *(float32x2_t *)v43.f32 = vrsqrte_f32((float32x2_t)v45.u32[0]);
            *(float32x2_t *)v43.f32 = vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)));
            *(void *)(v12 + 224) = v31.i64[0];
            *(_DWORD *)(v12 + 232) = v31.i32[2];
            *(void *)(v12 + 240) = v38.i64[0];
            *(_DWORD *)(v12 + 248) = v38.i32[2];
            float32x4_t v46 = vmulq_n_f32(v44, vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32))).f32[0]);
            *(void *)(v12 + 256) = v46.i64[0];
            *(_DWORD *)(v12 + 264) = v46.i32[2];
          }
          unint64_t v47 = *(void *)(v15 + 96);
          unint64_t v48 = *(void *)(v15 + 104);
          if (v48 >= v47)
          {
            unint64_t v49 = v48 + 1;
            if (v47 < v49)
            {
              if (*(void *)(v15 + 88))
              {
                uint64_t v50 = 2 * v47;
                BOOL v9 = v47 == 0;
                unint64_t v51 = 8;
                if (!v9) {
                  unint64_t v51 = v50;
                }
                if (v51 <= v49) {
                  unint64_t v52 = v49;
                }
                else {
                  unint64_t v52 = v51;
                }
                re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity((void *)(v15 + 88), v52);
              }
              else
              {
                re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity((void *)(v15 + 88), v49);
                ++*(_DWORD *)(v15 + 112);
              }
            }
            unint64_t v48 = *(void *)(v15 + 104);
          }
          uint64_t v84 = *(void *)(v15 + 120);
          BOOL v85 = re::DynamicString::DynamicString((re::DynamicString *)(v84 + 144 * v48), (const re::DynamicString *)(v12 + 192));
          long long v86 = *(_OWORD *)(v12 + 240);
          *((_OWORD *)v85 + 2) = *(_OWORD *)(v12 + 224);
          *((_OWORD *)v85 + 3) = v86;
          long long v87 = *(_OWORD *)(v12 + 256);
          long long v88 = *(_OWORD *)(v12 + 272);
          long long v89 = *(_OWORD *)(v12 + 288);
          *(_OWORD *)((char *)v85 + 108) = *(_OWORD *)(v12 + 300);
          *((_OWORD *)v85 + 5) = v88;
          *((_OWORD *)v85 + 6) = v89;
          *((_OWORD *)v85 + 4) = v87;
          *(void *)((char *)v85 + 124) = *(void *)(v12 + 316);
          int v90 = *(unsigned __int8 *)(v12 + 324);
          *((unsigned char *)v85 + 132) = v90;
          if (v90) {
            *(unsigned char *)(v84 + 144 * v48 + 133) = *(unsigned char *)(v12 + 325);
          }
          uint64_t v91 = v84 + 144 * v48;
          int v92 = *(_DWORD *)(v12 + 326);
          *(_DWORD *)(v91 + 137) = *(_DWORD *)(v12 + 329);
          *(_DWORD *)(v91 + 134) = v92;
          ++*(void *)(v15 + 104);
          ++*(_DWORD *)(v15 + 112);
        }
        else
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v13, (const re::ecs2::Entity *)1, buf);
          uint64_t v54 = 0;
          float32x4_t v55 = v101;
          *(_OWORD *)(v12 + 80) = *(_OWORD *)buf;
          *(float32x4_t *)(v12 + 96) = v55;
          v58.i64[1] = v102.i64[1];
          float32x4_t v59 = v103;
          *(float32x4_t *)(v12 + 112) = v102;
          *(float32x4_t *)(v12 + 128) = v59;
          v58.i64[0] = *(void *)(v12 + 80);
          LODWORD(v56) = *(_DWORD *)(v12 + 88);
          v59.i64[0] = *(void *)(v12 + 96);
          v60.i64[0] = *(void *)(v12 + 112);
          int32x4_t v57 = vzip1q_s32((int32x4_t)v58, (int32x4_t)v60);
          v58.i32[2] = v56;
          DWORD1(v56) = *(_DWORD *)(v12 + 104);
          DWORD2(v56) = *(_DWORD *)(v12 + 120);
          int32x4_t v104 = vzip1q_s32(v57, (int32x4_t)v59);
          int32x4_t v105 = vzip2q_s32(v57, vdupq_lane_s32(*(int32x2_t *)v59.f32, 1));
          long long v106 = v56;
          v59.i32[2] = DWORD1(v56);
          v60.i32[2] = DWORD2(v56);
          do
          {
            *(float32x4_t *)&buf[v54] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58, COERCE_FLOAT(*(_OWORD *)((char *)&v104 + v54))), v59, *(float32x2_t *)&v104.i8[v54], 1), v60, *(float32x4_t *)((char *)&v104 + v54), 2);
            v54 += 16;
          }
          while (v54 != 48);
          v61.i32[3] = v102.i32[3];
          float32x4_t v62 = (float32x4_t)vcgeq_f32(v95, vabdq_f32((float32x4_t)xmmword_23435FD80, v102));
          float32x4_t v63 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v95, vabdq_f32((float32x4_t)xmmword_23435FD60, v101)), (int8x16_t)vcgeq_f32(v95, vabdq_f32((float32x4_t)xmmword_23435FD50, *(float32x4_t *)buf))), (int8x16_t)v62);
          v63.i32[3] = v63.i32[2];
          if ((vminvq_u32((uint32x4_t)v63) & 0x80000000) == 0)
          {
            if ((atomic_exchange(byte_26AF86E49, 1u) & 1) == 0)
            {
              long long v64 = *re::ecsComponentsLogObjects(v53);
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_233120000, v64, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
              }
            }
            v63.i64[0] = *(void *)(v12 + 80);
            v61.i64[0] = *(void *)(v12 + 96);
            v62.i64[0] = *(void *)(v12 + 112);
            v63.i32[2] = *(_DWORD *)(v12 + 88);
            v61.i32[2] = *(_DWORD *)(v12 + 104);
            v62.i32[2] = *(_DWORD *)(v12 + 120);
            int32x4_t v65 = (int32x4_t)vmulq_f32(v63, v63);
            v65.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v65, 2), vadd_f32(*(float32x2_t *)v65.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v65.i8, 1))).u32[0];
            float32x2_t v66 = vrsqrte_f32((float32x2_t)v65.u32[0]);
            float32x2_t v67 = vmul_f32(v66, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v66, v66)));
            float32x4_t v68 = vmulq_n_f32(v63, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65.u32[0], vmul_f32(v67, v67))).f32[0]);
            float32x4_t v69 = vmulq_f32(v61, v68);
            float32x4_t v70 = vmulq_f32(v68, v68);
            v70.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).f32[0];
            float32x4_t v71 = vsubq_f32(v61, vmulq_n_f32(v68, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).f32[0]/ v70.f32[0]));
            int32x4_t v72 = (int32x4_t)vmulq_f32(v71, v71);
            v72.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v72, 2), vadd_f32(*(float32x2_t *)v72.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1))).u32[0];
            float32x2_t v73 = vrsqrte_f32((float32x2_t)v72.u32[0]);
            float32x2_t v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v73, v73)));
            float32x4_t v75 = vmulq_n_f32(v71, vmul_f32(v74, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v74, v74))).f32[0]);
            float32x4_t v76 = vmulq_f32(v62, v68);
            float32x4_t v77 = vmulq_n_f32(v68, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0]/ v70.f32[0]);
            float32x4_t v78 = vmulq_f32(v62, v75);
            float32x4_t v79 = vsubq_f32(v62, v77);
            v77.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0];
            float32x4_t v80 = vmulq_f32(v75, v75);
            float32x4_t v81 = vsubq_f32(v79, vmulq_n_f32(v75, v77.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 2), vaddq_f32(v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1))).f32[0]));
            int32x4_t v82 = (int32x4_t)vmulq_f32(v81, v81);
            v82.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v82, 2), vadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v82.i8, 1))).u32[0];
            *(float32x2_t *)v80.f32 = vrsqrte_f32((float32x2_t)v82.u32[0]);
            *(float32x2_t *)v80.f32 = vmul_f32(*(float32x2_t *)v80.f32, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32)));
            *(void *)(v12 + 80) = v68.i64[0];
            *(_DWORD *)(v12 + 88) = v68.i32[2];
            *(void *)(v12 + 96) = v75.i64[0];
            *(_DWORD *)(v12 + 104) = v75.i32[2];
            float32x4_t v83 = vmulq_n_f32(v81, vmul_f32(*(float32x2_t *)v80.f32, vrsqrts_f32((float32x2_t)v82.u32[0], vmul_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32))).f32[0]);
            *(void *)(v12 + 112) = v83.i64[0];
            *(_DWORD *)(v12 + 120) = v83.i32[2];
          }
          re::DynamicArray<re::DirectionalLightInfo>::add((_anonymous_namespace_ *)(v15 + 48), (re::DynamicString *)(v12 + 48));
        }
      }
      unint64_t v93 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v97);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v93, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v97);
    }
    while (v97 != a5 || (unsigned __int16)v98 != 0xFFFF || WORD1(v98) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::dependsOnComponents(uint64_t a1)
{
  uint64_t v1 = a1 + 128;
  if ((*(unsigned char *)(a1 + 120) & 1) == 0) {
    return *(void *)(a1 + 136);
  }
  return v1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    uint64_t v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  BOOL v9 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v40, a5, 0);
  long long v38 = v40[0];
  if (*(void *)&v40[0] != a5 || WORD4(v40[0]) != 0xFFFFLL || (DWORD2(v40[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v38);
      if (*(unsigned char *)re::ecs2::RenderOptions::forEntity(v9, *(void *)(*(void *)v12 + 16)))
      {
        uint64_t v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v38);
        uint64_t v14 = *(void *)v13;
        uint64_t v15 = *(void **)(*(void *)v13 + 16);
        float v16 = *(float *)(*(void *)v13 + 48);
        float v17 = *(float *)(*(void *)v13 + 52);
        float v18 = tanf(*(float *)(*(void *)v13 + 32) * 0.5);
        memset(v40, 0, sizeof(v40));
        re::DynamicString::setCapacity(v40, 0);
        long long v44 = 0u;
        memset(v45, 0, 20);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        *(void *)&v45[20] = 0x412000003C23D70ALL;
        __int16 v52 = 0;
        BOOL v53 = 0;
        long long v49 = 0u;
        memset(v50, 0, sizeof(v50));
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        *(void *)uint64_t v50 = v15[37];
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)v39, v15[35], *(void *)v50);
        re::DynamicString::operator=((re::DynamicString *)v40, (re::DynamicString *)v39);
        if (*(void *)&v39[0] && (BYTE8(v39[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v39[0] + 40))();
        }
        float v20 = v16 / v17;
        unint64_t v21 = *(unsigned int *)(v14 + 312) | ((unint64_t)*(unsigned __int8 *)(v14 + 320) << 32);
        *(void *)&v39[0] = *(void *)(v14 + 304);
        *((void *)&v39[0] + 1) = v21;
        *(void *)&long long v22 = re::ColorGamut3F::as((uint64_t *)v39, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v23;
        *(_OWORD *)int32x4_t v45 = v22;
        *(_DWORD *)&v45[16] = *(_DWORD *)(v14 + 28);
        *(_DWORD *)&v50[8] = *(_DWORD *)(v14 + 40);
        *(float *)&v45[20] = (float)(v17 * 0.5) / v18;
        LOBYTE(v52) = 1;
        float32x4_t v24 = (re::ecs2::EntityComponentCollection *)(v15 + 4);
        uint64_t v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        uint64_t v26 = re::ecs2::EntityComponentCollection::get(v24, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FilterMapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        BOOL v53 = v25 != 0;
        HIBYTE(v52) = v26 != 0;
        if (v25) {
          *(_DWORD *)&v50[24] = *(_DWORD *)(v25 + 28);
        }
        else {
          *(_DWORD *)&v50[24] = 0;
        }
        re::Projection::makePerspectiveFieldOfViewReverseDepth(*(float *)(v14 + 32), v20, *(float *)&v45[20], *(float *)&v45[20] + *(float *)(v14 + 40), v39);
        long long v46 = v39[0];
        long long v47 = v39[1];
        long long v48 = v39[2];
        long long v49 = v39[3];
        int32x4_t v28 = re::DynamicString::operator=((re::DynamicString *)(v14 + 64), (re::DynamicString *)v40);
        long long v29 = v42;
        *(_OWORD *)(v14 + 96) = v41;
        *(_OWORD *)(v14 + 112) = v29;
        *(_OWORD *)(v14 + 172) = *(_OWORD *)&v45[12];
        long long v30 = *(_OWORD *)v45;
        long long v31 = v43;
        *(_OWORD *)(v14 + 144) = v44;
        *(_OWORD *)(v14 + 160) = v30;
        *(_OWORD *)(v14 + 128) = v31;
        *(_OWORD *)((char *)v28 + 204) = *(_OWORD *)&v50[12];
        long long v32 = *(_OWORD *)v50;
        long long v33 = v48;
        *(_OWORD *)(v14 + 240) = v49;
        *(_OWORD *)(v14 + 256) = v32;
        long long v34 = v46;
        *(_OWORD *)(v14 + 208) = v47;
        *(_OWORD *)(v14 + 224) = v33;
        *(_OWORD *)(v14 + 192) = v34;
        if (*(unsigned char *)(v14 + 284) || v50[28])
        {
          if (!*(unsigned char *)(v14 + 284) || v50[28])
          {
            if (!*(unsigned char *)(v14 + 284) && v50[28]) {
              *(unsigned char *)(v14 + 284) = 1;
            }
            *(unsigned char *)(v14 + 285) = v51;
          }
          else
          {
            *(unsigned char *)(v14 + 284) = 0;
          }
        }
        *(_WORD *)(v14 + 286) = v52;
        *(unsigned char *)(v14 + 288) = v53;
        if (*(void *)&v40[0] && (BYTE8(v40[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v40[0] + 40))();
        }
        unsigned int v27 = 3;
      }
      else
      {
        unsigned int v27 = 1;
      }
      unint64_t v35 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::setComponentState(a3, a4, v35, v27);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v38);
    }
    while ((void)v38 != a5 || WORD4(v38) != 0xFFFF || WORD5(v38) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::FrustumLightComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 136) + 24))(*(void *)(*(void *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  uint64_t v55 = *(void *)buf;
  uint64_t v56 = *(void *)&buf[8];
  if (*(void *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    float32x4_t v54 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v55);
      uint64_t v13 = *(void *)v12;
      unint64_t v14 = *(re::ecs2::TransformComponent ***)(*(void *)v12 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v14, (const re::ecs2::Entity *)1, v58);
      uint64_t v16 = 0;
      *(void *)&long long v17 = 0;
      DWORD2(v17) = *(_DWORD *)(v13 + 180);
      HIDWORD(v17) = 1.0;
      float32x4_t v18 = (float32x4_t)v58[0];
      float32x4_t v19 = (float32x4_t)v58[1];
      float32x4_t v20 = (float32x4_t)v58[2];
      float32x4_t v21 = (float32x4_t)v58[3];
      int32x4_t v59 = (int32x4_t)xmmword_23435FD50;
      int32x4_t v60 = (int32x4_t)xmmword_23435FD60;
      int32x4_t v61 = (int32x4_t)xmmword_23435FD80;
      long long v62 = v17;
      do
      {
        *(float32x4_t *)&buf[v16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_OWORD *)((char *)&v59 + v16))), v19, *(float32x2_t *)&v59.i8[v16], 1), v20, *(float32x4_t *)((char *)&v59 + v16), 2), v21, *(float32x4_t *)((char *)&v59 + v16), 3);
        v16 += 16;
      }
      while (v16 != 64);
      uint64_t v22 = 0;
      float32x4_t v23 = *(float32x4_t *)buf;
      float32x4_t v24 = v64;
      float32x4_t v25 = v65;
      long long v26 = v66;
      *(_OWORD *)(v13 + 96) = *(_OWORD *)buf;
      *(float32x4_t *)(v13 + 112) = v24;
      *(float32x4_t *)(v13 + 128) = v25;
      *(_OWORD *)(v13 + 144) = v26;
      int32x4_t v27 = vzip1q_s32((int32x4_t)v23, (int32x4_t)v25);
      int32x4_t v59 = vzip1q_s32(v27, (int32x4_t)v24);
      int32x4_t v60 = vzip2q_s32(v27, vdupq_lane_s32(*(int32x2_t *)v24.f32, 1));
      int32x4_t v61 = vzip1q_s32(vzip2q_s32((int32x4_t)v23, (int32x4_t)v25), vdupq_laneq_s32((int32x4_t)v24, 2));
      do
      {
        *(float32x4_t *)&buf[v22] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(_OWORD *)((char *)&v59 + v22))), v24, *(float32x2_t *)&v59.i8[v22], 1), v25, *(float32x4_t *)((char *)&v59 + v22), 2);
        v22 += 16;
      }
      while (v22 != 48);
      v28.i32[3] = v65.i32[3];
      float32x4_t v29 = (float32x4_t)vcgeq_f32(v54, vabdq_f32((float32x4_t)xmmword_23435FD80, v65));
      float32x4_t v30 = (float32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v54, vabdq_f32((float32x4_t)xmmword_23435FD60, v64)), (int8x16_t)vcgeq_f32(v54, vabdq_f32((float32x4_t)xmmword_23435FD50, *(float32x4_t *)buf))), (int8x16_t)v29);
      v30.i32[3] = v30.i32[2];
      if ((vminvq_u32((uint32x4_t)v30) & 0x80000000) == 0)
      {
        if ((atomic_exchange(re::ecs2::FrustumLightComponentStateImpl::processUpdatingComponent(re::ecs2::FrustumLightComponent *,void *,re::ecs2::WorldRootProvider const&)::__FILE____LINE___logged, 1u) & 1) == 0)
        {
          long long v31 = *re::ecsComponentsLogObjects(v15);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233120000, v31, OS_LOG_TYPE_DEFAULT, "Light transform is not orthogonal, forced to orthogonalize it.", buf, 2u);
          }
        }
        v30.i64[0] = *(void *)(v13 + 96);
        v28.i64[0] = *(void *)(v13 + 112);
        v29.i64[0] = *(void *)(v13 + 128);
        v30.i32[2] = *(_DWORD *)(v13 + 104);
        v28.i32[2] = *(_DWORD *)(v13 + 120);
        v29.i32[2] = *(_DWORD *)(v13 + 136);
        int32x4_t v32 = (int32x4_t)vmulq_f32(v30, v30);
        v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
        float32x2_t v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
        float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
        float32x4_t v35 = vmulq_n_f32(v30, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
        float32x4_t v36 = vmulq_f32(v28, v35);
        float32x4_t v37 = vmulq_f32(v35, v35);
        v37.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0];
        float32x4_t v38 = vsubq_f32(v28, vmulq_n_f32(v35, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]/ v37.f32[0]));
        int32x4_t v39 = (int32x4_t)vmulq_f32(v38, v38);
        v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
        float32x2_t v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
        float32x2_t v41 = vmul_f32(v40, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)));
        float32x4_t v42 = vmulq_n_f32(v38, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]);
        float32x4_t v43 = vmulq_f32(v29, v35);
        float32x4_t v44 = vmulq_n_f32(v35, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0]/ v37.f32[0]);
        float32x4_t v45 = vmulq_f32(v29, v42);
        float32x4_t v46 = vsubq_f32(v29, v44);
        v44.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0];
        float32x4_t v47 = vmulq_f32(v42, v42);
        float32x4_t v48 = vsubq_f32(v46, vmulq_n_f32(v42, v44.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0]));
        int32x4_t v49 = (int32x4_t)vmulq_f32(v48, v48);
        v49.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v49, 2), vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1))).u32[0];
        *(float32x2_t *)v47.f32 = vrsqrte_f32((float32x2_t)v49.u32[0]);
        *(float32x2_t *)v47.f32 = vmul_f32(*(float32x2_t *)v47.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32)));
        *(void *)(v13 + 96) = v35.i64[0];
        *(_DWORD *)(v13 + 104) = v35.i32[2];
        *(void *)(v13 + 112) = v42.i64[0];
        *(_DWORD *)(v13 + 120) = v42.i32[2];
        float32x4_t v50 = vmulq_n_f32(v48, vmul_f32(*(float32x2_t *)v47.f32, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(*(float32x2_t *)v47.f32, *(float32x2_t *)v47.f32))).f32[0]);
        *(void *)(v13 + 128) = v50.i64[0];
        *(_DWORD *)(v13 + 136) = v50.i32[2];
      }
      uint64_t v51 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v14, (uint64_t)&v57);
      if (v51) {
        re::DynamicArray<re::SpotLightInfo>::add(v51 + 128, (re::DynamicString *)(v13 + 64));
      }
      unint64_t v52 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v55);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v52, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v55);
    }
    while (v55 != a5 || (unsigned __int16)v56 != 0xFFFF || WORD1(v56) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addNew(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 16);
  if (!*(void *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_15;
  }
  unint64_t v7 = v6 % *(unsigned int *)(a1 + 24);
  uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v7);
  if (v8 == 0x7FFFFFFF)
  {
LABEL_15:
    unsigned int v20 = re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(a1, v7, v6, (long long *)a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 16) + 280 * v20;
    return v19 + 32;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = v9 + 280 * v8;
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v13 != *(void *)a2 || v12 != v10)
  {
    do
    {
      LODWORD(v8) = *(_DWORD *)(v9 + 280 * v8) & 0x7FFFFFFF;
      if (v8 == 0x7FFFFFFF) {
        goto LABEL_15;
      }
      uint64_t v15 = v9 + 280 * v8;
      uint64_t v17 = *(void *)(v15 + 8);
      uint64_t v16 = *(void *)(v15 + 16);
    }
    while (v17 != *(void *)a2 || v16 != v10);
  }
  uint64_t v19 = v9 + 280 * v8;
  return v19 + 32;
}

void re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 280 * v10, 16);
  if (v12)
  {
    unint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void *re::DynamicInlineArray<re::KeyValuePair<re::LightGroupInWorldRoot,re::LightInfoArrays>,16ul>::clear(void *result)
{
  uint64_t v1 = result;
  if (*result)
  {
    unint64_t v2 = 0;
    uint64_t v3 = 272 * *result;
    do
    {
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v1[v2 / 8 + 31]);
      re::DynamicArray<re::PointLightInfo>::deinit((uint64_t)&v1[v2 / 8 + 26]);
      re::DynamicArray<re::SpotLightInfo>::deinit((uint64_t)&v1[v2 / 8 + 21]);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v1[v2 / 8 + 16]);
      re::DynamicArray<re::RectAreaLightInfo>::deinit((uint64_t)&v1[v2 / 8 + 11]);
      uint64_t result = (void *)re::DynamicArray<unsigned long>::deinit((uint64_t)&v1[v2 / 8 + 6]);
      v2 += 272;
    }
    while (v3 != v2);
  }
  void *v1 = 0;
  ++*((_DWORD *)v1 + 2);
  return result;
}

uint64_t re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v9 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(void *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::init((uint64_t)v30, v14, v13);
          long long v16 = *(_OWORD *)v30;
          *(_OWORD *)float32x4_t v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v30[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v30[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 32;
            do
            {
              if ((*(_DWORD *)(v22 - 32) & 0x80000000) != 0) {
                re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::addAsMove(a1, *(void *)(v22 - 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 8), v22 - 24, v22);
              }
              v22 += 280;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 280 * v9);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 280 * v9);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  uint64_t v26 = 280 * v9;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v26) = *(_DWORD *)(*(void *)(a1 + 16) + v26) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  uint64_t v27 = *(void *)(a1 + 16) + v26;
  long long v28 = *a4;
  *(void *)(v27 + 24) = *((void *)a4 + 2);
  *(_OWORD *)(v27 + 8) = v28;
  re::LightInfoArrays::LightInfoArrays(*(void *)(a1 + 16) + v26 + 32, a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

double re::HashTable<re::LightGroupInWorldRoot,re::LightInfoArrays,re::Hash<re::LightGroupInWorldRoot>,re::EqualTo<re::LightGroupInWorldRoot>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2];
        int v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          uint64_t v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          uint64_t v9 = v6 + v4 + 40;
          re::DynamicArray<re::RectAreaLightInfo>::deinit(v6 + v4 + 240);
          re::DynamicArray<re::PointLightInfo>::deinit(v8 + 200);
          re::DynamicArray<re::SpotLightInfo>::deinit(v8 + 160);
          re::DynamicArray<re::RectAreaLightInfo>::deinit(v8 + 120);
          re::DynamicArray<re::RectAreaLightInfo>::deinit(v8 + 80);
          re::DynamicArray<unsigned long>::deinit(v9);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 280;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::LightInfoArrays::LightInfoArrays(uint64_t result, uint64_t a2)
{
  *(_WORD *)double result = *(_WORD *)a2;
  *(void *)(result + 40) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)(result + 24);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v3;
  uint64_t v4 = *(void *)(result + 40);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v4;
  ++*(_DWORD *)(a2 + 32);
  ++*(_DWORD *)(result + 32);
  *(void *)(result + 80) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 72) = 0;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v5;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v6 = *(void *)(result + 64);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v6;
  uint64_t v7 = *(void *)(result + 80);
  *(void *)(result + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v7;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(result + 72);
  *(void *)(result + 120) = 0;
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 88) = 0;
  *(_DWORD *)(result + 112) = 0;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(result + 88) = *(void *)(a2 + 88);
  *(void *)(result + 96) = v8;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v9 = *(void *)(result + 104);
  *(void *)(result + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v9;
  uint64_t v10 = *(void *)(result + 120);
  *(void *)(result + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = v10;
  ++*(_DWORD *)(a2 + 112);
  ++*(_DWORD *)(result + 112);
  *(void *)(result + 160) = 0;
  *(void *)(result + 136) = 0;
  *(void *)(result + 144) = 0;
  *(void *)(result + 128) = 0;
  *(_DWORD *)(result + 152) = 0;
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(result + 128) = *(void *)(a2 + 128);
  *(void *)(result + 136) = v11;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v12 = *(void *)(result + 144);
  *(void *)(result + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = v12;
  uint64_t v13 = *(void *)(result + 160);
  *(void *)(result + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = v13;
  ++*(_DWORD *)(a2 + 152);
  ++*(_DWORD *)(result + 152);
  *(void *)(result + 200) = 0;
  *(void *)(result + 176) = 0;
  *(void *)(result + 184) = 0;
  *(void *)(result + 168) = 0;
  *(_DWORD *)(result + 192) = 0;
  uint64_t v14 = *(void *)(a2 + 176);
  *(void *)(result + 168) = *(void *)(a2 + 168);
  *(void *)(result + 176) = v14;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  uint64_t v15 = *(void *)(result + 184);
  *(void *)(result + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = v15;
  uint64_t v16 = *(void *)(result + 200);
  *(void *)(result + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = v16;
  ++*(_DWORD *)(a2 + 192);
  ++*(_DWORD *)(result + 192);
  *(void *)(result + 240) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 208) = 0;
  *(_DWORD *)(result + 232) = 0;
  uint64_t v17 = *(void *)(a2 + 216);
  *(void *)(result + 208) = *(void *)(a2 + 208);
  *(void *)(result + 216) = v17;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  uint64_t v18 = *(void *)(result + 224);
  *(void *)(result + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = v18;
  uint64_t v19 = *(void *)(result + 240);
  *(void *)(result + 240) = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = v19;
  ++*(_DWORD *)(a2 + 232);
  ++*(_DWORD *)(result + 232);
  return result;
}

uint64_t re::DynamicArray<re::RectAreaLightInfo>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 144 * v4;
        do
        {
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 144);
          v5 -= 144;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PointLightInfo>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 224 * v4;
        do
        {
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 224);
          v5 -= 224;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::SpotLightInfo>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = 240 * v4;
        do
        {
          re::DynamicString::deinit(v3);
          uint64_t v3 = (re::DynamicString *)((char *)v3 + 240);
          v5 -= 240;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(re::DynamicString **)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, re::DynamicString *))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, uint64_t *a2, _WORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  unint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v17 = *(void *)(a1 + 16);
      if (*(void *)(v17 + 24 * v10 + 8) == v6) {
        return;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v17 + 24 * v10) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v17 + 24 * v10 + 8) == v6) {
          return;
        }
      }
    }
  }
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  if (v11 == 0x7FFFFFFF)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 32);
    int v12 = v11;
    if (v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      int v12 = *(_DWORD *)(a1 + 32);
      uint64_t v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 24 * v11);
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 16);
    int v14 = *(_DWORD *)(v13 + 24 * v11);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  uint64_t v15 = 24 * v11;
  *(_DWORD *)(v13 + v15) = v14 | 0x80000000;
  uint64_t v16 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v15) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v11) & 0x80000000 | *(_DWORD *)(v16 + 4 * v9);
  *(void *)(*(void *)(a1 + 16) + 24 * v11 + 8) = v6;
  *(_WORD *)(*(void *)(a1 + 16) + 24 * v11 + 16) = *a3;
  *(_DWORD *)(v16 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

uint64_t re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::add(uint64_t result, uint64_t *a2, _WORD *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(void *)result)
  {
    unint64_t v9 = v8 % *(unsigned int *)(result + 24);
    uint64_t v10 = *(unsigned int *)(*(void *)(result + 8) + 4 * v9);
    if (v10 != 0x7FFFFFFF)
    {
      uint64_t v11 = *(void *)(result + 16);
      if (*(void *)(v11 + 24 * v10 + 8) == v6) {
        return result;
      }
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 24 * v10) & 0x7FFFFFFF;
        if (v10 == 0x7FFFFFFF) {
          break;
        }
        if (*(void *)(v11 + 24 * v10 + 8) == v6) {
          return result;
        }
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t result = re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(void *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v16, v4, a2);
      long long v5 = *(_OWORD *)v16;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v16[16];
      uint64_t v7 = *(void *)(a1 + 16);
      *(void *)&v16[16] = v7;
      *(void *)(a1 + 16) = v6;
      long long v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = (void *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0)
          {
            unint64_t v13 = 0xBF58476D1CE4E5B9 * (*v12 ^ (*v12 >> 30));
            unint64_t v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, v12, v12 + 1);
          }
          ++v11;
          v12 += 3;
        }
        while (v11 < v10);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2) {
      signed int v15 = a2;
    }
    else {
      signed int v15 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, _WORD *a5)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  if (v8 == 0x7FFFFFFF)
  {
    uint64_t v8 = *(unsigned int *)(a1 + 32);
    int v9 = v8;
    if (v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned short,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  uint64_t v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  uint64_t v14 = *(void *)(a1 + 8);
  *(_DWORD *)(*(void *)(a1 + 16) + v13) = *(_DWORD *)(*(void *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_WORD *)(*(void *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

unint64_t re::DynamicInlineArray<re::KeyValuePair<unsigned long long,unsigned short>,16ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  if (result > 0xF)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC058;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC058;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC0B0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC0B0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LightSystem,REEventHandlerResult (re::ecs2::LightSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    uint64_t v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v29, a5, 0);
  long long v26 = v29[0];
  if (*(void *)&v29[0] != a5 || WORD4(v29[0]) != 0xFFFFLL || (DWORD2(v29[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
      if (*(unsigned char *)re::ecs2::RenderOptions::forEntity(v10, *(void *)(*(void *)v13 + 16)))
      {
        uint64_t v14 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
        uint64_t v15 = *(void *)v14;
        uint64_t v16 = *(void *)(*(void *)v14 + 16);
        memset(v29, 0, sizeof(v29));
        re::DynamicString::setCapacity(v29, 0);
        long long v33 = 0u;
        memset(v34, 0, 20);
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
        *(void *)&v34[20] = 0x412000003C23D70ALL;
        uint64_t v35 = 0;
        char v36 = 0;
        re::DynamicString::format((re::DynamicString *)"%s_%llu", (re::DynamicString *)&v27, *(void *)(v16 + 280), *(void *)(v16 + 296));
        re::DynamicString::operator=((re::DynamicString *)v29, (re::DynamicString *)&v27);
        if (v27 && (v28 & 1) != 0) {
          (*(void (**)(void))(*(void *)v27 + 40))();
        }
        unint64_t v17 = *(unsigned int *)(v15 + 200) | ((unint64_t)*(unsigned __int8 *)(v15 + 208) << 32);
        uint64_t v27 = *(void *)(v15 + 192);
        unint64_t v28 = v17;
        *(void *)&long long v18 = re::ColorGamut3F::as(&v27, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v18) = v19;
        *(_OWORD *)float32x2_t v34 = v18;
        *(_DWORD *)&v34[16] = *(_DWORD *)(v15 + 28);
        uint64_t v35 = *(void *)(v15 + 32);
        char v36 = *(unsigned char *)(v15 + 40);
        re::DynamicString::operator=((re::DynamicString *)(v15 + 48), (re::DynamicString *)v29);
        long long v20 = *(_OWORD *)&v34[12];
        long long v21 = v33;
        *(_OWORD *)(v15 + 112) = v32;
        *(_OWORD *)(v15 + 128) = v21;
        *(_OWORD *)(v15 + 144) = *(_OWORD *)v34;
        *(_OWORD *)(v15 + 156) = v20;
        long long v22 = v31;
        *(_OWORD *)(v15 + 80) = v30;
        *(_OWORD *)(v15 + 96) = v22;
        *(void *)(v15 + 176) = v35;
        *(unsigned char *)(v15 + 184) = v36;
        if (*(void *)&v29[0] && (BYTE8(v29[0]) & 1) != 0) {
          (*(void (**)(void))(**(void **)&v29[0] + 40))();
        }
        unsigned int v23 = 3;
      }
      else
      {
        unsigned int v23 = 1;
      }
      unint64_t v24 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v26);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::setComponentState(a3, a4, v24, v23);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
    }
    while ((void)v26 != a5 || WORD4(v26) != 0xFFFF || WORD5(v26) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 136) + 24))(*(void *)(*(void *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v22, a5, 0);
  long long v20 = v22[0];
  if (*(void *)&v22[0] != a5 || WORD4(v22[0]) != 0xFFFFLL || (DWORD2(v22[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v20);
      uint64_t v13 = *(_OWORD **)v12;
      uint64_t v14 = *(re::ecs2::TransformComponent ***)(*(void *)v12 + 16);
      re::ecs2::TransformComponent::worldMatrix4x4F(v14, (const re::ecs2::Entity *)1, v22);
      long long v15 = v22[1];
      v13[5] = v22[0];
      v13[6] = v15;
      long long v16 = v22[3];
      v13[7] = v22[2];
      v13[8] = v16;
      uint64_t v17 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v14, (uint64_t)&v21);
      if (v17) {
        re::DynamicArray<re::RectAreaLightInfo>::add(v17 + 208, (re::DynamicString *)(v13 + 3));
      }
      unint64_t v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v18, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while ((void)v20 != a5 || WORD4(v20) != 0xFFFF || WORD5(v20) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      uint64_t v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    uint64_t v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v10 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v28, a5, 0);
  unint64_t v11 = v28;
  unint64_t v12 = v29;
  unint64_t v28 = a4;
  unint64_t v29 = v11;
  unint64_t v30 = v12;
  uint64_t v13 = (unsigned __int16)v12;
  uint64_t v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    do
    {
      uint64_t v17 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
      if (*(unsigned char *)re::ecs2::RenderOptions::forEntity(v10, *(void *)(*(void *)v17 + 16)))
      {
        uint64_t v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
        uint64_t v19 = *(void *)v18;
        unint64_t v20 = *(unsigned int *)(*(void *)v18 + 72) | ((unint64_t)*(unsigned __int8 *)(*(void *)v18 + 80) << 32);
        v31[0] = *(void *)(*(void *)v18 + 64);
        v31[1] = v20;
        *(void *)&long long v21 = re::ColorGamut3F::as(v31, *(unsigned __int8 *)(a6 + 20), 1);
        DWORD2(v21) = v22;
        int v23 = *(_DWORD *)(v19 + 28);
        *(_OWORD *)(v19 + 32) = v21;
        *(_DWORD *)(v19 + 48) = v23;
        unsigned int v24 = 3;
      }
      else
      {
        unsigned int v24 = 1;
      }
      unint64_t v25 = v28;
      unint64_t v26 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v29);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::setComponentState(a3, v25, v26, v24);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
    }
    while (v29 != a5 || (unsigned __int16)v30 != 0xFFFF || WORD1(v30) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 136) + 24))(*(void *)(*(void *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  unint64_t v10 = v22;
  unint64_t v11 = v23;
  unint64_t v22 = a4;
  unint64_t v23 = v10;
  unint64_t v24 = v11;
  uint64_t v12 = (unsigned __int16)v11;
  uint64_t v13 = v11 & 0xFFFF0000;
  if (v10 != a5 || v12 != 0xFFFF || v13 != 4294901760)
  {
    do
    {
      uint64_t v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, *(void *)(*(void *)v16 + 16), (uint64_t)&v25);
      if (v18) {
        re::DynamicArray<re::AmbientLightInfo>::add(v18 + 8, v17 + 32);
      }
      unint64_t v19 = v22;
      unint64_t v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      uint64_t v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::didDependentComponentChange(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = a3;
  if (re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    DWORD1(v6) = 0x7FFFFFFF;
    uint64_t v4 = re::HashTable<re::ecs2::Scene *,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::add(result + 8, &v7, (uint64_t *)v5);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v5);
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v4, &v8);
  }
  return result;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::processDirtyComponents(uint64_t a1, uint64_t a2, re::ecs2::ComponentBucketsBase **a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(re::ecs2::RenderOptions **)(a6 + 8);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v59, a5, 0);
  long long v52 = v59;
  if ((void)v59 != a5 || WORD4(v59) != 0xFFFFLL || (DWORD2(v59) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      if (*(unsigned char *)re::ecs2::RenderOptions::forEntity(v9, *(void *)(*(void *)v12 + 16)))
      {
        uint64_t v13 = (_anonymous_namespace_ *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
        uint64_t v14 = *(void *)v13;
        uint64_t v15 = *(void *)(*(void *)v13 + 16);
        uint64_t v16 = *(const char **)(v15 + 280);
        unint64_t v17 = *(unsigned int *)(v14 + 856) | ((unint64_t)*(unsigned __int8 *)(v14 + 864) << 32);
        *(void *)&long long v59 = *(void *)(v14 + 848);
        *((void *)&v59 + 1) = v17;
        uint64_t v18 = (_anonymous_namespace_ *)re::ColorGamut3F::as((uint64_t *)&v59, *(unsigned __int8 *)(a6 + 20), 1);
        uint64_t v20 = *(unsigned int *)(v14 + 28);
        LODWORD(v21) = v19;
        *(void *)&long long v22 = v18;
        DWORD2(vre::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v19;
        float v23 = *(float *)(v14 + 32);
        switch((int)v20)
        {
          case 0:
          case 1:
            long long v60 = 0u;
            long long v59 = 0u;
            long long v48 = v22;
            re::DynamicString::setCapacity(&v59, 0);
            long long v64 = 0u;
            memset(v65, 0, 20);
            long long v62 = 0u;
            long long v63 = 0u;
            long long v61 = 0u;
            *(void *)&v65[20] = 0x412000003C23D70ALL;
            *(void *)long long v66 = 0;
            v66[8] = 0;
            *(_DWORD *)&v66[10] = 16842752;
            *(_DWORD *)&v66[16] = 1065353216;
            re::DynamicString::operator=((re::DynamicString *)&v59, (re::DynamicString *)&v57);
            *(_OWORD *)float32x4_t v65 = v48;
            *(float *)&v65[16] = v23;
            float v24 = *(float *)(v14 + 40);
            if (v24 < 0.0) {
              float v24 = 0.0;
            }
            *(float *)long long v66 = v24;
            *(_DWORD *)&v66[4] = *(_DWORD *)(v14 + 60);
            BOOL v26 = v24 != 0.0 && *(_DWORD *)(v14 + 28) == 0;
            v66[10] = v26;
            re::DynamicString::operator=((re::DynamicString *)(v14 + 64), (re::DynamicString *)&v59);
            long long v27 = v64;
            *(_OWORD *)(v14 + 128) = v63;
            *(_OWORD *)(v14 + 144) = v27;
            *(_OWORD *)(v14 + 160) = *(_OWORD *)v65;
            *(_OWORD *)(v14 + 172) = *(_OWORD *)&v65[12];
            long long v28 = v62;
            *(_OWORD *)(v14 + 96) = v61;
            *(_OWORD *)(v14 + 112) = v28;
            *(void *)(v14 + 188) = *(void *)v66;
            if (*(unsigned char *)(v14 + 196) || v66[8])
            {
              if (!*(unsigned char *)(v14 + 196) || v66[8])
              {
                if (!*(unsigned char *)(v14 + 196) && v66[8]) {
                  *(unsigned char *)(v14 + 196) = 1;
                }
                *(unsigned char *)(v14 + 197) = v66[9];
              }
              else
              {
                *(unsigned char *)(v14 + 196) = 0;
              }
            }
            *(void *)(v14 + 198) = *(void *)&v66[10];
            *(_WORD *)(v14 + 206) = *(_WORD *)&v66[18];
            goto LABEL_55;
          case 2:
          case 3:
            long long v60 = 0u;
            long long v59 = 0u;
            long long v49 = v22;
            re::DynamicString::setCapacity(&v59, 0);
            long long v64 = 0u;
            memset(v65, 0, 20);
            long long v62 = 0u;
            long long v63 = 0u;
            long long v61 = 0u;
            *(void *)&v65[20] = 0x412000003C23D70ALL;
            *(_WORD *)&v70[22] = 0;
            *(_OWORD *)&v66[4] = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            memset(v70, 0, 21);
            re::DynamicString::operator=((re::DynamicString *)&v59, (re::DynamicString *)&v57);
            *(_OWORD *)float32x4_t v65 = v49;
            *(float *)&v65[16] = v23;
            re::Projection::makePerspectiveFieldOfViewReverseDepth(1.5708, 1.0, 0.01, *(float *)(v14 + 40), &v53);
            *(_OWORD *)&v66[4] = v53;
            long long v67 = v54;
            long long v68 = v55;
            long long v69 = v56;
            *(void *)float32x4_t v70 = *(void *)(v15 + 296);
            float v30 = *(float *)(v14 + 40);
            if (v30 < 0.0) {
              float v30 = 0.0;
            }
            *(float *)&v70[8] = v30;
            *(_DWORD *)&v70[16] = *(_DWORD *)(v14 + 60);
            v70[22] = 0;
            v70[23] = *(_DWORD *)(v14 + 28) == 2;
            long long v31 = re::DynamicString::operator=((re::DynamicString *)(v14 + 448), (re::DynamicString *)&v59);
            long long v32 = v64;
            *(_OWORD *)(v14 + 512) = v63;
            *(_OWORD *)(v14 + 528) = v32;
            *(_OWORD *)(v14 + 544) = *(_OWORD *)v65;
            *(_OWORD *)((char *)v31 + 108) = *(_OWORD *)&v65[12];
            long long v33 = v62;
            *(_OWORD *)(v14 + 480) = v61;
            *(_OWORD *)(v14 + 496) = v33;
            long long v34 = v69;
            *(_OWORD *)(v14 + 608) = v68;
            *(_OWORD *)(v14 + 624) = v34;
            *(_OWORD *)(v14 + 640) = *(_OWORD *)v70;
            *(_DWORD *)(v14 + 656) = *(_DWORD *)&v70[16];
            long long v35 = v67;
            *(_OWORD *)(v14 + 576) = *(_OWORD *)&v66[4];
            *(_OWORD *)(v14 + 592) = v35;
            if (*(unsigned char *)(v14 + 660) || v70[20])
            {
              if (!*(unsigned char *)(v14 + 660) || v70[20])
              {
                if (!*(unsigned char *)(v14 + 660) && v70[20]) {
                  *(unsigned char *)(v14 + 660) = 1;
                }
                *(unsigned char *)(v14 + 661) = v70[21];
              }
              else
              {
                *(unsigned char *)(v14 + 660) = 0;
              }
            }
            *(_WORD *)(v14 + 662) = *(_WORD *)&v70[22];
            goto LABEL_55;
          case 4:
          case 5:
            long long v60 = 0u;
            long long v59 = 0u;
            long long v50 = v22;
            re::DynamicString::setCapacity(&v59, 0);
            long long v64 = 0u;
            memset(v65, 0, 20);
            long long v62 = 0u;
            long long v63 = 0u;
            long long v61 = 0u;
            *(void *)&v65[20] = 0x412000003C23D70ALL;
            __int16 v72 = 0;
            BOOL v73 = 0;
            *(_OWORD *)&v66[4] = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            memset(v70, 0, sizeof(v70));
            re::DynamicString::operator=((re::DynamicString *)&v59, (re::DynamicString *)&v57);
            *(_OWORD *)float32x4_t v65 = v50;
            *(float *)&v65[16] = v23;
            re::Projection::makePerspectiveFieldOfViewReverseDepth((float)(*(float *)(v14 + 36) * 3.1416) / 180.0, 1.0, 0.01, *(float *)(v14 + 40), &v53);
            *(_OWORD *)&v66[4] = v53;
            long long v67 = v54;
            long long v68 = v55;
            long long v69 = v56;
            *(void *)float32x4_t v70 = *(void *)(v15 + 296);
            float v36 = *(float *)(v14 + 40);
            if (v36 < 0.0) {
              float v36 = 0.0;
            }
            *(float *)&v70[8] = v36;
            *(_DWORD *)&v70[24] = *(_DWORD *)(v14 + 60);
            HIBYTE(v72) = 0;
            BOOL v73 = *(_DWORD *)(v14 + 28) == 4;
            float32x4_t v37 = re::DynamicString::operator=((re::DynamicString *)(v14 + 208), (re::DynamicString *)&v59);
            long long v38 = v64;
            *(_OWORD *)(v14 + 272) = v63;
            *(_OWORD *)(v14 + 288) = v38;
            *(_OWORD *)(v14 + 304) = *(_OWORD *)v65;
            *(_OWORD *)((char *)v37 + 108) = *(_OWORD *)&v65[12];
            long long v39 = v62;
            *(_OWORD *)(v14 + 240) = v61;
            *(_OWORD *)(v14 + 256) = v39;
            long long v40 = v69;
            *(_OWORD *)(v14 + 368) = v68;
            *(_OWORD *)(v14 + 384) = v40;
            *(_OWORD *)(v14 + 400) = *(_OWORD *)v70;
            *(_OWORD *)((char *)v37 + 204) = *(_OWORD *)&v70[12];
            long long v41 = v67;
            *(_OWORD *)(v14 + 336) = *(_OWORD *)&v66[4];
            *(_OWORD *)(v14 + 352) = v41;
            if (*(unsigned char *)(v14 + 428) || v70[28])
            {
              if (!*(unsigned char *)(v14 + 428) || v70[28])
              {
                if (!*(unsigned char *)(v14 + 428) && v70[28]) {
                  *(unsigned char *)(v14 + 428) = 1;
                }
                *(unsigned char *)(v14 + 429) = v71;
              }
              else
              {
                *(unsigned char *)(v14 + 428) = 0;
              }
            }
            *(_WORD *)(v14 + 430) = v72;
            *(unsigned char *)(v14 + 432) = v73;
            goto LABEL_55;
          case 6:
            *(_OWORD *)(v14 + 816) = v22;
            *(float *)(v14 + 832) = v23 * 683.0;
            goto LABEL_58;
          case 7:
            long long v60 = 0u;
            long long v59 = 0u;
            long long v51 = v22;
            re::DynamicString::setCapacity(&v59, 0);
            long long v64 = 0u;
            memset(v65, 0, 20);
            long long v62 = 0u;
            long long v63 = 0u;
            long long v61 = 0u;
            *(void *)&v65[20] = 0x412000003C23D70ALL;
            *(void *)&v66[4] = 0;
            v66[12] = 0;
            re::DynamicString::operator=((re::DynamicString *)&v59, (re::DynamicString *)&v57);
            *(_OWORD *)float32x4_t v65 = v51;
            *(float *)&v65[16] = v23;
            *(void *)&v66[4] = *(void *)(v14 + 48);
            v66[12] = *(unsigned char *)(v14 + 56);
            float32x4_t v42 = re::DynamicString::operator=((re::DynamicString *)(v14 + 672), (re::DynamicString *)&v59);
            long long v43 = v64;
            *(_OWORD *)(v14 + 736) = v63;
            *(_OWORD *)(v14 + 752) = v43;
            *(_OWORD *)(v14 + 768) = *(_OWORD *)v65;
            *(_OWORD *)((char *)v42 + 108) = *(_OWORD *)&v65[12];
            long long v44 = v62;
            *(_OWORD *)(v14 + 704) = v61;
            *(_OWORD *)(v14 + 720) = v44;
            *(void *)(v14 + 800) = *(void *)&v66[4];
            *(unsigned char *)(v14 + 808) = v66[12];
LABEL_55:
            if (void)v59 && (BYTE8(v59)) {
              (*(void (**)(void))(*(void *)v59 + 40))();
            }
LABEL_58:
            if (v57 && (v58 & 1) != 0) {
              (*(void (**)(void))(*(void *)v57 + 40))();
            }
            unsigned int v29 = 3;
            break;
          default:
            re::internal::assertLog((re::internal *)5, v19, v21, *(double *)&v18, "assertion failure: '%s' (%s:line %i) Invalid light type %d.", "!\"Unreachable code\"", "processDirtyComponent", 569, v20);
            _os_crash();
            __break(1u);
            return result;
        }
      }
      else
      {
        unsigned int v29 = 1;
      }
      unint64_t v45 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::setComponentState(a3, a4, v45, v29);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while ((void)v52 != a5 || WORD4(v52) != 0xFFFF || WORD5(v52) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(*(void *)a6 + 136) + 24))(*(void *)(*(void *)a6 + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v31, a5, 0);
  long long v29 = v31;
  if ((void)v31 != a5 || WORD4(v31) != 0xFFFFLL || (DWORD2(v31) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v29);
      uint64_t v13 = *(void *)v12;
      uint64_t v14 = *(re::ecs2::TransformComponent ***)(*(void *)v12 + 16);
      uint64_t v15 = re::ecs2::ComponentStatePayload::lightArraysForEntity(a6, (uint64_t)v14, (uint64_t)&v30);
      if (v15)
      {
        uint64_t v16 = v15;
        re::ecs2::TransformComponent::worldMatrix4x4F(v14, (const re::ecs2::Entity *)1, &v31);
        uint64_t v18 = *(unsigned int *)(v13 + 28);
        switch((int)v18)
        {
          case 0:
          case 1:
            long long v19 = v32;
            *(_OWORD *)(v13 + 96) = v31;
            *(_OWORD *)(v13 + 112) = v19;
            long long v20 = v34;
            *(_OWORD *)(v13 + 128) = v33;
            *(_OWORD *)(v13 + 144) = v20;
            re::DynamicArray<re::DirectionalLightInfo>::add((_anonymous_namespace_ *)(v16 + 48), (re::DynamicString *)(v13 + 64));
            break;
          case 2:
          case 3:
            long long v21 = v32;
            *(_OWORD *)(v13 + 480) = v31;
            *(_OWORD *)(v13 + 496) = v21;
            long long v22 = v34;
            *(_OWORD *)(v13 + 512) = v33;
            *(_OWORD *)(v13 + 528) = v22;
            re::DynamicArray<re::PointLightInfo>::add(v16 + 168, (re::DynamicString *)(v13 + 448));
            break;
          case 4:
          case 5:
            long long v23 = v32;
            *(_OWORD *)(v13 + 240) = v31;
            *(_OWORD *)(v13 + 256) = v23;
            long long v24 = v34;
            *(_OWORD *)(v13 + 272) = v33;
            *(_OWORD *)(v13 + 288) = v24;
            re::DynamicArray<re::SpotLightInfo>::add(v16 + 128, (re::DynamicString *)(v13 + 208));
            break;
          case 6:
            re::DynamicArray<re::AmbientLightInfo>::add(v16 + 8, v13 + 816);
            break;
          case 7:
            long long v25 = v32;
            *(_OWORD *)(v13 + 704) = v31;
            *(_OWORD *)(v13 + 720) = v25;
            long long v26 = v34;
            *(_OWORD *)(v13 + 736) = v33;
            *(_OWORD *)(v13 + 752) = v26;
            re::DynamicArray<re::RectAreaLightInfo>::add(v16 + 208, (re::DynamicString *)(v13 + 672));
            break;
          default:
            re::internal::assertLog((re::internal *)5, v17, "assertion failure: '%s' (%s:line %i) Invalid light type %d.", "!\"Unreachable code\"", "processUpdatingComponent", 470, v18);
            _os_crash();
            __break(1u);
            JUMPOUT(0x23384EF30);
        }
      }
      unint64_t v27 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v29);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), a4, v27, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
    }
    while ((void)v29 != a5 || WORD4(v29) != 0xFFFF || WORD5(v29) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      uint64_t v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

void *re::DynamicArray<re::DirectionalLightInfo>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::DirectionalLightInfo>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DirectionalLightInfo>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::DynamicArray<re::DirectionalLightInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::DirectionalLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 144 * v9;
        unint64_t v11 = v7;
        do
        {
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          long long v16 = *(_OWORD *)(v8 + 64);
          long long v17 = *(_OWORD *)(v8 + 80);
          long long v18 = *(_OWORD *)(v8 + 96);
          *(_OWORD *)((char *)v11 + 108) = *(_OWORD *)(v8 + 108);
          *((_OWORD *)v11 + 5) = v17;
          *((_OWORD *)v11 + 6) = v18;
          *((_OWORD *)v11 + 4) = v16;
          long long v19 = *(_OWORD *)(v8 + 48);
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 3) = v19;
          *(void *)((char *)v11 + 124) = *(void *)(v8 + 124);
          LODWORD(v13) = *(unsigned __int8 *)(v8 + 132);
          *((unsigned char *)v11 + 132) = v13;
          if (v13) {
            *((unsigned char *)v11 + 133) = *(unsigned char *)(v8 + 133);
          }
          uint64_t v20 = *(void *)(v8 + 134);
          *((_WORD *)v11 + 71) = *(_WORD *)(v8 + 142);
          *(void *)((char *)v11 + 134) = v20;
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 144;
          v11 += 18;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::SpotLightInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::SpotLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF0uLL))
        {
          uint64_t v2 = 240 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 240 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 240, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 240 * v9;
        unint64_t v11 = v7;
        do
        {
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          long long v16 = *(_OWORD *)(v8 + 64);
          long long v17 = *(_OWORD *)(v8 + 80);
          long long v18 = *(_OWORD *)(v8 + 96);
          *(_OWORD *)((char *)v11 + 108) = *(_OWORD *)(v8 + 108);
          *((_OWORD *)v11 + 5) = v17;
          *((_OWORD *)v11 + 6) = v18;
          *((_OWORD *)v11 + 4) = v16;
          long long v19 = *(_OWORD *)(v8 + 48);
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 3) = v19;
          long long v21 = *(_OWORD *)(v8 + 176);
          long long v20 = *(_OWORD *)(v8 + 192);
          long long v22 = *(_OWORD *)(v8 + 160);
          *(_OWORD *)((char *)v11 + 204) = *(_OWORD *)(v8 + 204);
          *((_OWORD *)v11 + 11) = v21;
          *((_OWORD *)v11 + 12) = v20;
          *((_OWORD *)v11 + 10) = v22;
          long long v23 = *(_OWORD *)(v8 + 144);
          *((_OWORD *)v11 + 8) = *(_OWORD *)(v8 + 128);
          *((_OWORD *)v11 + 9) = v23;
          LODWORD(v13) = *(unsigned __int8 *)(v8 + 220);
          *((unsigned char *)v11 + 220) = v13;
          if (v13) {
            *((unsigned char *)v11 + 221) = *(unsigned char *)(v8 + 221);
          }
          __int16 v24 = *(_WORD *)(v8 + 222);
          *((unsigned char *)v11 + 224) = *(unsigned char *)(v8 + 224);
          *((_WORD *)v11 + 111) = v24;
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 240;
          v11 += 30;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::PointLightInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::PointLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          uint64_t v2 = 224 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 224 * v9;
        unint64_t v11 = v7;
        do
        {
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          long long v16 = *(_OWORD *)(v8 + 64);
          long long v17 = *(_OWORD *)(v8 + 80);
          long long v18 = *(_OWORD *)(v8 + 96);
          *(_OWORD *)((char *)v11 + 108) = *(_OWORD *)(v8 + 108);
          *((_OWORD *)v11 + 5) = v17;
          *((_OWORD *)v11 + 6) = v18;
          *((_OWORD *)v11 + 4) = v16;
          long long v19 = *(_OWORD *)(v8 + 48);
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 3) = v19;
          long long v21 = *(_OWORD *)(v8 + 176);
          long long v20 = *(_OWORD *)(v8 + 192);
          long long v22 = *(_OWORD *)(v8 + 160);
          *((_DWORD *)v11 + 52) = *(_DWORD *)(v8 + 208);
          *((_OWORD *)v11 + 11) = v21;
          *((_OWORD *)v11 + 12) = v20;
          *((_OWORD *)v11 + 10) = v22;
          long long v23 = *(_OWORD *)(v8 + 144);
          *((_OWORD *)v11 + 8) = *(_OWORD *)(v8 + 128);
          *((_OWORD *)v11 + 9) = v23;
          LODWORD(v13) = *(unsigned __int8 *)(v8 + 212);
          *((unsigned char *)v11 + 212) = v13;
          if (v13) {
            *((unsigned char *)v11 + 213) = *(unsigned char *)(v8 + 213);
          }
          *((_WORD *)v11 + 107) = *(_WORD *)(v8 + 214);
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 224;
          v11 += 28;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::RectAreaLightInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::RectAreaLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 144 * v9;
        unint64_t v11 = v7;
        do
        {
          *(_OWORD *)unint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *unint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          long long v16 = *(_OWORD *)(v8 + 64);
          long long v17 = *(_OWORD *)(v8 + 80);
          long long v18 = *(_OWORD *)(v8 + 96);
          *(_OWORD *)((char *)v11 + 108) = *(_OWORD *)(v8 + 108);
          *((_OWORD *)v11 + 5) = v17;
          *((_OWORD *)v11 + 6) = v18;
          *((_OWORD *)v11 + 4) = v16;
          long long v19 = *(_OWORD *)(v8 + 48);
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 3) = v19;
          uint64_t v20 = *(void *)(v8 + 128);
          *((unsigned char *)v11 + 136) = *(unsigned char *)(v8 + 136);
          v11[16] = v20;
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 144;
          v11 += 18;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)a1)
  {
    if (v4)
    {
      re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::copy((char *)a1, 0, *(char **)a2, v4);
      re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::resize((_anonymous_namespace_ *)a1, *(void *)(a2 + 8));
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else if (v4)
  {
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((void *)a1, v4);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::copy((char *)a1, 0, *(char **)a2, *(void *)(a2 + 8));
  }
  return a1;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      uint64_t v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *((void *)result + 1);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    unint64_t result = re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::reserve(result, a2);
    unint64_t v5 = *((void *)v3 + 1);
    if (v5 < a2)
    {
      do
      {
        uint64_t v6 = (char *)v3 + 24;
        if ((*((unsigned char *)v3 + 16) & 1) == 0) {
          uint64_t v6 = (char *)*((void *)v3 + 4);
        }
        *(void *)&v6[8 * v5++] = 0;
      }
      while (a2 != v5);
    }
  }
  *((void *)v3 + 1) = a2;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

char *re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::copy(char *result, unint64_t a2, char *__src, uint64_t a4)
{
  if (!a4) {
    return result;
  }
  uint64_t v6 = result;
  unint64_t v7 = *((void *)result + 1);
  if (v7 + 1 <= a2)
  {
    uint64_t v17 = 0;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    LODWORD(v18) = 136315906;
    *(void *)((char *)&v18 + 4) = "copy";
    WORD6(v18) = 1024;
    HIWORD(v18) = 678;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_21:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 682, v7, a2, v4, v17, v18);
    _os_crash();
    __break(1u);
  }
  uint64_t v4 = a4;
  unint64_t v8 = a2 + a4;
  if (__CFADD__(a2, a4)) {
    goto LABEL_21;
  }
  if (v7 >= v8)
  {
    if (result[16]) {
      uint64_t v14 = result + 24;
    }
    else {
      uint64_t v14 = (char *)*((void *)result + 4);
    }
    unint64_t result = (char *)memmove(&v14[8 * a2], __src, 8 * a4);
  }
  else
  {
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::growCapacity((_anonymous_namespace_ *)result, a2 + a4);
    uint64_t v10 = v6[1];
    uint64_t v11 = v10 - a2;
    int v12 = *((_DWORD *)v6 + 4);
    if (v12) {
      uint64_t v13 = (char *)(v6 + 3);
    }
    else {
      uint64_t v13 = (char *)v6[4];
    }
    uint64_t v15 = &__src[8 * v11];
    if (v10 != a2)
    {
      memmove(&v13[8 * a2], __src, 8 * v11);
      int v12 = *((_DWORD *)v6 + 4);
    }
    if (v12) {
      long long v16 = (char *)(v6 + 3);
    }
    else {
      long long v16 = (char *)v6[4];
    }
    unint64_t result = (char *)memcpy(&v16[8 * v6[1]], v15, &__src[8 * v4] - v15);
    v6[1] = v8;
  }
  *((_DWORD *)v6 + 4) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::reserve(_anonymous_namespace_ *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*(void *)result)
  {
    if ((*((_DWORD *)result + 4) & 1) == 0)
    {
LABEL_3:
      unint64_t v4 = *((void *)v3 + 3);
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, a2);
    int v5 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v5;
    if ((v5 & 1) == 0) {
      goto LABEL_3;
    }
  }
  unint64_t v4 = 8;
LABEL_6:
  if (v4 < a2)
  {
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, a2);
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      int v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      int v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

void *re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    int v5 = result;
    if (result[2] <= a2)
    {
      unint64_t result = (void *)*result;
      if (!*v5)
      {
        unint64_t result = (void *)re::DynamicArray<re::RealWorldProxyLightInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          uint64_t v2 = 144 * a2;
          unint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 16);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        unint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 144 * v9;
        uint64_t v11 = v7;
        do
        {
          *(_OWORD *)uint64_t v11 = 0u;
          *((_OWORD *)v11 + 1) = 0u;
          v11[3] = *(void *)(v8 + 24);
          uint64_t v12 = *(void *)(v8 + 8);
          *uint64_t v11 = *(void *)v8;
          *(void *)uint64_t v8 = 0;
          uint64_t v13 = *(void *)(v8 + 16);
          *(void *)(v8 + 24) = 0;
          uint64_t v15 = v11[1];
          uint64_t v14 = v11[2];
          v11[1] = v12;
          v11[2] = v13;
          *(void *)(v8 + 8) = v15;
          *(void *)(v8 + 16) = v14;
          long long v16 = *(_OWORD *)(v8 + 64);
          long long v17 = *(_OWORD *)(v8 + 80);
          long long v18 = *(_OWORD *)(v8 + 96);
          *(_OWORD *)((char *)v11 + 108) = *(_OWORD *)(v8 + 108);
          *((_OWORD *)v11 + 5) = v17;
          *((_OWORD *)v11 + 6) = v18;
          *((_OWORD *)v11 + 4) = v16;
          long long v19 = *(_OWORD *)(v8 + 48);
          *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
          *((_OWORD *)v11 + 3) = v19;
          *(void *)((char *)v11 + 124) = *(void *)(v8 + 124);
          LODWORD(v13) = *(unsigned __int8 *)(v8 + 132);
          *((unsigned char *)v11 + 132) = v13;
          if (v13) {
            *((unsigned char *)v11 + 133) = *(unsigned char *)(v8 + 133);
          }
          int v20 = *(_DWORD *)(v8 + 134);
          *(_DWORD *)((char *)v11 + 137) = *(_DWORD *)(v8 + 137);
          *(_DWORD *)((char *)v11 + 134) = v20;
          re::DynamicString::deinit((re::DynamicString *)v8);
          v8 += 144;
          v11 += 18;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      unint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  if (!a4)
  {
    BOOL v10 = result == a2 && v9 == a3;
    if (!v10 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)
    {
      uint64_t v12 = *(uint64_t (**)(void))(**((void **)*a1 + 28) + 16);
      return v12();
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    BOOL v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *BOOL v10 = &unk_26E6FC2C8;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E6FC320;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    long long v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    long long v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *long long v22 = &unk_26E6FC378;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FC3D0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        char v71 = 0;
        float32x4_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *float32x4_t v37 = &unk_26E6FC2C8;
        v37[1] = a1;
        _OWORD v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        char v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FC320;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FC378;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FC3D0;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC2C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC2C8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC320;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC320;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC378;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC378;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC3D0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC3D0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FC428;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E6FC480;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FC4D8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FC530;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        char v71 = 0;
        float32x4_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *float32x4_t v37 = &unk_26E6FC428;
        v37[1] = a1;
        _OWORD v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        char v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FC480;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FC4D8;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FC530;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC428;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC428;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC480;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC480;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC4D8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC4D8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC530;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC530;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FC588;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E6FC5E0;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FC638;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FC690;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        char v71 = 0;
        float32x4_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *float32x4_t v37 = &unk_26E6FC588;
        v37[1] = a1;
        _OWORD v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        char v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FC5E0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FC638;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FC690;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC588;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC588;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC5E0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC5E0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC638;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC638;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC690;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC690;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FC6E8;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E6FC740;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FC798;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FC7F0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        char v71 = 0;
        float32x4_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *float32x4_t v37 = &unk_26E6FC6E8;
        v37[1] = a1;
        _OWORD v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        char v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FC740;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FC798;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FC7F0;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC6E8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC6E8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC740;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC740;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC798;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC798;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC7F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC7F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FC848;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E6FC8A0;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FC8F8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FC950;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        char v71 = 0;
        float32x4_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *float32x4_t v37 = &unk_26E6FC848;
        v37[1] = a1;
        _OWORD v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        char v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FC8A0;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FC8F8;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FC950;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC848;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC848;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC8A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC8A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC8F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC8F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC950;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC950;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FC9A8;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E6FCA00;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FCA58;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FCAB0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        char v71 = 0;
        float32x4_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *float32x4_t v37 = &unk_26E6FC9A8;
        v37[1] = a1;
        _OWORD v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        char v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FCA00;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FCA58;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FCAB0;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FC9A8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FC9A8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCA00;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCA00;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCA58;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCA58;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCAB0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCAB0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  int v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FCB08;
    v10[1] = a1;
    v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    float32x4_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    uint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    long long v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *long long v16 = &unk_26E6FCB60;
    v16[1] = a1;
    _OWORD v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    float32x4_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    int v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *int v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FCBB8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    v22[3] = 0;
    float32x4_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FCC10;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        char v71 = 0;
        float32x4_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *float32x4_t v37 = &unk_26E6FCB08;
        v37[1] = a1;
        _OWORD v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        char v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        long long v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v41 = v38;
        v41[1] = v40;
        float32x4_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        long long v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FCB60;
        v43[1] = a1;
        v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        long long v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        float32x4_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *float32x4_t v47 = v44;
        v47[1] = v46;
        long long v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        float32x4_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FCBB8;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        float32x4_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        long long v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FCC10;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        long long v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        long long v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    int v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    int v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    long long v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    long long v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCB08;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCB08;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCB60;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCB60;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCBB8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCBB8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCC10;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCC10;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCC68;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCC68;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCCC0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCCC0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCD18;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCD18;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCD70;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCD70;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCDC8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCDC8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCE20;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCE20;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::handleSceneEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  do
  {
    uint64_t v2 = a2;
    a2 = *(void *)(a2 + 24);
  }
  while (a2);
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v3 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(a1 + 8, &v5);
  if (v3) {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v6);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FCE78;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FCE78;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>,REEventHandlerResult (re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v24 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    uint64_t v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      int v9 = (re::ecs2::Component *)result;
      int v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      uint64_t v11 = 24;
      while (1)
      {
        uint64_t result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v11 += 8;
        if (v11 == 56)
        {
          uint64_t result = -1;
          break;
        }
      }
      if (v10 != (*(void *)(a1 + 32) != result))
      {
        uint64_t v14 = 24;
        unint64_t v15 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v19 = v16;
            unint64_t v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        unint64_t v19 = -1;
LABEL_20:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::AmbientLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    uint64_t v20 = a2[41];
    if (v20)
    {
      unint64_t v21 = (uint64_t *)a2[43];
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v24 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    uint64_t v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      int v9 = (re::ecs2::Component *)result;
      int v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      uint64_t v11 = 24;
      while (1)
      {
        uint64_t result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v11 += 8;
        if (v11 == 56)
        {
          uint64_t result = -1;
          break;
        }
      }
      if (v10 != (*(void *)(a1 + 32) != result))
      {
        uint64_t v14 = 24;
        unint64_t v15 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v19 = v16;
            unint64_t v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        unint64_t v19 = -1;
LABEL_20:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::LightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    uint64_t v20 = a2[41];
    if (v20)
    {
      unint64_t v21 = (uint64_t *)a2[43];
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v24 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    uint64_t v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PointLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      int v9 = (re::ecs2::Component *)result;
      int v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      uint64_t v11 = 24;
      while (1)
      {
        uint64_t result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v11 += 8;
        if (v11 == 56)
        {
          uint64_t result = -1;
          break;
        }
      }
      if (v10 != (*(void *)(a1 + 32) != result))
      {
        uint64_t v14 = 24;
        unint64_t v15 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v19 = v16;
            unint64_t v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        unint64_t v19 = -1;
LABEL_20:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::PointLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    uint64_t v20 = a2[41];
    if (v20)
    {
      unint64_t v21 = (uint64_t *)a2[43];
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::PointLightComponent,re::ecs2::PointLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v24 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    uint64_t v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpotLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      int v9 = (re::ecs2::Component *)result;
      int v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      uint64_t v11 = 24;
      while (1)
      {
        uint64_t result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v11 += 8;
        if (v11 == 56)
        {
          uint64_t result = -1;
          break;
        }
      }
      if (v10 != (*(void *)(a1 + 32) != result))
      {
        uint64_t v14 = 24;
        unint64_t v15 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v19 = v16;
            unint64_t v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        unint64_t v19 = -1;
LABEL_20:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::SpotLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    uint64_t v20 = a2[41];
    if (v20)
    {
      unint64_t v21 = (uint64_t *)a2[43];
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::SpotLightComponent,re::ecs2::SpotLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v24 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    uint64_t v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      int v9 = (re::ecs2::Component *)result;
      int v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      uint64_t v11 = 24;
      while (1)
      {
        uint64_t result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v11 += 8;
        if (v11 == 56)
        {
          uint64_t result = -1;
          break;
        }
      }
      if (v10 != (*(void *)(a1 + 32) != result))
      {
        uint64_t v14 = 24;
        unint64_t v15 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v19 = v16;
            unint64_t v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        unint64_t v19 = -1;
LABEL_20:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::DirectionalLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    uint64_t v20 = a2[41];
    if (v20)
    {
      unint64_t v21 = (uint64_t *)a2[43];
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::DirectionalLightComponent,re::ecs2::DirectionalLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v24 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    uint64_t v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RectAreaLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      int v9 = (re::ecs2::Component *)result;
      int v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      uint64_t v11 = 24;
      while (1)
      {
        uint64_t result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v11 += 8;
        if (v11 == 56)
        {
          uint64_t result = -1;
          break;
        }
      }
      if (v10 != (*(void *)(a1 + 32) != result))
      {
        uint64_t v14 = 24;
        unint64_t v15 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v19 = v16;
            unint64_t v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        unint64_t v19 = -1;
LABEL_20:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::RectAreaLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    uint64_t v20 = a2[41];
    if (v20)
    {
      unint64_t v21 = (uint64_t *)a2[43];
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::checkRenderOptionChanges(uint64_t a1, void *a2, re::ecs2::RenderOptions *a3, uint64_t a4)
{
  uint64_t v24 = a2[37];
  uint64_t result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a4, &v24);
  if ((result & 1) == 0)
  {
    uint64_t v24 = a2[37];
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a4, &v24);
    uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::FrustumLightComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (result)
    {
      int v9 = (re::ecs2::Component *)result;
      int v10 = *(unsigned __int8 *)re::ecs2::RenderOptions::forEntity(a3, (unint64_t)a2);
      uint64_t v11 = 24;
      while (1)
      {
        uint64_t result = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v11), v9);
        if (result != -1 && (v12 & 0xFFFFFF00000000) != 0) {
          break;
        }
        v11 += 8;
        if (v11 == 56)
        {
          uint64_t result = -1;
          break;
        }
      }
      if (v10 != (*(void *)(a1 + 32) != result))
      {
        uint64_t v14 = 24;
        unint64_t v15 = 0xFFFFFFFFLL;
        do
        {
          unint64_t v16 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + v14), v9);
          if (v16 != -1 && (v17 & 0xFFFFFF00000000) != 0)
          {
            unint64_t v19 = v16;
            unint64_t v15 = v17;
            goto LABEL_20;
          }
          v14 += 8;
        }
        while (v14 != 56);
        unint64_t v19 = -1;
LABEL_20:
        uint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::FrustumLightComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v19, v15, 0);
      }
    }
    uint64_t v20 = a2[41];
    if (v20)
    {
      unint64_t v21 = (uint64_t *)a2[43];
      uint64_t v22 = 8 * v20;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t result = re::ecs2::BaseLightComponentStateImpl<re::ecs2::FrustumLightComponent,re::ecs2::FrustumLightComponentStateImpl>::checkRenderOptionChanges(a1, v23, a3, a4);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return result;
}

void *re::BucketArray<re::LightInfoArrays,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::LightInfoArrays,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::LightInfoArrays,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 992, 0);
          uint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            uint64_t result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          unint64_t v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            unint64_t v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::LightInfoArrays,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::LightInfoArrays,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::LightInfoArrays,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::LightInfoArrays,4ul> *>::__id;
      if (v10) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = re::BucketArray<re::LightInfoArrays,4ul>::operator[](v4, i);
        re::DynamicArray<re::RectAreaLightInfo>::deinit(v7 + 208);
        re::DynamicArray<re::PointLightInfo>::deinit(v7 + 168);
        re::DynamicArray<re::SpotLightInfo>::deinit(v7 + 128);
        re::DynamicArray<re::RectAreaLightInfo>::deinit(v7 + 88);
        re::DynamicArray<re::RectAreaLightInfo>::deinit(v7 + 48);
        re::DynamicArray<unsigned long>::deinit(v7 + 8);
      }
    }
    while (*(void *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(void *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v8(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FCF10;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FCF10;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::LightInfoArrays>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::LightInfoArrays,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 248 * (a2 & 3);
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::LightComponent,re::ecs2::LightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FC288;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::AmbientLightComponent,re::ecs2::AmbientLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FC188;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

uint64_t re::ecs2::BaseLightComponentStateImpl<re::ecs2::RectAreaLightComponent,re::ecs2::RectAreaLightComponentStateImpl>::BaseLightComponentStateImpl(uint64_t a1)
{
  v4[1] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26E6FC148;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 92) = 0x7FFFFFFFLL;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 120) = 1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  v3[1] = 1;
  v4[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v3[0] = v4;
  re::DynamicOverflowArray<re::ecs2::ComponentTypeBase const*,8ul>::operator=(a1 + 104, (uint64_t)v3);
  return a1;
}

id re::internal::defaultRetain<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::LightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void re::ecs2::introspect_EmitterShape(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86EE0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86EE0);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Point";
      qword_26AF870B8 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Sphere";
      qword_26AF870C0 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "Box";
      qword_26AF870C8 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      long long v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)long long v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "Cylinder";
      qword_26AF870D0 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      long long v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)long long v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "Plane";
      qword_26AF870D8 = (uint64_t)v34;
      uint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *((void *)v36 + 1) = 5;
      *((void *)v36 + 2) = "Torus";
      qword_26AF870E0 = (uint64_t)v36;
      float32x4_t v37 = re::introspectionAllocator(v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = 6;
      *(void *)(v38 + 16) = "Cone";
      qword_26AF870E8 = v38;
      __cxa_guard_release(&qword_26AF86EE0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86EE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86EE8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF871A0, "EmitterShape", 4, 4, 1, 1);
    qword_26AF871A0 = (uint64_t)&unk_26E715E00;
    qword_26AF871E0 = (uint64_t)&re::ecs2::introspect_EmitterShape(BOOL)::enumTable;
    dword_26AF871B0 = 9;
    __cxa_guard_release(&qword_26AF86EE8);
  }
  if ((_MergedGlobals_221 & 1) == 0)
  {
    _MergedGlobals_221 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF871A0, a2);
    uint64_t v40 = 0x333860152317D9E6;
    long long v41 = "EmitterShape";
    v44[0] = 208862;
    v44[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v44);
      uint64_t v4 = (unsigned int *)qword_26AF871E0;
      v43[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v42.var0 = 2 * v10;
            v42.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v14, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v42.var0 = 2 * v18;
              v42.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v22, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v23);
      xmmword_26AF871C0 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "EmitterShape", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_BirthLocation(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86EF0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86EF0);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Surface";
      qword_26AF86FF0 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Volume";
      qword_26AF86FF8 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "Vertices";
      qword_26AF87000 = v30;
      __cxa_guard_release(&qword_26AF86EF0);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86EF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86EF8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF871E8, "BirthLocation", 4, 4, 1, 1);
    qword_26AF871E8 = (uint64_t)&unk_26E715E00;
    qword_26AF87228 = (uint64_t)&re::ecs2::introspect_BirthLocation(BOOL)::enumTable;
    dword_26AF871F8 = 9;
    __cxa_guard_release(&qword_26AF86EF8);
  }
  if ((byte_26AF86ED1 & 1) == 0)
  {
    byte_26AF86ED1 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF871E8, a2);
    uint64_t v32 = 0xEF9FC6F8AB74F2E8;
    uint64_t v33 = "BirthLocation";
    v36[0] = 208862;
    v36[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF87228;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF87208 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BirthLocation", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_BirthDirection(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F00, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F00);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Constant";
      qword_26AF87008 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Local";
      qword_26AF87010 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "Normal";
      qword_26AF87018 = v30;
      __cxa_guard_release(&qword_26AF86F00);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F08))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF87230, "BirthDirection", 4, 4, 1, 1);
    qword_26AF87230 = (uint64_t)&unk_26E715E00;
    qword_26AF87270 = (uint64_t)&re::ecs2::introspect_BirthDirection(BOOL)::enumTable;
    dword_26AF87240 = 9;
    __cxa_guard_release(&qword_26AF86F08);
  }
  if ((byte_26AF86ED2 & 1) == 0)
  {
    byte_26AF86ED2 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF87230, a2);
    uint64_t v32 = 0x4590B6CDF20CB40;
    uint64_t v33 = "BirthDirection";
    v36[0] = 208862;
    v36[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF87270;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF87250 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BirthDirection", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleLifetimeOpacity(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F10, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F10);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "LinearFadeOut";
      qword_26AF870F0 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "LinearFadeIn";
      qword_26AF870F8 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "GradualFadeInOut";
      qword_26AF87100 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "QuickFadeInOut";
      qword_26AF87108 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      StringID v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)StringID v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "EaseFadeIn";
      qword_26AF87110 = (uint64_t)v34;
      uint64_t v35 = re::introspectionAllocator(v34);
      uint64_t v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)uint64_t v36 = 1;
      *((void *)v36 + 1) = 5;
      *((void *)v36 + 2) = "EaseFadeOut";
      qword_26AF87118 = (uint64_t)v36;
      float32x4_t v37 = re::introspectionAllocator(v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = 6;
      *(void *)(v38 + 16) = "Constant";
      qword_26AF87120 = v38;
      __cxa_guard_release(&qword_26AF86F10);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F18))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF87278, "ParticleLifetimeOpacity", 4, 4, 1, 1);
    qword_26AF87278 = (uint64_t)&unk_26E715E00;
    qword_26AF872B8 = (uint64_t)&re::ecs2::introspect_ParticleLifetimeOpacity(BOOL)::enumTable;
    dword_26AF87288 = 9;
    __cxa_guard_release(&qword_26AF86F18);
  }
  if ((byte_26AF86ED3 & 1) == 0)
  {
    byte_26AF86ED3 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF87278, a2);
    uint64_t v40 = 0x72D293C0BFE398F8;
    long long v41 = "ParticleLifetimeOpacity";
    v44[0] = 208862;
    v44[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v44);
      uint64_t v4 = (unsigned int *)qword_26AF872B8;
      v43[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v42.var0 = 2 * v10;
            v42.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v14, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v42.var0 = 2 * v18;
              v42.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v22, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v23);
      xmmword_26AF87298 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleLifetimeOpacity", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_SpawnOccasion(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F20, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F20);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "OnBirth";
      qword_26AF87098 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 2;
      *((void *)v28 + 2) = "OnUpdate";
      qword_26AF870A0 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 1;
      *((void *)v30 + 2) = "OnDeath";
      qword_26AF870A8 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = 3;
      *(void *)(v32 + 16) = "OnCollide";
      qword_26AF870B0 = v32;
      __cxa_guard_release(&qword_26AF86F20);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F28))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF872C0, "SpawnOccasion", 4, 4, 1, 1);
    qword_26AF872C0 = (uint64_t)&unk_26E715E00;
    qword_26AF87300 = (uint64_t)&re::ecs2::introspect_SpawnOccasion(BOOL)::enumTable;
    dword_26AF872D0 = 9;
    __cxa_guard_release(&qword_26AF86F28);
  }
  if ((byte_26AF86ED4 & 1) == 0)
  {
    byte_26AF86ED4 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF872C0, a2);
    uint64_t v34 = 0x67D4B61924D18EC4;
    uint64_t v35 = "SpawnOccasion";
    v38[0] = 208862;
    v38[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v38);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v38);
      uint64_t v4 = (unsigned int *)qword_26AF87300;
      v37[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v36.var0 = 2 * v10;
            v36.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v14, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v36.var0 = 2 * v18;
              v36.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v22, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v23);
      xmmword_26AF872E0 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SpawnOccasion", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_BillboardMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F30, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F30);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Billboard";
      qword_26AF87020 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Free";
      qword_26AF87028 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "BillboardYAligned";
      qword_26AF87030 = v30;
      __cxa_guard_release(&qword_26AF86F30);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F38))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF87308, "BillboardMode", 4, 4, 1, 1);
    qword_26AF87308 = (uint64_t)&unk_26E715E00;
    qword_26AF87348 = (uint64_t)&re::ecs2::introspect_BillboardMode(BOOL)::enumTable;
    dword_26AF87318 = 9;
    __cxa_guard_release(&qword_26AF86F38);
  }
  if ((byte_26AF86ED5 & 1) == 0)
  {
    byte_26AF86ED5 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF87308, a2);
    uint64_t v32 = 0xEF7B4D464AB6BAC4;
    uint64_t v33 = "BillboardMode";
    v36[0] = 208862;
    v36[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF87348;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF87328 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BillboardMode", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleSortOrder(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F40, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F40);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "IncreasingDepth";
      qword_26AF87128 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "DecreasingDepth";
      qword_26AF87130 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *((void *)v30 + 1) = 2;
      *((void *)v30 + 2) = "IncreasingID";
      qword_26AF87138 = (uint64_t)v30;
      uint64_t v31 = re::introspectionAllocator(v30);
      uint64_t v32 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 24, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *((void *)v32 + 1) = 3;
      *((void *)v32 + 2) = "DecreasingID";
      qword_26AF87140 = (uint64_t)v32;
      uint64_t v33 = re::introspectionAllocator(v32);
      StringID v34 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 24, 8);
      *(_DWORD *)StringID v34 = 1;
      *((void *)v34 + 1) = 4;
      *((void *)v34 + 2) = "IncreasingAge";
      qword_26AF87148 = (uint64_t)v34;
      uint64_t v35 = re::introspectionAllocator(v34);
      StringID v36 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 24, 8);
      *(_DWORD *)StringID v36 = 1;
      *((void *)v36 + 1) = 5;
      *((void *)v36 + 2) = "DecreasingAge";
      qword_26AF87150 = (uint64_t)v36;
      float32x4_t v37 = re::introspectionAllocator(v36);
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v37 + 32))(v37, 24, 8);
      *(_DWORD *)uint64_t v38 = 1;
      *(void *)(v38 + 8) = 6;
      *(void *)(v38 + 16) = "Unsorted";
      qword_26AF87158 = v38;
      __cxa_guard_release(&qword_26AF86F40);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F48))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF87350, "ParticleSortOrder", 4, 4, 1, 1);
    qword_26AF87350 = (uint64_t)&unk_26E715E00;
    qword_26AF87390 = (uint64_t)&re::ecs2::introspect_ParticleSortOrder(BOOL)::enumTable;
    dword_26AF87360 = 9;
    __cxa_guard_release(&qword_26AF86F48);
  }
  if ((byte_26AF86ED6 & 1) == 0)
  {
    byte_26AF86ED6 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF87350, a2);
    uint64_t v40 = 0x7B9E2BB4FC9CB894;
    long long v41 = "ParticleSortOrder";
    v44[0] = 208862;
    v44[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v44);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v44);
      uint64_t v4 = (unsigned int *)qword_26AF87390;
      v43[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v44, &v40, 1, 1, (uint64_t)v43);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v42.var0 = 2 * v10;
            v42.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v44, v14, &v42);
            re::StringID::destroyString((re::StringID *)&v42);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v42.var0 = 2 * v18;
              v42.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v44, v22, &v42);
              re::StringID::destroyString((re::StringID *)&v42);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v44, v23);
      xmmword_26AF87370 = (__int128)v42;
      re::StringID::destroyString((re::StringID *)&v40);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v44);
      re::internal::assertLog((re::internal *)5, v39, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleSortOrder", v40, v41);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleBlendMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F50, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F50);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Alpha";
      qword_26AF87038 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Opaque";
      qword_26AF87040 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "Additive";
      qword_26AF87048 = v30;
      __cxa_guard_release(&qword_26AF86F50);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F58))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF87398, "ParticleBlendMode", 4, 4, 1, 1);
    qword_26AF87398 = (uint64_t)&unk_26E715E00;
    qword_26AF873D8 = (uint64_t)&re::ecs2::introspect_ParticleBlendMode(BOOL)::enumTable;
    dword_26AF873A8 = 9;
    __cxa_guard_release(&qword_26AF86F58);
  }
  if ((byte_26AF86ED7 & 1) == 0)
  {
    byte_26AF86ED7 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF87398, a2);
    uint64_t v32 = 0x7B9E11296A914B1CLL;
    uint64_t v33 = "ParticleBlendMode";
    v36[0] = 208862;
    v36[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF873D8;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF873B8 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleBlendMode", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleAnimationRepeatMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F60);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "PlayOnce";
      qword_26AF87050 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Looping";
      qword_26AF87058 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "AutoReverse";
      qword_26AF87060 = v30;
      __cxa_guard_release(&qword_26AF86F60);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F68))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF873E0, "ParticleAnimationRepeatMode", 4, 4, 1, 1);
    qword_26AF873E0 = (uint64_t)&unk_26E715E00;
    qword_26AF87420 = (uint64_t)&re::ecs2::introspect_ParticleAnimationRepeatMode(BOOL)::enumTable;
    dword_26AF873F0 = 9;
    __cxa_guard_release(&qword_26AF86F68);
  }
  if ((byte_26AF86ED8 & 1) == 0)
  {
    byte_26AF86ED8 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF873E0, a2);
    uint64_t v32 = 0x53F15E65CD4D5FF8;
    uint64_t v33 = "ParticleAnimationRepeatMode";
    v36[0] = 208862;
    v36[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF87420;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF87400 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleAnimationRepeatMode", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ParticleSimulationState(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F70, memory_order_acquire) & 1) == 0)
  {
    uint64_t v24 = (re *)__cxa_guard_acquire(&qword_26AF86F70);
    if (v24)
    {
      uint64_t v25 = re::introspectionAllocator(v24);
      long long v26 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 24, 8);
      *(_DWORD *)long long v26 = 1;
      *((void *)v26 + 1) = 0;
      *((void *)v26 + 2) = "Playing";
      qword_26AF87068 = (uint64_t)v26;
      unint64_t v27 = re::introspectionAllocator(v26);
      long long v28 = (re *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v27 + 32))(v27, 24, 8);
      *(_DWORD *)long long v28 = 1;
      *((void *)v28 + 1) = 1;
      *((void *)v28 + 2) = "Paused";
      qword_26AF87070 = (uint64_t)v28;
      uint64_t v29 = re::introspectionAllocator(v28);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 24, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 2;
      *(void *)(v30 + 16) = "Stop";
      qword_26AF87078 = v30;
      __cxa_guard_release(&qword_26AF86F70);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F78))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_26AF87428, "ParticleSimulationState", 4, 4, 1, 1);
    qword_26AF87428 = (uint64_t)&unk_26E715E00;
    qword_26AF87468 = (uint64_t)&re::ecs2::introspect_ParticleSimulationState(BOOL)::enumTable;
    dword_26AF87438 = 9;
    __cxa_guard_release(&qword_26AF86F78);
  }
  if ((byte_26AF86ED9 & 1) == 0)
  {
    byte_26AF86ED9 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_26AF87428, a2);
    uint64_t v32 = 0x90DAEB79A467BE88;
    uint64_t v33 = "ParticleSimulationState";
    v36[0] = 208862;
    v36[1] = "int";
    unint64_t v2 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v36);
    if (v2)
    {
      uint64_t v3 = *v2;
      re::StringID::destroyString((re::StringID *)v36);
      uint64_t v4 = (unsigned int *)qword_26AF87468;
      v35[1] = v3;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      unint64_t v6 = *v4;
      if (v6)
      {
        for (unint64_t i = 0; i < v6; ++i)
        {
          uint64_t v8 = *(void *)(*((void *)v4 + 1) + 8 * i);
          if (*(_DWORD *)v8 == 1)
          {
            uint64_t v9 = *(char **)(v8 + 16);
            if (v9)
            {
              uint64_t v10 = *v9;
              if (*v9)
              {
                char v11 = v9[1];
                if (v11)
                {
                  unint64_t v12 = (unsigned __int8 *)(v9 + 2);
                  do
                  {
                    uint64_t v10 = 31 * v10 + v11;
                    int v13 = *v12++;
                    char v11 = v13;
                  }
                  while (v13);
                }
              }
            }
            else
            {
              uint64_t v10 = 0;
            }
            uint64_t v14 = *(void *)(v8 + 8);
            *(void *)&v34.var0 = 2 * v10;
            v34.var1 = v9;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v14, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            unint64_t v6 = *v4;
          }
        }
        if (v6)
        {
          for (unint64_t j = 0; j < v6; ++j)
          {
            uint64_t v16 = *(void *)(*((void *)v4 + 1) + 8 * j);
            if (*(_DWORD *)v16 == 2)
            {
              unint64_t v17 = *(char **)(v16 + 16);
              if (v17)
              {
                uint64_t v18 = *v17;
                if (*v17)
                {
                  char v19 = v17[1];
                  if (v19)
                  {
                    uint64_t v20 = (unsigned __int8 *)(v17 + 2);
                    do
                    {
                      uint64_t v18 = 31 * v18 + v19;
                      int v21 = *v20++;
                      char v19 = v21;
                    }
                    while (v21);
                  }
                }
              }
              else
              {
                uint64_t v18 = 0;
              }
              uint64_t v22 = *(void *)(v16 + 8);
              *(void *)&v34.var0 = 2 * v18;
              v34.var1 = v17;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v22, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              unint64_t v6 = *v4;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v23);
      xmmword_26AF87448 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ParticleSimulationState", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void *re::ecs2::allocInfo_ParticleEmitter(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87470, "ParticleEmitter");
    __cxa_guard_release(&qword_26AF86F80);
  }
  return &unk_26AF87470;
}

void re::ecs2::initInfo_ParticleEmitter(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v201[0] = 0x4CD9458CE2D0B3D0;
  v201[1] = "ParticleEmitter";
  re::StringID::destroyString((re::StringID *)v201);
  *((_OWORD *)this + 2) = v202;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F88, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86F88);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_float((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "birthRate";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF87768 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_float((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "birthRateVariation";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF87770 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::introspect_float((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "dampingFactor";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x800000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF87778 = v16;
      unint64_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_float((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "spreadingAngle";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0xC00000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF87780 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v22 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "acceleration";
      *(void *)(v23 + 16) = v22;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0x1000000005;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF87788 = v23;
      uint64_t v24 = re::introspectionAllocator((re *)v23);
      long long v26 = re::introspect_float((re *)1, v25);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v24 + 32))(v24, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "particleSize";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x2000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF87790 = v27;
      long long v28 = re::introspectionAllocator((re *)v27);
      uint64_t v30 = re::introspect_float((re *)1, v29);
      uint64_t v31 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "particleSizeVariation";
      *(void *)(v31 + 16) = v30;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x2400000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF87798 = v31;
      uint64_t v32 = (re::ecs2 *)re::introspectionAllocator((re *)v31);
      re::ecs2::introspect_BillboardMode(v32, v33);
      uint64_t v34 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "billboardMode";
      *(void *)(v34 + 16) = &qword_26AF87308;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x2800000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF877A0 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      uint64_t v36 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "billboardAxis";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x3000000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF877A8 = v37;
      uint64_t v38 = re::introspectionAllocator((re *)v37);
      uint64_t v40 = re::introspect_float((re *)1, v39);
      uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *(void *)(v41 + 8) = "axisVariation";
      *(void *)(v41 + 16) = v40;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0x400000000ALL;
      *(_DWORD *)(v41 + 40) = 0;
      *(void *)(v41 + 48) = 0;
      *(void *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_26AF877B0 = v41;
      StringID v42 = re::introspectionAllocator((re *)v41);
      uint64_t v44 = re::introspect_float((re *)1, v43);
      uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 72, 8);
      *(_DWORD *)uint64_t v45 = 1;
      *(void *)(v45 + 8) = "particleMass";
      *(void *)(v45 + 16) = v44;
      *(void *)(v45 + 24) = 0;
      *(void *)(v45 + 32) = 0x440000000BLL;
      *(_DWORD *)(v45 + 40) = 0;
      *(void *)(v45 + 48) = 0;
      *(void *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_26AF877B8 = v45;
      uint64_t v46 = re::introspectionAllocator((re *)v45);
      long long v48 = re::introspect_float((re *)1, v47);
      uint64_t v49 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v46 + 32))(v46, 72, 8);
      *(_DWORD *)uint64_t v49 = 1;
      *(void *)(v49 + 8) = "particleMassVariation";
      *(void *)(v49 + 16) = v48;
      *(void *)(v49 + 24) = 0;
      *(void *)(v49 + 32) = 0x480000000CLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(void *)(v49 + 48) = 0;
      *(void *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_26AF877C0 = v49;
      uint64_t v50 = re::introspectionAllocator((re *)v49);
      uint64_t v52 = re::introspect_double((re *)1, v51);
      uint64_t v53 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v50 + 32))(v50, 72, 8);
      *(_DWORD *)uint64_t v53 = 1;
      *(void *)(v53 + 8) = "particleLifeSpan";
      *(void *)(v53 + 16) = v52;
      *(void *)(v53 + 24) = 0;
      *(void *)(v53 + 32) = 0x500000000DLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(void *)(v53 + 48) = 0;
      *(void *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_26AF877C8 = v53;
      long long v54 = re::introspectionAllocator((re *)v53);
      uint64_t v56 = re::introspect_double((re *)1, v55);
      uint64_t v57 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v54 + 32))(v54, 72, 8);
      *(_DWORD *)uint64_t v57 = 1;
      *(void *)(v57 + 8) = "particleLifeSpanVariation";
      *(void *)(v57 + 16) = v56;
      *(void *)(v57 + 24) = 0;
      *(void *)(v57 + 32) = 0x580000000ELL;
      *(_DWORD *)(v57 + 40) = 0;
      *(void *)(v57 + 48) = 0;
      *(void *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_26AF877D0 = v57;
      uint64_t v58 = re::introspectionAllocator((re *)v57);
      long long v60 = re::introspect_float((re *)1, v59);
      uint64_t v61 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v58 + 32))(v58, 72, 8);
      *(_DWORD *)uint64_t v61 = 1;
      *(void *)(v61 + 8) = "particleAngle";
      *(void *)(v61 + 16) = v60;
      *(void *)(v61 + 24) = 0;
      *(void *)(v61 + 32) = 0x600000000FLL;
      *(_DWORD *)(v61 + 40) = 0;
      *(void *)(v61 + 48) = 0;
      *(void *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_26AF877D8 = v61;
      long long v62 = re::introspectionAllocator((re *)v61);
      uint64_t v64 = re::introspect_float((re *)1, v63);
      uint64_t v65 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 72, 8);
      *(_DWORD *)uint64_t v65 = 1;
      *(void *)(v65 + 8) = "particleAngleVariation";
      *(void *)(v65 + 16) = v64;
      *(void *)(v65 + 24) = 0;
      *(void *)(v65 + 32) = 0x6400000010;
      *(_DWORD *)(v65 + 40) = 0;
      *(void *)(v65 + 48) = 0;
      *(void *)(v65 + 56) = 0;
      *(_DWORD *)(v65 + 64) = 0;
      qword_26AF877E0 = v65;
      long long v66 = re::introspectionAllocator((re *)v65);
      long long v68 = re::introspect_float((re *)1, v67);
      uint64_t v69 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v66 + 32))(v66, 72, 8);
      *(_DWORD *)uint64_t v69 = 1;
      *(void *)(v69 + 8) = "particleAngularVelocity";
      *(void *)(v69 + 16) = v68;
      *(void *)(v69 + 24) = 0;
      *(void *)(v69 + 32) = 0x6800000011;
      *(_DWORD *)(v69 + 40) = 0;
      *(void *)(v69 + 48) = 0;
      *(void *)(v69 + 56) = 0;
      *(_DWORD *)(v69 + 64) = 0;
      qword_26AF877E8 = v69;
      uint64_t v70 = re::introspectionAllocator((re *)v69);
      __int16 v72 = re::introspect_float((re *)1, v71);
      uint64_t v73 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v70 + 32))(v70, 72, 8);
      *(_DWORD *)uint64_t v73 = 1;
      *(void *)(v73 + 8) = "particleAngularVelocityVariation";
      *(void *)(v73 + 16) = v72;
      *(void *)(v73 + 24) = 0;
      *(void *)(v73 + 32) = 0x6C00000012;
      *(_DWORD *)(v73 + 40) = 0;
      *(void *)(v73 + 48) = 0;
      *(void *)(v73 + 56) = 0;
      *(_DWORD *)(v73 + 64) = 0;
      qword_26AF877F0 = v73;
      uint64_t v74 = re::introspectionAllocator((re *)v73);
      uint64_t v76 = re::introspect_float((re *)1, v75);
      uint64_t v77 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v74 + 32))(v74, 72, 8);
      *(_DWORD *)uint64_t v77 = 1;
      *(void *)(v77 + 8) = "particleBounce";
      *(void *)(v77 + 16) = v76;
      *(void *)(v77 + 24) = 0;
      *(void *)(v77 + 32) = 0x7000000013;
      *(_DWORD *)(v77 + 40) = 0;
      *(void *)(v77 + 48) = 0;
      *(void *)(v77 + 56) = 0;
      *(_DWORD *)(v77 + 64) = 0;
      qword_26AF877F8 = v77;
      float32x4_t v78 = re::introspectionAllocator((re *)v77);
      float32x4_t v80 = re::introspect_float((re *)1, v79);
      uint64_t v81 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v78 + 32))(v78, 72, 8);
      *(_DWORD *)uint64_t v81 = 1;
      *(void *)(v81 + 8) = "particleFriction";
      *(void *)(v81 + 16) = v80;
      *(void *)(v81 + 24) = 0;
      *(void *)(v81 + 32) = 0x7400000014;
      *(_DWORD *)(v81 + 40) = 0;
      *(void *)(v81 + 48) = 0;
      *(void *)(v81 + 56) = 0;
      *(_DWORD *)(v81 + 64) = 0;
      qword_26AF87800 = v81;
      uint64_t v82 = (re::ecs2 *)re::introspectionAllocator((re *)v81);
      re::ecs2::introspect_ParticleLifetimeOpacity(v82, v83);
      uint64_t v84 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v82 + 32))(v82, 72, 8);
      *(_DWORD *)uint64_t v84 = 1;
      *(void *)(v84 + 8) = "opacityOverLife";
      *(void *)(v84 + 16) = &qword_26AF87278;
      *(void *)(v84 + 24) = 0;
      *(void *)(v84 + 32) = 0x7800000015;
      *(_DWORD *)(v84 + 40) = 0;
      *(void *)(v84 + 48) = 0;
      *(void *)(v84 + 56) = 0;
      *(_DWORD *)(v84 + 64) = 0;
      qword_26AF87808 = v84;
      BOOL v85 = re::introspectionAllocator((re *)v84);
      long long v87 = re::introspect_float((re *)1, v86);
      uint64_t v88 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v85 + 32))(v85, 72, 8);
      *(_DWORD *)uint64_t v88 = 1;
      *(void *)(v88 + 8) = "sizeMultiplierAtEndOfLifespan";
      *(void *)(v88 + 16) = v87;
      *(void *)(v88 + 24) = 0;
      *(void *)(v88 + 32) = 0x7C00000016;
      *(_DWORD *)(v88 + 40) = 0;
      *(void *)(v88 + 48) = 0;
      *(void *)(v88 + 56) = 0;
      *(_DWORD *)(v88 + 64) = 0;
      qword_26AF87810 = v88;
      long long v89 = re::introspectionAllocator((re *)v88);
      uint64_t v91 = re::introspect_float((re *)1, v90);
      uint64_t v92 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v89 + 32))(v89, 72, 8);
      *(_DWORD *)uint64_t v92 = 1;
      *(void *)(v92 + 8) = "sizeMultiplierAtEndOfLifespanPower";
      *(void *)(v92 + 16) = v91;
      *(void *)(v92 + 24) = 0;
      *(void *)(v92 + 32) = 0x8000000017;
      *(_DWORD *)(v92 + 40) = 0;
      *(void *)(v92 + 48) = 0;
      *(void *)(v92 + 56) = 0;
      *(_DWORD *)(v92 + 64) = 0;
      qword_26AF87818 = v92;
      unint64_t v93 = re::introspectionAllocator((re *)v92);
      uint64_t v94 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v95 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v93 + 32))(v93, 72, 8);
      *(_DWORD *)uint64_t v95 = 1;
      *(void *)(v95 + 8) = "startColorA";
      *(void *)(v95 + 16) = v94;
      *(void *)(v95 + 24) = 0;
      *(void *)(v95 + 32) = 0x9000000018;
      *(_DWORD *)(v95 + 40) = 0;
      *(void *)(v95 + 48) = 0;
      *(void *)(v95 + 56) = 0;
      *(_DWORD *)(v95 + 64) = 0;
      qword_26AF87820 = v95;
      uint64_t v96 = re::introspectionAllocator((re *)v95);
      uint64_t v97 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v98 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v96 + 32))(v96, 72, 8);
      *(_DWORD *)uint64_t v98 = 1;
      *(void *)(v98 + 8) = "startColorB";
      *(void *)(v98 + 16) = v97;
      *(void *)(v98 + 24) = 0;
      *(void *)(v98 + 32) = 0xA000000019;
      *(_DWORD *)(v98 + 40) = 0;
      *(void *)(v98 + 48) = 0;
      *(void *)(v98 + 56) = 0;
      *(_DWORD *)(v98 + 64) = 0;
      qword_26AF87828 = v98;
      uint64_t v99 = re::introspectionAllocator((re *)v98);
      float32x4_t v101 = re::introspect_BOOL((re *)1, v100);
      uint64_t v102 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v99 + 32))(v99, 72, 8);
      *(_DWORD *)uint64_t v102 = 1;
      *(void *)(v102 + 8) = "useStartColorRange";
      *(void *)(v102 + 16) = v101;
      *(void *)(v102 + 24) = 0;
      *(void *)(v102 + 32) = 0xB00000001ALL;
      *(_DWORD *)(v102 + 40) = 0;
      *(void *)(v102 + 48) = 0;
      *(void *)(v102 + 56) = 0;
      *(_DWORD *)(v102 + 64) = 0;
      qword_26AF87830 = v102;
      float32x4_t v103 = re::introspectionAllocator((re *)v102);
      uint64_t v104 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v105 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v103 + 32))(v103, 72, 8);
      *(_DWORD *)uint64_t v105 = 1;
      *(void *)(v105 + 8) = "endColorA";
      *(void *)(v105 + 16) = v104;
      *(void *)(v105 + 24) = 0;
      *(void *)(v105 + 32) = 0xC00000001BLL;
      *(_DWORD *)(v105 + 40) = 0;
      *(void *)(v105 + 48) = 0;
      *(void *)(v105 + 56) = 0;
      *(_DWORD *)(v105 + 64) = 0;
      qword_26AF87838 = v105;
      long long v106 = re::introspectionAllocator((re *)v105);
      uint64_t v107 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v108 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v106 + 32))(v106, 72, 8);
      *(_DWORD *)uint64_t v108 = 1;
      *(void *)(v108 + 8) = "endColorB";
      *(void *)(v108 + 16) = v107;
      *(void *)(v108 + 24) = 0;
      *(void *)(v108 + 32) = 0xD00000001CLL;
      *(_DWORD *)(v108 + 40) = 0;
      *(void *)(v108 + 48) = 0;
      *(void *)(v108 + 56) = 0;
      *(_DWORD *)(v108 + 64) = 0;
      qword_26AF87840 = v108;
      uint64_t v109 = re::introspectionAllocator((re *)v108);
      uint64_t v111 = re::introspect_BOOL((re *)1, v110);
      uint64_t v112 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v109 + 32))(v109, 72, 8);
      *(_DWORD *)uint64_t v112 = 1;
      *(void *)(v112 + 8) = "useEndColorRange";
      *(void *)(v112 + 16) = v111;
      *(void *)(v112 + 24) = 0;
      *(void *)(v112 + 32) = 0xE00000001DLL;
      *(_DWORD *)(v112 + 40) = 0;
      *(void *)(v112 + 48) = 0;
      *(void *)(v112 + 56) = 0;
      *(_DWORD *)(v112 + 64) = 0;
      qword_26AF87848 = v112;
      unint64_t v113 = re::introspectionAllocator((re *)v112);
      uint64_t v115 = re::introspect_BOOL((re *)1, v114);
      uint64_t v116 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v113 + 32))(v113, 72, 8);
      *(_DWORD *)uint64_t v116 = 1;
      *(void *)(v116 + 8) = "useEndColor";
      *(void *)(v116 + 16) = v115;
      *(void *)(v116 + 24) = 0;
      *(void *)(v116 + 32) = 0xE10000001ELL;
      *(_DWORD *)(v116 + 40) = 0;
      *(void *)(v116 + 48) = 0;
      *(void *)(v116 + 56) = 0;
      *(_DWORD *)(v116 + 64) = 0;
      qword_26AF87850 = v116;
      uint64_t v117 = re::introspectionAllocator((re *)v116);
      unint64_t v119 = re::introspect_float((re *)1, v118);
      uint64_t v120 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v117 + 32))(v117, 72, 8);
      *(_DWORD *)uint64_t v120 = 1;
      *(void *)(v120 + 8) = "colorEvolutionPower";
      *(void *)(v120 + 16) = v119;
      *(void *)(v120 + 24) = 0;
      *(void *)(v120 + 32) = 0xE40000001FLL;
      *(_DWORD *)(v120 + 40) = 0;
      *(void *)(v120 + 48) = 0;
      *(void *)(v120 + 56) = 0;
      *(_DWORD *)(v120 + 64) = 0;
      qword_26AF87858 = v120;
      uint64_t v121 = re::introspectionAllocator((re *)v120);
      unint64_t v123 = re::introspect_float((re *)1, v122);
      uint64_t v124 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v121 + 32))(v121, 72, 8);
      *(_DWORD *)uint64_t v124 = 1;
      *(void *)(v124 + 8) = "noiseStrength";
      *(void *)(v124 + 16) = v123;
      *(void *)(v124 + 24) = 0;
      *(void *)(v124 + 32) = 0xE800000020;
      *(_DWORD *)(v124 + 40) = 0;
      *(void *)(v124 + 48) = 0;
      *(void *)(v124 + 56) = 0;
      *(_DWORD *)(v124 + 64) = 0;
      qword_26AF87860 = v124;
      int v125 = re::introspectionAllocator((re *)v124);
      uint64_t v127 = re::introspect_float((re *)1, v126);
      uint64_t v128 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v125 + 32))(v125, 72, 8);
      *(_DWORD *)uint64_t v128 = 1;
      *(void *)(v128 + 8) = "noiseScale";
      *(void *)(v128 + 16) = v127;
      *(void *)(v128 + 24) = 0;
      *(void *)(v128 + 32) = 0xEC00000021;
      *(_DWORD *)(v128 + 40) = 0;
      *(void *)(v128 + 48) = 0;
      *(void *)(v128 + 56) = 0;
      *(_DWORD *)(v128 + 64) = 0;
      qword_26AF87868 = v128;
      uint64_t v129 = re::introspectionAllocator((re *)v128);
      uint64_t v131 = re::introspect_float((re *)1, v130);
      uint64_t v132 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v129 + 32))(v129, 72, 8);
      *(_DWORD *)uint64_t v132 = 1;
      *(void *)(v132 + 8) = "noiseAnimationSpeed";
      *(void *)(v132 + 16) = v131;
      *(void *)(v132 + 24) = 0;
      *(void *)(v132 + 32) = 0xF000000022;
      *(_DWORD *)(v132 + 40) = 0;
      *(void *)(v132 + 48) = 0;
      *(void *)(v132 + 56) = 0;
      *(_DWORD *)(v132 + 64) = 0;
      qword_26AF87870 = v132;
      unint64_t v133 = re::introspectionAllocator((re *)v132);
      unint64_t v135 = re::introspect_float((re *)1, v134);
      uint64_t v136 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v133 + 32))(v133, 72, 8);
      *(_DWORD *)uint64_t v136 = 1;
      *(void *)(v136 + 8) = "radialGravityStrength";
      *(void *)(v136 + 16) = v135;
      *(void *)(v136 + 24) = 0;
      *(void *)(v136 + 32) = 0xF400000023;
      *(_DWORD *)(v136 + 40) = 0;
      *(void *)(v136 + 48) = 0;
      *(void *)(v136 + 56) = 0;
      *(_DWORD *)(v136 + 64) = 0;
      qword_26AF87878 = v136;
      uint64_t v137 = re::introspectionAllocator((re *)v136);
      uint64_t v138 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v139 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v137 + 32))(v137, 72, 8);
      *(_DWORD *)uint64_t v139 = 1;
      *(void *)(v139 + 8) = "radialGravityCenter";
      *(void *)(v139 + 16) = v138;
      *(void *)(v139 + 24) = 0;
      *(void *)(v139 + 32) = 0x10000000024;
      *(_DWORD *)(v139 + 40) = 0;
      *(void *)(v139 + 48) = 0;
      *(void *)(v139 + 56) = 0;
      *(_DWORD *)(v139 + 64) = 0;
      qword_26AF87880 = v139;
      uint64_t v140 = re::introspectionAllocator((re *)v139);
      int64x2_t v142 = re::introspect_float((re *)1, v141);
      uint64_t v143 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v140 + 32))(v140, 72, 8);
      *(_DWORD *)uint64_t v143 = 1;
      *(void *)(v143 + 8) = "vortexStrength";
      *(void *)(v143 + 16) = v142;
      *(void *)(v143 + 24) = 0;
      *(void *)(v143 + 32) = 0x11000000025;
      *(_DWORD *)(v143 + 40) = 0;
      *(void *)(v143 + 48) = 0;
      *(void *)(v143 + 56) = 0;
      *(_DWORD *)(v143 + 64) = 0;
      qword_26AF87888 = v143;
      unint64_t v144 = re::introspectionAllocator((re *)v143);
      uint64_t v145 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v146 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v144 + 32))(v144, 72, 8);
      *(_DWORD *)uint64_t v146 = 1;
      *(void *)(v146 + 8) = "vortexDirection";
      *(void *)(v146 + 16) = v145;
      *(void *)(v146 + 24) = 0;
      *(void *)(v146 + 32) = 0x12000000026;
      *(_DWORD *)(v146 + 40) = 0;
      *(void *)(v146 + 48) = 0;
      *(void *)(v146 + 56) = 0;
      *(_DWORD *)(v146 + 64) = 0;
      qword_26AF87890 = v146;
      uint64_t v147 = re::introspectionAllocator((re *)v146);
      long long v149 = re::introspect_BOOL((re *)1, v148);
      uint64_t v150 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v147 + 32))(v147, 72, 8);
      *(_DWORD *)uint64_t v150 = 1;
      *(void *)(v150 + 8) = "isLightingEnabled";
      *(void *)(v150 + 16) = v149;
      *(void *)(v150 + 24) = 0;
      *(void *)(v150 + 32) = 0x13000000027;
      *(_DWORD *)(v150 + 40) = 0;
      *(void *)(v150 + 48) = 0;
      *(void *)(v150 + 56) = 0;
      *(_DWORD *)(v150 + 64) = 0;
      qword_26AF87898 = v150;
      uint64_t v151 = re::introspectionAllocator((re *)v150);
      uint64_t v153 = re::introspect_float((re *)1, v152);
      uint64_t v154 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v151 + 32))(v151, 72, 8);
      *(_DWORD *)uint64_t v154 = 1;
      *(void *)(v154 + 8) = "stretchFactor";
      *(void *)(v154 + 16) = v153;
      *(void *)(v154 + 24) = 0;
      *(void *)(v154 + 32) = 0x13400000028;
      *(_DWORD *)(v154 + 40) = 0;
      *(void *)(v154 + 48) = 0;
      *(void *)(v154 + 56) = 0;
      *(_DWORD *)(v154 + 64) = 0;
      qword_26AF878A0 = v154;
      unint64_t v155 = (re::ecs2 *)re::introspectionAllocator((re *)v154);
      re::ecs2::introspect_ParticleSortOrder(v155, v156);
      uint64_t v157 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v155 + 32))(v155, 72, 8);
      *(_DWORD *)uint64_t v157 = 1;
      *(void *)(v157 + 8) = "sortOrder";
      *(void *)(v157 + 16) = &qword_26AF87350;
      *(void *)(v157 + 24) = 0;
      *(void *)(v157 + 32) = 0x13800000029;
      *(_DWORD *)(v157 + 40) = 0;
      *(void *)(v157 + 48) = 0;
      *(void *)(v157 + 56) = 0;
      *(_DWORD *)(v157 + 64) = 0;
      qword_26AF878A8 = v157;
      uint64_t v158 = (re::ecs2 *)re::introspectionAllocator((re *)v157);
      re::ecs2::introspect_ParticleBlendMode(v158, v159);
      uint64_t v160 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v158 + 32))(v158, 72, 8);
      *(_DWORD *)uint64_t v160 = 1;
      *(void *)(v160 + 8) = "blendMode";
      *(void *)(v160 + 16) = &qword_26AF87398;
      *(void *)(v160 + 24) = 0;
      *(void *)(v160 + 32) = 0x13C0000002ALL;
      *(_DWORD *)(v160 + 40) = 0;
      *(void *)(v160 + 48) = 0;
      *(void *)(v160 + 56) = 0;
      *(_DWORD *)(v160 + 64) = 0;
      qword_26AF878B0 = v160;
      unint64_t v161 = re::introspectionAllocator((re *)v160);
      uint64_t v163 = re::introspect_AssetHandle((re *)1, v162);
      uint64_t v164 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v161 + 32))(v161, 72, 8);
      *(_DWORD *)uint64_t v164 = 1;
      *(void *)(v164 + 8) = "particleImage";
      *(void *)(v164 + 16) = v163;
      *(void *)(v164 + 24) = 0;
      *(void *)(v164 + 32) = 0x1400000002BLL;
      *(_DWORD *)(v164 + 40) = 0;
      *(void *)(v164 + 48) = 0;
      *(void *)(v164 + 56) = 0;
      *(_DWORD *)(v164 + 64) = 0;
      qword_26AF878B8 = v164;
      int64x2_t v165 = re::introspectionAllocator((re *)v164);
      int v167 = re::introspect_BOOL((re *)1, v166);
      uint64_t v168 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v165 + 32))(v165, 72, 8);
      *(_DWORD *)uint64_t v168 = 1;
      *(void *)(v168 + 8) = "isAnimated";
      *(void *)(v168 + 16) = v167;
      *(void *)(v168 + 24) = 0;
      *(void *)(v168 + 32) = 0x1580000002CLL;
      *(_DWORD *)(v168 + 40) = 0;
      *(void *)(v168 + 48) = 0;
      *(void *)(v168 + 56) = 0;
      *(_DWORD *)(v168 + 64) = 0;
      qword_26AF878C0 = v168;
      v169 = re::introspectionAllocator((re *)v168);
      uint64_t v171 = re::introspect_int64_t((re *)1, v170);
      uint64_t v172 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v169 + 32))(v169, 72, 8);
      *(_DWORD *)uint64_t v172 = 1;
      *(void *)(v172 + 8) = "rowCount";
      *(void *)(v172 + 16) = v171;
      *(void *)(v172 + 24) = 0;
      *(void *)(v172 + 32) = 0x1600000002DLL;
      *(_DWORD *)(v172 + 40) = 0;
      *(void *)(v172 + 48) = 0;
      *(void *)(v172 + 56) = 0;
      *(_DWORD *)(v172 + 64) = 0;
      qword_26AF878C8 = v172;
      uint64_t v173 = re::introspectionAllocator((re *)v172);
      unint64_t v175 = re::introspect_int64_t((re *)1, v174);
      uint64_t v176 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v173 + 32))(v173, 72, 8);
      *(_DWORD *)uint64_t v176 = 1;
      *(void *)(v176 + 8) = "columnCount";
      *(void *)(v176 + 16) = v175;
      *(void *)(v176 + 24) = 0;
      *(void *)(v176 + 32) = 0x1680000002ELL;
      *(_DWORD *)(v176 + 40) = 0;
      *(void *)(v176 + 48) = 0;
      *(void *)(v176 + 56) = 0;
      *(_DWORD *)(v176 + 64) = 0;
      qword_26AF878D0 = v176;
      uint64_t v177 = re::introspectionAllocator((re *)v176);
      uint64_t v179 = re::introspect_int64_t((re *)1, v178);
      uint64_t v180 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v177 + 32))(v177, 72, 8);
      *(_DWORD *)uint64_t v180 = 1;
      *(void *)(v180 + 8) = "initialFrame";
      *(void *)(v180 + 16) = v179;
      *(void *)(v180 + 24) = 0;
      *(void *)(v180 + 32) = 0x1700000002FLL;
      *(_DWORD *)(v180 + 40) = 0;
      *(void *)(v180 + 48) = 0;
      *(void *)(v180 + 56) = 0;
      *(_DWORD *)(v180 + 64) = 0;
      qword_26AF878D8 = v180;
      uint64_t v181 = re::introspectionAllocator((re *)v180);
      uint64_t v183 = re::introspect_int64_t((re *)1, v182);
      uint64_t v184 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v181 + 32))(v181, 72, 8);
      *(_DWORD *)uint64_t v184 = 1;
      *(void *)(v184 + 8) = "initialFrameVariation";
      *(void *)(v184 + 16) = v183;
      *(void *)(v184 + 24) = 0;
      *(void *)(v184 + 32) = 0x17800000030;
      *(_DWORD *)(v184 + 40) = 0;
      *(void *)(v184 + 48) = 0;
      *(void *)(v184 + 56) = 0;
      *(_DWORD *)(v184 + 64) = 0;
      qword_26AF878E0 = v184;
      unint64_t v185 = re::introspectionAllocator((re *)v184);
      unint64_t v187 = re::introspect_float((re *)1, v186);
      uint64_t v188 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v185 + 32))(v185, 72, 8);
      *(_DWORD *)uint64_t v188 = 1;
      *(void *)(v188 + 8) = "frameRate";
      *(void *)(v188 + 16) = v187;
      *(void *)(v188 + 24) = 0;
      *(void *)(v188 + 32) = 0x18000000031;
      *(_DWORD *)(v188 + 40) = 0;
      *(void *)(v188 + 48) = 0;
      *(void *)(v188 + 56) = 0;
      *(_DWORD *)(v188 + 64) = 0;
      qword_26AF878E8 = v188;
      uint64_t v189 = re::introspectionAllocator((re *)v188);
      long long v191 = re::introspect_float((re *)1, v190);
      uint64_t v192 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v189 + 32))(v189, 72, 8);
      *(_DWORD *)uint64_t v192 = 1;
      *(void *)(v192 + 8) = "frameRateVariation";
      *(void *)(v192 + 16) = v191;
      *(void *)(v192 + 24) = 0;
      *(void *)(v192 + 32) = 0x18400000032;
      *(_DWORD *)(v192 + 40) = 0;
      *(void *)(v192 + 48) = 0;
      *(void *)(v192 + 56) = 0;
      *(_DWORD *)(v192 + 64) = 0;
      qword_26AF878F0 = v192;
      uint64_t v193 = (re::ecs2 *)re::introspectionAllocator((re *)v192);
      re::ecs2::introspect_ParticleAnimationRepeatMode(v193, v194);
      uint64_t v195 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v193 + 32))(v193, 72, 8);
      *(_DWORD *)uint64_t v195 = 1;
      *(void *)(v195 + 8) = "animationRepeatMode";
      *(void *)(v195 + 16) = &qword_26AF873E0;
      *(void *)(v195 + 24) = 0;
      *(void *)(v195 + 32) = 0x18800000033;
      *(_DWORD *)(v195 + 40) = 0;
      *(void *)(v195 + 48) = 0;
      *(void *)(v195 + 56) = 0;
      *(_DWORD *)(v195 + 64) = 0;
      qword_26AF878F8 = v195;
      unint64_t v196 = re::introspectionAllocator((re *)v195);
      unint64_t v198 = re::introspect_BOOL((re *)1, v197);
      uint64_t v199 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v196 + 32))(v196, 72, 8);
      *(_DWORD *)uint64_t v199 = 1;
      *(void *)(v199 + 8) = "collisions";
      *(void *)(v199 + 16) = v198;
      *(void *)(v199 + 24) = 0;
      *(void *)(v199 + 32) = 0x18C00000034;
      *(_DWORD *)(v199 + 40) = 0;
      *(void *)(v199 + 48) = 0;
      *(void *)(v199 + 56) = 0;
      *(_DWORD *)(v199 + 64) = 0;
      qword_26AF87900 = v199;
      __cxa_guard_release(&qword_26AF86F88);
    }
  }
  *((void *)this + 2) = 0x19000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 52;
  *((void *)this + 8) = &qword_26AF87768;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ParticleEmitter>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ParticleEmitter>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ParticleEmitter>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ParticleEmitter>;
  re::IntrospectionRegistry::add(this, v3);
  long long v200 = v202;
}

double re::internal::defaultConstruct<re::ecs2::ParticleEmitter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 1120403456;
  *(void *)(a3 + 4) = 0;
  *(void *)(a3 + 20) = 0;
  *(void *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  *(void *)(a3 + 32) = 1017370378;
  *(_DWORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 48) = xmmword_23435FD60;
  *(void *)(a3 + 64) = 0x3F80000000000000;
  *(_DWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = xmmword_234399D40;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 1050253722;
  *(_DWORD *)(a3 + 120) = 3;
  *(void *)(a3 + 124) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)(a3 + 144) = xmmword_234399D50;
  *(_OWORD *)(a3 + 160) = xmmword_234399D60;
  *(unsigned char *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 192) = xmmword_234399D70;
  *(_OWORD *)(a3 + 208) = xmmword_234399D80;
  *(_WORD *)(a3 + 224) = 256;
  *(_OWORD *)(a3 + 228) = xmmword_234399D90;
  *(_DWORD *)(a3 + 244) = 0;
  *(_OWORD *)(a3 + 256) = xmmword_234376D80;
  *(_DWORD *)(a3 + 272) = 0;
  *(_OWORD *)(a3 + 288) = xmmword_23435FD60;
  *(unsigned char *)(a3 + 304) = 0;
  *(void *)(a3 + 337) = 0;
  *(_OWORD *)(a3 + 308) = 0u;
  *(_OWORD *)(a3 + 324) = 0u;
  *(int64x2_t *)(a3 + 352) = vdupq_n_s64(3uLL);
  *(void *)(a3 + 368) = 0;
  *(void *)(a3 + 376) = 0;
  *(void *)&double result = 1091567616;
  *(void *)(a3 + 384) = 1091567616;
  *(_DWORD *)(a3 + 392) = 1;
  *(unsigned char *)(a3 + 396) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::ParticleEmitter>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double re::internal::defaultConstructV2<re::ecs2::ParticleEmitter>(uint64_t a1)
{
  *(_DWORD *)a1 = 1120403456;
  *(void *)(a1 + 4) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 32) = 1017370378;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_23435FD60;
  *(void *)(a1 + 64) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_234399D40;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 1050253722;
  *(_DWORD *)(a1 + 120) = 3;
  *(void *)(a1 + 124) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)(a1 + 144) = xmmword_234399D50;
  *(_OWORD *)(a1 + 160) = xmmword_234399D60;
  *(unsigned char *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_234399D70;
  *(_OWORD *)(a1 + 208) = xmmword_234399D80;
  *(_WORD *)(a1 + 224) = 256;
  *(_OWORD *)(a1 + 228) = xmmword_234399D90;
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_234376D80;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 288) = xmmword_23435FD60;
  *(unsigned char *)(a1 + 304) = 0;
  *(void *)(a1 + 337) = 0;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(int64x2_t *)(a1 + 352) = vdupq_n_s64(3uLL);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)&double result = 1091567616;
  *(void *)(a1 + 384) = 1091567616;
  *(_DWORD *)(a1 + 392) = 1;
  *(unsigned char *)(a1 + 396) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::ParticleEmitter>(uint64_t a1)
{
}

void *re::ecs2::allocInfo_VFXEmitterComponentState(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86F98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86F98))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF874E8, "VFXEmitterComponentState");
    __cxa_guard_release(&qword_26AF86F98);
  }
  return &unk_26AF874E8;
}

void re::ecs2::initInfo_VFXEmitterComponentState(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v138[0] = 0x915BBEAE8D6533B4;
  v138[1] = "VFXEmitterComponentState";
  re::StringID::destroyString((re::StringID *)v138);
  *((_OWORD *)this + 2) = v139;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86FA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86FA0);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_double((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "emissionDuration";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF87650 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      char v11 = re::introspect_double((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "emissionDurationVariation";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF87658 = v12;
      int v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::introspect_double((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "idleDuration";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF87660 = v16;
      unint64_t v17 = re::introspectionAllocator((re *)v16);
      char v19 = re::introspect_double((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "idleDurationVariation";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x1800000004;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF87668 = v20;
      int v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_double((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "warmupDuration";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x2000000005;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF87670 = v24;
      uint64_t v25 = re::introspectionAllocator((re *)v24);
      uint64_t v27 = re::introspect_BOOL((re *)1, v26);
      uint64_t v28 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = "loops";
      *(void *)(v28 + 16) = v27;
      *(void *)(v28 + 24) = 0;
      *(void *)(v28 + 32) = 0x2800000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(void *)(v28 + 48) = 0;
      *(void *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_26AF87678 = v28;
      uint64_t v29 = (re::ecs2 *)re::introspectionAllocator((re *)v28);
      re::ecs2::introspect_EmitterShape(v29, v30);
      uint64_t v31 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v29 + 32))(v29, 72, 8);
      *(_DWORD *)uint64_t v31 = 1;
      *(void *)(v31 + 8) = "emitterShape";
      *(void *)(v31 + 16) = &qword_26AF871A0;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0x2C00000007;
      *(_DWORD *)(v31 + 40) = 0;
      *(void *)(v31 + 48) = 0;
      *(void *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_26AF87680 = v31;
      uint64_t v32 = (re::ecs2 *)re::introspectionAllocator((re *)v31);
      re::ecs2::introspect_BirthLocation(v32, v33);
      uint64_t v34 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v32 + 32))(v32, 72, 8);
      *(_DWORD *)uint64_t v34 = 1;
      *(void *)(v34 + 8) = "birthLocation";
      *(void *)(v34 + 16) = &qword_26AF871E8;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0x3000000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(void *)(v34 + 48) = 0;
      *(void *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_26AF87688 = v34;
      uint64_t v35 = re::introspectionAllocator((re *)v34);
      uint64_t v36 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "birthLocationVertex";
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x4000000009;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF87690 = v37;
      uint64_t v38 = (re::ecs2 *)re::introspectionAllocator((re *)v37);
      re::ecs2::introspect_BirthDirection(v38, v39);
      uint64_t v40 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = "birthDirection";
      *(void *)(v40 + 16) = &qword_26AF87230;
      *(void *)(v40 + 24) = 0;
      *(void *)(v40 + 32) = 0x500000000ALL;
      *(_DWORD *)(v40 + 40) = 0;
      *(void *)(v40 + 48) = 0;
      *(void *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_26AF87698 = v40;
      uint64_t v41 = re::introspectionAllocator((re *)v40);
      uint64_t v42 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v43 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v41 + 32))(v41, 72, 8);
      *(_DWORD *)uint64_t v43 = 1;
      *(void *)(v43 + 8) = "shapeSize";
      *(void *)(v43 + 16) = v42;
      *(void *)(v43 + 24) = 0;
      *(void *)(v43 + 32) = 0x700000000BLL;
      *(_DWORD *)(v43 + 40) = 0;
      *(void *)(v43 + 48) = 0;
      *(void *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_26AF876A0 = v43;
      uint64_t v44 = re::introspectionAllocator((re *)v43);
      uint64_t v46 = re::introspect_float((re *)1, v45);
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v44 + 32))(v44, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "particleSpeed";
      *(void *)(v47 + 16) = v46;
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0x880000000CLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF876A8 = v47;
      long long v48 = re::introspectionAllocator((re *)v47);
      uint64_t v50 = re::introspect_float((re *)1, v49);
      uint64_t v51 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v48 + 32))(v48, 72, 8);
      *(_DWORD *)uint64_t v51 = 1;
      *(void *)(v51 + 8) = "particleSpeedVariation";
      *(void *)(v51 + 16) = v50;
      *(void *)(v51 + 24) = 0;
      *(void *)(v51 + 32) = 0x8C0000000DLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(void *)(v51 + 48) = 0;
      *(void *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_26AF876B0 = v51;
      uint64_t v52 = re::introspectionAllocator((re *)v51);
      uint64_t v53 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      uint64_t v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v52 + 32))(v52, 72, 8);
      *(_DWORD *)uint64_t v54 = 1;
      *(void *)(v54 + 8) = "emissionDirection";
      *(void *)(v54 + 16) = v53;
      *(void *)(v54 + 24) = 0;
      *(void *)(v54 + 32) = 0x600000000ELL;
      *(_DWORD *)(v54 + 40) = 0;
      *(void *)(v54 + 48) = 0;
      *(void *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_26AF876B8 = v54;
      long long v55 = re::introspectionAllocator((re *)v54);
      uint64_t v57 = re::introspect_BOOL((re *)1, v56);
      uint64_t v58 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v55 + 32))(v55, 72, 8);
      *(_DWORD *)uint64_t v58 = 1;
      *(void *)(v58 + 8) = "isLocal";
      *(void *)(v58 + 16) = v57;
      *(void *)(v58 + 24) = 0;
      *(void *)(v58 + 32) = 0x940000000FLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(void *)(v58 + 48) = 0;
      *(void *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_26AF876C0 = v58;
      long long v59 = (re::ecs2 *)re::introspectionAllocator((re *)v58);
      re::ecs2::introspect_SpawnOccasion(v59, v60);
      uint64_t v61 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v59 + 32))(v59, 72, 8);
      *(_DWORD *)uint64_t v61 = 1;
      *(void *)(v61 + 8) = "spawnOccasion";
      *(void *)(v61 + 16) = &qword_26AF872C0;
      *(void *)(v61 + 24) = 0;
      *(void *)(v61 + 32) = 0x9000000010;
      *(_DWORD *)(v61 + 40) = 0;
      *(void *)(v61 + 48) = 0;
      *(void *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_26AF876C8 = v61;
      long long v62 = re::introspectionAllocator((re *)v61);
      uint64_t v64 = re::introspect_BOOL((re *)1, v63);
      uint64_t v65 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v62 + 32))(v62, 72, 8);
      *(_DWORD *)uint64_t v65 = 1;
      *(void *)(v65 + 8) = "isSpawningEnabled";
      *(void *)(v65 + 16) = v64;
      *(void *)(v65 + 24) = 0;
      *(void *)(v65 + 32) = 0xCC00000011;
      *(_DWORD *)(v65 + 40) = 0;
      *(void *)(v65 + 48) = 0;
      *(void *)(v65 + 56) = 0;
      *(_DWORD *)(v65 + 64) = 0;
      qword_26AF876D0 = v65;
      long long v66 = re::introspectionAllocator((re *)v65);
      long long v68 = re::introspect_float((re *)1, v67);
      uint64_t v69 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v66 + 32))(v66, 72, 8);
      *(_DWORD *)uint64_t v69 = 1;
      *(void *)(v69 + 8) = "spawnVelocityFactor";
      *(void *)(v69 + 16) = v68;
      *(void *)(v69 + 24) = 0;
      *(void *)(v69 + 32) = 0xD000000012;
      *(_DWORD *)(v69 + 40) = 0;
      *(void *)(v69 + 48) = 0;
      *(void *)(v69 + 56) = 0;
      *(_DWORD *)(v69 + 64) = 0;
      qword_26AF876D8 = v69;
      uint64_t v70 = re::introspectionAllocator((re *)v69);
      __int16 v72 = re::introspect_float((re *)1, v71);
      uint64_t v73 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v70 + 32))(v70, 72, 8);
      *(_DWORD *)uint64_t v73 = 1;
      *(void *)(v73 + 8) = "spawnSpreadFactor";
      *(void *)(v73 + 16) = v72;
      *(void *)(v73 + 24) = 0;
      *(void *)(v73 + 32) = 0xD400000013;
      *(_DWORD *)(v73 + 40) = 0;
      *(void *)(v73 + 48) = 0;
      *(void *)(v73 + 56) = 0;
      *(_DWORD *)(v73 + 64) = 0;
      qword_26AF876E0 = v73;
      uint64_t v74 = re::introspectionAllocator((re *)v73);
      uint64_t v76 = re::introspect_float((re *)1, v75);
      uint64_t v77 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v74 + 32))(v74, 72, 8);
      *(_DWORD *)uint64_t v77 = 1;
      *(void *)(v77 + 8) = "spawnSpreadFactorVariation";
      *(void *)(v77 + 16) = v76;
      *(void *)(v77 + 24) = 0;
      *(void *)(v77 + 32) = 0xD800000014;
      *(_DWORD *)(v77 + 40) = 0;
      *(void *)(v77 + 48) = 0;
      *(void *)(v77 + 56) = 0;
      *(_DWORD *)(v77 + 64) = 0;
      qword_26AF876E8 = v77;
      float32x4_t v78 = re::introspectionAllocator((re *)v77);
      float32x4_t v80 = re::introspect_BOOL((re *)1, v79);
      uint64_t v81 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v78 + 32))(v78, 72, 8);
      *(_DWORD *)uint64_t v81 = 1;
      *(void *)(v81 + 8) = "spawnInheritParentColor";
      *(void *)(v81 + 16) = v80;
      *(void *)(v81 + 24) = 0;
      *(void *)(v81 + 32) = 0xDC00000015;
      *(_DWORD *)(v81 + 40) = 0;
      *(void *)(v81 + 48) = 0;
      *(void *)(v81 + 56) = 0;
      *(_DWORD *)(v81 + 64) = 0;
      qword_26AF876F0 = v81;
      uint64_t v82 = (re::ecs2 *)re::introspectionAllocator((re *)v81);
      float32x4_t v83 = v82;
      uint64_t v84 = (re::ecs2 *)qword_26AF86F90;
      if (!qword_26AF86F90)
      {
        uint64_t v84 = (re::ecs2 *)re::ecs2::allocInfo_ParticleEmitter(v82);
        qword_26AF86F90 = (uint64_t)v84;
        re::ecs2::initInfo_ParticleEmitter(v84, v85);
      }
      uint64_t v86 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v83 + 32))(v83, 72, 8);
      *(_DWORD *)uint64_t v86 = 1;
      *(void *)(v86 + 8) = "mainEmitter";
      *(void *)(v86 + 16) = v84;
      *(void *)(v86 + 24) = 0;
      *(void *)(v86 + 32) = 0xF000000016;
      *(_DWORD *)(v86 + 40) = 0;
      *(void *)(v86 + 48) = 0;
      *(void *)(v86 + 56) = 0;
      *(_DWORD *)(v86 + 64) = 0;
      qword_26AF876F8 = v86;
      long long v87 = (re::ecs2 *)re::introspectionAllocator((re *)v86);
      uint64_t v88 = v87;
      long long v89 = (re::ecs2 *)qword_26AF86F90;
      if (!qword_26AF86F90)
      {
        long long v89 = (re::ecs2 *)re::ecs2::allocInfo_ParticleEmitter(v87);
        qword_26AF86F90 = (uint64_t)v89;
        re::ecs2::initInfo_ParticleEmitter(v89, v90);
      }
      uint64_t v91 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v88 + 32))(v88, 72, 8);
      *(_DWORD *)uint64_t v91 = 1;
      *(void *)(v91 + 8) = "spawnedEmitter";
      *(void *)(v91 + 16) = v89;
      *(void *)(v91 + 24) = 0;
      *(void *)(v91 + 32) = 0x28000000017;
      *(_DWORD *)(v91 + 40) = 0;
      *(void *)(v91 + 48) = 0;
      *(void *)(v91 + 56) = 0;
      *(_DWORD *)(v91 + 64) = 0;
      qword_26AF87700 = v91;
      uint64_t v92 = (re::ecs2 *)re::introspectionAllocator((re *)v91);
      re::ecs2::introspect_ParticleSimulationState(v92, v93);
      uint64_t v94 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v92 + 32))(v92, 72, 8);
      *(_DWORD *)uint64_t v94 = 1;
      *(void *)(v94 + 8) = "simulationState";
      *(void *)(v94 + 16) = &qword_26AF87428;
      *(void *)(v94 + 24) = 0;
      *(void *)(v94 + 32) = 0x9800000018;
      *(_DWORD *)(v94 + 40) = 0;
      *(void *)(v94 + 48) = 0;
      *(void *)(v94 + 56) = 0;
      *(_DWORD *)(v94 + 64) = 0;
      qword_26AF87708 = v94;
      uint64_t v95 = re::introspectionAllocator((re *)v94);
      uint64_t v97 = re::introspect_int64_t((re *)1, v96);
      uint64_t v98 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v95 + 32))(v95, 72, 8);
      *(_DWORD *)uint64_t v98 = 1;
      *(void *)(v98 + 8) = "restartCount";
      *(void *)(v98 + 16) = v97;
      *(void *)(v98 + 24) = 0;
      *(void *)(v98 + 32) = 0xA000000019;
      *(_DWORD *)(v98 + 40) = 0;
      *(void *)(v98 + 48) = 0;
      *(void *)(v98 + 56) = 0;
      *(_DWORD *)(v98 + 64) = 0;
      qword_26AF87710 = v98;
      uint64_t v99 = re::introspectionAllocator((re *)v98);
      float32x4_t v101 = re::introspect_int64_t((re *)1, v100);
      uint64_t v102 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v99 + 32))(v99, 72, 8);
      *(_DWORD *)uint64_t v102 = 1;
      *(void *)(v102 + 8) = "burstCount";
      *(void *)(v102 + 16) = v101;
      *(void *)(v102 + 24) = 0;
      *(void *)(v102 + 32) = 0xB00000001ALL;
      *(_DWORD *)(v102 + 40) = 0;
      *(void *)(v102 + 48) = 0;
      *(void *)(v102 + 56) = 0;
      *(_DWORD *)(v102 + 64) = 0;
      qword_26AF87718 = v102;
      float32x4_t v103 = re::introspectionAllocator((re *)v102);
      uint64_t v105 = re::introspect_int64_t((re *)1, v104);
      uint64_t v106 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v103 + 32))(v103, 72, 8);
      *(_DWORD *)uint64_t v106 = 1;
      *(void *)(v106 + 8) = "burstCountVariation";
      *(void *)(v106 + 16) = v105;
      *(void *)(v106 + 24) = 0;
      *(void *)(v106 + 32) = 0xB80000001BLL;
      *(_DWORD *)(v106 + 40) = 0;
      *(void *)(v106 + 48) = 0;
      *(void *)(v106 + 56) = 0;
      *(_DWORD *)(v106 + 64) = 0;
      qword_26AF87720 = v106;
      uint64_t v107 = re::introspectionAllocator((re *)v106);
      uint64_t v109 = re::introspect_int64_t((re *)1, v108);
      uint64_t v110 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v107 + 32))(v107, 72, 8);
      *(_DWORD *)uint64_t v110 = 1;
      *(void *)(v110 + 8) = "burstRestart";
      *(void *)(v110 + 16) = v109;
      *(void *)(v110 + 24) = 0;
      *(void *)(v110 + 32) = 0xC00000001CLL;
      *(_DWORD *)(v110 + 40) = 0;
      *(void *)(v110 + 48) = 0;
      *(void *)(v110 + 56) = 0;
      *(_DWORD *)(v110 + 64) = 0;
      qword_26AF87728 = v110;
      uint64_t v111 = re::introspectionAllocator((re *)v110);
      unint64_t v113 = re::introspect_BOOL((re *)1, v112);
      uint64_t v114 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v111 + 32))(v111, 72, 8);
      *(_DWORD *)uint64_t v114 = 1;
      *(void *)(v114 + 8) = "isEmitting";
      *(void *)(v114 + 16) = v113;
      *(void *)(v114 + 24) = 0;
      *(void *)(v114 + 32) = 0xA80000001DLL;
      *(_DWORD *)(v114 + 40) = 0;
      *(void *)(v114 + 48) = 0;
      *(void *)(v114 + 56) = 0;
      *(_DWORD *)(v114 + 64) = 0;
      qword_26AF87730 = v114;
      uint64_t v115 = re::introspectionAllocator((re *)v114);
      uint64_t v117 = re::introspect_float((re *)1, v116);
      uint64_t v118 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v115 + 32))(v115, 72, 8);
      *(_DWORD *)uint64_t v118 = 1;
      *(void *)(v118 + 8) = "radialAmount";
      *(void *)(v118 + 16) = v117;
      *(void *)(v118 + 24) = 0;
      *(void *)(v118 + 32) = 0x800000001ELL;
      *(_DWORD *)(v118 + 40) = 0;
      *(void *)(v118 + 48) = 0;
      *(void *)(v118 + 56) = 0;
      *(_DWORD *)(v118 + 64) = 0;
      qword_26AF87738 = v118;
      unint64_t v119 = re::introspectionAllocator((re *)v118);
      uint64_t v121 = re::introspect_float((re *)1, v120);
      uint64_t v122 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v119 + 32))(v119, 72, 8);
      *(_DWORD *)uint64_t v122 = 1;
      *(void *)(v122 + 8) = "torusInnerRadius";
      *(void *)(v122 + 16) = v121;
      *(void *)(v122 + 24) = 0;
      *(void *)(v122 + 32) = 0x840000001FLL;
      *(_DWORD *)(v122 + 40) = 0;
      *(void *)(v122 + 48) = 0;
      *(void *)(v122 + 56) = 0;
      *(_DWORD *)(v122 + 64) = 0;
      qword_26AF87740 = v122;
      unint64_t v123 = re::introspectionAllocator((re *)v122);
      int v125 = re::introspect_BOOL((re *)1, v124);
      uint64_t v126 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v123 + 32))(v123, 72, 8);
      *(_DWORD *)uint64_t v126 = 1;
      *(void *)(v126 + 8) = "isLocalFields";
      *(void *)(v126 + 16) = v125;
      *(void *)(v126 + 24) = 0;
      *(void *)(v126 + 32) = 0x9500000020;
      *(_DWORD *)(v126 + 40) = 0;
      *(void *)(v126 + 48) = 0;
      *(void *)(v126 + 56) = 0;
      *(_DWORD *)(v126 + 64) = 0;
      qword_26AF87748 = v126;
      uint64_t v127 = re::introspectionAllocator((re *)v126);
      uint64_t v129 = re::introspect_float((re *)1, v128);
      uint64_t v130 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v127 + 32))(v127, 72, 8);
      *(_DWORD *)uint64_t v130 = 1;
      *(void *)(v130 + 8) = "simulationRate";
      *(void *)(v130 + 16) = v129;
      *(void *)(v130 + 24) = 0;
      *(void *)(v130 + 32) = 0xC800000021;
      *(_DWORD *)(v130 + 40) = 0;
      *(void *)(v130 + 48) = 0;
      *(void *)(v130 + 56) = 0;
      *(_DWORD *)(v130 + 64) = 0;
      qword_26AF87750 = v130;
      uint64_t v131 = (re::ecs2 *)re::introspectionAllocator((re *)v130);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>>::get(v131);
      uint64_t v132 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v131 + 32))(v131, 72, 8);
      *(_DWORD *)uint64_t v132 = 1;
      *(void *)(v132 + 8) = "collisionPlanes";
      *(void *)(v132 + 16) = &qword_26AF87160;
      *(void *)(v132 + 24) = 0;
      *(void *)(v132 + 32) = 0x41000000022;
      *(_DWORD *)(v132 + 40) = 0;
      *(void *)(v132 + 48) = 0;
      *(void *)(v132 + 56) = 0;
      *(_DWORD *)(v132 + 64) = 0;
      qword_26AF87758 = v132;
      unint64_t v133 = re::introspectionAllocator((re *)v132);
      unint64_t v135 = re::introspect_int64_t((re *)1, v134);
      uint64_t v136 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v133 + 32))(v133, 72, 8);
      *(_DWORD *)uint64_t v136 = 1;
      *(void *)(v136 + 8) = "resetVersion";
      *(void *)(v136 + 16) = v135;
      *(void *)(v136 + 24) = 0;
      *(void *)(v136 + 32) = 0xE000000023;
      *(_DWORD *)(v136 + 40) = 0;
      *(void *)(v136 + 48) = 0;
      *(void *)(v136 + 56) = 0;
      *(_DWORD *)(v136 + 64) = 0;
      qword_26AF87760 = v136;
      __cxa_guard_release(&qword_26AF86FA0);
    }
  }
  *((void *)this + 2) = 0x44000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 35;
  *((void *)this + 8) = &qword_26AF87650;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXEmitterComponentState>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXEmitterComponentState>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXEmitterComponentState>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponentState>;
  re::IntrospectionRegistry::add(this, v3);
  long long v137 = v139;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>>::get(re::ecs2 *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86FD8, memory_order_acquire) & 1) == 0)
  {
    a1 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF86FD8);
    if (a1)
    {
      re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF87160);
      qword_26AF87160 = (uint64_t)&unk_26E6FCFF0;
      __cxa_guard_release(&qword_26AF86FD8);
    }
  }
  if ((byte_26AF86EDA & 1) == 0)
  {
    uint64_t v1 = (void *)qword_26AF86FC0;
    if (qword_26AF86FC0
      || (uint64_t v1 = re::ecs2::allocInfo_ParticleEmitterCollisionPlane(a1),
          qword_26AF86FC0 = (uint64_t)v1,
          re::ecs2::initInfo_ParticleEmitterCollisionPlane((re::ecs2 *)v1, v2),
          (byte_26AF86EDA & 1) == 0))
    {
      byte_26AF86EDA = 1;
      int v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF87160, 0);
      qword_26AF87170 = 0x2800000003;
      dword_26AF87178 = v3;
      word_26AF8717C = 0;
      *(void *)&xmmword_26AF87180 = 0;
      *((void *)&xmmword_26AF87180 + 1) = 0xFFFFFFFFLL;
      qword_26AF87190 = (uint64_t)v1;
      qword_26AF87198 = 0;
      qword_26AF87160 = (uint64_t)&unk_26E6FCFF0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_26AF87160, (const re::IntrospectionBase *)&v14);
      if (v15) {
        unint64_t v6 = *(const char **)&v16[7];
      }
      else {
        unint64_t v6 = v16;
      }
      if (v14 && (v15 & 1) != 0) {
        (*(void (**)(void))(*(void *)v14 + 40))();
      }
      long long v11 = *((_OWORD *)v1 + 2);
      uint64_t v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v12);
      if (v7)
      {
        uint64_t v8 = *v7;
        *((void *)&v10 + 1) = v8;
      }
      else
      {
        long long v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_26AF87180 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::VFXEmitterComponentState>(int a1, int a2, re::ecs2::VFXEmitterComponentState *this)
{
  return re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState(this);
}

void re::internal::defaultDestruct<re::ecs2::VFXEmitterComponentState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a3 + 1040);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 960));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 560));
}

void re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponentState>(uint64_t a1)
{
  re::DynamicArray<unsigned long>::deinit(a1 + 1040);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 960));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 560));
}

void *re::ecs2::allocInfo_ParticleEmitterCollisionPlane(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86FB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86FB0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87560, "ParticleEmitterCollisionPlane");
    __cxa_guard_release(&qword_26AF86FB0);
  }
  return &unk_26AF87560;
}

void re::ecs2::initInfo_ParticleEmitterCollisionPlane(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x4B80C63683AA04A4;
  v16[1] = "ParticleEmitterCollisionPlane";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86FB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86FB8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_int64_t((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "handle";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 0x5000000001;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF87080 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      uint64_t v10 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "extent";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 2;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF87088 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      uint64_t v13 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "transform";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x1000000003;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF87090 = v14;
      __cxa_guard_release(&qword_26AF86FB8);
    }
  }
  *((void *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF87080;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::ParticleEmitterCollisionPlane>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::ParticleEmitterCollisionPlane>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ParticleEmitterCollisionPlane>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ParticleEmitterCollisionPlane>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

double re::internal::defaultConstruct<re::ecs2::ParticleEmitterCollisionPlane>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = 0;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(void *)(a3 + 80) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::ParticleEmitterCollisionPlane>(uint64_t a1)
{
  *(void *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  return result;
}

void *re::ecs2::allocInfo_VFXEmitterComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86FD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF86FD0))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF875D8, "VFXEmitterComponent");
    __cxa_guard_release(&qword_26AF86FD0);
  }
  return &unk_26AF875D8;
}

void re::ecs2::initInfo_VFXEmitterComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v14[0] = 0x1AEFD3A8FE0F79EELL;
  v14[1] = "VFXEmitterComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF86FC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF86FC8);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF86FE0 = v7;
      uint64_t v8 = (re::ecs2 *)re::introspectionAllocator((re *)v7);
      uint64_t v9 = v8;
      uint64_t v10 = (re::ecs2 *)qword_26AF86FA8;
      if (!qword_26AF86FA8)
      {
        uint64_t v10 = (re::ecs2 *)re::ecs2::allocInfo_VFXEmitterComponentState(v8);
        qword_26AF86FA8 = (uint64_t)v10;
        re::ecs2::initInfo_VFXEmitterComponentState(v10, v11);
      }
      uint64_t v12 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "currentState";
      *(void *)(v12 + 16) = v10;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF86FE8 = v12;
      __cxa_guard_release(&qword_26AF86FC8);
    }
  }
  *((void *)this + 2) = 0x90000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF86FE0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXEmitterComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXEmitterComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXEmitterComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v13 = v15;
}

uint64_t re::internal::defaultConstruct<re::ecs2::VFXEmitterComponent>(int a1, int a2, re::ecs2::VFXEmitterComponent *this)
{
  return re::ecs2::VFXEmitterComponent::VFXEmitterComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXEmitterComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXEmitterComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXEmitterComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXEmitterComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXEmitterComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXEmitterComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXEmitterComponent>, this);
}

unint64_t re::ecs2::ParticleEmitter::hash(re::ecs2::ParticleEmitter *this)
{
  unint64_t v1 = *((void *)this + 41);
  if (v1) {
    uint64_t v137 = *(void *)(v1 + 664);
  }
  else {
    uint64_t v137 = 0;
  }
  unint64_t v2 = (0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 74) ^ ((unint64_t)*((unsigned int *)this + 74) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 74) ^ ((unint64_t)*((unsigned int *)this + 74) >> 30))) >> 27);
  unint64_t v3 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 73) ^ ((unint64_t)*((unsigned int *)this + 73) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 73) ^ ((unint64_t)*((unsigned int *)this + 73) >> 30))) >> 27));
  unint64_t v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 72) ^ ((unint64_t)*((unsigned int *)this + 72) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 72) ^ ((unint64_t)*((unsigned int *)this + 72) >> 30))) >> 27));
  unint64_t v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 66) ^ ((unint64_t)*((unsigned int *)this + 66) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 66) ^ ((unint64_t)*((unsigned int *)this + 66) >> 30))) >> 27));
  unint64_t v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 65) ^ ((unint64_t)*((unsigned int *)this + 65) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 65) ^ ((unint64_t)*((unsigned int *)this + 65) >> 30))) >> 27));
  uint64_t v7 = ((v5 ^ (v5 >> 31)) + ((v6 ^ (v6 >> 31)) << 6) + ((v6 ^ (v6 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v6 ^ (v6 >> 31);
  unint64_t v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 64) ^ ((unint64_t)*((unsigned int *)this + 64) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 64) ^ ((unint64_t)*((unsigned int *)this + 64) >> 30))) >> 27));
  unint64_t v9 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) >> 27));
  unint64_t v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 52) ^ ((unint64_t)*((unsigned int *)this + 52) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 52) ^ ((unint64_t)*((unsigned int *)this + 52) >> 30))) >> 27));
  unint64_t v11 = ((v9 ^ (v9 >> 31)) + ((v10 ^ (v10 >> 31)) << 6) + ((v10 ^ (v10 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v10 ^ (v10 >> 31);
  unint64_t v12 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 55) ^ ((unint64_t)*((unsigned int *)this + 55) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 55) ^ ((unint64_t)*((unsigned int *)this + 55) >> 30))) >> 27));
  unint64_t v13 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 54) ^ ((unint64_t)*((unsigned int *)this + 54) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 54) ^ ((unint64_t)*((unsigned int *)this + 54) >> 30))) >> 27));
  unint64_t v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 49) ^ ((unint64_t)*((unsigned int *)this + 49) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 49) ^ ((unint64_t)*((unsigned int *)this + 49) >> 30))) >> 27));
  unint64_t v15 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 48) ^ ((unint64_t)*((unsigned int *)this + 48) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 48) ^ ((unint64_t)*((unsigned int *)this + 48) >> 30))) >> 27));
  unint64_t v16 = ((v14 ^ (v14 >> 31)) + ((v15 ^ (v15 >> 31)) << 6) + ((v15 ^ (v15 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v15 ^ (v15 >> 31);
  unint64_t v17 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 51) ^ ((unint64_t)*((unsigned int *)this + 51) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 51) ^ ((unint64_t)*((unsigned int *)this + 51) >> 30))) >> 27));
  unint64_t v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 50) ^ ((unint64_t)*((unsigned int *)this + 50) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 50) ^ ((unint64_t)*((unsigned int *)this + 50) >> 30))) >> 27));
  uint64_t v19 = ((v16 << 6)
       + (v16 >> 2)
       + (((v17 ^ (v17 >> 31)) + ((v18 ^ (v18 >> 31)) << 6) + ((v18 ^ (v18 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v18 ^ (v18 >> 31))
       - 0x61C8864680B583E9) ^ v16;
  unint64_t v20 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 41) ^ ((unint64_t)*((unsigned int *)this + 41) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 41) ^ ((unint64_t)*((unsigned int *)this + 41) >> 30))) >> 27));
  unint64_t v21 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 40) ^ ((unint64_t)*((unsigned int *)this + 40) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 40) ^ ((unint64_t)*((unsigned int *)this + 40) >> 30))) >> 27));
  unint64_t v22 = ((v20 ^ (v20 >> 31)) + ((v21 ^ (v21 >> 31)) << 6) + ((v21 ^ (v21 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v21 ^ (v21 >> 31);
  unint64_t v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 43) ^ ((unint64_t)*((unsigned int *)this + 43) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 43) ^ ((unint64_t)*((unsigned int *)this + 43) >> 30))) >> 27));
  unint64_t v24 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 42) ^ ((unint64_t)*((unsigned int *)this + 42) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 42) ^ ((unint64_t)*((unsigned int *)this + 42) >> 30))) >> 27));
  uint64_t v25 = ((v22 << 6)
       + (v22 >> 2)
       + (((v23 ^ (v23 >> 31)) + ((v24 ^ (v24 >> 31)) << 6) + ((v24 ^ (v24 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v24 ^ (v24 >> 31))
       - 0x61C8864680B583E9) ^ v22;
  unint64_t v26 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 37) ^ ((unint64_t)*((unsigned int *)this + 37) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 37) ^ ((unint64_t)*((unsigned int *)this + 37) >> 30))) >> 27));
  unint64_t v27 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 36) ^ ((unint64_t)*((unsigned int *)this + 36) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 36) ^ ((unint64_t)*((unsigned int *)this + 36) >> 30))) >> 27));
  unint64_t v28 = ((v26 ^ (v26 >> 31)) + ((v27 ^ (v27 >> 31)) << 6) + ((v27 ^ (v27 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v27 ^ (v27 >> 31);
  unint64_t v29 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 39) ^ ((unint64_t)*((unsigned int *)this + 39) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 39) ^ ((unint64_t)*((unsigned int *)this + 39) >> 30))) >> 27));
  unint64_t v30 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 38) ^ ((unint64_t)*((unsigned int *)this + 38) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 38) ^ ((unint64_t)*((unsigned int *)this + 38) >> 30))) >> 27));
  uint64_t v31 = ((v28 << 6)
       + (v28 >> 2)
       + (((v29 ^ (v29 >> 31)) + ((v30 ^ (v30 >> 31)) << 6) + ((v30 ^ (v30 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v30 ^ (v30 >> 31))
       - 0x61C8864680B583E9) ^ v28;
  unint64_t v32 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 14) ^ ((unint64_t)*((unsigned int *)this + 14) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 14) ^ ((unint64_t)*((unsigned int *)this + 14) >> 30))) >> 27));
  unint64_t v33 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 13) ^ ((unint64_t)*((unsigned int *)this + 13) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 13) ^ ((unint64_t)*((unsigned int *)this + 13) >> 30))) >> 27));
  uint64_t v34 = ((v32 ^ (v32 >> 31)) + ((v33 ^ (v33 >> 31)) << 6) + ((v33 ^ (v33 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v33 ^ (v33 >> 31);
  unint64_t v35 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 12) ^ ((unint64_t)*((unsigned int *)this + 12) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 12) ^ ((unint64_t)*((unsigned int *)this + 12) >> 30))) >> 27));
  uint64_t v36 = (((v35 ^ (v35 >> 31)) << 6) + ((v35 ^ (v35 >> 31)) >> 2) - 0x61C8864680B583E9 + v34) ^ v35 ^ (v35 >> 31);
  unint64_t v37 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 6) ^ ((unint64_t)*((unsigned int *)this + 6) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 6) ^ ((unint64_t)*((unsigned int *)this + 6) >> 30))) >> 27));
  unint64_t v38 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 5) ^ ((unint64_t)*((unsigned int *)this + 5) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 5) ^ ((unint64_t)*((unsigned int *)this + 5) >> 30))) >> 27));
  uint64_t v39 = ((v37 ^ (v37 >> 31)) + ((v38 ^ (v38 >> 31)) << 6) + ((v38 ^ (v38 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v38 ^ (v38 >> 31);
  unint64_t v40 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 4) ^ ((unint64_t)*((unsigned int *)this + 4) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 4) ^ ((unint64_t)*((unsigned int *)this + 4) >> 30))) >> 27));
  uint64_t v41 = (((v40 ^ (v40 >> 31)) << 6) + ((v40 ^ (v40 >> 31)) >> 2) - 0x61C8864680B583E9 + v39) ^ v40 ^ (v40 >> 31);
  unint64_t v42 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 1) ^ ((unint64_t)*((unsigned int *)this + 1) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 1) ^ ((unint64_t)*((unsigned int *)this + 1) >> 30))) >> 27));
  unint64_t v43 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*(unsigned int *)this ^ ((unint64_t)*(unsigned int *)this >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(unsigned int *)this ^ ((unint64_t)*(unsigned int *)this >> 30))) >> 27));
  unint64_t v44 = ((v42 ^ (v42 >> 31))
       + (((v43 ^ (v43 >> 31)) - 0x61C8864680B583E9) << 6)
       + (((v43 ^ (v43 >> 31)) - 0x61C8864680B583E9) >> 2)
       - 0x61C8864680B583E9) ^ ((v43 ^ (v43 >> 31)) - 0x61C8864680B583E9);
  unint64_t v45 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 2) ^ ((unint64_t)*((unsigned int *)this + 2) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 2) ^ ((unint64_t)*((unsigned int *)this + 2) >> 30))) >> 27));
  unint64_t v46 = ((v45 ^ (v45 >> 31)) + (v44 << 6) + (v44 >> 2) - 0x61C8864680B583E9) ^ v44;
  unint64_t v47 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 3) ^ ((unint64_t)*((unsigned int *)this + 3) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 3) ^ ((unint64_t)*((unsigned int *)this + 3) >> 30))) >> 27));
  uint64_t v48 = (v47 ^ (v47 >> 31)) + (v46 << 6) + (v46 >> 2) - 0x61C8864680B583E9;
  unint64_t v49 = (v41 + ((v48 ^ v46) << 6) + ((v48 ^ v46) >> 2) - 0x61C8864680B583E9) ^ v48 ^ v46;
  unint64_t v50 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 8) ^ ((unint64_t)*((unsigned int *)this + 8) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 8) ^ ((unint64_t)*((unsigned int *)this + 8) >> 30))) >> 27));
  unint64_t v51 = ((v50 ^ (v50 >> 31)) + (v49 << 6) + (v49 >> 2) - 0x61C8864680B583E9) ^ v49;
  unint64_t v52 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 9) ^ ((unint64_t)*((unsigned int *)this + 9) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 9) ^ ((unint64_t)*((unsigned int *)this + 9) >> 30))) >> 27));
  unint64_t v53 = ((v52 ^ (v52 >> 31)) + (v51 << 6) + (v51 >> 2) - 0x61C8864680B583E9) ^ v51;
  unint64_t v54 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((int *)this + 10) ^ ((unint64_t)*((int *)this + 10) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 10) ^ ((unint64_t)*((int *)this + 10) >> 30))) >> 27));
  uint64_t v55 = (v54 ^ (v54 >> 31)) + (v53 << 6) + (v53 >> 2) - 0x61C8864680B583E9;
  unint64_t v56 = (v36 + ((v55 ^ v53) << 6) + ((v55 ^ v53) >> 2) - 0x61C8864680B583E9) ^ v55 ^ v53;
  unint64_t v57 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 16) ^ ((unint64_t)*((unsigned int *)this + 16) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 16) ^ ((unint64_t)*((unsigned int *)this + 16) >> 30))) >> 27));
  unint64_t v58 = ((v57 ^ (v57 >> 31)) + (v56 << 6) + (v56 >> 2) - 0x61C8864680B583E9) ^ v56;
  unint64_t v59 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 17) ^ ((unint64_t)*((unsigned int *)this + 17) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 17) ^ ((unint64_t)*((unsigned int *)this + 17) >> 30))) >> 27));
  unint64_t v60 = ((v59 ^ (v59 >> 31)) + (v58 << 6) + (v58 >> 2) - 0x61C8864680B583E9) ^ v58;
  unint64_t v61 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 18) ^ ((unint64_t)*((unsigned int *)this + 18) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 18) ^ ((unint64_t)*((unsigned int *)this + 18) >> 30))) >> 27));
  unint64_t v62 = ((v61 ^ (v61 >> 31)) + (v60 << 6) + (v60 >> 2) - 0x61C8864680B583E9) ^ v60;
  unint64_t v63 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((void *)this + 10) ^ (*((void *)this + 10) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * (*((void *)this + 10) ^ (*((void *)this + 10) >> 30))) >> 27));
  unint64_t v64 = ((v63 ^ (v63 >> 31)) + (v62 << 6) + (v62 >> 2) - 0x61C8864680B583E9) ^ v62;
  unint64_t v65 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((void *)this + 11) ^ (*((void *)this + 11) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * (*((void *)this + 11) ^ (*((void *)this + 11) >> 30))) >> 27));
  unint64_t v66 = ((v65 ^ (v65 >> 31)) + (v64 << 6) + (v64 >> 2) - 0x61C8864680B583E9) ^ v64;
  unint64_t v67 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 24) ^ ((unint64_t)*((unsigned int *)this + 24) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 24) ^ ((unint64_t)*((unsigned int *)this + 24) >> 30))) >> 27));
  unint64_t v68 = ((v67 ^ (v67 >> 31)) + (v66 << 6) + (v66 >> 2) - 0x61C8864680B583E9) ^ v66;
  unint64_t v69 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 25) ^ ((unint64_t)*((unsigned int *)this + 25) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 25) ^ ((unint64_t)*((unsigned int *)this + 25) >> 30))) >> 27));
  unint64_t v70 = ((v69 ^ (v69 >> 31)) + (v68 << 6) + (v68 >> 2) - 0x61C8864680B583E9) ^ v68;
  unint64_t v71 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 26) ^ ((unint64_t)*((unsigned int *)this + 26) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 26) ^ ((unint64_t)*((unsigned int *)this + 26) >> 30))) >> 27));
  unint64_t v72 = ((v71 ^ (v71 >> 31)) + (v70 << 6) + (v70 >> 2) - 0x61C8864680B583E9) ^ v70;
  unint64_t v73 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 27) ^ ((unint64_t)*((unsigned int *)this + 27) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 27) ^ ((unint64_t)*((unsigned int *)this + 27) >> 30))) >> 27));
  unint64_t v74 = ((v73 ^ (v73 >> 31)) + (v72 << 6) + (v72 >> 2) - 0x61C8864680B583E9) ^ v72;
  unint64_t v75 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 28) ^ ((unint64_t)*((unsigned int *)this + 28) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 28) ^ ((unint64_t)*((unsigned int *)this + 28) >> 30))) >> 27));
  unint64_t v76 = ((v75 ^ (v75 >> 31)) + (v74 << 6) + (v74 >> 2) - 0x61C8864680B583E9) ^ v74;
  unint64_t v77 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 29) ^ ((unint64_t)*((unsigned int *)this + 29) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 29) ^ ((unint64_t)*((unsigned int *)this + 29) >> 30))) >> 27));
  unint64_t v78 = ((v77 ^ (v77 >> 31)) + (v76 << 6) + (v76 >> 2) - 0x61C8864680B583E9) ^ v76;
  unint64_t v79 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((int *)this + 30) ^ ((unint64_t)*((int *)this + 30) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 30) ^ ((unint64_t)*((int *)this + 30) >> 30))) >> 27));
  unint64_t v80 = ((v79 ^ (v79 >> 31)) + (v78 << 6) + (v78 >> 2) - 0x61C8864680B583E9) ^ v78;
  unint64_t v81 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 31) ^ ((unint64_t)*((unsigned int *)this + 31) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 31) ^ ((unint64_t)*((unsigned int *)this + 31) >> 30))) >> 27));
  unint64_t v82 = ((v81 ^ (v81 >> 31)) + (v80 << 6) + (v80 >> 2) - 0x61C8864680B583E9) ^ v80;
  unint64_t v83 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 32) ^ ((unint64_t)*((unsigned int *)this + 32) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 32) ^ ((unint64_t)*((unsigned int *)this + 32) >> 30))) >> 27));
  unint64_t v84 = ((v83 ^ (v83 >> 31)) + (v82 << 6) + (v82 >> 2) - 0x61C8864680B583E9) ^ v82;
  unint64_t v85 = (v31 + (v84 << 6) + (v84 >> 2) - 0x61C8864680B583E9) ^ v84;
  unint64_t v86 = (v25 + (v85 << 6) + (v85 >> 2) - 0x61C8864680B583E9) ^ v85;
  unint64_t v87 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 176)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 176)) >> 27));
  unint64_t v88 = ((v87 ^ (v87 >> 31)) + (v86 << 6) + (v86 >> 2) - 0x61C8864680B583E9) ^ v86;
  unint64_t v89 = (v19 + (v88 << 6) + (v88 >> 2) - 0x61C8864680B583E9) ^ v88;
  unint64_t v90 = ((((v11 << 6)
         + (v11 >> 2)
         + (((v12 ^ (v12 >> 31)) + ((v13 ^ (v13 >> 31)) << 6) + ((v13 ^ (v13 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v13 ^ (v13 >> 31))
         - 0x61C8864680B583E9) ^ v11)
       + (v89 << 6)
       + (v89 >> 2)
       - 0x61C8864680B583E9) ^ v89;
  unint64_t v91 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 224)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 224)) >> 27));
  unint64_t v92 = ((v91 ^ (v91 >> 31)) + (v90 << 6) + (v90 >> 2) - 0x61C8864680B583E9) ^ v90;
  unint64_t v93 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 225)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 225)) >> 27));
  unint64_t v94 = ((v93 ^ (v93 >> 31)) + (v92 << 6) + (v92 >> 2) - 0x61C8864680B583E9) ^ v92;
  unint64_t v95 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 57) ^ ((unint64_t)*((unsigned int *)this + 57) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 57) ^ ((unint64_t)*((unsigned int *)this + 57) >> 30))) >> 27));
  unint64_t v96 = ((v95 ^ (v95 >> 31)) + (v94 << 6) + (v94 >> 2) - 0x61C8864680B583E9) ^ v94;
  unint64_t v97 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 58) ^ ((unint64_t)*((unsigned int *)this + 58) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 58) ^ ((unint64_t)*((unsigned int *)this + 58) >> 30))) >> 27));
  unint64_t v98 = ((v97 ^ (v97 >> 31)) + (v96 << 6) + (v96 >> 2) - 0x61C8864680B583E9) ^ v96;
  unint64_t v99 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 59) ^ ((unint64_t)*((unsigned int *)this + 59) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 59) ^ ((unint64_t)*((unsigned int *)this + 59) >> 30))) >> 27));
  unint64_t v100 = ((v99 ^ (v99 >> 31)) + (v98 << 6) + (v98 >> 2) - 0x61C8864680B583E9) ^ v98;
  unint64_t v101 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 60) ^ ((unint64_t)*((unsigned int *)this + 60) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 60) ^ ((unint64_t)*((unsigned int *)this + 60) >> 30))) >> 27));
  unint64_t v102 = ((v101 ^ (v101 >> 31)) + (v100 << 6) + (v100 >> 2) - 0x61C8864680B583E9) ^ v100;
  unint64_t v103 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 61) ^ ((unint64_t)*((unsigned int *)this + 61) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 61) ^ ((unint64_t)*((unsigned int *)this + 61) >> 30))) >> 27));
  unint64_t v104 = ((v103 ^ (v103 >> 31)) + (v102 << 6) + (v102 >> 2) - 0x61C8864680B583E9) ^ v102;
  unint64_t v105 = (((((v8 ^ (v8 >> 31)) << 6) + ((v8 ^ (v8 >> 31)) >> 2) - 0x61C8864680B583E9 + v7) ^ v8 ^ (v8 >> 31))
        + (v104 << 6)
        + (v104 >> 2)
        - 0x61C8864680B583E9) ^ v104;
  unint64_t v106 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 68) ^ ((unint64_t)*((unsigned int *)this + 68) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 68) ^ ((unint64_t)*((unsigned int *)this + 68) >> 30))) >> 27));
  unint64_t v107 = ((v106 ^ (v106 >> 31)) + (v105 << 6) + (v105 >> 2) - 0x61C8864680B583E9) ^ v105;
  unint64_t v108 = (((((v4 ^ (v4 >> 31)) << 6)
          + ((v4 ^ (v4 >> 31)) >> 2)
          - 0x61C8864680B583E9
          + ((((0x94D049BB133111EBLL * v2) ^ ((0x94D049BB133111EBLL * v2) >> 31))
            + ((v3 ^ (v3 >> 31)) << 6)
            + ((v3 ^ (v3 >> 31)) >> 2)
            - 0x61C8864680B583E9) ^ v3 ^ (v3 >> 31))) ^ v4 ^ (v4 >> 31))
        + (v107 << 6)
        + (v107 >> 2)
        - 0x61C8864680B583E9) ^ v107;
  unint64_t v109 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 304)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 304)) >> 27));
  unint64_t v110 = ((v109 ^ (v109 >> 31)) + (v108 << 6) + (v108 >> 2) - 0x61C8864680B583E9) ^ v108;
  unint64_t v111 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 77) ^ ((unint64_t)*((unsigned int *)this + 77) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 77) ^ ((unint64_t)*((unsigned int *)this + 77) >> 30))) >> 27));
  unint64_t v112 = ((v111 ^ (v111 >> 31)) + (v110 << 6) + (v110 >> 2) - 0x61C8864680B583E9) ^ v110;
  unint64_t v113 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((int *)this + 78) ^ ((unint64_t)*((int *)this + 78) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 78) ^ ((unint64_t)*((int *)this + 78) >> 30))) >> 27));
  unint64_t v114 = ((v113 ^ (v113 >> 31)) + (v112 << 6) + (v112 >> 2) - 0x61C8864680B583E9) ^ v112;
  unint64_t v115 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((int *)this + 79) ^ ((unint64_t)*((int *)this + 79) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 79) ^ ((unint64_t)*((int *)this + 79) >> 30))) >> 27));
  unint64_t v116 = ((v115 ^ (v115 >> 31)) + (v114 << 6) + (v114 >> 2) - 0x61C8864680B583E9) ^ v114;
  unint64_t v117 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v1 ^ (v1 >> 30))) >> 27));
  unint64_t v118 = ((v116 << 6) + (v116 >> 2) + (v137 ^ (v117 >> 31) ^ v117) - 0x61C8864680B583E9) ^ v116;
  unint64_t v119 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 344)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 344)) >> 27));
  unint64_t v120 = ((v118 << 6) + (v118 >> 2) + (v119 ^ (v119 >> 31)) - 0x61C8864680B583E9) ^ v118;
  unint64_t v121 = 0xBF58476D1CE4E5B9 * (*((void *)this + 44) ^ (*((void *)this + 44) >> 30));
  unint64_t v122 = (((0x94D049BB133111EBLL * (v121 ^ (v121 >> 27))) ^ ((0x94D049BB133111EBLL * (v121 ^ (v121 >> 27))) >> 31))
        + (v120 << 6)
        + (v120 >> 2)
        - 0x61C8864680B583E9) ^ v120;
  unint64_t v123 = 0xBF58476D1CE4E5B9 * (*((void *)this + 45) ^ (*((void *)this + 45) >> 30));
  unint64_t v124 = (((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) ^ ((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) >> 31))
        + (v122 << 6)
        + (v122 >> 2)
        - 0x61C8864680B583E9) ^ v122;
  unint64_t v125 = 0xBF58476D1CE4E5B9 * (*((void *)this + 46) ^ (*((void *)this + 46) >> 30));
  unint64_t v126 = (((0x94D049BB133111EBLL * (v125 ^ (v125 >> 27))) ^ ((0x94D049BB133111EBLL * (v125 ^ (v125 >> 27))) >> 31))
        + (v124 << 6)
        + (v124 >> 2)
        - 0x61C8864680B583E9) ^ v124;
  unint64_t v127 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (*((void *)this + 47) ^ (*((void *)this + 47) >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                               * (*((void *)this + 47) ^ (*((void *)this + 47) >> 30))) >> 27));
  unint64_t v128 = ((v127 ^ (v127 >> 31)) + (v126 << 6) + (v126 >> 2) - 0x61C8864680B583E9) ^ v126;
  unint64_t v129 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 96) ^ ((unint64_t)*((unsigned int *)this + 96) >> 30));
  unint64_t v130 = (((0x94D049BB133111EBLL * (v129 ^ (v129 >> 27))) ^ ((0x94D049BB133111EBLL * (v129 ^ (v129 >> 27))) >> 31))
        + (v128 << 6)
        + (v128 >> 2)
        - 0x61C8864680B583E9) ^ v128;
  unint64_t v131 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 97) ^ ((unint64_t)*((unsigned int *)this + 97) >> 30));
  unint64_t v132 = (((0x94D049BB133111EBLL * (v131 ^ (v131 >> 27))) ^ ((0x94D049BB133111EBLL * (v131 ^ (v131 >> 27))) >> 31))
        + (v130 << 6)
        + (v130 >> 2)
        - 0x61C8864680B583E9) ^ v130;
  unint64_t v133 = 0xBF58476D1CE4E5B9 * (*((int *)this + 98) ^ ((unint64_t)*((int *)this + 98) >> 30));
  unint64_t v134 = (((0x94D049BB133111EBLL * (v133 ^ (v133 >> 27))) ^ ((0x94D049BB133111EBLL * (v133 ^ (v133 >> 27))) >> 31))
        + (v132 << 6)
        + (v132 >> 2)
        - 0x61C8864680B583E9) ^ v132;
  unint64_t v135 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 396)) ^ ((0xBF58476D1CE4E5B9
                                                                      * *((unsigned __int8 *)this + 396)) >> 27));
  return ((v135 ^ (v135 >> 31)) + (v134 << 6) + (v134 >> 2) - 0x61C8864680B583E9) ^ v134;
}

unint64_t re::ecs2::VFXEmitterComponentState::hash(re::ecs2::VFXEmitterComponentState *this)
{
  unint64_t v2 = 0xBF58476D1CE4E5B9 * (*(void *)this ^ (*(void *)this >> 30));
  unint64_t v3 = ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
     - 0x61C8864680B583E9;
  unint64_t v4 = 0xBF58476D1CE4E5B9 * (*((void *)this + 1) ^ (*((void *)this + 1) >> 30));
  unint64_t v5 = (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
      + (v3 << 6)
      + (v3 >> 2)
      - 0x61C8864680B583E9) ^ v3;
  unint64_t v6 = 0xBF58476D1CE4E5B9 * (*((void *)this + 2) ^ (*((void *)this + 2) >> 30));
  unint64_t v7 = (((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31))
      + (v5 << 6)
      + (v5 >> 2)
      - 0x61C8864680B583E9) ^ v5;
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*((void *)this + 3) ^ (*((void *)this + 3) >> 30));
  unint64_t v9 = (((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31))
      + (v7 << 6)
      + (v7 >> 2)
      - 0x61C8864680B583E9) ^ v7;
  unint64_t v10 = 0xBF58476D1CE4E5B9 * (*((void *)this + 4) ^ (*((void *)this + 4) >> 30));
  unint64_t v11 = (((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31))
       + (v9 << 6)
       + (v9 >> 2)
       - 0x61C8864680B583E9) ^ v9;
  unint64_t v12 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 40)) ^ ((0xBF58476D1CE4E5B9
                                                                    * *((unsigned __int8 *)this + 40)) >> 27));
  unint64_t v13 = ((v12 ^ (v12 >> 31)) + (v11 << 6) + (v11 >> 2) - 0x61C8864680B583E9) ^ v11;
  unint64_t v14 = 0xBF58476D1CE4E5B9 * (*((int *)this + 11) ^ ((unint64_t)*((int *)this + 11) >> 30));
  unint64_t v15 = (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31))
       + (v13 << 6)
       + (v13 >> 2)
       - 0x61C8864680B583E9) ^ v13;
  unint64_t v16 = 0xBF58476D1CE4E5B9 * (*((int *)this + 12) ^ ((unint64_t)*((int *)this + 12) >> 30));
  unint64_t v17 = (((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) ^ ((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) >> 31))
       + (v15 << 6)
       + (v15 >> 2)
       - 0x61C8864680B583E9) ^ v15;
  unint64_t v18 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 16) ^ ((unint64_t)*((unsigned int *)this + 16) >> 30));
  unint64_t v19 = (0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) ^ ((0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) >> 31);
  unint64_t v20 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 17) ^ ((unint64_t)*((unsigned int *)this + 17) >> 30));
  unint64_t v21 = (0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31);
  unint64_t v22 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 18) ^ ((unint64_t)*((unsigned int *)this + 18) >> 30));
  unint64_t v23 = ((((v19 << 6)
         + (v19 >> 2)
         - 0x61C8864680B583E9
         + ((((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
           + (v21 << 6)
           + (v21 >> 2)
           - 0x61C8864680B583E9) ^ v21)) ^ v19)
       + (v17 << 6)
       + (v17 >> 2)
       - 0x61C8864680B583E9) ^ v17;
  unint64_t v24 = 0xBF58476D1CE4E5B9 * (*((int *)this + 20) ^ ((unint64_t)*((int *)this + 20) >> 30));
  unint64_t v25 = (((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) ^ ((0x94D049BB133111EBLL * (v24 ^ (v24 >> 27))) >> 31))
       + (v23 << 6)
       + (v23 >> 2)
       - 0x61C8864680B583E9) ^ v23;
  unint64_t v26 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 28) ^ ((unint64_t)*((unsigned int *)this + 28) >> 30));
  unint64_t v27 = (0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31);
  unint64_t v28 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 29) ^ ((unint64_t)*((unsigned int *)this + 29) >> 30));
  unint64_t v29 = (0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31);
  unint64_t v30 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 30) ^ ((unint64_t)*((unsigned int *)this + 30) >> 30));
  unint64_t v31 = ((((v27 << 6)
         + (v27 >> 2)
         - 0x61C8864680B583E9
         + ((((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31))
           + (v29 << 6)
           + (v29 >> 2)
           - 0x61C8864680B583E9) ^ v29)) ^ v27)
       + (v25 << 6)
       + (v25 >> 2)
       - 0x61C8864680B583E9) ^ v25;
  unint64_t v32 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 32) ^ ((unint64_t)*((unsigned int *)this + 32) >> 30));
  unint64_t v33 = (((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) ^ ((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) >> 31))
       + (v31 << 6)
       + (v31 >> 2)
       - 0x61C8864680B583E9) ^ v31;
  unint64_t v34 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 33) ^ ((unint64_t)*((unsigned int *)this + 33) >> 30));
  unint64_t v35 = (((0x94D049BB133111EBLL * (v34 ^ (v34 >> 27))) ^ ((0x94D049BB133111EBLL * (v34 ^ (v34 >> 27))) >> 31))
       + (v33 << 6)
       + (v33 >> 2)
       - 0x61C8864680B583E9) ^ v33;
  unint64_t v36 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 34) ^ ((unint64_t)*((unsigned int *)this + 34) >> 30));
  unint64_t v37 = (((0x94D049BB133111EBLL * (v36 ^ (v36 >> 27))) ^ ((0x94D049BB133111EBLL * (v36 ^ (v36 >> 27))) >> 31))
       + (v35 << 6)
       + (v35 >> 2)
       - 0x61C8864680B583E9) ^ v35;
  unint64_t v38 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 35) ^ ((unint64_t)*((unsigned int *)this + 35) >> 30));
  unint64_t v39 = (((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) ^ ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) >> 31))
       + (v37 << 6)
       + (v37 >> 2)
       - 0x61C8864680B583E9) ^ v37;
  unint64_t v40 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 24) ^ ((unint64_t)*((unsigned int *)this + 24) >> 30));
  unint64_t v41 = (0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) ^ ((0x94D049BB133111EBLL * (v40 ^ (v40 >> 27))) >> 31);
  unint64_t v42 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 25) ^ ((unint64_t)*((unsigned int *)this + 25) >> 30));
  unint64_t v43 = (0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) ^ ((0x94D049BB133111EBLL * (v42 ^ (v42 >> 27))) >> 31);
  unint64_t v44 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 26) ^ ((unint64_t)*((unsigned int *)this + 26) >> 30));
  unint64_t v45 = ((((v41 << 6)
         + (v41 >> 2)
         - 0x61C8864680B583E9
         + ((((0x94D049BB133111EBLL * (v44 ^ (v44 >> 27))) ^ ((0x94D049BB133111EBLL * (v44 ^ (v44 >> 27))) >> 31))
           + (v43 << 6)
           + (v43 >> 2)
           - 0x61C8864680B583E9) ^ v43)) ^ v41)
       + (v39 << 6)
       + (v39 >> 2)
       - 0x61C8864680B583E9) ^ v39;
  unint64_t v46 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 148)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 148)) >> 27));
  unint64_t v47 = ((v46 ^ (v46 >> 31)) + (v45 << 6) + (v45 >> 2) - 0x61C8864680B583E9) ^ v45;
  unint64_t v48 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 149)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 149)) >> 27));
  unint64_t v49 = ((v48 ^ (v48 >> 31)) + (v47 << 6) + (v47 >> 2) - 0x61C8864680B583E9) ^ v47;
  unint64_t v50 = 0xBF58476D1CE4E5B9 * (*((int *)this + 38) ^ ((unint64_t)*((int *)this + 38) >> 30));
  unint64_t v51 = (((0x94D049BB133111EBLL * (v50 ^ (v50 >> 27))) ^ ((0x94D049BB133111EBLL * (v50 ^ (v50 >> 27))) >> 31))
       + (v49 << 6)
       + (v49 >> 2)
       - 0x61C8864680B583E9) ^ v49;
  unint64_t v52 = 0xBF58476D1CE4E5B9 * (*((void *)this + 20) ^ (*((void *)this + 20) >> 30));
  unint64_t v53 = (((0x94D049BB133111EBLL * (v52 ^ (v52 >> 27))) ^ ((0x94D049BB133111EBLL * (v52 ^ (v52 >> 27))) >> 31))
       + (v51 << 6)
       + (v51 >> 2)
       - 0x61C8864680B583E9) ^ v51;
  unint64_t v54 = 0xBF58476D1CE4E5B9 * (*((void *)this + 22) ^ (*((void *)this + 22) >> 30));
  unint64_t v55 = (((0x94D049BB133111EBLL * (v54 ^ (v54 >> 27))) ^ ((0x94D049BB133111EBLL * (v54 ^ (v54 >> 27))) >> 31))
       + (v53 << 6)
       + (v53 >> 2)
       - 0x61C8864680B583E9) ^ v53;
  unint64_t v56 = 0xBF58476D1CE4E5B9 * (*((void *)this + 23) ^ (*((void *)this + 23) >> 30));
  unint64_t v57 = (((0x94D049BB133111EBLL * (v56 ^ (v56 >> 27))) ^ ((0x94D049BB133111EBLL * (v56 ^ (v56 >> 27))) >> 31))
       + (v55 << 6)
       + (v55 >> 2)
       - 0x61C8864680B583E9) ^ v55;
  unint64_t v58 = 0xBF58476D1CE4E5B9 * (*((void *)this + 24) ^ (*((void *)this + 24) >> 30));
  unint64_t v59 = (((0x94D049BB133111EBLL * (v58 ^ (v58 >> 27))) ^ ((0x94D049BB133111EBLL * (v58 ^ (v58 >> 27))) >> 31))
       + (v57 << 6)
       + (v57 >> 2)
       - 0x61C8864680B583E9) ^ v57;
  unint64_t v60 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 168)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 168)) >> 27));
  unint64_t v61 = ((v60 ^ (v60 >> 31)) + (v59 << 6) + (v59 >> 2) - 0x61C8864680B583E9) ^ v59;
  unint64_t v62 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 50) ^ ((unint64_t)*((unsigned int *)this + 50) >> 30));
  unint64_t v63 = (((0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) ^ ((0x94D049BB133111EBLL * (v62 ^ (v62 >> 27))) >> 31))
       + (v61 << 6)
       + (v61 >> 2)
       - 0x61C8864680B583E9) ^ v61;
  unint64_t v64 = 0xBF58476D1CE4E5B9 * (*((int *)this + 36) ^ ((unint64_t)*((int *)this + 36) >> 30));
  unint64_t v65 = (((0x94D049BB133111EBLL * (v64 ^ (v64 >> 27))) ^ ((0x94D049BB133111EBLL * (v64 ^ (v64 >> 27))) >> 31))
       + (v63 << 6)
       + (v63 >> 2)
       - 0x61C8864680B583E9) ^ v63;
  unint64_t v66 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 204)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 204)) >> 27));
  unint64_t v67 = ((v66 ^ (v66 >> 31)) + (v65 << 6) + (v65 >> 2) - 0x61C8864680B583E9) ^ v65;
  unint64_t v68 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 52) ^ ((unint64_t)*((unsigned int *)this + 52) >> 30));
  unint64_t v69 = (((0x94D049BB133111EBLL * (v68 ^ (v68 >> 27))) ^ ((0x94D049BB133111EBLL * (v68 ^ (v68 >> 27))) >> 31))
       + (v67 << 6)
       + (v67 >> 2)
       - 0x61C8864680B583E9) ^ v67;
  unint64_t v70 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 53) ^ ((unint64_t)*((unsigned int *)this + 53) >> 30))) >> 27));
  unint64_t v71 = ((v70 ^ (v70 >> 31)) + (v69 << 6) + (v69 >> 2) - 0x61C8864680B583E9) ^ v69;
  unint64_t v72 = 0xBF58476D1CE4E5B9 * (*((unsigned int *)this + 54) ^ ((unint64_t)*((unsigned int *)this + 54) >> 30));
  unint64_t v73 = (((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) ^ ((0x94D049BB133111EBLL * (v72 ^ (v72 >> 27))) >> 31))
       + (v71 << 6)
       + (v71 >> 2)
       - 0x61C8864680B583E9) ^ v71;
  unint64_t v74 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 220)) ^ ((0xBF58476D1CE4E5B9
                                                                     * *((unsigned __int8 *)this + 220)) >> 27));
  unint64_t v75 = ((v74 ^ (v74 >> 31)) + (v73 << 6) + (v73 >> 2) - 0x61C8864680B583E9) ^ v73;
  uint64_t v76 = *((void *)this + 28) ^ (*((void *)this + 28) >> 30);
  unint64_t v77 = (((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v76) ^ ((0xBF58476D1CE4E5B9 * v76) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v76) ^ ((0xBF58476D1CE4E5B9 * v76) >> 27))) >> 31))
       + (v75 << 6)
       + (v75 >> 2)
       - 0x61C8864680B583E9) ^ v75;
  unint64_t v78 = (re::ecs2::ParticleEmitter::hash((re::ecs2::VFXEmitterComponentState *)((char *)this + 240))
       + (v77 << 6)
       + (v77 >> 2)
       - 0x61C8864680B583E9) ^ v77;
  return (re::ecs2::ParticleEmitter::hash((re::ecs2::VFXEmitterComponentState *)((char *)this + 640))
        + (v78 << 6)
        + (v78 >> 2)
        - 0x61C8864680B583E9) ^ v78;
}

uint64_t re::ecs2::VFXEmitterComponent::VFXEmitterComponent(re::ecs2::VFXEmitterComponent *this)
{
  uint64_t v1 = MEMORY[0x270FA5388](this);
  uint64_t v534 = *MEMORY[0x263EF8340];
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v1, 0);
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_26E6FCF68;
  re::ecs2::VFXSceneComponent::createDetachedSceneComponent((void *)(v2 + 32));
  *(unsigned char *)(v1 + 40) = 0;
  re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState((re::ecs2::VFXEmitterComponentState *)(v1 + 48));
  re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState((re::ecs2::VFXEmitterComponentState *)(v1 + 1136));
  unint64_t v3 = operator new(0x10uLL);
  *(void *)(v1 + 2224) = v3;
  *v3++ = 0u;
  *(void *)(v1 + 2240) = v3;
  *(void *)(v1 + 2232) = v3;
  *(_OWORD *)(v1 + 2248) = 0u;
  *(_OWORD *)(v1 + 2264) = 0u;
  *(_OWORD *)(v1 + 2280) = 0u;
  __src[0] = 0;
  __src[1] = v1 + 48;
  __src[2] = v1 + 1136;
  long long v17 = 0u;
  uint64_t v18 = 1;
  uint64_t v19 = v1 + 56;
  uint64_t v20 = v1 + 1144;
  long long v21 = 0u;
  uint64_t v22 = 2;
  uint64_t v23 = v1 + 64;
  uint64_t v24 = v1 + 1152;
  long long v25 = 0u;
  uint64_t v26 = 3;
  uint64_t v27 = v1 + 72;
  uint64_t v28 = v1 + 1160;
  long long v29 = 0u;
  uint64_t v30 = 4;
  uint64_t v31 = v1 + 80;
  uint64_t v32 = v1 + 1168;
  long long v33 = 0u;
  uint64_t v34 = 5;
  uint64_t v35 = v1 + 88;
  uint64_t v36 = v1 + 1176;
  long long v37 = 0u;
  uint64_t v38 = 6;
  uint64_t v39 = v1 + 92;
  long long v41 = 0u;
  uint64_t v40 = v1 + 1180;
  uint64_t v42 = 7;
  uint64_t v43 = v1 + 176;
  uint64_t v44 = v1 + 1264;
  long long v45 = 0u;
  uint64_t v46 = 8;
  uint64_t v47 = v1 + 180;
  long long v49 = 0u;
  uint64_t v48 = v1 + 1268;
  uint64_t v50 = 9;
  uint64_t v51 = v1 + 96;
  uint64_t v52 = v1 + 1184;
  long long v53 = 0u;
  uint64_t v54 = 10;
  uint64_t v55 = v1 + 112;
  long long v57 = 0u;
  uint64_t v56 = v1 + 1200;
  uint64_t v58 = 11;
  uint64_t v59 = v1 + 128;
  uint64_t v60 = v1 + 1216;
  long long v61 = 0u;
  uint64_t v62 = 12;
  uint64_t v63 = v1 + 160;
  long long v65 = 0u;
  uint64_t v64 = v1 + 1248;
  uint64_t v66 = 13;
  uint64_t v67 = v1 + 184;
  uint64_t v68 = v1 + 1272;
  long long v69 = 0u;
  uint64_t v70 = 14;
  uint64_t v71 = v1 + 188;
  uint64_t v72 = v1 + 1276;
  long long v73 = 0u;
  uint64_t v74 = 15;
  uint64_t v75 = v1 + 144;
  uint64_t v76 = v1 + 1232;
  long long v77 = 0u;
  uint64_t v78 = 16;
  uint64_t v79 = v1 + 196;
  uint64_t v80 = v1 + 1284;
  long long v81 = 0u;
  uint64_t v82 = 17;
  uint64_t v83 = v1 + 197;
  uint64_t v84 = v1 + 1285;
  long long v85 = 0u;
  uint64_t v86 = 18;
  uint64_t v87 = v1 + 208;
  uint64_t v88 = v1 + 1296;
  long long v89 = 0u;
  uint64_t v90 = 19;
  uint64_t v91 = v1 + 224;
  uint64_t v92 = v1 + 1312;
  long long v93 = 0u;
  uint64_t v94 = 20;
  uint64_t v95 = v1 + 232;
  uint64_t v96 = v1 + 1320;
  long long v97 = 0u;
  uint64_t v98 = 21;
  uint64_t v99 = v1 + 240;
  uint64_t v100 = v1 + 1328;
  long long v101 = 0u;
  uint64_t v102 = 22;
  uint64_t v103 = v1 + 192;
  uint64_t v104 = v1 + 1280;
  long long v105 = 0u;
  uint64_t v106 = 23;
  uint64_t v107 = v1 + 252;
  uint64_t v108 = v1 + 1340;
  long long v109 = 0u;
  uint64_t v110 = 24;
  uint64_t v111 = v1 + 256;
  uint64_t v112 = v1 + 1344;
  long long v113 = 0u;
  uint64_t v114 = 25;
  uint64_t v115 = v1 + 260;
  uint64_t v116 = v1 + 1348;
  long long v117 = 0u;
  uint64_t v118 = 26;
  uint64_t v119 = v1 + 264;
  uint64_t v120 = v1 + 1352;
  long long v121 = 0u;
  uint64_t v122 = 27;
  uint64_t v123 = v1 + 268;
  uint64_t v124 = v1 + 1356;
  long long v125 = 0u;
  uint64_t v126 = 28;
  uint64_t v127 = v1 + 288;
  uint64_t v128 = v1 + 1376;
  long long v129 = 0u;
  uint64_t v130 = 29;
  uint64_t v131 = v1 + 292;
  uint64_t v132 = v1 + 1380;
  long long v133 = 0u;
  uint64_t v134 = 30;
  uint64_t v135 = v1 + 296;
  uint64_t v136 = v1 + 1384;
  long long v137 = 0u;
  uint64_t v138 = 31;
  uint64_t v139 = v1 + 300;
  uint64_t v140 = v1 + 1388;
  long long v141 = 0u;
  uint64_t v142 = 32;
  uint64_t v143 = v1 + 304;
  uint64_t v144 = v1 + 1392;
  long long v145 = 0u;
  uint64_t v146 = 33;
  uint64_t v147 = v1 + 320;
  uint64_t v148 = v1 + 1408;
  long long v149 = 0u;
  uint64_t v150 = 34;
  uint64_t v151 = v1 + 324;
  uint64_t v152 = v1 + 1412;
  long long v153 = 0u;
  uint64_t v154 = 35;
  uint64_t v155 = v1 + 328;
  uint64_t v156 = v1 + 1416;
  long long v157 = 0u;
  uint64_t v158 = 36;
  uint64_t v159 = v1 + 336;
  uint64_t v160 = v1 + 1424;
  long long v161 = 0u;
  uint64_t v162 = 37;
  uint64_t v163 = v1 + 352;
  uint64_t v164 = v1 + 1440;
  long long v165 = 0u;
  uint64_t v166 = 38;
  uint64_t v167 = v1 + 356;
  uint64_t v168 = v1 + 1444;
  long long v169 = 0u;
  uint64_t v170 = 39;
  uint64_t v171 = v1 + 360;
  uint64_t v172 = v1 + 1448;
  long long v173 = 0u;
  uint64_t v174 = 40;
  uint64_t v175 = v1 + 368;
  uint64_t v176 = v1 + 1456;
  long long v177 = 0u;
  uint64_t v178 = 41;
  uint64_t v179 = v1 + 376;
  uint64_t v180 = v1 + 1464;
  long long v181 = 0u;
  uint64_t v182 = 42;
  uint64_t v183 = v1 + 384;
  uint64_t v184 = v1 + 1472;
  long long v185 = 0u;
  uint64_t v186 = 43;
  uint64_t v187 = v1 + 388;
  uint64_t v188 = v1 + 1476;
  long long v189 = 0u;
  uint64_t v190 = 44;
  uint64_t v191 = v1 + 392;
  uint64_t v192 = v1 + 1480;
  long long v193 = 0u;
  uint64_t v194 = 45;
  uint64_t v195 = v1 + 396;
  uint64_t v196 = v1 + 1484;
  long long v197 = 0u;
  uint64_t v198 = 46;
  uint64_t v199 = v1 + 400;
  uint64_t v200 = v1 + 1488;
  long long v201 = 0u;
  uint64_t v202 = 47;
  uint64_t v203 = v1 + 404;
  uint64_t v204 = v1 + 1492;
  long long v205 = 0u;
  uint64_t v206 = 48;
  uint64_t v207 = v1 + 408;
  uint64_t v208 = v1 + 1496;
  long long v209 = 0u;
  uint64_t v210 = 49;
  uint64_t v211 = v1 + 412;
  uint64_t v212 = v1 + 1500;
  long long v213 = 0u;
  uint64_t v214 = 50;
  uint64_t v215 = v1 + 416;
  uint64_t v216 = v1 + 1504;
  long long v217 = 0u;
  uint64_t v218 = 51;
  uint64_t v219 = v1 + 432;
  uint64_t v220 = v1 + 1520;
  long long v221 = 0u;
  uint64_t v222 = 52;
  uint64_t v223 = v1 + 448;
  uint64_t v224 = v1 + 1536;
  long long v225 = 0u;
  uint64_t v226 = 53;
  uint64_t v227 = v1 + 464;
  uint64_t v228 = v1 + 1552;
  long long v229 = 0u;
  uint64_t v230 = 54;
  uint64_t v231 = v1 + 480;
  uint64_t v232 = v1 + 1568;
  long long v233 = 0u;
  uint64_t v234 = 55;
  uint64_t v235 = v1 + 496;
  uint64_t v236 = v1 + 1584;
  long long v237 = 0u;
  uint64_t v238 = 56;
  uint64_t v239 = v1 + 512;
  uint64_t v240 = v1 + 1600;
  long long v241 = 0u;
  uint64_t v242 = 57;
  uint64_t v243 = v1 + 513;
  uint64_t v244 = v1 + 1601;
  long long v245 = 0u;
  uint64_t v246 = 58;
  uint64_t v247 = v1 + 516;
  uint64_t v248 = v1 + 1604;
  long long v249 = 0u;
  uint64_t v250 = 59;
  uint64_t v251 = v1 + 520;
  uint64_t v252 = v1 + 1608;
  long long v253 = 0u;
  uint64_t v254 = 60;
  uint64_t v255 = v1 + 524;
  uint64_t v256 = v1 + 1612;
  long long v257 = 0u;
  uint64_t v258 = 61;
  uint64_t v259 = v1 + 528;
  uint64_t v267 = v1 + 544;
  uint64_t v268 = v1 + 1632;
  long long v269 = 0u;
  uint64_t v270 = 64;
  uint64_t v271 = v1 + 560;
  uint64_t v272 = v1 + 1648;
  long long v273 = 0u;
  uint64_t v274 = 65;
  uint64_t v275 = v1 + 576;
  uint64_t v276 = v1 + 1664;
  long long v277 = 0u;
  uint64_t v278 = 66;
  uint64_t v279 = v1 + 592;
  uint64_t v280 = v1 + 1680;
  long long v281 = 0u;
  uint64_t v282 = 67;
  uint64_t v283 = v1 + 596;
  uint64_t v284 = v1 + 1684;
  long long v285 = 0u;
  uint64_t v286 = 68;
  uint64_t v287 = v1 + 600;
  uint64_t v288 = v1 + 1688;
  long long v289 = 0u;
  uint64_t v290 = 69;
  uint64_t v291 = v1 + 604;
  uint64_t v292 = v1 + 1692;
  long long v293 = 0u;
  uint64_t v294 = 70;
  uint64_t v295 = v1 + 632;
  uint64_t v296 = v1 + 1720;
  long long v297 = 0u;
  uint64_t v298 = 71;
  uint64_t v299 = v1 + 640;
  uint64_t v300 = v1 + 1728;
  long long v301 = 0u;
  uint64_t v302 = 72;
  uint64_t v303 = v1 + 648;
  uint64_t v304 = v1 + 1736;
  long long v305 = 0u;
  uint64_t v306 = 73;
  uint64_t v307 = v1 + 656;
  uint64_t v308 = v1 + 1744;
  long long v309 = 0u;
  uint64_t v310 = 74;
  uint64_t v311 = v1 + 664;
  uint64_t v312 = v1 + 1752;
  long long v313 = 0u;
  uint64_t v314 = 75;
  uint64_t v315 = v1 + 672;
  uint64_t v316 = v1 + 1760;
  long long v317 = 0u;
  uint64_t v318 = 76;
  uint64_t v319 = v1 + 676;
  uint64_t v320 = v1 + 1764;
  long long v321 = 0u;
  uint64_t v322 = 77;
  uint64_t v323 = v1 + 680;
  uint64_t v324 = v1 + 1768;
  long long v325 = 0u;
  uint64_t v326 = 78;
  uint64_t v327 = v1 + 684;
  uint64_t v328 = v1 + 1772;
  long long v329 = 0u;
  uint64_t v330 = 79;
  uint64_t v331 = v1 + 688;
  uint64_t v332 = v1 + 1776;
  long long v333 = 0u;
  uint64_t v334 = 80;
  uint64_t v335 = v1 + 692;
  uint64_t v336 = v1 + 1780;
  long long v337 = 0u;
  uint64_t v338 = 81;
  uint64_t v339 = v1 + 696;
  uint64_t v340 = v1 + 1784;
  long long v341 = 0u;
  uint64_t v342 = 82;
  uint64_t v343 = v1 + 700;
  uint64_t v344 = v1 + 1788;
  long long v345 = 0u;
  uint64_t v346 = 83;
  uint64_t v347 = v1 + 704;
  uint64_t v348 = v1 + 1792;
  long long v349 = 0u;
  uint64_t v350 = 84;
  uint64_t v351 = v1 + 720;
  uint64_t v352 = v1 + 1808;
  long long v353 = 0u;
  uint64_t v354 = 85;
  uint64_t v355 = v1 + 724;
  uint64_t v356 = v1 + 1812;
  long long v357 = 0u;
  uint64_t v358 = 86;
  uint64_t v359 = v1 + 728;
  uint64_t v360 = v1 + 1816;
  long long v361 = 0u;
  uint64_t v362 = 87;
  uint64_t v363 = v1 + 736;
  uint64_t v364 = v1 + 1824;
  long long v365 = 0u;
  uint64_t v366 = 88;
  uint64_t v367 = v1 + 752;
  uint64_t v368 = v1 + 1840;
  long long v369 = 0u;
  uint64_t v370 = 89;
  uint64_t v371 = v1 + 756;
  uint64_t v372 = v1 + 1844;
  long long v373 = 0u;
  uint64_t v374 = 90;
  uint64_t v375 = v1 + 760;
  uint64_t v376 = v1 + 1848;
  long long v377 = 0u;
  uint64_t v378 = 91;
  uint64_t v379 = v1 + 768;
  uint64_t v380 = v1 + 1856;
  long long v381 = 0u;
  uint64_t v382 = 92;
  uint64_t v383 = v1 + 776;
  uint64_t v384 = v1 + 1864;
  long long v385 = 0u;
  uint64_t v386 = 93;
  uint64_t v387 = v1 + 784;
  uint64_t v388 = v1 + 1872;
  long long v389 = 0u;
  uint64_t v390 = 94;
  uint64_t v391 = v1 + 788;
  uint64_t v392 = v1 + 1876;
  long long v393 = 0u;
  uint64_t v394 = 95;
  uint64_t v395 = v1 + 792;
  uint64_t v396 = v1 + 1880;
  long long v397 = 0u;
  uint64_t v398 = 96;
  uint64_t v399 = v1 + 796;
  uint64_t v400 = v1 + 1884;
  long long v401 = 0u;
  uint64_t v402 = 97;
  uint64_t v403 = v1 + 800;
  uint64_t v404 = v1 + 1888;
  long long v405 = 0u;
  uint64_t v406 = 98;
  uint64_t v407 = v1 + 804;
  uint64_t v408 = v1 + 1892;
  long long v409 = 0u;
  uint64_t v410 = 99;
  uint64_t v411 = v1 + 808;
  uint64_t v412 = v1 + 1896;
  long long v413 = 0u;
  uint64_t v414 = 100;
  uint64_t v415 = v1 + 812;
  uint64_t v416 = v1 + 1900;
  long long v417 = 0u;
  uint64_t v418 = 101;
  uint64_t v419 = v1 + 816;
  uint64_t v420 = v1 + 1904;
  long long v421 = 0u;
  uint64_t v422 = 102;
  uint64_t v423 = v1 + 832;
  uint64_t v424 = v1 + 1920;
  long long v425 = 0u;
  uint64_t v426 = 103;
  uint64_t v427 = v1 + 848;
  uint64_t v428 = v1 + 1936;
  long long v429 = 0u;
  uint64_t v430 = 104;
  uint64_t v431 = v1 + 864;
  uint64_t v432 = v1 + 1952;
  long long v433 = 0u;
  uint64_t v434 = 105;
  uint64_t v435 = v1 + 880;
  uint64_t v436 = v1 + 1968;
  long long v437 = 0u;
  uint64_t v438 = 106;
  uint64_t v439 = v1 + 896;
  uint64_t v440 = v1 + 1984;
  long long v441 = 0u;
  uint64_t v442 = 107;
  uint64_t v443 = v1 + 912;
  uint64_t v444 = v1 + 2000;
  long long v445 = 0u;
  uint64_t v446 = 108;
  uint64_t v447 = v1 + 913;
  uint64_t v448 = v1 + 2001;
  long long v449 = 0u;
  uint64_t v450 = 109;
  uint64_t v451 = v1 + 916;
  uint64_t v452 = v1 + 2004;
  long long v453 = 0u;
  uint64_t v454 = 110;
  uint64_t v455 = v1 + 920;
  uint64_t v456 = v1 + 2008;
  long long v457 = 0u;
  uint64_t v458 = 111;
  uint64_t v459 = v1 + 924;
  uint64_t v460 = v1 + 2012;
  long long v461 = 0u;
  uint64_t v462 = 112;
  uint64_t v463 = v1 + 928;
  uint64_t v464 = v1 + 2016;
  long long v465 = 0u;
  uint64_t v466 = 113;
  uint64_t v467 = v1 + 932;
  uint64_t v468 = v1 + 2020;
  long long v469 = 0u;
  uint64_t v470 = 114;
  uint64_t v471 = v1 + 944;
  uint64_t v472 = v1 + 2032;
  long long v473 = 0u;
  uint64_t v474 = 115;
  uint64_t v475 = v1 + 960;
  uint64_t v476 = v1 + 2048;
  long long v477 = 0u;
  uint64_t v478 = 116;
  uint64_t v479 = v1 + 976;
  uint64_t v480 = v1 + 2064;
  long long v481 = 0u;
  uint64_t v482 = 117;
  uint64_t v483 = v1 + 992;
  uint64_t v484 = v1 + 2080;
  long long v485 = 0u;
  uint64_t v486 = 118;
  uint64_t v487 = v1 + 996;
  uint64_t v488 = v1 + 2084;
  long long v489 = 0u;
  uint64_t v490 = 119;
  uint64_t v491 = v1 + 1000;
  uint64_t v492 = v1 + 2088;
  long long v493 = 0u;
  uint64_t v494 = 120;
  uint64_t v495 = v1 + 1004;
  uint64_t v496 = v1 + 2092;
  long long v497 = 0u;
  uint64_t v498 = 121;
  uint64_t v499 = v1 + 1032;
  uint64_t v500 = v1 + 2120;
  long long v501 = 0u;
  uint64_t v502 = 122;
  uint64_t v503 = v1 + 1040;
  uint64_t v504 = v1 + 2128;
  long long v505 = 0u;
  uint64_t v506 = 123;
  uint64_t v507 = v1 + 1048;
  uint64_t v508 = v1 + 2136;
  long long v509 = 0u;
  uint64_t v510 = 124;
  uint64_t v511 = v1 + 1056;
  uint64_t v512 = v1 + 2144;
  long long v513 = 0u;
  uint64_t v514 = 125;
  uint64_t v515 = v1 + 1064;
  uint64_t v516 = v1 + 2152;
  long long v517 = 0u;
  uint64_t v518 = 126;
  uint64_t v519 = v1 + 1072;
  uint64_t v520 = v1 + 2160;
  long long v521 = 0u;
  uint64_t v260 = v1 + 1616;
  uint64_t v522 = 127;
  uint64_t v523 = v1 + 1076;
  uint64_t v524 = v1 + 2164;
  long long v525 = 0u;
  uint64_t v526 = 128;
  uint64_t v527 = v1 + 1080;
  uint64_t v528 = v1 + 2168;
  long long v529 = 0u;
  uint64_t v530 = 129;
  uint64_t v531 = v1 + 1084;
  uint64_t v532 = v1 + 2172;
  long long v533 = 0u;
  long long v261 = 0u;
  uint64_t v266 = 63;
  uint64_t v4 = *(void *)(v1 + 2264);
  uint64_t v262 = 62;
  unint64_t v5 = *(char **)(v1 + 2248);
  uint64_t v263 = v1 + 532;
  uint64_t v264 = v1 + 1620;
  long long v265 = 0u;
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (uint64_t)v5) >> 3) < 0x82)
  {
    if (v5)
    {
      *(void *)(v1 + 2256) = v5;
      operator delete(v5);
      uint64_t v4 = 0;
      *(void *)(v1 + 2248) = 0;
      *(void *)(v1 + 2256) = 0;
      *(void *)(v1 + 2264) = 0;
    }
    unint64_t v6 = 0x999999999999999ALL * (v4 >> 3);
    if (v6 <= 0x82) {
      unint64_t v6 = 130;
    }
    if (0xCCCCCCCCCCCCCCCDLL * (v4 >> 3) >= 0x333333333333333) {
      unint64_t v7 = 0x666666666666666;
    }
    else {
      unint64_t v7 = v6;
    }
    if (v7 > 0x666666666666666) {
      abort();
    }
    unint64_t v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::VFXEmitterComponent::ParticleEmitterBinding>>(v7);
    unint64_t v5 = v8;
    *(void *)(v1 + 2248) = v8;
    *(void *)(v1 + 2264) = &v8[40 * v9];
    goto LABEL_17;
  }
  unint64_t v10 = *(unsigned char **)(v1 + 2256);
  uint64_t v11 = v10 - v5;
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v5) >> 3);
  if (v12 > 0x81)
  {
    unint64_t v8 = v5;
LABEL_17:
    memmove(v8, __src, 0x1450uLL);
    unint64_t v13 = 130;
    goto LABEL_18;
  }
  if (v10 != v5)
  {
    memmove(v5, __src, v10 - v5);
    unint64_t v5 = *(char **)(v1 + 2256);
  }
  if (v11 == 5200)
  {
    unint64_t v13 = 0;
  }
  else
  {
    int64_t v15 = 5200 - v11;
    memmove(v5, &__src[5 * v12], v15);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 3);
  }
LABEL_18:
  *(void *)(v1 + 2256) = &v5[40 * v13];
  return v1;
}

void re::ecs2::VFXEmitterComponent::~VFXEmitterComponent(re::ecs2::VFXEmitterComponent *this)
{
  *(void *)this = &unk_26E6FCF68;
  uint64_t v2 = (void *)*((void *)this + 281);
  *((void *)this + 282) = v2;
  unint64_t v3 = (void *)*((void *)this + 284);
  if (v3)
  {
    *((void *)this + 285) = v3;
    operator delete(v3);
    uint64_t v2 = (void *)*((void *)this + 281);
  }
  if (v2)
  {
    *((void *)this + 282) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void *)*((void *)this + 278);
  if (v4)
  {
    *((void *)this + 279) = v4;
    operator delete(v4);
  }
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 2176);
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 2096));
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 1696));
  re::DynamicArray<unsigned long>::deinit((uint64_t)this + 1088);
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 1008));
  re::AssetHandle::~AssetHandle((re::ecs2::VFXEmitterComponent *)((char *)this + 608));
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {

    *((void *)this + 4) = 0;
  }
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::VFXEmitterComponent::~VFXEmitterComponent(this);
  JUMPOUT(0x237DBCBD0);
}

void *re::ecs2::VFXEmitterComponent::loadAssetsIfNeeded(uint64_t a1, AssetService *a2, uint64_t a3, uint64_t *a4)
{
  re::ecs2::VFXEmitterComponent::loadTextureIfNeeded((re::ecs2::VFXEmitterComponent *)a1, a2, (re::AssetHandle *)(a1 + 608), 0);
  re::ecs2::VFXEmitterComponent::loadTextureIfNeeded((re::ecs2::VFXEmitterComponent *)a1, a2, (re::AssetHandle *)(a1 + 1008), 1);
  return re::ecs2::VFXEmitterComponent::loadSceneComponentIfNeeded((void *)a1, a3, a4);
}

void re::ecs2::VFXEmitterComponent::loadTextureIfNeeded(re::ecs2::VFXEmitterComponent *this, AssetService *a2, re::AssetHandle *a3, int a4)
{
  if (!*(void *)(*((void *)this + 278) + 8 * a4))
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (!v7)
    {
      (*((void (**)(long long *__return_ptr, AssetService *, const char *))a2->var0 + 1))(&v14, a2, "framework:com.apple.CoreRE/particle_circle.png");
      long long v8 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v14;
      long long v14 = v8;
      uint64_t v9 = *((void *)a3 + 2);
      *((void *)a3 + 2) = v15;
      uint64_t v15 = v9;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
      uint64_t v7 = *((void *)a3 + 1);
      if (!v7) {
        goto LABEL_8;
      }
    }
    unsigned int v10 = atomic_load((unsigned int *)(v7 + 704));
    if (v10 == 1) {
      return;
    }
    uint64_t v11 = *((void *)a3 + 1);
    if (v11 && (unsigned int v12 = atomic_load((unsigned int *)(v11 + 704)), v12 == 2))
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v13, a3);
      re::ecs2::VFXEmitterComponent::bindTexture((uint64_t)this, (re::TextureAsset *)v13, a4);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
    }
    else
    {
LABEL_8:
      re::AssetHandle::loadAsync(a3);
    }
  }
}

void *re::ecs2::VFXEmitterComponent::loadSceneComponentIfNeeded(void *result, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    unint64_t v3 = result;
    if (!*((unsigned char *)result + 40))
    {
      uint64_t v6 = result[4];
      uint64_t v7 = *(void *)(a2 + 16);
      if (v7) {
        uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      }
      else {
        uint64_t v8 = *(void *)(a2 + 216);
      }
      re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (const re::AssetHandle *)(v8 + 72));
      re::ecs2::VFXSceneComponent::setVFXFromParticleEmitter(v6, (const re::AssetHandle *)v9);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(v3[4] + 112, a2 + 112);
      re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::operator=(*(void *)(v3[4] + 216) + 32, (uint64_t *)(*(void *)(a2 + 216) + 32));
      re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(v3[4] + 64, a2 + 64);
      *(unsigned char *)(v3[4] + 213) = 1;
      double result = re::ecs2::VFXEmitterComponent::setBindingRuntimeData(v3, a3);
      *((unsigned char *)v3 + 40) = 1;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u) {
        signed int v5 = 3;
      }
      else {
        signed int v5 = *(_DWORD *)(a2 + 28);
      }
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void *re::ecs2::VFXEmitterComponent::setBindingRuntimeData(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = v4[281] + 40 * *(void *)v2;
      uint64_t v6 = *(void *)(v2 + 16);
      *(void *)(v5 + 24) = *(void *)(v2 + 8);
      *(void *)(v5 + 32) = v6;
      double result = memcpy(*(void **)(v5 + 16), *(const void **)(v2 + 56), *(void *)(v2 + 40));
      v2 += 64;
    }
    while (v2 != v3);
  }
  return result;
}

void re::ecs2::VFXEmitterComponent::bindTexture(uint64_t a1, re::TextureAsset *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7) {
    uint64_t v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  else {
    uint64_t v8 = *(void *)(v6 + 216);
  }
  uint64_t v9 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v8 + 72));
  if (v9 && *(unsigned char *)(a1 + 40) && !*(void *)(*(void *)(a1 + 32) + 32))
  {
    unsigned int v10 = [*(id *)(v9 + 64) scene];
    id v26 = [v10 effects];

    uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 48) effect];
    if (v11)
    {
      unsigned int v12 = a3 == 1 ? "spawnTexture" : "mainTexture";
      unint64_t v13 = [NSString stringWithUTF8String:v12];
      uint64_t v14 = [v11 fetchClientTextureIDWithNamed:v13];

      if (v14 >= 1)
      {
        uint64_t v15 = re::AssetHandle::loadedAsset<re::TextureAsset>(a2);
        if (v15)
        {
          if (*(_DWORD *)(v15 + 240))
          {
            uint64_t v24 = (re::ecs2::VFXEmitterComponent *)std::__throw_bad_variant_access[abi:nn180100]();
            re::ecs2::VFXEmitterComponent::loadBindingValues(v24, v25);
            return;
          }
          [v11 setClientTextureWithId:v14 texture:*(void *)(v15 + 160)];
          *(void *)(*(void *)(a1 + 2224) + 8 * a3) = v14;
          uint64_t v16 = *(void *)(a1 + 2272);
          uint64_t v17 = *(void *)(a1 + 2280);
          if (v16 != v17)
          {
            do
            {
              uint64_t v18 = *(void *)(v16 + 32);
              uint64_t v19 = *(re::ecs2::VFXSceneComponent **)(a1 + 32);
              uint64_t v20 = (void *)MEMORY[0x263F08D40];
              uint64_t v21 = *(void *)(v16 + 8);
              uint64_t v22 = (NSString *)*(id *)(v16 + 24);
              uint64_t v23 = [v20 valueWithPointer:v21];
              re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(v19, v22, v18, v23);

              v16 += 40;
            }
            while (v16 != v17);
            uint64_t v16 = *(void *)(a1 + 2272);
          }
          *(void *)(a1 + 2280) = v16;
        }
      }
    }
  }
}

void re::ecs2::VFXEmitterComponent::loadBindingValues(re::ecs2::VFXEmitterComponent *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *((void *)this + 2);
  if (v5) {
    uint64_t v6 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
  else {
    uint64_t v6 = *((void *)this + 27);
  }
  uint64_t v7 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v6 + 72));
  if (v7)
  {
    uint64_t v8 = [*(id *)(v7 + 64) scene];
    uint64_t v9 = [v8 effects];

    unsigned int v10 = [v9 firstObject];
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v12 = [v10 lookupObjectIDByName:@"Emitter"];
      uint64_t v13 = [v11 lookupObjectIDByName:@"SecondaryEmitter"];
      uint64_t v31 = 0;
      uint64_t v32 = &v31;
      uint64_t v33 = 0x4812000000;
      uint64_t v34 = __Block_byref_object_copy__7;
      uint64_t v35 = __Block_byref_object_dispose__7;
      uint64_t v36 = "";
      v37[1] = 0;
      uint64_t v38 = 0;
      v37[0] = 0;
      _OWORD v39[4] = (void **)&v38;
      v39[0] = (void **)operator new(0x2080uLL);
      v39[1] = v39[0];
      v39[2] = v39[0];
      v39[3] = v39[0] + 1040;
      std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__swap_out_circular_buffer(v37, v39);
      std::__split_buffer<re::ecs2::VFXEmitterComponent::VFXBindingValue>::~__split_buffer((uint64_t)v39);
      uint64_t v14 = [v11 scene];
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 3221225472;
      _OWORD v25[2] = ___ZN2re4ecs219VFXEmitterComponent17loadBindingValuesERKNS0_17VFXSceneComponentE_block_invoke;
      v25[3] = &unk_264BE3AE0;
      uint64_t v28 = v13;
      uint64_t v29 = v12;
      id v26 = v11;
      uint64_t v27 = &v31;
      uint64_t v30 = this;
      [v14 performTransaction:v25];

      uint64_t v15 = v32;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      uint64_t v16 = (long long *)v15[6];
      uint64_t v17 = (long long *)v15[7];
      uint64_t v18 = (char *)v17 - (char *)v16;
      if (v17 != v16)
      {
        if (v18 < 0) {
          abort();
        }
        uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v18 >> 6);
        uint64_t v20 = 0;
        *a2 = v19;
        a2[1] = v19;
        a2[2] = &v19[64 * v21];
        uint64_t v22 = (uint64_t)(v19 + 24);
        do
        {
          long long v23 = *v16;
          *(void *)(v22 - 8) = *((void *)v16 + 2);
          *(_OWORD *)(v22 - 24) = v23;
          uint64_t v24 = re::DynamicArray<BOOL>::DynamicArray(v22, (uint64_t *)v16 + 3);
          v16 += 4;
          v20 += 64;
          uint64_t v22 = v24 + 64;
        }
        while (v16 != v17);
        a2[1] = &v19[v20];
      }

      _Block_object_dispose(&v31, 8);
      v39[0] = (void **)v37;
      std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](v39);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

__n128 __Block_byref_object_copy__7(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](&v1);
}

void ___ZN2re4ecs219VFXEmitterComponent17loadBindingValuesERKNS0_17VFXSceneComponentE_block_invoke(uint64_t a1)
{
  uint64_t v2 = &byte_264BE3B18;
  uint64_t v3 = 4160;
  unint64_t v4 = 0x263F08000uLL;
  do
  {
    uint64_t v5 = [*(id *)(v4 + 2880) stringWithUTF8String:*((void *)v2 - 2)];
    int v6 = [v5 hasPrefix:@"spawn"];
    uint64_t v7 = 56;
    if (v6) {
      uint64_t v7 = 48;
    }
    uint64_t v8 = [*(id *)(a1 + 32) bindingWith:*(void *)(a1 + v7) named:v5];
    uint64_t v9 = v8;
    if (v8)
    {
      uint64_t v34 = v5;
      unsigned int v10 = *(uint64_t **)(*(void *)(a1 + 40) + 8);
      uint64_t v11 = *((void *)v2 - 3);
      uint64_t v12 = [v8 identifier];
      uint64_t v13 = (void *)[v12 copy];
      uint64_t v14 = [v9 type];
      uint64_t v15 = v14;
      unint64_t v16 = v10[7];
      unint64_t v17 = v10[8];
      if (v16 >= v17)
      {
        uint64_t v33 = v12;
        uint64_t v19 = a1;
        uint64_t v20 = v10[6];
        uint64_t v21 = (uint64_t)(v16 - v20) >> 6;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 58) {
          abort();
        }
        uint64_t v23 = v17 - v20;
        if (v23 >> 5 > v22) {
          unint64_t v22 = v23 >> 5;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        uint64_t v36 = (float *)(v10 + 8);
        long long v25 = std::__allocate_at_least[abi:nn180100]<std::allocator<simd_float4x4>>(v24);
        uint64_t v26 = (uint64_t)v25 + 64 * v21;
        v35[0] = (uint64_t)v25;
        v35[1] = v26;
        v35[3] = (uint64_t)v25 + 64 * v27;
        *(void *)uint64_t v26 = v11;
        *(void *)(v26 + 8) = v13;
        *(void *)(v26 + 56) = 0;
        *(_DWORD *)(v26 + 48) = 0;
        *(void *)(v26 + 32) = 0;
        *(void *)(v26 + 40) = 0;
        *(void *)(v26 + 16) = v15;
        *(void *)(v26 + 24) = 0;
        *(_DWORD *)(v26 + 48) = 1;
        void v35[2] = v26 + 64;
        std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__swap_out_circular_buffer(v10 + 6, v35);
        uint64_t v18 = v10[7];
        std::__split_buffer<re::ecs2::VFXEmitterComponent::VFXBindingValue>::~__split_buffer((uint64_t)v35);
        a1 = v19;
        unint64_t v4 = 0x263F08000;
        uint64_t v12 = v33;
      }
      else
      {
        *(void *)unint64_t v16 = v11;
        *(void *)(v16 + 8) = v13;
        *(void *)(v16 + 56) = 0;
        *(void *)(v16 + 16) = v14;
        *(void *)(v16 + 24) = 0;
        *(void *)(v16 + 32) = 0;
        *(void *)(v16 + 40) = 0;
        uint64_t v18 = v16 + 64;
        *(_DWORD *)(v16 + 48) = 1;
      }
      v10[7] = v18;

      uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 56);
      uint64_t v29 = *(re::ecs2::VFXSceneComponent **)(a1 + 64);
      uint64_t v30 = [v9 identifier];
      re::ecs2::VFXSceneComponent::bindingStorageWithIdentifier(v29, v30, (uint64_t)v35);

      unint64_t v31 = [v9 type];
      uint64_t v5 = v34;
      if (v31 > 0xF) {
        goto LABEL_18;
      }
      if (((1 << v31) & 0xE3BE) != 0)
      {
        uint64_t v32 = v28 - 40;
LABEL_17:
        re::DynamicArray<BOOL>::operator=(v32, v35);
        goto LABEL_18;
      }
      if (((1 << v31) & 0x440) != 0)
      {
        uint64_t v32 = v28 - 40;
        if (!v2[1]) {
          goto LABEL_17;
        }
        re::DynamicArray<BOOL>::resize(v32, 4uLL);
        **(_DWORD **)(v28 - 8) = *(void *)v36;
      }
      else if (v31 == 12)
      {
        uint64_t v32 = v28 - 40;
        if (!*v2) {
          goto LABEL_17;
        }
        re::DynamicArray<BOOL>::resize(v32, 8uLL);
        **(double **)(v28 - 8) = *v36;
      }
LABEL_18:
      if (v35[0])
      {
        if (v36) {
          (*(void (**)(void))(*(void *)v35[0] + 40))();
        }
      }
    }

    v2 += 32;
    v3 -= 32;
  }
  while (v3);
}

void re::ecs2::VFXEmitterComponent::update(re::ecs2::VFXEmitterComponent *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v4 = v3
       ? re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType): *(void *)(v1 + 216);
    uint64_t v5 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v4 + 72));
    if (v5)
    {
      if (*((unsigned char *)this + 40) && !*(void *)(*((void *)this + 4) + 32))
      {
        int v6 = [*(id *)(v5 + 64) scene];
        uint64_t v7 = [v6 effects];

        uint64_t v9 = *((void *)this + 138);
        if (v9)
        {
          uint64_t v10 = *((void *)this + 140);
          uint64_t v11 = v10;
          do
          {
            if (!*(void *)(v11 + 80))
            {
              v8.i64[0] = *(void *)v11;
              *(void *)(v11 + 80) = re::ecs2::VFXSceneComponent::addCollisionPlane(*((void *)this + 4), COERCE_DOUBLE((unint64_t)vzip1q_s32(v8, v8).u32[0]), *(double *)(v11 + 16), *(double *)(v11 + 32), *(double *)(v11 + 48), *(double *)(v11 + 64));
              uint64_t v10 = *((void *)this + 140);
              uint64_t v9 = *((void *)this + 138);
            }
            v11 += 96;
          }
          while (v11 != v10 + 96 * v9);
        }
        unint64_t v12 = re::ecs2::VFXEmitterComponentState::hash((re::ecs2::VFXEmitterComponent *)((char *)this + 48));
        if (v12 != re::ecs2::VFXEmitterComponentState::hash((re::ecs2::VFXEmitterComponent *)((char *)this + 1136)))
        {
          if (*((void *)this + 77) != *((void *)this + 213)) {
            **((void **)this + 278) = 0;
          }
          if (*((void *)this + 127) != *((void *)this + 263)) {
            *(void *)(*((void *)this + 278) + 8) = 0;
          }
          int v13 = *((_DWORD *)this + 50);
          uint64_t v14 = *((void *)this + 4);
          if (v13 != *((_DWORD *)this + 322))
          {
            *(unsigned char *)(v14 + 360) = v13 != 0;
            if (v13 == 2)
            {
              *(_DWORD *)(v14 + 228) = 0;
              *(_DWORD *)(v14 + 232) = 0;
              ++*(_DWORD *)(v14 + 236);
            }
          }
          if (*((void *)this + 34) != *((void *)this + 170))
          {
            *(_DWORD *)(v14 + 228) = 0;
            *(_DWORD *)(v14 + 232) = 0;
            ++*(_DWORD *)(v14 + 236);
          }
          long long v73 = v7;
          *(_DWORD *)(v14 + 352) = *((_DWORD *)this + 62);
          uint64_t v15 = (uint64_t *)*((void *)this + 281);
          unint64_t v16 = (uint64_t *)*((void *)this + 282);
          while (1)
          {
            if (v15 == v16)
            {
              long long v62 = *((_OWORD *)this + 16);
              *((_OWORD *)this + 83) = *((_OWORD *)this + 15);
              *((_OWORD *)this + 84) = v62;
              *((void *)this + 170) = *((void *)this + 34);
              long long v63 = *((_OWORD *)this + 12);
              *((_OWORD *)this + 79) = *((_OWORD *)this + 11);
              *((_OWORD *)this + 80) = v63;
              long long v64 = *((_OWORD *)this + 14);
              *((_OWORD *)this + 81) = *((_OWORD *)this + 13);
              *((_OWORD *)this + 82) = v64;
              long long v65 = *((_OWORD *)this + 8);
              *((_OWORD *)this + 75) = *((_OWORD *)this + 7);
              *((_OWORD *)this + 76) = v65;
              long long v66 = *((_OWORD *)this + 10);
              *((_OWORD *)this + 77) = *((_OWORD *)this + 9);
              *((_OWORD *)this + 78) = v66;
              long long v67 = *((_OWORD *)this + 4);
              *((_OWORD *)this + 71) = *((_OWORD *)this + 3);
              *((_OWORD *)this + 72) = v67;
              long long v68 = *((_OWORD *)this + 6);
              *((_OWORD *)this + 73) = *((_OWORD *)this + 5);
              *((_OWORD *)this + 74) = v68;
              memcpy((char *)this + 1376, (char *)this + 288, 0x140uLL);
              re::AssetHandle::operator=((uint64_t)this + 1696, (uint64_t *)this + 76);
              long long v69 = *(_OWORD *)((char *)this + 648);
              *(_OWORD *)((char *)this + 1720) = *(_OWORD *)((char *)this + 632);
              *(_OWORD *)((char *)this + 1736) = v69;
              *(_OWORD *)((char *)this + 1752) = *(_OWORD *)((char *)this + 664);
              *(void *)((char *)this + 1765) = *(void *)((char *)this + 677);
              memcpy((char *)this + 1776, (char *)this + 688, 0x140uLL);
              re::AssetHandle::operator=((uint64_t)this + 2096, (uint64_t *)this + 126);
              long long v70 = *(_OWORD *)((char *)this + 1048);
              *(_OWORD *)((char *)this + 2120) = *(_OWORD *)((char *)this + 1032);
              *(_OWORD *)((char *)this + 2136) = v70;
              *(_OWORD *)((char *)this + 2152) = *(_OWORD *)((char *)this + 1064);
              *(void *)((char *)this + 2165) = *(void *)((char *)this + 1077);
              uint64_t v71 = *((void *)this + 136);
              if (*((void *)this + 272))
              {
                uint64_t v7 = v73;
                if (v71) {
                  re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::copy((void **)this + 272, (uint64_t)this + 1088);
                }
                else {
                  *((void *)this + 274) = 0;
                }
                ++*((_DWORD *)this + 550);
              }
              else
              {
                uint64_t v7 = v73;
                if (v71)
                {
                  unint64_t v72 = *((void *)this + 138);
                  *((void *)this + 272) = v71;
                  re::DynamicArray<re::RigJoint>::setCapacity((void *)this + 272, v72);
                  ++*((_DWORD *)this + 550);
                  re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::copy((void **)this + 272, (uint64_t)this + 1088);
                }
              }
              *((unsigned char *)this + 2216) = *((unsigned char *)this + 1128);
              goto LABEL_100;
            }
            unint64_t v17 = (NSString *)(id)v15[3];
            if (!v17) {
              goto LABEL_67;
            }
            uint64_t v18 = v15[4];
            uint64_t v19 = *v15;
            int v21 = v20[24];
            if (!v20[24]) {
              break;
            }
            unint64_t v22 = (double *)v15[1];
            if (!v22) {
              goto LABEL_36;
            }
            uint64_t v23 = (double *)v15[2];
            if (v23)
            {
              float v24 = *v22;
              float v25 = *v23;
              BOOL v26 = v24 == v25;
              goto LABEL_33;
            }
LABEL_37:
            if ((v19 & 0xFFFFFFFFFFFFFFFELL) == 0x1C)
            {
              int v28 = *((unsigned __int8 *)this + 216);
              if ((v23 & 1) == 0 && v28 == *((unsigned __int8 *)this + 1304)) {
                goto LABEL_67;
              }
              LODWORD(v74) = 0;
              if (v28) {
                float v29 = *(float *)v22;
              }
              else {
                float v29 = 0.0;
              }
LABEL_65:
              *(float *)&uint64_t v74 = v29;
              goto LABEL_66;
            }
            if (!v23) {
              goto LABEL_67;
            }
            uint64_t v30 = *((void *)this + 278);
            uint64_t v31 = *((void *)this + 279);
            uint64_t v32 = v31 - v30;
            if (v31 == v30)
            {
LABEL_62:
              if (v21)
              {
                float v29 = *v22;
                goto LABEL_65;
              }
              {
                uint64_t v52 = (re::ecs2::VFXSceneComponent *)*((void *)this + 4);
                long long v53 = [MEMORY[0x263F08D40] valueWithPointer:v22];
                re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(v52, v17, v18, v53);

                goto LABEL_67;
              }
              uint64_t v74 = 0;
              uint64_t v74 = *(int *)v22;
LABEL_66:
              uint64_t v39 = (re::ecs2::VFXSceneComponent *)*((void *)this + 4);
              objc_msgSend(MEMORY[0x263F08D40], "valueWithPointer:", &v74, v73);
              uint64_t v40 = (NSValue *)objc_claimAutoreleasedReturnValue();
              re::ecs2::VFXSceneComponent::setParameterValueForIdentifier(v39, v17, v18, v40);

              goto LABEL_67;
            }
            uint64_t v33 = 0;
            unint64_t v34 = v32 >> 3;
            if (v34 <= 1) {
              uint64_t v35 = 1;
            }
            else {
              uint64_t v35 = v34;
            }
            BOOL v36 = 1;
            while (1)
            {
              if (*(void *)(v30 + 8 * v33)) {
                goto LABEL_49;
              }
              if (v33 != 1) {
                break;
              }
              if ((unint64_t)(v19 - 129) > 0xFFFFFFFFFFFFFFF7) {
                goto LABEL_57;
              }
LABEL_49:
              BOOL v36 = v34 > ++v33;
              if (v35 == v33) {
                goto LABEL_57;
              }
            }
            if (v33
              || (unint64_t)(v19 - 70) > 0x3A
              || ((1 << (v19 - 70)) & 0x7F80000000000FFLL) == 0)
            {
              goto LABEL_49;
            }
LABEL_57:
            if (!v36) {
              goto LABEL_62;
            }
            long long v37 = (char *)*((void *)this + 284);
            uint64_t v38 = (char *)*((void *)this + 285);
            if (v37 != v38)
            {
              while (*(void *)v37 != v19)
              {
                v37 += 40;
                if (v37 == v38) {
                  goto LABEL_74;
                }
              }
            }
            if (v37 != v38)
            {
              int64_t v41 = v38 - (v37 + 40);
              if (v38 != v37 + 40) {
                memmove(v37, v37 + 40, v38 - (v37 + 40));
              }
              uint64_t v38 = &v37[v41];
              *((void *)this + 285) = &v37[v41];
            }
LABEL_74:
            unint64_t v42 = *((void *)this + 286);
            if ((unint64_t)v38 >= v42)
            {
              uint64_t v46 = *((void *)this + 284);
              unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v38[-v46] >> 3);
              unint64_t v48 = v47 + 1;
              if (v47 + 1 > 0x666666666666666) {
                abort();
              }
              unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v42 - v46) >> 3);
              if (2 * v49 > v48) {
                unint64_t v48 = 2 * v49;
              }
              if (v49 >= 0x333333333333333) {
                unint64_t v50 = 0x666666666666666;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50) {
                unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::VFXEmitterComponent::ParticleEmitterBinding>>(v50);
              }
              else {
                uint64_t v51 = 0;
              }
              unint64_t v54 = v50 + 40 * v47;
              long long v55 = *(_OWORD *)v15;
              long long v56 = *((_OWORD *)v15 + 1);
              *(void *)(v54 + 32) = v15[4];
              *(_OWORD *)unint64_t v54 = v55;
              *(_OWORD *)(v54 + 16) = v56;
              long long v57 = (char *)*((void *)this + 285);
              uint64_t v58 = (char *)*((void *)this + 284);
              unint64_t v59 = v54;
              if (v57 != v58)
              {
                do
                {
                  long long v60 = *(_OWORD *)(v57 - 40);
                  long long v61 = *(_OWORD *)(v57 - 24);
                  *(void *)(v59 - 8) = *((void *)v57 - 1);
                  *(_OWORD *)(v59 - 24) = v61;
                  *(_OWORD *)(v59 - 40) = v60;
                  v59 -= 40;
                  v57 -= 40;
                }
                while (v57 != v58);
                long long v57 = (char *)*((void *)this + 284);
              }
              *((void *)this + 284) = v59;
              long long v45 = (char *)(v54 + 40);
              *((void *)this + 285) = v54 + 40;
              *((void *)this + 286) = v50 + 40 * v51;
              if (v57) {
                operator delete(v57);
              }
            }
            else
            {
              long long v43 = *(_OWORD *)v15;
              long long v44 = *((_OWORD *)v15 + 1);
              *((void *)v38 + 4) = v15[4];
              *(_OWORD *)uint64_t v38 = v43;
              *((_OWORD *)v38 + 1) = v44;
              long long v45 = v38 + 40;
            }
            *((void *)this + 285) = v45;
LABEL_67:

            v15 += 5;
          }
          unint64_t v22 = (double *)v15[1];
          if (v22)
          {
            uint64_t v27 = (const void *)v15[2];
            if (v27)
            {
              BOOL v26 = memcmp((const void *)v15[1], v27, *((void *)v20 + 2)) == 0;
LABEL_33:
              LODWORD(v23) = !v26;
              goto LABEL_37;
            }
          }
LABEL_36:
          LODWORD(v23) = 0;
          goto LABEL_37;
        }
LABEL_100:
      }
    }
  }
}

double re::ecs2::VFXEmitterComponent::addCollisionPlane(uint64_t a1, double a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(double *)uint64_t v9 = a2;
  __n128 v10 = a3;
  __n128 v11 = a4;
  __n128 v12 = a5;
  __n128 v13 = a6;
  uint64_t v14 = 0;
  int v6 = (_anonymous_namespace_ *)(a1 + 1088);
  re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::indexOf(a1 + 1088, (uint64_t)v9, (uint64_t)v8);
  if (!v8[0]) {
    *(void *)&double result = re::DynamicArray<re::RigJoint>::add(v6, (uint64_t)v9).n128_u64[0];
  }
  return result;
}

uint64_t *re::ecs2::VFXEmitterComponent::updateCollisionPlane(uint64_t *result, uint64_t a2, int32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7 = result[140];
  uint64_t v8 = result[138];
  if (v8)
  {
    uint64_t v9 = v7 + 96 * v8;
    uint64_t v10 = 96 * v8;
    while (*(void *)(v7 + 80) != a2)
    {
      v7 += 96;
      v10 -= 96;
      if (!v10)
      {
        uint64_t v7 = v9;
        break;
      }
    }
  }
  uint32x2_t v11 = (uint32x2_t)vceq_f32(*(float32x2_t *)v7, *(float32x2_t *)a3.i8);
  if ((vpmin_u32(v11, v11).u32[0] & 0x80000000) == 0
    || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 32), a5), (int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 16), a4)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 48), a6), (int8x16_t)vceqq_f32(*(float32x4_t *)(v7 + 64), a7)))) & 0x80000000) == 0)
  {
    return (uint64_t *)re::ecs2::VFXSceneComponent::updateCollisionPlane(result[4], a2, *(double *)vextq_s8((int8x16_t)vzip1q_s32((int32x4_t)0, a3), (int8x16_t)0, 4uLL).i64, *(double *)a4.i64, *(double *)a5.i64, *(double *)a6.i64, *(double *)a7.i64);
  }
  return result;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

double re::ecs2::VFXEmitterComponentState::VFXEmitterComponentState(re::ecs2::VFXEmitterComponentState *this)
{
  *(void *)this = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 1;
  *(void *)((char *)this + 44) = 4;
  __asm { FMOV            V1.4S, #6.0 }
  *((_OWORD *)this + 4) = _Q1;
  *((_DWORD *)this + 20) = 2;
  *((_OWORD *)this + 6) = xmmword_23435FD60;
  *((int32x4_t *)this + 7) = vdupq_n_s32(0x3DCCCCCDu);
  *((_OWORD *)this + 8) = xmmword_234399DA0;
  *((_DWORD *)this + 36) = 1;
  *((_WORD *)this + 74) = 0;
  *((_DWORD *)this + 38) = 0;
  *((void *)this + 20) = 0;
  *((unsigned char *)this + 168) = 1;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 100;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((unsigned char *)this + 204) = 0;
  *((_DWORD *)this + 52) = 1065353216;
  *((void *)this + 28) = 0;
  *((unsigned char *)this + 220) = 0;
  *(void *)((char *)this + 212) = 0;
  *((_DWORD *)this + 67) = 0;
  *(_OWORD *)((char *)this + 244) = 0u;
  *((void *)this + 34) = 1017370378;
  *((_DWORD *)this + 70) = 0;
  *((_OWORD *)this + 18) = xmmword_23435FD60;
  *((void *)this + 38) = 0x3F80000000000000;
  *((_DWORD *)this + 78) = 0;
  *((_OWORD *)this + 20) = xmmword_234399D40;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 44) = 1050253722;
  *((_DWORD *)this + 90) = 3;
  *((_OWORD *)this + 24) = xmmword_234399D50;
  *((_OWORD *)this + 25) = xmmword_234399D60;
  *((unsigned char *)this + 416) = 0;
  *((_OWORD *)this + 27) = xmmword_234399D70;
  *((_OWORD *)this + 28) = xmmword_234399D80;
  *((_WORD *)this + 232) = 256;
  *((_DWORD *)this + 121) = 0;
  *((_OWORD *)this + 31) = xmmword_234376D80;
  *((_DWORD *)this + 128) = 0;
  *((_OWORD *)this + 33) = xmmword_23435FD60;
  *((unsigned char *)this + 544) = 0;
  int64x2_t v7 = vdupq_n_s64(3uLL);
  *((int64x2_t *)this + 37) = v7;
  *((_OWORD *)this + 38) = 0u;
  *((void *)this + 78) = 1091567616;
  *((_DWORD *)this + 158) = 1;
  *((unsigned char *)this + 636) = 0;
  *((_DWORD *)this + 160) = 1120403456;
  *((_DWORD *)this + 167) = 0;
  *((void *)this + 84) = 1017370378;
  *((_DWORD *)this + 170) = 0;
  *((_OWORD *)this + 43) = xmmword_23435FD60;
  *((void *)this + 88) = 0x3F80000000000000;
  *((_DWORD *)this + 178) = 0;
  *((_OWORD *)this + 45) = xmmword_234399D40;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 94) = 1050253722;
  *((_DWORD *)this + 190) = 3;
  *((_OWORD *)this + 49) = xmmword_234399D50;
  *((_OWORD *)this + 50) = xmmword_234399D60;
  *((unsigned char *)this + 816) = 0;
  *((_OWORD *)this + 52) = xmmword_234399D70;
  *((_OWORD *)this + 53) = xmmword_234399D80;
  *((_WORD *)this + 432) = 256;
  *((_DWORD *)this + 221) = 0;
  *((_OWORD *)this + 56) = xmmword_234376D80;
  *((_DWORD *)this + 228) = 0;
  *((_OWORD *)this + 58) = xmmword_23435FD60;
  *((unsigned char *)this + 944) = 0;
  *((int64x2_t *)this + 62) = v7;
  *((_OWORD *)this + 63) = 0u;
  *((void *)this + 128) = 1091567616;
  *((_DWORD *)this + 258) = 1;
  *((unsigned char *)this + 1036) = 0;
  *((void *)this + 134) = 0;
  *((_DWORD *)this + 266) = 0;
  *((void *)this + 132) = 0;
  *((_OWORD *)this + 65) = 0u;
  *((_DWORD *)this + 60) = 1120403456;
  *((unsigned char *)this + 1080) = 0;
  *(void *)((char *)this + 260) = 0;
  *(void *)((char *)this + 364) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)((char *)this + 468) = xmmword_234399D90;
  *(void *)((char *)this + 577) = 0;
  *(_OWORD *)((char *)this + 548) = 0u;
  *(_OWORD *)((char *)this + 564) = 0u;
  *(void *)((char *)this + 660) = 0;
  *(_OWORD *)((char *)this + 644) = 0u;
  *(void *)((char *)this + 764) = 0x3F8000003DCCCCCDLL;
  *(_OWORD *)((char *)this + 868) = xmmword_234399D90;
  *(void *)((char *)this + 977) = 0;
  *(_OWORD *)((char *)this + 948) = 0u;
  *(_OWORD *)((char *)this + 964) = 0u;
  return result;
}

void **re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::copy(void **result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RigJoint>::setCapacity(result, *(void *)(a2 + 16));
    uint64_t v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 96 * (void)v5 - 8);
      uint64_t v5 = v3[2];
    }
    double result = (void **)memcpy((char *)v3[4] + 96 * (void)v5, (const void *)(*(void *)(a2 + 32) + 96 * (void)v5), 96 * v4 - 96 * (void)v5);
  }
  else if (v4)
  {
    double result = (void **)memmove(result[4], *(const void **)(a2 + 32), 96 * v4 - 8);
  }
  void v3[2] = (void *)v4;
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<unsigned long>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<unsigned long>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::RigJoint>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize(void *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = result;
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    double result = re::DynamicArray<re::RigJoint>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      return re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize((void *)a4, a5);
    }
  }
  else
  {
    double result = re::DynamicArray<re::RigJoint>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      double result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8 = *((void *)this + 2);
  if (v8 >= *((void *)this + 1))
  {
    re::DynamicArray<re::RigJoint>::growCapacity(this, v8 + 1);
    unint64_t v8 = *((void *)this + 2);
  }
  uint64_t v9 = (_OWORD *)(*((void *)this + 4) + 96 * v8);
  v9[4] = 0u;
  v9[5] = 0u;
  void v9[2] = 0u;
  v9[3] = 0u;
  _OWORD *v9 = 0u;
  v9[1] = 0u;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  uint32x2_t v11 = (re::IntrospectionBase *)(*((void *)this + 4) + 96 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 96 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 96 * a3;
}

void *re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return result;
    }
  }
  else
  {
    if (result[1] < a2)
    {
      double result = re::DynamicArray<re::RigJoint>::setCapacity(result, a2);
      unint64_t v4 = v3[2];
    }
    if (v4 < a2)
    {
      uint64_t v5 = v3[4];
      uint64_t v6 = v5 + 96 * v4;
      memset((char *)v9 + 8, 0, 56);
      uint64_t v7 = v5 + 96 * a2 - v6;
      if (v7 >= 1)
      {
        unint64_t v8 = v7 / 0x60uLL + 1;
        do
        {
          *(_OWORD *)(v6 + 24) = v9[1];
          *(_OWORD *)(v6 + 40) = v9[2];
          *(_OWORD *)(v6 + 56) = v9[3];
          *(void *)uint64_t v6 = 0;
          *(_OWORD *)(v6 + 8) = v9[0];
          --v8;
          *(void *)(v6 + 72) = 0;
          *(void *)(v6 + 80) = 0;
          v6 += 96;
        }
        while (v8 > 1);
      }
    }
  }
  void v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::RigJoint>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    re::DynamicArray<unsigned long>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::RigJoint>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  unint64_t v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::resize((void *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 96 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 96 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 96 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ParticleEmitterCollisionPlane>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::VFXEmitterComponent::ParticleEmitterBinding>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(40 * a1);
}

void re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = (uint64_t *)(v8 + v6);
      if ((*(_DWORD *)(v8 + v6 + 8) & 0x80000000) != 0)
      {
        unint64_t v10 = *v9;
        unint64_t v11 = *(unsigned int *)(a1 + 24);
        unint64_t v12 = *v9 % v11;
        unsigned int v13 = *(_DWORD *)(a1 + 36);
        if (v13 == 0x7FFFFFFF)
        {
          unsigned int v13 = *(_DWORD *)(a1 + 32);
          unsigned int v14 = v13;
          if (v13 == v11)
          {
            re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v12 = v10 % *(unsigned int *)(a1 + 24);
            unsigned int v14 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
        }
        else
        {
          uint64_t v15 = *(void *)(a1 + 16);
          int v16 = *(_DWORD *)(v15 + 88 * v13 + 8);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v15 + 88 * v13 + 8) = v16 | 0x80000000;
        uint64_t v17 = *(void *)(a1 + 16) + 88 * v13;
        *(_DWORD *)(v17 + 8) = *(_DWORD *)(v17 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12);
        *(void *)(*(void *)(a1 + 16) + 88 * v13) = v10;
        *(void *)(*(void *)(a1 + 16) + 88 * v13 + 16) = v9[2];
        uint64_t v18 = *(void *)(a1 + 16) + 88 * v13;
        *(_DWORD *)(v18 + 24) = *((_DWORD *)v9 + 6);
        uint64_t v19 = v8 + v6;
        re::DynamicArray<BOOL>::DynamicArray(v18 + 32, (uint64_t *)(v19 + 32));
        *(_OWORD *)(v18 + 72) = *(_OWORD *)(v19 + 72);
        *(_DWORD *)(*(void *)(a1 + 8) + 4 * v12) = v13;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 88;
    }
  }
}

void re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4) {
    re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  }
  unint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = (unint64_t *)(*(void *)(a2 + 16) + v6);
      if ((v8[1] & 0x80000000) != 0)
      {
        unint64_t v9 = *v8;
        unint64_t v10 = *(unsigned int *)(a1 + 24);
        unint64_t v11 = *v8 % v10;
        uint64_t v12 = *(unsigned int *)(a1 + 36);
        if (v12 == 0x7FFFFFFF)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 32);
          int v13 = v12;
          if (v12 == v10)
          {
            re::HashTable<unsigned long,unsigned long,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            unint64_t v11 = v9 % *(unsigned int *)(a1 + 24);
            int v13 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v13 + 1;
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 16);
          int v15 = *(_DWORD *)(v14 + 32 * v12 + 8);
          *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v14 + 32 * v12 + 8) = v15 | 0x80000000;
        uint64_t v16 = *(void *)(a1 + 8);
        *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(v16 + 4 * v11);
        *(void *)(*(void *)(a1 + 16) + 32 * v12) = v9;
        *(void *)(*(void *)(a1 + 16) + 32 * v12 + 16) = v8[2];
        *(void *)(*(void *)(a1 + 16) + 32 * v12 + 24) = v8[3];
        *(_DWORD *)(v16 + 4 * v11) = v12;
        ++*(_DWORD *)(a1 + 28);
        unint64_t v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 64;
        re::DynamicArray<unsigned long>::deinit((uint64_t)(v4 - 40));
        unsigned int v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<re::ecs2::VFXEmitterComponent::VFXBindingValue>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      uint64_t v8 = *(void *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 48) = v8;
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(_DWORD *)(v6 - 16) = 0;
      uint64_t v9 = *(void *)(v2 + v5 - 32);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v6 - 32) = v9;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      uint64_t v10 = *(void *)(v4 + v5 - 24);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(void *)(v7 - 24) = v10;
      uint64_t v11 = *(void *)(v4 + v5 - 8);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 8) = v11;
      *(_DWORD *)(v7 - 16) = *(_DWORD *)(v2 + v5 - 16) + 1;
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v4 + v5 - 16) + 1;
      v5 -= 64;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  *uint64_t result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<re::ecs2::VFXEmitterComponent::VFXBindingValue>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    re::DynamicArray<unsigned long>::deinit(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t re::DynamicArray<re::ecs2::ParticleEmitterCollisionPlane>::indexOf@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 32);
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    uint64_t v7 = result;
    uint64_t v8 = v4 + 96 * v5;
    uint64_t v9 = 96 * v5;
    while (1)
    {
      uint64_t result = re::ecs2::ParticleEmitterCollisionPlane::operator==(v4, a2);
      if (result) {
        break;
      }
      v4 += 96;
      v9 -= 96;
      if (!v9)
      {
        uint64_t v4 = v8;
        break;
      }
    }
    uint64_t v10 = v4;
    uint64_t v4 = *(void *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 16);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = *(void *)(result + 32);
  }
  if (v10 == v4 + 96 * v11)
  {
    char v12 = 0;
  }
  else
  {
    *(void *)(a3 + 8) = 0xAAAAAAAAAAAAAAABLL * ((v10 - v4) >> 5);
    char v12 = 1;
  }
  *(unsigned char *)a3 = v12;
  return result;
}

uint64_t re::ecs2::ParticleEmitterCollisionPlane::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 80) == *(void *)(a2 + 80)
    && (uint32x2_t v2 = (uint32x2_t)vceq_f32(*(float32x2_t *)a1, *(float32x2_t *)a2), (vpmin_u32(v2, v2).u32[0] & 0x80000000) != 0))
  {
    return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a2 + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 16), *(float32x4_t *)(a2 + 16))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a2 + 48)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 64), *(float32x4_t *)(a2 + 64))))) >> 31;
  }
  else
  {
    return 0;
  }
}

double re::ecs2::buildCollisionShapeAssetHandle(re::ecs2 *this, re::AssetManager *a2, float a3, float a4, float a5)
{
  long long v22 = __PAIR64__(LODWORD(a4), LODWORD(a3));
  int v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v21 = 0x7FFFFFFFLL;
  int v17 = 0;
  memset(v16, 0, sizeof(v16));
  uint64_t v18 = 0x7FFFFFFFLL;
  uint64_t v7 = re::globalAllocators(this);
  uint64_t v8 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, long long *))(*(void *)v6 + 32))(v6, v7[2], &v22);
  CollisionShapeAsset = (re *)re::AssetHelper::makeCollisionShapeAsset(a2, v8, (uint64_t)v19, (uint64_t)v16, 0);
  v14[0] = 0;
  void v14[2] = 0;
  v14[3] = 0x3F80000000000000;
  v14[1] = 3164854026;
  uint64_t v11 = re::globalAllocators(CollisionShapeAsset)[2];
  uint64_t v23 = v8;
  char v12 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, re **, void *, uint64_t, void, void))(*(void *)v10 + 160))(v10, v11, &v23, v14, 1, 0, 0);
  uint64_t v23 = v8;
  re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::add<re::AssetHandle&>((uint64_t)v19, (uint64_t *)&v23, (re::AssetHandle *)v15);
  re::AssetHelper::makeCollisionShapeAsset(a2, v12, (uint64_t)v19, (uint64_t)v16, 0);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v15);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v16);
  return re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v19);
}

uint64_t re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::add<re::AssetHandle&>(uint64_t a1, uint64_t *a2, re::AssetHandle *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v13 = re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addEmplace<re::AssetHandle&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 16) + 48 * v13;
    return v12 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 48 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = v11 + 48 * v10;
  return v12 + 24;
}

void re::ecs2::buildCurvedCollisionShapeAssetHandle(re::ecs2 *this, re::AssetManager *a2, float a3, float a4, float a5, float a6)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  v37.i32[0] = 65548;
  v37.i16[2] = 4 * (a4 > 0.0);
  float v40 = a4;
  float v38 = a5;
  float v39 = a6;
  __int16 v41 = 0;
  int v42 = 4;
  re::GeomMesh::GeomMesh((re::GeomMesh *)v34, 0);
  re::buildPlane((re *)v34, &v37);
  re::internal::wrapGeometryAroundCylinder((re::internal *)v34, (const re::GeomMesh *)v34, (re::GeomMesh *)1, a3);
  unint64_t v8 = (re *)re::GeomMesh::accessVertexPositions((re::GeomMesh *)v34);
  unint64_t v9 = (float *)v8;
  LODWORD(v11) = v10;
  uint64_t v33 = 0;
  v30[1] = 0;
  unint64_t v31 = 0;
  v30[0] = 0;
  unint64_t v12 = (3 * v10);
  int v32 = 0;
  if (v12) {
    unint64_t v8 = (re *)re::DynamicArray<int>::setCapacity(v30, v12);
  }
  uint64_t v11 = v11;
  if (v11)
  {
    do
    {
      re::DynamicArray<float>::add((_anonymous_namespace_ *)v30, v9);
      re::DynamicArray<float>::add((_anonymous_namespace_ *)v30, v9 + 1);
      re::DynamicArray<float>::add((_anonymous_namespace_ *)v30, v9 + 2);
      v9 += 4;
      --v11;
    }
    while (v11);
  }
  uint64_t v29 = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  v26[0] = 0;
  int v28 = 0;
  int v13 = v36;
  if (3 * v36)
  {
    unint64_t v8 = (re *)re::DynamicArray<unsigned short>::setCapacity(v26, (3 * v36));
    int v13 = v36;
  }
  if (v13)
  {
    unsigned int v14 = 0;
    while (1)
    {
      *(void *)&v44[32] = 0;
      memset(v44, 0, 28);
      unsigned int v15 = re::internal::GeomBaseTopology::faceVertices((uint64_t)&v35, v14, (uint64_t)v44);
      if (v15) {
        break;
      }
LABEL_13:
      unint64_t v8 = *(re **)v44;
      if (*(void *)v44 && *(void *)&v44[32]) {
        unint64_t v8 = (re *)(*(uint64_t (**)(void))(**(void **)v44 + 40))();
      }
      if (++v14 >= v36) {
        goto LABEL_17;
      }
    }
    unint64_t v16 = 0;
    uint64_t v17 = v15;
    while (1)
    {
      uint64_t v18 = *(void *)&v44[16];
      if (*(void *)&v44[16] <= v16) {
        break;
      }
      LOWORD(v52) = *(_DWORD *)(*(void *)&v44[32] + 4 * v16);
      re::DynamicArray<unsigned short>::add(v26, &v52);
      if (v17 == ++v16) {
        goto LABEL_13;
      }
    }
    uint64_t v43 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v45 = 136315906;
    *(void *)&v45[4] = "operator[]";
    __int16 v46 = 1024;
    int v47 = 789;
    __int16 v48 = 2048;
    unint64_t v49 = v16;
    __int16 v50 = 2048;
    uint64_t v51 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    *(void *)long long v45 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v44 = 136315906;
    *(void *)&v44[4] = "operator[]";
    *(_WORD *)&v44[12] = 1024;
    *(_DWORD *)&v44[14] = 789;
    *(_WORD *)&v44[18] = 2048;
    *(void *)&v44[20] = 0;
    *(_WORD *)&v44[28] = 2048;
    *(void *)&v44[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_17:
  int v20 = re::globalAllocators(v8);
  if (!v31) {
    goto LABEL_26;
  }
  uint64_t v21 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, char))(*(void *)v19 + 152))(v19, v20[2], v33, v31 / 3, 12, v29, v27, 1, 0, 0, 1);
  re::AssetHelper::makeIndexedTriangleMeshAsset(a2, v21, 0);
  long long v22 = (re *)re::AssetHandle::asset<re::IndexedTriangleMeshAsset>((re::IndexedTriangleMeshAsset *)v45);
  float v24 = re::globalAllocators(v22);
  float v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v23 + 144))(v23, v24[2], *((void *)v22 + 1));
  LODWORD(v54) = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  *(void *)((char *)&v54 + 4) = 0x7FFFFFFFLL;
  memset(v44, 0, 36);
  *(void *)&v44[36] = 0x7FFFFFFFLL;
  uint64_t v43 = *((void *)v22 + 1);
  re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::addOrReplace<re::AssetHandle&>((uint64_t)v44, &v43, (re::AssetHandle *)v45);
  re::AssetHelper::makeCollisionShapeAsset(a2, v25, (uint64_t)&v52, (uint64_t)v44, 0);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v44);
  re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v52);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v45);
  if (v26[0] && v29) {
    (*(void (**)(void))(*(void *)v26[0] + 40))();
  }
  if (v30[0] && v33) {
    (*(void (**)(void))(*(void *)v30[0] + 40))();
  }
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v34);
}

uint64_t re::AssetHandle::asset<re::IndexedTriangleMeshAsset>(re::IndexedTriangleMeshAsset *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint32x2_t v2 = re::IndexedTriangleMeshAsset::assetType(a1);
  uint64_t v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    uint64_t v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v4;
      unint64_t v7 = re::AssetHandle::assetInfo(a1);
      if (v7[17]) {
        unint64_t v8 = (char *)v7[18];
      }
      else {
        unint64_t v8 = (char *)v7 + 137;
      }
      int v9 = 136315138;
      int v10 = v8;
      _os_log_error_impl(&dword_233120000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);
    }
  }
  return v3;
}

uint64_t re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::addOrReplace<re::AssetHandle&>(uint64_t a1, uint64_t *a2, re::AssetHandle *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  unint64_t v9 = v8 % *(unsigned int *)(a1 + 24);
  uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v9);
  if (v10 == 0x7FFFFFFF)
  {
LABEL_8:
    unsigned int v14 = re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::addEmplace<re::AssetHandle&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 16) + 48 * v14;
    return v13 + 24;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  while (*(void *)(v11 + 48 * v10 + 16) != v6)
  {
    uint64_t v10 = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF) {
      goto LABEL_8;
    }
  }
  uint64_t v12 = 3 * v10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(v11 + 48 * v10 + 24));
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 16 * v12 + 24), a3);
  ++*(_DWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 16) + 16 * v12;
  return v13 + 24;
}

void re::ecs2::VideoPlayerComponentHelper::impl::~impl(id *this)
{
  this[1057] = 0;
  objc_destroyWeak(this + 1056);
  this[1056] = 0;
  vpc::ImmersiveMediaOpacityInAnimationEngine::~ImmersiveMediaOpacityInAnimationEngine((vpc::ImmersiveMediaOpacityInAnimationEngine *)(this + 792));
  vpc::ScreenMeshAnimationEngine::~ScreenMeshAnimationEngine((vpc::ScreenMeshAnimationEngine *)(this + 7));
}

void re::ecs2::VideoPlayerComponentHelper::impl::removeVideoEntityHierarchy(id *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint32x2_t v2 = this + 1056;
  id WeakRetained = objc_loadWeakRetained(this + 1056);
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained;
    uint64_t v5 = *((void *)WeakRetained + 2);
    if (v5 && (*(unsigned char *)(v5 + 288) & 0x80) == 0)
    {
      uint64_t v6 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v6)
      {
        unint64_t v7 = v6;
        LOBYTE(v16[0]) = 0;
        re::ecs2::VideoPlayerStatusComponent::setMediaInfo(v6, (unsigned __int8 *)v16);
        LOBYTE(v16[0]) = 0;
        re::ecs2::VideoPlayerStatusComponent::setContentInfo(v7, (unsigned __int8 *)v16);
      }
      else
      {
        unsigned int v15 = *re::videoLogObjects(0);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          v16[0] = 67109120;
          v16[1] = 3915;
          _os_log_error_impl(&dword_233120000, v15, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoPlayerStatusComp is nullptr", (uint8_t *)v16, 8u);
        }
      }
    }
  }
  unint64_t v8 = (char *)objc_loadWeakRetained(v2);
  if (v8)
  {
    unint64_t v9 = v8;
    uint64_t v10 = (re::ecs2::Entity *)(v8 - 8);
    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)(v8 - 8), 0);
    re::ecs2::Entity::removeFromSceneOrParent(v10);
    objc_destroyWeak(v2);
    *uint32x2_t v2 = 0;
  }
  uint64_t v11 = this + 1057;
  uint64_t v12 = (char *)objc_loadWeakRetained(v11);
  if (v12)
  {
    uint64_t v13 = v12;
    unsigned int v14 = (re::ecs2::Entity *)(v12 - 8);
    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)(v12 - 8), 0);
    re::ecs2::Entity::removeFromSceneOrParent(v14);
    objc_destroyWeak(v11);
    *uint64_t v11 = 0;
  }
}

uint64_t *re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount(uint64_t *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5 = this;
  *a2 = 0;
  *a3 = 0;
  uint64_t v10 = this;
  uint64_t v12 = 0;
  if (this[27])
  {
    int v6 = 0;
  }
  else if (this[32])
  {
    int v6 = 1;
  }
  else
  {
    if (!this[37]) {
      return this;
    }
    int v6 = 2;
  }
  int v11 = v6;
  do
  {
    if (*(unsigned char *)(re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v10) + 192)) {
      unint64_t v7 = a3;
    }
    else {
      unint64_t v7 = a2;
    }
    ++*v7;
    this = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v10);
  }
  while (v10 != v5 || v11 != 3 || v12 != 0);
  return this;
}

void re::ecs2::VideoPlayerComponentHelper::impl::setEntityVisibility(re::ecs2::VideoPlayerComponentHelper::impl *this, BOOL a2, re::ecs2::Entity *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!this)
  {
    uint64_t v4 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v6 = 67109120;
    int v7 = 728;
    uint64_t v5 = "VideoPlayerComponentHelper line: %d, entity is nullptr";
    goto LABEL_11;
  }
  uint64_t v3 = *((void *)this + 27);
  if (!v3)
  {
    uint64_t v4 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v6 = 67109120;
    int v7 = 730;
    uint64_t v5 = "VideoPlayerComponentHelper line: %d, renderOptionsComponent is nullptr";
LABEL_11:
    _os_log_error_impl(&dword_233120000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v6, 8u);
    return;
  }
  *(unsigned char *)(v3 + 25) = 0;
  re::ecs2::Component::markDirty((void *)v3);
}

void re::ecs2::VideoPlayerComponentHelper::impl::update(uint64_t CameraViewsCount, void *a2, re::AssetHandle *a3, re::AssetManager *a4)
{
  uint64_t v199 = *MEMORY[0x263EF8340];
  if (!a2 || !a4) {
    return;
  }
  int v6 = a2;
  uint64_t v7 = CameraViewsCount;
  if (*(void *)(CameraViewsCount + 8))
  {
LABEL_32:
    uint64_t hasVideoEntityHierarchy = re::ecs2::VideoPlayerComponentHelper::impl::hasVideoEntityHierarchy(CameraViewsCount, (uint64_t)v6);
    uint64_t v23 = (uint64_t)re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
    if (hasVideoEntityHierarchy)
    {
      buf[0].i64[0] = 0xF4664E2E6A44E25ALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-Screen__";
      uint64_t v24 = v6[41];
      if (v24)
      {
        float v25 = (uint64_t *)v6[43];
        uint64_t v26 = 8 * v24;
        while (1)
        {
          uint64_t v27 = *v25;
          if ((*(void *)(*v25 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
          {
            int v28 = *(char **)(v27 + 280);
            if (v28 == "__InternalVPC-Screen__" || !strcmp(v28, "__InternalVPC-Screen__")) {
              break;
            }
          }
          ++v25;
          v26 -= 8;
          if (!v26) {
            goto LABEL_39;
          }
        }
      }
      else
      {
LABEL_39:
        uint64_t v27 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      buf[0].i64[0] = 0x931CC76C0DD179BALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-ScreenGlowEntity__";
      uint64_t v29 = v6[41];
      if (v29)
      {
        uint64_t v30 = (char **)v6[43];
        uint64_t v31 = 8 * v29;
        while (1)
        {
          int v32 = *v30;
          if ((*((void *)*v30 + 34) ^ 0x931CC76C0DD179BALL) <= 1)
          {
            uint64_t v33 = (char *)*((void *)v32 + 35);
            if (v33 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v33, "__InternalVPC-ScreenGlowEntity__")) {
              break;
            }
          }
          ++v30;
          v31 -= 8;
          if (!v31) {
            goto LABEL_46;
          }
        }
      }
      else
      {
LABEL_46:
        int v32 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      *(void *)&v179.var0 = 0x98636CD79C3E2C92;
      v179.var1 = "__InternalVPC-LeftEye__";
      unint64_t v34 = (char *)re::ecs2::Entity::findInHierarchyByName((uint64_t)v6, &v179);
      re::StringID::destroyString((re::StringID *)&v179);
      if (*(void *)(v7 + 8) == 2)
      {
        *(void *)&v178.var0 = 0x740B54E87609516CLL;
        v178.var1 = "__InternalVPC-RightEye__";
        uint64_t v35 = (_DWORD *)re::ecs2::Entity::findInHierarchyByName((uint64_t)v6, &v178);
        re::StringID::destroyString((re::StringID *)&v178);
      }
      else
      {
        uint64_t v35 = 0;
      }
      buf[0].i64[0] = 0xB71EB2016BE7B4ALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-PortalWorld__";
      uint64_t v47 = v6[41];
      if (v47)
      {
        uint64_t v175 = v35;
        uint64_t v48 = v7;
        unint64_t v49 = v34;
        __int16 v50 = (re::ecs2::MaterialParameterBlockArrayComponent **)v6[43];
        uint64_t v51 = 8 * v47;
        while (1)
        {
          long long v52 = *v50;
          if ((*((void *)*v50 + 34) ^ 0xB71EB2016BE7B4AuLL) <= 1)
          {
            long long v53 = (char *)*((void *)v52 + 35);
            if (v53 == "__InternalVPC-PortalWorld__" || !strcmp(v53, "__InternalVPC-PortalWorld__")) {
              break;
            }
          }
          ++v50;
          v51 -= 8;
          if (!v51)
          {
            long long v52 = 0;
            break;
          }
        }
        uint64_t v23 = 0x268774000;
        unint64_t v34 = v49;
        uint64_t v7 = v48;
        uint64_t v35 = v175;
      }
      else
      {
        long long v52 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      goto LABEL_108;
    }
    if (!v6[30]) {
      uint64_t hasVideoEntityHierarchy = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v6 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
    uint64_t v36 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)hasVideoEntityHierarchy);
    if (v36)
    {
      uint64_t v159 = *re::videoLogObjects(v36);
      if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
      {
        buf[0].i16[0] = 0;
        _os_log_impl(&dword_233120000, v159, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper::impl::buildVideoEntityHierarchy]: build video entity hierarchy", (uint8_t *)buf, 2u);
      }
    }
    long long v177 = a3;
    id WeakRetained = (char *)objc_loadWeakRetained((id *)(v7 + 8448));
    int v32 = "__InternalVPC-Screen__";
    uint64_t v176 = a4;
    if (!WeakRetained)
    {
      long long v60 = re::ecs2::EntityFactory::instance(0);
      long long v61 = re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v60, 4uLL, &v185);
      long long v62 = v185;
      if (!v185) {
        goto LABEL_54;
      }
      long long v63 = (re *)re::VideoDefaults::logEnabled(v61);
      if (v63)
      {
        long long v165 = *re::videoLogObjects(v63);
        if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].i16[0] = 0;
          _os_log_impl(&dword_233120000, v165, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->createScreenEntity :: Created the Screen Entity and now Configuring it.", (uint8_t *)buf, 2u);
        }
      }
      buf[0].i64[0] = 0xF4664E2E6A44E25ALL;
      buf[0].i64[1] = (uint64_t)"__InternalVPC-Screen__";
      re::StringID::operator=((unint64_t *)v62 + 34, buf[0].i64);
      *((_DWORD *)v62 + 72) |= 0x1400u;
      re::ecs2::Entity::setSelfEnabled(v62, 0);
      re::StringID::destroyString((re::StringID *)buf);
      long long v64 = (re::ecs2::Entity *)((char *)v62 + 32);
      re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)v62 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      uint64_t v65 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      buf[0] = (int32x4_t)xmmword_23435FD50;
      buf[1] = (int32x4_t)xmmword_23435FD60;
      long long v194 = xmmword_23435FD80;
      long long v195 = xmmword_23435FBB0;
      long long v66 = (void *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v62 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      *(_OWORD *)uint64_t v186 = 0u;
      *(_OWORD *)uint64_t v190 = xmmword_23435FBB0;
      *(_OWORD *)long long v197 = 0u;
      re::decomposeScaleRotationTranslation<float>((uint64_t)buf, (int32x4_t *)v186, v190, v197);
      uint64_t v67 = *(void *)&v186[8];
      uint64_t v68 = *(void *)v190;
      uint64_t v69 = *(void *)&v190[8];
      uint64_t v70 = *(void *)v197;
      uint64_t v71 = *(void *)&v197[8];
      v66[4] = *(void *)v186;
      _OWORD v66[5] = v67;
      v66[6] = v68;
      v66[7] = v69;
      v66[8] = v70;
      v66[9] = v71;
      unint64_t v72 = (unsigned char *)*((void *)v62 + 27);
      if (!v72) {
        unint64_t v72 = (unsigned char *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v62 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      v72[25] = 0;
      v72[35] = 1;
      if (!v72[30]) {
        v72[30] = 1;
      }
      v72[31] = 1;
      re::AssetManager::assetHandle(v176, "engine:videoMaterial.rematerial", 1, 0, (uint64_t *)v186);
      if (v65) {
        float v74 = *(float *)(v65 + 164);
      }
      else {
        float v74 = 0.0;
      }
      re::ecs2::VideoPlayerComponentHelper::impl::createPlane((re::ecs2::VideoPlayerComponentHelper::impl *)v7, v62, 0, 1.0, 1.0, 0.0, v74, v73);
      uint64_t v117 = *((void *)v62 + 22);
      if (!v117) {
        uint64_t v117 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v62 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v117 + 56), (re::AssetHandle *)v186);
      uint64_t v118 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v62 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v118)
      {
        *(unsigned char *)(v118 + 108) = 1;
        re::ecs2::Component::markDirty((void *)v118);
      }
      uint64_t v119 = (void *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v62 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      memset(v190, 0, 24);
      if (*(unsigned char *)(v65 + 175)) {
        re::ecs2::buildCurvedCollisionShapeAssetHandle((re::ecs2 *)v197, v176, 0.0, 0.0, 1.0, 1.0);
      }
      else {
        re::ecs2::buildCollisionShapeAssetHandle((re::ecs2 *)v197, v176, 1.0, 1.0, v120);
      }
      *(_OWORD *)uint64_t v190 = *(_OWORD *)v197;
      memset(v197, 0, sizeof(v197));
      *(void *)&v190[16] = v198;
      uint64_t v198 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v197);
      re::AssetHandle::operator=((uint64_t)(v119 + 4), (uint64_t *)v190);
      re::ecs2::Component::markDirty(v119);
      uint64_t v124 = re::ecs2::EntityComponentCollection::add(v64, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::InputTargetComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      *(unsigned char *)(v124 + 27) = 1;
      *(_WORD *)(v124 + 25) = 257;
      re::ecs2::Component::markDirty((void *)v124);
      long long v125 = (re::ecs2::VideoPlayerComponentHelper::impl *)re::ecs2::EntityComponentCollection::add(v64, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::AssetHandle::operator=((uint64_t)v125 + 32, (uint64_t *)v186);
      re::ecs2::VideoPlayerComponentHelper::impl::addAttachmentsToVideoComponent(v125, v126);
      re::ecs2::EntityComponentCollection::add(v64, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v190);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v186);
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(v6 + 38, (uint64_t *)&v185);
      uint64_t v127 = v185 ? (char *)v185 + 8 : 0;
      objc_initWeak((id *)buf, v127);
      re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)(v7 + 8448), (id *)buf);
      objc_destroyWeak((id *)buf);
      if (!v185)
      {
LABEL_54:
        uint64_t v27 = v7 + 8456;
        float v38 = (char *)objc_loadWeakRetained((id *)(v7 + 8456));
        unint64_t v34 = "__InternalVPC-ScreenGlowEntity__";
        if (v38)
        {
LABEL_55:

LABEL_56:
          buf[0].i64[0] = 0xF4664E2E6A44E25ALL;
          buf[0].i64[1] = (uint64_t)"__InternalVPC-Screen__";
          uint64_t v39 = v6[41];
          if (v39)
          {
            float v40 = (uint64_t *)v6[43];
            uint64_t v41 = 8 * v39;
            while (1)
            {
              uint64_t v27 = *v40;
              if ((*(void *)(*v40 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
              {
                int v42 = *(char **)(v27 + 280);
                if (v42 == "__InternalVPC-Screen__" || !strcmp(v42, "__InternalVPC-Screen__")) {
                  break;
                }
              }
              ++v40;
              v41 -= 8;
              if (!v41) {
                goto LABEL_62;
              }
            }
          }
          else
          {
LABEL_62:
            uint64_t v27 = 0;
          }
          re::StringID::destroyString((re::StringID *)buf);
          buf[0].i64[0] = 0x931CC76C0DD179BALL;
          buf[0].i64[1] = (uint64_t)"__InternalVPC-ScreenGlowEntity__";
          uint64_t v43 = v6[41];
          if (v43)
          {
            long long v44 = (char **)v6[43];
            uint64_t v45 = 8 * v43;
            while (1)
            {
              int v32 = *v44;
              if ((*((void *)*v44 + 34) ^ 0x931CC76C0DD179BALL) <= 1)
              {
                __int16 v46 = (char *)*((void *)v32 + 35);
                if (v46 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v46, "__InternalVPC-ScreenGlowEntity__")) {
                  break;
                }
              }
              ++v44;
              v45 -= 8;
              if (!v45) {
                goto LABEL_69;
              }
            }
          }
          else
          {
LABEL_69:
            int v32 = 0;
          }
          re::StringID::destroyString((re::StringID *)buf);
          *(void *)&v183.var0 = 0x98636CD79C3E2C92;
          v183.var1 = "__InternalVPC-LeftEye__";
          unint64_t v34 = (char *)re::ecs2::Entity::findInHierarchyByName((uint64_t)v6, &v183);
          re::StringID::destroyString((re::StringID *)&v183);
          if (*(void *)(v7 + 8) == 2)
          {
            *(void *)&v182.var0 = 0x740B54E87609516CLL;
            v182.var1 = "__InternalVPC-RightEye__";
            uint64_t v35 = (_DWORD *)re::ecs2::Entity::findInHierarchyByName((uint64_t)v6, &v182);
            re::StringID::destroyString((re::StringID *)&v182);
          }
          else
          {
            uint64_t v35 = 0;
          }
          buf[0].i64[0] = 0xB71EB2016BE7B4ALL;
          buf[0].i64[1] = (uint64_t)"__InternalVPC-PortalWorld__";
          uint64_t v54 = v6[41];
          if (v54)
          {
            uint64_t v174 = v7;
            long long v55 = v34;
            long long v56 = (re::ecs2::MaterialParameterBlockArrayComponent **)v6[43];
            uint64_t v57 = 8 * v54;
            while (1)
            {
              long long v52 = *v56;
              if ((*((void *)*v56 + 34) ^ 0xB71EB2016BE7B4AuLL) <= 1)
              {
                uint64_t v58 = (char *)*((void *)v52 + 35);
                if (v58 == "__InternalVPC-PortalWorld__" || !strcmp(v58, "__InternalVPC-PortalWorld__")) {
                  break;
                }
              }
              ++v56;
              v57 -= 8;
              if (!v57)
              {
                long long v52 = 0;
                break;
              }
            }
            unint64_t v59 = v177;
            unint64_t v34 = v55;
            uint64_t v7 = v174;
          }
          else
          {
            long long v52 = 0;
            unint64_t v59 = v177;
          }
          re::StringID::destroyString((re::StringID *)buf);
          re::AssetHandle::AssetHandle((re::AssetHandle *)v181, v59);
          if (v27)
          {
            uint64_t v103 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v27 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v103)
            {
              uint64_t v104 = v103;
              *(unsigned char *)(v103 + 291) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)v181);
              re::AssetHandle::operator=(v104 + 168, buf[0].i64);
              *(unsigned char *)(v104 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
            }
            else
            {
              long long v161 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
              {
                buf[0].i64[0] = 0xF0204000100;
                _os_log_error_impl(&dword_233120000, v161, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", (uint8_t *)buf, 8u);
              }
            }
          }
          if (v32)
          {
            uint64_t v105 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v32 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v105)
            {
              uint64_t v106 = v105;
              *(unsigned char *)(v105 + 291) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v186, (const re::AssetHandle *)v181);
              re::AssetHandle::operator=(v106 + 168, (uint64_t *)v186);
              *(unsigned char *)(v106 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v186);
              *(_DWORD *)(v106 + 292) = 2;
            }
            else
            {
              uint64_t v162 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v186 = 67109120;
                *(_DWORD *)&v186[4] = 3851;
                _os_log_error_impl(&dword_233120000, v162, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", v186, 8u);
              }
            }
          }
          if (v34)
          {
            uint64_t v107 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v107)
            {
              uint64_t v108 = v107;
              *(unsigned char *)(v107 + 291) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v190, (const re::AssetHandle *)v181);
              re::AssetHandle::operator=(v108 + 168, (uint64_t *)v190);
              *(unsigned char *)(v108 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v190);
            }
            else
            {
              uint64_t v163 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v190 = 67109120;
                *(_DWORD *)&v190[4] = 3860;
                _os_log_error_impl(&dword_233120000, v163, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", v190, 8u);
              }
            }
          }
          if (v35)
          {
            uint64_t v109 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v35 + 8), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v109)
            {
              uint64_t v110 = v109;
              *(unsigned char *)(v109 + 291) = 1;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v197, (const re::AssetHandle *)v181);
              re::AssetHandle::operator=(v110 + 168, (uint64_t *)v197);
              *(unsigned char *)(v110 + 73) = 0;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v197);
            }
            else
            {
              uint64_t v164 = *re::videoLogObjects(0);
              if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long v197 = 67109120;
                *(_DWORD *)&v197[4] = 3868;
                _os_log_error_impl(&dword_233120000, v164, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", v197, 8u);
              }
            }
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v181);
          re::FunctionBase<24ul,void ()(float,float,float)>::destroyCallable(v7 + 56);
          *(void *)(v7 + 56) = &unk_26E6FD0D8;
          *(void *)(v7 + 64) = v7;
          *(void *)(v7 + 72) = v176;
          *(void *)(v7 + 88) = v7 + 56;
          uint64_t v23 = (uint64_t)re::KTXTextureCompiler::getSupportedExtensions(void)const::supportedExtensions;
          uint64_t v111 = (re::ecs2::VideoPlayerStatusComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          long long v89 = (re *)re::AssetHandle::loadedAsset<re::VideoAsset>(v177);
          if (v89)
          {
            if (v111)
            {
              uint64_t v112 = v89;
              re::AssetHandle::AssetHandle((re::AssetHandle *)v180, v177);
              re::AssetHandle::operator=((uint64_t)v111 + 112, v180);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v180);
              long long v113 = (void *)*((void *)v112 + 24);
              if (v113)
              {
                if (*v113 && !*((unsigned char *)v111 + 104)) {
                  re::ecs2::VideoPlayerStatusComponent::setVideoReceiverEndpointAvailable(v111, 1);
                }
              }
            }
          }
LABEL_108:
          if (v27)
          {
            v6 += 4;
            if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)v6, *(const re::ecs2::ComponentTypeBase **)(v23 + 1976)))
            {
              uint64_t v90 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v90)
              {
                *(unsigned char *)(v7 + 4) = *((unsigned char *)v90 + 160);
                if (!*(unsigned char *)v7)
                {
LABEL_209:
                  if (!*(unsigned char *)(v7 + 1) && *(unsigned char *)(v7 + 2) == 1)
                  {
                    uint64_t v147 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v27 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                    if (v147)
                    {
                      float v150 = *(float *)(v147 + 64);
                      if (v150 != 0.0 && fabsf(v150) > 0.001
                        || (float v151 = *(float *)(v147 + 68), v151 != 0.0) && fabsf(v151) > 0.001)
                      {
                        re::ecs2::VideoPlayerComponentHelper::impl::setEntityVisibility((re::ecs2::VideoPlayerComponentHelper::impl *)v27, v148, v149);
                        re::ecs2::VideoPlayerComponentHelper::impl::setEntityVisibility((re::ecs2::VideoPlayerComponentHelper::impl *)v32, v152, v153);
                        *(unsigned char *)(v7 + 1) = 1;
                        uint64_t v155 = *re::videoLogObjects(v154);
                        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                        {
                          __int32 v156 = *(unsigned __int8 *)(v7 + 1);
                          buf[0].i32[0] = 67109120;
                          buf[0].i32[1] = v156;
                          _os_log_impl(&dword_233120000, v155, OS_LOG_TYPE_DEFAULT, "VideoPlayerComponentHelper sets video entities visibility: %d", (uint8_t *)buf, 8u);
                        }
                      }
                    }
                    else
                    {
                      uint64_t v168 = *re::videoLogObjects(0);
                      if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
                      {
                        buf[0].i64[0] = 0x2CE04000100;
                        _os_log_error_impl(&dword_233120000, v168, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", (uint8_t *)buf, 8u);
                      }
                    }
                  }
                  long long v157 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)v6, *(const re::ecs2::ComponentTypeBase **)(v23 + 1976));
                  if (*(unsigned char *)(v7 + 6) != 1 && *(unsigned char *)(v7 + 2) == 1)
                  {
                    if (v157)
                    {
                      buf[0].i8[0] = 1;
                      re::ecs2::VideoPlayerStatusComponent::setContentInfo(v157, (unsigned __int8 *)buf);
                      *(unsigned char *)(v7 + 6) = *(unsigned char *)(v7 + 2);
                    }
                    else
                    {
                      uint64_t v158 = (re *)re::VideoDefaults::logEnabled(0);
                      if (v158)
                      {
                        long long v169 = *re::videoLogObjects(v158);
                        if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
                        {
                          buf[0].i16[0] = 0;
                          _os_log_impl(&dword_233120000, v169, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper::impl::update] videoPlayerStatusComp is a null ptr", (uint8_t *)buf, 2u);
                        }
                      }
                    }
                  }
                  return;
                }
                *(unsigned char *)uint64_t v7 = 0;
                *(unsigned char *)(v7 + 16) = *((unsigned char *)v90 + 72);
                uint64_t v91 = *re::videoLogObjects(v90);
                if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                {
                  __int32 v92 = *(unsigned __int8 *)(v7 + 2);
                  if (*(unsigned char *)(v7 + 2) || (__int32 v93 = *(unsigned __int8 *)(v7 + 3), v93 != 1)) {
                    __int32 v93 = *(unsigned __int8 *)(v7 + 2);
                  }
                  buf[0].i32[0] = 67109376;
                  buf[0].i32[1] = v92;
                  buf[0].i16[4] = 1024;
                  *(__int32 *)((char *)&buf[0].i32[2] + 2) = v93;
                  _os_log_impl(&dword_233120000, v91, OS_LOG_TYPE_DEFAULT, "Changing VideoEntityHierarchyState: content type - %hhu, effective content type - %hhu", (uint8_t *)buf, 0xEu);
                }
                uint64_t v94 = v27 + 32;
                uint64_t v95 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v27 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (*(unsigned char *)(v7 + 2) != 1 && (*(unsigned char *)(v7 + 2) || *(unsigned char *)(v7 + 3) != 1))
                {
                  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v27, 0);
                  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v32, 0);
                  if (v34) {
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v34, 0);
                  }
                  if (v35) {
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v35, 0);
                  }
                  if (v52) {
                    re::ecs2::Entity::setSelfEnabled(v52, 0);
                  }
                  uint64_t v115 = *re::videoLogObjects(v114);
                  uint64_t v116 = (re *)os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT);
                  if (v116)
                  {
                    buf[0].i16[0] = 0;
                    _os_log_impl(&dword_233120000, v115, OS_LOG_TYPE_DEFAULT, "Invalid media type set for VideoEntity", (uint8_t *)buf, 2u);
                  }
                  goto LABEL_198;
                }
                re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v27, 1);
                if (!v95 || !*(unsigned char *)(v95 + 25))
                {
LABEL_187:
                  if (v34) {
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v34, 0);
                  }
                  if (v35) {
                    re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v35, 0);
                  }
                  if (v52) {
                    re::ecs2::Entity::setSelfEnabled(v52, 0);
                  }
                  int v136 = *(unsigned __int8 *)(v7 + 16);
                  long long v137 = (re *)re::VideoDefaults::logEnabled(v96);
                  if (!v136)
                  {
                    if (v137)
                    {
                      uint64_t v172 = *re::videoLogObjects(v137);
                      if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                      {
                        buf[0].i16[0] = 0;
                        _os_log_impl(&dword_233120000, v172, OS_LOG_TYPE_DEFAULT, "ImageBasedReflections are off", (uint8_t *)buf, 2u);
                      }
                    }
                    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v27 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                    goto LABEL_198;
                  }
                  if (!v137)
                  {
LABEL_195:
                    uint64_t v116 = (re *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)v94, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
LABEL_198:
                    uint64_t v138 = *re::videoLogObjects(v116);
                    BOOL v139 = os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
                    if (v139)
                    {
                      int v140 = *(_DWORD *)(v27 + 288) & 1;
                      buf[0].i32[0] = 67109120;
                      buf[0].i32[1] = v140;
                      _os_log_impl(&dword_233120000, v138, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state screenEntity: %d", (uint8_t *)buf, 8u);
                    }
                    if (v34)
                    {
                      long long v141 = *re::videoLogObjects((re *)v139);
                      BOOL v139 = os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT);
                      if (v139)
                      {
                        int v142 = *((_DWORD *)v34 + 72) & 1;
                        buf[0].i32[0] = 67109120;
                        buf[0].i32[1] = v142;
                        _os_log_impl(&dword_233120000, v141, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state leftEyeEntity: %d", (uint8_t *)buf, 8u);
                      }
                    }
                    if (v35)
                    {
                      uint64_t v143 = *re::videoLogObjects((re *)v139);
                      BOOL v139 = os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT);
                      if (v139)
                      {
                        int v144 = v35[72] & 1;
                        buf[0].i32[0] = 67109120;
                        buf[0].i32[1] = v144;
                        _os_log_impl(&dword_233120000, v143, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state rightEyeEntity: %d", (uint8_t *)buf, 8u);
                      }
                    }
                    if (v52)
                    {
                      long long v145 = *re::videoLogObjects((re *)v139);
                      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
                      {
                        int v146 = *((_DWORD *)v52 + 72) & 1;
                        buf[0].i32[0] = 67109120;
                        buf[0].i32[1] = v146;
                        _os_log_impl(&dword_233120000, v145, OS_LOG_TYPE_DEFAULT, "changeVideoEntityHierarchyState active state portalWorldEntity: %d", (uint8_t *)buf, 8u);
                      }
                    }
                    goto LABEL_209;
                  }
LABEL_242:
                  uint64_t v167 = *re::videoLogObjects(v137);
                  if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
                  {
                    buf[0].i16[0] = 0;
                    _os_log_impl(&dword_233120000, v167, OS_LOG_TYPE_DEFAULT, "ImageBasedReflections are on", (uint8_t *)buf, 2u);
                  }
                  goto LABEL_195;
                }
                long long v97 = (re *)re::VideoDefaults::logEnabled(v96);
                if (!v97
                  || (uint64_t v170 = *re::videoLogObjects(v97), !os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT)))
                {
LABEL_123:
                  int v98 = !*(unsigned char *)(v7 + 2) && *(unsigned char *)(v7 + 3) == 1 || *(unsigned __int8 *)(v7 + 2) == 1;
                  re::ecs2::Entity::setSelfEnabled((re::ecs2::Entity *)v32, v98);
                  goto LABEL_187;
                }
                if (*(unsigned char *)(v7 + 2))
                {
                  __int32 v171 = *(unsigned __int8 *)(v7 + 2);
                  if (v171 != 1) {
                    goto LABEL_257;
                  }
                }
                else if (*(unsigned char *)(v7 + 3) != 1)
                {
                  __int32 v171 = 0;
LABEL_257:
                  long long v173 = "Disabling";
                  goto LABEL_258;
                }
                long long v173 = "Enabling";
                __int32 v171 = 1;
LABEL_258:
                buf[0].i32[0] = 67109378;
                buf[0].i32[1] = v171;
                buf[0].i16[4] = 2080;
                *(uint64_t *)((char *)&buf[0].i64[1] + 2) = (uint64_t)v173;
                _os_log_impl(&dword_233120000, v170, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->changeVideoEntityHierarchyState :: content type - %hhu, %s the Screen Glow Entity", (uint8_t *)buf, 0x12u);
                goto LABEL_123;
              }
              uint64_t v160 = *re::videoLogObjects(0);
              if (!os_log_type_enabled(v160, OS_LOG_TYPE_ERROR)) {
                return;
              }
              buf[0].i64[0] = 0x42F04000100;
              uint64_t v100 = "VideoPlayerComponentHelper line: %d, videoPlayerComp is nullptr";
              long long v101 = v160;
              uint32_t v102 = 8;
LABEL_131:
              _os_log_error_impl(&dword_233120000, v101, OS_LOG_TYPE_ERROR, v100, (uint8_t *)buf, v102);
              return;
            }
            uint64_t v99 = *re::videoLogObjects(0);
            if (!os_log_type_enabled(v99, OS_LOG_TYPE_ERROR)) {
              return;
            }
            buf[0].i16[0] = 0;
            uint64_t v100 = "[VideoPlayerComponentHelper]->Update :: VideoPlayerStatusComponent is a nullptr";
          }
          else
          {
            uint64_t v99 = *re::videoLogObjects(v89);
            if (!os_log_type_enabled(v99, OS_LOG_TYPE_ERROR)) {
              return;
            }
            buf[0].i16[0] = 0;
            uint64_t v100 = "[VideoPlayerComponentHelper]->Update :: One of the Required Entites is a nullptr";
          }
          long long v101 = v99;
          uint32_t v102 = 2;
          goto LABEL_131;
        }
        uint64_t v75 = re::ecs2::EntityFactory::instance(0);
        uint64_t v76 = re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v75, 4uLL, &v184);
        long long v77 = v184;
        if (!v184) {
          goto LABEL_56;
        }
        uint64_t v78 = (re *)re::VideoDefaults::logEnabled(v76);
        if (v78)
        {
          uint64_t v166 = *re::videoLogObjects(v78);
          if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
          {
            buf[0].i16[0] = 0;
            _os_log_impl(&dword_233120000, v166, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->createScreenGlowEntity :: Created the Screen Glow Entity and now Configuring it.", (uint8_t *)buf, 2u);
          }
        }
        buf[0].i64[0] = 0x931CC76C0DD179BALL;
        buf[0].i64[1] = (uint64_t)"__InternalVPC-ScreenGlowEntity__";
        re::StringID::operator=((unint64_t *)v77 + 34, buf[0].i64);
        *((_DWORD *)v77 + 72) |= 0x1400u;
        re::ecs2::Entity::setSelfEnabled(v77, 0);
        re::StringID::destroyString((re::StringID *)buf);
        re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)v77 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        *(_OWORD *)uint64_t v186 = xmmword_23435FD50;
        long long v187 = xmmword_23435FD60;
        long long v188 = xmmword_23435FD80;
        long long v189 = xmmword_23435FBB0;
        uint64_t v79 = (void *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v77 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        buf[0] = 0u;
        *(_OWORD *)uint64_t v190 = xmmword_23435FBB0;
        *(_OWORD *)long long v197 = 0u;
        re::decomposeScaleRotationTranslation<float>((uint64_t)v186, buf, v190, v197);
        uint64_t v80 = buf[0].i64[1];
        uint64_t v81 = *(void *)v190;
        uint64_t v82 = *(void *)&v190[8];
        uint64_t v83 = *(void *)v197;
        uint64_t v84 = *(void *)&v197[8];
        v79[4] = buf[0].i64[0];
        v79[5] = v80;
        v79[6] = v81;
        v79[7] = v82;
        v79[8] = v83;
        v79[9] = v84;
        long long v85 = (unsigned char *)*((void *)v77 + 27);
        if (!v85) {
          long long v85 = (unsigned char *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v77 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        }
        v85[25] = 0;
        v85[35] = 1;
        if (!v85[30]) {
          v85[30] = 1;
        }
        v85[31] = 1;
        re::AssetManager::assetHandle(v176, "engine:BuiltinRenderGraphResources/SFBSystemShell/rectLightSpill.rematerial", 1, 0, (uint64_t *)v197);
        uint64_t v86 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        uint64_t v23 = v86;
        if (v86) {
          float v88 = *(float *)(v86 + 164);
        }
        else {
          float v88 = 0.0;
        }
        re::ecs2::VideoPlayerComponentHelper::impl::createInvertedPlane((re::ecs2::VideoPlayerComponentHelper::impl *)v7, v77, 1.5, 1.5, v88, v87);
        uint64_t v121 = *((void *)v77 + 22);
        if (!v121) {
          uint64_t v121 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v77 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        }
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v121 + 56), (re::AssetHandle *)v197);
        uint64_t v35 = (_DWORD *)((char *)v184 + 32);
        uint64_t v94 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v184 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        uint64_t v122 = (re::ecs2::MaterialParameterBlockArrayComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)v35, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        long long v52 = v122;
        if (v23) {
          float v123 = *(float *)(v23 + 156);
        }
        else {
          float v123 = 0.45;
        }
        float v129 = *(float *)(v94 + 104);
        __int32 v128 = *(_DWORD *)(v94 + 108);
        re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(v122, 1uLL);
        re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)v52 + 72, 1uLL);
        if (*((void *)v52 + 6))
        {
          uint64_t v130 = *((void *)v52 + 8);
          ++*(_DWORD *)(v130 + 16);
          uint64_t v94 = *(void *)v130;
          *(float *)buf[0].i32 = v123 * v129;
          uint64_t v23 = 1;
          re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v94, "intensity", 1, (unsigned __int8 *)buf);
          ++*(_DWORD *)(v94 + 400);
          if (*((void *)v52 + 6))
          {
            uint64_t v131 = *((void *)v52 + 8);
            ++*(_DWORD *)(v131 + 16);
            uint64_t v132 = *(void *)v131;
            buf[0].i32[0] = v128;
            re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v132, "sampleSpread", 1, (unsigned __int8 *)buf);
            ++*(_DWORD *)(v132 + 400);
            re::ecs2::Component::markDirty(v52);
            long long v133 = (re::ecs2::VideoPlayerComponentHelper::impl *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)v35, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            re::AssetHandle::operator=((uint64_t)v133 + 32, (uint64_t *)v197);
            *((unsigned char *)v133 + 291) = 1;
            re::ecs2::VideoPlayerComponentHelper::impl::addAttachmentsToVideoComponent(v133, v134);
            re::Collection<re::SharedPtr<re::ecs2::Entity>>::add(v6 + 38, (uint64_t *)&v184);
            if (v184) {
              uint64_t v135 = (char *)v184 + 8;
            }
            else {
              uint64_t v135 = 0;
            }
            objc_initWeak((id *)buf, v135);
            re::ArcWeakPtr<re::VideoHistogram>::operator=((id *)(v7 + 8456), (id *)buf);
            objc_destroyWeak((id *)buf);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v197);
            if (!v184) {
              goto LABEL_56;
            }
            float v38 = (char *)v184 + 8;
            goto LABEL_55;
          }
        }
        else
        {
          long long v185 = 0;
          long long v195 = 0u;
          long long v196 = 0u;
          long long v194 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
          *(_DWORD *)uint64_t v190 = 136315906;
          *(void *)&v190[4] = "operator[]";
          *(_WORD *)&v190[12] = 1024;
          *(_DWORD *)&v190[14] = 789;
          *(_WORD *)&v190[18] = 2048;
          *(void *)&v190[20] = 0;
          __int16 v191 = 2048;
          uint64_t v192 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        long long v185 = 0;
        long long v195 = 0u;
        long long v196 = 0u;
        long long v194 = 0u;
        memset(buf, 0, sizeof(buf));
        uint64_t v7 = &_os_log_internal;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v190 = 136315906;
        *(void *)&v190[4] = "operator[]";
        *(_WORD *)&v190[12] = 1024;
        *(_DWORD *)&v190[14] = 789;
        *(_WORD *)&v190[18] = 2048;
        *(void *)&v190[20] = 0;
        __int16 v191 = 2048;
        uint64_t v192 = 0;
        _os_log_send_and_compose_impl();
        long long v137 = (re *)_os_crash_msg();
        __break(1u);
        goto LABEL_242;
      }
      id WeakRetained = (char *)v185 + 8;
    }

    goto LABEL_54;
  }
  uint64_t v8 = a2;
  do
  {
    unint64_t v9 = v8;
    uint64_t v8 = (void *)v8[3];
  }
  while (v8);
  uint64_t v10 = v9[2];
  uint64_t v11 = re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount;
  if (v10) {
    BOOL v12 = re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    CameraViewsCount = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!CameraViewsCount || (uint64_t v13 = *(void *)(CameraViewsCount + 24)) == 0)
    {
LABEL_28:
      uint64_t v11 = re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount;
      goto LABEL_29;
    }
    uint64_t v14 = *(void *)(CameraViewsCount + 40);
    uint64_t v15 = 8 * v13;
    while (1)
    {
      CameraViewsCount = *(void *)v14;
      uint64_t v16 = *(void *)(*(void *)v14 + 16);
      if (v16 && (*(unsigned char *)(v16 + 288) & 1) != 0)
      {
        buf[0].i64[0] = 0;
        *(void *)uint64_t v186 = 0;
        CameraViewsCount = (uint64_t)re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount((uint64_t *)CameraViewsCount, (unint64_t *)buf, (unint64_t *)v186);
        if (re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount == 2
          || *(void *)v186 == 0)
        {
          if (re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount == 1
            || buf[0].i64[0] == 0)
          {
            goto LABEL_27;
          }
          uint64_t v19 = 1;
        }
        else
        {
          uint64_t v19 = 2;
        }
        re::ecs2::VideoPlayerComponentHelper::impl::getViewportCountFromScene(re::ecs2::Scene *)const::viewportCount = v19;
      }
LABEL_27:
      v14 += 8;
      v15 -= 8;
      if (!v15) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  *(void *)(v7 + 8) = v11;
  int v20 = *re::videoLogObjects((re *)CameraViewsCount);
  CameraViewsCount = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (CameraViewsCount)
  {
    uint64_t v21 = *(void *)(v7 + 8);
    buf[0].i32[0] = 134217984;
    *(uint64_t *)((char *)buf[0].i64 + 4) = v21;
    _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "Setting viewport count to %zu in VideoPlayerComponentHelper", (uint8_t *)buf, 0xCu);
  }
  if (*(void *)(v7 + 8)) {
    goto LABEL_32;
  }
}

uint64_t re::ecs2::VideoPlayerComponentHelper::impl::hasVideoEntityHierarchy(uint64_t a1, uint64_t a2)
{
  if (!a2 || (*(unsigned char *)(a2 + 289) & 8) != 0 || *(unsigned char *)(a2 + 371)) {
    return 0;
  }
  v8[0] = 0xF4664E2E6A44E25ALL;
  v8[1] = "__InternalVPC-Screen__";
  uint64_t v4 = *(void *)(a2 + 328);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 344);
    uint64_t v6 = 8 * v4;
    while (1)
    {
      if ((*(void *)(*(void *)v5 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
      {
        uint64_t v7 = *(char **)(*(void *)v5 + 280);
        if (v7 == "__InternalVPC-Screen__" || !strcmp(v7, "__InternalVPC-Screen__")) {
          break;
        }
      }
      v5 += 8;
      v6 -= 8;
      if (!v6) {
        goto LABEL_12;
      }
    }
    uint64_t v2 = 1;
  }
  else
  {
LABEL_12:
    uint64_t v2 = 0;
  }
  re::StringID::destroyString((re::StringID *)v8);
  return v2;
}

void re::ecs2::VideoPlayerComponentHelper::impl::postBufferRetrievalUpdate(re::ecs2::VideoPlayerComponentHelper::impl *this, float a2, re::ecs2::Entity *a3, re::AssetManager *a4)
{
  uint64_t v192 = *MEMORY[0x263EF8340];
  if (!a3 || !a4) {
    return;
  }
  *(void *)buf = 0xF4664E2E6A44E25ALL;
  *(void *)&buf[8] = "__InternalVPC-Screen__";
  uint64_t v8 = *((void *)a3 + 41);
  if (v8)
  {
    uint64_t v9 = *((void *)a3 + 43);
    uint64_t v10 = 8 * v8;
    while (1)
    {
      uint64_t v11 = *(void **)v9;
      if ((*(void *)(*(void *)v9 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
      {
        BOOL v12 = (char *)v11[35];
        if (v12 == "__InternalVPC-Screen__" || !strcmp(v12, "__InternalVPC-Screen__")) {
          break;
        }
      }
      v9 += 8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = 0;
  }
  re::StringID::destroyString((re::StringID *)buf);
  *(void *)buf = 0x931CC76C0DD179BALL;
  *(void *)&buf[8] = "__InternalVPC-ScreenGlowEntity__";
  uint64_t v13 = *((void *)a3 + 41);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)*((void *)a3 + 43);
    uint64_t v15 = 8 * v13;
    while (1)
    {
      uint64_t v16 = *v14;
      if ((*(void *)(*v14 + 272) ^ 0x931CC76C0DD179BALL) <= 1)
      {
        uint64_t v17 = *(char **)(v16 + 280);
        if (v17 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v17, "__InternalVPC-ScreenGlowEntity__")) {
          break;
        }
      }
      ++v14;
      v15 -= 8;
      if (!v15) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    uint64_t v16 = 0;
  }
  re::StringID::destroyString((re::StringID *)buf);
  if (!v11 || !v16)
  {
    uint64_t v39 = *re::videoLogObjects(v18);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)buf = 0;
    long long v97 = "[VideoPlayerComponentHelper]->postBufferRetrievalUpdate :: ScreenEntity or ScreenGlowEntity is a nullptr";
    int v98 = v39;
    uint32_t v99 = 2;
    goto LABEL_122;
  }
  uint64_t v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!v19)
  {
    uint64_t v160 = *re::videoLogObjects(0);
    if (!os_log_type_enabled(v160, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1402;
    long long v97 = "VideoPlayerComponentHelper line: %d, videoPlayerComp is nullptr";
    int v98 = v160;
    uint32_t v99 = 8;
LABEL_122:
    _os_log_error_impl(&dword_233120000, v98, OS_LOG_TYPE_ERROR, v97, buf, v99);
    return;
  }
  uint64_t v20 = 2;
  if (!*((unsigned char *)this + 2)) {
    uint64_t v20 = 3;
  }
  if (*((unsigned char *)this + v20) != 1) {
    return;
  }
  uint64_t v21 = v19;
  StringID v183 = (re::ecs2::Entity *)((char *)a3 + 32);
  long long v22 = (unsigned __int8 *)this + 6304;
  uint64_t v23 = (char *)this + 3;
  if (*((unsigned char *)this + 2))
  {
    StringID v182 = (char *)this + 3;
    uint64_t v24 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v19);
    if (v24)
    {
      long long v161 = *re::videoLogObjects(v24);
      uint64_t v24 = (re *)os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT);
      if (v24)
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v161, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Screen Entity is valid", buf, 2u);
      }
    }
    float v25 = (re *)re::VideoDefaults::logEnabled(v24);
    if (v25)
    {
      uint64_t v162 = *re::videoLogObjects(v25);
      if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v162, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Screen Entity is valid", buf, 2u);
      }
    }
    uint64_t v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v26)
    {
      uint64_t v27 = v26;
      if (*(unsigned __int8 *)(v21 + 152) != *((unsigned __int8 *)this + 5))
      {
        id WeakRetained = (char *)objc_loadWeakRetained((id *)this + 1057);
        if (!WeakRetained
          || (uint64_t v29 = WeakRetained,
              uint64_t v30 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType), v29, !v30))
        {
          float v40 = *re::videoLogObjects((re *)WeakRetained);
          uint64_t v19 = os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
          long long v22 = (unsigned __int8 *)this + 6304;
          uint64_t v23 = (char *)this + 3;
          if (!v19) {
            goto LABEL_52;
          }
          *(_WORD *)buf = 0;
          uint64_t v41 = "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: screenGlowVideoComponent is nullptr";
          int v42 = v40;
          uint32_t v43 = 2;
          goto LABEL_46;
        }
        uint64_t v31 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)WeakRetained);
        if (v31)
        {
          uint64_t v174 = *re::videoLogObjects(v31);
          if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
          {
            int v175 = *((unsigned __int8 *)this + 5);
            int v176 = *(unsigned __int8 *)(v21 + 152);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v175;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v176;
            _os_log_impl(&dword_233120000, v174, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Preferred viewing mode has changed from %d to %d", buf, 0xEu);
          }
        }
        char v32 = *(unsigned char *)(v21 + 152);
        *(unsigned char *)(v27 + 56) = v32;
        *(unsigned char *)(v30 + 56) = v32;
        *((unsigned char *)this + 5) = v32;
        long long v22 = (unsigned __int8 *)this + 6304;
      }
      uint64_t v33 = re::ecs2::EntityComponentCollection::get(v183, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v33)
      {
        uint64_t v34 = v33;
        if (*(unsigned __int8 *)(v33 + 72) != *(unsigned __int8 *)(v27 + 57))
        {
          uint64_t v33 = re::VideoDefaults::logEnabled((re::VideoDefaults *)v33);
          if (v33)
          {
            long long v169 = *re::videoLogObjects((re *)v33);
            uint64_t v33 = os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT);
            if (v33)
            {
              int v170 = *(unsigned __int8 *)(v34 + 72);
              int v171 = *(unsigned __int8 *)(v27 + 57);
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v170;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v171;
              _os_log_impl(&dword_233120000, v169, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Current viewing mode has changed from %d to %d", buf, 0xEu);
            }
          }
          int v35 = *(unsigned __int8 *)(v27 + 57);
          if (*(unsigned __int8 *)(v34 + 72) != v35)
          {
            *(unsigned char *)(v34 + 72) = v35;
            uint64_t v33 = *(void *)(*(void *)(v34 + 16) + 200);
            if (v33) {
              re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)v33, (const re::ecs2::Component *)v34);
            }
          }
        }
        uint64_t v19 = re::VideoDefaults::logEnabled((re::VideoDefaults *)v33);
        if (v19)
        {
          long long v165 = *re::videoLogObjects((re *)v19);
          uint64_t v19 = os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT);
          if (v19)
          {
            int v166 = *(unsigned __int8 *)(v27 + 57);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v166;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            _os_log_impl(&dword_233120000, v165, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Screen Current Viewing Mode == %d; Unknown == %d",
              buf,
              0xEu);
          }
        }
        if (*(unsigned char *)(v27 + 57))
        {
          uint64_t v36 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v19);
          if (v36)
          {
            uint64_t v167 = *re::videoLogObjects(v36);
            if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
            {
              int v168 = *(unsigned __int8 *)(v27 + 57);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v168;
              _os_log_impl(&dword_233120000, v167, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Viewing Mode is %d and setting the videoReadyToRender to true", buf, 8u);
            }
          }
          float32x2_t v37 = (re::ecs2::VideoPlayerStatusComponent *)v34;
          int v38 = 1;
        }
        else
        {
          long long v22 = (unsigned __int8 *)this + 6304;
          uint64_t v23 = (char *)this + 3;
          if (!*(unsigned char *)(v34 + 72)) {
            goto LABEL_52;
          }
          long long v44 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v19);
          if (v44)
          {
            long long v177 = *re::videoLogObjects(v44);
            if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
            {
              int v178 = *(unsigned __int8 *)(v27 + 57);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v178;
              _os_log_impl(&dword_233120000, v177, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->checkAndUpdateSyncedStates :: Viewing Mode is %d and setting the videoReadyToRender to false", buf, 8u);
            }
          }
          float32x2_t v37 = (re::ecs2::VideoPlayerStatusComponent *)v34;
          int v38 = 0;
        }
        re::ecs2::VideoPlayerStatusComponent::setVideoIsReadyToRender(v37, v38);
        long long v22 = (unsigned __int8 *)this + 6304;
        goto LABEL_51;
      }
      uint64_t v163 = *re::videoLogObjects(0);
      uint64_t v19 = os_log_type_enabled(v163, OS_LOG_TYPE_ERROR);
      uint64_t v23 = (char *)this + 3;
      if (v19)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 585;
        uint64_t v41 = "VideoPlayerComponentHelper line: %d, videoPlayerStatusComp is nullptr";
        goto LABEL_207;
      }
    }
    else
    {
      uint64_t v163 = *re::videoLogObjects(0);
      uint64_t v19 = os_log_type_enabled(v163, OS_LOG_TYPE_ERROR);
      uint64_t v23 = (char *)this + 3;
      if (v19)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 562;
        uint64_t v41 = "VideoPlayerComponentHelper line: %d, screenVideoComponent is nullptr";
LABEL_207:
        int v42 = v163;
        uint32_t v43 = 8;
LABEL_46:
        _os_log_error_impl(&dword_233120000, v42, OS_LOG_TYPE_ERROR, v41, buf, v43);
LABEL_51:
        uint64_t v23 = (char *)this + 3;
      }
    }
  }
LABEL_52:
  if (*((unsigned char *)this + 2)) {
    uint64_t v45 = (char *)this + 2;
  }
  else {
    uint64_t v45 = v23;
  }
  if (*v45 == 1)
  {
    uint64_t v46 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    unint64_t v49 = &xmmword_234364000;
    if (!v46)
    {
      uint64_t v164 = *re::videoLogObjects(0);
      long long v52 = (re::VideoDefaults *)os_log_type_enabled(v164, OS_LOG_TYPE_ERROR);
      if (v52)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1687;
        _os_log_error_impl(&dword_233120000, v164, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", buf, 8u);
      }
      int v58 = 0;
      unint64_t v49 = &xmmword_234364000;
LABEL_68:
      if (v22[2])
      {
        uint64_t v59 = *((void *)a3 + 30);
        if (v59)
        {
          float v60 = *(float *)(v59 + 36);
          if (v60 > 0.0)
          {
            float v61 = *(float *)(v59 + 32) / v60;
            if (*((float *)this + 8) != v61)
            {
              long long v62 = v49;
              *((float *)this + 8) = v61;
              long long v52 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v52);
              if (v52)
              {
                StringID v179 = *re::videoLogObjects(v52);
                long long v52 = (re::VideoDefaults *)os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT);
                if (v52)
                {
                  double v180 = *((float *)this + 8);
                  *(_DWORD *)buf = 134217984;
                  *(double *)&buf[4] = v180;
                  _os_log_impl(&dword_233120000, v179, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] m_currentVideoEntityScaleAspectRatio is updated: %f", buf, 0xCu);
                }
              }
              float v63 = *((float *)this + 8);
              if (v63 <= 0.0
                || (float v64 = *((float *)this + 9), v64 <= 0.0)
                || (int v58 = 1, v63 != v64) && vabds_f32(v63, v64) > *((float *)v62 + 876))
              {
                uint64_t v65 = *re::videoLogObjects(v52);
                long long v52 = (re::VideoDefaults *)os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT);
                if (v52)
                {
                  double v66 = *((float *)this + 8);
                  double v67 = *((float *)this + 9);
                  *(_DWORD *)buf = 134218240;
                  *(double *)&buf[4] = v66;
                  *(_WORD *)&buf[12] = 2048;
                  *(double *)&buf[14] = v67;
                  _os_log_impl(&dword_233120000, v65, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Scale ratio and content ratio are not matched yet, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", buf, 0x16u);
                }
                int v58 = 1;
              }
            }
          }
        }
      }
      uint64_t v68 = *((void *)a3 + 30);
      if (v68)
      {
        float v69 = *(float *)(v68 + 32);
        if (v69 < *(float *)(v68 + 36)) {
          float v69 = *(float *)(v68 + 36);
        }
        if (*((float *)this + 10) != v69)
        {
          *((float *)this + 10) = v69;
          long long v52 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v52);
          if (v52)
          {
            uint64_t v172 = *re::videoLogObjects(v52);
            long long v52 = (re::VideoDefaults *)os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT);
            if (v52)
            {
              double v173 = *((float *)this + 10);
              *(_DWORD *)buf = 134217984;
              *(double *)&buf[4] = v173;
              _os_log_impl(&dword_233120000, v172, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] m_currentVideoEntityScaleMax is updated: %f", buf, 0xCu);
            }
          }
          int v58 = 1;
        }
      }
      int v70 = *(unsigned __int8 *)(v21 + 172);
      if (*((unsigned __int8 *)this + 48) != v70)
      {
        *((unsigned char *)this + 48) = v70;
        int v58 = 1;
      }
      float v71 = *((float *)this + 11);
      float v72 = *(float *)(v21 + 164);
      if (v71 != v72)
      {
        *((float *)this + 11) = v72;
        if (!*(unsigned char *)(v21 + 173)) {
          goto LABEL_94;
        }
        long long v52 = vpc::ScreenMeshAnimationEngine::add((re::ecs2::VideoPlayerComponentHelper::impl *)((char *)this + 56), 2u);
        if (v52)
        {
          float v73 = v52;
          *(void *)buf = 0x4376BD773F800000;
          *(_DWORD *)&buf[8] = 1106990019;
          vpc::FloatSpringAnimation::setSpringParam((uint64_t)v52, (float *)buf);
          float v74 = (re *)[*((id *)v73 + 5) duration];
          *(float *)&double v75 = v75;
          *((_DWORD *)v73 + 3) = LODWORD(v75);
          *((float *)v73 + 4) = v71;
          *((_DWORD *)v73 + 5) = *((_DWORD *)this + 11);
          uint64_t v76 = *re::videoLogObjects(v74);
          long long v52 = (re::VideoDefaults *)os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
          if (v52)
          {
            double v77 = *((float *)this + 11);
            double v78 = *((float *)v73 + 3);
            *(_DWORD *)buf = 134218240;
            *(double *)&buf[4] = v77;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v78;
            _os_log_impl(&dword_233120000, v76, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] post m_screenWrapTheta animation: m_screenWrapTheta: %f, duration: %f", buf, 0x16u);
          }
        }
      }
      if (!v58)
      {
LABEL_106:
        if (*((float *)this + 9) > 0.0)
        {
          int v83 = *(unsigned __int8 *)(v21 + 73);
          if (*v22 != v83)
          {
            *long long v22 = v83;
            uint64_t v84 = vpc::ScreenMeshAnimationEngine::add((re::ecs2::VideoPlayerComponentHelper::impl *)((char *)this + 56), 1u);
            if (v84)
            {
              long long v85 = v84;
              if (*v22)
              {
                *(void *)buf = 0x41AA83123F800000;
                *(_DWORD *)&buf[8] = 1091812354;
                vpc::FloatSpringAnimation::setSpringParam((uint64_t)v84, (float *)buf);
                uint64_t v86 = 0x41B0000040400000;
              }
              else
              {
                *(void *)buf = 0x41AA83123F800000;
                *(_DWORD *)&buf[8] = 1091812354;
                vpc::FloatSpringAnimation::setSpringParam((uint64_t)v84, (float *)buf);
                uint64_t v86 = 0x4040000041B00000;
              }
              long long v141 = (re *)objc_msgSend(*((id *)v85 + 5), "duration", v182);
              *(float *)&double v142 = v142;
              *((_DWORD *)v85 + 3) = LODWORD(v142);
              *((_DWORD *)v85 + 2) = 0;
              *((void *)v85 + 2) = v86;
              uint64_t v143 = *re::videoLogObjects(v141);
              if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
              {
                int v144 = *v22;
                double v145 = *((float *)v85 + 3);
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v144;
                *(_WORD *)&buf[8] = 2048;
                *(double *)&buf[10] = v145;
                _os_log_impl(&dword_233120000, v143, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] post m_screenRoundedCornerEnabled animation: m_screenRoundedCornerEnabled: %d, duration: %f", buf, 0x12u);
              }
            }
          }
        }
        goto LABEL_113;
      }
LABEL_94:
      if (*((float *)this + 9) > 0.0)
      {
        uint64_t v79 = -4128;
        do
        {
          uint64_t v80 = *(void *)((char *)this + v79 + 4240);
          if (v80) {
            _ZF = 1;
          }
          else {
            _ZF = v79 == 0;
          }
          v79 += 2064;
        }
        while (!_ZF);
        if (!v80)
        {
          uint64_t v82 = *re::videoLogObjects(v52);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_233120000, v82, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] forceRegenerateMesh when animation enigine is idle", buf, 2u);
          }
          re::ecs2::VideoPlayerComponentHelper::impl::regenerateScreenMesh((uint64_t)this, v11, v16, a4, *((void *)this + 3), (re::ecs2::Entity *)v22[2], *((float *)this + 25), *((float *)this + 11));
          if (v22[2]) {
            *((_DWORD *)this + 24) = *((_DWORD *)this + 6);
          }
        }
      }
      goto LABEL_106;
    }
    __int16 v50 = (float32x2_t *)v46;
    unsigned __int8 v51 = *(unsigned char *)(v21 + 75);
    v22[2] = v51;
    *(unsigned char *)(v46 + 217) = v51;
    vpc::ScreenMeshAnimationEngine::update((re::ecs2::VideoPlayerComponentHelper::impl *)((char *)this + 56), a2, v47, v48);
    float v53 = *(float *)(v21 + 168);
    float v54 = v50[8].f32[0];
    LODWORD(v55) = v50[8].i32[1];
    if (((v54 == 0.0 || fabsf(v54) <= 0.001) && (*(float *)&v55 == 0.0 || fabsf(*(float *)&v55) <= 0.001)
       || *(float *)&v55 <= 0.0)
      && v53 <= 0.0)
    {
      goto LABEL_67;
    }
    float v56 = v54 / *(float *)&v55;
    if (v53 <= 0.0) {
      float v53 = v56;
    }
    *(float *)&long long v55 = roundf(v53 * 100.0) / 100.0;
    float v57 = *((float *)this + 9);
    if (*(float *)&v55 == v57
      || vabds_f32(*(float *)&v55, v57) < (float)((float)((float)(fabsf(*(float *)&v55) + fabsf(v57)) + 1.0) * 0.00001))
    {
LABEL_67:
      int v58 = 0;
      goto LABEL_68;
    }
    uint64_t v184 = v22;
    StringID v182 = v55;
    *((_DWORD *)this + 9) = v55;
    long long v113 = *re::videoLogObjects(v52);
    BOOL v114 = os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT);
    if (v114)
    {
      double v115 = v50[8].f32[0];
      double v116 = v50[8].f32[1];
      double v117 = *((float *)this + 9);
      int v118 = v184[2];
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v115;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v116;
      __int16 v186 = 2048;
      double v187 = v117;
      __int16 v188 = 2048;
      double v189 = v57;
      __int16 v190 = 1024;
      int v191 = v118;
      _os_log_impl(&dword_233120000, v113, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] New video dimension: {%f, %f}, Screen new aspect ratio: %f, prev aspect ratio: %f, m_isScreenDeferAspectRatioTransitionToApp: %d", buf, 0x30u);
    }
    int v119 = (int)v182;
    if (v184[3])
    {
      int v120 = *v184;
      int v121 = *(unsigned __int8 *)(v21 + 73);
      if (v120 != v121)
      {
        unsigned __int8 *v184 = v121;
        int v120 = v121;
      }
      if (v120)
      {
        *((_DWORD *)this + 25) = 1102053376;
        uint64_t v122 = *re::videoLogObjects((re *)v114);
        BOOL v114 = os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT);
        int v119 = (int)v182;
        if (v114)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v122, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Force generating rounded corner for the first time showing the video", buf, 2u);
          int v119 = (int)v182;
        }
      }
    }
    if (v184[2])
    {
      float v123 = *((float *)this + 8);
      if (v123 <= 0.0 || (float v124 = *((float *)this + 9), v124 <= 0.0) || v123 != v124 && vabds_f32(v123, v124) > 0.001)
      {
        long long v125 = *re::videoLogObjects((re *)v114);
        if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
        {
          double v126 = *((float *)this + 8);
          double v127 = *((float *)this + 9);
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v126;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v127;
          _os_log_impl(&dword_233120000, v125, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Scale ratio and content ratio are not matched yet, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", buf, 0x16u);
        }
      }
      if (v184[3]) {
        v184[3] = 0;
      }
    }
    else
    {
      __asm { FMOV            V0.2S, #1.0 }
      LODWORD(_D0) = v119;
      *((void *)this + 3) = _D0;
      int v150 = *(unsigned __int8 *)(v21 + 74);
      v184[1] = v150;
      if (v150 && !v184[3])
      {
        float v151 = vpc::ScreenMeshAnimationEngine::add((re::ecs2::VideoPlayerComponentHelper::impl *)((char *)this + 56), 0);
        if (v151)
        {
          BOOL v152 = v151;
          *(void *)buf = 0x4376BD773F800000;
          *(_DWORD *)&buf[8] = 1106990019;
          vpc::FloatSpringAnimation::setSpringParam((uint64_t)v151, (float *)buf);
          long long v153 = (re *)[*((id *)v152 + 5) duration];
          *(float *)&double v154 = v154;
          *((_DWORD *)v152 + 3) = LODWORD(v154);
          *((float *)v152 + 4) = v57;
          *((_DWORD *)v152 + 5) = v182;
          uint64_t v155 = *re::videoLogObjects(v153);
          if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
          {
            double v158 = *((float *)v152 + 3);
            *(_DWORD *)buf = 134217984;
            *(double *)&buf[4] = v158;
            _os_log_impl(&dword_233120000, v155, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] post m_isScreenSizeAnimationEnabled animation, duration: %f", buf, 0xCu);
          }
          vpc::ScreenMeshAnimationEngine::update((re::ecs2::VideoPlayerComponentHelper::impl *)((char *)this + 56), 0.0, v156, v157);
        }
        int v58 = 0;
        goto LABEL_170;
      }
      v184[3] = 0;
      *((_DWORD *)this + 24) = v119;
      uint64_t v159 = *re::videoLogObjects((re *)v114);
      if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_233120000, v159, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] Generate first mesh for the initial playback", buf, 2u);
      }
    }
    int v58 = 1;
LABEL_170:
    float32x2_t v128 = *(float32x2_t *)((char *)this + 24);
    float32x2_t v129 = v50[8];
    uint64_t v130 = (float32x2_t *)re::ecs2::EntityComponentCollection::get(v183, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v130)
    {
      uint64_t v131 = v130;
      uint32x2_t v132 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(v130[7], v128));
      if ((vpmax_u32(v132, v132).u32[0] & 0x80000000) != 0)
      {
        v130[7] = v128;
        uint64_t v130 = *(float32x2_t **)(*(void *)&v130[2] + 200);
        if (v130) {
          re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)v130, (const re::ecs2::Component *)v131);
        }
      }
      uint32x2_t v133 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(v131[8], v129));
      if ((vpmax_u32(v133, v133).u32[0] & 0x80000000) != 0)
      {
        v131[8] = v129;
        uint64_t v130 = *(float32x2_t **)(*(void *)&v131[2] + 200);
        if (v130) {
          re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)v130, (const re::ecs2::Component *)v131);
        }
      }
      uint64_t v134 = *re::videoLogObjects((re *)v130);
      BOOL v135 = os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT);
      long long v22 = v184;
      if (v135)
      {
        double v136 = v131[7].f32[0];
        double v137 = v131[7].f32[1];
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v136;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v137;
        _os_log_impl(&dword_233120000, v134, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] UpdatePlayerScreenSize as %f x %f", buf, 0x16u);
      }
      uint64_t v138 = *re::videoLogObjects((re *)v135);
      long long v52 = (re::VideoDefaults *)os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT);
      if (v52)
      {
        double v139 = v131[8].f32[0];
        double v140 = v131[8].f32[1];
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v139;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v140;
        _os_log_impl(&dword_233120000, v138, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] UpdateScreenVideoDimension as %f x %f", buf, 0x16u);
      }
    }
    else
    {
      long long v181 = *re::videoLogObjects(0);
      long long v52 = (re::VideoDefaults *)os_log_type_enabled(v181, OS_LOG_TYPE_ERROR);
      if (v52)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 2191;
        _os_log_error_impl(&dword_233120000, v181, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoPlayerStatusComponent is nullptr", buf, 8u);
      }
      long long v22 = v184;
    }
    unint64_t v49 = &xmmword_234364000;
    goto LABEL_68;
  }
  float v87 = *re::videoLogObjects((re *)v19);
  if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_233120000, v87, OS_LOG_TYPE_ERROR, "[VideoPlayerComponentHelper]->screenEntityAnimation :: This content is not Screen Content, or ScreenEntity, ScreenGlowEntity, or VideoPlayerEntity is a nullptr", buf, 2u);
  }
LABEL_113:
  float v88 = (re::ecs2::EntityComponentCollection *)(v11 + 4);
  uint64_t v89 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v90 = re::ecs2::EntityComponentCollection::get(v88, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v90)
  {
    float32x2_t v91 = *(float32x2_t *)(v90 + 72);
    float32x2_t v92 = *(float32x2_t *)(v90 + 80);
    *((float32x2_t *)this + 1058) = v91;
    *((float32x2_t *)this + 1059) = v92;
    if (!v89) {
      return;
    }
  }
  else
  {
    float32x2_t v91 = *(float32x2_t *)((char *)this + 8464);
    float32x2_t v92 = *(float32x2_t *)((char *)this + 8472);
    if (!v89) {
      return;
    }
  }
  int v93 = *((float *)this + 2120) > 1.0;
  if (*(void *)(v21 + 48))
  {
    uint64_t v94 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v21 + 40));
    if (v94)
    {
      uint64_t v95 = *(void *)(v94 + 192);
      float v96 = v95 ? *(float *)(v95 + 2624) : 0.0;
      if (fabsf(v96) >= 0.000001) {
        int v93 = 2;
      }
    }
  }
  float v100 = *((float *)this + 2121) + 1.0;
  *(float32x2_t *)(v89 + 224) = v91;
  *(float32x2_t *)(v89 + 232) = v92;
  *(float32x2_t *)(v89 + 240) = vmul_f32(vadd_f32(v92, v91), (float32x2_t)0x3F0000003F000000);
  *(float *)(v89 + 248) = v100;
  *(_DWORD *)(v89 + 252) = v93;
  if (!v22[4])
  {
    *(_DWORD *)(v89 + 272) = 1065353216;
    *(_OWORD *)(v89 + 256) = re::ecs2::kDefaultVideoBlurParams;
    v22[28] = 0;
    return;
  }
  if (*((float *)this + 9) > 0.0
    && re::ecs2::VideoComponent::isVideoBlurTextureAvailable((re::ecs2::VideoComponent *)v89))
  {
    uint64_t v101 = -4128;
    do
    {
      uint64_t v102 = *(void *)((char *)this + v101 + 4240);
      if (v102) {
        BOOL v103 = 1;
      }
      else {
        BOOL v103 = v101 == 0;
      }
      v101 += 2064;
    }
    while (!v103);
    uint64_t v104 = 36;
    if (v102) {
      uint64_t v104 = 96;
    }
    int v105 = *(_DWORD *)((char *)this + v104);
    int v106 = v22[4];
    if (v106 == 2)
    {
      float v107 = *((float *)this + 1582);
      if (v107 == 0.0) {
        *((_DWORD *)this + 1581) = v105;
      }
    }
    else
    {
      float v108 = 1.0;
      if ((v106 & 0xFE) != 2)
      {
LABEL_149:
        int v111 = *((_DWORD *)this + 1581);
        float v112 = *((float *)this + 1578);
        if (v112 == 0.0) {
          float v112 = *((float *)this + 1581);
        }
        *(unsigned char *)(v89 + 256) = v106;
        *(float *)(v89 + 260) = v108;
        *(_DWORD *)(v89 + 264) = v111;
        *(float *)(v89 + 268) = v112;
        *(_DWORD *)(v89 + 272) = v105;
        return;
      }
      float v107 = *((float *)this + 1582);
    }
    float v109 = v107 + a2;
    if (*((float *)this + 1579) <= v109) {
      float v109 = *((float *)this + 1579);
    }
    *((float *)this + 1582) = v109;
    float v110 = fminf(v109 * *((float *)this + 1580), 1.0);
    float v108 = 1.0 - v110;
    if (v106 == 2) {
      float v108 = v110;
    }
    if (v110 == 1.0)
    {
      LOBYTE(v106) = v106 == 2;
      *((_DWORD *)this + 1582) = 0;
      _OWORD v22[4] = v106;
    }
    goto LABEL_149;
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::regenerateScreenMesh(uint64_t a1, void *a2, uint64_t a3, re::AssetManager *a4, uint64_t a5, re::ecs2::Entity *a6, float a7, float a8)
{
  float v11 = *((float *)&a5 + 1);
  uint64_t v88 = *MEMORY[0x263EF8340];
  float v16 = *(float *)&a5;
  uint64_t v17 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)a1);
  if (v17)
  {
    float v63 = *re::videoLogObjects(v17);
    uint64_t v17 = (re *)os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      int v64 = *(unsigned __int8 *)(a1 + 6306);
      double v65 = *(float *)(a1 + 40);
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a7;
      *(_WORD *)&unsigned char buf[22] = 1024;
      LODWORD(v86) = a6;
      WORD2(v86) = 2048;
      *(double *)((char *)&v86 + 6) = v65;
      HIWORD(v86) = 1024;
      v87[0] = v64;
      _os_log_impl(&dword_233120000, v63, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] regenerateScreenMesh: aspectRatio: %f, cornerRadiusInPts: %f, customUV: %d, m_currentVideoEntityScaleMax: %f, m_isScreenDeferAspectRatioTransitionToApp: %d", buf, 0x2Cu);
    }
  }
  if (!a2) {
    return;
  }
  uint64_t v18 = a2[3];
  if (!v18 || (*(unsigned char *)(v18 + 288) & 0x80) != 0) {
    return;
  }
  uint64_t v19 = *(float32x4_t **)(v18 + 240);
  if (!v19)
  {
    double v66 = *re::videoLogObjects(v17);
    if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1528;
    double v67 = "VideoPlayerComponentHelper line: %d, videoEntityTFComp is nullptr";
    goto LABEL_59;
  }
  uint64_t v20 = a2[30];
  if (!v20)
  {
    double v66 = *re::videoLogObjects(v17);
    if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1530;
    double v67 = "VideoPlayerComponentHelper line: %d, tfComp is nullptr";
LABEL_59:
    _os_log_error_impl(&dword_233120000, v66, OS_LOG_TYPE_ERROR, v67, buf, 8u);
    return;
  }
  float v21 = v11;
  long long v22 = (unsigned char *)(a1 + 6306);
  if (*(unsigned char *)(a1 + 6306))
  {
    if (fminf(fminf(v19[2].f32[0], v19[2].f32[2]), v19[2].f32[1]) > 0.0)
    {
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v28 = vdivq_f32(_Q1, v19[2]);
      if (*(void *)(v20 + 16))
      {
        float32x4_t v78 = v28;
        uint64_t v29 = (re::VideoDefaults *)re::BindPoint::baseValueUntyped((re::BindPoint *)(v20 + 80));
        float32x4_t v28 = v78;
      }
      else
      {
        uint64_t v29 = (re::VideoDefaults *)(v20 + 32);
      }
      *(float32x4_t *)uint64_t v29 = v28;
      float v16 = v19[2].f32[0];
      float v21 = v19[2].f32[1];
      uint64_t v31 = (re *)re::VideoDefaults::logEnabled(v29);
      if (v31)
      {
        float v69 = *re::videoLogObjects(v31);
        BOOL v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT);
        if (v70)
        {
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v16;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v21;
          _os_log_impl(&dword_233120000, v69, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] new mesh size: %f, %f", buf, 0x16u);
        }
        float v71 = *re::videoLogObjects((re *)v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          float v72 = v71;
          double v73 = *(float *)(v20 + 32);
          double v74 = *(float *)(v20 + 36);
          double v75 = *(float *)(v20 + 40);
          *(_DWORD *)buf = 134218496;
          *(double *)&buf[4] = v73;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v74;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&long long v86 = v75;
          _os_log_impl(&dword_233120000, v72, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] screen entity local scale: %f, %f, %f", buf, 0x20u);
        }
        long long v22 = (unsigned char *)(a1 + 6306);
      }
    }
  }
  else
  {
    if (*(void *)(v20 + 16)) {
      uint64_t v30 = (void *)re::BindPoint::baseValueUntyped((re::BindPoint *)(v20 + 80));
    }
    else {
      uint64_t v30 = (void *)(v20 + 32);
    }
    *uint64_t v30 = 0x3F8000003F800000;
    v30[1] = 1065353216;
  }
  char v32 = (re *)re::ecs2::Component::markDirty((void *)v20);
  uint64_t v33 = *re::videoLogObjects(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_233120000, v33, OS_LOG_TYPE_ERROR, "[ScreenAnimation] Radius in Meters is still 0 after it should be, or maybe the app doesn't have CA context. Defaulting back to one to hopefully avoid possible UI issues", buf, 2u);
  }
  uint64_t v34 = a2[3];
  if (v34 && (*(unsigned char *)(v34 + 288) & 0x80) != 0) {
    uint64_t v34 = 0;
  }
  uint64_t v35 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v35)
  {
    uint64_t v37 = v35;
    float v38 = a7 * 0.001;
    re::ecs2::VideoPlayerComponentHelper::impl::createPlane((re::ecs2::VideoPlayerComponentHelper::impl *)a1, (re::AssetManager *)a2, a6, v16, v21, v38, a8, v36);
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    if (*(unsigned char *)(v37 + 175)) {
      re::ecs2::buildCurvedCollisionShapeAssetHandle((re::ecs2 *)buf, a4, a8, v38, v16, v21);
    }
    else {
      re::ecs2::buildCollisionShapeAssetHandle((re::ecs2 *)buf, a4, v16, v21, v39);
    }
    uint64_t v40 = *(void *)&buf[8];
    uint64_t v82 = *(void *)buf;
    uint64_t v83 = *(void *)&buf[8];
    memset(buf, 0, sizeof(buf));
    uint64_t v84 = *(void *)&buf[16];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    re::AssetHandle::loadNow(v40, 0);
    uint64_t v41 = (void *)a2[22];
    if (!v41)
    {
      uint64_t v68 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1586;
        _os_log_error_impl(&dword_233120000, v68, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, meshComponent is nullptr", buf, 8u);
      }
      goto LABEL_47;
    }
    int v42 = (re::ecs2::EntityComponentCollection *)(a2 + 4);
    re::ecs2::Component::markDirty(v41);
    uint64_t v43 = re::ecs2::EntityComponentCollection::get(v42, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v43)
    {
      long long v44 = (void *)v43;
      re::AssetHandle::operator=(v43 + 32, &v82);
      re::ecs2::Component::markDirty(v44);
    }
    else
    {
      uint64_t v45 = *re::videoLogObjects(0);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v45, OS_LOG_TYPE_ERROR, "[ScreenAnimation] Can't update colliderComponent as it is nil for screenEntity", buf, 2u);
      }
    }
    uint64_t v46 = re::ecs2::EntityComponentCollection::get(v42, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v46)
    {
      double v47 = (const re::AssetHandle *)(v46 + 168);
      uint64_t v48 = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v46 + 168));
      if (v48)
      {
        unint64_t v49 = re::AssetHandle::AssetHandle((re::AssetHandle *)v80, v47);
        int32x2_t v50 = vdup_n_s32(0x21Cu);
        v50.i32[0] = (int)(float)((float)(v16 / v21) * 540.0);
        int32x2_t v79 = vmin_s32(vmax_s32(v50, 0), (int32x2_t)0x80000000800);
        v51.i32[1] = 24;
        v51.i32[0] = (int)(float)((float)(v16 / v21) * 24.0);
        int32x2_t v77 = vmin_s32(vmax_s32(v51, 0), (int32x2_t)0x10000000100);
        long long v52 = *re::videoLogObjects(v49);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134219264;
          *(double *)&buf[4] = v16;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v21;
          *(_WORD *)&unsigned char buf[22] = 1024;
          LODWORD(v86) = v79.i32[0];
          WORD2(v86) = 1024;
          *(_DWORD *)((char *)&v86 + 6) = v79.i32[1];
          WORD5(v86) = 1024;
          HIDWORD(v86) = v77.i32[0];
          LOWORD(v87[0]) = 1024;
          *(_DWORD *)((char *)v87 + 2) = v77.i32[1];
          _os_log_impl(&dword_233120000, v52, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->regenerateScreenMesh:: Size (%f, %f) : Specular Dimensions == x=%i y=%i && Diffuse Dimensions == x=%i y=%i", buf, 0x2Eu);
        }
        re::AssetHandle::mutateAssetCommon((re::AssetHandle *)v80);
        ++*((_DWORD *)v81 + 65);
        uint64_t v53 = re::AssetHandle::asset<re::VideoAsset>((re::VideoAsset *)v80);
        if (v53)
        {
          *(int32x2_t *)(v53 + 232) = v79;
          *(int32x2_t *)(v53 + 216) = v77;
          float v54 = (os_unfair_lock_s *)v81;
          *((unsigned char *)v81 + 256) = 1;
          re::internal::AssetEntry::updateMutatedRuntimeAssetSize(v54);
          re::internal::AssetEntry::updateMutatedAssetNonSharedDataSize(v81);
        }
        re::AssetHandle::payloadDidChangeIfPossible((re::AssetHandle *)v80);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v80);
        if (!a3) {
          goto LABEL_47;
        }
        goto LABEL_41;
      }
    }
    else
    {
      long long v55 = *re::videoLogObjects(0);
      uint64_t v48 = os_log_type_enabled(v55, OS_LOG_TYPE_ERROR);
      if (v48)
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, v55, OS_LOG_TYPE_ERROR, "[ScreenAnimation] Can't update spillMap as videoComponent is nil for screenEntity", buf, 2u);
        if (a3) {
          goto LABEL_41;
        }
        goto LABEL_47;
      }
    }
    if (a3)
    {
LABEL_41:
      if ((*(unsigned char *)(a3 + 288) & 8) != 0)
      {
        uint64_t v56 = *(void *)(a3 + 24);
        if (v56)
        {
          if ((*(unsigned char *)(v56 + 288) & 0x80) == 0 && !*v22)
          {
            float v57 = v16 * re::VideoDefaults::glowSizeXModifier((re::VideoDefaults *)v48);
            float v59 = v21 * re::VideoDefaults::glowSizeYModifier(v58);
            float v61 = (re *)re::VideoDefaults::logEnabled(v60);
            if (v61)
            {
              uint64_t v76 = *re::videoLogObjects(v61);
              if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218240;
                *(double *)&buf[4] = v57;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v59;
                _os_log_impl(&dword_233120000, v76, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->regenerateScreenMesh ::          glowSize.x : %f, glowSize.y : %f ", buf, 0x16u);
              }
            }
            re::ecs2::VideoPlayerComponentHelper::impl::createInvertedPlane((re::ecs2::VideoPlayerComponentHelper::impl *)a1, (re::ecs2::Entity *)a3, v57, v59, a8, v62);
          }
        }
      }
    }
LABEL_47:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v82);
    return;
  }
  double v66 = *re::videoLogObjects(0);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 1566;
    double v67 = "VideoPlayerComponentHelper line: %d, videoPlayerComponent is nullptr";
    goto LABEL_59;
  }
}

void *re::ecs2::VideoPlayerComponentHelper::impl::createPlane(re::ecs2::VideoPlayerComponentHelper::impl *this, re::AssetManager *a2, re::ecs2::Entity *a3, float a4, float a5, float a6, float a7, float a8)
{
  int v9 = (int)a3;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v15 = (re *)re::VideoDefaults::logEnabled(this);
  if (v15)
  {
    uint64_t v26 = *re::videoLogObjects(v15);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = *((unsigned __int8 *)this + 6306);
      double v28 = *((float *)this + 8);
      double v29 = *((float *)this + 9);
      int v30 = 134219520;
      double v31 = a4;
      __int16 v32 = 2048;
      double v33 = a5;
      __int16 v34 = 2048;
      double v35 = a6;
      __int16 v36 = 1024;
      int v37 = v9;
      __int16 v38 = 1024;
      int v39 = v27;
      __int16 v40 = 2048;
      double v41 = v28;
      __int16 v42 = 2048;
      double v43 = v29;
      _os_log_impl(&dword_233120000, v26, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] createPlane: width: %f, height: %f, cornerRadius: %f, customUV: %d, m_isScreenDeferAspectRatioTransitionToApp: %d, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", (uint8_t *)&v30, 0x40u);
    }
  }
  uint64_t v16 = re::ecs2::EntityComponentCollection::getOrAdd((re::AssetManager *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v18 = (re::ecs2::UILayerGeometryComponent *)v16;
  *(float *)(v16 + 48) = a4;
  *(float *)(v16 + 52) = a5;
  *(void *)(v16 + 40) = 0;
  if (a6 == 0.0 || a6 > 0.0 && ((float)(a6 + a6) < a4 ? (BOOL v19 = (float)(a6 + a6) < a5) : (BOOL v19 = 0), v19))
  {
    *(float *)(v16 + 56) = a6;
    *(_WORD *)(v16 + 32) = 16;
  }
  *(_WORD *)(v16 + 26) = 64;
  *(float *)(v16 + 64) = a7;
  *(_DWORD *)(v16 + 36) = 0;
  *(unsigned char *)(v16 + 60) = 0;
  if (v9 && (float v20 = *((float *)this + 9), v20 > 0.0))
  {
    if (*((unsigned char *)this + 6306)) {
      a4 = *((float *)this + 8);
    }
    *(float *)v17.i32 = a4 / v20;
    *((_DWORD *)this + 2120) = v17.i32[0];
    if (*(float *)v17.i32 > 0.99 && *(float *)v17.i32 < 1.01)
    {
      *((_DWORD *)this + 2120) = 1065353216;
      *((_OWORD *)this + 529) = xmmword_2343854A0;
      int32x2_t v17 = (int32x2_t)COERCE_UNSIGNED_INT(1.0);
    }
    *(int32x2_t *)(v16 + 96) = vdup_lane_s32(v17, 0);
    *(void *)(v16 + 88) = 1056964608;
    *(void *)(v16 + 72) = *((void *)this + 1058);
    *(void *)(v16 + 80) = *((void *)this + 1059);
    float v21 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v16);
    if (v21)
    {
      uint64_t v23 = *re::videoLogObjects(v21);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        double v24 = *((float *)this + 2120);
        int v30 = 134217984;
        double v31 = v24;
        _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] createPlane with uScale: %f", (uint8_t *)&v30, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v22 = 1056964608;
    *(_OWORD *)(v16 + 88) = xmmword_234386CF0;
    *(_DWORD *)(v16 + 104) = 0;
  }
  re::ecs2::UILayerGeometryComponent::buildGeomMesh(v18, *(double *)&v22);
  return re::ecs2::Component::markDirty(v18);
}

void re::ecs2::VideoPlayerComponentHelper::impl::createInvertedPlane(re::ecs2::VideoPlayerComponentHelper::impl *this, re::ecs2::Entity *a2, float a3, float a4, float a5, float a6)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  float v11 = (re *)re::VideoDefaults::logEnabled(this);
  if (v11)
  {
    uint64_t v14 = *re::videoLogObjects(v11);
    float v11 = (re *)os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      int v15 = *((unsigned __int8 *)this + 6306);
      double v16 = *((float *)this + 8);
      double v17 = *((float *)this + 9);
      int v22 = 134219520;
      double v23 = a3;
      __int16 v24 = 2048;
      double v25 = a4;
      __int16 v26 = 2048;
      uint64_t v27 = 0;
      __int16 v28 = 1024;
      int v29 = 0;
      __int16 v30 = 1024;
      int v31 = v15;
      __int16 v32 = 2048;
      double v33 = v16;
      __int16 v34 = 2048;
      double v35 = v17;
      _os_log_impl(&dword_233120000, v14, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->createInvertedPlaneAsset :: width: %f, height: %f, cornerRadius: %f, customUV: %d, m_isScreenDeferAspectRatioTransitionToApp: %d, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", (uint8_t *)&v22, 0x40u);
    }
  }
  if (a2)
  {
    BOOL v12 = (re *)re::VideoDefaults::logEnabled(v11);
    if (v12)
    {
      uint64_t v18 = *re::videoLogObjects(v12);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *((unsigned __int8 *)this + 6306);
        double v20 = *((float *)this + 8);
        double v21 = *((float *)this + 9);
        int v22 = 134219520;
        double v23 = a3;
        __int16 v24 = 2048;
        double v25 = a4;
        __int16 v26 = 2048;
        uint64_t v27 = 0;
        __int16 v28 = 1024;
        int v29 = 0;
        __int16 v30 = 1024;
        int v31 = v19;
        __int16 v32 = 2048;
        double v33 = v20;
        __int16 v34 = 2048;
        double v35 = v21;
        _os_log_impl(&dword_233120000, v18, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] createPlane: width: %f, height: %f, cornerRadius: %f, customUV: %d, m_isScreenDeferAspectRatioTransitionToApp: %d, m_currentVideoEntityScaleAspectRatio: %f, m_currentContentAspectRatio: %f", (uint8_t *)&v22, 0x40u);
      }
    }
    uint64_t v13 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UILayerGeometryComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(float *)(v13 + 48) = a3;
    *(float *)(v13 + 52) = a4;
    *(void *)(v13 + 40) = 0;
    *(_DWORD *)(v13 + 36) = 0;
    *(_DWORD *)(v13 + 56) = 0;
    *(_WORD *)(v13 + 32) = 16;
    *(_WORD *)(v13 + 26) = 64;
    *(float *)(v13 + 64) = a5;
    *(unsigned char *)(v13 + 69) = 1;
    re::ecs2::Component::markDirty((void *)v13);
  }
}

void vpc::ScreenMeshAnimationEngine::update(vpc::ScreenMeshAnimationEngine *this, float a2, double a3, __n128 a4)
{
  uint64_t v6 = 0;
  char v7 = 0;
  do
  {
    uint64_t v8 = (char *)this + v6;
    if (*(void *)((char *)this + v6 + 56))
    {
      uint64_t v9 = *((void *)v8 + 9);
      float v10 = *(float *)(v9 + 32) + a2;
      *(float *)(v9 + 32) = v10;
      float v12 = *(float *)(v9 + 8);
      float v11 = *(float *)(v9 + 12);
      float v13 = v11 + v12;
      if (v10 >= (float)(v11 + v12))
      {
        *(unsigned char *)(v9 + 37) = 1;
        a4.n128_u32[0] = 1.0;
      }
      else
      {
        a4.n128_u64[0] = 0;
        if (v11 > 0.0 && v10 > v12)
        {
          a4.n128_f32[0] = (float)(v10 - v12) / v11;
          if (!*(unsigned char *)(v9 + 36)) {
            *(unsigned char *)(v9 + 36) = 1;
          }
        }
      }
      **(float **)(v9 + 24) = (*(float (**)(uint64_t, float, float, __n128))(*(void *)v9 + 16))(v9, *(float *)(v9 + 16), *(float *)(v9 + 20), a4);
      if (v10 >= v13)
      {
        if (!*((void *)v8 + 7))
        {
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, 0, 0);
          _os_crash();
          __break(1u);
LABEL_25:
          re::internal::assertLog((re::internal *)6, v16, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeStableAt", 555, 0, 0);
          _os_crash();
          __break(1u);
          return;
        }
        re::internal::destroyPersistent<vpc::FloatAnimation>((re *)"update", 224, *((void (****)(void))v8 + 9));
        uint64_t v17 = *((void *)v8 + 7);
        if (!v17) {
          goto LABEL_25;
        }
        uint64_t v18 = v17 - 1;
        if (v17 != 1)
        {
          int v19 = (char *)this + v6 + 80;
          if ((char *)this + 8 * v17 + v6 + 72 != v19) {
            memmove(v8 + 72, v19, 8 * v17 - 8);
          }
        }
        *((void *)v8 + 7) = v18;
        ++*(_DWORD *)((char *)this + v6 + 64);
      }
      char v7 = 1;
    }
    v6 += 2064;
  }
  while (v6 != 6192);
  if (v7)
  {
    uint64_t v20 = *((void *)this + 4);
    if (v20)
    {
      int v21 = *((_DWORD *)this + 10);
      int v22 = *((_DWORD *)this + 12);
      int v24 = *((_DWORD *)this + 11);
      int v25 = v21;
      int v23 = v22;
      (*(void (**)(uint64_t, int *, int *, int *))(*(void *)v20 + 16))(v20, &v25, &v24, &v23);
    }
  }
}

vpc::FloatSpringAnimation *vpc::ScreenMeshAnimationEngine::add(re *a1, unsigned int a2)
{
  if (a2 == 2)
  {
    char v7 = re::globalAllocators(a1);
    uint64_t v5 = (vpc::FloatSpringAnimation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7[2] + 32))(v7[2], 48, 8);
    uint64_t v6 = (float *)((char *)a1 + 48);
  }
  else if (a2 == 1)
  {
    uint64_t v8 = re::globalAllocators(a1);
    uint64_t v5 = (vpc::FloatSpringAnimation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8[2] + 32))(v8[2], 48, 8);
    uint64_t v6 = (float *)((char *)a1 + 44);
  }
  else
  {
    if (a2) {
      return 0;
    }
    uint64_t v4 = re::globalAllocators(a1);
    uint64_t v5 = (vpc::FloatSpringAnimation *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 48, 8);
    uint64_t v6 = (float *)((char *)a1 + 40);
  }
  uint64_t result = vpc::FloatSpringAnimation::FloatSpringAnimation(v5, v6);
  if (result)
  {
    float v10 = (uint64_t *)((char *)a1 + 2064 * a2 + 56);
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 <= 0xFF)
    {
      uint64_t v12 = (uint64_t)a1 + 2064 * a2 + 56;
      *(void *)(v12 + 8 * v11 + 16) = result;
      *float v10 = v11 + 1;
      ++*(_DWORD *)(v12 + 8);
    }
  }
  return result;
}

uint64_t vpc::FloatSpringAnimation::setSpringParam(uint64_t a1, float *a2)
{
  [*(id *)(a1 + 40) setMass:*a2];
  [*(id *)(a1 + 40) setStiffness:a2[1]];
  [*(id *)(a1 + 40) setDamping:a2[2]];
  [*(id *)(a1 + 40) settlingDuration];
  uint64_t v4 = *(void **)(a1 + 40);
  return objc_msgSend(v4, "setDuration:");
}

void re::ecs2::VideoPlayerComponentHelper::impl::updateAudioSrcPosition(uint64_t a1, re::ecs2::Entity *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!a2) {
    return;
  }
  VideoAudioControlComponentUnderneathParent = (re *)re::ecs2::VideoAudioControlSystem::getVideoAudioControlComponentUnderneathParent((uint64_t)a2, a2);
  if (!VideoAudioControlComponentUnderneathParent) {
    return;
  }
  uint64_t v5 = *((void *)VideoAudioControlComponentUnderneathParent + 2);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void *)(v5 + 240);
  if (!v6)
  {
    uint64_t v17 = *re::videoLogObjects(VideoAudioControlComponentUnderneathParent);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 2057;
    uint64_t v18 = "VideoPlayerComponentHelper line: %d, audioTFComp is nullptr";
    goto LABEL_28;
  }
  uint64_t v7 = *((void *)a2 + 30);
  if (!v7)
  {
    uint64_t v17 = *re::videoLogObjects(VideoAudioControlComponentUnderneathParent);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = 2059;
    uint64_t v18 = "VideoPlayerComponentHelper line: %d, parentTFComp is nullptr";
LABEL_28:
    _os_log_error_impl(&dword_233120000, v17, OS_LOG_TYPE_ERROR, v18, buf, 8u);
    return;
  }
  if (*(unsigned char *)(a1 + 2) == 1 || !*(unsigned char *)(a1 + 2) && *(unsigned char *)(a1 + 3) == 1)
  {
    uint64_t v8 = *(re::ecs2::TransformComponent ***)(v6 + 16);
    if (v8)
    {
      re::ecs2::TransformComponent::worldSRT(v8, (const re::ecs2::Entity *)1, (uint64_t)buf);
    }
    else
    {
      float32x4_t v9 = *(float32x4_t *)(v6 + 48);
      *(_OWORD *)buf = *(_OWORD *)(v6 + 32);
      float32x4_t v24 = v9;
      float32x4_t v25 = *(float32x4_t *)(v6 + 64);
    }
    float v10 = *(re::ecs2::TransformComponent ***)(v7 + 16);
    if (v10)
    {
      re::ecs2::TransformComponent::worldSRT(v10, (const re::ecs2::Entity *)1, (uint64_t)&v20);
    }
    else
    {
      float32x4_t v11 = *(float32x4_t *)(v7 + 48);
      float32x4_t v20 = *(float32x4_t *)(v7 + 32);
      float32x4_t v21 = v11;
      float32x4_t v22 = *(float32x4_t *)(v7 + 64);
    }
    uint32x4_t v12 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)buf, v20));
    v12.i32[3] = v12.i32[2];
    if ((vmaxvq_u32(v12) & 0x80000000) != 0
      || (vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v24, v21))) & 0x80000000) != 0
      || (uint32x4_t v13 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v25, v22)),
          v13.i32[3] = v13.i32[2],
          (vmaxvq_u32(v13) & 0x80000000) != 0))
    {
      uint64_t v14 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v10);
      if (v14)
      {
        int v19 = *re::videoLogObjects(v14);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_233120000, v19, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->updateAudioSrcPosition :: Video :: Updating the AudioSrc's World SRT", buf, 2u);
        }
      }
      uint64_t v15 = *(re::ecs2::TransformComponent ***)(v7 + 16);
      if (v15)
      {
        re::ecs2::TransformComponent::worldSRT(v15, (const re::ecs2::Entity *)1, (uint64_t)buf);
      }
      else
      {
        float32x4_t v16 = *(float32x4_t *)(v7 + 48);
        *(_OWORD *)buf = *(_OWORD *)(v7 + 32);
        float32x4_t v24 = v16;
        float32x4_t v25 = *(float32x4_t *)(v7 + 64);
      }
      re::ecs2::TransformComponent::setWorldSRT(v6, (uint64_t)buf, 0);
      re::ecs2::Component::markDirty((void *)v6);
    }
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::setVideoAssetContentInfo(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)a1);
  if (v4)
  {
    uint64_t v7 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *a2;
      int v9 = a2[1];
      v10[0] = 67109376;
      v10[1] = v8;
      __int16 v11 = 1024;
      int v12 = v9;
      _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper::impl::VideoAssetContentInfo]: contentType is set to %d, stereoType is set to %d", (uint8_t *)v10, 0xEu);
    }
  }
  int v5 = a1[2];
  int v6 = *a2;
  if (v5 != v6)
  {
    a1[3] = v5;
    a1[2] = v6;
    *(_WORD *)a1 = 1;
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::handleEntitiesPosition(re::ecs2::VideoPlayerComponentHelper::impl *this, re::ecs2::Entity *a2)
{
  uint64_t v4 = (re *)re::VideoDefaults::logEnabled(this);
  if (v4)
  {
    __int16 v40 = *re::videoLogObjects(v4);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_233120000, v40, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Starting the process of updating the entity positions", buf, 2u);
    }
  }
  if (a2)
  {
    uint64_t v5 = 2;
    if (!*((unsigned char *)this + 2)) {
      uint64_t v5 = 3;
    }
    if (*((unsigned char *)this + v5) == 1)
    {
      *(void *)buf = 0xF4664E2E6A44E25ALL;
      *(void *)&buf[8] = "__InternalVPC-Screen__";
      uint64_t v6 = *((void *)a2 + 41);
      if (v6)
      {
        uint64_t v7 = (uint64_t *)*((void *)a2 + 43);
        uint64_t v8 = 8 * v6;
        while (1)
        {
          uint64_t v9 = *v7;
          if ((*(void *)(*v7 + 272) ^ 0xF4664E2E6A44E25ALL) <= 1)
          {
            float v10 = *(char **)(v9 + 280);
            if (v10 == "__InternalVPC-Screen__" || !strcmp(v10, "__InternalVPC-Screen__")) {
              break;
            }
          }
          ++v7;
          v8 -= 8;
          if (!v8) {
            goto LABEL_12;
          }
        }
      }
      else
      {
LABEL_12:
        uint64_t v9 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      *(void *)buf = 0x931CC76C0DD179BALL;
      *(void *)&buf[8] = "__InternalVPC-ScreenGlowEntity__";
      uint64_t v11 = *((void *)a2 + 41);
      if (v11)
      {
        int v12 = (uint64_t *)*((void *)a2 + 43);
        uint64_t v13 = 8 * v11;
        while (1)
        {
          uint64_t v14 = *v12;
          if ((*(void *)(*v12 + 272) ^ 0x931CC76C0DD179BALL) <= 1)
          {
            uint64_t v15 = *(char **)(v14 + 280);
            if (v15 == "__InternalVPC-ScreenGlowEntity__" || !strcmp(v15, "__InternalVPC-ScreenGlowEntity__")) {
              break;
            }
          }
          ++v12;
          v13 -= 8;
          if (!v13) {
            goto LABEL_19;
          }
        }
      }
      else
      {
LABEL_19:
        uint64_t v14 = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      if (v9)
      {
        uint64_t v17 = *(void *)(v9 + 240);
        if (!v17)
        {
          float32x4_t v21 = *re::videoLogObjects(v16);
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            return;
          }
          *(_WORD *)buf = 0;
          float32x4_t v22 = "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Screen Transform Component is nullptr";
          goto LABEL_45;
        }
        uint64_t v18 = *((void *)a2 + 30);
        if (!v18)
        {
          float32x4_t v21 = *re::videoLogObjects(v16);
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            return;
          }
          *(_WORD *)buf = 0;
          float32x4_t v22 = "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Screen Parent Transform Component is nullptr";
          goto LABEL_45;
        }
        int v19 = *(re::ecs2::TransformComponent ***)(v17 + 16);
        if (v19)
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(v19, (const re::ecs2::Entity *)1, buf);
          float32x4_t v20 = (float32x4_t)v46;
        }
        else
        {
          float32x4_t v20 = *(float32x4_t *)(v17 + 64);
        }
        int v23 = *(re::ecs2::TransformComponent ***)(v18 + 16);
        if (v23)
        {
          float32x4_t v43 = v20;
          re::ecs2::TransformComponent::worldMatrix4x4F(v23, (const re::ecs2::Entity *)1, buf);
          float32x4_t v20 = v43;
          float32x4_t v24 = (float32x4_t)v46;
        }
        else
        {
          float32x4_t v24 = *(float32x4_t *)(v18 + 64);
        }
        uint32x4_t v25 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v20, v24));
        v25.i32[3] = v25.i32[2];
        if ((vmaxvq_u32(v25) & 0x80000000) != 0)
        {
          uint64_t v26 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v23);
          if (v26)
          {
            double v41 = *re::videoLogObjects(v26);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_233120000, v41, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Updating the ScreenEntitie's World Position", buf, 2u);
            }
          }
          uint64_t v27 = *(re::ecs2::TransformComponent ***)(v18 + 16);
          if (v27)
          {
            re::ecs2::TransformComponent::worldMatrix4x4F(v27, (const re::ecs2::Entity *)1, buf);
            uint64_t v29 = *((void *)&v46 + 1);
            uint64_t v28 = v46;
          }
          else
          {
            uint64_t v28 = *(void *)(v18 + 64);
            uint64_t v29 = *(void *)(v18 + 72);
          }
          re::ecs2::TransformComponent::setWorldPosition((void *)v17, v28, v29);
          int v23 = (re::ecs2::TransformComponent **)re::ecs2::Component::markDirty((void *)v17);
        }
        if (v14)
        {
          uint64_t v30 = *(void *)(v14 + 240);
          if (v30)
          {
            int v31 = *(re::ecs2::TransformComponent ***)(v30 + 16);
            if (v31)
            {
              re::ecs2::TransformComponent::worldMatrix4x4F(v31, (const re::ecs2::Entity *)1, buf);
              float32x4_t v32 = (float32x4_t)v46;
            }
            else
            {
              float32x4_t v32 = *(float32x4_t *)(v30 + 64);
            }
            double v33 = *(re::ecs2::TransformComponent ***)(v18 + 16);
            if (v33)
            {
              float32x4_t v44 = v32;
              re::ecs2::TransformComponent::worldMatrix4x4F(v33, (const re::ecs2::Entity *)1, buf);
              float32x4_t v32 = v44;
              float32x4_t v34 = (float32x4_t)v46;
            }
            else
            {
              float32x4_t v34 = *(float32x4_t *)(v18 + 64);
            }
            uint32x4_t v35 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v32, v34));
            v35.i32[3] = v35.i32[2];
            if ((vmaxvq_u32(v35) & 0x80000000) != 0)
            {
              uint64_t v36 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v33);
              if (v36)
              {
                __int16 v42 = *re::videoLogObjects(v36);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_233120000, v42, OS_LOG_TYPE_DEFAULT, "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Updating the Screen Glow Entity World Position", buf, 2u);
                }
              }
              int v37 = *(re::ecs2::TransformComponent ***)(v18 + 16);
              if (v37)
              {
                re::ecs2::TransformComponent::worldMatrix4x4F(v37, (const re::ecs2::Entity *)1, buf);
                uint64_t v39 = *((void *)&v46 + 1);
                uint64_t v38 = v46;
              }
              else
              {
                uint64_t v38 = *(void *)(v18 + 64);
                uint64_t v39 = *(void *)(v18 + 72);
              }
              re::ecs2::TransformComponent::setWorldPosition((void *)v30, v38, v39);
              re::ecs2::Component::markDirty((void *)v30);
            }
            return;
          }
          float32x4_t v21 = *re::videoLogObjects((re *)v23);
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
            return;
          }
          *(_WORD *)buf = 0;
          float32x4_t v22 = "[VideoPlayerComponentHelper]->handleEntitiesPosition :: Screen Glow Entity Transform Component is nullptr";
LABEL_45:
          _os_log_error_impl(&dword_233120000, v21, OS_LOG_TYPE_ERROR, v22, buf, 2u);
        }
      }
    }
  }
}

uint64_t re::ecs2::VideoPlayerComponentHelper::impl::isVideoEntityHierarchyValid(re::ecs2::VideoPlayerComponentHelper::impl *this, re::ecs2::Entity *a2)
{
  uint64_t result = re::ecs2::VideoPlayerComponentHelper::impl::hasVideoEntityHierarchy((uint64_t)this, (uint64_t)a2);
  if (result) {
    return re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType) != 0;
  }
  return result;
}

void re::ecs2::VideoPlayerComponentHelper::impl::startVideoBlurFadeIn(re::ecs2::VideoPlayerComponentHelper::impl *this, float a2, float a3)
{
  if (*((unsigned char *)this + 6308) == 3)
  {
    uint64_t v3 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_233120000, v3, OS_LOG_TYPE_DEFAULT, "Invalid blur transition.", v4, 2u);
    }
  }
  else if (!*((unsigned char *)this + 6308))
  {
    *((unsigned char *)this + 6308) = 2;
    *((float *)this + 1578) = a2;
    *((float *)this + 1579) = a3;
    *((float *)this + 1580) = 1.0 / a3;
    *((unsigned char *)this + 6332) = 1;
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::startVideoBlurFadeOut(re::ecs2::VideoPlayerComponentHelper::impl *this)
{
  int v1 = *((unsigned __int8 *)this + 6308);
  if (v1 == 2)
  {
    uint64_t v2 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_233120000, v2, OS_LOG_TYPE_DEFAULT, "Invalid blur transition.", v3, 2u);
    }
  }
  else if (v1 == 1)
  {
    *((unsigned char *)this + 6308) = 3;
  }
}

void re::ecs2::VideoPlayerComponentHelper::impl::addAttachmentsToVideoComponent(re::ecs2::VideoPlayerComponentHelper::impl *this, re::ecs2::VideoComponent *a2)
{
  uint64_t v2 = this;
  *(void *)&v30.var0 = 0xC49C914A9995F024;
  v30.var1 = "REVideoAttachmentTextureVideoBlur";
  v31[0] = 0;
  v31[1] = "";
  uint64_t v2 = (_anonymous_namespace_ *)((char *)v2 + 80);
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v30);
  re::StringID::destroyString((re::StringID *)v31);
  re::StringID::destroyString((re::StringID *)&v30);
  *(void *)&v28.var0 = 0xFFB9D6614348A962;
  v28.var1 = "REVideoAttachmentChannelID1TexturePlane0";
  v29[0] = 0;
  v29[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v28);
  re::StringID::destroyString((re::StringID *)v29);
  re::StringID::destroyString((re::StringID *)&v28);
  *(void *)&v26.var0 = 0xFFB9D6614348A964;
  v26.var1 = "REVideoAttachmentChannelID1TexturePlane1";
  v27[0] = 0;
  v27[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v26);
  re::StringID::destroyString((re::StringID *)v27);
  re::StringID::destroyString((re::StringID *)&v26);
  *(void *)&v24.var0 = 0xFFB9D6614348A966;
  v24.var1 = "REVideoAttachmentChannelID1TexturePlane2";
  v25[0] = 0;
  v25[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v24);
  re::StringID::destroyString((re::StringID *)v25);
  re::StringID::destroyString((re::StringID *)&v24);
  *(void *)&v22.var0 = 0xA572F05B07043CA0;
  v22.var1 = "REVideoAttachmentChannelID2TexturePlane0";
  v23[0] = 0;
  v23[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v22);
  re::StringID::destroyString((re::StringID *)v23);
  re::StringID::destroyString((re::StringID *)&v22);
  *(void *)&v20.var0 = 0xA572F05B07043CA2;
  v20.var1 = "REVideoAttachmentChannelID2TexturePlane1";
  v21[0] = 0;
  v21[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v20);
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)&v20);
  *(void *)&v18.var0 = 0xA572F05B07043CA4;
  v18.var1 = "REVideoAttachmentChannelID2TexturePlane2";
  v19[0] = 0;
  v19[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v18);
  re::StringID::destroyString((re::StringID *)v19);
  re::StringID::destroyString((re::StringID *)&v18);
  *(void *)&v16.var0 = 0x83807E236D5174B2;
  v16.var1 = "REVideoAttachmentConstantYCbCrMatrix";
  v17[0] = 0;
  v17[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v16);
  re::StringID::destroyString((re::StringID *)v17);
  re::StringID::destroyString((re::StringID *)&v16);
  *(void *)&v14.var0 = 0x652E145D102D3908;
  v14.var1 = "REVideoAttachmentConstantImageFunction";
  v15[0] = 0;
  v15[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v14);
  re::StringID::destroyString((re::StringID *)v15);
  re::StringID::destroyString((re::StringID *)&v14);
  *(void *)&v12.var0 = 0x963DA5D75AB5D342;
  v12.var1 = "REVideoAttachmentSpill";
  v13[0] = 0;
  v13[1] = "";
  re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add(v2, &v12);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)&v12);
}

re::ecs2::VideoPlayerComponentHelper *re::ecs2::VideoPlayerComponentHelper::VideoPlayerComponentHelper(re::ecs2::VideoPlayerComponentHelper *this)
{
  uint64_t v2 = re::globalAllocators(this);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 8560, 16);
  bzero((void *)v3, 0x2170uLL);
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(v3 + 24) = _D0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 0;
  float v10 = re::globalAllocators(v9);
  *(void *)(v3 + 80) = v10[2];
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0x400000003F800000;
  *(_DWORD *)(v3 + 104) = 0;
  uint64_t v11 = -6192;
  do
  {
    uint64_t v12 = v3 + v11;
    *(void *)(v12 + 6304) = 0;
    *(_DWORD *)(v12 + 6312) = 0;
    v11 += 2064;
  }
  while (v11);
  *(_DWORD *)(v3 + 6304) = 0x1000000;
  *(unsigned char *)(v3 + 6308) = 0;
  *(_OWORD *)(v3 + 6312) = 0u;
  *(void *)(v3 + 6325) = 0;
  *(void *)(v3 + 6360) = re::globalAllocators((re *)v10)[2];
  *(void *)(v3 + 6368) = 0;
  *(_DWORD *)(v3 + 6376) = 0;
  *(void *)(v3 + 6384) = 0;
  *(_DWORD *)(v3 + 6392) = 0;
  objc_initWeak((id *)(v3 + 8448), 0);
  objc_initWeak((id *)(v3 + 8456), 0);
  *(_OWORD *)(v3 + 8464) = xmmword_2343854A0;
  *(void *)(v3 + 8480) = 1065353216;
  *(_WORD *)(v3 + 8488) = 0;
  *(_DWORD *)(v3 + 8492) = 0;
  *(unsigned char *)(v3 + 8496) = -1;
  *(_OWORD *)(v3 + 8512) = xmmword_234382760;
  *(_OWORD *)(v3 + 8528) = xmmword_234382760;
  *(_OWORD *)(v3 + 8544) = xmmword_234382760;
  *(void *)this = v3;
  return this;
}

void re::ecs2::VideoPlayerComponentHelper::~VideoPlayerComponentHelper(id **this)
{
  int v1 = *this;
  if (*this)
  {
    uint64_t v2 = re::globalAllocators((re *)this)[2];
    re::ecs2::VideoPlayerComponentHelper::impl::~impl(v1);
    (*(void (**)(uint64_t, id *))(*(void *)v2 + 40))(v2, v1);
  }
}

void re::ecs2::VideoPlayerComponentHelper::update(uint64_t *a1, void *a2, const re::AssetHandle *a3, re::AssetManager *a4)
{
  uint64_t v6 = *a1;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v7, a3);
  re::ecs2::VideoPlayerComponentHelper::impl::update(v6, a2, (re::AssetHandle *)v7, a4);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v7);
}

void re::ecs2::VideoPlayerComponentHelper::updateAudioSrcPosition(uint64_t *a1, re::ecs2::Entity *a2, const re::AssetHandle *a3)
{
  uint64_t v4 = *a1;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, a3);
  re::ecs2::VideoPlayerComponentHelper::impl::updateAudioSrcPosition(v4, a2);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
}

uint64_t re::internal::GeomBaseTopology::faceVertices(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) <= (unint64_t)a2)
  {
LABEL_10:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  uint64_t v4 = *(void *)(a1 + 40) + 16 * a2;
  if (*(_DWORD *)(v4 + 12) == -1) {
    unint64_t v5 = 3;
  }
  else {
    unint64_t v5 = 4;
  }
  re::DynamicArray<float>::resize(a3, v5);
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 32);
  do
  {
    if (v7 == v6)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_10;
    }
    *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v4 + 4 * v6);
    ++v6;
  }
  while (v5 != v6);
  return v5;
}

void vpc::ImmersiveMediaOpacityInAnimationEngine::~ImmersiveMediaOpacityInAnimationEngine(vpc::ImmersiveMediaOpacityInAnimationEngine *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = (void (****)(void))((char *)this + 64);
    uint64_t v4 = 8 * v2;
    do
    {
      unint64_t v5 = *v3++;
      re::internal::destroyPersistent<vpc::FloatAnimation>((re *)"~ImmersiveMediaOpacityInAnimationEngine", 270, v5);
      v4 -= 8;
    }
    while (v4);
  }
  *((void *)this + 6) = 0;
  ++*((_DWORD *)this + 14);
  re::FunctionBase<24ul,void ()(float)>::destroyCallable((uint64_t)this);
}

re *re::internal::destroyPersistent<vpc::FloatAnimation>(re *result, uint64_t a2, void (***a3)(void))
{
  if (a3)
  {
    uint64_t v4 = re::globalAllocators(result)[2];
    (**a3)(a3);
    unint64_t v5 = *(uint64_t (**)(uint64_t, void (***)(void)))(*(void *)v4 + 40);
    return (re *)v5(v4, a3);
  }
  return result;
}

void vpc::ScreenMeshAnimationEngine::~ScreenMeshAnimationEngine(vpc::ScreenMeshAnimationEngine *this)
{
  uint64_t v2 = (char *)this + 56;
  uint64_t v3 = (char *)this + 6248;
  do
  {
    uint64_t v4 = (void (****)(void))(v2 + 16);
    if (*(void *)v2)
    {
      uint64_t v5 = 8 * *(void *)v2;
      do
      {
        uint64_t v6 = *v4++;
        re::internal::destroyPersistent<vpc::FloatAnimation>((re *)"~ScreenMeshAnimationEngine", 188, v6);
        v5 -= 8;
      }
      while (v5);
    }
    v2 += 2064;
  }
  while (v2 != v3);
  uint64_t v7 = 6192;
  do
  {
    *(void *)((char *)this + v7 - 2008) = 0;
    ++*(_DWORD *)((char *)this + v7 - 2000);
    v7 -= 2064;
  }
  while (v7);
  re::FunctionBase<24ul,void ()(float,float,float)>::destroyCallable((uint64_t)this);
}

uint64_t (***re::FunctionBase<24ul,void ()(float,float,float)>::destroyCallable(uint64_t a1))(void)
{
  uint64_t result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    uint64_t result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      uint64_t result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(void *a1)
{
  int v1 = *((_DWORD *)a1 + 2);
  if (v1 == 2)
  {
    unint64_t v2 = a1[2];
    if (*(void *)(*a1 + 296) > v2)
    {
      uint64_t v3 = *(void *)(*a1 + 312);
      uint64_t v4 = 384;
      return v3 + v2 * v4;
    }
LABEL_15:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  if (v1 == 1)
  {
    unint64_t v2 = a1[2];
    if (*(void *)(*a1 + 256) > v2)
    {
      uint64_t v3 = *(void *)(*a1 + 272);
      goto LABEL_10;
    }
LABEL_16:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!v1)
  {
    unint64_t v2 = a1[2];
    if (*(void *)(*a1 + 216) > v2)
    {
      uint64_t v3 = *(void *)(*a1 + 232);
LABEL_10:
      uint64_t v4 = 336;
      return v3 + v2 * v4;
    }
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  return 0;
}

uint64_t *re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++(uint64_t *result)
{
  unint64_t v1 = result[2] + 1;
  result[2] = v1;
  int v2 = *((_DWORD *)result + 2);
  switch(v2)
  {
    case 2:
      uint64_t v3 = *result;
LABEL_10:
      if (v1 >= *(void *)(v3 + 296))
      {
        *((_DWORD *)result + 2) = 3;
        result[2] = 0;
      }
      return result;
    case 1:
      uint64_t v3 = *result;
      goto LABEL_8;
    case 0:
      uint64_t v3 = *result;
      if (v1 >= *(void *)(*result + 216))
      {
        unint64_t v1 = 0;
        *((_DWORD *)result + 2) = 1;
        result[2] = 0;
LABEL_8:
        if (v1 < *(void *)(v3 + 256)) {
          return result;
        }
        unint64_t v1 = 0;
        *((_DWORD *)result + 2) = 2;
        result[2] = 0;
        goto LABEL_10;
      }
      break;
  }
  return result;
}

vpc::FloatSpringAnimation *vpc::FloatSpringAnimation::FloatSpringAnimation(vpc::FloatSpringAnimation *this, float *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 18) = 0;
  *(void *)this = &unk_26E6FD088;
  *((void *)this + 5) = 0;
  id v3 = objc_alloc_init(MEMORY[0x263F15888]);
  uint64_t v4 = (void *)*((void *)this + 5);
  *((void *)this + 5) = v3;

  return this;
}

void vpc::FloatSpringAnimation::~FloatSpringAnimation(id *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x237DBCBD0);
}

float vpc::FloatSpringAnimation::interpolate(id *this, double a2, float a3, float a4)
{
  float v5 = *(float *)&a2;
  *(float *)&a2 = a4;
  [this[5] _solveForInput:a2];
  if (v6 > 0.999) {
    float v6 = 1.0;
  }
  return v5 + (float)((float)(a3 - v5) * v6);
}

uint64_t re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addEmplace<re::AssetHandle&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, re::AssetHandle *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 48 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v10 + 16) = *a4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 48 * v10 + 24), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (void *)(*(void *)&v13[16] + v10 + 16), (void *)(*(void *)&v13[16] + v10 + 24));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::CollisionShape const*,re::AssetHandle,re::Hash<re::CollisionShape const*>,re::EqualTo<re::CollisionShape const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  int v13 = (void *)(*(void *)(a1 + 16) + 48 * v9);
  v13[3] = 0;
  v13[4] = 0;
  v13[5] = 0;
  v13[4] = a5[1];
  a5[1] = 0;
  uint64_t v14 = v13[3];
  v13[3] = 0;
  v13[3] = *a5;
  *a5 = v14;
  uint64_t v15 = v13[5];
  v13[5] = a5[2];
  a5[2] = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::addEmplace<re::AssetHandle&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, re::AssetHandle *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 48 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 48 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v10 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v10) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v10 + 16) = *a4;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(void *)(a1 + 16) + 48 * v10 + 24), a5);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)int v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), (void *)(*(void *)&v13[16] + v10 + 16), (void *)(*(void *)&v13[16] + v10 + 24));
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::IndexedTriangleMesh const*,re::AssetHandle,re::Hash<re::IndexedTriangleMesh const*>,re::EqualTo<re::IndexedTriangleMesh const*>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + 48 * v9) = a3;
  *(void *)(*(void *)(a1 + 16) + 48 * v9 + 16) = *a4;
  int v13 = (void *)(*(void *)(a1 + 16) + 48 * v9);
  v13[3] = 0;
  v13[4] = 0;
  v13[5] = 0;
  v13[4] = a5[1];
  a5[1] = 0;
  uint64_t v14 = v13[3];
  v13[3] = 0;
  v13[3] = *a5;
  *a5 = v14;
  uint64_t v15 = v13[5];
  v13[5] = a5[2];
  a5[2] = v15;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float,float)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float,float)>::operator()(uint64_t a1, float *a2, float *a3, float *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  float v35 = *a2;
  float v5 = *a3;
  float v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  id WeakRetained = objc_loadWeakRetained((id *)(v7 + 8448));
  if (WeakRetained)
  {

    int v10 = (re *)re::VideoDefaults::logEnabled(v9);
    if (v10)
    {
      double v33 = *re::videoLogObjects(v10);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        double v37 = v35;
        __int16 v38 = 2048;
        double v39 = v5;
        _os_log_impl(&dword_233120000, v33, OS_LOG_TYPE_DEFAULT, "[ScreenAnimation] m_screenMeshAnimationEngine.onUpdate: aspect ratio: %f, cornerRadius: %f", buf, 0x16u);
      }
    }
    uint64_t v11 = (char *)objc_loadWeakRetained((id *)(v7 + 8448));
    int v12 = v11 - 8;
    if (!v11) {
      int v12 = 0;
    }
    uint64_t v13 = *((void *)v12 + 3);
    if (v13 && (*(unsigned char *)(v13 + 288) & 0x80) != 0) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v11) {

    }
    if (v14)
    {
      uint64_t v15 = (char *)objc_loadWeakRetained((id *)(v7 + 8448));
      StringID v16 = v15 - 8;
      if (!v15) {
        StringID v16 = 0;
      }
      uint64_t v17 = *((void *)v16 + 3);
      if (v17 && (*(unsigned char *)(v17 + 288) & 0x80) != 0) {
        uint64_t v17 = 0;
      }
      re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v15) {
    }
      }
    StringID v18 = (char *)objc_loadWeakRetained((id *)(v7 + 8448));
    int v19 = v18;
    if (v18) {
      StringID v20 = v18 - 8;
    }
    else {
      StringID v20 = 0;
    }
    id v21 = objc_loadWeakRetained((id *)(v7 + 8456));
    StringID v22 = v21;
    if (v21) {
      uint64_t v23 = (uint64_t)v21 - 8;
    }
    else {
      uint64_t v23 = 0;
    }
    __asm { FMOV            V0.2S, #1.0 }
    *(float *)&_D0 = v35;
    re::ecs2::VideoPlayerComponentHelper::impl::regenerateScreenMesh(v7, v20, v23, *(re::AssetManager **)(a1 + 16), _D0, (re::ecs2::Entity *)1, v5, v6);
    if (v22) {

    }
    if (v19) {
    uint64_t v29 = (char *)objc_loadWeakRetained((id *)(v7 + 8448));
    }
    StringID v30 = v29 - 8;
    if (!v29) {
      StringID v30 = 0;
    }
    int v31 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v30 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    float32x4_t v32 = v31;
    if (v29) {

    }
    if (v32)
    {
      if (*(float *)(v7 + 36) < v35) {
        *((unsigned char *)v32 + 217) = 1;
      }
    }
    else
    {
      float32x4_t v34 = *re::videoLogObjects(v31);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v37) = 962;
        _os_log_error_impl(&dword_233120000, v34, OS_LOG_TYPE_ERROR, "VideoPlayerComponentHelper line: %d, videoComponent is nullptr", buf, 8u);
      }
    }
  }
}

uint64_t re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float,float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FD0D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float,float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FD0D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::VideoPlayerComponentHelper::impl::update(float,re::ecs2::Entity *,re::AssetHandle,re::AssetManager *)::$_0,void ()(float,float,float)>::size()
{
  return 24;
}

void *re::ecs2::allocInfo_AudioMixerComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_222, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_222))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87930, "AudioMixerComponent");
    __cxa_guard_release(&_MergedGlobals_222);
  }
  return &unk_26AF87930;
}

void re::ecs2::initInfo_AudioMixerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x8F1F37482BD3D894;
  v13[1] = "AudioMixerComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87910, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF87910);
    if (v4)
    {
      float v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF87920 = v7;
      long long v8 = re::introspectionAllocator((re *)v7);
      int v10 = re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "mixGroups";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF87928 = v11;
      __cxa_guard_release(&qword_26AF87910);
    }
  }
  *((void *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF87920;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioMixerComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioMixerComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioMixerComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioMixerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

uint64_t *re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(int a1, const re::IntrospectionBase *a2)
{
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info);
    re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E6FD250;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized) {
      return &re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info;
    }
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    int v3 = re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v18);
    if (v3) {
      return &re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info;
    }
    float v5 = re::introspectionSharedMutex(v4);
    std::__shared_mutex_base::lock(v5);
  }
  uint64_t v6 = re::introspect_uint64_t((re *)1, a2);
  uint64_t v7 = (re *)re::introspect_AudioMixGroup((re::IntrospectionBase **)1);
  if (re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      long long v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    uint64_t v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::isInitialized = 1;
    int v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info, 0);
    qword_268774B48 = 0x3000000007;
    dword_268774B50 = v11;
    word_268774B54 = 0;
    *(void *)&xmmword_268774B58 = 0;
    *((void *)&xmmword_268774B58 + 1) = 0xFFFFFFFFLL;
    qword_268774B68 = (uint64_t)v6;
    unk_268774B70 = 0;
    qword_268774B78 = v10;
    unk_268774B80 = 0;
    re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info = (uint64_t)&unk_26E6FD250;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info, (const re::IntrospectionBase *)&v18);
    if (BYTE8(v18)) {
      long long v14 = v19;
    }
    else {
      long long v14 = (char *)&v18 + 9;
    }
    if (void)v18 && (BYTE8(v18)) {
      (*(void (**)(void))(*(void *)v18 + 40))();
    }
    long long v15 = v6[2];
    long long v17 = *(_OWORD *)(v10 + 32);
    long long v18 = v15;
    xmmword_268774B58 = v16;
    re::StringID::destroyString((re::StringID *)v20);
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  return &re::IntrospectionInfo<re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>>::get(BOOL)::info;
}

double re::internal::defaultConstruct<re::ecs2::AudioMixerComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6FD140;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v3 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_DWORD *)(v3 + 112) = 0;
  *(void *)(v3 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioMixerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioMixerComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6FD140;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v1 + 68) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 0;
  *(void *)(v1 + 116) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioMixerComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioMixerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixerComponent>, this);
}

void *re::ecs2::allocInfo_AudioMixerSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87918, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87918))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF879A8, "AudioMixerSystem");
    __cxa_guard_release(&qword_26AF87918);
  }
  return &unk_26AF879A8;
}

void re::ecs2::initInfo_AudioMixerSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xBEC6F30AB275C04;
  v5[1] = "AudioMixerSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AudioMixerSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioMixerSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioMixerSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioMixerSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioMixerSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AudioMixerSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  void *v3 = &unk_26E6FD198;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AudioMixerSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AudioMixerSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  void *v1 = &unk_26E6FD198;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AudioMixerSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioMixerSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixerSystem>, this);
}

void re::ecs2::AudioMixerComponent::~AudioMixerComponent(re::ecs2::AudioMixerComponent *this)
{
  *(void *)this = &unk_26E6FD140;
  int v2 = (uint64_t *)((char *)this + 32);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 10);
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v2);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  re::ecs2::AudioMixerComponent::~AudioMixerComponent(this);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(re::ecs2::AudioMixerComponent *this, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t result = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 32, &v5);
  if (result)
  {
    int v4 = *(_DWORD *)(result + 124);
    return re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace((uint64_t)this + 80, &v5, &v4);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *a2;
  unint64_t v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if (v4 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 152 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 152 * v4 + 8) & 0x7FFFFFFF;
      if (v4 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v6 + 152 * v4 + 16) == v2) {
        return v6 + 152 * v4 + 24;
      }
    }
    return 0;
  }
  return v6 + 152 * v4 + 24;
}

uint64_t re::ecs2::AudioMixerSystem::willAddSystemToECSService(re::ecs2::AudioMixerSystem *this)
{
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    uint64_t result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v3);
    *((void *)this + 13) = result;
  }
  return result;
}

uint64_t re::ecs2::AudioMixerSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(void *)(this + 104) = 0;
  return this;
}

double re::ecs2::AudioMixerSystem::willAddSceneToECSService(re::ecs2::AudioMixerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    uint64_t v5 = this;
    uint64_t v6 = re::ecs2::AudioMixerSystem::activateComponents;
    uint64_t v7 = 0;
    long long v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 216), (uint64_t)&v5);
    uint64_t v5 = this;
    uint64_t v6 = re::ecs2::AudioMixerSystem::deactivateComponents;
    uint64_t v7 = 0;
    long long v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 304), (uint64_t)&v5);
  }
  return result;
}

uint64_t re::ecs2::AudioMixerSystem::activateComponents(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *(void *)(*(void *)a3 + 16);
      uint64_t v7 = (id)*re::audioLogObjects(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (v6)
        {
          long long v8 = *(const char **)(v6 + 280);
          uint64_t v9 = *(void *)(v6 + 296);
        }
        else
        {
          uint64_t v9 = 0;
          long long v8 = "(null)";
        }
        *(_DWORD *)buf = 136315394;
        long long v12 = v8;
        __int16 v13 = 2048;
        uint64_t v14 = v9;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "AudioMixerSystem::activateComponents() AudioMixerComponent activating, name='%s', entityId=%llu", buf, 0x16u);
      }

      a3 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::AudioMixerSystem::deactivateComponents(re *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *(void *)(*(void *)a3 + 16);
      uint64_t v7 = (id)*re::audioLogObjects(a1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (v6)
        {
          long long v8 = *(const char **)(v6 + 280);
          uint64_t v9 = *(void *)(v6 + 296);
        }
        else
        {
          uint64_t v9 = 0;
          long long v8 = "(null)";
        }
        *(_DWORD *)buf = 136315394;
        long long v12 = v8;
        __int16 v13 = 2048;
        uint64_t v14 = v9;
        _os_log_impl(&dword_233120000, v7, OS_LOG_TYPE_DEFAULT, "AudioMixerSystem::deactivateComponents() AudioMixerComponent deactivating, name='%s', entityId=%llu", buf, 0x16u);
      }

      a3 += 8;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

void re::ecs2::AudioMixerSystem::willRemoveSceneFromECSService(re::ecs2::AudioMixerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(void *)&long long v4 = this;
    *((void *)&v4 + 1) = re::ecs2::AudioMixerSystem::activateComponents;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 216, &v4);
    *(void *)&long long v4 = this;
    *((void *)&v4 + 1) = re::ecs2::AudioMixerSystem::deactivateComponents;
    uint64_t v5 = 0;
    uint64_t v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 304, &v4);
  }
}

void *re::ecs2::AudioMixerSystem::update(void *result, unint64_t a2, int a3)
{
  uint64_t v231 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = (uint64_t)result;
    double result = (void *)result[13];
    if (result)
    {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      if (result)
      {
        uint64_t v6 = result;
        re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v216);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v215, 3095, v3);
        unint64_t v7 = *(void *)(*(void *)(a2 + 104) + 272);
        uint64_t v198 = v6;
        uint64_t v8 = (*(uint64_t (**)(void *))(*v6 + 720))(v6);
        long long v212 = 0u;
        long long v213 = 0u;
        int v214 = 1065353216;
        unint64_t v199 = a2;
        long long v195 = (re::ecs2::SceneComponentTable *)(a2 + 200);
        uint64_t v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v10 = *(void *)(v9 + 24);
        int v11 = &qword_268772000;
        if (v10)
        {
          long long v12 = *(uint64_t **)(v9 + 40);
          uint64_t v13 = 8 * v10;
          while (1)
          {
            uint64_t v14 = *v12;
            uint64_t v15 = *(void *)(*v12 + 16);
            if (v15) {
              break;
            }
LABEL_20:
            ++v12;
            v13 -= 8;
            if (!v13) {
              goto LABEL_21;
            }
          }
          long long v16 = *(re::ecs2::NetworkComponent **)(v15 + 200);
          if (!v16) {
            goto LABEL_10;
          }
          if (re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v15 + 200)))
          {
LABEL_16:
            uint64_t v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(v14 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
            if (v19)
            {
              StringID v20 = (unint64_t *)(v19 + 32);
              id v21 = (void *)(v19 + 32);
            }
            else
            {
              StringID v20 = (unint64_t *)&re::kInvalidAudioPlaybackConnectionIdentifier;
              id v21 = &re::kInvalidAudioPlaybackConnectionIdentifier;
            }
            std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t)&v212, v20, v21);
            goto LABEL_20;
          }
          uint64_t v15 = *(void *)(v14 + 16);
          if (v15)
          {
LABEL_10:
            uint64_t v17 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
            if (v17) {
              uint64_t v15 = *(void *)(v17 + 32);
            }
            else {
              uint64_t v15 = 0;
            }
          }
          if (v15 != v8)
          {
            long long v18 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(*(void *)(v14 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
            *((void *)v18 + 4) = v8;
            if (v16) {
              re::ecs2::NetworkComponent::markDirty(v16, v18);
            }
          }
          goto LABEL_16;
        }
LABEL_21:
        uint64_t v22 = re::ecs2::SceneComponentTable::get(v195, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v23 = *(void *)(v22 + 24);
        if (v23)
        {
          uint64_t v24 = *(void *)(v22 + 40);
          uint64_t v25 = 8 * v23;
          do
          {
            uint64_t v26 = *(void *)(*(void *)v24 + 16);
            if (v26)
            {
              uint64_t v27 = *(re::ecs2::NetworkComponent **)(v26 + 200);
              if (!v27
                || !re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v26 + 200)))
              {
                StringID v28 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v26 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
                if (*((void *)v28 + 4) != v8)
                {
                  *((void *)v28 + 4) = v8;
                  if (v27) {
                    re::ecs2::NetworkComponent::markDirty(v27, v28);
                  }
                }
              }
            }
            v24 += 8;
            v25 -= 8;
          }
          while (v25);
        }
        if (((*(uint64_t (**)(void *))(*v198 + 544))(v198) & 1) == 0)
        {
          uint64_t v180 = re::ecs2::SceneComponentTable::get(v195, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          uint64_t v181 = *(void *)(v180 + 24);
          if (!v181) {
            goto LABEL_356;
          }
          StringID v182 = *(uint64_t **)(v180 + 40);
          StringID v183 = &v182[v181];
          double v184 = *(float *)&a3;
          while (1)
          {
            uint64_t v185 = *v182;
            uint64_t v186 = *(unsigned int *)(*v182 + 64);
            if (v186)
            {
              uint64_t v187 = 0;
              __int16 v188 = (int *)(*(void *)(v185 + 48) + 8);
              do
              {
                int v189 = *v188;
                v188 += 38;
                if (v189 < 0) {
                  goto LABEL_344;
                }
                ++v187;
              }
              while (v186 != v187);
              LODWORD(v187) = *(_DWORD *)(*v182 + 64);
            }
            else
            {
              LODWORD(v187) = 0;
            }
LABEL_344:
            if (v186 != v187)
            {
              uint64_t v190 = v187;
              do
              {
                uint64_t v191 = *(void *)(v185 + 48) + 152 * v190;
                uint64_t v192 = (float *)(v191 + 24);
                re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean((re::ecs2::AudioMixerComponent *)v185, *(void *)(v191 + 56));
                re::AudioMixGroup::applyRamp(v192, v184);
                if (*(_DWORD *)(v185 + 64) <= (v187 + 1)) {
                  int v193 = v187 + 1;
                }
                else {
                  int v193 = *(_DWORD *)(v185 + 64);
                }
                int v194 = v187;
                while (1)
                {
                  uint64_t v190 = (v194 + 1);
                  if (v193 - 1 == v194) {
                    break;
                  }
                  ++v194;
                  LODWORD(v187) = v190;
                  if ((*(_DWORD *)(*(void *)(v185 + 48) + 152 * v190 + 8) & 0x80000000) != 0) {
                    goto LABEL_354;
                  }
                }
                LODWORD(v187) = v193;
LABEL_354:
                ;
              }
              while (v186 != v187);
            }
            if (++v182 == v183) {
              goto LABEL_356;
            }
          }
        }
        unint64_t v29 = v199;
        uint64_t v206 = (void *)v213;
        if (!(void)v213) {
          goto LABEL_356;
        }
        unint64_t v200 = v7 >> 1;
        __asm { FMOV            V8.2S, #1.0 }
LABEL_33:
        unint64_t v34 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (*(void *)(v29 + 224) <= v34) {
          goto LABEL_334;
        }
        uint64_t v35 = *(void *)(*(void *)(v29 + 240) + 8 * v34);
        if (!v35) {
          goto LABEL_334;
        }
        uint64_t v36 = *(void *)(v35 + 24);
        if (!v36) {
          goto LABEL_334;
        }
        char v37 = 0;
        __int16 v38 = 0;
        uint64_t v39 = v206[2];
        uint64_t v40 = *(re::ecs2::AudioMixerComponent ***)(v35 + 40);
        uint64_t v41 = 8 * v36;
        do
        {
          __int16 v42 = *v40;
          uint64_t v43 = *((void *)*v40 + 2);
          if (v43 && (*(unsigned char *)(v43 + 288) & 1) != 0)
          {
            uint64_t v44 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v43 + 32), (const re::ecs2::ComponentTypeBase *)v11[247]);
            uint64_t v45 = v44 ? *(void *)(v44 + 32) : 0;
            long long v46 = v42;
            if (v45 == v39)
            {
              double v47 = *(re::ecs2::NetworkComponent **)(*((void *)v42 + 2) + 200);
              if (!v47) {
                goto LABEL_49;
              }
              int v48 = re::ecs2::NetworkComponent::owningProcessType(v47);
              long long v46 = v42;
              if (v37 == 0 || v48 == 0)
              {
                __int16 v38 = v42;
                char v37 = 1;
              }
              if (!v48) {
                goto LABEL_49;
              }
            }
          }
          ++v40;
          v41 -= 8;
        }
        while (v41);
        long long v46 = v38;
        if (!v37) {
          goto LABEL_334;
        }
LABEL_49:
        long long v205 = v46;
        unint64_t v49 = *(re::ecs2::NetworkComponent **)(*((void *)v46 + 2) + 200);
        if (v49)
        {
          int v50 = re::ecs2::NetworkComponent::owningProcessType(v49);
          if (v50) {
            _ZF = v206[2] == 0;
          }
          else {
            _ZF = 0;
          }
          if (_ZF) {
            goto LABEL_334;
          }
          BOOL v201 = v50 != 0;
        }
        else
        {
          BOOL v201 = 0;
        }
        *(_OWORD *)__p = 0u;
        *(_OWORD *)uint64_t v210 = 0u;
        float v211 = 1.0;
        uint64_t v52 = re::ecs2::SceneComponentTable::get(v195, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        uint64_t v53 = *(void *)(v52 + 24);
        if (!v53)
        {
LABEL_180:
          float v107 = v210[0];
          float v108 = v205;
          if (v210[0])
          {
            uint64_t v109 = (uint64_t)v205 + 32;
            do
            {
              int v111 = (unsigned char *)v107[3];
              float v110 = (unsigned char *)v107[4];
              size_t v112 = v110 - v111;
              if (v110 != v111)
              {
                if (v110 - v111 < 0) {
                  goto LABEL_358;
                }
                uint64_t v113 = v107[2];
                BOOL v114 = (re::DynamicString **)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v112 >> 4);
                double v115 = (_anonymous_namespace_ *)memmove(v114, v111, v112);
                uint64_t v221 = 0;
                *(_WORD *)uint64_t v222 = 0;
                long long v219 = 0u;
                memset(v220, 0, 28);
                *(_OWORD *)&v222[4] = xmmword_23435FBB0;
                *(void *)&v222[20] = 0;
                *(void *)&v222[28] = 0;
                *(_DWORD *)&v222[36] = 1;
                double v116 = *v114;
                if (v112 == 16)
                {
                  if (v116)
                  {
                    size_t v112 = (size_t)v114[1];
                    re::DynamicString::operator=((re::DynamicString *)&v217, *v114);
                    long long v219 = *((_OWORD *)v116 + 2);
                    re::DynamicArray<unsigned long long>::operator=((uint64_t)v220, (uint64_t *)v116 + 6);
                    long long v117 = *(_OWORD *)((char *)v116 + 104);
                    long long v118 = *(_OWORD *)((char *)v116 + 88);
                    *(void *)&v222[32] = *((void *)v116 + 15);
                    *(_OWORD *)uint64_t v222 = v118;
                    *(_OWORD *)&v222[16] = v117;
                    LOBYTE(v112) = re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty((re::ecs2::AudioMixGroupsComponent *)v112, *((void *)v116 + 4));
                  }
                  else
                  {
                    LOBYTE(v112) = 0;
                  }
                }
                else
                {
                  int v119 = (re::DynamicString **)((char *)v114 + v112);
                  re::DynamicString::operator=((re::DynamicString *)&v217, *v114);
                  LODWORD(v112) = 0;
                  float v120 = 0.0;
                  int v121 = v114;
                  do
                  {
                    float v123 = *v121;
                    uint64_t v122 = v121[1];
                    v121 += 2;
                    float v120 = v120 + *((float *)v123 + 28);
                    *(float *)&v222[16] = *((float *)v123 + 26) * *(float *)&v222[16];
                    v222[0] |= *((unsigned char *)v123 + 88);
                    v222[1] |= *((unsigned char *)v123 + 89);
                    LODWORD(v112) = v112 | re::ecs2::AudioMixGroupsComponent::isMixGroupGainDirty(v122, *((void *)v123 + 4));
                  }
                  while (v121 != v119);
                  if (v120 <= 15.0) {
                    float v124 = v120;
                  }
                  else {
                    float v124 = 15.0;
                  }
                  *(_DWORD *)&v222[24] = fmaxf(v124, -60.0);
                  *(_DWORD *)&v222[28] = *(_DWORD *)&v222[24];
                  *(_DWORD *)&v222[20] = 0;
                  *(_DWORD *)&v222[12] = 0;
                  ++*(_DWORD *)&v222[36];
                }
                *(void *)&long long v219 = v113;
                re::DynamicString::DynamicString((re::DynamicString *)v223, (const re::DynamicString *)&v217);
                long long v224 = v219;
                re::DynamicArray<char const*>::DynamicArray((uint64_t)v225, v220);
                uint64_t v230 = *(void *)&v222[32];
                long long v228 = *(_OWORD *)v222;
                long long v229 = *(_OWORD *)&v222[16];
                int v125 = *(_DWORD *)&v222[36];
                uint64_t v126 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v109, (uint64_t *)&v224);
                if (v126)
                {
                  int v127 = *(_DWORD *)(v126 + 124);
                  if (v125 <= v127 + 1) {
                    int v125 = v127 + 1;
                  }
                }
                HIDWORD(v230) = v125;
                re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addInternal<re::AudioMixGroup&>(v109, (uint64_t *)&v224, 2, (uint64_t)v223);
                if (v225[0])
                {
                  if (v227) {
                    (*(void (**)(void))(*(void *)v225[0] + 40))();
                  }
                  uint64_t v227 = 0;
                  memset(v225, 0, sizeof(v225));
                  ++v226;
                }
                if (*(void *)v223)
                {
                  if (v223[8]) {
                    (*(void (**)(void))(**(void **)v223 + 40))();
                  }
                  memset(v223, 0, sizeof(v223));
                }
                if ((v112 & 1) == 0) {
                  re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(v205, v219);
                }
                if (v220[0])
                {
                  if (v221) {
                    (*(void (**)(void))(*(void *)v220[0] + 40))();
                  }
                  uint64_t v221 = 0;
                  memset(v220, 0, 24);
                  ++LODWORD(v220[3]);
                }
                if (void)v217 && (BYTE8(v217)) {
                  (*(void (**)(void))(*(void *)v217 + 40))();
                }
                operator delete(v114);
                float v108 = v205;
              }
              float v107 = (void *)*v107;
            }
            while (v107);
          }
          BOOL v128 = v201;
          if (v206[2]) {
            BOOL v128 = 0;
          }
          unint64_t v29 = v199;
          if (v128) {
            goto LABEL_328;
          }
          long long v217 = 0u;
          long long v218 = 0u;
          LODWORD(v219) = 1065353216;
          uint64_t v202 = *((unsigned int *)v108 + 16);
          uint64_t v129 = 0;
          if (v202)
          {
            uint64_t v130 = (int *)(*((void *)v108 + 6) + 8);
            do
            {
              int v131 = *v130;
              v130 += 38;
              if (v131 < 0) {
                goto LABEL_224;
              }
              ++v129;
            }
            while (v202 != v129);
            LODWORD(v129) = *((_DWORD *)v108 + 16);
          }
LABEL_224:
          if (v202 == v129) {
            goto LABEL_327;
          }
          int v132 = 0;
          uint64_t v133 = v129;
          uint64_t v196 = (uint64_t)v108 + 80;
          uint64_t v197 = (uint64_t)v108 + 32;
LABEL_226:
          int v204 = v132;
          uint64_t v134 = *((void *)v108 + 6);
          uint64_t v135 = v134 + 152 * v133;
          uint64_t v136 = v135 + 24;
          if (*(unsigned char *)(v135 + 32)) {
            double v137 = *(char **)(v135 + 40);
          }
          else {
            double v137 = (char *)(v135 + 33);
          }
          std::string::basic_string[abi:nn180100]<0>(v223, v137);
          if (v223[23] >= 0) {
            uint64_t v138 = (uint64_t *)v223;
          }
          else {
            uint64_t v138 = *(uint64_t **)v223;
          }
          if (v223[23] >= 0) {
            unint64_t v139 = v223[23];
          }
          else {
            unint64_t v139 = *(void *)&v223[8];
          }
          unint64_t v140 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v208, v138, v139);
          unint64_t v141 = v140;
          unint64_t v142 = *((void *)&v217 + 1);
          if (!*((void *)&v217 + 1)) {
            goto LABEL_251;
          }
          uint8x8_t v143 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v217 + 8));
          v143.i16[0] = vaddlv_u8(v143);
          unint64_t v144 = v143.u32[0];
          if (v143.u32[0] > 1uLL)
          {
            unint64_t v29 = v140;
            if (v140 >= *((void *)&v217 + 1)) {
              unint64_t v29 = v140 % *((void *)&v217 + 1);
            }
          }
          else
          {
            unint64_t v29 = (*((void *)&v217 + 1) - 1) & v140;
          }
          double v145 = *(void ***)(v217 + 8 * v29);
          if (!v145 || (int v146 = *v145) == 0)
          {
LABEL_251:
            int v146 = operator new(0x38uLL);
            *(void *)int v146 = 0;
            *((void *)v146 + 1) = v141;
            *((_OWORD *)v146 + 1) = *(_OWORD *)v223;
            *((void *)v146 + 4) = *(void *)&v223[16];
            memset(v223, 0, 24);
            *((_DWORD *)v146 + 12) = 0;
            *((void *)v146 + 5) = _D8;
            float v148 = (float)(unint64_t)(*((void *)&v218 + 1) + 1);
            if (!v142 || (float)(*(float *)&v219 * (float)v142) < v148)
            {
              BOOL v149 = (v142 & (v142 - 1)) != 0;
              if (v142 < 3) {
                BOOL v149 = 1;
              }
              unint64_t v150 = v149 | (2 * v142);
              unint64_t v151 = vcvtps_u32_f32(v148 / *(float *)&v219);
              if (v150 <= v151) {
                size_t v152 = v151;
              }
              else {
                size_t v152 = v150;
              }
              std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__rehash<true>((uint64_t)&v217, v152);
              unint64_t v142 = *((void *)&v217 + 1);
              if ((*((void *)&v217 + 1) & (*((void *)&v217 + 1) - 1)) != 0)
              {
                if (v141 >= *((void *)&v217 + 1)) {
                  unint64_t v29 = v141 % *((void *)&v217 + 1);
                }
                else {
                  unint64_t v29 = v141;
                }
              }
              else
              {
                unint64_t v29 = (*((void *)&v217 + 1) - 1) & v141;
              }
            }
            uint64_t v153 = v217;
            double v154 = *(void **)(v217 + 8 * v29);
            if (v154)
            {
              *(void *)int v146 = *v154;
              unint64_t v29 = v199;
              goto LABEL_271;
            }
            *(void *)int v146 = v218;
            *(void *)&long long v218 = v146;
            *(void *)(v153 + 8 * v29) = &v218;
            unint64_t v29 = v199;
            if (*(void *)v146)
            {
              unint64_t v155 = *(void *)(*(void *)v146 + 8);
              if ((v142 & (v142 - 1)) != 0)
              {
                if (v155 >= v142) {
                  v155 %= v142;
                }
              }
              else
              {
                v155 &= v142 - 1;
              }
              double v154 = (void *)(v217 + 8 * v155);
LABEL_271:
              void *v154 = v146;
            }
            ++*((void *)&v218 + 1);
            goto LABEL_273;
          }
          while (1)
          {
            unint64_t v147 = *((void *)v146 + 1);
            if (v147 == v141)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v219, (unsigned __int8 *)v146 + 16, v223))
              {
                unint64_t v29 = v199;
LABEL_273:
                if ((v223[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v223);
                }
                uint64_t v156 = v206[2];
                uint64_t v157 = v134 + 152 * v133;
                uint64_t v159 = *(void *)(v157 + 56);
                double v158 = (uint64_t *)(v157 + 56);
                *(void *)uint64_t v223 = v159;
                uint64_t v160 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v197, (uint64_t *)v223);
                long long v161 = (_DWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v196, (uint64_t *)v223);
                BOOL v162 = 1;
                if (v160)
                {
                  int v163 = v204;
                  if (v161) {
                    BOOL v162 = *v161 != *(_DWORD *)(v160 + 124);
                  }
                }
                else
                {
                  int v163 = v204;
                }
                if (!(*(unsigned int (**)(void *, unint64_t, uint64_t, uint64_t, BOOL))(*v198 + 432))(v198, v200, v156, v136, v162))goto LABEL_296; {
                re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(v205, *v158);
                }
                if (!__p[1]) {
                  goto LABEL_296;
                }
                unint64_t v164 = *v158;
                uint8x8_t v165 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                v165.i16[0] = vaddlv_u8(v165);
                if (v165.u32[0] > 1uLL)
                {
                  unint64_t v166 = *v158;
                  if ((void *)v164 >= __p[1]) {
                    unint64_t v166 = v164 % (unint64_t)__p[1];
                  }
                }
                else
                {
                  unint64_t v166 = ((unint64_t)__p[1] - 1) & v164;
                }
                uint64_t v167 = (void *)*((void *)__p[0] + v166);
                if (!v167) {
                  goto LABEL_296;
                }
                int v168 = (void *)*v167;
                if (!v168) {
                  goto LABEL_296;
                }
                while (2)
                {
                  unint64_t v169 = v168[1];
                  if (v169 != v164)
                  {
                    if (v165.u32[0] > 1uLL)
                    {
                      if ((void *)v169 >= __p[1]) {
                        v169 %= (unint64_t)__p[1];
                      }
                    }
                    else
                    {
                      v169 &= (unint64_t)__p[1] - 1;
                    }
                    if (v169 != v166) {
                      goto LABEL_296;
                    }
LABEL_295:
                    int v168 = (void *)*v168;
                    if (!v168) {
                      goto LABEL_296;
                    }
                    continue;
                  }
                  break;
                }
                if (v168[2] != v164) {
                  goto LABEL_295;
                }
                uint64_t v172 = (re::ecs2::AudioMixerComponent **)v168[3];
                double v173 = (re::ecs2::AudioMixerComponent **)v168[4];
                while (v172 != v173)
                {
                  if (*v172) {
                    re::ecs2::AudioMixerComponent::markMixGroupGainChangeClean(v172[1], *((void *)*v172 + 4));
                  }
                  v172 += 2;
                }
LABEL_296:
                int v132 = (*((unsigned char *)v146 + 48) != 0) | v163;
                float v108 = v205;
                unsigned int v170 = *((_DWORD *)v205 + 16);
                if (v170 <= (int)v129 + 1) {
                  unsigned int v170 = v129 + 1;
                }
                while (1)
                {
                  uint64_t v133 = (v129 + 1);
                  if (v170 - 1 == v129) {
                    break;
                  }
                  LODWORD(v129) = v129 + 1;
                  unsigned int v171 = v133;
                  if ((*(_DWORD *)(*((void *)v205 + 6) + 152 * v133 + 8) & 0x80000000) != 0) {
                    goto LABEL_302;
                  }
                }
                unsigned int v171 = v170;
LABEL_302:
                LODWORD(v129) = v171;
                if (v202 == v171)
                {
                  for (uint64_t i = (uint64_t *)v218; i; uint64_t i = (uint64_t *)*i)
                  {
                    if (*((char *)i + 39) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v223, (const std::string::value_type *)i[2], i[3]);
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v223 = *((_OWORD *)i + 1);
                      *(void *)&v223[16] = i[4];
                    }
                    *(void *)&v223[24] = i[5];
                    LODWORD(v224) = *((_DWORD *)i + 12);
                    if ((v223[23] & 0x80000000) != 0) {
                      std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)v223, *(std::string::size_type *)&v223[8]);
                    }
                    else {
                      std::string v208 = *(std::string *)v223;
                    }
                    if ((v132 & ((_BYTE)v224 == 0)) == 1)
                    {
                      *(_DWORD *)&v223[28] = 0;
                      BYTE1(v224) = 1;
                    }
                    uint64_t v175 = v206[2];
                    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v207, v208.__r_.__value_.__l.__data_, v208.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v207 = v208;
                    }
                    (*(void (**)(void *, unint64_t, uint64_t, std::string *, unsigned char *))(*v198 + 424))(v198, v200, v175, &v207, &v223[24]);
                    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v207.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v208.__r_.__value_.__l.__data_);
                    }
                    if ((v223[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v223);
                    }
                  }
LABEL_327:
                  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)&v217);
                  int v11 = &qword_268772000;
LABEL_328:
                  int v176 = v210[0];
                  if (v210[0])
                  {
                    do
                    {
                      long long v177 = (void *)*v176;
                      int v178 = (void *)v176[3];
                      if (v178)
                      {
                        v176[4] = v178;
                        operator delete(v178);
                      }
                      operator delete(v176);
                      int v176 = v177;
                    }
                    while (v177);
                  }
                  StringID v179 = __p[0];
                  __p[0] = 0;
                  if (v179) {
                    operator delete(v179);
                  }
LABEL_334:
                  uint64_t v206 = (void *)*v206;
                  if (!v206)
                  {
LABEL_356:
                    std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)&v212);
                    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v215);
                    return (void *)re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v216);
                  }
                  goto LABEL_33;
                }
                goto LABEL_226;
              }
            }
            else
            {
              if (v144 > 1)
              {
                if (v147 >= v142) {
                  v147 %= v142;
                }
              }
              else
              {
                v147 &= v142 - 1;
              }
              if (v147 != v29) {
                goto LABEL_251;
              }
            }
            int v146 = *(void **)v146;
            if (!v146) {
              goto LABEL_251;
            }
          }
        }
        float v54 = *(uint64_t **)(v52 + 40);
        uint64_t v203 = &v54[v53];
        while (1)
        {
          uint64_t v55 = *v54;
          std::string::size_type v56 = *(void *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(void *)(*v54 + 16) + 32), (const re::ecs2::ComponentTypeBase *)v11[247])+ 32);
          if (v56 == v206[2]) {
            break;
          }
LABEL_67:
          if (++v54 == v203) {
            goto LABEL_180;
          }
        }
        uint64_t v57 = *(unsigned int *)(v55 + 64);
        if (v57)
        {
          uint64_t v58 = 0;
          float v59 = (int *)(*(void *)(v55 + 48) + 8);
          do
          {
            int v60 = *v59;
            v59 += 38;
            if (v60 < 0) {
              goto LABEL_65;
            }
            ++v58;
          }
          while (v57 != v58);
          LODWORD(v58) = *(_DWORD *)(v55 + 64);
        }
        else
        {
          LODWORD(v58) = 0;
        }
LABEL_65:
        if (v57 == v58)
        {
LABEL_66:
          int v11 = &qword_268772000;
          goto LABEL_67;
        }
        uint64_t v61 = v58;
        while (1)
        {
          float v62 = (const re::DynamicString *)(*(void *)(v55 + 48) + 152 * v61 + 24);
          re::DynamicString::DynamicString((re::DynamicString *)&v217, v62);
          v208.__r_.__value_.__r.__words[0] = v56;
          unint64_t v63 = re::Hash<re::DynamicString>::operator()((uint64_t)v223, (uint64_t)&v217);
          MurmurHash3_x64_128((uint64_t)&v208, 8, 0, (unint64_t *)v223);
          long long v64 = *(_OWORD *)v223;
          if ((void)v217)
          {
            if (BYTE8(v217)) {
              (*(void (**)(void))(*(void *)v217 + 40))();
            }
            long long v217 = 0u;
            long long v218 = 0u;
          }
          unint64_t v65 = ((v63 << 6)
               - 0x61C8864680B583E9
               + (v63 >> 2)
               + ((*((void *)&v64 + 1) - 0x61C8864680B583E9 + ((void)v64 << 6) + ((unint64_t)v64 >> 2)) ^ v64)) ^ v63;
          unint64_t v66 = (unint64_t)__p[1];
          if (__p[1])
          {
            uint8x8_t v67 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
            v67.i16[0] = vaddlv_u8(v67);
            if (v67.u32[0] > 1uLL)
            {
              v63 ^= (v63 << 6)
                   - 0x61C8864680B583E9
                   + (v63 >> 2)
                   + ((*((void *)&v64 + 1) - 0x61C8864680B583E9 + ((void)v64 << 6) + ((unint64_t)v64 >> 2)) ^ v64);
              if (__p[1] <= (void *)v65) {
                unint64_t v63 = v65 % (unint64_t)__p[1];
              }
            }
            else
            {
              unint64_t v63 = ((unint64_t)__p[1] - 1) & v65;
            }
            uint64_t v68 = (void **)*((void *)__p[0] + v63);
            if (v68)
            {
              for (unint64_t j = *v68; j; unint64_t j = (void *)*j)
              {
                unint64_t v70 = j[1];
                if (v70 == v65)
                {
                  if (j[2] == v65) {
                    goto LABEL_146;
                  }
                }
                else
                {
                  if (v67.u32[0] > 1uLL)
                  {
                    if ((void *)v70 >= __p[1]) {
                      v70 %= (unint64_t)__p[1];
                    }
                  }
                  else
                  {
                    v70 &= (unint64_t)__p[1] - 1;
                  }
                  if (v70 != v63) {
                    break;
                  }
                }
              }
            }
          }
          unint64_t j = operator new(0x30uLL);
          *unint64_t j = 0;
          j[1] = v65;
          j[2] = v65;
          j[3] = 0;
          j[4] = 0;
          j[5] = 0;
          float v71 = (float)((unint64_t)v210[1] + 1);
          if (!v66 || (float)(v211 * (float)v66) < v71) {
            break;
          }
LABEL_136:
          float v87 = __p[0];
          uint64_t v88 = (void *)*((void *)__p[0] + v63);
          if (v88)
          {
            *unint64_t j = *v88;
          }
          else
          {
            *unint64_t j = v210[0];
            v210[0] = j;
            v87[v63] = v210;
            if (!*j) {
              goto LABEL_145;
            }
            unint64_t v89 = *(void *)(*j + 8);
            if ((v66 & (v66 - 1)) != 0)
            {
              if (v89 >= v66) {
                v89 %= v66;
              }
            }
            else
            {
              v89 &= v66 - 1;
            }
            uint64_t v88 = (char *)__p[0] + 8 * v89;
          }
          *uint64_t v88 = j;
LABEL_145:
          ++v210[1];
LABEL_146:
          float32x2_t v91 = (const re::DynamicString **)j[4];
          unint64_t v90 = j[5];
          if ((unint64_t)v91 >= v90)
          {
            uint64_t v93 = j[3];
            uint64_t v94 = ((uint64_t)v91 - v93) >> 4;
            unint64_t v95 = v94 + 1;
            if ((unint64_t)(v94 + 1) >> 60) {
LABEL_358:
            }
              abort();
            uint64_t v96 = v90 - v93;
            if (v96 >> 3 > v95) {
              unint64_t v95 = v96 >> 3;
            }
            if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v97 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v97 = v95;
            }
            if (v97) {
              unint64_t v97 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_quatf>>(v97);
            }
            else {
              uint64_t v98 = 0;
            }
            uint32_t v99 = (const re::DynamicString **)(v97 + 16 * v94);
            *uint32_t v99 = v62;
            v99[1] = (const re::DynamicString *)v55;
            uint64_t v101 = (char *)j[3];
            float v100 = (char *)j[4];
            uint64_t v102 = v99;
            if (v100 != v101)
            {
              do
              {
                *((_OWORD *)v102 - 1) = *((_OWORD *)v100 - 1);
                v102 -= 2;
                v100 -= 16;
              }
              while (v100 != v101);
              float v100 = (char *)j[3];
            }
            float32x2_t v92 = v99 + 2;
            j[3] = v102;
            j[4] = v99 + 2;
            j[5] = v97 + 16 * v98;
            if (v100) {
              operator delete(v100);
            }
          }
          else
          {
            *float32x2_t v91 = v62;
            v91[1] = (const re::DynamicString *)v55;
            float32x2_t v92 = v91 + 2;
          }
          j[4] = v92;
          unsigned int v103 = *(_DWORD *)(v55 + 64);
          if (v103 <= (int)v58 + 1) {
            int v104 = v58 + 1;
          }
          else {
            int v104 = *(_DWORD *)(v55 + 64);
          }
          while (1)
          {
            uint64_t v61 = (v58 + 1);
            if (v104 - 1 == v58) {
              break;
            }
            LODWORD(v58) = v58 + 1;
            int v105 = v61;
            if ((*(_DWORD *)(*(void *)(v55 + 48) + 152 * v61 + 8) & 0x80000000) != 0) {
              goto LABEL_169;
            }
          }
          int v105 = v104;
LABEL_169:
          LODWORD(v58) = v105;
          if (v103 == v105) {
            goto LABEL_66;
          }
        }
        BOOL v72 = (v66 & (v66 - 1)) != 0;
        if (v66 < 3) {
          BOOL v72 = 1;
        }
        unint64_t v73 = v72 | (2 * v66);
        unint64_t v74 = vcvtps_u32_f32(v71 / v211);
        if (v73 <= v74) {
          int8x8_t prime = (int8x8_t)v74;
        }
        else {
          int8x8_t prime = (int8x8_t)v73;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v66 = (unint64_t)__p[1];
        }
        if (*(void *)&prime > v66) {
          goto LABEL_102;
        }
        if (*(void *)&prime < v66)
        {
          unint64_t v82 = vcvtps_u32_f32((float)(unint64_t)v210[1] / v211);
          if (v66 < 3 || (uint8x8_t v83 = (uint8x8_t)vcnt_s8((int8x8_t)v66), v83.i16[0] = vaddlv_u8(v83), v83.u32[0] > 1uLL))
          {
            unint64_t v82 = std::__next_prime(v82);
          }
          else
          {
            uint64_t v84 = 1 << -(char)__clz(v82 - 1);
            if (v82 >= 2) {
              unint64_t v82 = v84;
            }
          }
          if (*(void *)&prime <= v82) {
            int8x8_t prime = (int8x8_t)v82;
          }
          if (*(void *)&prime >= v66)
          {
            unint64_t v66 = (unint64_t)__p[1];
          }
          else
          {
            if (prime)
            {
LABEL_102:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v76 = operator new(8 * *(void *)&prime);
              int32x2_t v77 = __p[0];
              __p[0] = v76;
              if (v77) {
                operator delete(v77);
              }
              uint64_t v78 = 0;
              __p[1] = (void *)prime;
              do
                *((void *)__p[0] + v78++) = 0;
              while (*(void *)&prime != v78);
              int32x2_t v79 = (void **)v210[0];
              if (v210[0])
              {
                unint64_t v80 = *((void *)v210[0] + 1);
                uint8x8_t v81 = (uint8x8_t)vcnt_s8(prime);
                v81.i16[0] = vaddlv_u8(v81);
                if (v81.u32[0] > 1uLL)
                {
                  if (v80 >= *(void *)&prime) {
                    v80 %= *(void *)&prime;
                  }
                }
                else
                {
                  v80 &= *(void *)&prime - 1;
                }
                *((void *)__p[0] + v80) = v210;
                for (k = *v79; k; unint64_t v80 = v86)
                {
                  unint64_t v86 = k[1];
                  if (v81.u32[0] > 1uLL)
                  {
                    if (v86 >= *(void *)&prime) {
                      v86 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v86 &= *(void *)&prime - 1;
                  }
                  if (v86 != v80)
                  {
                    if (!*((void *)__p[0] + v86))
                    {
                      *((void *)__p[0] + v86) = v79;
                      goto LABEL_127;
                    }
                    *int32x2_t v79 = (void *)*k;
                    *unint64_t k = **((void **)__p[0] + v86);
                    **((void **)__p[0] + v86) = k;
                    unint64_t k = v79;
                  }
                  unint64_t v86 = v80;
LABEL_127:
                  int32x2_t v79 = (void **)k;
                  unint64_t k = (void *)*k;
                }
              }
              unint64_t v66 = (unint64_t)prime;
              goto LABEL_131;
            }
            int v106 = __p[0];
            __p[0] = 0;
            if (v106) {
              operator delete(v106);
            }
            unint64_t v66 = 0;
            __p[1] = 0;
          }
        }
LABEL_131:
        if ((v66 & (v66 - 1)) != 0)
        {
          if (v66 <= v65) {
            unint64_t v63 = v65 % v66;
          }
          else {
            unint64_t v63 = v65;
          }
        }
        else
        {
          unint64_t v63 = (v66 - 1) & v65;
        }
        goto LABEL_136;
      }
    }
  }
  return result;
}

void re::ecs2::AudioMixerSystem::~AudioMixerSystem(re::ecs2::AudioMixerSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AudioMixerSystem::typeInfo(re::ecs2::AudioMixerSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioMixerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioMixerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioMixerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioMixerSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((void *)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re *a1@<X0>, uint64_t *a2@<X1>, re **a3@<X2>, long long *a4@<X3>, re **a5@<X8>)
{
  uint64_t v10 = (uint64_t)a1 + 200;
  int v11 = (re **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v11)
  {
    long long v12 = *v11;
    *a5 = a1;
    a5[1] = v12;
    return;
  }
  uint64_t v22 = 0x449AD97C4B77BED4;
  uint64_t v23 = "_CompareFunc";
  uint64_t v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v10, &v22);
  if (v13)
  {
    uint64_t v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v22);
    if (a1)
    {
      uint64_t v15 = (uint64_t)a1;
      goto LABEL_9;
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v22);
  }
  *(void *)&v27.var0 = 0x449AD97C4B77BED4;
  v27.var1 = "_CompareFunc";
  re::TypeRegistry::declareType((uint64_t)a1, 8, &v27, 1u, 0, &v22);
  uint64_t v15 = v22;
  uint64_t v14 = (uint64_t)v23;
  re::StringID::destroyString((re::StringID *)&v27);
LABEL_9:
  re::TypeRegistry::typeInfo(a1, a3, &v22);
  re::TypeInfo::TypeInfo((uint64_t)&v27, (uint64_t)&v23);
  if (!v15
    || (long long v16 = *v28,
        uint64_t v22 = v14,
        uint64_t v23 = v16,
        int v24 = -1,
        (uint64_t v17 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(void *)&v27.var0 + 768, &v22)) == 0)|| !*(void *)v17)
  {
    long long v26 = *(_OWORD *)a3;
    v25[0] = v15;
    v25[1] = v14;
    uint64_t v17 = (_anonymous_namespace_ *)re::TypeRegistry::addAttribute((uint64_t)a1, &v26, -1, (uint64_t)v25, (uint64_t)re::internal::less<unsigned long long>, 0);
  }
  long long v18 = *(_OWORD *)a3;
  long long v20 = *a4;
  long long v21 = v18;
  re::TypeBuilder::beginDictionaryType((uint64_t)&v22, a2, 1, 0x30uLL, 8uLL, &v21, &v20);
  re::TypeBuilder::setConstructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
  re::TypeBuilder::setDestructor((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
  re::TypeBuilder::setDictionaryAccessors((uint64_t)&v22, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
  re::TypeBuilder::setDictionaryIterator((uint64_t)&v22, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
  re::TypeBuilder::commitTo((re::TypeBuilder *)&v22, a1, a5);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v22, v19);
}

void *re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~IntrospectionHashTable(void *a1)
{
  *a1 = &unk_26E6C0400;
  uint64_t v2 = (uint64_t)(a1 + 6);
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 8));
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

double re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a2);
  if (a4 <= 3) {
    signed int v7 = 3;
  }
  else {
    signed int v7 = a4;
  }
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1, uint64_t a2)
{
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, uint64_t *a5)
{
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  memset(v12, 0, sizeof(v12));
  *(void *)&void v14[2] = 0;
  WORD4(v14[2]) = 0;
  long long v13 = 0u;
  memset(v14, 0, 28);
  *(_OWORD *)((char *)&v14[2] + 12) = xmmword_23435FBB0;
  *(_OWORD *)((char *)&v14[3] + 12) = 0uLL;
  HIDWORD(v14[4]) = 1;
  uint64_t v10 = (re::IntrospectionBase *)re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a4, a5, (uint64_t)v12, 2);
  if (*(void *)&v14[0])
  {
    if (*(void *)&v14[2]) {
      (*(void (**)(void))(**(void **)&v14[0] + 40))();
    }
    *(void *)&void v14[2] = 0;
    memset(v14, 0, 24);
    ++DWORD2(v14[1]);
  }
  if (*(void *)&v12[0] && (BYTE8(v12[0]) & 1) != 0) {
    (*(void (**)(void))(**(void **)&v12[0] + 40))();
  }
  re::introspectionInitElement(a2, a3, a1[8], v10);
  return v10;
}

uint64_t re::IntrospectionHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  if (v5)
  {
    uint64_t v6 = 0;
    signed int v7 = (int *)(*(void *)(a2 + 16) + 8);
    while (1)
    {
      int v8 = *v7;
      v7 += 38;
      if (v8 < 0) {
        break;
      }
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v10 = v6;
  do
  {
    uint64_t result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(void *)(a2 + 16) + 152 * v10 + 16, *(void *)(a2 + 16) + 152 * v10 + 24);
    if (!result) {
      break;
    }
    int v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      uint64_t v10 = (v6 + 1);
      if (v11 - 1 == v6) {
        break;
      }
      LODWORD(v6) = v6 + 1;
      int v12 = v10;
      if ((*(_DWORD *)(*(void *)(a2 + 16) + 152 * v10 + 8) & 0x80000000) != 0) {
        goto LABEL_18;
      }
    }
    int v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while (v5 != v12);
  return result;
}

double re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 152;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    uint64_t v2 = (re::DynamicString *)(a1 + 24);
    re::DynamicArray<unsigned long>::deinit(a1 + 72);
    return re::DynamicString::deinit(v2);
  }
  return result;
}

void re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(void *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      long long v5 = *(_OWORD *)v13;
      *(_OWORD *)long long v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      uint64_t v6 = *(void *)&v13[16];
      *(void *)&v13[16] = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v6;
      long long v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&unsigned char v13[24] = *(_OWORD *)(a1 + 24);
      unsigned int v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      unsigned int v9 = v7;
      if (v7)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(void *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(*(void *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(*(void *)&v13[16] + v10), *(void *)&v13[16] + v10 + 16, *(void *)&v13[16] + v10 + 24);
            unsigned int v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 152;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2) {
      signed int v12 = a2;
    }
    else {
      signed int v12 = 3;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 152 * v9 + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
    int v12 = *(_DWORD *)(v11 + 152 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 152 * v9 + 8) = v12 | 0x80000000;
  uint64_t v13 = 152 * v9;
  *(_DWORD *)(*(void *)(a1 + 16) + v13 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v13 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v13) = a3;
  *(void *)(*(void *)(a1 + 16) + v13 + 16) = *a4;
  uint64_t v14 = *(void *)(a1 + 16) + v13;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(void *)(v14 + 48) = *(void *)(a5 + 24);
  uint64_t v15 = *(void *)(a5 + 8);
  *(void *)(v14 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  uint64_t v16 = *(void *)(a5 + 16);
  *(void *)(a5 + 24) = 0;
  uint64_t v18 = *(void *)(v14 + 32);
  uint64_t v17 = *(void *)(v14 + 40);
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v16;
  *(void *)(a5 + 8) = v18;
  *(void *)(a5 + 16) = v17;
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(a5 + 32);
  *(void *)(v14 + 104) = 0;
  *(_DWORD *)(v14 + 96) = 0;
  *(void *)(v14 + 80) = 0;
  *(void *)(v14 + 88) = 0;
  *(void *)(v14 + 72) = 0;
  uint64_t v19 = *(void *)(a5 + 56);
  *(void *)(v14 + 72) = *(void *)(a5 + 48);
  *(void *)(v14 + 80) = v19;
  *(void *)(a5 + 48) = 0;
  *(void *)(a5 + 56) = 0;
  uint64_t v20 = *(void *)(v14 + 88);
  *(void *)(v14 + 88) = *(void *)(a5 + 64);
  *(void *)(a5 + 64) = v20;
  uint64_t v21 = *(void *)(v14 + 104);
  *(void *)(v14 + 104) = *(void *)(a5 + 80);
  *(void *)(a5 + 80) = v21;
  ++*(_DWORD *)(a5 + 72);
  ++*(_DWORD *)(v14 + 96);
  long long v22 = *(_OWORD *)(a5 + 88);
  long long v23 = *(_OWORD *)(a5 + 104);
  *(void *)(v14 + 144) = *(void *)(a5 + 120);
  *(_OWORD *)(v14 + 112) = v22;
  *(_OWORD *)(v14 + 128) = v23;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 24);
    if (v2) {
      memset_pattern16(*(void **)(a1 + 8), &unk_2343655D0, 4 * v2);
    }
    if (*(_DWORD *)(a1 + 32))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(*(void *)(a1 + 16) + v3);
        ++v4;
        v3 += 152;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    int v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_9;
  }
  unint64_t v10 = v9 % *(unsigned int *)(a1 + 24);
  uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v10);
  if (v11 == 0x7FFFFFFF)
  {
LABEL_9:
    unsigned int v15 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v10, v9, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 16) + 152 * v15;
    return v14 + 24;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (*(void *)(v12 + 152 * v11 + 16) != v7)
  {
    int v13 = *(_DWORD *)(v12 + 152 * v11 + 8);
    uint64_t v11 = v13 & 0x7FFFFFFF;
    if ((v13 & 0x7FFFFFFF) == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  switch(a4)
  {
    case 0:
    case 1:
      uint64_t v14 = v12 + 152 * v11;
      break;
    case 2:
    case 3:
      uint64_t v17 = v12 + 152 * v11;
      re::DynamicString::operator=((re::DynamicString *)(v17 + 24), (re::DynamicString *)a3);
      *(_OWORD *)(v17 + 56) = *(_OWORD *)(a3 + 32);
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v17 + 72, a3 + 48);
      uint64_t v18 = *(void *)(a3 + 120);
      long long v19 = *(_OWORD *)(a3 + 104);
      *(_OWORD *)(v17 + 112) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(v17 + 128) = v19;
      *(void *)(v17 + 144) = v18;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 16) + 152 * v11;
      break;
    default:
      goto LABEL_9;
  }
  return v14 + 24;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
  return re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, void **a2, re::Allocator *a3, uint64_t *a4)
{
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  uint64_t v9 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1, a4, (uint64_t)Instance, 2);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 40, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(unsigned char *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    uint64_t v3 = *(unsigned int *)(v2 + 32);
    if (*((unsigned char *)a1 + 16))
    {
      int v4 = *((_DWORD *)a1 + 8);
      if (v4 == v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        uint64_t v8 = a1[3];
        unsigned int v9 = *(_DWORD *)(v8 + 32);
        unsigned int v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9) {
            break;
          }
          int v11 = *(_DWORD *)(*(void *)(v8 + 16) + 152 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      uint64_t v5 = 0;
      if (v3)
      {
        uint64_t v6 = (int *)(*(void *)(v2 + 16) + 8);
        while (1)
        {
          int v7 = *v6;
          v6 += 38;
          if (v7 < 0) {
            break;
          }
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((unsigned char *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return v5 != v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 16;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(void *)a1 + 40)) {
    return *(void *)(*(void *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 24;
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 40))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a2 + 40);
    return v2(a2, a1);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioMixerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addInternal<re::AudioMixGroup&>(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  unint64_t v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
  if (!*(void *)a1)
  {
    LODWORD(v11) = 0;
    goto LABEL_9;
  }
  unint64_t v11 = v10 % *(unsigned int *)(a1 + 24);
  uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 8) + 4 * v11);
  if (v12 == 0x7FFFFFFF)
  {
LABEL_9:
    unsigned int v16 = re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::AudioMixGroup&>(a1, v11, v10, a2, (re::DynamicString *)a4);
    ++*(_DWORD *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 16) + 152 * v16;
    return v15 + 24;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  while (*(void *)(v13 + 152 * v12 + 16) != v8)
  {
    int v14 = *(_DWORD *)(v13 + 152 * v12 + 8);
    uint64_t v12 = v14 & 0x7FFFFFFF;
    if ((v14 & 0x7FFFFFFF) == 0x7FFFFFFF) {
      goto LABEL_9;
    }
  }
  switch(a3)
  {
    case 0:
    case 1:
      uint64_t v15 = v13 + 152 * v12;
      break;
    case 2:
    case 3:
      uint64_t v18 = v13 + 152 * v12;
      long long v19 = (re::DynamicString *)(v18 + 24);
      re::DynamicArray<unsigned long>::deinit(v18 + 72);
      re::DynamicString::deinit(v19);
      uint64_t v20 = *(void *)(a1 + 16) + 152 * v12;
      re::DynamicString::DynamicString((re::DynamicString *)(v20 + 24), (const re::DynamicString *)a4);
      *(_OWORD *)(v20 + 56) = *(_OWORD *)(a4 + 32);
      re::DynamicArray<char const*>::DynamicArray(v20 + 72, (uint64_t *)(a4 + 48));
      long long v21 = *(_OWORD *)(a4 + 88);
      long long v22 = *(_OWORD *)(a4 + 104);
      *(void *)(v20 + 144) = *(void *)(a4 + 120);
      *(_OWORD *)(v20 + 112) = v21;
      *(_OWORD *)(v20 + 128) = v22;
      ++*(_DWORD *)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 16) + 152 * v12;
      break;
    default:
      goto LABEL_9;
  }
  return v15 + 24;
}

uint64_t re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::AudioMixGroup&>(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, re::DynamicString *a5)
{
  uint64_t v10 = *(unsigned int *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 32);
    int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::AudioMixGroup,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 152 * v10 + 8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    int v13 = *(_DWORD *)(v12 + 152 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  uint64_t v14 = 152 * v10;
  *(_DWORD *)(v12 + v14 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v14) = a3;
  *(void *)(*(void *)(a1 + 16) + v14 + 16) = *a4;
  uint64_t v15 = *(void *)(a1 + 16) + v14;
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 24), a5);
  *(_OWORD *)(v15 + 56) = *((_OWORD *)a5 + 2);
  re::DynamicArray<char const*>::DynamicArray(v15 + 72, (uint64_t *)a5 + 6);
  long long v16 = *(_OWORD *)((char *)a5 + 88);
  long long v17 = *(_OWORD *)((char *)a5 + 104);
  *(void *)(v15 + 144) = *((void *)a5 + 15);
  *(_OWORD *)(v15 + 112) = v16;
  *(_OWORD *)(v15 + 128) = v17;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::createSubscription<re::ecs2::AudioMixerSystem>(re::ecs2::AudioMixerSystem *,REEventHandlerResult (re::ecs2::AudioMixerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Slice<re::ecs2::AudioMixerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioMixerComponent>,re::Slice<re::ecs2::AudioMixerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioMixerComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  int v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    int v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::AVFVideoFileWriter::~AVFVideoFileWriter(id *this)
{
}

uint64_t (***re::AVFVideoFileWriter::stopVideoFileWriter(uint64_t a1, long long *a2, uint64_t a3))(void)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(NSObject **)(a1 + 40);
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3321888768;
  v6[2] = ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke;
  v6[3] = &__block_descriptor_104_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE_e5_v8__0l;
  long long v8 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v4 = *(void *)(a3 + 24);
  v6[4] = a1;
  v7[3] = v4;
  v7[4] = 0;
  re::FunctionBase<24ul,void ()(NSURL *)>::operator=<24ul>((uint64_t)v7, a3);
  dispatch_async(v3, v6);
  return re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable((uint64_t)v7);
}

uint64_t (***___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke(uint64_t (***result)(void)))(void)
{
  v9[5] = *MEMORY[0x263EF8340];
  int v1 = result[4];
  if (!*((unsigned char *)v1 + 48))
  {
    uint64_t v2 = result;
    [v1[1] markAsFinished];
    uint64_t v3 = *v1;
    long long v6 = *((_OWORD *)v2 + 5);
    int v7 = v2[12];
    [v3 endSessionAtSourceTime:&v6];
    uint64_t v4 = *v1;
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3321888768;
    void v8[2] = ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_2;
    v8[3] = &__block_descriptor_80_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE_e5_v8__0l;
    uint64_t v5 = v2[8];
    v8[4] = v1;
    v9[3] = v5;
    _OWORD v9[4] = 0;
    re::FunctionBase<24ul,void ()(NSURL *)>::operator=<24ul>((uint64_t)v9, (uint64_t)(v2 + 5));
    [v4 finishWritingWithCompletionHandler:v8];
    *((unsigned char *)v1 + 48) = 1;
    return re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable((uint64_t)v9);
  }
  return result;
}

uint64_t (***___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_2(uint64_t a1))(void)
{
  void v6[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  block[2] = ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_3;
  block[3] = &__block_descriptor_80_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE_e5_v8__0l;
  uint64_t v3 = *(void *)(a1 + 64);
  block[4] = v1;
  v6[3] = v3;
  v6[4] = 0;
  re::FunctionBase<24ul,void ()(NSURL *)>::operator=<24ul>((uint64_t)v6, a1 + 40);
  dispatch_async(v2, block);
  return re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable((uint64_t)v6);
}

void ___ZN2re18AVFVideoFileWriter19stopVideoFileWriterE6CMTimeNS_8FunctionIFvP5NSURLEEE_block_invoke_3(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 24);
  (*(void (**)(void, id *))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), &v2);
}

uint64_t __copy_helper_block_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  return re::FunctionBase<24ul,void ()(NSURL *)>::operator=<24ul>(a1 + 40, a2 + 40);
}

uint64_t (***__destroy_helper_block_a8_40c30_ZTSN2re8FunctionIFvP5NSURLEEE(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable(a1 + 40);
}

void ___ZN2re18AVFVideoFileWriter34appendPixelBufferToVideoFileWriterEP10__CVBufferDv2_f6CMTimey_block_invoke(uint64_t a1)
{
  v58[8] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint32x2_t **)(a1 + 32);
  id v2 = *(__CVBuffer **)(a1 + 40);
  if (v3[6].i8[0])
  {
    CVPixelBufferRelease(v2);
  }
  else
  {
    unsigned int Width = CVPixelBufferGetWidth(v2);
    unsigned int Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)(a1 + 40));
    uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)(a1 + 40));
    uint64_t v43 = [MEMORY[0x263F12A50] texture2DDescriptorWithPixelFormat:80 width:Width height:Height mipmapped:0];
    int v7 = (void *)[*(id *)&v3[7] newTextureWithDescriptor:v43 iosurface:CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)(a1 + 40)) plane:0];
    uint64_t v8 = *MEMORY[0x263F04130];
    v57[0] = *MEMORY[0x263F04158];
    v57[1] = v8;
    v58[0] = MEMORY[0x263EFFA88];
    v58[1] = MEMORY[0x263EFFA78];
    uint64_t v57[2] = *MEMORY[0x263F04240];
    uint64_t v9 = [NSNumber numberWithUnsignedInt:v3[4].u32[0]];
    v58[2] = v9;
    v57[3] = *MEMORY[0x263F04118];
    uint64_t v10 = [NSNumber numberWithUnsignedInt:v3[4].u32[1]];
    uint64_t v11 = *MEMORY[0x263F04198];
    v58[3] = v10;
    _OWORD v58[4] = &unk_26E749D58;
    uint64_t v12 = *MEMORY[0x263F04078];
    char v57[4] = v11;
    v57[5] = v12;
    v58[5] = &unk_26E749D58;
    v57[6] = *MEMORY[0x263F04180];
    int v13 = [NSNumber numberWithUnsignedInt:PixelFormatType];
    v57[7] = *MEMORY[0x263F041A8];
    v58[6] = v13;
    v58[7] = &unk_26E749D70;
    CFDictionaryRef v14 = (const __CFDictionary *)[NSDictionary dictionaryWithObjects:v58 forKeys:v57 count:8];

    CVPixelBufferRef pixelBufferOut = 0;
    CFAllocatorRef Default = CFAllocatorGetDefault();
    CVPixelBufferCreate(Default, v3[4].u32[0], v3[4].u32[1], PixelFormatType, v14, &pixelBufferOut);
    long long v16 = (void *)[*(id *)&v3[7] newTextureWithDescriptor:*(void *)&v3[9] iosurface:CVPixelBufferGetIOSurface(pixelBufferOut) plane:0];
    long long v17 = [MEMORY[0x263F129A0] renderPassDescriptor];
    uint64_t v18 = [v17 colorAttachments];
    long long v19 = [v18 objectAtIndexedSubscript:0];
    [v19 setTexture:v16];

    uint64_t v20 = [v17 colorAttachments];
    long long v21 = [v20 objectAtIndexedSubscript:0];
    [v21 setLoadAction:2];

    long long v22 = [v17 colorAttachments];
    long long v23 = [v22 objectAtIndexedSubscript:0];
    objc_msgSend(v23, "setClearColor:", 0.0, 0.0, 0.0, 1.0);

    int v24 = (void *)[*(id *)&v3[7] newCommandQueue];
    uint64_t v25 = [v24 commandBuffer];
    long long v26 = [v25 renderCommandEncoderWithDescriptor:v17];
    if (*re::AppleBuild::get(v26) == 1) {
      StringID v27 = @"texture resampling and padding encoder";
    }
    else {
      StringID v27 = &stru_26E738380;
    }
    [(re::AppleBuild *)v26 setLabel:v27];
    [(re::AppleBuild *)v26 setRenderPipelineState:*(void *)&v3[8]];
    *(float *)&uint64_t v28 = (float)Width;
    *((float *)&v28 + 1) = (float)Height;
    uint64_t v49 = v28;
    float32x2_t v48 = vcvt_f32_u32(v3[4]);
    [(re::AppleBuild *)v26 setVertexBytes:&re::boxVertices length:32 atIndex:0];
    [(re::AppleBuild *)v26 setVertexBytes:&v49 length:8 atIndex:1];
    [(re::AppleBuild *)v26 setVertexBytes:a1 + 48 length:8 atIndex:2];
    [(re::AppleBuild *)v26 setVertexBytes:&v48 length:8 atIndex:3];
    [(re::AppleBuild *)v26 setFragmentTexture:v7 atIndex:0];
    [(re::AppleBuild *)v26 drawPrimitives:4 vertexStart:0 vertexCount:4];
    [(re::AppleBuild *)v26 endEncoding];
    [v25 commit];
    [v25 waitUntilCompleted];
    CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 40));
    unint64_t v29 = (re *)[*(id *)&v3[1] isReadyForMoreMediaData];
    if (v29)
    {
      StringID v30 = (void *)v3[2];
      long long v45 = *(_OWORD *)(a1 + 64);
      uint64_t v46 = *(void *)(a1 + 80);
      int v31 = (re *)[v30 appendPixelBuffer:pixelBufferOut withPresentationTime:&v45];
      if ((v31 & 1) == 0)
      {
        float32x4_t v32 = *re::peerVideoStreamingLogObjects(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          double v33 = (void *)*v3;
          log = v32;
          unint64_t v34 = [v33 error];
          double v35 = [v34 localizedDescription];
          CMTime time = *(CMTime *)(a1 + 64);
          Float64 Seconds = CMTimeGetSeconds(&time);
          uint64_t v37 = *(void *)(a1 + 56);
          *(_DWORD *)buf = 138412802;
          Float64 v52 = v35;
          __int16 v53 = 2048;
          Float64 v54 = Seconds;
          __int16 v55 = 2048;
          uint64_t v56 = v37;
          _os_log_error_impl(&dword_233120000, log, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to append pixel buffer to video file output: %@, timestamp: %f, entity id: %llu", buf, 0x20u);
        }
      }
    }
    else
    {
      __int16 v38 = *re::peerVideoStreamingLogObjects(v29);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        CMTime v47 = *(CMTime *)(a1 + 64);
        uint64_t v39 = v38;
        Float64 v40 = CMTimeGetSeconds(&v47);
        double v41 = *(double *)(a1 + 56);
        *(_DWORD *)buf = 134218240;
        Float64 v52 = v40;
        __int16 v53 = 2048;
        Float64 v54 = v41;
        _os_log_error_impl(&dword_233120000, v39, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Not ready for more pixel buffer, timestamp: %f, entity id: %llu", buf, 0x16u);
      }
    }
    CVPixelBufferRelease(pixelBufferOut);
  }
}

__n128 re::PeerVideoFileWriter::destroy(re::PeerVideoFileWriter *this)
{
  id v2 = (id *)*((void *)this + 8);
  if (v2)
  {
    re::AVFVideoFileWriter::~AVFVideoFileWriter(v2);
    MEMORY[0x237DBCBD0]();
    *((void *)this + 8) = 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    *((void *)this + 1) = 1;
    uint64_t v4 = (unsigned char *)*((void *)this + 2);
  }
  else
  {
    *((unsigned char *)this + 8) = v3 & 1;
    uint64_t v4 = (char *)this + 9;
  }
  unsigned char *v4 = 0;
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    *((void *)this + 5) = 1;
    long long v6 = (unsigned char *)*((void *)this + 6);
  }
  else
  {
    *((unsigned char *)this + 40) = v5 & 1;
    long long v6 = (char *)this + 41;
  }
  *long long v6 = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0x3FF0000000000000;
  *((unsigned char *)this + 96) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v7 = MEMORY[0x263F010E0];
  __n128 result = *(__n128 *)MEMORY[0x263F010E0];
  *(_OWORD *)((char *)this + 120) = *MEMORY[0x263F010E0];
  uint64_t v9 = *(void *)(v7 + 16);
  *((void *)this + 17) = v9;
  *((__n128 *)this + 9) = result;
  *((void *)this + 20) = v9;
  return result;
}

void re::PeerVideoFileWriter::flush(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 64))
  {
    CMTime lhs = *(CMTime *)(a1 + 144);
    CMTimeMake(&rhs, 1, 90);
    CMTimeAdd(&v19, &lhs, &rhs);
    *(CMTime *)(a1 + 144) = v19;
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v4 = *(void *)(a1 + 16);
    }
    else {
      uint64_t v4 = a1 + 9;
    }
    uint64_t v5 = a1 + 144;
    long long v6 = [NSString stringWithUTF8String:v4];
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v7 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v7 = a1 + 41;
    }
    uint64_t v8 = [NSString stringWithUTF8String:v7];
    uint64_t v9 = [NSString stringWithFormat:@"%@_%llu-%llu_%ux%u_%f.%@", v6, *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v8];
    uint64_t v10 = [NSURL fileURLWithPath:v9];
    uint64_t v11 = *(void *)(a1 + 64);
    long long v15 = *(_OWORD *)v5;
    uint64_t v16 = *(void *)(v5 + 16);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN2re19PeerVideoFileWriter5flushENS_8FunctionIFvvEEE_block_invoke;
    aBlock[3] = &unk_26E6FD348;
    uint64_t v12 = *(void *)(a2 + 24);
    id v21 = v10;
    v22[3] = v12;
    _OWORD v22[4] = 0;
    id v13 = v10;
    re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v22, a2);
    CFDictionaryRef v14 = (re *)_Block_copy(aBlock);
    v23[3] = re::globalAllocators(v14)[2];
    int v24 = 0;
    v23[0] = &unk_26E6FD388;
    v23[1] = _Block_copy(v14);
    int v24 = v23;
    re::AVFVideoFileWriter::stopVideoFileWriter(v11, &v15, (uint64_t)v23);
    re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable((uint64_t)v23);

    re::FunctionBase<24ul,void ()(void)>::destroyCallable((uint64_t)v22);
  }
}

void ___ZN2re19PeerVideoFileWriter5flushENS_8FunctionIFvvEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v5 = *(void *)(a1 + 32);
  id v13 = 0;
  [v4 moveItemAtURL:v3 toURL:v5 error:&v13];
  id v6 = v13;

  if (v6)
  {
    uint64_t v8 = *re::peerVideoStreamingLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = v8;
      uint64_t v11 = [v9 path];
      uint64_t v12 = [v6 localizedDescription];
      *(_DWORD *)buf = 138412546;
      long long v15 = v11;
      __int16 v16 = 2112;
      long long v17 = v12;
      _os_log_error_impl(&dword_233120000, v10, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to rename CALayer video file to: %@, error: %@", buf, 0x16u);
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
}

uint64_t __copy_helper_block_a8_40c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  return re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(a1 + 40, a2 + 40);
}

uint64_t (***__destroy_helper_block_a8_40c24_ZTSN2re8FunctionIFvvEEE(uint64_t a1))(void)
{
  return re::FunctionBase<24ul,void ()(void)>::destroyCallable(a1 + 40);
}

void re::PeerVideoFileWriter::appendFrame(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float64_t a5, float64_t a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  if (!*(void *)a2)
  {
    uint64_t v20 = *re::peerVideoStreamingLogObjects((re *)a1);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)buf = 0;
    id v21 = "[PeerVideoFileWriter] Invalid arg to appendFrame: pixelBuffer is nullptr";
    long long v22 = v20;
    uint32_t v23 = 2;
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(a1 + 112);
  int64_t v9 = *(void *)(a2 + 16);
  if (v8 == v9) {
    return;
  }
  memset(&v43, 0, sizeof(v43));
  CMTimeMake(&v43, v9, 90);
  *(CMTime *)(a1 + 144) = v43;
  size_t Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)a2);
  unsigned int Height = (re *)CVPixelBufferGetHeight(*(CVPixelBufferRef *)a2);
  int v14 = (int)Height;
  if (!Width || !Height)
  {
    int v24 = *re::peerVideoStreamingLogObjects(Height);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = Width;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v14;
    id v21 = "[PeerVideoFileWriter] Invalid arg to appendFrame: pixelBuffer width: %u, height: %u";
    long long v22 = v24;
    uint32_t v23 = 14;
LABEL_15:
    _os_log_error_impl(&dword_233120000, v22, OS_LOG_TYPE_ERROR, v21, buf, v23);
    return;
  }
  v15.f64[0] = a5;
  unint64_t v16 = ((unint64_t)a5 & 0xFFFFFFFFFFFFFFC0) + 64;
  unint64_t v17 = ((unint64_t)a6 & 0xFFFFFFFFFFFFFFC0) + 64;
  uint64_t v18 = *(void *)(a1 + 64);
  if (!v18) {
    goto LABEL_21;
  }
  if (v16 != *(void *)(a1 + 72) || v17 != *(void *)(a1 + 80) || *(unsigned __int8 *)(a1 + 96) != a4)
  {
    *(void *)(a1 + 64) = 0;
    if (*(unsigned char *)(a1 + 8)) {
      uint64_t v19 = *(void *)(a1 + 16);
    }
    else {
      uint64_t v19 = a1 + 9;
    }
    uint64_t v25 = [NSString stringWithUTF8String:v19];
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v26 = *(void *)(a1 + 48);
    }
    else {
      uint64_t v26 = a1 + 41;
    }
    unint64_t v34 = [NSString stringWithUTF8String:v26];
    StringID v27 = [NSString stringWithFormat:@"%@_%llu-%llu_%ux%u_%f.%@", v25, *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v34];
    uint64_t v28 = [NSURL fileURLWithPath:v27];
    long long v41 = *(_OWORD *)(a1 + 144);
    uint64_t v42 = *(void *)(a1 + 160);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZN2re19PeerVideoFileWriter11appendFrameERKNS_15InputVideoFrameEddyb_block_invoke;
    aBlock[3] = &unk_264BE4B68;
    id v39 = v28;
    uint64_t v40 = v18;
    id v29 = v28;
    StringID v30 = (re *)_Block_copy(aBlock);
    v44[3] = re::globalAllocators(v30)[2];
    long long v45 = 0;
    v44[0] = &unk_26E6FD388;
    v44[1] = _Block_copy(v30);
    long long v45 = v44;
    re::AVFVideoFileWriter::stopVideoFileWriter(v18, &v41, (uint64_t)v44);
    re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable((uint64_t)v44);

    unint64_t v17 = ((unint64_t)a6 & 0xFFFFFFFFFFFFFFC0) + 64;
    unint64_t v16 = ((unint64_t)a5 & 0xFFFFFFFFFFFFFFC0) + 64;
LABEL_21:
    *(void *)(a1 + 72) = v16;
    *(void *)(a1 + 80) = v17;
    *(unsigned char *)(a1 + 96) = a4;
    *(void *)(a1 + 104) = *(void *)(a2 + 16);
    operator new();
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 16);
  int v31 = *(__CVBuffer **)a2;
  CMTime v37 = v43;
  if (*(void *)a2)
  {
    v15.f64[1] = a6;
    float32x2_t v32 = vcvt_f32_f64(v15);
    CVPixelBufferRetain(v31);
    double v33 = *(NSObject **)(v18 + 40);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 3221225472;
    CMTime v47 = ___ZN2re18AVFVideoFileWriter34appendPixelBufferToVideoFileWriterEP10__CVBufferDv2_f6CMTimey_block_invoke;
    float32x2_t v48 = &__block_descriptor_88_e5_v8__0l;
    uint64_t v49 = v18;
    int v50 = v31;
    float32x2_t v51 = v32;
    CMTime v53 = v37;
    uint64_t v52 = a3;
    dispatch_async(v33, buf);
  }
}

void ___ZN2re19PeerVideoFileWriter11appendFrameERKNS_15InputVideoFrameEddyb_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  id v3 = (void *)MEMORY[0x263F08850];
  id v4 = a2;
  uint64_t v5 = [v3 defaultManager];
  uint64_t v6 = *(void *)(a1 + 32);
  id v15 = 0;
  [v5 moveItemAtURL:v4 toURL:v6 error:&v15];

  id v7 = v15;
  if (v7)
  {
    int64_t v9 = *re::peerVideoStreamingLogObjects(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = v9;
      id v13 = [v11 path];
      int v14 = [v7 localizedDescription];
      *(_DWORD *)buf = 138412546;
      unint64_t v17 = v13;
      __int16 v18 = 2112;
      uint64_t v19 = v14;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "[PeerVideoFileWriter] Failed to rename CALayer video file to: %@, error: %@", buf, 0x16u);
    }
  }
  uint64_t v10 = *(id **)(a1 + 40);
  if (v10)
  {
    re::AVFVideoFileWriter::~AVFVideoFileWriter(v10);
    MEMORY[0x237DBCBD0]();
  }
}

uint64_t re::FunctionBase<24ul,void ()(NSURL *)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable(a1);
    uint64_t v4 = *(void *)(a2 + 32);
    if (v4)
    {
      unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      uint64_t v6 = a1;
      if (v5 >= 0x19)
      {
        unint64_t v7 = v5;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          uint64_t v6 = (*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 32))(v8, v7, 0);
        }
        else {
          uint64_t v6 = 0;
        }
      }
      *(void *)(a1 + 32) = v6;
      (*(void (**)(void))(**(void **)(a2 + 32) + 24))(*(void *)(a2 + 32));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<24ul,void ()(NSURL *)>::destroyCallable(uint64_t a1))(void)
{
  __n128 result = *(uint64_t (****)(void))(a1 + 32);
  if (result)
  {
    __n128 result = (uint64_t (***)(void))(**result)(result);
    if (*(void *)(a1 + 32) != a1) {
      __n128 result = (uint64_t (***)(void))(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24));
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::~Callable(uint64_t a1)
{
  return a1;
}

void re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::~Callable(uint64_t a1)
{
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void *re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::cloneInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6FD388;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

void *re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::moveInto(uint64_t a1, void *a2)
{
  *a2 = &unk_26E6FD388;
  a2[1] = _Block_copy(*(const void **)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<void({block_pointer} {__strong})(NSURL *),void ()(NSURL *)>::size()
{
  return 16;
}

void *re::ecs2::allocInfo_SkyboxComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_223, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_223))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87A50, "SkyboxComponent");
    __cxa_guard_release(&_MergedGlobals_223);
  }
  return &unk_26AF87A50;
}

void re::ecs2::initInfo_SkyboxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v17[0] = 0x86D071A0DABBBDE6;
  v17[1] = "SkyboxComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87A28, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF87A28);
    if (v4)
    {
      unint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF87A38 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "intensityExponent";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF87A40 = v11;
      uint64_t v12 = re::introspectionAllocator((re *)v11);
      int v14 = re::introspect_AssetHandle((re *)1, v13);
      uint64_t v15 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v12 + 32))(v12, 72, 8);
      *(_DWORD *)uint64_t v15 = 1;
      *(void *)(v15 + 8) = "material";
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(void *)(v15 + 48) = 0;
      *(void *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_26AF87A48 = v15;
      __cxa_guard_release(&qword_26AF87A28);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF87A38;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkyboxComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkyboxComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkyboxComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkyboxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v16 = v18;
}

double re::internal::defaultConstruct<re::ecs2::SkyboxComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F0D48;
  double result = 0.0;
  *(_OWORD *)(v3 + 28) = 0u;
  *(_OWORD *)(v3 + 44) = 0u;
  *(_DWORD *)(v3 + 60) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::SkyboxComponent>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3[7];
  if (v4)
  {

    a3[7] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SkyboxComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F0D48;
  double result = 0.0;
  *(_OWORD *)(v1 + 28) = 0u;
  *(_OWORD *)(v1 + 44) = 0u;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::SkyboxComponent>(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2)
  {

    a1[7] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkyboxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkyboxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkyboxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkyboxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkyboxComponent>, this);
}

void *re::allocInfo_SkyboxSystem(re *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87A30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87A30))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87AC8, "SkyboxSystem");
    __cxa_guard_release(&qword_26AF87A30);
  }
  return &unk_26AF87AC8;
}

void re::initInfo_SkyboxSystem(re *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x3D0F2824BC4FC7F2;
  v5[1] = "SkyboxSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::initInfo_SkyboxSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::SkyboxSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::SkyboxSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::SkyboxSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::SkyboxSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::SkyboxSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E6FD3F0;
  return result;
}

void *re::internal::defaultDestruct<re::SkyboxSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::SkyboxSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E6FD3F0;
  return result;
}

void *re::internal::defaultDestructV2<re::SkyboxSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::introspect_SkyboxSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkyboxSystem", (uint64_t (*)(re::internal *))re::allocInfo_SkyboxSystem, (re::IntrospectionBase *(*)(void))re::initInfo_SkyboxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkyboxSystem>, this);
}

double re::SkyboxSystem::willAddSceneToECSService(re::SkyboxSystem *this, re::ecs2::Scene *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v5[0] = this;
  v5[1] = re::SkyboxSystem::onActivateSkyboxComponent;
  void v5[2] = 0;
  v5[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::createSubscription<re::SkyboxSystem>(re::SkyboxSystem *,REEventHandlerResult (re::SkyboxSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Slice<re::ecs2::SkyboxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::Subscription const&,re::Slice<re::ecs2::SkyboxComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 216), (uint64_t)v5);
}

uint64_t re::SkyboxSystem::onActivateSkyboxComponent(float *a1)
{
  return 0;
}

void re::SkyboxSystem::willRemoveSceneFromECSService(re::SkyboxSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(void *)&long long v4 = this;
  *((void *)&v4 + 1) = re::SkyboxSystem::onActivateSkyboxComponent;
  uint64_t v5 = 0;
  long long v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::createSubscription<re::SkyboxSystem>(re::SkyboxSystem *,REEventHandlerResult (re::SkyboxSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Slice<re::ecs2::SkyboxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::Subscription const&,re::Slice<re::ecs2::SkyboxComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 216, &v4);
}

uint64_t re::SkyboxSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v267 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = result;
    long long v4 = v218;
    uint64_t v5 = *(re::ecs2::RenderingSubsystem ***)a2;
    uint64_t v6 = *(void *)a2 + 8 * v2;
    int32x4_t v143 = vdupq_n_s32(0x7F800000u);
    __asm { FMOV            V10.2S, #1.0 }
    uint64_t v145 = result;
    uint64_t v142 = v6;
    do
    {
      uint64_t v156 = *v5;
      if (*v5)
      {
        uint64_t v12 = *(void *)(v3 + 104);
        if (!v12 || (*(unsigned char *)(v12 + 424) & 0x10) != 0)
        {
          unint64_t v144 = v5;
          re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v174);
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v173, 3013, v3);
          if (!*(void *)(v3 + 120)) {
            goto LABEL_136;
          }
          if (!*(void *)(v3 + 112))
          {
LABEL_137:
            re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 116);
            _os_crash();
            __break(1u);
          }
          uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v3 + 136) + 24))(*(void *)(v3 + 136));
          uint64_t v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
          int v16 = *((_DWORD *)v15 + 31);
          if (!v16) {
            int v16 = *((_DWORD *)v15 + 4);
          }
          signed int v17 = v16 + 1;
          unsigned int v171 = 0;
          long long v169 = 0u;
          long long v170 = 0u;
          uint64_t v172 = 0x7FFFFFFFLL;
          uint64_t v159 = (void *)re::RenderManager::perFrameAllocator(*(re::RenderManager **)(v3 + 112));
          uint64_t v18 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v156 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v18)
          {
            uint64_t v19 = *(void *)(v18 + 24);
            if (v19)
            {
              uint64_t v20 = *(uint64_t **)(v18 + 40);
              id v21 = &v20[v19];
              uint64_t v151 = v14;
              BOOL v149 = v21;
              do
              {
                uint64_t v22 = *v20;
                uint64_t v23 = *(void *)(*v20 + 16);
                if (*(unsigned char *)(v23 + 288))
                {
                  (*(void (**)(float32x4_t *__return_ptr, uint64_t, void))(*(void *)v14 + 8))(&v176, v14, *(void *)(*v20 + 16));
                  if (v176.i8[0]) {
                    unint64_t v24 = v176.u64[1];
                  }
                  else {
                    unint64_t v24 = 0;
                  }
                  unint64_t v168 = v24;
                  if ((void)v169)
                  {
                    unint64_t v25 = 0x94D049BB133111EBLL
                        * ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) >> 27));
                    uint64_t v26 = *(unsigned int *)(*((void *)&v169 + 1) + 4 * ((v25 ^ (v25 >> 31)) % DWORD2(v170)));
                    if (v26 != 0x7FFFFFFF)
                    {
                      while (*(void *)(v170 + 704 * v26 + 16) != v24)
                      {
                        LODWORD(v26) = *(_DWORD *)(v170 + 704 * v26 + 8) & 0x7FFFFFFF;
                        if (v26 == 0x7FFFFFFF) {
                          goto LABEL_21;
                        }
                      }
                      goto LABEL_71;
                    }
                  }
LABEL_21:
                  uint64_t v27 = *(void *)(v22 + 40);
                  if (v27)
                  {
                    unsigned int v28 = atomic_load((unsigned int *)(v27 + 704));
                    if (v28 == 2)
                    {
                      uint64_t v157 = v169;
                      re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v23, (const re::ecs2::Entity *)1, &v262);
                      float32x4_t v176 = v262;
                      long long v177 = v263;
                      long long v178 = v264;
                      QuaternionFrounint64_t m = re::makeQuaternionFromMatrix<float>(&v176);
                      *((int32x2_t *)&v31 + 1) = v30;
                      *(void *)&long long v31 = QuaternionFrom;
                      float32x2_t v32 = (float32x2_t)vzip1_s32(v30, (int32x2_t)(v31 >> 32));
                      int8x8_t v33 = vorr_s8((int8x8_t)vcgt_f32(v32, (float32x2_t)__PAIR64__(QuaternionFrom, v30.u32[1])), (int8x8_t)vcge_f32((float32x2_t)__PAIR64__(QuaternionFrom, v30.u32[1]), v32));
                      unsigned __int8 v34 = vorn_s8((int8x8_t)vdup_lane_s32((int32x2_t)vmvn_s8(v33), 1), v33).u8[0];
                      if (v34) {
                        uint64_t v35 = 0x3F80000000000000;
                      }
                      else {
                        uint64_t v35 = (uint64_t)v30;
                      }
                      if (v34) {
                        uint64_t v36 = 0;
                      }
                      else {
                        uint64_t v36 = QuaternionFrom;
                      }
                      ++*(_DWORD *)(*(void *)(v22 + 40) + 260);
                      uint64_t v37 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(v22 + 32));
                      __int16 v38 = *(re::MaterialParameterBlock **)(v37 + 1672);
                      if (v38) {
                        double v154 = (re::RenderFrame *)re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v38, v159);
                      }
                      else {
                        double v154 = 0;
                      }
                      id v39 = *(re::MaterialParameterBlock **)(v22 + 56);
                      if (!v39)
                      {
                        v176.i64[0] = *(void *)(v3 + 112);
                        re::make::shared::object<re::MaterialParameterBlock,re::RenderManager *&>((re *)&v176, (re::MaterialParameterBlock **)v218);
                        uint64_t v40 = *(void *)(v22 + 56);
                        id v39 = *(re::MaterialParameterBlock **)v218;
                        *(void *)(v22 + 56) = *(void *)v218;
                        *(void *)long long v218 = v40;
                        if (v40)
                        {

                          id v39 = *(re::MaterialParameterBlock **)(v22 + 56);
                        }
                      }
                      uint64_t v41 = v36;
                      float v42 = *(float *)&v35;
                      float v43 = v42 + v42;
                      float v44 = (float)(*((float *)&v36 + 1) + *((float *)&v36 + 1)) * *((float *)&v36 + 1);
                      float v45 = (float)(v42 + v42) * v42;
                      float v46 = (float)(*(float *)&v41 + *(float *)&v41) * *((float *)&v36 + 1);
                      float v47 = (float)(*(float *)&v41 + *(float *)&v41) * *(float *)&v35;
                      float v48 = (float)(*((float *)&v36 + 1) + *((float *)&v36 + 1)) * *(float *)&v35;
                      float v49 = (float)(*(float *)&v41 + *(float *)&v41) * *((float *)&v35 + 1);
                      float v50 = (float)(*((float *)&v36 + 1) + *((float *)&v36 + 1)) * *((float *)&v35 + 1);
                      *(float *)v51.i32 = 1.0 - (float)(v44 + v45);
                      *(float *)&v51.i32[1] = v46 + (float)(v43 * *((float *)&v35 + 1));
                      v52.i32[3] = 0;
                      *(float *)v52.i32 = v47 + v50;
                      *(float *)&v52.i32[1] = v48 - v49;
                      float32x2x2_t v53 = (float32x2x2_t)vzip1q_s32((int32x4_t)v51.u64[0], (int32x4_t)v52.u64[0]);
                      v51.i64[1] = COERCE_UNSIGNED_INT(v47 - v50);
                      float v54 = (float)(*(float *)&v41 + *(float *)&v41) * *(float *)&v41;
                      v55.i32[3] = 0;
                      *(float *)v55.i32 = v46 - (float)(v43 * *((float *)&v35 + 1));
                      *(float *)&v55.i32[1] = 1.0 - (float)(v54 + v45);
                      int32x4_t v56 = vzip1q_s32((int32x4_t)v55.u64[0], (int32x4_t)0);
                      *(float *)&v55.i32[2] = v49 + v48;
                      *(float *)&v52.i32[2] = 1.0 - (float)(v54 + v44);
                      float32x2x2_t v57 = (float32x2x2_t)vzip2q_s32(v51, v52);
                      int32x4_t v58 = vzip2q_s32(v55, (int32x4_t)xmmword_23435FBB0);
                      float v59 = (float *)v165;
                      vst2_f32(v59, v53);
                      v59 += 4;
                      *(int32x4_t *)float v59 = vzip2q_s32((int32x4_t)v53, v56);
                      int v60 = (float *)v166;
                      vst2_f32(v60, v57);
                      v166[1] = vzip2q_s32((int32x4_t)v57, v58);
                      re::MaterialParameterBlock::setMatrix4x4F(v39, "matrixRotation", v165, (uint64_t)v167);
                      v167[0] = 0;
                      float v61 = exp2f(*(float *)(v22 + 28));
                      re::MaterialParameterBlock::setFloat(v39, "intensityScale", v61, (uint64_t)v164);
                      v164[0] = 0;
                      uint64_t v153 = (re::MeshAsset *)re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable(v39, v159);
                      uint64_t v62 = *(void *)(v3 + 120);
                      unint64_t v63 = re::MeshAsset::assetType(v153);
                      (*(void (**)(int *__return_ptr, uint64_t, const char *, uint64_t *))(*(void *)v62 + 32))(&v254, v62, "sharedCubeMesh.compiledmesh", v63);
                      long long v64 = (re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)&v254);
                      re::MeshAsset::boundingBoxForModel(v64, 0, &v248);
                      unint64_t v65 = *(void *)(v23 + 296);
                      unint64_t v66 = (_anonymous_namespace_ *)re::MeshAsset::partCountForModel(v64, 0);
                      unint64_t v161 = 0;
                      unint64_t v162 = 0;
                      uint64_t v163 = 0;
                      if (v66)
                      {
                        uint64_t v67 = 0;
                        unint64_t v68 = 0;
                        while (1)
                        {
                          re::MeshAsset::boundingBoxForPartOnModel(v64, 0, v68, v253);
                          unint64_t v69 = v162;
                          if (v162 <= v68) {
                            break;
                          }
                          unint64_t v70 = (_OWORD *)(v163 + v67);
                          long long v71 = v253[1];
                          *unint64_t v70 = v253[0];
                          v70[1] = v71;
                          ++v68;
                          v67 += 32;
                          if (v66 == (_anonymous_namespace_ *)v68) {
                            goto LABEL_40;
                          }
                        }
                        uint64_t v175 = 0;
                        float32x4_t v179 = 0u;
                        long long v180 = 0u;
                        long long v177 = 0u;
                        long long v178 = 0u;
                        float32x4_t v176 = 0u;
                        unint64_t v116 = &_os_log_internal;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)long long v218 = 136315906;
                        *(void *)&v218[4] = "operator[]";
                        *(_WORD *)&v218[12] = 1024;
                        *(_DWORD *)&v218[14] = 468;
                        *(_WORD *)&v218[18] = 2048;
                        *(void *)&v218[20] = v68;
                        *(_WORD *)&v218[28] = 2048;
                        *(void *)&v218[30] = v69;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_132:
                        uint64_t v175 = 0;
                        unint64_t v109 = (unint64_t)&v254;
                        long long v265 = 0u;
                        long long v266 = 0u;
                        long long v263 = 0u;
                        long long v264 = 0u;
                        float32x4_t v262 = 0u;
                        unint64_t v121 = &_os_log_internal;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        int v254 = 136315906;
                        uint64_t v255 = "operator[]";
                        __int16 v256 = 1024;
                        int v257 = 858;
                        __int16 v258 = 2048;
                        unint64_t v259 = v116;
                        __int16 v260 = 2048;
                        unint64_t v261 = v65;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_133:
                        re::internal::assertLog((re::internal *)4, v111, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                        _os_crash();
                        __break(1u);
LABEL_134:
                        v262.i64[0] = 0;
                        float32x4_t v179 = 0u;
                        long long v180 = 0u;
                        long long v177 = 0u;
                        long long v178 = 0u;
                        float32x4_t v176 = 0u;
                        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)long long v218 = 136315906;
                        *(void *)(v4 + 4) = "operator[]";
                        *(_WORD *)&v218[12] = 1024;
                        *(_DWORD *)(v4 + 14) = 858;
                        *(_WORD *)&v218[18] = 2048;
                        *(void *)(v4 + 20) = v121;
                        *(_WORD *)&v218[28] = 2048;
                        *(void *)(v4 + 30) = v109;
                        _os_log_send_and_compose_impl();
                        _os_crash_msg();
                        __break(1u);
LABEL_135:
                        re::internal::assertLog((re::internal *)4, v132, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                        _os_crash();
                        __break(1u);
LABEL_136:
                        re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_assetService", "updateSceneInternal", 115);
                        _os_crash();
                        __break(1u);
                        goto LABEL_137;
                      }
LABEL_40:
                      char v231 = 0;
                      v233[0] = 0;
                      *(_OWORD *)&v233[8] = 0u;
                      memset(v218, 0, 40);
                      float32x4_t v219 = 0u;
                      long long v220 = 0u;
                      long long v221 = 0u;
                      long long v222 = 0u;
                      long long v223 = 0u;
                      long long v224 = 0u;
                      long long v225 = 0u;
                      long long v226 = 0u;
                      v227[0] = 0;
                      memset(&v227[8], 0, 80);
                      long long v228 = 0u;
                      long long v229 = 0u;
                      memset(v230, 0, 28);
                      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1) {
                        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                      }
                      BOOL v72 = v159;
                      *(void *)&v233[24] = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                      *(void *)&long long v234 = _D10;
                      DWORD2(v234) = 1065353216;
                      long long v235 = 0u;
                      memset(v236, 0, 19);
                      *(void *)&v236[20] = 0xFFFFFFFF00000001;
                      *(int32x4_t *)&v237[8] = v143;
                      *(void *)&long long v73 = 0x7F0000007FLL;
                      *((void *)&v73 + 1) = 0x7F0000007FLL;
                      *(_OWORD *)&v237[24] = v73;
                      *(void *)&v237[40] = 0;
                      char v238 = 0;
                      uint64_t v241 = 0;
                      char v242 = 0;
                      uint64_t v247 = 0x10100010001;
                      uint64_t v74 = *((void *)v64 + 47);
                      v176.i64[0] = *((void *)v64 + 49);
                      v176.i64[1] = v74;
                      double v75 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v159 + 32))(v159, 24, 8);
                      v75[1] = 0;
                      v75[2] = 0;
                      *double v75 = 0;
                      re::FixedArray<re::DataArrayHandle<re::DeformationStack>>::init<>(v75, (uint64_t)v159, v176.u64[1]);
                      re::FixedArray<re::SkinningInfluence>::copy(v75, (const void **)&v176);
                      uint64_t v76 = v75[1];
                      *(void *)long long v218 = v75[2];
                      *(void *)&v218[8] = v76;
                      v176.i64[0] = (uint64_t)&v248;
                      v176.i64[1] = 1;
                      uint64_t v77 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v72 + 32))(v72, 72, 8);
                      *(void *)&v218[24] = re::MeshBoundingBoxes::MeshBoundingBoxes(v77, (uint64_t)v159, (const void **)&v176, 1);
                      v176.i64[0] = v163;
                      v176.i64[1] = v162;
                      uint64_t v78 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*v72 + 32))(v72, 72, 8);
                      *(void *)&v218[32] = re::MeshBoundingBoxes::MeshBoundingBoxes(v78, (uint64_t)v159, (const void **)&v176, 1);
                      *(void *)&v237[40] = *(void *)&v218[32];
                      float32x4_t v219 = v262;
                      long long v220 = v263;
                      long long v221 = v264;
                      long long v222 = v265;
                      if (v154)
                      {
                        int32x2_t v79 = (re::RenderFrame **)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v159 + 32))(v159, 8, 8);
                        *int32x2_t v79 = v154;
                        *(void *)&v227[24] = v79;
                        *(void *)&v227[32] = 1;
                      }
                      uint64_t v80 = *(void *)(v37 + 1664);
                      uint8x8_t v81 = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v159 + 32))(v159, 8, 8);
                      void *v81 = v80;
                      *(void *)&long long v223 = v81;
                      *((void *)&v223 + 1) = 1;
                      unint64_t v82 = (re::MeshAsset **)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v159 + 32))(v159, 8, 8);
                      *unint64_t v82 = v153;
                      *(void *)&v227[8] = v82;
                      *(void *)&v227[16] = 1;
                      *(void *)&v236[8] = v65;
                      LODWORD(v83) = *(_DWORD *)v236 & 0xFFFFFFF7;
                      HIDWORD(v83) = *(_DWORD *)&v236[4] | 8;
                      *(void *)uint64_t v236 = v83;
                      long long v188 = *(_OWORD *)&v227[16];
                      long long v189 = *(_OWORD *)&v227[32];
                      long long v190 = *(_OWORD *)&v227[48];
                      long long v191 = *(_OWORD *)&v227[64];
                      long long v184 = v224;
                      long long v185 = v225;
                      long long v186 = v226;
                      long long v187 = *(_OWORD *)v227;
                      long long v180 = v220;
                      long long v181 = v221;
                      long long v182 = v222;
                      long long v183 = v223;
                      float32x4_t v176 = *(float32x4_t *)v218;
                      long long v177 = *(_OWORD *)&v218[16];
                      long long v178 = *(_OWORD *)&v218[32];
                      float32x4_t v179 = v219;
                      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown((uint64_t)&v192, (uint64_t *)&v227[80]);
                      int v195 = v230[3];
                      char v196 = v231;
                      uint64_t v3 = v145;
                      if (v231) {
                        uint64_t v197 = v232;
                      }
                      long long v204 = *(_OWORD *)v237;
                      long long v205 = *(_OWORD *)&v237[16];
                      long long v206 = *(_OWORD *)&v237[32];
                      long long v200 = v234;
                      long long v201 = v235;
                      long long v202 = *(_OWORD *)v236;
                      long long v203 = *(_OWORD *)&v236[16];
                      long long v198 = *(_OWORD *)v233;
                      long long v199 = *(_OWORD *)&v233[16];
                      char v207 = v238;
                      if (v238)
                      {
                        long long v208 = v239;
                        long long v209 = v240;
                      }
                      uint64_t v210 = v241;
                      char v211 = v242;
                      if (v242)
                      {
                        long long v212 = v243;
                        long long v213 = v244;
                        long long v214 = v245;
                        long long v215 = v246;
                      }
                      uint64_t v216 = v247;
                      unint64_t v217 = v65;
                      unint64_t v84 = 0x94D049BB133111EBLL
                          * ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) >> 27));
                      unint64_t v85 = v84 ^ (v84 >> 31);
                      if (v157)
                      {
                        unint64_t v86 = v85 % DWORD2(v170);
                        uint64_t v87 = *(unsigned int *)(*((void *)&v169 + 1) + 4 * v86);
                        uint64_t v14 = v151;
                        id v21 = v149;
                        if (v87 != 0x7FFFFFFF)
                        {
                          while (*(void *)(v170 + 704 * v87 + 16) != v24)
                          {
                            LODWORD(v87) = *(_DWORD *)(v170 + 704 * v87 + 8) & 0x7FFFFFFF;
                            if (v87 == 0x7FFFFFFF) {
                              goto LABEL_56;
                            }
                          }
                          goto LABEL_57;
                        }
                      }
                      else
                      {
                        LODWORD(v86) = 0;
                        uint64_t v14 = v151;
                        id v21 = v149;
                      }
LABEL_56:
                      re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v169, v86, v85, &v168, (long long *)&v176);
                      ++HIDWORD(v172);
LABEL_57:
                      if (v194)
                      {
                        if (v193) {
                          uint64_t v193 = 0;
                        }
                        if (v192) {
                          (*(void (**)(void))(*(void *)v194 + 40))();
                        }
                      }
                      if (v230[2])
                      {
                        if ((void)v228) {
                          *(void *)&long long v228 = 0;
                        }
                        if (*(void *)&v227[80]) {
                          (*(void (**)(void))(*(void *)v230[2] + 40))();
                        }
                      }
                      if (v161 && v162) {
                        (*(void (**)(void))(*(void *)v161 + 40))();
                      }
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v254);
                      goto LABEL_71;
                    }
                  }
                  re::AssetHandle::loadAsync((re::AssetHandle *)(v22 + 32));
                }
LABEL_71:
                ++v20;
              }
              while (v20 != v21);
            }
          }
          uint64_t v88 = *(void *)(*(void *)(v3 + 112) + 104);
          if (v88) {
            unint64_t v155 = (re::DynamicString **)re::RenderFrameBox::get(v88 + 344, 0xFFFFFFFFFFFFFFFuLL);
          }
          else {
            unint64_t v155 = 0;
          }
          unsigned int v158 = v171;
          uint64_t v89 = 0;
          if (v171)
          {
            unint64_t v90 = (_DWORD *)(v170 + 8);
            while ((*v90 & 0x80000000) == 0)
            {
              v90 += 176;
              if (v171 == ++v89)
              {
                LODWORD(v89) = v171;
                break;
              }
            }
          }
          if (v171 != v89)
          {
            float32x2_t v91 = (re::RenderFrameData *)(v155 + 33);
            uint64_t v92 = v89;
            uint64_t v93 = v170;
            do
            {
              unint64_t v94 = v93 + 704 * v92;
              re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v156, *(const re::ecs2::Scene **)(v94 + 16), v155, &v161);
              unint64_t v168 = v161 >> 1;
              uint64_t v95 = re::RenderFrameData::stream(v91, (const re::WeakStringID *)&v168);
              uint64_t v96 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v95, (uint64_t *)&v248);
              if (!v96)
              {
                uint64_t v97 = *(void *)(*(void *)(v95 + 48) + 8);
                uint64_t v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v97 + 32))(v97, 56, 8);
                *(void *)uint64_t v98 = 0;
                *(void *)(v98 + 8) = 0;
                *(_DWORD *)(v98 + 16) = 1;
                *(void *)(v98 + 32) = 0;
                *(void *)(v98 + 40) = 0;
                *(void *)(v98 + 24) = 0;
                *(_DWORD *)(v98 + 48) = 0;
                uint32_t v99 = (re *)re::BucketArray<re::MeshScene,4ul>::init(v98, v97, 1uLL);
                *(void *)&v218[24] = re::globalAllocators(v99)[2];
                *(void *)long long v218 = &unk_26E6FD4C0;
                *(void *)&v218[8] = v97;
                *(void *)&v218[32] = v218;
                v176.i64[1] = v98;
                v176.i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::MeshScene,4ul> *>::__handle[abi:nn180100];
                v179.i64[1] = *(void *)&v218[24];
                *(void *)&long long v180 = 0;
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v178, (uint64_t)v218);
                uint64_t v96 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v95, (uint64_t *)&v248, (re *)&v176);
                if ((void)v180)
                {
                  v262.i64[0] = (uint64_t)&v176;
                  (*(void (**)(void, float32x4_t *))(*(void *)v180 + 16))(v180, &v262);
                }
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v178);
                if (v176.i64[0]) {
                  ((void (*)(void, float32x4_t *, void, void, void))v176.i64[0])(0, &v176, 0, 0, 0);
                }
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)v218);
              }
              unint64_t v160 = v94;
              unint64_t v100 = v94 + 32;
              long long v188 = *(_OWORD *)(v94 + 224);
              long long v189 = *(_OWORD *)(v94 + 240);
              long long v190 = *(_OWORD *)(v94 + 256);
              long long v191 = *(_OWORD *)(v94 + 272);
              long long v184 = *(_OWORD *)(v94 + 160);
              long long v185 = *(_OWORD *)(v94 + 176);
              long long v186 = *(_OWORD *)(v94 + 192);
              long long v187 = *(_OWORD *)(v94 + 208);
              long long v180 = *(_OWORD *)(v94 + 96);
              long long v181 = *(_OWORD *)(v94 + 112);
              long long v182 = *(_OWORD *)(v94 + 128);
              long long v183 = *(_OWORD *)(v94 + 144);
              float32x4_t v176 = *(float32x4_t *)(v94 + 32);
              long long v177 = *(_OWORD *)(v94 + 48);
              long long v178 = *(_OWORD *)(v94 + 64);
              float32x4_t v179 = *(float32x4_t *)(v94 + 80);
              long long v4 = *(unsigned char **)(v94 + 336);
              uint64_t v102 = *(void *)(v94 + 344);
              long long v103 = *(_OWORD *)(v100 + 256);
              long long v104 = *(_OWORD *)(v100 + 272);
              *(_OWORD *)(v100 + 256) = 0u;
              *(_OWORD *)(v100 + 272) = 0u;
              long long v105 = *(_OWORD *)(v100 + 288);
              *(_OWORD *)(v100 + 288) = 0u;
              *(_OWORD *)(v100 + 304) = 0u;
              int v106 = *(_DWORD *)(v100 + 320);
              int v107 = *(unsigned __int8 *)(v100 + 328);
              uint64_t v108 = *(void *)(v100 + 336);
              long long v221 = *(_OWORD *)(v100 + 424);
              long long v222 = *(_OWORD *)(v100 + 440);
              long long v223 = *(_OWORD *)(v100 + 456);
              long long v224 = *(_OWORD *)(v100 + 472);
              *(_OWORD *)&v218[16] = *(_OWORD *)(v100 + 360);
              *(_OWORD *)&v218[32] = *(_OWORD *)(v100 + 376);
              float32x4_t v219 = *(float32x4_t *)(v100 + 392);
              long long v220 = *(_OWORD *)(v100 + 408);
              *(_OWORD *)long long v218 = *(_OWORD *)(v100 + 344);
              unint64_t v109 = *(unsigned __int8 *)(v100 + 496);
              if (*(unsigned char *)(v100 + 496))
              {
                *(_OWORD *)((char *)v253 + 15) = *(_OWORD *)(v100 + 512);
                *(_OWORD *)((char *)&v253[1] + 15) = *(_OWORD *)(v100 + 528);
              }
              uint64_t v110 = *(void *)(v100 + 544);
              uint64_t v111 = *(unsigned __int8 *)(v100 + 560);
              if (*(unsigned char *)(v100 + 560))
              {
                long long v249 = *(_OWORD *)(v100 + 576);
                long long v250 = *(_OWORD *)(v100 + 592);
                long long v251 = *(_OWORD *)(v100 + 608);
                long long v252 = *(_OWORD *)(v100 + 624);
              }
              uint64_t v112 = *(void *)(v100 + 640);
              unint64_t v113 = *(void *)(v101 + 40);
              unint64_t v65 = *(void *)(v101 + 8);
              if (v113 + 1 > 4 * v65)
              {
                int v146 = v107;
                unsigned int v147 = v111;
                uint64_t v114 = *(void *)(v100 + 640);
                uint64_t v115 = v110;
                long long v150 = v104;
                long long v152 = v103;
                long long v148 = v105;
                re::BucketArray<re::MeshScene,4ul>::setBucketsCapacity((void *)v101, (v113 + 4) >> 2);
                int v107 = v146;
                uint64_t v111 = v147;
                long long v105 = v148;
                long long v104 = v150;
                long long v103 = v152;
                uint64_t v110 = v115;
                uint64_t v112 = v114;
                unint64_t v65 = *(void *)(v101 + 8);
              }
              unint64_t v116 = v113 >> 2;
              if (v65 <= v113 >> 2) {
                goto LABEL_132;
              }
              if (*(unsigned char *)(v101 + 16)) {
                uint64_t v117 = v101 + 24;
              }
              else {
                uint64_t v117 = *(void *)(v101 + 32);
              }
              uint64_t v118 = *(void *)(v117 + 8 * v116);
              ++*(void *)(v101 + 40);
              ++*(_DWORD *)(v101 + 48);
              uint64_t v119 = v118 + 656 * (v113 & 3);
              *(_OWORD *)(v119 + 192) = v188;
              *(_OWORD *)(v119 + 208) = v189;
              *(_OWORD *)(v119 + 224) = v190;
              *(_OWORD *)(v119 + 240) = v191;
              *(_OWORD *)(v119 + 128) = v184;
              *(_OWORD *)(v119 + 144) = v185;
              *(_OWORD *)(v119 + 160) = v186;
              *(_OWORD *)(v119 + 176) = v187;
              *(_OWORD *)(v119 + 64) = v180;
              *(_OWORD *)(v119 + 80) = v181;
              *(_OWORD *)(v119 + 96) = v182;
              *(_OWORD *)(v119 + 112) = v183;
              *(float32x4_t *)uint64_t v119 = v176;
              *(_OWORD *)(v119 + 16) = v177;
              *(_OWORD *)(v119 + 32) = v178;
              *(float32x4_t *)(v119 + 48) = v179;
              *(_OWORD *)(v119 + 288) = v105;
              *(_OWORD *)(v119 + 304) = 0u;
              *(void *)(v119 + 304) = v4;
              *(void *)(v119 + 312) = v102;
              *(_OWORD *)(v119 + 256) = v103;
              *(_OWORD *)(v119 + 272) = v104;
              *(_DWORD *)(v119 + 320) = v106;
              *(unsigned char *)(v119 + 328) = v107;
              if (v107) {
                *(void *)(v118 + 656 * (v113 & 3) + 336) = v108;
              }
              uint64_t v120 = v118 + 656 * (v113 & 3);
              long long v4 = v218;
              *(_OWORD *)(v120 + 424) = v221;
              *(_OWORD *)(v120 + 440) = v222;
              *(_OWORD *)(v120 + 456) = v223;
              *(_OWORD *)(v120 + 472) = v224;
              *(_OWORD *)(v120 + 360) = *(_OWORD *)&v218[16];
              *(_OWORD *)(v120 + 376) = *(_OWORD *)&v218[32];
              *(float32x4_t *)(v120 + 392) = v219;
              *(_OWORD *)(v120 + 408) = v220;
              *(_OWORD *)(v120 + 344) = *(_OWORD *)v218;
              *(unsigned char *)(v120 + 496) = v109;
              float32x2_t v91 = (re::RenderFrameData *)(v155 + 33);
              unint64_t v121 = v160;
              if (v109)
              {
                uint64_t v122 = v118 + 656 * (v113 & 3);
                *(_OWORD *)(v122 + 512) = *(_OWORD *)((char *)v253 + 15);
                *(_OWORD *)(v122 + 528) = *(_OWORD *)((char *)&v253[1] + 15);
              }
              uint64_t v123 = v118 + 656 * (v113 & 3);
              *(void *)(v123 + 544) = v110;
              *(unsigned char *)(v123 + 560) = v111;
              if (v111)
              {
                float v124 = (_OWORD *)(v118 + 656 * (v113 & 3));
                v124[36] = v249;
                v124[37] = v250;
                v124[38] = v251;
                v124[39] = v252;
              }
              *(void *)(v118 + 656 * (v113 & 3) + 640) = v112;
              uint64_t v125 = *(void *)(v101 + 40);
              if (!v125) {
                goto LABEL_133;
              }
              re::BucketArray<re::MeshScene,4ul>::operator[](v101, v125 - 1);
              uint64_t v248 = (void *)(v161 >> 1);
              uint64_t v126 = re::RenderFrameData::stream((re::RenderFrameData *)(v155 + 33), (const re::WeakStringID *)&v248);
              int v127 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v126, (uint64_t *)&v262);
              if (!v127)
              {
                uint64_t v128 = *(void *)(*(void *)(v126 + 48) + 8);
                uint64_t v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v128 + 32))(v128, 56, 8);
                *(void *)uint64_t v129 = 0;
                *(void *)(v129 + 8) = 0;
                *(_DWORD *)(v129 + 16) = 1;
                *(void *)(v129 + 32) = 0;
                *(void *)(v129 + 40) = 0;
                *(void *)(v129 + 24) = 0;
                *(_DWORD *)(v129 + 48) = 0;
                uint64_t v130 = (re *)re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::init(v129, v128, 1uLL);
                v176.i64[1] = v129;
                v176.i64[0] = (uint64_t)std::__any_imp::_SmallHandler<re::BucketArray<re::ecs2::SkyboxMeshID,4ul> *>::__handle[abi:nn180100];
                v179.i64[1] = re::globalAllocators(v130)[2];
                *(void *)&long long v180 = 0;
                int v127 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v126, (uint64_t *)&v262, (re *)&v176);
                if ((void)v180)
                {
                  *(void *)long long v218 = &v176;
                  (*(void (**)(void, unsigned char *))(*(void *)v180 + 16))(v180, v218);
                }
                re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v178);
                if (v176.i64[0]) {
                  ((void (*)(void, float32x4_t *, void, void, void))v176.i64[0])(0, &v176, 0, 0, 0);
                }
              }
              uint64_t v133 = *v131;
              uint64_t v134 = *(void *)(v160 + 688);
              unint64_t v135 = *(void *)(*v131 + 40);
              unint64_t v109 = *(void *)(*v131 + 8);
              if (v135 + 1 > 4 * v109)
              {
                re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::setBucketsCapacity((void *)*v131, (v135 + 4) >> 2);
                unint64_t v109 = *(void *)(v133 + 8);
              }
              unint64_t v121 = v135 >> 2;
              if (v109 <= v135 >> 2) {
                goto LABEL_134;
              }
              if (*(unsigned char *)(v133 + 16)) {
                uint64_t v136 = v133 + 24;
              }
              else {
                uint64_t v136 = *(void *)(v133 + 32);
              }
              uint64_t v137 = *(void *)(v136 + 8 * v121);
              ++*(void *)(v133 + 40);
              ++*(_DWORD *)(v133 + 48);
              *(void *)(v137 + 8 * (v135 & 3)) = v134;
              uint64_t v138 = *(void *)(v133 + 40);
              if (!v138) {
                goto LABEL_135;
              }
              re::BucketArray<unsigned long,4ul>::operator[](v133, v138 - 1);
              re::StringID::destroyString((re::StringID *)&v161);
              uint64_t v93 = v170;
              if (v171 <= (int)v89 + 1) {
                unsigned int v139 = v89 + 1;
              }
              else {
                unsigned int v139 = v171;
              }
              while (1)
              {
                uint64_t v92 = (v89 + 1);
                if (v139 - 1 == v89) {
                  break;
                }
                LODWORD(v89) = v89 + 1;
                unsigned int v140 = v92;
                if ((*(_DWORD *)(v170 + 704 * v92 + 8) & 0x80000000) != 0) {
                  goto LABEL_124;
                }
              }
              unsigned int v140 = v139;
LABEL_124:
              LODWORD(v89) = v140;
            }
            while (v158 != v140);
          }
          uint64_t v141 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v156 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          uint64_t v3 = v145;
          if (!v141 || !*(void *)(v141 + 24))
          {
            v176.i64[0] = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkyboxComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
            re::ecs2::SystemSchedulingDisabler::disableSchedulingIfNoComponent(v145, (uint64_t)&v176, 1);
          }
          re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v169);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v173);
          double result = re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v174);
          uint64_t v5 = v144;
          uint64_t v6 = v142;
        }
      }
      ++v5;
    }
    while (v5 != (re::ecs2::RenderingSubsystem **)v6);
  }
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 288;
      do
      {
        uint64_t v6 = a1[2] + v5;
        int v7 = *(_DWORD *)(v6 - 280);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 - 280) = v7 & 0x7FFFFFFF;
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v6);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 704;
      }
      while (v4 < v3);
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::SkyboxSystem::~SkyboxSystem(re::SkyboxSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::SkyboxSystem::typeInfo(re::SkyboxSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkyboxSystem", (uint64_t (*)(re::internal *))re::allocInfo_SkyboxSystem, (re::IntrospectionBase *(*)(void))re::initInfo_SkyboxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::SkyboxSystem>, 0);
}

id re::internal::defaultRetain<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::SkyboxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::createSubscription<re::SkyboxSystem>(re::SkyboxSystem *,REEventHandlerResult (re::SkyboxSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Slice<re::ecs2::SkyboxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::SkyboxComponent>,re::Slice<re::ecs2::SkyboxComponent*>>::Subscription const&,re::Slice<re::ecs2::SkyboxComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    unint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  uint64_t v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      uint64_t v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 704 * v10, 16);
  if (v12)
  {
    uint64_t v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t *re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, long long *a5)
{
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    unsigned int v10 = *(_DWORD *)(a1 + 32);
    unsigned int v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      int v12 = *(_DWORD *)(a1 + 28);
      signed int v13 = 2 * v12;
      uint64_t v14 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v13) {
          BOOL v15 = v10 == v13;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v56, 0, 36);
          *(void *)&v56[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v56, v14, v13);
          long long v16 = *(_OWORD *)v56;
          *(_OWORD *)int32x4_t v56 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          uint64_t v17 = *(void *)&v56[16];
          uint64_t v18 = *(void *)(a1 + 16);
          *(void *)&v56[16] = v18;
          *(void *)(a1 + 16) = v17;
          long long v20 = *(_OWORD *)&v56[24];
          *(_OWORD *)&v56[24] = *(_OWORD *)(a1 + 24);
          unsigned int v19 = *(_DWORD *)&v56[32];
          *(_OWORD *)(a1 + 24) = v20;
          uint64_t v21 = v19;
          if (v19)
          {
            uint64_t v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v22 - 16), v22, v22 + 16);
              }
              v22 += 704;
              --v21;
            }
            while (v21);
          }
          re::HashTable<unsigned long long,re::SkyboxSystem::updateSceneInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::SkyboxData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v56);
        }
      }
      else
      {
        if (v13) {
          signed int v25 = 2 * v12;
        }
        else {
          signed int v25 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      unsigned int v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 704 * v10 + 8);
  }
  else
  {
    uint64_t v23 = *(void *)(a1 + 16);
    int v24 = *(_DWORD *)(v23 + 704 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  uint64_t v26 = 704 * v10;
  *(_DWORD *)(v23 + v26 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v26) = a3;
  *(void *)(*(void *)(a1 + 16) + v26 + 16) = *a4;
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v27 + v26;
  uint64_t v29 = v27 + v26 + 32;
  long long v31 = a5[14];
  long long v30 = a5[15];
  long long v32 = a5[13];
  *(_OWORD *)(v28 + 224) = a5[12];
  *(_OWORD *)(v28 + 240) = v32;
  *(_OWORD *)(v28 + 256) = v31;
  *(_OWORD *)(v28 + 272) = v30;
  long long v33 = a5[11];
  long long v34 = a5[8];
  long long v35 = a5[9];
  *(_OWORD *)(v28 + 192) = a5[10];
  *(_OWORD *)(v28 + 208) = v33;
  *(_OWORD *)(v28 + 160) = v34;
  *(_OWORD *)(v28 + 176) = v35;
  long long v36 = a5[7];
  long long v37 = a5[4];
  long long v38 = a5[5];
  *(_OWORD *)(v28 + 128) = a5[6];
  *(_OWORD *)(v28 + 144) = v36;
  *(_OWORD *)(v28 + 96) = v37;
  *(_OWORD *)(v28 + 112) = v38;
  long long v39 = *a5;
  long long v40 = a5[1];
  long long v41 = a5[3];
  *(_OWORD *)(v28 + 64) = a5[2];
  *(_OWORD *)(v28 + 80) = v41;
  *(_OWORD *)(v28 + 32) = v39;
  *(_OWORD *)(v28 + 48) = v40;
  *(_OWORD *)(v28 + 320) = 0u;
  *(_OWORD *)(v28 + 336) = 0u;
  *(_OWORD *)(v28 + 288) = 0u;
  *(_OWORD *)(v28 + 304) = 0u;
  double result = re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v27 + v26 + 288), (uint64_t *)a5 + 32);
  *(_DWORD *)(v28 + 352) = *((_DWORD *)a5 + 80);
  int v43 = *((unsigned __int8 *)a5 + 328);
  *(unsigned char *)(v28 + 360) = v43;
  if (v43) {
    *(void *)(v29 + 336) = *((void *)a5 + 42);
  }
  *(_OWORD *)(v29 + 344) = *(long long *)((char *)a5 + 344);
  long long v44 = *(long long *)((char *)a5 + 360);
  long long v45 = *(long long *)((char *)a5 + 376);
  long long v46 = *(long long *)((char *)a5 + 408);
  *(_OWORD *)(v29 + 392) = *(long long *)((char *)a5 + 392);
  *(_OWORD *)(v29 + 408) = v46;
  *(_OWORD *)(v29 + 360) = v44;
  *(_OWORD *)(v29 + 376) = v45;
  long long v47 = *(long long *)((char *)a5 + 424);
  long long v48 = *(long long *)((char *)a5 + 440);
  long long v49 = *(long long *)((char *)a5 + 472);
  *(_OWORD *)(v29 + 456) = *(long long *)((char *)a5 + 456);
  *(_OWORD *)(v29 + 472) = v49;
  *(_OWORD *)(v29 + 424) = v47;
  *(_OWORD *)(v29 + 440) = v48;
  int v50 = *((unsigned __int8 *)a5 + 496);
  *(unsigned char *)(v29 + 496) = v50;
  if (v50)
  {
    long long v51 = a5[33];
    *(_OWORD *)(v29 + 512) = a5[32];
    *(_OWORD *)(v29 + 528) = v51;
  }
  *(void *)(v29 + 544) = *((void *)a5 + 68);
  int v52 = *((unsigned __int8 *)a5 + 560);
  *(unsigned char *)(v29 + 560) = v52;
  if (v52)
  {
    long long v53 = a5[36];
    long long v54 = a5[37];
    long long v55 = a5[39];
    *(_OWORD *)(v29 + 608) = a5[38];
    *(_OWORD *)(v29 + 624) = v55;
    *(_OWORD *)(v29 + 576) = v53;
    *(_OWORD *)(v29 + 592) = v54;
  }
  *(void *)(v29 + 640) = *((void *)a5 + 80);
  *(void *)(v27 + 704 * v10 + 688) = *((void *)a5 + 82);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *re::BucketArray<re::MeshScene,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::MeshScene,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::MeshScene,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 2624, 0);
          unint64_t v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          BOOL v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            BOOL v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::MeshScene,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      double result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::MeshScene,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::MeshScene,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::MeshScene,4ul> *>::__id;
      if (v10) {
        double result = a2 + 1;
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  double result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
      {
        uint64_t v7 = re::BucketArray<re::MeshScene,4ul>::operator[](v4, i);
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v7 + 256);
      }
    }
    while (*(void *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(void *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v8(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FD4C0;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FD4C0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::MeshScene>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::MeshScene,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 656 * (a2 & 3);
}

void *re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::ecs2::SkyboxMeshID,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      unint64_t v4 = result[1];
      if (v4 > a2)
      {
        int v5 = *((_DWORD *)result + 4);
        do
        {
          unint64_t v6 = v3 + 3;
          if ((v5 & 1) == 0) {
            unint64_t v6 = (void *)v3[4];
          }
          double result = (void *)(*(uint64_t (**)(void, void))(*(void *)*v3 + 40))(*v3, v6[v4 - 1]);
          int v7 = *((_DWORD *)v3 + 4);
          unint64_t v4 = v3[1] - 1;
          v3[1] = v4;
          int v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        uint64_t v8 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 32, 0);
          uint64_t v9 = result;
          if (*v3)
          {
            unint64_t v10 = v3[1];
            int v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              unint64_t v12 = *v8;
              BOOL v14 = v10 >= *v8;
              unint64_t v13 = v10 + 1;
              BOOL v14 = !v14 || v12 >= v13;
              if (v14) {
                goto LABEL_24;
              }
              unint64_t v15 = 2 * v12;
              goto LABEL_20;
            }
            unint64_t v13 = v10 + 1;
            if (v13 >= 3)
            {
              unint64_t v15 = 4;
LABEL_20:
              if (v15 <= v13) {
                unint64_t v17 = v13;
              }
              else {
                unint64_t v17 = v15;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              int v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v16 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            int v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          uint64_t v18 = v3 + 3;
          if ((v11 & 1) == 0) {
            uint64_t v18 = (void *)v3[4];
          }
          unint64_t v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::ecs2::SkyboxMeshID,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      double result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::ecs2::SkyboxMeshID,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::ecs2::SkyboxMeshID,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::ecs2::SkyboxMeshID,4ul> *>::__id;
      if (v10) {
        double result = a2 + 1;
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *re::ecs2::allocInfo_SpecifyLaneCommand(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87B48))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87E10, "SpecifyLaneCommand");
    __cxa_guard_release(&qword_26AF87B48);
  }
  return &unk_26AF87E10;
}

void re::ecs2::initInfo_SpecifyLaneCommand(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0xF5E828FC47FA9F7CLL;
  v13[1] = "SpecifyLaneCommand";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B50, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF87B50);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      int v7 = re::IntrospectionInfo<re::DynamicString>::get(1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "lane";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF87BD0 = v8;
      uint64_t v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::AssetHandle [2]>::get((uint64_t)v9, v10);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "renderTarget";
      *(void *)(v11 + 16) = &unk_26AF87CD0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x2000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF87BD8 = v11;
      __cxa_guard_release(&qword_26AF87B50);
    }
  }
  *((void *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF87BD0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpecifyLaneCommand>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpecifyLaneCommand>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpecifyLaneCommand>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpecifyLaneCommand>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::IntrospectionInfo<re::AssetHandle [2]>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87BA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87BA0))
  {
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF87CD0);
    __cxa_guard_release(&qword_26AF87BA0);
  }
  if ((_MergedGlobals_224 & 1) == 0)
  {
    _MergedGlobals_224 = 1;
    unint64_t v2 = re::introspect_AssetHandle((re *)1, a2);
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF87CD0, (const re::IntrospectionBase *)v2, 2);
    re::IntrospectionRegistry::add(v3, v4);
    re::getPrettyTypeName((re *)&unk_26AF87CD0, (const re::IntrospectionBase *)&v7);
    if (BYTE8(v7)) {
      uint64_t v5 = v8;
    }
    else {
      uint64_t v5 = (char *)&v7 + 9;
    }
    if ((void)v7)
    {
      if (BYTE8(v7)) {
        (*(void (**)(void))(*(void *)v7 + 40))();
      }
    }
    long long v7 = *((_OWORD *)v2 + 2);
    xmmword_26AF87CF0 = v6;
    re::StringID::destroyString((re::StringID *)v9);
  }
}

double re::internal::defaultConstruct<re::ecs2::SpecifyLaneCommand>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a3, 0);
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  double result = NAN;
  *(void *)(a3 + 80) = -1;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 116) = 0u;
  return result;
}

double re::internal::defaultDestruct<re::ecs2::SpecifyLaneCommand>(uint64_t a1, uint64_t a2, re::DynamicString *a3)
{
  for (uint64_t i = 112; i != 96; i -= 8)
  {
    uint64_t v5 = *(void **)((char *)a3 + i);
    if (v5)
    {

      *(void *)((char *)a3 + i) = 0;
    }
  }
  do
  {
    long long v6 = *(void **)((char *)a3 + i);
    if (v6)
    {

      *(void *)((char *)a3 + i) = 0;
    }
    i -= 8;
  }
  while (i != 80);
  for (uint64_t j = 56; j != 8; j -= 24)
    re::AssetHandle::~AssetHandle((re::DynamicString *)((char *)a3 + j));
  return re::DynamicString::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::SpecifyLaneCommand>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((void *)a1, 0);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  double result = NAN;
  *(void *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  return result;
}

double re::internal::defaultDestructV2<re::ecs2::SpecifyLaneCommand>(re::DynamicString *a1)
{
  for (uint64_t i = 112; i != 96; i -= 8)
  {
    uint64_t v3 = *(void **)((char *)a1 + i);
    if (v3)
    {

      *(void *)((char *)a1 + i) = 0;
    }
  }
  do
  {
    unint64_t v4 = *(void **)((char *)a1 + i);
    if (v4)
    {

      *(void *)((char *)a1 + i) = 0;
    }
    i -= 8;
  }
  while (i != 80);
  for (uint64_t j = 56; j != 8; j -= 24)
    re::AssetHandle::~AssetHandle((re::DynamicString *)((char *)a1 + j));
  return re::DynamicString::deinit(a1);
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::ScopeLanePair>>::get()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87BA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87BA8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_26AF87C10);
    qword_26AF87C10[0] = (uint64_t)&unk_26E6FD690;
    __cxa_guard_release(&qword_26AF87BA8);
  }
  if ((byte_26AF87B41 & 1) == 0)
  {
    uint64_t v0 = re::ecs2::introspect_ScopeLanePair((re::IntrospectionBase **)1);
    if ((byte_26AF87B41 & 1) == 0)
    {
      uint64_t v1 = v0;
      byte_26AF87B41 = 1;
      int v2 = *(_DWORD *)(v0 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_26AF87C10, 0);
      unk_26AF87C20 = 0x2800000003;
      unk_26AF87C28 = v2;
      unk_26AF87C2C = 0;
      *(void *)&xmmword_26AF87C30 = 0;
      *((void *)&xmmword_26AF87C30 + 1) = 0xFFFFFFFFLL;
      unk_26AF87C40 = v1;
      qword_26AF87C48 = 0;
      qword_26AF87C10[0] = (uint64_t)&unk_26E6FD690;
      re::IntrospectionRegistry::add(v3, v4);
      re::getPrettyTypeName((re *)qword_26AF87C10, (const re::IntrospectionBase *)&v13);
      if (v14) {
        uint64_t v5 = *(const char **)&v15[7];
      }
      else {
        uint64_t v5 = v15;
      }
      if (v13 && (v14 & 1) != 0) {
        (*(void (**)(void))(*(void *)v13 + 40))();
      }
      long long v10 = *(_OWORD *)(v1 + 32);
      long long v6 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v11);
      if (v6)
      {
        uint64_t v7 = *v6;
        *((void *)&v9 + 1) = v7;
      }
      else
      {
        long long v12 = v10;
        re::TypeBuilder::beginListType((uint64_t)&v13, v11, 1, 0x28uLL, 8uLL, &v12);
        re::TypeBuilder::setConstructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v13, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v13, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v13, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v13, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v13, v8);
      }
      xmmword_26AF87C30 = v9;
      re::StringID::destroyString((re::StringID *)v11);
    }
  }
}

void *re::ecs2::allocInfo_CameraViewDescriptor(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87B68))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87E88, "CameraViewDescriptor");
    __cxa_guard_release(&qword_26AF87B68);
  }
  return &unk_26AF87E88;
}

void re::ecs2::initInfo_CameraViewDescriptor(re::ecs2 *this, re::IntrospectionBase *a2)
{
  *(void *)&long long v68 = 0xA0AAB9439DFEFD32;
  *((void *)&v68 + 1) = "CameraViewDescriptor";
  re::StringID::destroyString((re::StringID *)&v68);
  *((_OWORD *)this + 2) = v65;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B60, memory_order_acquire) & 1) == 0)
  {
    unint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF87B60);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v7 = re::introspect_AssetHandle((re *)1, v6);
      uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v8 = 1;
      *(void *)(v8 + 8) = "renderGraph";
      *(void *)(v8 + 16) = v7;
      *(void *)(v8 + 24) = 0;
      *(void *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_26AF87DA8 = v8;
      long long v9 = re::introspectionAllocator((re *)v8);
      uint64_t v11 = re::introspect_BOOL((re *)1, v10);
      uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, 72, 8);
      *(_DWORD *)uint64_t v12 = 1;
      *(void *)(v12 + 8) = "disableAA";
      *(void *)(v12 + 16) = v11;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0x1800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(void *)(v12 + 48) = 0;
      *(void *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_26AF87DB0 = v12;
      uint64_t v13 = re::introspectionAllocator((re *)v12);
      unint64_t v15 = re::introspect_BOOL((re *)1, v14);
      uint64_t v16 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v16 = 1;
      *(void *)(v16 + 8) = "enableUnwarp";
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 32) = 0x1A00000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(void *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_26AF87DB8 = v16;
      unint64_t v17 = re::introspectionAllocator((re *)v16);
      unint64_t v19 = re::introspect_BOOL((re *)1, v18);
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v17 + 32))(v17, 72, 8);
      *(_DWORD *)uint64_t v20 = 1;
      *(void *)(v20 + 8) = "disableTonemapping";
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0x1900000005;
      *(_DWORD *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0;
      *(void *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_26AF87DC0 = v20;
      uint64_t v21 = re::introspectionAllocator((re *)v20);
      uint64_t v23 = re::introspect_BOOL((re *)1, v22);
      uint64_t v24 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v21 + 32))(v21, 72, 8);
      *(_DWORD *)uint64_t v24 = 1;
      *(void *)(v24 + 8) = "disableDebugDraw";
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0;
      *(void *)(v24 + 32) = 0x1B00000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(void *)(v24 + 48) = 0;
      *(void *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_26AF87DC8 = v24;
      signed int v25 = re::introspectionAllocator((re *)v24);
      uint64_t v26 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v27 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v25 + 32))(v25, 72, 8);
      *(_DWORD *)uint64_t v27 = 1;
      *(void *)(v27 + 8) = "clearColor";
      *(void *)(v27 + 16) = v26;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0x2000000007;
      *(_DWORD *)(v27 + 40) = 0;
      *(void *)(v27 + 48) = 0;
      *(void *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_26AF87DD0 = v27;
      uint64_t v28 = re::introspectionAllocator((re *)v27);
      uint64_t v29 = re::introspect_MeshLodSelectOverrideOptions((re::IntrospectionBase **)1);
      uint64_t v30 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, 72, 8);
      *(_DWORD *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = "lodOverrideOptions";
      *(void *)(v30 + 16) = v29;
      *(void *)(v30 + 24) = 0;
      *(void *)(v30 + 32) = 0x3800000008;
      *(_DWORD *)(v30 + 40) = 0;
      *(void *)(v30 + 48) = 0;
      *(void *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_26AF87DD8 = v30;
      long long v31 = re::introspectionAllocator((re *)v30);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::ScopeLanePair>>::get();
      uint64_t v32 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v31 + 32))(v31, 72, 8);
      *(_DWORD *)uint64_t v32 = 1;
      *(void *)(v32 + 8) = "pickupScopeLanes";
      *(void *)(v32 + 16) = qword_26AF87C10;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0x4800000009;
      *(_DWORD *)(v32 + 40) = 0;
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_26AF87DE0 = v32;
      long long v33 = re::introspectionAllocator((re *)v32);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87BB0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF87BB0))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF87D18);
        __cxa_guard_release(&qword_26AF87BB0);
      }
      if ((byte_26AF87B42 & 1) == 0)
      {
        byte_26AF87B42 = 1;
        re::IntrospectionInfo<re::DynamicArray<re::ecs2::ScopeLanePair>>::get();
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&unk_26AF87D18, (const re::IntrospectionBase *)qword_26AF87C10, 2);
        re::IntrospectionRegistry::add(v34, v35);
        re::getPrettyTypeName((re *)&unk_26AF87D18, (const re::IntrospectionBase *)&v68);
        if (BYTE8(v68)) {
          long long v36 = v69;
        }
        else {
          long long v36 = (char *)&v68 + 9;
        }
        if (void)v68 && (BYTE8(v68)) {
          (*(void (**)(void))(*(void *)v68 + 40))();
        }
        long long v68 = xmmword_26AF87C30;
        xmmword_26AF87D38 = v70;
        re::StringID::destroyString((re::StringID *)&v71);
      }
      uint64_t v37 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v33 + 32))(v33, 72, 8);
      *(_DWORD *)uint64_t v37 = 1;
      *(void *)(v37 + 8) = "pickupScopeLanesPerEye";
      *(void *)(v37 + 16) = &unk_26AF87D18;
      *(void *)(v37 + 24) = 0;
      *(void *)(v37 + 32) = 0x700000000ALL;
      *(_DWORD *)(v37 + 40) = 0;
      *(void *)(v37 + 48) = 0;
      *(void *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_26AF87DE8 = v37;
      long long v38 = re::introspectionAllocator((re *)v37);
      long long v40 = re::introspect_ViewMode((re *)1, v39);
      uint64_t v41 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v38 + 32))(v38, 72, 8);
      *(_DWORD *)uint64_t v41 = 1;
      *(void *)(v41 + 8) = "viewMode";
      *(void *)(v41 + 16) = v40;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0xC00000000BLL;
      *(_DWORD *)(v41 + 40) = 0;
      *(void *)(v41 + 48) = 0;
      *(void *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_26AF87DF0 = v41;
      float v42 = re::introspectionAllocator((re *)v41);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87BB8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26AF87BB8))
      {
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&algn_26AF87D48[24]);
        __cxa_guard_release(&qword_26AF87BB8);
      }
      if ((byte_26AF87B43 & 1) == 0)
      {
        byte_26AF87B43 = 1;
        int v43 = (const re::IntrospectionBase *)re::ecs2::introspect_CameraViewport((re::IntrospectionBase **)1);
        re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&algn_26AF87D48[24], v43, 2);
        re::IntrospectionRegistry::add(v44, v45);
        re::getPrettyTypeName((re *)&algn_26AF87D48[24], (const re::IntrospectionBase *)&v68);
        if (BYTE8(v68)) {
          long long v46 = v69;
        }
        else {
          long long v46 = (char *)&v68 + 9;
        }
        if (void)v68 && (BYTE8(v68)) {
          (*(void (**)(void))(*(void *)v68 + 40))();
        }
        long long v68 = *((_OWORD *)v43 + 2);
        xmmword_26AF87D80 = v70;
        re::StringID::destroyString((re::StringID *)&v71);
      }
      uint64_t v47 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v42 + 32))(v42, 72, 8);
      *(_DWORD *)uint64_t v47 = 1;
      *(void *)(v47 + 8) = "viewport";
      *(void *)(v47 + 16) = &algn_26AF87D48[24];
      *(void *)(v47 + 24) = 0;
      *(void *)(v47 + 32) = 0xC40000000CLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(void *)(v47 + 48) = 0;
      *(void *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_26AF87DF8 = v47;
      long long v48 = (re::ecs2 *)re::introspectionAllocator((re *)v47);
      long long v49 = v48;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87BC0, memory_order_acquire) & 1) == 0)
      {
        long long v48 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF87BC0);
        if (v48)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF87C50);
          qword_26AF87C50 = (uint64_t)&unk_26E6FD728;
          __cxa_guard_release(&qword_26AF87BC0);
        }
      }
      if ((byte_26AF87B44 & 1) == 0)
      {
        int v50 = (void *)qword_26AF87B58;
        if (qword_26AF87B58
          || (int v50 = re::ecs2::allocInfo_SpecifyLaneCommand(v48),
              qword_26AF87B58 = (uint64_t)v50,
              re::ecs2::initInfo_SpecifyLaneCommand((re::ecs2 *)v50, v51),
              (byte_26AF87B44 & 1) == 0))
        {
          byte_26AF87B44 = 1;
          int v52 = *((_DWORD *)v50 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF87C50, 0);
          qword_26AF87C60 = 0x2800000003;
          dword_26AF87C68 = v52;
          word_26AF87C6C = 0;
          *(void *)&xmmword_26AF87C70 = 0;
          *((void *)&xmmword_26AF87C70 + 1) = 0xFFFFFFFFLL;
          qword_26AF87C80 = (uint64_t)v50;
          unk_26AF87C88 = 0;
          qword_26AF87C50 = (uint64_t)&unk_26E6FD728;
          re::IntrospectionRegistry::add(v53, v54);
          re::getPrettyTypeName((re *)&qword_26AF87C50, (const re::IntrospectionBase *)&v68);
          if (BYTE8(v68)) {
            long long v55 = v69;
          }
          else {
            long long v55 = (char *)&v68 + 9;
          }
          if (void)v68 && (BYTE8(v68)) {
            (*(void (**)(void))(*(void *)v68 + 40))();
          }
          long long v67 = *((_OWORD *)v50 + 2);
          int32x4_t v56 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, &v70);
          if (v56)
          {
            uint64_t v57 = *v56;
            *((void *)&v66 + 1) = v57;
          }
          else
          {
            long long v71 = v67;
            re::TypeBuilder::beginListType((uint64_t)&v68, (uint64_t *)&v70, 1, 0x28uLL, 8uLL, &v71);
            re::TypeBuilder::setConstructor((uint64_t)&v68, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v68, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v68, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v68, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v68, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v68, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v68, v58);
          }
          xmmword_26AF87C70 = v66;
          re::StringID::destroyString((re::StringID *)&v70);
        }
      }
      uint64_t v59 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v49 + 32))(v49, 72, 8);
      *(_DWORD *)uint64_t v59 = 1;
      *(void *)(v59 + 8) = "specifyCommands";
      *(void *)(v59 + 16) = &qword_26AF87C50;
      *(void *)(v59 + 24) = 0;
      *(void *)(v59 + 32) = 0x1200000000DLL;
      *(_DWORD *)(v59 + 40) = 0;
      *(void *)(v59 + 48) = 0;
      *(void *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_26AF87E00 = v59;
      int v60 = re::introspectionAllocator((re *)v59);
      uint64_t v62 = re::introspect_BOOL((re *)1, v61);
      uint64_t v63 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v60 + 32))(v60, 72, 8);
      *(_DWORD *)uint64_t v63 = 1;
      *(void *)(v63 + 8) = "forceHidePassthroughFeed";
      *(void *)(v63 + 16) = v62;
      *(void *)(v63 + 24) = 0;
      *(void *)(v63 + 32) = 0x1C00000013;
      *(_DWORD *)(v63 + 40) = 0;
      *(void *)(v63 + 48) = 0;
      *(void *)(v63 + 56) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_26AF87E08 = v63;
      __cxa_guard_release(&qword_26AF87B60);
    }
  }
  *((void *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((void *)this + 8) = &qword_26AF87DA8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraViewDescriptor>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraViewDescriptor>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptor>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptor>;
  re::IntrospectionRegistry::add(this, v3);
  long long v64 = v65;
}

double re::internal::defaultConstruct<re::ecs2::CameraViewDescriptor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = xmmword_23435FBB0;
  *(_WORD *)(a3 + 56) = 1;
  *(_DWORD *)(a3 + 48) = 0;
  *(_DWORD *)(a3 + 52) = 117440767;
  *(unsigned char *)(a3 + 60) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 96) = 0;
  do
  {
    uint64_t v4 = a3 + v3;
    *(void *)(v4 + 144) = 0;
    *(void *)(v4 + 120) = 0;
    *(void *)(v4 + 128) = 0;
    *(void *)(v4 + 112) = 0;
    v3 += 40;
    *(_DWORD *)(v4 + 136) = 0;
  }
  while (v3 != 80);
  double result = 0.0;
  *(_OWORD *)(a3 + 232) = 0u;
  uint64_t v6 = a3 + 232;
  *(unsigned char *)(v6 - 40) = 0;
  *(_OWORD *)(v6 - 20) = xmmword_2343854A0;
  *(_OWORD *)(v6 - 36) = xmmword_2343854A0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_WORD *)(v6 + 48) = 1;
  *(unsigned char *)(v6 + 50) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 72) = 0;
  *(void *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 80) = 0;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::CameraViewDescriptor>(uint64_t a1, uint64_t a2, re::AssetHandle *a3)
{
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)a3 + 288);
  uint64_t v4 = 0;
  uint64_t v5 = (char *)a3 + 272;
  do
  {
    uint64_t v6 = *(void **)&v5[v4];
    if (v6)
    {

      *(void *)&v5[v4] = 0;
    }
    v4 -= 8;
  }
  while (v4 != -16);
  uint64_t v7 = 0;
  uint64_t v8 = (char *)a3 + 256;
  do
  {
    long long v9 = *(void **)&v8[v7];
    if (v9)
    {

      *(void *)&v8[v7] = 0;
    }
    v7 -= 8;
  }
  while (v7 != -16);
  uint64_t v10 = 0;
  uint64_t v11 = (char *)a3 + 240;
  do
  {
    uint64_t v12 = *(void **)&v11[v10];
    if (v12)
    {

      *(void *)&v11[v10] = 0;
    }
    v10 -= 8;
  }
  while (v10 != -16);
  for (uint64_t i = 152; i != 72; i -= 40)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a3 + i);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a3 + 72);
  re::AssetHandle::~AssetHandle(a3);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptor>(uint64_t a1)
{
  uint64_t v1 = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_23435FBB0;
  *(_WORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = 117440767;
  *(unsigned char *)(a1 + 60) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  do
  {
    uint64_t v2 = a1 + v1;
    *(void *)(v2 + 144) = 0;
    *(void *)(v2 + 120) = 0;
    *(void *)(v2 + 128) = 0;
    *(void *)(v2 + 112) = 0;
    v1 += 40;
    *(_DWORD *)(v2 + 136) = 0;
  }
  while (v1 != 80);
  *(_OWORD *)(a1 + 232) = 0u;
  uint64_t result = a1 + 232;
  *(unsigned char *)(result - 40) = 0;
  *(_OWORD *)(result - 20) = xmmword_2343854A0;
  *(_OWORD *)(result - 36) = xmmword_2343854A0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_WORD *)(result + 48) = 1;
  *(unsigned char *)(result + 50) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptor>(re::AssetHandle *a1)
{
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)a1 + 288);
  uint64_t v2 = 0;
  uint64_t v3 = (char *)a1 + 272;
  do
  {
    uint64_t v4 = *(void **)&v3[v2];
    if (v4)
    {

      *(void *)&v3[v2] = 0;
    }
    v2 -= 8;
  }
  while (v2 != -16);
  uint64_t v5 = 0;
  uint64_t v6 = (char *)a1 + 256;
  do
  {
    uint64_t v7 = *(void **)&v6[v5];
    if (v7)
    {

      *(void *)&v6[v5] = 0;
    }
    v5 -= 8;
  }
  while (v5 != -16);
  uint64_t v8 = 0;
  long long v9 = (char *)a1 + 240;
  do
  {
    uint64_t v10 = *(void **)&v9[v8];
    if (v10)
    {

      *(void *)&v9[v8] = 0;
    }
    v8 -= 8;
  }
  while (v8 != -16);
  for (uint64_t i = 152; i != 72; i -= 40)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a1 + i);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)a1 + 72);
  re::AssetHandle::~AssetHandle(a1);
}

void *re::ecs2::allocInfo_CameraViewDescriptorsComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87B80))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87F00, "CameraViewDescriptorsComponent");
    __cxa_guard_release(&qword_26AF87B80);
  }
  return &unk_26AF87F00;
}

void re::ecs2::initInfo_CameraViewDescriptorsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  uint64_t v30 = 0x57901BFF93CFC246;
  v31[0] = "CameraViewDescriptorsComponent";
  re::StringID::destroyString((re::StringID *)&v30);
  *((_OWORD *)this + 2) = v25;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B78, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF87B78);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF87BE0 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_int((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "renderOrder";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF87BE8 = v11;
      uint64_t v12 = (re::ecs2 *)re::introspectionAllocator((re *)v11);
      uint64_t v13 = v12;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87BC8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v12 = (re::ecs2 *)__cxa_guard_acquire(&qword_26AF87BC8);
        if (v12)
        {
          re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_26AF87C90);
          qword_26AF87C90 = (uint64_t)&unk_26E6FD7C0;
          __cxa_guard_release(&qword_26AF87BC8);
        }
      }
      if ((byte_26AF87B45 & 1) == 0)
      {
        char v14 = (void *)qword_26AF87B70;
        if (qword_26AF87B70
          || (char v14 = re::ecs2::allocInfo_CameraViewDescriptor(v12),
              qword_26AF87B70 = (uint64_t)v14,
              re::ecs2::initInfo_CameraViewDescriptor((re::ecs2 *)v14, v15),
              (byte_26AF87B45 & 1) == 0))
        {
          byte_26AF87B45 = 1;
          int v16 = *((_DWORD *)v14 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_26AF87C90, 0);
          qword_26AF87CA0 = 0x2800000003;
          dword_26AF87CA8 = v16;
          word_26AF87CAC = 0;
          *(void *)&xmmword_26AF87CB0 = 0;
          *((void *)&xmmword_26AF87CB0 + 1) = 0xFFFFFFFFLL;
          qword_26AF87CC0 = (uint64_t)v14;
          unk_26AF87CC8 = 0;
          qword_26AF87C90 = (uint64_t)&unk_26E6FD7C0;
          re::IntrospectionRegistry::add(v17, v18);
          re::getPrettyTypeName((re *)&qword_26AF87C90, (const re::IntrospectionBase *)&v30);
          if (v31[0]) {
            unint64_t v19 = (const char *)v31[1];
          }
          else {
            unint64_t v19 = (char *)v31 + 1;
          }
          if (v30 && (v31[0] & 1) != 0) {
            (*(void (**)(void))(*(void *)v30 + 40))();
          }
          long long v27 = *((_OWORD *)v14 + 2);
          uint64_t v20 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_2687A0D30, v28);
          if (v20)
          {
            uint64_t v21 = *v20;
            *((void *)&v26 + 1) = v21;
          }
          else
          {
            long long v29 = v27;
            re::TypeBuilder::beginListType((uint64_t)&v30, v28, 1, 0x28uLL, 8uLL, &v29);
            re::TypeBuilder::setConstructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v30, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v30, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v30, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v30, v22);
          }
          xmmword_26AF87CB0 = v26;
          re::StringID::destroyString((re::StringID *)v28);
        }
      }
      uint64_t v23 = (*(uint64_t (**)(re::ecs2 *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 72, 8);
      *(_DWORD *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = "viewDescriptors";
      *(void *)(v23 + 16) = &qword_26AF87C90;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0xC800000002;
      *(_DWORD *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_26AF87BF0 = v23;
      __cxa_guard_release(&qword_26AF87B78);
    }
  }
  *((void *)this + 2) = 0x17800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF87BE0;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptorsComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v24 = v25;
}

uint64_t re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::CameraViewDescriptorsComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CameraViewDescriptorsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewDescriptorsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewDescriptorsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewDescriptorsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewDescriptorsComponent>, this);
}

void *re::ecs2::allocInfo_CameraViewDescriptorsSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87B88))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87F78, "CameraViewDescriptorsSystem");
    __cxa_guard_release(&qword_26AF87B88);
  }
  return &unk_26AF87F78;
}

void re::ecs2::initInfo_CameraViewDescriptorsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x9886566CB711F92;
  v5[1] = "CameraViewDescriptorsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x1E800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_CameraViewDescriptorsSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CameraViewDescriptorsSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::CameraViewDescriptorsSystem *re::internal::defaultConstruct<re::ecs2::CameraViewDescriptorsSystem>(int a1, int a2, re::ecs2::CameraViewDescriptorsSystem *this)
{
  return re::ecs2::CameraViewDescriptorsSystem::CameraViewDescriptorsSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::CameraViewDescriptorsSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  a3[50] = (uint64_t)&unk_26E6FD558;
  re::FixedArray<CoreIKTransform>::deinit(a3 + 58);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 55);
  re::FixedArray<CoreIKTransform>::deinit(a3 + 52);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::CameraViewDescriptorsSystem>(uint64_t *a1)
{
  a1[50] = (uint64_t)&unk_26E6FD558;
  re::FixedArray<CoreIKTransform>::deinit(a1 + 58);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 55);
  re::FixedArray<CoreIKTransform>::deinit(a1 + 52);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = (uint64_t)&unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_CameraViewDescriptorsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewDescriptorsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewDescriptorsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewDescriptorsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewDescriptorsSystem>, this);
}

void *re::ecs2::allocInfo_TintComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF87B90))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF87FF0, "TintComponent");
    __cxa_guard_release(&qword_26AF87B90);
  }
  return &unk_26AF87FF0;
}

void re::ecs2::initInfo_TintComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v16[0] = 0x790C845E74D08844;
  v16[1] = "TintComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF87B98, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&qword_26AF87B98);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF87BF8 = v7;
      uint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v9 = re::introspect_Vector4F((re::IntrospectionBase **)1);
      uint64_t v10 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v10 = 1;
      *(void *)(v10 + 8) = "tintColor";
      *(void *)(v10 + 16) = v9;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_26AF87C00 = v10;
      uint64_t v11 = re::introspectionAllocator((re *)v10);
      uint64_t v13 = re::introspect_BOOL((re *)1, v12);
      uint64_t v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, 72, 8);
      *(_DWORD *)uint64_t v14 = 1;
      *(void *)(v14 + 8) = "tintVirtualObject";
      *(void *)(v14 + 16) = v13;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0x3000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(void *)(v14 + 48) = 0;
      *(void *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_26AF87C08 = v14;
      __cxa_guard_release(&qword_26AF87B98);
    }
  }
  *((void *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((void *)this + 8) = &qword_26AF87BF8;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::TintComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::TintComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::TintComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::TintComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v15 = v17;
}

void re::internal::defaultConstruct<re::ecs2::TintComponent>(int a1, int a2, ArcSharedObject *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6F4060;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::TintComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::TintComponent>(ArcSharedObject *a1)
{
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6F4060;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::TintComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_TintComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"TintComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_TintComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_TintComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::TintComponent>, this);
}

uint64_t re::ecs2::SpecifyLaneCommand::SpecifyLaneCommand(uint64_t a1, void **a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 80) = -1;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 88 + 8 * a3), a2);
  return a1;
}

void re::ecs2::CameraViewDescriptor::updateWithSettings(__n128 *this, const re::RuntimeRenderGraphDataStruct *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableAA", a2, v31);
  if (v31[0]) {
    this[1].n128_u8[8] = v31[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("enableFrustumCulling", a2, v30);
  if (v30[0]) {
    this[17].n128_u8[8] = v30[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("enableUnwarp", a2, v29);
  if (v29[0]) {
    this[1].n128_u8[10] = v29[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableTonemapping", a2, v28);
  if (v28[0]) {
    this[1].n128_u8[9] = v28[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableDebugDraw", a2, v27);
  if (v27[0]) {
    this[1].n128_u8[11] = v27[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("forceHidePassthroughFeed", a2, v26);
  if (v26[0]) {
    this[1].n128_u8[12] = v26[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("disableSceneRenderGraphFileProviders", a2, v25);
  if (v25[0]) {
    this[1].n128_u8[13] = v25[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>("loadColor", a2, v24);
  if (v24[0]) {
    this[1].n128_u8[14] = v24[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<re::Vector4<float>>("clearColor", a2, v23);
  if (v23[0].n128_u8[0]) {
    this[2] = v23[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<float>("clearDepth", a2, (uint64_t)v21);
  if (v21[0]) {
    this[3].n128_u32[0] = v22;
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned char>(v20, a2, "stencilMask");
  if (v20[0]) {
    this[3].n128_u8[4] = v20[1];
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned char>(v19, a2, "stencilReference");
  if (v19[0]) {
    this[3].n128_u8[5] = v19[1];
  }
  uint64_t v4 = *((void *)a2 + 5);
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = (uint64_t *)*((void *)a2 + 7);
  uint64_t v6 = 8 * v4;
  while (1)
  {
    uint64_t v7 = *v5;
    if (!strcmp(*(const char **)(*v5 + 8), "stencilOperation")) {
      break;
    }
    ++v5;
    v6 -= 8;
    if (!v6) {
      goto LABEL_32;
    }
  }
  {
    re::introspect<re::mtl::StencilOperation>(void)::info = re::mtl::introspect_StencilOperation(0, v17);
  }
  if (re::introspect<re::mtl::StencilOperation>(void)::info == *(_UNKNOWN **)(v7 + 16))
  {
    unint64_t v13 = *(int *)(v7 + 36);
    unint64_t v8 = *((void *)a2 + 10);
    if (v8 <= v13) {
      goto LABEL_52;
    }
    unint64_t v8 = 0;
    int v15 = *(unsigned __int8 *)(*((void *)a2 + 12) + v13);
    int v16 = this[3].n128_u8[6];
    this[3].n128_u8[6] = v15;
    if (v16 != v15) {
      goto LABEL_35;
    }
  }
  else
  {
LABEL_32:
    unint64_t v8 = 1;
  }
  re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned int>("stencilOperationUint", a2, (uint64_t)&v41);
  if ((_BYTE)v41) {
    this[3].n128_u8[6] = BYTE4(v41);
  }
LABEL_35:
  uint64_t v9 = *((void *)a2 + 5);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)*((void *)a2 + 7);
    uint64_t v11 = 8 * v9;
    while (1)
    {
      uint64_t v12 = *v10;
      if (!strcmp(*(const char **)(*v10 + 8), "stencilCompare")) {
        break;
      }
      ++v10;
      v11 -= 8;
      if (!v11) {
        goto LABEL_45;
      }
    }
    if ((v9 & 1) == 0
    {
      re::introspect<re::mtl::CompareFunction>(void)::info = re::mtl::introspect_CompareFunction(0, v18);
    }
    if (re::introspect<re::mtl::CompareFunction>(void)::info == *(_UNKNOWN **)(v12 + 16))
    {
      unint64_t v13 = *(int *)(v12 + 36);
      unint64_t v14 = *((void *)a2 + 10);
      if (v14 > v13)
      {
        LOBYTE(v9) = *(unsigned char *)(*((void *)a2 + 12) + v13);
        goto LABEL_45;
      }
      uint64_t v32 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v33 = 136315906;
      long long v34 = "operator[]";
      __int16 v35 = 1024;
      int v36 = 797;
      __int16 v37 = 2048;
      unint64_t v38 = v13;
      __int16 v39 = 2048;
      unint64_t v40 = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      uint64_t v32 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v33 = 136315906;
      long long v34 = "operator[]";
      __int16 v35 = 1024;
      int v36 = 797;
      __int16 v37 = 2048;
      unint64_t v38 = v13;
      __int16 v39 = 2048;
      unint64_t v40 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_45:
  if ((v8 & 1) == 0) {
    this[3].n128_u8[7] = v9;
  }
}

void re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned char>(unsigned char *a1, void *a2, char *__s2)
{
  uint64_t v4 = a2[5];
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v7 = (uint64_t *)a2[7];
  uint64_t v8 = 8 * v4;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      goto LABEL_8;
    }
  }
  {
    re::introspect<unsigned char>(void)::info = re::introspect_uint8_t(0, v12);
  }
  if (re::introspect<unsigned char>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v10 = *(int *)(v9 + 36);
    if (a2[10] <= v10)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = a2[12];
    *a1 = 1;
    a1[1] = *(unsigned char *)(v11 + v10);
  }
  else
  {
LABEL_8:
    *a1 = 0;
  }
}

void re::RuntimeRenderGraphDataStruct::getValueOfType<unsigned int>(char *__s2@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[5];
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v7 = (uint64_t *)a2[7];
  uint64_t v8 = 8 * v4;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      goto LABEL_8;
    }
  }
  {
    re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v12);
  }
  if (re::introspect<unsigned int>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v10 = *(int *)(v9 + 36);
    if (a2[10] <= v10)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = a2[12];
    *(unsigned char *)a3 = 1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(v11 + v10);
  }
  else
  {
LABEL_8:
    *(unsigned char *)a3 = 0;
  }
}

uint64_t re::ecs2::CameraViewDescriptor::tryGetSpecifyByLane(re::ecs2::CameraViewDescriptor *this, const char *__s2)
{
  uint64_t v2 = *((void *)this + 38);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 40);
  uint64_t v5 = 136 * v2;
  while (1)
  {
    uint64_t v6 = (*(void *)(v4 + 8) & 1) != 0 ? *(const char **)(v4 + 16) : (const char *)(v4 + 9);
    if (!strcmp(v6, __s2)) {
      break;
    }
    v4 += 136;
    v5 -= 136;
    if (!v5) {
      return 0;
    }
  }
  return v4;
}

BOOL re::ecs2::CameraViewDescriptor::operator==(float32x4_t *a1, float32x4_t *a2)
{
  if (a1[1].u8[8] != a2[1].u8[8]
    || a1[1].u8[9] != a2[1].u8[9]
    || a1[1].u8[10] != a2[1].u8[10]
    || a1[1].u8[11] != a2[1].u8[11]
    || a1[1].u8[13] != a2[1].u8[13]
    || a1[17].u8[8] != a2[17].u8[8]
    || a1[1].u8[12] != a2[1].u8[12]
    || a1[1].u8[14] != a2[1].u8[14]
    || a1[17].u8[9] != a2[17].u8[9]
    || a1[17].u8[10] != a2[17].u8[10]
    || a1[1].u8[15] != a2[1].u8[15]
    || (vminvq_u32((uint32x4_t)vceqq_f32(a1[2], a2[2])) & 0x80000000) == 0
    || a1[3].f32[0] != a2[3].f32[0]
    || a1[3].u8[4] != a2[3].u8[4]
    || a1[3].u8[5] != a2[3].u8[5]
    || a1[3].u8[6] != a2[3].u8[6]
    || a1[3].u8[7] != a2[3].u8[7])
  {
    return 0;
  }
  BOOL result = re::MeshLodSelectOverrideOptions::operator==(&a1[3].f32[2], &a2[3].f32[2]);
  if (!result) {
    return result;
  }
  if (a1[12].u8[0] != a2[12].u8[0]) {
    return 0;
  }
  if (!re::DynamicArray<re::ecs2::ScopeLanePair>::operator==((uint64_t)&a1[4].i64[1], a2[5].i64[1], a2[6].i64[1])) {
    return 1;
  }
  char v3 = 0;
  uint64_t v4 = 0;
  do
  {
    BOOL result = re::DynamicArray<re::ecs2::ScopeLanePair>::operator==((uint64_t)&a1[7] + 40 * v4, a2[8].i64[5 * v4], a2[9].i64[5 * v4]);
    if (v3) {
      break;
    }
    char v3 = 1;
    uint64_t v4 = 1;
  }
  while (result);
  return result;
}

BOOL re::MeshLodSelectOverrideOptions::operator==(float *a1, float *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)a2 + 1);
  if (*((unsigned char *)a1 + 1)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (*((unsigned __int8 *)a1 + 2) == *((unsigned __int8 *)a2 + 2)) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v2 | *((unsigned __int8 *)a1 + 1)) {
    return 0;
  }
LABEL_11:
  BOOL v4 = (*((unsigned __int8 *)a2 + 4) | *((unsigned __int8 *)a1 + 4)) == 0;
  if (*((unsigned char *)a1 + 4) && *((unsigned char *)a2 + 4)) {
    return a1[2] == a2[2];
  }
  return v4;
}

BOOL re::DynamicArray<re::ecs2::ScopeLanePair>::operator==(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) != a2) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + (a2 << 6);
  while (1)
  {
    BOOL result = re::DynamicString::operator==(v4, a3);
    if (!result) {
      break;
    }
    uint64_t v7 = v4 + 32;
    uint64_t v8 = a3 + 32;
    BOOL result = re::DynamicString::operator==(v7, v8);
    if (!result) {
      break;
    }
    uint64_t v4 = v7 + 32;
    a3 = v8 + 32;
    if (v4 == v5) {
      return 1;
    }
  }
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex(unint64_t this)
{
  if (this < 0x10000) {
    return 0;
  }
  if (!(this >> 17)) {
    return 1;
  }
  if (this >> 16 <= 2) {
    return 2;
  }
  re::internal::assertLog((re::internal *)4, this, "assertion failure: '%s' (%s:line %i) Invalid handle passed", "!\"Unreachable code\"", "handleToTypeAndIndex", 285, v1, v2);
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

re::ecs2::CameraViewDescriptor *re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(_anonymous_namespace_ *this, re::ecs2::CameraViewDescriptor *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::ecs2::CameraViewDescriptor::CameraViewDescriptor((re::ecs2::CameraViewDescriptor *)(*((void *)this + 4) + 336 * v4), a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::add(uint64_t a1, re::ecs2::CameraViewDescriptor *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  if (v5 >= v4)
  {
    unint64_t v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(void *)a1)
      {
        uint64_t v7 = 2 * v4;
        BOOL v8 = v4 == 0;
        unint64_t v9 = 8;
        if (!v8) {
          unint64_t v9 = v7;
        }
        if (v9 <= v6) {
          unint64_t v10 = v6;
        }
        else {
          unint64_t v10 = v9;
        }
        re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity((void *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity((void *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    unint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v11 = re::ecs2::CameraViewDescriptor::CameraViewDescriptor((re::ecs2::CameraViewDescriptor *)(*(void *)(a1 + 32) + 384 * v5), a2);
  *((void *)v11 + 45) = *((void *)a2 + 45);
  *((void *)v11 + 46) = 0;
  uint64_t result = re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>((uint64_t)v11 + 336, (uint64_t)a2 + 336);
  ++*(void *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ecs2::CameraViewDescriptorsComponent::clearSpecifyCommands(re::ecs2::CameraViewDescriptorsComponent *this, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  if (ViewDescriptor)
  {
    uint64_t v3 = ViewDescriptor + 288;
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::clear(v3);
  }
  else
  {
    unint64_t v4 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl(&dword_233120000, v4, OS_LOG_TYPE_DEFAULT, "View descriptor not found (invalid handle)", v5, 2u);
    }
  }
}

void re::DynamicArray<re::ecs2::SpecifyLaneCommand>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(re::DynamicString **)(a1 + 32);
    unint64_t v4 = (re::DynamicString *)((char *)v3 + 136 * v2);
    do
    {
      for (uint64_t i = 112; i != 96; i -= 8)
      {
        unint64_t v6 = *(void **)((char *)v3 + i);
        if (v6)
        {

          *(void *)((char *)v3 + i) = 0;
        }
      }
      do
      {
        uint64_t v7 = *(void **)((char *)v3 + i);
        if (v7)
        {

          *(void *)((char *)v3 + i) = 0;
        }
        i -= 8;
      }
      while (i != 80);
      for (uint64_t j = 56; j != 8; j -= 24)
        re::AssetHandle::~AssetHandle((re::DynamicString *)((char *)v3 + j));
      re::DynamicString::deinit(v3);
      uint64_t v3 = (re::DynamicString *)((char *)v3 + 136);
    }
    while (v3 != v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(re::ecs2::CameraViewDescriptorsComponent *a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(a1, a2);
  if (!ViewDescriptor)
  {
    unint64_t v9 = *re::graphicsLogObjects(0);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    LOWORD(v28[0]) = 0;
    uint64_t v12 = "View descriptor not found (invalid handle)";
LABEL_33:
    uint64_t v23 = v9;
    uint32_t v24 = 2;
    goto LABEL_34;
  }
  uint64_t v6 = ViewDescriptor;
  uint64_t v7 = (re *)re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
  BOOL v8 = *(_DWORD *)(a3 + 80) == -1 && *(_DWORD *)(a3 + 84) == -1;
  if (*(void *)(a3 + 40)) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = *(void *)(a3 + 64) == 0;
  }
  if (*(void *)(a3 + 88)) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = *(void *)(a3 + 96) == 0;
  }
  if (*(void *)(a3 + 104))
  {
    BOOL v15 = 0;
    if (v7) {
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v15 = *(void *)(a3 + 112) == 0;
    if (v7) {
      goto LABEL_17;
    }
  }
  if (!v8)
  {
    unint64_t v9 = *re::graphicsLogObjects(v7);
    BOOL v25 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v25) {
      return result;
    }
    LOWORD(v28[0]) = 0;
    uint64_t v12 = "For serialized view descriptor layerHandle must be kInvalidRenderLayerHandle";
    goto LABEL_33;
  }
  if (!v14)
  {
    unint64_t v9 = *re::graphicsLogObjects(v7);
    BOOL v26 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v26) {
      return result;
    }
    LOWORD(v28[0]) = 0;
    uint64_t v12 = "For serialized view descriptor textures must not be set";
    goto LABEL_33;
  }
  if (!v15)
  {
    unint64_t v9 = *re::graphicsLogObjects(v7);
    BOOL v27 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v27) {
      return result;
    }
    LOWORD(v28[0]) = 0;
    uint64_t v12 = "For serialized view descriptor texture descriptors must not be set";
    goto LABEL_33;
  }
  if (v13)
  {
    unint64_t v9 = *re::graphicsLogObjects(v7);
    BOOL v20 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v20) {
      return result;
    }
    LOWORD(v28[0]) = 0;
    uint64_t v12 = "For serialized view descriptor renderTarget must not be null";
    goto LABEL_33;
  }
LABEL_17:
  int v16 = !v8;
  int v17 = !v13;
  int v18 = !v14;
  int v19 = !v15;
  if (!v13 + !v8 + !v14 + !v15 == 1)
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::add((_anonymous_namespace_ *)(v6 + 288), a3);
    return 1;
  }
  uint64_t v21 = *re::graphicsLogObjects(v7);
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v22)
  {
    v28[0] = 67109888;
    v28[1] = v16;
    __int16 v29 = 1024;
    int v30 = v18;
    __int16 v31 = 1024;
    int v32 = v19;
    __int16 v33 = 1024;
    int v34 = v17;
    uint64_t v12 = "Exactly one set of properties on a specify command must be valid. Validity: Layer handles=%d, textures=%d, des"
          "criptors=%d, render targets=%d";
    uint64_t v23 = v21;
    uint32_t v24 = 26;
LABEL_34:
    _os_log_impl(&dword_233120000, v23, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)v28, v24);
    return 0;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::SpecifyLaneCommand>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v5 = *((void *)result + 1);
  unint64_t v4 = *((void *)result + 2);
  if (v4 >= v5)
  {
    unint64_t v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(void *)result)
      {
        unint64_t v7 = 2 * v5;
        if (!v5) {
          unint64_t v7 = 8;
        }
        if (v7 <= v6) {
          unint64_t v8 = v6;
        }
        else {
          unint64_t v8 = v7;
        }
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(result, v8);
      }
      else
      {
        uint64_t result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    unint64_t v4 = *((void *)v3 + 2);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *((void *)v3 + 4);
  uint64_t v11 = v10 + 136 * v4;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 24) = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)uint64_t v11 = *(void *)a2;
  *(void *)a2 = 0;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  uint64_t v15 = *(void *)(v11 + 8);
  uint64_t v14 = *(void *)(v11 + 16);
  *(void *)(v11 + 8) = v12;
  *(void *)(v11 + 16) = v13;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v14;
  do
  {
    int v16 = (void *)(v11 + v9);
    int v17 = (void *)(a2 + v9);
    v16[4] = 0;
    v16[5] = 0;
    v16[6] = 0;
    v16[5] = *(void *)(a2 + v9 + 40);
    v17[5] = 0;
    uint64_t v18 = *(void *)(v11 + v9 + 32);
    v16[4] = 0;
    v16[4] = *(void *)(a2 + v9 + 32);
    v17[4] = v18;
    uint64_t v19 = *(void *)(v11 + v9 + 48);
    v16[6] = *(void *)(a2 + v9 + 48);
    v17[6] = v19;
    v9 += 24;
  }
  while (v9 != 48);
  uint64_t v20 = 0;
  uint64_t v21 = v10 + 136 * v4;
  *(void *)(v21 + 80) = *(void *)(a2 + 80);
  uint64_t v22 = v21 + 88;
  uint64_t v23 = a2 + 88;
  do
  {
    *(void *)(v22 + v20) = *(void *)(v23 + v20);
    *(void *)(v23 + v20) = 0;
    v20 += 8;
  }
  while (v20 != 16);
  uint64_t v24 = 0;
  uint64_t v25 = a2 + 104;
  do
  {
    *(void *)(v10 + 136 * v4 + 104 + v24) = *(void *)(v25 + v24);
    *(void *)(v25 + v24) = 0;
    v24 += 8;
  }
  while (v24 != 16);
  uint64_t v26 = v10 + 136 * v4;
  uint64_t v27 = *(void *)(a2 + 120);
  *(_DWORD *)(v26 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(v26 + 120) = v27;
  ++*((void *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(re::ecs2::CameraViewDescriptorsComponent *this, re::ecs2::CameraViewDescriptorsComponent *a2)
{
  int v3 = re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
  if (v3 == 2)
  {
    if (v4 < *((void *)this + 37))
    {
      uint64_t v5 = *((void *)this + 39);
      uint64_t v6 = 384;
      return v5 + v4 * v6;
    }
  }
  else if (v3 == 1)
  {
    if (v4 < *((void *)this + 32))
    {
      uint64_t v5 = *((void *)this + 34);
      goto LABEL_10;
    }
  }
  else if (!v3 && v4 < *((void *)this + 27))
  {
    uint64_t v5 = *((void *)this + 29);
LABEL_10:
    uint64_t v6 = 336;
    return v5 + v4 * v6;
  }
  return 0;
}

uint64_t *re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t result = re::ecs2::CameraViewDescriptor::CameraViewDescriptor((uint64_t *)(*((void *)this + 4) + 336 * v4), a2);
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

re::DynamicString *re::ecs2::CameraViewDescriptorsComponent::viewScopeNameFromCache@<X0>(re::ecs2::CameraViewDescriptorsComponent *this@<X0>, re::ecs2::CameraViewDescriptorsComponent *a2@<X1>, uint64_t a3@<X2>, re::DynamicString *a4@<X8>)
{
  uint64_t v8 = re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
  unint64_t v10 = v9;
  uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  if (!ViewDescriptor || (unsigned int v12 = *(unsigned __int8 *)(ViewDescriptor + 192), *(unsigned char *)(ViewDescriptor + 192)))
  {
    if (a3) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = 1;
    }
  }
  unint64_t v13 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v12) ^ ((0xBF58476D1CE4E5B9 * v12) >> 27));
  unint64_t v14 = 0xBF58476D1CE4E5B9 * ((int)v8 ^ ((unint64_t)(int)v8 >> 30));
  unint64_t v15 = ((v10 << 6)
       + (v10 >> 2)
       - 0x61C8864680B583E9
       + ((((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31))
         + ((v13 ^ (v13 >> 31)) << 6)
         + ((v13 ^ (v13 >> 31)) >> 2)
         - 0x61C8864680B583E9) ^ v13 ^ (v13 >> 31))) ^ v10;
  unint64_t v16 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
  unint64_t v17 = v16 ^ (v16 >> 31);
  if (!*((void *)this + 41)) {
    goto LABEL_8;
  }
  uint64_t v18 = *(unsigned int *)(*((void *)this + 42) + 4 * (v17 % *((unsigned int *)this + 88)));
  if (v18 == 0x7FFFFFFF) {
    goto LABEL_8;
  }
  uint64_t v29 = *((void *)this + 43);
  if (*(void *)(v29 + 56 * v18 + 16) != v15)
  {
    while (1)
    {
      LODWORD(v18) = *(_DWORD *)(v29 + 56 * v18 + 8) & 0x7FFFFFFF;
      if (v18 == 0x7FFFFFFF) {
        break;
      }
      if (*(void *)(v29 + 56 * v18 + 16) == v15) {
        goto LABEL_25;
      }
    }
LABEL_8:
    uint64_t v19 = *((void *)this + 2);
    if (**(unsigned char **)(v19 + 280)) {
      uint64_t v20 = *(const char **)(v19 + 280);
    }
    else {
      uint64_t v20 = "Camera";
    }
    uint64_t v21 = "Right";
    if (!a3) {
      uint64_t v21 = "Left";
    }
    if (v12) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = "Mono";
    }
    uint64_t v23 = (re::DynamicString *)(*(uint64_t (**)(re::ecs2::CameraViewDescriptorsComponent *))(*(void *)this + 24))(this);
    re::DynamicString::format(v23, (re::Allocator *)"%s_%d_%zu_%llX_%s", a4, v20, v8, v10, *(void *)(v19 + 296), v22);
    if (*((void *)this + 41))
    {
      unint64_t v24 = v17 % *((unsigned int *)this + 88);
      uint64_t v25 = *(unsigned int *)(*((void *)this + 42) + 4 * v24);
      if (v25 != 0x7FFFFFFF)
      {
        uint64_t v26 = *((void *)this + 43);
        if (*(void *)(v26 + 56 * v25 + 16) == v15)
        {
LABEL_21:
          uint64_t v27 = 56 * v25;
          re::DynamicString::deinit((re::DynamicString *)(v26 + 56 * v25 + 24));
          uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(*((void *)this + 43) + v27 + 24), a4);
LABEL_35:
          ++*((_DWORD *)this + 92);
          return result;
        }
        while (1)
        {
          uint64_t v25 = *(_DWORD *)(v26 + 56 * v25 + 8) & 0x7FFFFFFF;
          if (v25 == 0x7FFFFFFF) {
            break;
          }
          if (*(void *)(v26 + 56 * v25 + 16) == v15) {
            goto LABEL_21;
          }
        }
      }
    }
    else
    {
      LODWORD(v24) = 0;
    }
    uint64_t v30 = *((unsigned int *)this + 91);
    if (v30 == 0x7FFFFFFF)
    {
      uint64_t v30 = *((unsigned int *)this + 90);
      int v31 = v30;
      if (v30 == *((_DWORD *)this + 88))
      {
        re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity((uint64_t)this + 328, 2 * *((_DWORD *)this + 89));
        LODWORD(v24) = v17 % *((unsigned int *)this + 88);
        int v31 = *((_DWORD *)this + 90);
      }
      *((_DWORD *)this + 90) = v31 + 1;
      uint64_t v32 = *((void *)this + 43);
      int v33 = *(_DWORD *)(v32 + 56 * v30 + 8);
    }
    else
    {
      uint64_t v32 = *((void *)this + 43);
      int v33 = *(_DWORD *)(v32 + 56 * v30 + 8);
      *((_DWORD *)this + 91) = v33 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v32 + 56 * v30 + 8) = v33 | 0x80000000;
    *(_DWORD *)(*((void *)this + 43) + 56 * v30 + 8) = *(_DWORD *)(*((void *)this + 43) + 56 * v30 + 8) & 0x80000000 | *(_DWORD *)(*((void *)this + 42) + 4 * v24);
    *(void *)(*((void *)this + 43) + 56 * v30) = v17;
    *(void *)(*((void *)this + 43) + 56 * v30 + 16) = v15;
    uint64_t result = re::DynamicString::DynamicString((re::DynamicString *)(*((void *)this + 43) + 56 * v30 + 24), a4);
    *(_DWORD *)(*((void *)this + 42) + 4 * v24) = v30;
    ++*((_DWORD *)this + 89);
    goto LABEL_35;
  }
LABEL_25:
  return re::DynamicString::DynamicString(a4, (const re::DynamicString *)(v29 + 56 * v18 + 24));
}

re::DynamicString *re::ecs2::CameraViewDescriptorsComponent::viewScopeName@<X0>(re::ecs2::CameraViewDescriptorsComponent *this@<X0>, re::ecs2::CameraViewDescriptorsComponent *a2@<X1>, re::ecs2::Entity *a3@<X3>, re::Allocator *a4@<X4>, uint64_t a5@<X2>, re::DynamicString *a6@<X8>)
{
  if (*((void *)this + 2))
  {
    return re::ecs2::CameraViewDescriptorsComponent::viewScopeNameFromCache(this, a2, a5, a6);
  }
  else
  {
    if (**((unsigned char **)a3 + 35)) {
      unint64_t v13 = (const char *)*((void *)a3 + 35);
    }
    else {
      unint64_t v13 = "Camera";
    }
    uint64_t v14 = re::ecs2::CameraViewDescriptorsComponent::handleToTypeAndIndex((unint64_t)a2);
    re::DynamicString::format(a4, (re::Allocator *)"%d_%zu_%llu", (re::DynamicString *)&v19, v14, v15, *((void *)a3 + 37));
    uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
    if (ViewDescriptor && !*(unsigned char *)(ViewDescriptor + 192))
    {
      if (v20) {
        unint64_t v17 = v22;
      }
      else {
        unint64_t v17 = v21;
      }
      uint64_t v18 = "_Mono";
    }
    else
    {
      unint64_t v17 = v22;
      if ((v20 & 1) == 0) {
        unint64_t v17 = v21;
      }
      if (a5) {
        uint64_t v18 = "_Right";
      }
      else {
        uint64_t v18 = "_Left";
      }
    }
    re::DynamicString::format(a4, (re::Allocator *)"%s_%s%s", a6, v13, v17, v18);
    uint64_t result = (re::DynamicString *)v19;
    if (v19 && (v20 & 1) != 0) {
      return (re::DynamicString *)(*(uint64_t (**)(void))(*(void *)v19 + 40))();
    }
  }
  return result;
}

re::ecs2::CameraViewDescriptorsComponentStateImpl *re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewDescriptorsComponentStateImpl(re::ecs2::CameraViewDescriptorsComponentStateImpl *this, re::ecs2::CameraViewDescriptorsSystem *a2)
{
  __src[5] = *MEMORY[0x263EF8340];
  *(void *)this = &unk_26E6FD558;
  *((void *)this + 1) = a2;
  int v3 = (re::ecs2::CameraViewDescriptorsComponentStateImpl *)((char *)this + 40);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  *((_OWORD *)this + 1) = 0u;
  __src[0] = re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  __src[1] = re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  __src[2] = re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void __src[3] = re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  __src[4] = re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v13[0] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v13[1] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  void v13[2] = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v8 = __src;
  uint64_t v9 = 5;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::CameraViewDescriptorsComponentStateImpl *)((char *)this + 16), (uint64_t)&v8);
  uint64_t v8 = v13;
  uint64_t v9 = 3;
  unint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v3, (uint64_t)&v8);
  uint64_t v12 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v11 = 0;
  re::DynamicArray<float *>::setCapacity(&v8, 5uLL);
  ++v11;
  re::DynamicArray<char const*>::copy(&v8, 0, (char *)__src, 5);
  for (uint64_t i = 0; i != 3; ++i)
  {
    v7[0] = v13[i];
    re::DynamicArray<re::TransitionCondition *>::add(&v8, v7);
  }
  v7[0] = v12;
  v7[1] = v10;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::CameraViewDescriptorsComponentStateImpl *)((char *)this + 64), (uint64_t)v7);
  if (v8 && v12) {
    (*(void (**)(void))(*v8 + 40))();
  }
  return this;
}

uint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::didDependentComponentChange(uint64_t a1, uint64_t a2, void *a3, const re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v8 = (re::ecs2::EntityComponentCollection *)(a3 + 4);
  uint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v10 = (re::ecs2::Component *)result;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  if (v12)
  {
    uint64_t v13 = 8 * v12;
    uint64_t v14 = *(void ***)(a1 + 32);
    while (*v14 != a4)
    {
      ++v14;
      v13 -= 8;
      if (!v13)
      {
        uint64_t v14 = (void **)(v11 + 8 * v12);
        break;
      }
    }
  }
  else
  {
    uint64_t v14 = *(void ***)(a1 + 32);
  }
  if (v12 == ((uint64_t)v14 - v11) >> 3)
  {
    BOOL v15 = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType != (_UNKNOWN *)a4
       || *(unsigned char *)(re::ecs2::EntityComponentCollection::get(v8, a4) + 40) != 0;
    int v21 = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
       || v15;
    return re::ecs2::CameraViewDescriptorsComponentStateImpl::hierarchicallyDirtyEntities(a3, (uint64_t)a4, v21, a2);
  }
  else if (result)
  {
    uint64_t v16 = 24;
    unint64_t v17 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(void *)(a2 + v16), v10);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v22 = v18;
        unint64_t v17 = v19;
        goto LABEL_27;
      }
      v16 += 8;
    }
    while (v16 != 56);
    unint64_t v22 = -1;
LABEL_27:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(a2, v22, v17);
  }
  return result;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(void *)(a1 + 24));
  if (result != a2 || v7 != a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
  {
    uint64_t v10 = *(uint64_t (**)(void))(**(void **)(*(void *)a1 + 224) + 16);
    return v10();
  }
  return result;
}

unint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::hierarchicallyDirtyEntities(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (a3)
  {
    uint64_t v9 = (re::ecs2::Component *)result;
    if (result)
    {
      uint64_t v10 = 24;
      unint64_t v11 = 0xFFFFFFFFLL;
      do
      {
        unint64_t v12 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a4 + 16), *(void *)(a4 + v10), v9);
        if (v12 != -1 && (v13 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v15 = v12;
          unint64_t v11 = v13;
          goto LABEL_11;
        }
        v10 += 8;
      }
      while (v10 != 56);
      unint64_t v15 = -1;
LABEL_11:
      unint64_t result = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(a4, v15, v11);
    }
  }
  uint64_t v16 = a1[41];
  if (v16)
  {
    unint64_t v17 = (unint64_t *)a1[43];
    unint64_t v18 = &v17[v16];
    int8x16_t v19 = (int8x16_t)xmmword_23436BBD0;
    do
    {
      unint64_t result = *v17;
      uint64_t v20 = *(unsigned __int16 *)(*v17 + 82);
      if (*(_WORD *)(*v17 + 82))
      {
        int v21 = (const __int16 *)(a2 + 16);
        unint64_t v22 = *(int16x8_t **)(result + 88);
        int16x8_t v23 = vld1q_dup_s16(v21);
        int v24 = 1;
        while (1)
        {
          uint16x8_t v25 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v23, *v22), v19);
          v25.i16[0] = vmaxvq_u16(v25);
          if (v25.i32[0]) {
            break;
          }
          v24 -= 8;
          ++v22;
          if (!--v20) {
            goto LABEL_20;
          }
        }
        if (v25.u16[0] - v24 < *(unsigned __int16 *)(result + 80)) {
          break;
        }
      }
LABEL_20:
      unint64_t result = re::ecs2::CameraViewDescriptorsComponentStateImpl::hierarchicallyDirtyEntities();
      int8x16_t v19 = (int8x16_t)xmmword_23436BBD0;
      ++v17;
    }
    while (v17 != v18);
  }
  return result;
}

uint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a3 + 8) + 56) + 32))(*(void *)(*(void *)(a3 + 8) + 56));
  uint64_t v10 = re::ServiceLocator::serviceOrNull<re::ecs2::RenderOptionsService>(v9);
  if (v10)
  {
    v79[0] = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v80, a5, 0);
    unint64_t v12 = v80;
    unint64_t v11 = (char *)v81;
    unint64_t v80 = a4;
    unint64_t v81 = v12;
    unint64_t v82 = v11;
    if (v12 != a5
      || ((uint64_t v13 = (unsigned __int16)v11, v14 = v11 & 0xFFFF0000, v13 == 0xFFFF)
        ? (BOOL v15 = v14 == 4294901760)
        : (BOOL v15 = 0),
          !v15))
    {
      do
      {
        uint64_t v41 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v81);
        uint64_t v42 = *(void *)v41;
        unint64_t v43 = *(void *)(*(void *)v41 + 16);
        if (*(unsigned char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)v79, v43)
          && (uint64_t v44 = *(unsigned __int16 *)(v43 + 82), *(_WORD *)(v43 + 82)))
        {
          long long v45 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          int16x8_t v46 = vld1q_dup_s16(v45);
          uint64_t v47 = *(int16x8_t **)(v43 + 88);
          int v48 = 1;
          long long v49 = v47;
          uint64_t v50 = *(unsigned __int16 *)(v43 + 82);
          while (1)
          {
            uint16x8_t v51 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v46, *v49), (int8x16_t)xmmword_23436BBD0);
            v51.i16[0] = vmaxvq_u16(v51);
            if (v51.i32[0]) {
              break;
            }
            v48 -= 8;
            ++v49;
            if (!--v50) {
              goto LABEL_39;
            }
          }
          if (v51.u16[0] - v48 < *(unsigned __int16 *)(v43 + 80)) {
            goto LABEL_49;
          }
LABEL_39:
          int v52 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          int16x8_t v53 = vld1q_dup_s16(v52);
          int v54 = 1;
          long long v55 = *(int16x8_t **)(v43 + 88);
          uint64_t v56 = *(unsigned __int16 *)(v43 + 82);
          while (1)
          {
            uint16x8_t v57 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v53, *v55), (int8x16_t)xmmword_23436BBD0);
            v57.i16[0] = vmaxvq_u16(v57);
            if (v57.i32[0]) {
              break;
            }
            v54 -= 8;
            ++v55;
            if (!--v56) {
              goto LABEL_44;
            }
          }
          if (v57.u16[0] - v54 < *(unsigned __int16 *)(v43 + 80)) {
            goto LABEL_49;
          }
LABEL_44:
          uint64_t v58 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          int16x8_t v59 = vld1q_dup_s16(v58);
          int v60 = 1;
          while (1)
          {
            uint16x8_t v61 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v59, *v47), (int8x16_t)xmmword_23436BBD0);
            v61.i16[0] = vmaxvq_u16(v61);
            if (v61.i32[0]) {
              break;
            }
            v60 -= 8;
            ++v47;
            if (!--v44) {
              goto LABEL_57;
            }
          }
          if (v61.u16[0] - v60 >= *(unsigned __int16 *)(v43 + 80)) {
            goto LABEL_57;
          }
LABEL_49:
          id WeakRetained = objc_loadWeakRetained((id *)(v42 + 32));
          uint64_t v63 = WeakRetained;
          if (WeakRetained) {
            uint64_t v64 = (uint64_t)WeakRetained - 8;
          }
          else {
            uint64_t v64 = 0;
          }
          uint64_t v32 = *(unsigned __int16 *)(v43 + 82);
          if (*(_WORD *)(v43 + 82))
          {
            long long v65 = (re::ecs2::EntityComponentCollection *)(v43 + 32);
            long long v66 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            int v31 = *(int16x8_t **)(v43 + 88);
            int16x8_t v67 = vld1q_dup_s16(v66);
            int v68 = 1;
            unint64_t v69 = v31;
            uint64_t v70 = *(unsigned __int16 *)(v43 + 82);
            while (1)
            {
              uint16x8_t v71 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v67, *v69), (int8x16_t)xmmword_23436BBD0);
              v71.i16[0] = vmaxvq_u16(v71);
              if (v71.i32[0]) {
                break;
              }
              v68 -= 8;
              ++v69;
              if (!--v70) {
                goto LABEL_10;
              }
            }
            if (v71.u16[0] - v68 < *(unsigned __int16 *)(v43 + 80))
            {
              uint64_t v16 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v65, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              uint64_t v17 = *(void *)(*(void *)(a1 + 8) + 112);
              goto LABEL_22;
            }
LABEL_10:
            int8x16_t v19 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            int16x8_t v20 = vld1q_dup_s16(v19);
            int v21 = 1;
            unint64_t v22 = *(int16x8_t **)(v43 + 88);
            uint64_t v23 = *(unsigned __int16 *)(v43 + 82);
            while (1)
            {
              uint16x8_t v24 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v20, *v22), (int8x16_t)xmmword_23436BBD0);
              v24.i16[0] = vmaxvq_u16(v24);
              if (v24.i32[0]) {
                break;
              }
              v21 -= 8;
              ++v22;
              if (!--v23) {
                goto LABEL_16;
              }
            }
            if (v24.u16[0] - v21 < *(unsigned __int16 *)(v43 + 80))
            {
              uint16x8_t v25 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v65, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              uint64_t v26 = *(void *)(*(void *)(a1 + 8) + 112);
              goto LABEL_22;
            }
LABEL_16:
            uint64_t v27 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                  + 16);
            int16x8_t v28 = vld1q_dup_s16(v27);
            int v29 = 1;
            while (1)
            {
              uint16x8_t v30 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v28, *v31), (int8x16_t)xmmword_23436BBD0);
              v30.i16[0] = vmaxvq_u16(v30);
              if (v30.i32[0]) {
                break;
              }
              v29 -= 8;
              ++v31;
              if (!--v32) {
                goto LABEL_25;
              }
            }
            if (v30.u16[0] - v29 >= *(unsigned __int16 *)(v43 + 80)) {
              goto LABEL_25;
            }
            int v33 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v65, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v34 = *(void *)(*(void *)(a1 + 8) + 112);
LABEL_22:
            if (v18 == 2)
            {
              unint64_t v35 = v80;
              unint64_t v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
              __int16 v37 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
              unint64_t v38 = *(void *)(a3 + 40);
              goto LABEL_26;
            }
            if (v18 == 1)
            {
              unint64_t v39 = v80;
              unint64_t v40 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
              re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(a3, v39, v40);
              if (v63) {
                goto LABEL_28;
              }
              goto LABEL_58;
            }
            if (v18) {
              goto LABEL_27;
            }
          }
LABEL_25:
          unint64_t v35 = v80;
          unint64_t v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
          __int16 v37 = *(re::ecs2::ComponentBucketsBase **)(a3 + 16);
          unint64_t v38 = *(void *)(a3 + 48);
LABEL_26:
          re::ecs2::ComponentBucketsBase::moveComponent(v37, v35, v36, v38);
LABEL_27:
          if (v63) {
LABEL_28:
          }
        }
        else
        {
LABEL_57:
          unint64_t v72 = v80;
          unint64_t v73 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v81);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v72, v73, *(void *)(a3 + 32));
        }
LABEL_58:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v81);
      }
      while (v81 != a5 || (unsigned __int16)v82 != 0xFFFF || WORD1(v82) != 0xFFFF);
    }
    return *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    double v75 = (re::internal *)re::introspect<re::ecs2::RenderOptionsService>();
    re::StringID::invalid((re::StringID *)v79);
    re::internal::missingServiceErrorMessage(v75, (const re::IntrospectionBase *)v79, (re::DynamicString *)&v80);
    re::DynamicString::~DynamicString((re::DynamicString *)&v80);
    re::StringID::~StringID((re::StringID *)v79);
    uint64_t v76 = (re::internal *)re::introspect<re::ecs2::RenderOptionsService>();
    re::StringID::invalid((re::StringID *)v79);
    re::internal::missingServiceErrorMessage(v76, (const re::IntrospectionBase *)v79, (re::DynamicString *)&v80);
    if (v81) {
      uint64_t v78 = v82;
    }
    else {
      uint64_t v78 = (char *)&v81 + 1;
    }
    re::internal::assertLog((re::internal *)5, v77, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v78);
    re::DynamicString::~DynamicString((re::DynamicString *)&v80);
    re::StringID::~StringID((re::StringID *)v79);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

BOOL re::ecs2::CameraViewDescriptorsComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
  unint64_t v12 = v27;
  unint64_t v13 = v28;
  unint64_t v27 = a4;
  unint64_t v28 = v12;
  unint64_t v29 = v13;
  uint64_t v14 = (unsigned __int16)v13;
  uint64_t v15 = v13 & 0xFFFF0000;
  if (v12 != a5 || v14 != 0xFFFF || v15 != 4294901760)
  {
    do
    {
      uint64_t v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
      if (re::ecs2::CameraViewDescriptorsHelper::setCameraViewsRenderGraphFileProviders(*(re::ecs2::CameraViewDescriptorsHelper **)(*(void *)v18 + 16), v19))
      {
        unint64_t v20 = v27;
        unint64_t v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(void *)(a3 + 48));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
    }
    while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
  }
  unint64_t v24 = *(void *)(a3 + 48);
  unint64_t v25 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(void *)(a3 + 16) + 8, v24);
  if (!*(_DWORD *)(v25 + 40)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)a1 + 40))(a1, a2, a3, v24, v25, a6);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  uint64_t v210 = *MEMORY[0x263EF8340];
  long long v185 = (re::ecs2::RenderingSubsystem *)a3[1];
  uint64_t v183 = *(void *)(*((void *)a1 + 1) + 112);
  uint64_t v10 = *(void *)(v183 + 104);
  if (v10)
  {
    a1 = (re *)re::RenderFrameBox::get(v10 + 344, 0xFFFFFFFFFFFFFFFuLL);
    unint64_t v11 = (unint64_t *)a1;
  }
  else
  {
    unint64_t v11 = 0;
  }
  unint64_t v12 = re::globalAllocators(a1);
  long long v184 = (re::RenderFrame *)v11;
  uint64_t v13 = re::PerFrameAllocatorManager::perFrameAllocator(v12[6], v11[46]);
  long long v198 = 0;
  v195[1] = 0;
  unint64_t v196 = 0;
  int v197 = 0;
  uint64_t v188 = v13;
  v195[0] = v13;
  re::DynamicArray<float *>::setCapacity(v195, 0);
  ++v197;
  long long v182 = a3;
  unint64_t v14 = a3[5];
  unint64_t v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a3[2] + 8, v14);
  uint64_t v187 = (*(uint64_t (**)(void))(**(void **)(*((void *)v9 + 1) + 136) + 24))(*(void *)(*((void *)v9 + 1) + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v205, v15, 0);
  *(void *)&v192[0] = v14;
  *(_OWORD *)((char *)v192 + 8) = v205;
  if (v15 != (void)v205
    || WORD4(v205) != 0xFFFFLL
    || (unint64_t v16 = 0, v17 = 0, (DWORD2(v205) & 0xFFFF0000) != 0xFFFF0000))
  {
    unint64_t v17 = 0;
    unint64_t v16 = 0;
    while (1)
    {
      long long v150 = *(void **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v192 + 4);
      *(void *)long long v202 = v150;
      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v195, v202);
      *(void *)&long long v205 = v150;
      *(void *)&long long v206 = 0;
      if (v150[27])
      {
        int v151 = 0;
        goto LABEL_142;
      }
      if (v150[32]) {
        break;
      }
      if (v150[37])
      {
        int v151 = 2;
LABEL_142:
        uint64_t v152 = 0;
        uint64_t v5 = 0;
        DWORD2(v205) = v151;
        do
        {
          uint64_t v153 = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v205);
          if (*(void *)(v153 + 232)) {
            BOOL v154 = 1;
          }
          else {
            BOOL v154 = *(void *)(v153 + 264) != 0;
          }
          char v155 = *(unsigned char *)(v153 + 192) != 0;
          uint64_t v5 = (*(void *)(v153 + 304) + v5) << v155;
          uint64_t v152 = (v154 + v152) << v155;
          re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v205);
        }
        while ((void *)v205 != v150 || DWORD2(v205) != 3 || (void)v206 != 0);
        goto LABEL_154;
      }
      uint64_t v5 = 0;
      uint64_t v152 = 0;
LABEL_154:
      v16 += v152;
      v17 += v5;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v192 + 4);
      if (*((void *)&v192[0] + 1) == v15 && LOWORD(v192[1]) == 0xFFFF && WORD1(v192[1]) == 0xFFFF) {
        goto LABEL_7;
      }
    }
    int v151 = 1;
    goto LABEL_142;
  }
LABEL_7:
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v205, a5, 0);
  *(void *)&v192[0] = a4;
  *(_OWORD *)((char *)v192 + 8) = v205;
  if ((void)v205 != a5 || WORD4(v205) != 0xFFFFLL || (DWORD2(v205) & 0xFFFF0000) != 0xFFFF0000)
  {
    while (1)
    {
      unint64_t v20 = *(void **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v192 + 4);
      *(void *)long long v202 = v20;
      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v195, v202);
      *(void *)&long long v205 = v20;
      *(void *)&long long v206 = 0;
      if (v20[27])
      {
        int v21 = 0;
        goto LABEL_18;
      }
      if (v20[32]) {
        break;
      }
      if (v20[37])
      {
        int v21 = 2;
LABEL_18:
        uint64_t v19 = 0;
        uint64_t v18 = 0;
        DWORD2(v205) = v21;
        do
        {
          uint64_t v22 = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v205);
          if (*(void *)(v22 + 232)) {
            BOOL v23 = 1;
          }
          else {
            BOOL v23 = *(void *)(v22 + 264) != 0;
          }
          char v24 = *(unsigned char *)(v22 + 192) != 0;
          uint64_t v18 = (*(void *)(v22 + 304) + v18) << v24;
          uint64_t v19 = (v23 + v19) << v24;
          re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v205);
        }
        while ((void *)v205 != v20 || DWORD2(v205) != 3 || (void)v206 != 0);
        goto LABEL_30;
      }
      uint64_t v18 = 0;
      uint64_t v19 = 0;
LABEL_30:
      v16 += v19;
      v17 += v18;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v192 + 4);
      if (*((void *)&v192[0] + 1) == a5 && LOWORD(v192[1]) == 0xFFFF && WORD1(v192[1]) == 0xFFFF) {
        goto LABEL_33;
      }
    }
    int v21 = 1;
    goto LABEL_18;
  }
LABEL_33:
  uint64_t v181 = a5;
  unint64_t v27 = (re::DynamicString **)v184;
  re::RenderFrame::reserveDynamicArraysSize(v184, v16, v17);
  unint64_t v28 = v198;
  unint64_t v29 = v196;
  unint64_t v30 = 126 - 2 * __clz(v196);
  if (v196) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  long long v186 = &v198[v196];
  std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**,false>((uint64_t)v198, v186, v31, 1);
  uint64_t v32 = (_anonymous_namespace_ *)v183;
  int v33 = *(unsigned __int8 *)(v183 + 271);
  unsigned int v193 = 0;
  memset(v192, 0, sizeof(v192));
  uint64_t v194 = 0x7FFFFFFFLL;
  BOOL v34 = v33 != 0;
  if (!v29)
  {
    unsigned int v146 = 0;
    goto LABEL_160;
  }
  uint64_t v35 = (uint64_t)v182;
  do
  {
    long long v189 = v28;
    uint64_t v36 = *v28;
    re::DrawingManager::getLayersWithPendingSizeOrScaleChanges(*((void **)v32 + 13), (uint64_t)&v205);
    if ((void)v206)
    {
      __int16 v37 = (int *)v207;
      unint64_t v38 = (int *)(v207 + 4 * v206);
      unint64_t v39 = *(void *)(v36 + 256);
      do
      {
        if (v39)
        {
          unint64_t v40 = 0;
          int v41 = *v37;
          do
          {
            uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v36, (re::ecs2::CameraViewDescriptorsComponent *)(v40 + 0x10000));
            uint64_t v43 = *(void *)(ViewDescriptor + 304);
            if (v43)
            {
              uint64_t v44 = *(void *)(ViewDescriptor + 320);
              uint64_t v45 = v44 + 136 * v43;
              while (2)
              {
                uint64_t v46 = 0;
                char v47 = 1;
                do
                {
                  if (v41 == *(_DWORD *)(v44 + 4 * v46 + 80))
                  {
                    re::ecs2::Component::markDirty((void *)v36);
                    goto LABEL_52;
                  }
                  char v48 = v47;
                  char v47 = 0;
                  uint64_t v46 = 1;
                }
                while ((v48 & 1) != 0);
                v44 += 136;
                if (v44 != v45) {
                  continue;
                }
                break;
              }
            }
            ++v40;
            unint64_t v39 = *(void *)(v36 + 256);
          }
          while (v40 < v39);
        }
        ++v37;
      }
      while (v37 != v38);
    }
LABEL_52:
    int8x16_t v49 = (int8x16_t)xmmword_23436BBD0;
    if ((void)v205 && (void)v207)
    {
      (*(void (**)(void))(*(void *)v205 + 40))();
      int8x16_t v49 = (int8x16_t)xmmword_23436BBD0;
    }
    uint64_t v50 = *(void *)(v36 + 16);
    uint64_t v51 = *(unsigned __int16 *)(v50 + 82);
    if (*(_WORD *)(v50 + 82))
    {
      int v52 = (re::ecs2::EntityComponentCollection *)(v50 + 32);
      int16x8_t v53 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      int v54 = *(int16x8_t **)(v50 + 88);
      int16x8_t v55 = vld1q_dup_s16(v53);
      int v56 = 1;
      uint16x8_t v57 = v54;
      uint64_t v58 = *(unsigned __int16 *)(v50 + 82);
      while (1)
      {
        uint16x8_t v59 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v55, *v57), v49);
        v59.i16[0] = vmaxvq_u16(v59);
        if (v59.i32[0]) {
          break;
        }
        v56 -= 8;
        ++v57;
        if (!--v58) {
          goto LABEL_62;
        }
      }
      if (v59.u16[0] - v56 < *(unsigned __int16 *)(v50 + 80))
      {
        int v60 = (_OWORD *)re::ecs2::EntityComponentCollection::get(v52, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::PerspectiveCameraComponent>(v32, (re::ecs2::CameraViewDescriptorsComponent *)v36, v60, (re::ecs2::CameraViewDescriptorsComponent *)v50);
        goto LABEL_74;
      }
LABEL_62:
      uint16x8_t v61 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      int16x8_t v62 = vld1q_dup_s16(v61);
      int v63 = 1;
      uint64_t v64 = *(int16x8_t **)(v50 + 88);
      uint64_t v65 = *(unsigned __int16 *)(v50 + 82);
      while (1)
      {
        uint16x8_t v66 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v62, *v64), v49);
        v66.i16[0] = vmaxvq_u16(v66);
        if (v66.i32[0]) {
          break;
        }
        v63 -= 8;
        ++v64;
        if (!--v65) {
          goto LABEL_68;
        }
      }
      if (v66.u16[0] - v63 < *(unsigned __int16 *)(v50 + 80))
      {
        int16x8_t v67 = (_OWORD *)re::ecs2::EntityComponentCollection::get(v52, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::OrthographicCameraComponent>(v32, (re::ecs2::CameraViewDescriptorsComponent *)v36, v67, (re::ecs2::CameraViewDescriptorsComponent *)v50);
        goto LABEL_74;
      }
LABEL_68:
      int v68 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      int16x8_t v69 = vld1q_dup_s16(v68);
      int v70 = 1;
      while (1)
      {
        uint16x8_t v71 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v69, *v54), v49);
        v71.i16[0] = vmaxvq_u16(v71);
        if (v71.i32[0]) {
          break;
        }
        v70 -= 8;
        ++v54;
        if (!--v51) {
          goto LABEL_74;
        }
      }
      if (v71.u16[0] - v70 < *(unsigned __int16 *)(v50 + 80))
      {
        unint64_t v72 = (_OWORD *)re::ecs2::EntityComponentCollection::get(v52, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::ecs2::CameraViewDescriptorsHelper::updateCameraViewsPerFrameData<re::ecs2::CustomMatrixCameraComponent>(v32, (re::ecs2::CameraViewDescriptorsComponent *)v36, v72, (re::ecs2::CameraViewDescriptorsComponent *)v50);
      }
    }
LABEL_74:
    objc_destroyWeak((id *)(v36 + 32));
    *(void *)(v36 + 32) = 0;
    uint64_t v73 = *(void *)(v36 + 296);
    if (v73)
    {
      *(void *)(v36 + 296) = 0;
      uint64_t v74 = *(re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor **)(v36 + 312);
      uint64_t v75 = 384 * v73;
      do
      {
        re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor(v74);
        uint64_t v74 = (re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)(v76 + 384);
        v75 -= 384;
      }
      while (v75);
      ++*(_DWORD *)(v36 + 304);
      for (uint64_t i = 24; i != 56; i += 8)
      {
        unint64_t v78 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v35 + 16), *(void *)(v35 + i), (re::ecs2::Component *)v36);
        if (v78 != -1 && (v79 & 0xFFFFFF00000000) != 0)
        {
          unint64_t v81 = v78;
          unint64_t v82 = v79;
          goto LABEL_85;
        }
      }
      unint64_t v81 = -1;
      unint64_t v82 = 0xFFFFFFFFLL;
LABEL_85:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(v35, v81, v82);
    }
    (*(void (**)(long long *__return_ptr))(*(void *)v187 + 8))(&v205);
    if ((_BYTE)v205) {
      unint64_t v83 = *((void *)&v205 + 1);
    }
    else {
      unint64_t v83 = 0;
    }
    long long v190 = (void *)v83;
    *(void *)&long long v206 = 0;
    DWORD2(v206) = 0;
    *(void *)&long long v207 = 0;
    unint64_t v84 = v188;
    long long v205 = (unint64_t)v188;
    re::DynamicArray<re::CameraView>::setCapacity(&v205, 0);
    ++DWORD2(v206);
    long long v208 = 0uLL;
    LODWORD(v209) = 0;
    *((void *)&v209 + 1) = 0;
    *((void *)&v207 + 1) = v188;
    re::DynamicArray<re::CameraMultiView>::setCapacity((void *)&v207 + 1, 0);
    LODWORD(v209) = v209 + 1;
    unint64_t v85 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v83 ^ (v83 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v83 ^ (v83 >> 30))) >> 27));
    unint64_t v86 = v85 ^ (v85 >> 31);
    if (!*(void *)&v192[0])
    {
      LODWORD(v87) = 0;
LABEL_95:
      unsigned int v89 = re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v192, v87, v86, &v190, (uint64_t)&v205);
      ++HIDWORD(v194);
      uint64_t v90 = *(void *)&v192[1] + 104 * v89;
      goto LABEL_97;
    }
    unint64_t v87 = v86 % DWORD2(v192[1]);
    uint64_t v88 = *(unsigned int *)(*((void *)&v192[0] + 1) + 4 * v87);
    if (v88 == 0x7FFFFFFF) {
      goto LABEL_95;
    }
    while (*(void *)(*(void *)&v192[1] + 104 * v88 + 16) != v83)
    {
      LODWORD(v88) = *(_DWORD *)(*(void *)&v192[1] + 104 * v88 + 8) & 0x7FFFFFFF;
      if (v88 == 0x7FFFFFFF) {
        goto LABEL_95;
      }
    }
    uint64_t v90 = *(void *)&v192[1] + 104 * v88;
LABEL_97:
    uint64_t v91 = v90 + 24;
    re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)&v207 + 8);
    re::DynamicArray<re::CameraView>::deinit((uint64_t)&v205);
    unint64_t v94 = *(void *)(v36 + 56);
    if (v94)
    {
      unint64_t v95 = *(void *)(v91 + 16);
      if (v95 == -1)
      {
        long long v199 = 0;
        long long v208 = 0u;
        long long v209 = 0u;
        long long v206 = 0u;
        long long v207 = 0u;
        long long v205 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v202 = 136315906;
        *(void *)&v202[4] = "copy";
        *(_WORD *)&v202[12] = 1024;
        *(_DWORD *)&v202[14] = 643;
        __int16 v203 = 2048;
        *(void *)long long v204 = -1;
        *(_WORD *)&v204[8] = 2048;
        *(void *)&v204[10] = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_195:
        re::internal::assertLog((re::internal *)7, v92, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v95, v95, v94);
        _os_crash();
        __break(1u);
LABEL_196:
        uint64_t v36 = v94 + 1;
        long long v199 = 0;
        long long v208 = 0u;
        long long v209 = 0u;
        long long v206 = 0u;
        long long v207 = 0u;
        long long v205 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)long long v202 = 136315906;
        *(void *)&v202[4] = "copy";
        *(_WORD *)&v202[12] = 1024;
        *(_DWORD *)&v202[14] = 643;
        __int16 v203 = 2048;
        *(void *)long long v204 = v94;
        *(_WORD *)&v204[8] = 2048;
        *(void *)&v204[10] = v94 + 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_197:
        re::internal::assertLog((re::internal *)7, v92, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v94, v94, v5);
        _os_crash();
        __break(1u);
        goto LABEL_198;
      }
      unint64_t v84 = v95 + v94;
      if (__CFADD__(v95, v94)) {
        goto LABEL_195;
      }
      uint64_t v96 = *(void *)(v36 + 72);
      if (v95 >= v84)
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView const*,re::CameraView const*,re::CameraView*>(*(void *)(v36 + 72), v96 + 672 * v94, *(void *)(v91 + 32) + 672 * v95, v93);
      }
      else
      {
        re::DynamicArray<re::CameraView>::growCapacity((void *)v91, v95 + v94);
        uint64_t v97 = *(void *)(v91 + 16);
        uint64_t v98 = v96 + 672 * (v97 - v95);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView const*,re::CameraView const*,re::CameraView*>(v96, v98, *(void *)(v91 + 32) + 672 * v95, v99);
        if (v97 - v95 != v94)
        {
          uint64_t v100 = 0;
          uint64_t v101 = v97;
          uint64_t v102 = *(void *)(v91 + 32) + 672 * *(void *)(v91 + 16);
          uint64_t v103 = 672 * v95 + 672 * v94 - 672 * v101;
          do
          {
            uint64_t v104 = v102 + v100;
            uint64_t v105 = v98 + v100;
            re::DynamicString::DynamicString((re::DynamicString *)(v102 + v100), (const re::DynamicString *)(v98 + v100));
            long long v106 = *(_OWORD *)(v98 + v100 + 32);
            long long v107 = *(_OWORD *)(v98 + v100 + 48);
            long long v108 = *(_OWORD *)(v98 + v100 + 80);
            *(_OWORD *)(v104 + 64) = *(_OWORD *)(v98 + v100 + 64);
            *(_OWORD *)(v104 + 80) = v108;
            *(_OWORD *)(v104 + 32) = v106;
            *(_OWORD *)(v104 + 48) = v107;
            long long v109 = *(_OWORD *)(v98 + v100 + 96);
            long long v110 = *(_OWORD *)(v98 + v100 + 112);
            long long v111 = *(_OWORD *)(v98 + v100 + 144);
            *(_OWORD *)(v104 + 128) = *(_OWORD *)(v98 + v100 + 128);
            *(_OWORD *)(v104 + 144) = v111;
            *(_OWORD *)(v104 + 96) = v109;
            *(_OWORD *)(v104 + 112) = v110;
            long long v112 = *(_OWORD *)(v98 + v100 + 160);
            long long v113 = *(_OWORD *)(v98 + v100 + 176);
            long long v114 = *(_OWORD *)(v98 + v100 + 208);
            *(_OWORD *)(v104 + 192) = *(_OWORD *)(v98 + v100 + 192);
            *(_OWORD *)(v104 + 208) = v114;
            *(_OWORD *)(v104 + 160) = v112;
            *(_OWORD *)(v104 + 176) = v113;
            re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray(v102 + v100 + 224, (uint64_t *)(v98 + v100 + 224));
            *(_WORD *)(v104 + 264) = *(_WORD *)(v98 + v100 + 264);
            re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray(v102 + v100 + 272, (uint64_t *)(v98 + v100 + 272));
            *(_OWORD *)(v104 + 320) = *(_OWORD *)(v98 + v100 + 320);
            long long v115 = *(_OWORD *)(v98 + v100 + 336);
            long long v116 = *(_OWORD *)(v98 + v100 + 352);
            long long v117 = *(_OWORD *)(v98 + v100 + 368);
            *(void *)(v104 + 384) = *(void *)(v98 + v100 + 384);
            *(_OWORD *)(v104 + 352) = v116;
            *(_OWORD *)(v104 + 368) = v117;
            *(_OWORD *)(v104 + 336) = v115;
            *(unsigned char *)(v104 + 400) = *(unsigned char *)(v98 + v100 + 400);
            int v118 = *(unsigned __int8 *)(v98 + v100 + 401);
            *(unsigned char *)(v104 + 401) = v118;
            if (v118) {
              *(unsigned char *)(v104 + 402) = *(unsigned char *)(v105 + 402);
            }
            int v119 = *(unsigned __int8 *)(v105 + 404);
            *(unsigned char *)(v104 + 404) = v119;
            if (v119) {
              *(_DWORD *)(v102 + v100 + 408) = *(_DWORD *)(v98 + v100 + 408);
            }
            uint64_t v120 = (_OWORD *)(v102 + v100);
            long long v121 = *(_OWORD *)(v98 + v100 + 416);
            long long v122 = *(_OWORD *)(v98 + v100 + 432);
            long long v123 = *(_OWORD *)(v98 + v100 + 464);
            v120[28] = *(_OWORD *)(v98 + v100 + 448);
            v120[29] = v123;
            v120[26] = v121;
            v120[27] = v122;
            long long v124 = *(_OWORD *)(v98 + v100 + 480);
            long long v125 = *(_OWORD *)(v98 + v100 + 496);
            long long v126 = *(_OWORD *)(v98 + v100 + 528);
            v120[32] = *(_OWORD *)(v98 + v100 + 512);
            v120[33] = v126;
            v120[30] = v124;
            v120[31] = v125;
            long long v128 = *(_OWORD *)(v98 + v100 + 624);
            long long v127 = *(_OWORD *)(v98 + v100 + 640);
            long long v129 = *(_OWORD *)(v98 + v100 + 608);
            *(void *)(v102 + v100 + 653) = *(void *)(v98 + v100 + 653);
            v120[39] = v128;
            v120[40] = v127;
            v120[38] = v129;
            long long v130 = *(_OWORD *)(v98 + v100 + 544);
            long long v131 = *(_OWORD *)(v98 + v100 + 560);
            long long v132 = *(_OWORD *)(v98 + v100 + 592);
            v120[36] = *(_OWORD *)(v98 + v100 + 576);
            v120[37] = v132;
            v120[34] = v130;
            v120[35] = v131;
            v100 += 672;
          }
          while (v103 != v100);
        }
        *(void *)(v91 + 16) = v84;
        uint64_t v35 = (uint64_t)v182;
        uint64_t v32 = (_anonymous_namespace_ *)v183;
      }
      ++*(_DWORD *)(v91 + 24);
      unint64_t v27 = (re::DynamicString **)v184;
    }
    uint64_t v5 = *(void *)(v36 + 96);
    if (v5)
    {
      unint64_t v94 = *(void *)(v91 + 56);
      if (v94 == -1) {
        goto LABEL_196;
      }
      unint64_t v84 = v94 + v5;
      if (__CFADD__(v94, v5)) {
        goto LABEL_197;
      }
      uint64_t v133 = *(void *)(v36 + 112);
      if (v94 >= v84)
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::CameraMultiView const*,re::CameraMultiView const*,re::CameraMultiView*,0>(*(void *)(v36 + 112), v133 + 1360 * v5, *(void *)(v91 + 72) + 1360 * v94);
      }
      else
      {
        re::DynamicArray<re::CameraMultiView>::growCapacity((void *)(v91 + 40), v94 + v5);
        uint64_t v134 = *(void *)(v91 + 56);
        unint64_t v135 = (const re::CameraMultiView *)(v133 + 1360 * (v134 - v94));
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::CameraMultiView const*,re::CameraMultiView const*,re::CameraMultiView*,0>(v133, (uint64_t)v135, *(void *)(v91 + 72) + 1360 * v94);
        if (v134 - v94 != v5)
        {
          uint64_t v136 = (re::CameraMultiView *)(*(void *)(v91 + 72) + 1360 * *(void *)(v91 + 56));
          uint64_t v137 = 1360 * v5 + 1360 * v94 - 1360 * v134;
          do
          {
            uint64_t v138 = re::CameraMultiView::CameraMultiView(v136, v135);
            unint64_t v135 = (const re::CameraMultiView *)((char *)v135 + 1360);
            uint64_t v136 = (re::CameraMultiView *)((char *)v138 + 1360);
            v137 -= 1360;
          }
          while (v137);
        }
        *(void *)(v91 + 56) = v84;
        uint64_t v35 = (uint64_t)v182;
        uint64_t v32 = (_anonymous_namespace_ *)v183;
      }
      ++*(_DWORD *)(v91 + 64);
    }
    uint64_t v139 = *(void *)(v91 + 16);
    if (v139)
    {
      uint64_t v140 = 672 * v139;
      uint64_t v141 = (unsigned __int8 *)(*(void *)(v91 + 32) + 653);
      uint64_t v142 = v189;
      do
      {
        BOOL v34 = (*v141 | v34) != 0;
        v141 += 672;
        v140 -= 672;
      }
      while (v140);
    }
    else
    {
      uint64_t v142 = v189;
    }
    uint64_t v143 = *(void *)(v91 + 56);
    if (v143)
    {
      uint64_t v144 = 1360 * v143;
      uint64_t v145 = (unsigned __int8 *)(*(void *)(v91 + 72) + 653);
      do
      {
        BOOL v34 = (*v145 | v34) != 0;
        v145 += 1360;
        v144 -= 1360;
      }
      while (v144);
    }
    unint64_t v28 = v142 + 1;
  }
  while (v28 != v186);
  unsigned int v146 = v193;
  if (!v193)
  {
LABEL_160:
    LODWORD(v147) = 0;
    goto LABEL_161;
  }
  uint64_t v147 = 0;
  long long v148 = (int *)(*(void *)&v192[1] + 8);
  while (1)
  {
    int v149 = *v148;
    v148 += 26;
    if (v149 < 0) {
      break;
    }
    if (v193 == ++v147)
    {
      LODWORD(v147) = v193;
      break;
    }
  }
LABEL_161:
  if (v146 != v147)
  {
    uint64_t v158 = v147;
    uint64_t v159 = *(void *)&v192[1];
    do
    {
      uint64_t v160 = v159 + 104 * v158;
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v185, *(const re::ecs2::Scene **)(v160 + 16), v27, &v205);
      if (*(void *)(v160 + 40))
      {
        *(void *)long long v202 = (unint64_t)v205 >> 1;
        uint64_t v161 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v27 + 33), (const re::WeakStringID *)v202)+ 48);
        (*(void (**)(void))(v161 + 616))();
      }
      if (*(void *)(v159 + 104 * v158 + 80))
      {
        *(void *)long long v202 = (unint64_t)v205 >> 1;
        uint64_t v162 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v27 + 33), (const re::WeakStringID *)v202)+ 48);
        (*(void (**)(void))(v162 + 648))();
      }
      re::StringID::destroyString((re::StringID *)&v205);
      uint64_t v159 = *(void *)&v192[1];
      if (v193 <= (int)v147 + 1) {
        unsigned int v163 = v147 + 1;
      }
      else {
        unsigned int v163 = v193;
      }
      while (1)
      {
        uint64_t v158 = (v147 + 1);
        if (v163 - 1 == v147) {
          break;
        }
        LODWORD(v147) = v147 + 1;
        unsigned int v164 = v158;
        if ((*(_DWORD *)(*(void *)&v192[1] + 104 * v158 + 8) & 0x80000000) != 0) {
          goto LABEL_174;
        }
      }
      unsigned int v164 = v163;
LABEL_174:
      LODWORD(v147) = v164;
    }
    while (v146 != v164);
  }
  if (v34)
  {
    long long v190 = &unk_26E6FD650;
    __int16 v191 = 1;
    *(void *)&long long v205 = 0xC1ECEDF69A9CD01;
    uint64_t v165 = re::RenderFrameData::stream((re::RenderFrameData *)(v27 + 33), (const re::WeakStringID *)&v205);
    unint64_t v166 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v165, (uint64_t *)&v201);
    if (!v166)
    {
      uint64_t v167 = *(void *)(*(void *)(v165 + 48) + 8);
      uint64_t v168 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v167 + 32))(v167, 56, 8);
      *(void *)uint64_t v168 = 0;
      *(void *)(v168 + 8) = 0;
      *(_DWORD *)(v168 + 16) = 1;
      *(void *)(v168 + 32) = 0;
      *(void *)(v168 + 40) = 0;
      *(void *)(v168 + 24) = 0;
      *(_DWORD *)(v168 + 48) = 0;
      long long v169 = (re *)re::BucketArray<re::PipelineCompilationData,4ul>::init(v168, v167, 1uLL);
      uint64_t v170 = re::globalAllocators(v169)[2];
      *(void *)long long v202 = &unk_26E6FD888;
      *(void *)&v202[8] = v167;
      *(void *)&v204[4] = v170;
      *(void *)&v204[12] = v202;
      *((void *)&v205 + 1) = v168;
      *(void *)&long long v205 = std::__any_imp::_SmallHandler<re::BucketArray<re::PipelineCompilationData,4ul> *>::__handle[abi:nn180100];
      *((void *)&v208 + 1) = v170;
      *(void *)&long long v209 = 0;
      re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::operator=<24ul>((uint64_t)&v207, (uint64_t)v202);
      unint64_t v166 = (uint64_t (**)(uint64_t, void, void, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v165, (uint64_t *)&v201, (re *)&v205);
      if ((void)v209)
      {
        long long v199 = &v205;
        (*(void (**)(void, long long **))(*(void *)v209 + 16))(v209, &v199);
      }
      re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)&v207);
      if ((void)v205) {
        ((void (*)(void, long long *, void, void, void))v205)(0, &v205, 0, 0, 0);
      }
      re::FunctionBase<24ul,void ()(re::RenderFrameDataArrayWrapper *)>::destroyCallable((uint64_t)v202);
    }
    long long v199 = (long long *)&unk_26E6FD650;
    __int16 v200 = v191;
    unint64_t v173 = *(void *)(v172 + 40);
    unint64_t v84 = *(void *)(v172 + 8);
    if (v173 + 1 > 4 * v84)
    {
      re::BucketArray<re::PipelineCompilationData,4ul>::setBucketsCapacity((void *)v172, (v173 + 4) >> 2);
      unint64_t v84 = *(void *)(v172 + 8);
    }
    uint64_t v36 = v173 >> 2;
    if (v84 > v173 >> 2)
    {
      if (*(unsigned char *)(v172 + 16)) {
        uint64_t v174 = v172 + 24;
      }
      else {
        uint64_t v174 = *(void *)(v172 + 32);
      }
      uint64_t v175 = *(void *)(v174 + 8 * v36);
      ++*(void *)(v172 + 40);
      ++*(_DWORD *)(v172 + 48);
      uint64_t v176 = v175 + 16 * (v173 & 3);
      *(void *)uint64_t v176 = &unk_26E6FD650;
      *(_WORD *)(v176 + 8) = v200;
      uint64_t v177 = *(void *)(v172 + 40);
      if (v177)
      {
        re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v172, v177 - 1);
        goto LABEL_190;
      }
LABEL_199:
      re::internal::assertLog((re::internal *)4, v171, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
      _os_crash();
      __break(1u);
    }
LABEL_198:
    long long v201 = 0;
    long long v208 = 0u;
    long long v209 = 0u;
    long long v206 = 0u;
    long long v207 = 0u;
    long long v205 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    *(_DWORD *)long long v202 = 136315906;
    *(void *)&v202[4] = "operator[]";
    *(_WORD *)&v202[12] = 1024;
    *(_DWORD *)&v202[14] = 858;
    __int16 v203 = 2048;
    *(void *)long long v204 = v36;
    *(_WORD *)&v204[8] = 2048;
    *(void *)&v204[10] = v84;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_199;
  }
LABEL_190:
  int v178 = *(_DWORD *)(v181 + 40);
  double v179 = re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v192);
  if (v195[0] && v198) {
    (*(void (**)(double))(*(void *)v195[0] + 40))(v179);
  }
  return v178 != 0;
}

uint64_t re::ecs2::CameraViewDescriptorsSystem::updateScenes(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v75 = *MEMORY[0x263EF8340];
  v64[0] = a3;
  v64[1] = a4;
  uint64_t v6 = *(void *)(result + 104);
  if (!v6 || (*(unsigned char *)(v6 + 424) & 0x10) != 0)
  {
    uint64_t v7 = *(void *)(*(void *)(result + 112) + 104);
    if (v7 && (uint64_t v8 = re::RenderFrameBox::get(v7 + 344, 0xFFFFFFFFFFFFFFFuLL)) != 0)
    {
      uint64_t v9 = v8;
      re::CameraStreamManager::context(*(re::CameraStreamManager **)(*(void *)(v5 + 112) + 112), (uint64_t)&v67);
      (*(void (**)(void, long long *))(**(void **)(v9 + 320) + 208))(*(void *)(v9 + 320), &v67);
      if (v72)
      {

        id v72 = 0;
      }
      if (v71)
      {

        id v71 = 0;
      }
      re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::~SmallHashTable((uint64_t)&v67);
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v63);
      uint64_t v10 = a2[1];
      if (v10)
      {
        unint64_t v11 = *a2;
        uint64_t v61 = (uint64_t)&(*a2)[(void)v10];
        uint64_t v62 = v5 + 328;
        while (1)
        {
          uint64_t v12 = *v11;
          *(void *)&long long v67 = *v11;
          unint64_t v13 = *(void *)(*(void *)(v5 + 224)
                          + 16
                          * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v5 + 216), &v67)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(v62, v13);
          unint64_t v14 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 160, v13);
          uint64_t v15 = *(void *)(*v14 + 224);
          unint64_t v16 = v14[3];
          unint64_t v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v14[2] + 8, v16);
          if (*(_DWORD *)(v17 + 40)) {
            int v18 = (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v15 + 24))(v15, v64, v14, v16, v17, 0);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = v14[5];
          unint64_t v20 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v14[2] + 8, v19);
          if (*(_DWORD *)(v20 + 40)) {
            v18 |= (*(uint64_t (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v15 + 32))(v15, v64, v14, v19, v20, 0);
          }
          unint64_t v21 = v14[6];
          unint64_t v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v14[2] + 8, v21);
          if (*(_DWORD *)(v22 + 40)) {
            break;
          }
          if (v18) {
            goto LABEL_18;
          }
LABEL_19:
          if (!*(unsigned char *)(v5 + 392)) {
            goto LABEL_36;
          }
          unint64_t v23 = *(void *)(v5 + 336);
          int v24 = *(_DWORD *)(v5 + 344);
          if (v23 < 0xB)
          {
            unint64_t v27 = (uint64_t *)(v5 + 352);
            if ((v24 & 1) == 0) {
              unint64_t v27 = *(uint64_t **)(v5 + 360);
            }
            if (!v23) {
              goto LABEL_36;
            }
            uint64_t v28 = 0;
            uint64_t v29 = 8 * v23;
            do
            {
              uint64_t v30 = *v27++;
              v28 |= v30;
              v29 -= 8;
            }
            while (v29);
            if (!v28)
            {
LABEL_36:
              if (!v12) {
                goto LABEL_83;
              }
              goto LABEL_37;
            }
          }
          else
          {
            unint64_t v25 = (void *)(v5 + 352);
            if ((v24 & 1) == 0) {
              unint64_t v25 = *(void **)(v5 + 360);
            }
            uint64_t v26 = 8 * v23;
            while (!*v25)
            {
              ++v25;
              v26 -= 8;
              if (!v26) {
                goto LABEL_36;
              }
            }
          }
          uint64_t v31 = *(re::ecs2::System **)(v5 + 376);
          if (*((unsigned char *)v31 + 86)) {
            goto LABEL_36;
          }
          re::ecs2::System::queueToRun(v31, 0.0);
          if (!v12) {
            goto LABEL_83;
          }
LABEL_37:
          re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v12 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v66, 3009, v5);
          uint64_t v33 = *(void *)(v5 + 112);
          if (!v33)
          {
            re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 895);
            _os_crash();
            __break(1u);
          }
          uint64_t v34 = *(void *)(v33 + 104);
          if (v34) {
            uint64_t v35 = re::RenderFrameBox::get(v34 + 344, 0xFFFFFFFFFFFFFFFuLL);
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v36 = *(void *)(v35 + 376);
          uint64_t v37 = (*(uint64_t (**)(void))(**(void **)(v5 + 136) + 24))(*(void *)(v5 + 136));
          uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 16))(v37);
          int v39 = *(_DWORD *)(v38 + 124);
          if (!v39) {
            int v39 = *(_DWORD *)(v38 + 16);
          }
          unsigned int v69 = 0;
          long long v67 = 0u;
          long long v68 = 0u;
          uint64_t v70 = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v67, v36, v39 + 1);
          uint64_t v40 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v12 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TintComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v40)
          {
            uint64_t v41 = *(void *)(v40 + 24);
            if (v41)
            {
              uint64_t v42 = *(uint64_t **)(v40 + 40);
              uint64_t v43 = &v42[v41];
              do
              {
                uint64_t v44 = *v42;
                if (*(unsigned char *)(*(void *)(*v42 + 16) + 288))
                {
                  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v37 + 8))(&v73, v37);
                  if ((_BYTE)v73) {
                    unint64_t v45 = *((void *)&v73 + 1);
                  }
                  else {
                    unint64_t v45 = 0;
                  }
                  unint64_t v65 = v45;
                  unint64_t v46 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
                  unint64_t v47 = v46 ^ (v46 >> 31);
                  if ((void)v67)
                  {
                    unint64_t v48 = v47 % DWORD2(v68);
                    uint64_t v49 = *(unsigned int *)(*((void *)&v67 + 1) + 4 * v48);
                    if (v49 != 0x7FFFFFFF)
                    {
                      uint64_t v50 = *(void *)(v68 + (v49 << 6) + 16);
                      uint64_t v51 = *(unsigned int *)(*((void *)&v67 + 1) + 4 * v48);
                      while (v50 != v45)
                      {
                        uint64_t v51 = *(_DWORD *)(v68 + (v51 << 6) + 8) & 0x7FFFFFFF;
                        if (v51 == 0x7FFFFFFF)
                        {
                          long long v73 = *(_OWORD *)(v44 + 32);
                          char v74 = *(unsigned char *)(v44 + 48);
                          while (1)
                          {
                            uint64_t v49 = *(_DWORD *)(v68 + (v49 << 6) + 8) & 0x7FFFFFFF;
                            if (v49 == 0x7FFFFFFF) {
                              goto LABEL_58;
                            }
                            if (*(void *)(v68 + (v49 << 6) + 16) == v45) {
                              goto LABEL_59;
                            }
                          }
                        }
                        uint64_t v50 = *(void *)(v68 + (v51 << 6) + 16);
                      }
                      goto LABEL_59;
                    }
                  }
                  else
                  {
                    LODWORD(v48) = 0;
                  }
                  long long v73 = *(_OWORD *)(v44 + 32);
                  char v74 = *(unsigned char *)(v44 + 48);
LABEL_58:
                  re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v67, v48, v47, &v65, (uint64_t)&v73);
                  ++HIDWORD(v70);
                }
LABEL_59:
                ++v42;
              }
              while (v42 != v43);
            }
          }
          unsigned int v52 = v69;
          if (v69)
          {
            uint64_t v53 = 0;
            int v54 = (int *)(v68 + 8);
            while (1)
            {
              int v55 = *v54;
              v54 += 16;
              if (v55 < 0) {
                break;
              }
              if (v69 == ++v53)
              {
                LODWORD(v53) = v69;
                break;
              }
            }
          }
          else
          {
            LODWORD(v53) = 0;
          }
          if (v69 != v53)
          {
            uint64_t v56 = v53;
            uint64_t v57 = v68;
            do
            {
              re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v12, *(const re::ecs2::Scene **)(v57 + (v56 << 6) + 16), (re::DynamicString **)v35, &v73);
              unint64_t v65 = (unint64_t)v73 >> 1;
              uint64_t v58 = **(void **)(re::RenderFrameData::stream((re::RenderFrameData *)(v35 + 264), (const re::WeakStringID *)&v65)+ 48);
              (*(void (**)(void))(v58 + 472))();
              re::StringID::destroyString((re::StringID *)&v73);
              uint64_t v57 = v68;
              if (v69 <= (int)v53 + 1) {
                unsigned int v59 = v53 + 1;
              }
              else {
                unsigned int v59 = v69;
              }
              int v60 = v53;
              while (1)
              {
                uint64_t v56 = (v60 + 1);
                if (v59 - 1 == v60) {
                  break;
                }
                ++v60;
                LODWORD(v53) = v56;
                if ((*(_DWORD *)(v68 + (v56 << 6) + 8) & 0x80000000) != 0) {
                  goto LABEL_81;
                }
              }
              LODWORD(v53) = v59;
LABEL_81:
              ;
            }
            while (v52 != v53);
          }
          re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)&v67);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v66);
LABEL_83:
          if (++v11 == (uint64_t *)v61) {
            return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v63);
          }
        }
        if (((v18 | (*(unsigned int (**)(uint64_t, void *, void *, unint64_t, unint64_t, void))(*(void *)v15 + 40))(v15, v64, v14, v21, v22, 0)) & 1) == 0)goto LABEL_19; {
LABEL_18:
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit(v62, v13);
        goto LABEL_19;
      }
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v63);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "renderFrame", "addCameraStreamContext", 877);
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::ecs2::CameraViewDescriptorsSystem::willAddSceneToECSService(re::ecs2::CameraViewDescriptorsSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  unint64_t v4 = (char *)this + 160;
  v57[0] = (uint64_t)a2;
  uint64_t v5 = (re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 280);
  unint64_t v6 = *((void *)this + 36);
  int v7 = *((_DWORD *)this + 74);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)this + 304);
    }
    else {
      uint64_t v8 = (void *)*((void *)this + 39);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)this + 304);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)this + 39);
    if (!v6) {
      goto LABEL_17;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(void *)&long long v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 280, 0);
    uint64_t v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 216), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    uint64_t v15 = (char *)this + 328;
    unint64_t v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  long long v56 = 0u;
  long long v49 = 0u;
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = -1;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 1;
  long long v55 = 0uLL;
  unint64_t v17 = *((void *)this + 25);
  *(void *)&long long v56 = 0;
  unint64_t v18 = *((void *)this + 21);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 20, (v17 + 4) >> 2);
    unint64_t v18 = *((void *)this + 21);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v58 = 136315906;
    unsigned int v59 = "operator[]";
    __int16 v60 = 1024;
    int v61 = 858;
    __int16 v62 = 2048;
    unint64_t v63 = v17 >> 2;
    __int16 v64 = 2048;
    unint64_t v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 176)) {
    unint64_t v19 = (char *)this + 184;
  }
  else {
    unint64_t v19 = (char *)*((void *)this + 24);
  }
  uint64_t v20 = *(void *)&v19[8 * (v17 >> 2)];
  ++*((void *)this + 25);
  ++*((_DWORD *)this + 52);
  uint64_t v21 = v20 + 112 * (v17 & 3);
  long long v22 = v49;
  long long v23 = v50;
  long long v24 = v51;
  *(void *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)uint64_t v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  uint64_t v26 = *((void *)this + 25);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  uint64_t v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(void *)&v66[0] = *((void *)this + 25) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 216), v57, (uint64_t *)v66);
  unint64_t v28 = *((void *)this + 25);
  unint64_t v29 = *((void *)this + 40);
  if ((v28 & 0x3F) != 0) {
    unint64_t v30 = (v28 >> 6) + 1;
  }
  else {
    unint64_t v30 = v28 >> 6;
  }
  *((void *)this + 40) = v28;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    uint64_t v31 = 63;
    uint64_t v32 = *((void *)this + 40) & 0x3FLL;
    if (v32 && v32 != 63) {
      uint64_t v31 = ~(-1 << v32);
    }
    if (*((unsigned char *)this + 296)) {
      uint64_t v33 = (char *)this + 304;
    }
    else {
      uint64_t v33 = (char *)*((void *)this + 39);
    }
    *(void *)&v33[8 * *((void *)this + 36) - 8] &= v31;
  }
  unint64_t v34 = *((void *)this + 25);
  unint64_t v35 = *((void *)this + 46);
  if ((v34 & 0x3F) != 0) {
    unint64_t v36 = (v34 >> 6) + 1;
  }
  else {
    unint64_t v36 = v34 >> 6;
  }
  *((void *)this + 46) = v34;
  *(void *)&long long v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::CameraViewDescriptorsSystem *)((char *)this + 328), v36, &v49);
  if (v34 && v35 > v34)
  {
    uint64_t v37 = 63;
    uint64_t v38 = *((void *)this + 46) & 0x3FLL;
    if (v38 && v38 != 63) {
      uint64_t v37 = ~(-1 << v38);
    }
    if (*((unsigned char *)this + 344)) {
      int v39 = (char *)this + 352;
    }
    else {
      int v39 = (char *)*((void *)this + 45);
    }
    *(void *)&v39[8 * *((void *)this + 42) - 8] &= v37;
  }
  unint64_t v16 = *(void *)&v66[0];
  uint64_t v15 = (char *)this + 328;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((unsigned char *)this + 392)) {
    return;
  }
  unint64_t v40 = *((void *)this + 42);
  int v41 = *((_DWORD *)this + 86);
  if (v40 >= 0xB)
  {
    if (v41) {
      uint64_t v42 = (void *)((char *)this + 352);
    }
    else {
      uint64_t v42 = (void *)*((void *)this + 45);
    }
    uint64_t v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44) {
        return;
      }
    }
LABEL_65:
    unint64_t v48 = (re::ecs2::System *)*((void *)this + 47);
    if (!*((unsigned char *)v48 + 86)) {
      re::ecs2::System::queueToRun(v48, 0.0);
    }
    return;
  }
  if (v41)
  {
    uint64_t v43 = (uint64_t *)((char *)this + 352);
    if (!v40) {
      return;
    }
  }
  else
  {
    uint64_t v43 = (uint64_t *)*((void *)this + 45);
    if (!v40) {
      return;
    }
  }
  uint64_t v45 = 0;
  uint64_t v46 = 8 * v40;
  do
  {
    uint64_t v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45) {
    goto LABEL_65;
  }
}

uint64_t re::ecs2::CameraViewDescriptorsSystem::willRemoveSceneFromECSService(re::ecs2::CameraViewDescriptorsSystem *this, re::ecs2::Scene *a2)
{
  unint64_t v16 = a2;
  int v3 = (uint64_t *)((char *)this + 216);
  uint64_t result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)this + 27, &v16);
  if (result != -1)
  {
    uint64_t v5 = *((void *)this + 28) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(void *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(void *)(v5 + 8));
    unint64_t v6 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(void *)(v5 + 8));
    if (*v6)
    {
      int v7 = v6;
      *unint64_t v6 = 0;
      uint64_t v8 = v6 + 1;
      uint64_t v9 = *(void *)(v6[1] + 288);
      if (v9)
      {
        uint64_t v10 = v6[12];
        if (v10)
        {
          for (unint64_t i = 0; i != v10; ++i)
          {
            uint64_t v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(void *)v12, *(void *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      uint64_t v13 = 0;
      uint64_t v14 = v7 + 3;
      do
      {
        uint64_t v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(void *)v15) {
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        }
        v14[v13++] = -1;
      }
      while (v13 != 4);
      void *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

void re::ecs2::CameraViewDescriptorsComponent::snapshot(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v57 = *MEMORY[0x263EF8340];
  memset(v19, 0, sizeof(v19));
  long long v20 = xmmword_23435FBB0;
  __int16 v23 = 1;
  int v21 = 0;
  int v22 = 117440767;
  char v24 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  int v28 = 0;
  do
  {
    int v7 = &v19[v6];
    *((void *)v7 + 18) = 0;
    *((void *)v7 + 15) = 0;
    *((void *)v7 + 16) = 0;
    *((void *)v7 + 14) = 0;
    v6 += 40;
    *((_DWORD *)v7 + 34) = 0;
  }
  while (v6 != 80);
  char v30 = 0;
  long long v32 = xmmword_2343854A0;
  long long v31 = xmmword_2343854A0;
  long long v35 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  __int16 v36 = 1;
  char v37 = 0;
  uint64_t v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  int v41 = 0;
  v43[3] = re::globalAllocators(a1)[2];
  v43[4] = 0;
  unint64_t v8 = *(void *)(a2 + 16);
  if (v8 <= 1)
  {
    if (v8 != 1)
    {
      uint64_t v18 = 0;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v44 = 136315906;
      uint64_t v45 = "operator[]";
      __int16 v46 = 1024;
      int v47 = 789;
      __int16 v48 = 2048;
      uint64_t v49 = 0;
      __int16 v50 = 2048;
      uint64_t v51 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v9 = (unint64_t)objc_msgSend(**(id **)(a2 + 32), sel_arrayLength) > 1;
  }
  else
  {
    char v9 = 2;
  }
  char v30 = v9;
  HIBYTE(v36) = 1;
  re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>((uint64_t)v43, a3);
  re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::add((uint64_t)a1 + 280, (re::ecs2::CameraViewDescriptor *)v19);
  if (*(void *)(a2 + 16))
  {
    unint64_t v10 = 0;
    uint64_t v11 = (re::ecs2::CameraViewDescriptorsComponent *)(*((void *)a1 + 37) + 0x1FFFFLL);
    do
    {
      id v16 = *(id *)(*(void *)(a2 + 32) + 8 * v10);
      re::ecs2::SpecifyLaneCommand::SpecifyLaneCommand((uint64_t)v17, &v16, v10);
      re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, v11, (uint64_t)v17);
      for (uint64_t i = 112; i != 96; i -= 8)
      {
        uint64_t v13 = *(void **)((char *)v17 + i);
        if (v13)
        {

          *(void *)((char *)v17 + i) = 0;
        }
      }
      do
      {
        uint64_t v14 = *(void **)((char *)v17 + i);
        if (v14)
        {

          *(void *)((char *)v17 + i) = 0;
        }
        i -= 8;
      }
      while (i != 80);
      for (uint64_t j = 56; j != 8; j -= 24)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v17 + j));
      if (*(void *)&v17[0])
      {
        if (BYTE8(v17[0])) {
          (*(void (**)(void))(**(void **)&v17[0] + 40))();
        }
        memset(v17, 0, 32);
      }
      if (v16)
      {

        id v16 = 0;
      }
      ++v10;
    }
    while (*(void *)(a2 + 16) > v10);
  }
  re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor((re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)v19);
}

re::ecs2::CameraViewDescriptorsComponent *re::ecs2::CameraViewDescriptorsComponent::snapshotWithSettings(re *a1, uint64_t a2, const re::RuntimeRenderGraphDataStruct *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v59 = *MEMORY[0x263EF8340];
  memset(v22, 0, 32);
  v22[2] = (__n128)xmmword_23435FBB0;
  __int16 v25 = 1;
  int v23 = 0;
  int v24 = 117440767;
  char v26 = 0;
  uint64_t v31 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  int v30 = 0;
  do
  {
    char v9 = (char *)v22 + v8;
    *((void *)v9 + 18) = 0;
    *((void *)v9 + 15) = 0;
    *((void *)v9 + 16) = 0;
    *((void *)v9 + 14) = 0;
    v8 += 40;
    *((_DWORD *)v9 + 34) = 0;
  }
  while (v8 != 80);
  char v32 = 0;
  long long v34 = xmmword_2343854A0;
  long long v33 = xmmword_2343854A0;
  long long v37 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  __int16 v38 = 1;
  char v39 = 0;
  uint64_t v44 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  int v43 = 0;
  v45[3] = re::globalAllocators(a1)[2];
  v45[4] = 0;
  unint64_t v10 = *(void *)(a2 + 16);
  if (v10 <= 1)
  {
    if (v10 != 1)
    {
      uint64_t v21 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v54 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v46 = 136315906;
      int v47 = "operator[]";
      __int16 v48 = 1024;
      int v49 = 789;
      __int16 v50 = 2048;
      uint64_t v51 = 0;
      __int16 v52 = 2048;
      uint64_t v53 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    char v11 = (unint64_t)objc_msgSend(**(id **)(a2 + 32), sel_arrayLength) > 1;
  }
  else
  {
    char v11 = 2;
  }
  char v32 = v11;
  HIBYTE(v38) = 1;
  re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>((uint64_t)v45, a4);
  re::ecs2::CameraViewDescriptor::updateWithSettings(v22, a3);
  re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::add((uint64_t)a1 + 280, (re::ecs2::CameraViewDescriptor *)v22);
  uint64_t v12 = (re::ecs2::CameraViewDescriptorsComponent *)(*((void *)a1 + 37) + 0x1FFFFLL);
  if (*(void *)(a2 + 16))
  {
    unint64_t v13 = 0;
    do
    {
      id v19 = *(id *)(*(void *)(a2 + 32) + 8 * v13);
      re::ecs2::SpecifyLaneCommand::SpecifyLaneCommand((uint64_t)v20, &v19, v13);
      re::ecs2::CameraViewDescriptorsComponent::addSpecifyCommand(a1, v12, (uint64_t)v20);
      for (uint64_t i = 112; i != 96; i -= 8)
      {
        uint64_t v15 = *(void **)((char *)v20 + i);
        if (v15)
        {

          *(void *)((char *)v20 + i) = 0;
        }
      }
      do
      {
        id v16 = *(void **)((char *)v20 + i);
        if (v16)
        {

          *(void *)((char *)v20 + i) = 0;
        }
        i -= 8;
      }
      while (i != 80);
      for (uint64_t j = 56; j != 8; j -= 24)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)v20 + j));
      if (*(void *)&v20[0])
      {
        if (BYTE8(v20[0])) {
          (*(void (**)(void))(**(void **)&v20[0] + 40))();
        }
        memset(v20, 0, 32);
      }
      if (v19)
      {

        id v19 = 0;
      }
      ++v13;
    }
    while (*(void *)(a2 + 16) > v13);
  }
  re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor((re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)v22);
  return v12;
}

void re::ecs2::CameraViewDescriptorsComponent::getAspect(re::ecs2::CameraViewDescriptorsComponent *this, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, const re::RenderManager *a4, double a5)
{
  uint64_t v6 = *((void *)this + 27);
  if (v6 != 1)
  {
    if (!v6 && !*((void *)this + 32))
    {
      int v7 = (re::DrawingManager *)*((void *)a4 + 13);
      if (v7)
      {
        goto LABEL_36;
      }
      return;
    }
    goto LABEL_10;
  }
  if (*((void *)this + 32) || *(void *)(*((void *)this + 29) + 304))
  {
LABEL_10:
    uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
    if (!ViewDescriptor) {
      return;
    }
    uint64_t v9 = ViewDescriptor;
    uint64_t v10 = *(unsigned char *)(ViewDescriptor + 192) ? a3 : 0;
    if (!*(void *)(ViewDescriptor + 304)) {
      return;
    }
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v30 = 8 * v10;
    uint64_t v13 = 4 * v10 + 80;
    uint64_t v14 = 24 * v10 + 32;
    while (1)
    {
      uint64_t v15 = *(void *)(v9 + 320);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v32, (const re::AssetHandle *)(v15 + v14 + v11));
      if (*(unsigned char *)(v9 + 192) == 1) {
        re::AssetHandle::operator=((uint64_t)v32, (uint64_t *)(v15 + v11 + 32));
      }
      if (v33)
      {
        uint64_t v17 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v32);
        if (*(_DWORD *)(v17 + 240))
        {
          __int16 v25 = (re::ecs2::CameraViewDescriptorsComponent *)std::__throw_bad_variant_access[abi:nn180100]();
          re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v25, v26, v27, v28, v29);
          return;
        }
        id v18 = *(id *)(v17 + 160);
        objc_msgSend(v18, sel_width);
        objc_msgSend(v18, sel_height);
        if (v18) {
      }
        }
      else
      {
        unsigned int v19 = *(_DWORD *)(v15 + v13 + v11);
        if (v19 != -1)
        {
          long long v20 = (re::DrawingManager *)*((void *)a4 + 13);
          if (v20) {
            re::DrawingManager::layerAspect(v20, v19, v16);
          }
          goto LABEL_31;
        }
        uint64_t v21 = v15 + v30 + v11;
        int v22 = *(void **)(v21 + 88);
        if (v22)
        {
          objc_msgSend(v22, sel_width);
          int v23 = *(void **)(v21 + 88);
LABEL_30:
          objc_msgSend(v23, sel_height);
          goto LABEL_31;
        }
        int v24 = *(void **)(v21 + 104);
        if (v24)
        {
          objc_msgSend(v24, sel_width);
          int v23 = *(void **)(v21 + 104);
          goto LABEL_30;
        }
      }
LABEL_31:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
      ++v12;
      v11 += 136;
      if (*(void *)(v9 + 304) <= v12) {
        return;
      }
    }
  }
  LODWORD(a5) = *(_DWORD *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, 0) + 204);
  int v7 = (re::DrawingManager *)*((void *)a4 + 13);
  if (v7) {
LABEL_36:
  }
    re::DrawingManager::layerAspect(v7, 0, a5);
}

uint64_t re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(re::ecs2::CameraViewDescriptorsComponent *this, uint64_t a2, float *a3, double a4, double a5)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)this + 27);
  if (v8 != 1)
  {
    if (!v8)
    {
      if (*((void *)this + 32))
      {
        __int16 v38 = this;
        uint64_t v40 = 0;
        goto LABEL_16;
      }
      goto LABEL_8;
    }
LABEL_6:
    int v9 = 0;
    __int16 v38 = this;
    uint64_t v40 = 0;
    goto LABEL_20;
  }
  if (*((void *)this + 32)) {
    goto LABEL_6;
  }
  if (!*(void *)(re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, 0) + 304))
  {
LABEL_8:
    uint64_t v10 = *(void *)(a2 + 104);
    if (v10 && *(void *)(v10 + 1688) && **(void **)(v10 + 1704))
    {
      float LayerSize = re::DrawingManager::getLayerSize((re::DrawingManager *)v10, 0, a4, a5);
      *a3 = LayerSize;
      a3[1] = v12;
      return v12 != 0.0 && LayerSize != 0.0;
    }
  }
  uint64_t v14 = *((void *)this + 27);
  __int16 v38 = this;
  uint64_t v40 = 0;
  if (!v14)
  {
LABEL_16:
    if (*((void *)this + 32))
    {
      int v9 = 1;
    }
    else
    {
      if (!*((void *)this + 37)) {
        return 0;
      }
      int v9 = 2;
    }
    goto LABEL_20;
  }
  int v9 = 0;
LABEL_20:
  int v39 = v9;
  while (1)
  {
    uint64_t v15 = re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator*(&v38);
    if (*(void *)(v15 + 304)) {
      break;
    }
LABEL_31:
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v38);
    if (v38 == this && v39 == 3 && v40 == 0) {
      return 0;
    }
  }
  uint64_t v16 = v15;
  float v18 = *(float *)(v15 + 204);
  float v17 = *(float *)(v15 + 208);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v36, (const re::AssetHandle *)(*(void *)(v15 + 320) + 32));
  if (v37)
  {
    uint64_t v28 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)v36);
    if (*(_DWORD *)(v28 + 240))
    {
      long long v35 = (re::ecs2::CameraViewDescriptorsComponentStateImpl *)std::__throw_bad_variant_access[abi:nn180100]();
      return re::ecs2::CameraViewDescriptorsComponentStateImpl::dependsOnComponents(v35);
    }
    id v29 = *(id *)(v28 + 160);
    *a3 = v18 * (float)(unint64_t)objc_msgSend(v29, sel_width);
    a3[1] = v17 * (float)(unint64_t)objc_msgSend(v29, sel_height);
    if (v29) {

    }
LABEL_48:
    BOOL v13 = 1;
    goto LABEL_49;
  }
  if (!*(void *)(v16 + 304))
  {
    uint64_t v41 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v42 = 136315906;
    int v43 = "operator[]";
    __int16 v44 = 1024;
    int v45 = 797;
    __int16 v46 = 2048;
    uint64_t v47 = 0;
    __int16 v48 = 2048;
    uint64_t v49 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v21 = *(void *)(v16 + 320);
  unint64_t v22 = *(unsigned int *)(v21 + 80);
  if (v22 == -1
    || (int v23 = *(re::DrawingManager **)(a2 + 104)) == 0
    || *((void *)v23 + 211) <= v22
    || !*(void *)(*((void *)v23 + 213) + 32 * v22))
  {
    int v24 = *(void **)(v21 + 88);
    if (!v24)
    {
      __int16 v25 = *(void **)(v21 + 104);
      if (!v25)
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v36);
        goto LABEL_31;
      }
      *a3 = v18 * (float)(unint64_t)objc_msgSend(v25, sel_width);
      if (*(void *)(v16 + 304))
      {
        uint64_t v30 = *(void **)(*(void *)(v16 + 320) + 104);
        goto LABEL_47;
      }
LABEL_56:
      uint64_t v41 = 0;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v42 = 136315906;
      int v43 = "operator[]";
      __int16 v44 = 1024;
      int v45 = 797;
      __int16 v46 = 2048;
      uint64_t v47 = 0;
      __int16 v48 = 2048;
      uint64_t v49 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *a3 = v18 * (float)(unint64_t)objc_msgSend(v24, sel_width);
    if (*(void *)(v16 + 304))
    {
      uint64_t v30 = *(void **)(*(void *)(v16 + 320) + 88);
LABEL_47:
      a3[1] = v17 * (float)(unint64_t)objc_msgSend(v30, sel_height);
      goto LABEL_48;
    }
LABEL_55:
    uint64_t v41 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v42 = 136315906;
    int v43 = "operator[]";
    __int16 v44 = 1024;
    int v45 = 797;
    __int16 v46 = 2048;
    uint64_t v47 = 0;
    __int16 v48 = 2048;
    uint64_t v49 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_56;
  }
  float v32 = v18 * re::DrawingManager::getLayerSize(v23, v22, v19, v20);
  float v34 = v17 * v33;
  *a3 = v32;
  a3[1] = v34;
  BOOL v13 = v34 != 0.0 && v32 != 0.0;
LABEL_49:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v36);
  return v13;
}

uint64_t re::ecs2::CameraViewDescriptorsComponentStateImpl::dependsOnComponents(re::ecs2::CameraViewDescriptorsComponentStateImpl *this)
{
  return *((void *)this + 10);
}

void re::ecs2::CameraViewDescriptorsSystem::~CameraViewDescriptorsSystem(re::ecs2::CameraViewDescriptorsSystem *this)
{
  *((void *)this + 50) = &unk_26E6FD558;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 58);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 55);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 52);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *((void *)this + 50) = &unk_26E6FD558;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 58);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 55);
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 52);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 20);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::CameraViewDescriptorsSystem::typeInfo(re::ecs2::CameraViewDescriptorsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CameraViewDescriptorsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CameraViewDescriptorsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CameraViewDescriptorsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CameraViewDescriptorsSystem>, 0);
}

void re::RuntimeRenderGraphDataStruct::getValueOfType<BOOL>(char *__s2@<X1>, void *a2@<X0>, unsigned char *a3@<X8>)
{
  uint64_t v4 = a2[5];
  if (!v4) {
    goto LABEL_8;
  }
  int v7 = (uint64_t *)a2[7];
  uint64_t v8 = 8 * v4;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      goto LABEL_8;
    }
  }
  {
    re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v12);
  }
  if (re::introspect<BOOL>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v10 = *(int *)(v9 + 36);
    if (a2[10] <= v10)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v11 = a2[12];
    *a3 = 1;
    a3[1] = *(unsigned char *)(v11 + v10);
  }
  else
  {
LABEL_8:
    *a3 = 0;
  }
}

__n128 re::RuntimeRenderGraphDataStruct::getValueOfType<re::Vector4<float>>@<Q0>(char *__s2@<X1>, void *a2@<X0>, __n128 *a3@<X8>)
{
  uint64_t v4 = a2[5];
  if (!v4) {
    goto LABEL_8;
  }
  int v7 = (uint64_t *)a2[7];
  uint64_t v8 = 8 * v4;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      goto LABEL_8;
    }
  }
  {
    re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
  }
  if (re::introspect<re::Vector4<float>>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v11 = *(int *)(v9 + 36);
    if (a2[10] <= v11)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = a2[12];
    a3->n128_u8[0] = 1;
    __n128 result = *(__n128 *)(v12 + v11);
    a3[1] = result;
  }
  else
  {
LABEL_8:
    a3->n128_u8[0] = 0;
  }
  return result;
}

float re::RuntimeRenderGraphDataStruct::getValueOfType<float>@<S0>(char *__s2@<X1>, void *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[5];
  if (!v4) {
    goto LABEL_8;
  }
  int v7 = (uint64_t *)a2[7];
  uint64_t v8 = 8 * v4;
  while (1)
  {
    uint64_t v9 = *v7;
    if (!strcmp(*(const char **)(*v7 + 8), __s2)) {
      break;
    }
    ++v7;
    v8 -= 8;
    if (!v8) {
      goto LABEL_8;
    }
  }
  {
    re::introspect<float>(void)::info = re::introspect_float(0, v13);
  }
  if (re::introspect<float>(void)::info == *(_UNKNOWN **)(v9 + 16))
  {
    unint64_t v11 = *(int *)(v9 + 36);
    if (a2[10] <= v11)
    {
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    uint64_t v12 = a2[12];
    *(unsigned char *)a3 = 1;
    float result = *(float *)(v12 + v11);
    *(float *)(a3 + 4) = result;
  }
  else
  {
LABEL_8:
    *(unsigned char *)a3 = 0;
  }
  return result;
}

void *re::DynamicArray<re::CameraMultiView>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      float result = (void *)*result;
      if (!*v5)
      {
        float result = (void *)re::DynamicArray<re::CameraMultiView>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x550uLL))
        {
          uint64_t v2 = 1360 * a2;
          float result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 1360 * a2, 16);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1360, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        float result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + 1360 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::CameraMultiView::CameraMultiView(v11, v8);
          uint64_t v12 = 1344;
          do
          {
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(v8 + v12 - 400);
            re::DynamicArray<re::RenderGraphFileProvider>::deinit(v8 + v12 - 448);
            re::DynamicString::deinit((re::DynamicString *)(v8 + v12 - 672));
            v12 -= 672;
          }
          while (v12);
          v8 += 1360;
          v11 += 1360;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      float result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::CameraMultiView::CameraMultiView(uint64_t result, uint64_t a2)
{
  char v2 = 0;
  uint64_t v3 = 0;
  do
  {
    uint64_t v4 = result + 672 * v3;
    uint64_t v5 = a2 + 672 * v3;
    *(_OWORD *)uint64_t v4 = 0uLL;
    *(_OWORD *)(v4 + 16) = 0uLL;
    *(void *)(v4 + 24) = *(void *)(v5 + 24);
    uint64_t v6 = *(void *)(v5 + 8);
    *(void *)uint64_t v4 = *(void *)v5;
    *(void *)uint64_t v5 = 0;
    uint64_t v7 = *(void *)(v5 + 16);
    *(void *)(v5 + 24) = 0;
    uint64_t v9 = *(void *)(v4 + 8);
    uint64_t v8 = *(void *)(v4 + 16);
    *(void *)(v4 + 8) = v6;
    *(void *)(v4 + 16) = v7;
    char v10 = v2;
    *(void *)(v5 + 8) = v9;
    *(void *)(v5 + 16) = v8;
    long long v11 = *(_OWORD *)(v5 + 32);
    long long v12 = *(_OWORD *)(v5 + 48);
    long long v13 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(v4 + 80) = v13;
    *(_OWORD *)(v4 + 32) = v11;
    *(_OWORD *)(v4 + 48) = v12;
    long long v14 = *(_OWORD *)(v5 + 96);
    long long v15 = *(_OWORD *)(v5 + 112);
    long long v16 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(v4 + 128) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(v4 + 144) = v16;
    *(_OWORD *)(v4 + 96) = v14;
    *(_OWORD *)(v4 + 112) = v15;
    long long v17 = *(_OWORD *)(v5 + 160);
    long long v18 = *(_OWORD *)(v5 + 176);
    long long v19 = *(_OWORD *)(v5 + 208);
    *(_OWORD *)(v4 + 192) = *(_OWORD *)(v5 + 192);
    *(_OWORD *)(v4 + 208) = v19;
    *(_OWORD *)(v4 + 160) = v17;
    *(_OWORD *)(v4 + 176) = v18;
    *(void *)(v4 + 256) = 0;
    *(_DWORD *)(v4 + 248) = 0;
    *(void *)(v4 + 232) = 0;
    *(void *)(v4 + 240) = 0;
    *(void *)(v4 + 224) = 0;
    uint64_t v20 = *(void *)(v5 + 232);
    *(void *)(v4 + 224) = *(void *)(v5 + 224);
    *(void *)(v4 + 232) = v20;
    *(void *)(v5 + 224) = 0;
    *(void *)(v5 + 232) = 0;
    uint64_t v21 = *(void *)(v4 + 240);
    *(void *)(v4 + 240) = *(void *)(v5 + 240);
    *(void *)(v5 + 240) = v21;
    uint64_t v22 = *(void *)(v4 + 256);
    *(void *)(v4 + 256) = *(void *)(v5 + 256);
    *(void *)(v5 + 256) = v22;
    ++*(_DWORD *)(v5 + 248);
    ++*(_DWORD *)(v4 + 248);
    *(_WORD *)(v4 + 264) = *(_WORD *)(v5 + 264);
    *(void *)(v4 + 304) = 0;
    *(_DWORD *)(v4 + 296) = 0;
    *(void *)(v4 + 280) = 0;
    *(void *)(v4 + 288) = 0;
    *(void *)(v4 + 272) = 0;
    uint64_t v23 = *(void *)(v5 + 280);
    *(void *)(v4 + 272) = *(void *)(v5 + 272);
    *(void *)(v4 + 280) = v23;
    *(void *)(v5 + 272) = 0;
    *(void *)(v5 + 280) = 0;
    uint64_t v24 = *(void *)(v4 + 288);
    *(void *)(v4 + 288) = *(void *)(v5 + 288);
    *(void *)(v5 + 288) = v24;
    uint64_t v25 = *(void *)(v4 + 304);
    *(void *)(v4 + 304) = *(void *)(v5 + 304);
    *(void *)(v5 + 304) = v25;
    ++*(_DWORD *)(v5 + 296);
    ++*(_DWORD *)(v4 + 296);
    *(_OWORD *)(v4 + 320) = *(_OWORD *)(v5 + 320);
    long long v26 = *(_OWORD *)(v5 + 336);
    long long v27 = *(_OWORD *)(v5 + 352);
    long long v28 = *(_OWORD *)(v5 + 368);
    *(void *)(v4 + 384) = *(void *)(v5 + 384);
    *(_OWORD *)(v4 + 352) = v27;
    *(_OWORD *)(v4 + 368) = v28;
    *(_OWORD *)(v4 + 336) = v26;
    *(unsigned char *)(v4 + 400) = *(unsigned char *)(v5 + 400);
    LODWORD(v5) = *(unsigned __int8 *)(v5 + 401);
    *(unsigned char *)(v4 + 401) = v5;
    if (v5) {
      *(unsigned char *)(result + 672 * v3 + 402) = *(unsigned char *)(a2 + 672 * v3 + 402);
    }
    int v29 = *(unsigned __int8 *)(a2 + 672 * v3 + 404);
    *(unsigned char *)(result + 672 * v3 + 404) = v29;
    if (v29) {
      *(_DWORD *)(result + 672 * v3 + 408) = *(_DWORD *)(a2 + 672 * v3 + 408);
    }
    uint64_t v30 = 672 * v3;
    uint64_t v31 = result + v30;
    uint64_t v32 = a2 + v30;
    long long v33 = *(_OWORD *)(v32 + 416);
    long long v34 = *(_OWORD *)(v32 + 432);
    long long v35 = *(_OWORD *)(v32 + 464);
    *(_OWORD *)(v31 + 448) = *(_OWORD *)(v32 + 448);
    *(_OWORD *)(v31 + 464) = v35;
    *(_OWORD *)(v31 + 416) = v33;
    *(_OWORD *)(v31 + 432) = v34;
    long long v36 = *(_OWORD *)(v32 + 480);
    long long v37 = *(_OWORD *)(v32 + 496);
    long long v38 = *(_OWORD *)(v32 + 528);
    *(_OWORD *)(v31 + 512) = *(_OWORD *)(v32 + 512);
    *(_OWORD *)(v31 + 528) = v38;
    *(_OWORD *)(v31 + 480) = v36;
    *(_OWORD *)(v31 + 496) = v37;
    long long v40 = *(_OWORD *)(v32 + 624);
    long long v39 = *(_OWORD *)(v32 + 640);
    long long v41 = *(_OWORD *)(v32 + 608);
    *(void *)(v31 + 653) = *(void *)(v32 + 653);
    *(_OWORD *)(v31 + 624) = v40;
    *(_OWORD *)(v31 + 640) = v39;
    *(_OWORD *)(v31 + 608) = v41;
    long long v42 = *(_OWORD *)(v32 + 544);
    long long v43 = *(_OWORD *)(v32 + 560);
    long long v44 = *(_OWORD *)(v32 + 592);
    *(_OWORD *)(v31 + 576) = *(_OWORD *)(v32 + 576);
    *(_OWORD *)(v31 + 592) = v44;
    *(_OWORD *)(v31 + 544) = v42;
    *(_OWORD *)(v31 + 560) = v43;
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v10 & 1) == 0);
  *(_WORD *)(result + 1344) = *(_WORD *)(a2 + 1344);
  return result;
}

void re::PipelineCompilationData::~PipelineCompilationData(re::PipelineCompilationData *this)
{
}

uint64_t re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::~SmallHashTable(uint64_t a1)
{
  char v2 = (void *)(a1 + 16);
  re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear((void *)(a1 + 16));
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(a1 + 1696));
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(a1 + 1696));
  re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear(v2);
  return a1;
}

void *re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear(void *result)
{
  uint64_t v1 = result;
  if (*result)
  {
    uint64_t v2 = 416 * *result;
    uint64_t v3 = result + 26;
    do
    {
      uint64_t v4 = (void *)v3[3];
      if (v4)
      {

        v3[3] = 0;
      }
      float result = (void *)re::FixedArray<CoreIKTransform>::deinit(v3);
      *(v3 - 24) = 0;
      v3 += 52;
      v2 -= 416;
    }
    while (v2);
  }
  void *v1 = 0;
  ++*((_DWORD *)v1 + 2);
  return result;
}

double re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free(a1[2] + v3);
        ++v4;
        v3 += 416;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free(uint64_t result)
{
  if ((*(_DWORD *)result & 0x80000000) != 0)
  {
    uint64_t v1 = result;
    *(_DWORD *)result &= ~0x80000000;
    *(void *)(result + 8) = 0;
    uint64_t v2 = *(void **)(result + 216);
    if (v2)
    {

      *(void *)(v1 + 216) = 0;
    }
    return re::FixedArray<CoreIKTransform>::deinit((uint64_t *)(v1 + 192));
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(a2);
  *(void *)a2 = a3;
  double result = re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::ScopeLanePair>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  memset(v14, 0, sizeof(v14));
  long long v13 = 0u;
  uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v12, 0);
  memset(&v14[16], 0, 24);
  re::DynamicString::setCapacity(&v14[8], 0);
  v9.n128_f64[0] = re::DynamicArray<re::ecs2::ScopeLanePair>::add(a4, &v12);
  if (*(void *)&v14[8])
  {
    if (v14[16]) {
      (*(void (**)(double))(**(void **)&v14[8] + 40))(v9.n128_f64[0]);
    }
    __n128 v9 = 0uLL;
    memset(&v14[8], 0, 32);
  }
  if (v12 && (v13 & 1) != 0) {
    (*(void (**)(__n128))(*v12 + 40))(v9);
  }
  unint64_t v10 = (re::IntrospectionBase *)(*((void *)a4 + 4) + (*((void *)a4 + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::ScopeLanePair>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + (a3 << 6);
}

void re::DynamicArray<re::ecs2::ScopeLanePair>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    unint64_t v9 = a2 << 6;
    unint64_t v10 = a2;
    do
    {
      unint64_t v11 = *((void *)v3 + 4) + v9;
      re::DynamicString::deinit((re::DynamicString *)(v11 + 32));
      re::DynamicString::deinit((re::DynamicString *)v11);
      ++v10;
      v9 += 64;
    }
    while (v10 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      unint64_t v6 = v4 << 6;
      do
      {
        unint64_t v7 = *((void *)v3 + 4) + v6;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)unint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        uint64_t v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)(v7 + 32), 0);
        v6 += 64;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

double re::DynamicArray<re::ecs2::ScopeLanePair>::add(_anonymous_namespace_ *this, void *a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4) + (v4 << 6);
  double result = 0.0;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 24) = a2[3];
  uint64_t v7 = a2[1];
  *(void *)uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v8 = a2[2];
  a2[3] = 0;
  uint64_t v10 = *(void *)(v5 + 8);
  uint64_t v9 = *(void *)(v5 + 16);
  *(void *)(v5 + 8) = v7;
  *(void *)(v5 + 16) = v8;
  a2[1] = v10;
  a2[2] = v9;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(void *)(v5 + 56) = a2[7];
  uint64_t v11 = a2[5];
  *(void *)(v5 + 32) = a2[4];
  a2[4] = 0;
  uint64_t v12 = a2[6];
  a2[7] = 0;
  uint64_t v14 = *(void *)(v5 + 40);
  uint64_t v13 = *(void *)(v5 + 48);
  *(void *)(v5 + 40) = v11;
  *(void *)(v5 + 48) = v12;
  a2[5] = v14;
  a2[6] = v13;
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void *re::DynamicArray<re::ecs2::ScopeLanePair>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  double result = re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::ScopeLanePair>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = v9 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 64;
        v11 -= 64;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::ScopeLanePair>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = v2 << 6;
    do
    {
      re::DynamicString::deinit((re::DynamicString *)(v3 + 32));
      re::DynamicString::deinit((re::DynamicString *)v3);
      v3 += 64;
      v4 -= 64;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + ((uint64_t)v3 << 6);
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::ScopeLanePair>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::SpecifyLaneCommand>::resize((_anonymous_namespace_ *)a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  memset(v19, 0, sizeof(v19));
  long long v18 = 0u;
  long long v16 = 0u;
  memset(v17, 0, sizeof(v17));
  re::DynamicString::setCapacity(&v15, 0);
  memset((char *)v17 + 8, 0, 48);
  *((void *)&v17[3] + 1) = -1;
  long long v18 = 0u;
  memset(v19, 0, 28);
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::add(a4, (uint64_t)&v15);
  for (uint64_t i = 14; i != 12; --i)
  {
    uint64_t v9 = (&v15)[i];
    if (v9)
    {

      (&v15)[i] = 0;
    }
  }
  for (uint64_t j = 12; j != 10; --j)
  {
    uint64_t v11 = (&v15)[j];
    if (v11)
    {

      (&v15)[j] = 0;
    }
  }
  for (uint64_t k = 7; k != 1; k -= 3)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&(&v15)[k]);
  if (v15 && (v16 & 1) != 0) {
    (*(void (**)(void))(*v15 + 40))();
  }
  uint64_t v13 = (re::IntrospectionBase *)(*((void *)a4 + 4) + 136 * *((void *)a4 + 2) - 136);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SpecifyLaneCommand>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 136 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 136 * a3;
}

void *re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          uint64_t v2 = 136 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            unint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      unint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 136 * v9;
        uint64_t v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::ecs2::SpecifyLaneCommand>(v8, v11);
          v8 += 136;
          v11 += 136;
          v10 -= 136;
        }
        while (v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ObjectHelper::move<re::ecs2::SpecifyLaneCommand>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)a1 = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  do
  {
    uint64_t v8 = (void *)(a2 + v3);
    uint64_t v9 = (void *)(a1 + v3);
    v8[4] = 0;
    void v8[5] = 0;
    v8[6] = 0;
    void v8[5] = *(void *)(a1 + v3 + 40);
    v9[5] = 0;
    uint64_t v10 = *(void *)(a2 + v3 + 32);
    v8[4] = 0;
    v8[4] = *(void *)(a1 + v3 + 32);
    _OWORD v9[4] = v10;
    uint64_t v11 = *(void *)(a2 + v3 + 48);
    v8[6] = *(void *)(a1 + v3 + 48);
    void v9[6] = v11;
    v3 += 24;
  }
  while (v3 != 48);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  for (uint64_t i = 88; i != 104; i += 8)
  {
    *(void *)(a2 + i) = *(void *)(a1 + i);
    *(void *)(a1 + i) = 0;
  }
  do
  {
    *(void *)(a2 + i) = *(void *)(a1 + i);
    *(void *)(a1 + i) = 0;
    i += 8;
  }
  while (i != 120);
  uint64_t v13 = *(void *)(a1 + 120);
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 128);
  *(void *)(a2 + 120) = v13;
  for (uint64_t j = 112; j != 96; j -= 8)
  {
    long long v15 = *(void **)(a1 + j);
    if (v15)
    {

      *(void *)(a1 + j) = 0;
    }
  }
  do
  {
    long long v16 = *(void **)(a1 + j);
    if (v16)
    {

      *(void *)(a1 + j) = 0;
    }
    j -= 8;
  }
  while (j != 80);
  for (uint64_t k = 56; k != 8; k -= 24)
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + k));
  return re::DynamicString::deinit((re::DynamicString *)a1);
}

void re::DynamicArray<re::ecs2::SpecifyLaneCommand>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v8 = 136 * a2;
    uint64_t v9 = 136 * a2 + 112;
    uint64_t v10 = 136 * a2 + 96;
    unint64_t v11 = a2;
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)v3 + 4);
      uint64_t v14 = v13 + v9;
      do
      {
        long long v15 = *(void **)(v14 + v12);
        if (v15)
        {

          *(void *)(v14 + v12) = 0;
        }
        v12 -= 8;
      }
      while (v12 != -16);
      uint64_t v16 = 0;
      uint64_t v17 = v13 + v10;
      do
      {
        long long v18 = *(void **)(v17 + v16);
        if (v18)
        {

          *(void *)(v17 + v16) = 0;
        }
        v16 -= 8;
      }
      while (v16 != -16);
      for (uint64_t i = 56; i != 8; i -= 24)
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v13 + v8 + i));
      re::DynamicString::deinit((re::DynamicString *)(v13 + 136 * v11++));
      v9 += 136;
      v10 += 136;
      v8 += 136;
    }
    while (v11 < *((void *)v3 + 2));
  }
  else
  {
    if (*((void *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity(a1, a2);
      unint64_t v4 = *((void *)v3 + 2);
    }
    unint64_t v5 = a2 - v4;
    if (a2 > v4)
    {
      uint64_t v6 = 136 * v4;
      do
      {
        uint64_t v7 = *((void *)v3 + 4) + v6;
        *(void *)(v7 + 128) = 0;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((void *)v7, 0);
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(void *)(v7 + 80) = -1;
        *(_OWORD *)(v7 + 88) = 0u;
        *(_OWORD *)(v7 + 104) = 0u;
        v6 += 136;
        *(_OWORD *)(v7 + 116) = 0u;
        --v5;
      }
      while (v5);
    }
  }
  *((void *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((void *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(char **)(a1 + 32);
      uint64_t v11 = 136 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 136;
        v11 -= 136;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 136 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 136 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SpecifyLaneCommand>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

void *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::~IntrospectionDynamicArray(void *a1)
{
  *a1 = &unk_26E6BFB78;
  re::SerializedReference<re::IntrospectionBase const*>::reset((uint64_t)(a1 + 6));
  *a1 = &unk_26E6DECE0;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x237DBCBD0);
}

void re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

void *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::destroy(uint64_t a1, void *a2)
{
  return re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(a2);
}

void *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit((void *)a2);
  *(void *)a2 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((void *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!*(void *)a4)
  {
    *(void *)a4 = a2;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((void *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  unint64_t v10 = *(void *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::resize(a4, a5);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((void *)a4, a5);
    for (unint64_t i = a5 - *(void *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  uint64_t v8 = 0;
  uint64_t v30 = *MEMORY[0x263EF8340];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  memset(v17, 0, 32);
  void v17[2] = xmmword_23435FBB0;
  BYTE4(v18) = -1;
  WORD3(v18) = 1792;
  BYTE8(v18) = 1;
  BYTE12(v18) = 0;
  LODWORD(v20) = 0;
  do
  {
    uint64_t v9 = (char *)v17 + v8;
    *((void *)v9 + 18) = 0;
    *((void *)v9 + 15) = 0;
    *((void *)v9 + 16) = 0;
    *((void *)v9 + 14) = 0;
    v8 += 40;
    *((_DWORD *)v9 + 34) = 0;
  }
  while (v8 != 80);
  LOBYTE(v26[0]) = 0;
  *(_OWORD *)((char *)&v26[1] + 4) = xmmword_2343854A0;
  *(_OWORD *)((char *)v26 + 4) = xmmword_2343854A0;
  memset((char *)&v26[2] + 8, 0, 48);
  WORD4(v26[5]) = 1;
  BYTE10(v26[5]) = 0;
  *(void *)&long long v29 = 0;
  *(void *)&long long v28 = 0;
  long long v27 = 0uLL;
  DWORD2(v28) = 0;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(this, (uint64_t *)v17);
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)&v27);
  for (uint64_t i = 272; i != 256; i -= 8)
  {
    uint64_t v11 = *(void **)((char *)v17 + i);
    if (v11)
    {

      *(void *)((char *)v17 + i) = 0;
    }
  }
  do
  {
    uint64_t v12 = *(void **)((char *)v17 + i);
    if (v12)
    {

      *(void *)((char *)v17 + i) = 0;
    }
    i -= 8;
  }
  while (i != 240);
  do
  {
    uint64_t v13 = *(void **)((char *)v17 + i);
    if (v13)
    {

      *(void *)((char *)v17 + i) = 0;
    }
    i -= 8;
  }
  while (i != 224);
  for (uint64_t j = 152; j != 72; j -= 40)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v17 + j);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v19 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  long long v15 = (re::IntrospectionBase *)(*((void *)this + 4) + 336 * *((void *)this + 2) - 336);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v15);
  return v15;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::CameraViewDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 336 * a3;
}

{
  if (*(void *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a2 + 32) + 336 * a3;
}

void *re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x150uLL))
        {
          uint64_t v2 = 336 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 336 * a2, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 336, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = (uint64_t *)v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = 336 * v9;
        uint64_t v11 = v7;
        do
        {
          re::ObjectHelper::move<re::ecs2::CameraViewDescriptor>(v8, v11);
          v8 += 42;
          v11 += 42;
          v10 -= 336;
        }
        while (v10);
        uint64_t v8 = (uint64_t *)v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t *))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::ecs2::CameraViewDescriptor>(uint64_t *a1, uint64_t *a2)
{
  re::ecs2::CameraViewDescriptor::CameraViewDescriptor(a2, a1);
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)(a1 + 36));
  uint64_t v3 = 0;
  unint64_t v4 = a1 + 34;
  do
  {
    unint64_t v5 = (void *)v4[v3];
    if (v5)
    {

      v4[v3] = 0;
    }
    --v3;
  }
  while (v3 != -2);
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 32;
  do
  {
    uint64_t v8 = (void *)v7[v6];
    if (v8)
    {

      v7[v6] = 0;
    }
    --v6;
  }
  while (v6 != -2);
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 30;
  do
  {
    uint64_t v11 = (void *)v10[v9];
    if (v11)
    {

      v10[v9] = 0;
    }
    --v9;
  }
  while (v9 != -2);
  for (uint64_t i = 19; i != 9; i -= 5)
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&a1[i]);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)(a1 + 9));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)a1);
}

uint64_t *re::ecs2::CameraViewDescriptor::CameraViewDescriptor(uint64_t *result, uint64_t *a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  result[1] = a2[1];
  a2[1] = 0;
  uint64_t v2 = *result;
  *uint64_t result = 0;
  *uint64_t result = *a2;
  *a2 = v2;
  uint64_t v3 = result[2];
  result[2] = a2[2];
  a2[2] = v3;
  long long v4 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(result + 5) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(result + 3) = v4;
  *((unsigned char *)result + 56) = *((unsigned char *)a2 + 56);
  LODWORD(v3) = *((unsigned __int8 *)a2 + 57);
  *((unsigned char *)result + 57) = v3;
  if (v3) {
    *((unsigned char *)result + 58) = *((unsigned char *)a2 + 58);
  }
  int v5 = *((unsigned __int8 *)a2 + 60);
  *((unsigned char *)result + 60) = v5;
  if (v5) {
    *((_DWORD *)result + 16) = *((_DWORD *)a2 + 16);
  }
  uint64_t v6 = 0;
  result[13] = 0;
  result[10] = 0;
  result[11] = 0;
  result[9] = 0;
  *((_DWORD *)result + 24) = 0;
  uint64_t v7 = a2[10];
  result[9] = a2[9];
  result[10] = v7;
  a2[9] = 0;
  a2[10] = 0;
  uint64_t v8 = result[11];
  result[11] = a2[11];
  a2[11] = v8;
  uint64_t v9 = result[13];
  result[13] = a2[13];
  a2[13] = v9;
  ++*((_DWORD *)a2 + 24);
  ++*((_DWORD *)result + 24);
  do
  {
    uint64_t v10 = &result[v6];
    uint64_t v11 = &a2[v6];
    v10[18] = 0;
    v10[15] = 0;
    v10[16] = 0;
    v10[14] = 0;
    *((_DWORD *)v10 + 34) = 0;
    uint64_t v12 = a2[v6 + 15];
    v10[14] = a2[v6 + 14];
    v10[15] = v12;
    v11[14] = 0;
    v11[15] = 0;
    uint64_t v13 = result[v6 + 16];
    v10[16] = a2[v6 + 16];
    v11[16] = v13;
    uint64_t v14 = result[v6 + 18];
    v10[18] = a2[v6 + 18];
    v11[18] = v14;
    *((_DWORD *)v11 + 34) = LODWORD(a2[v6 + 17]) + 1;
    *((_DWORD *)v10 + 34) = LODWORD(result[v6 + 17]) + 1;
    v6 += 5;
  }
  while (v6 != 10);
  long long v15 = *((_OWORD *)a2 + 12);
  long long v16 = *((_OWORD *)a2 + 13);
  *((_DWORD *)result + 56) = *((_DWORD *)a2 + 56);
  *((_OWORD *)result + 12) = v15;
  *((_OWORD *)result + 13) = v16;
  for (uint64_t i = 29; i != 31; ++i)
  {
    result[i] = a2[i];
    a2[i] = 0;
  }
  do
  {
    result[i] = a2[i];
    a2[i++] = 0;
  }
  while (i != 33);
  do
  {
    result[i] = a2[i];
    a2[i++] = 0;
  }
  while (i != 35);
  __int16 v18 = *((_WORD *)a2 + 140);
  *((unsigned char *)result + 282) = *((unsigned char *)a2 + 282);
  *((_WORD *)result + 140) = v18;
  result[40] = 0;
  result[37] = 0;
  result[38] = 0;
  result[36] = 0;
  *((_DWORD *)result + 78) = 0;
  uint64_t v19 = a2[37];
  result[36] = a2[36];
  result[37] = v19;
  a2[36] = 0;
  a2[37] = 0;
  uint64_t v20 = result[38];
  result[38] = a2[38];
  a2[38] = v20;
  uint64_t v21 = result[40];
  result[40] = a2[40];
  a2[40] = v21;
  ++*((_DWORD *)a2 + 78);
  ++*((_DWORD *)result + 78);
  return result;
}

void re::DynamicArray<re::ecs2::CameraViewDescriptor>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2) {
      return;
    }
    uint64_t v11 = 336 * a2;
    uint64_t v12 = 336 * a2 + 272;
    uint64_t v13 = 336 * a2 + 256;
    uint64_t v14 = 336 * a2 + 240;
    unint64_t v15 = a2;
    do
    {
      uint64_t v16 = *(void *)(a1 + 32);
      re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit(v16 + 336 * v15 + 288);
      uint64_t v17 = 0;
      uint64_t v18 = v16 + v12;
      do
      {
        uint64_t v19 = *(void **)(v18 + v17);
        if (v19)
        {

          *(void *)(v18 + v17) = 0;
        }
        v17 -= 8;
      }
      while (v17 != -16);
      uint64_t v20 = 0;
      uint64_t v21 = v16 + v13;
      do
      {
        long long v22 = *(void **)(v21 + v20);
        if (v22)
        {

          *(void *)(v21 + v20) = 0;
        }
        v20 -= 8;
      }
      while (v20 != -16);
      uint64_t v23 = 0;
      uint64_t v24 = v16 + v14;
      do
      {
        long long v25 = *(void **)(v24 + v23);
        if (v25)
        {

          *(void *)(v24 + v23) = 0;
        }
        v23 -= 8;
      }
      while (v23 != -16);
      for (uint64_t i = 152; i != 72; i -= 40)
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit(v16 + v11 + i);
      long long v27 = (re::AssetHandle *)(v16 + 336 * v15);
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v27 + 72);
      re::AssetHandle::~AssetHandle(v27);
      ++v15;
      v12 += 336;
      v13 += 336;
      v14 += 336;
      v11 += 336;
    }
    while (v15 < *(void *)(a1 + 16));
  }
  else
  {
    if (*(void *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((void *)a1, a2);
      unint64_t v4 = *(void *)(a1 + 16);
    }
    if (v4 < a2)
    {
      uint64_t v5 = 336 * v4;
      do
      {
        uint64_t v6 = 0;
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = v7 + 336 * v4;
        *(_OWORD *)(v8 + 304) = 0uLL;
        *(_OWORD *)(v8 + 320) = 0uLL;
        *(_OWORD *)(v8 + 272) = 0uLL;
        *(_OWORD *)(v8 + 288) = 0uLL;
        *(_OWORD *)(v8 + 240) = 0uLL;
        *(_OWORD *)(v8 + 256) = 0uLL;
        *(_OWORD *)(v8 + 208) = 0uLL;
        *(_OWORD *)(v8 + 224) = 0uLL;
        *(_OWORD *)(v8 + 160) = 0uLL;
        *(_OWORD *)(v8 + 176) = 0uLL;
        *(_OWORD *)(v8 + 128) = 0uLL;
        *(_OWORD *)(v8 + 144) = 0uLL;
        *(_OWORD *)(v8 + 96) = 0uLL;
        *(_OWORD *)(v8 + 112) = 0uLL;
        *(_OWORD *)(v8 + 64) = 0uLL;
        *(_OWORD *)(v8 + 80) = 0uLL;
        *(_OWORD *)(v8 + 32) = 0uLL;
        *(_OWORD *)(v8 + 48) = 0uLL;
        *(_OWORD *)(v8 + 192) = 0uLL;
        *(_OWORD *)uint64_t v8 = 0uLL;
        *(_OWORD *)(v8 + 16) = 0uLL;
        *(_OWORD *)(v8 + 32) = xmmword_23435FBB0;
        *(_DWORD *)(v8 + 48) = 0;
        *(_DWORD *)(v8 + 52) = 117440767;
        *(_WORD *)(v8 + 56) = 1;
        *(unsigned char *)(v8 + 60) = 0;
        *(void *)(v8 + 104) = 0;
        *(void *)(v8 + 80) = 0;
        *(void *)(v8 + 88) = 0;
        *(void *)(v8 + 72) = 0;
        *(_DWORD *)(v8 + 96) = 0;
        do
        {
          uint64_t v9 = v7 + v5 + v6;
          *(void *)(v9 + 144) = 0;
          *(void *)(v9 + 120) = 0;
          *(void *)(v9 + 128) = 0;
          *(void *)(v9 + 112) = 0;
          v6 += 40;
          *(_DWORD *)(v9 + 136) = 0;
        }
        while (v6 != 80);
        *(unsigned char *)(v8 + 192) = 0;
        uint64_t v10 = v7 + 336 * v4;
        *(_OWORD *)(v10 + 232) = 0uLL;
        v10 += 232;
        *(_OWORD *)(v10 - 20) = xmmword_2343854A0;
        *(_OWORD *)(v10 - 36) = xmmword_2343854A0;
        *(_OWORD *)(v10 + 16) = 0uLL;
        *(_OWORD *)(v10 + 32) = 0uLL;
        *(_WORD *)(v10 + 48) = 1;
        *(unsigned char *)(v10 + 50) = 0;
        *(void *)(v10 + 88) = 0;
        *(void *)(v10 + 64) = 0;
        *(void *)(v10 + 72) = 0;
        *(void *)(v10 + 56) = 0;
        *(_DWORD *)(v10 + 80) = 0;
        ++v4;
        v5 += 336;
      }
      while (v4 != a2);
    }
  }
  *(void *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = a3;
  uint64_t result = re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((void *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  if (*(re::Allocator **)a1 == a3)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(a1 + 32), (re::AssetHandle *)(*(void *)(a1 + 32) + 336 * v8));
  }
  else
  {
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit((void *)a1);
    *(void *)a1 = a3;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity((void *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(void **)a2, *(void *)(*(void *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = *(char **)(a1 + 32);
      uint64_t v12 = 336 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 336;
        v12 -= 336;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(void *)(a1 + 32) + 336 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, 16, 8);
  *(void *)uint64_t result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (a1[2] == *(_DWORD *)(*(void *)a1 + 24))
  {
    int v3 = a1[3];
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 < (int)v4) {
      a1[3] = ++v3;
    }
    if (v4 <= v3) {
      return 0;
    }
    else {
      return *(void *)(v2 + 32) + 336 * v3;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    uint64_t result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::CameraViewDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, result);
  }
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::CameraViewDescriptorsComponent>(uint64_t a1)
{
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E8B28;
  *(_DWORD *)(v3 + 28) = 0;
  objc_initWeak(v2, 0);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 364) = 0x7FFFFFFFLL;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::CameraViewDescriptorsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::DynamicArray<re::ecs2::CameraViewDescriptor>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

re::ecs2::CameraViewDescriptor *re::ecs2::CameraViewDescriptor::CameraViewDescriptor(re::ecs2::CameraViewDescriptor *this, const re::ecs2::CameraViewDescriptor *a2)
{
  unint64_t v4 = re::AssetHandle::AssetHandle(this, a2);
  long long v5 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)v4 + 40) = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)v4 + 24) = v5;
  *((unsigned char *)v4 + 56) = *((unsigned char *)a2 + 56);
  int v6 = *((unsigned __int8 *)a2 + 57);
  *((unsigned char *)v4 + 57) = v6;
  if (v6) {
    *((unsigned char *)this + 58) = *((unsigned char *)a2 + 58);
  }
  int v7 = *((unsigned __int8 *)a2 + 60);
  *((unsigned char *)this + 60) = v7;
  if (v7) {
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  }
  re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)this + 72, (uint64_t *)a2 + 9);
  for (uint64_t i = 112; i != 192; i += 40)
    re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)this + i, (uint64_t *)((char *)a2 + i));
  long long v9 = *((_OWORD *)a2 + 12);
  long long v10 = *((_OWORD *)a2 + 13);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_OWORD *)this + 12) = v9;
  *((_OWORD *)this + 13) = v10;
  for (uint64_t j = 232; j != 248; j += 8)
    *(void *)((char *)this + j) = *(id *)((char *)a2 + j);
  do
  {
    *(void *)((char *)this + j) = *(id *)((char *)a2 + j);
    j += 8;
  }
  while (j != 264);
  do
  {
    *(void *)((char *)this + j) = *(id *)((char *)a2 + j);
    j += 8;
  }
  while (j != 280);
  __int16 v12 = *((_WORD *)a2 + 140);
  *((unsigned char *)this + 282) = *((unsigned char *)a2 + 282);
  *((_WORD *)this + 140) = v12;
  re::DynamicArray<re::ecs2::SpecifyLaneCommand>::DynamicArray((uint64_t)this + 288, (uint64_t *)a2 + 36);
  return this;
}

uint64_t re::DynamicArray<re::ecs2::SpecifyLaneCommand>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::copy(a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::ecs2::SpecifyLaneCommand>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= *(void *)(a1 + 16))
  {
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::setCapacity((void *)a1, *(void *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *>((int)&v23, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 136 * *(void *)(a1 + 16)), *(re::DynamicString **)(a1 + 32));
    uint64_t v13 = *(void *)(a1 + 16);
    if (v13 != v4)
    {
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = v14 + 136 * v4;
      uint64_t v16 = 17 * v13;
      uint64_t v17 = v14 + 8 * v16;
      uint64_t v18 = *(void *)(a1 + 32) + 8 * v16;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)v18, (const re::DynamicString *)v17);
        for (uint64_t i = 32; i != 80; i += 24)
          re::AssetHandle::AssetHandle((re::AssetHandle *)(v18 + i), (const re::AssetHandle *)(v17 + i));
        *(void *)(v18 + 80) = *(void *)(v17 + 80);
        for (uint64_t j = 88; j != 104; j += 8)
          *(void *)(v18 + j) = *(id *)(v17 + j);
        do
        {
          *(void *)(v18 + j) = *(id *)(v17 + j);
          j += 8;
        }
        while (j != 120);
        uint64_t v21 = *(void *)(v17 + 120);
        *(_DWORD *)(v18 + 128) = *(_DWORD *)(v17 + 128);
        *(void *)(v18 + 120) = v21;
        v17 += 136;
        v18 += 136;
      }
      while (v17 != v15);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *>((int)&v22, *(re::DynamicString **)(a2 + 32), (re::DynamicString *)(*(void *)(a2 + 32) + 136 * v4), *(re::DynamicString **)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 16);
    if (v4 != v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = (re::DynamicString *)(v6 + 136 * v5);
      uint64_t v8 = (re::DynamicString *)(v6 + 136 * v4);
      do
      {
        for (uint64_t k = 112; k != 96; k -= 8)
        {
          long long v10 = *(void **)((char *)v8 + k);
          if (v10)
          {

            *(void *)((char *)v8 + k) = 0;
          }
        }
        do
        {
          uint64_t v11 = *(void **)((char *)v8 + k);
          if (v11)
          {

            *(void *)((char *)v8 + k) = 0;
          }
          k -= 8;
        }
        while (k != 80);
        for (uint64_t m = 56; m != 8; m -= 24)
          re::AssetHandle::~AssetHandle((re::DynamicString *)((char *)v8 + m));
        re::DynamicString::deinit(v8);
        uint64_t v8 = (re::DynamicString *)((char *)v8 + 136);
      }
      while (v8 != v7);
    }
  }
  *(void *)(a1 + 16) = v4;
}

re::DynamicString *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *,re::ecs2::SpecifyLaneCommand *>(int a1, re::DynamicString *a2, re::DynamicString *a3, re::DynamicString *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      re::DynamicString::operator=(this, v5);
      for (uint64_t i = 32; i != 80; i += 24)
        re::AssetHandle::operator=((uint64_t)this + i, (uint64_t *)((char *)v5 + i));
      *((void *)this + 10) = *((void *)v5 + 10);
      for (uint64_t j = 88; j != 104; j += 8)
        NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)this + j), (void **)((char *)v5 + j));
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)this + j), (void **)((char *)v5 + j));
        j += 8;
      }
      while (j != 120);
      uint64_t v9 = *((void *)v5 + 15);
      *((_DWORD *)this + 32) = *((_DWORD *)v5 + 32);
      *((void *)this + 15) = v9;
      uint64_t v5 = (re::DynamicString *)((char *)v5 + 136);
      this = (re::DynamicString *)((char *)this + 136);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x180uLL))
        {
          uint64_t v2 = 384 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 384 * a2, 16);
          if (result)
          {
            int v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 384, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      int v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 384 * v9;
        do
        {
          __int16 v12 = re::ecs2::CameraViewDescriptor::CameraViewDescriptor(&v7[v10 / 8], (uint64_t *)(v8 + v10));
          v12[45] = *(void *)(v8 + v10 + 360);
          v12[46] = 0;
          re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>((uint64_t)(v12 + 42), v8 + v10 + 336);
          re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor::~OneoffViewDescriptor((re::ecs2::CameraViewDescriptorsComponent::OneoffViewDescriptor *)(v8 + v10));
          v10 += 384;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)a1;
  if (*(void *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(void *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v26, v4, a2);
      long long v5 = *(_OWORD *)a1;
      *(void *)a1 = *(void *)v26;
      uint64_t v6 = *(void *)(a1 + 16);
      long long v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)long long v26 = v5;
      *(void *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      long long v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      unsigned int v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      unint64_t v10 = v8;
      if (v8)
      {
        unint64_t v11 = 0;
        int v12 = DWORD1(v9);
        uint64_t v13 = v7;
        uint64_t v14 = (void *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v14 - 2) & 0x80000000) != 0)
          {
            unint64_t v15 = *(v14 - 3);
            unint64_t v16 = *(unsigned int *)(a1 + 24);
            unint64_t v17 = v15 % v16;
            uint64_t v18 = *(unsigned int *)(a1 + 36);
            if (v18 == 0x7FFFFFFF)
            {
              uint64_t v18 = *(unsigned int *)(a1 + 32);
              int v19 = v18;
              if (v18 == v16)
              {
                re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * v12));
                unint64_t v17 = v15 % *(unsigned int *)(a1 + 24);
                int v19 = *(_DWORD *)(a1 + 32);
                uint64_t v13 = *(void *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
            }
            else
            {
              uint64_t v20 = *(void *)(a1 + 16);
              int v21 = *(_DWORD *)(v20 + 56 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 56 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + 56 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(void *)(*(void *)(a1 + 16) + 56 * v18) = v15;
            *(void *)(*(void *)(a1 + 16) + 56 * v18 + 16) = *(v14 - 1);
            uint64_t v22 = *(void *)(a1 + 16) + 56 * v18;
            *(_OWORD *)(v22 + 40) = 0u;
            *(_OWORD *)(v22 + 24) = 0u;
            *(void *)(v22 + 24) = *v14;
            *uint64_t v14 = 0;
            uint64_t v23 = *(void *)(v22 + 40);
            *(void *)(v22 + 40) = v14[2];
            void v14[2] = v23;
            *(void *)(v22 + 48) = v14[3];
            v14[3] = 0;
            uint64_t v24 = *(void *)(v22 + 32);
            *(void *)(v22 + 32) = v14[1];
            v14[1] = v24;
            uint64_t v13 = *(void *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            int v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          v14 += 7;
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long,re::DynamicString,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2) {
      signed int v25 = a2;
    }
    else {
      signed int v25 = 3;
    }
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::RenderOptionsService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::RenderOptionsService>(void)::info = re::ecs2::introspect_RenderOptionsService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::RenderOptionsService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::introspect<re::ecs2::RenderOptionsService>()
{
  uint64_t v0 = &qword_268772000;
  {
    uint64_t v0 = &qword_268772000;
    if (v2)
    {
      re::introspect<re::ecs2::RenderOptionsService>(void)::info = re::ecs2::introspect_RenderOptionsService(0);
      uint64_t v0 = &qword_268772000;
    }
  }
  return v0[315];
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  long long v9 = (uint64_t *)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          long long v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v40 = *(a2 - 1);
                uint64_t v41 = *v10;
                if (*(_DWORD *)(v40 + 28) < *(_DWORD *)(*v10 + 28))
                {
                  *unint64_t v10 = v40;
                  *(a2 - 1) = v41;
                }
                break;
              case 3uLL:
                uint64_t result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                long long v42 = v10 + 1;
                long long v43 = v10 + 2;
                long long v44 = v10 + 3;
                uint64_t result = (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v45 = *(a2 - 1);
                uint64_t v46 = v10[3];
                if (*(_DWORD *)(v45 + 28) < *(_DWORD *)(v46 + 28))
                {
                  *long long v44 = v45;
                  *(a2 - 1) = v46;
                  uint64_t v47 = *v44;
                  uint64_t v48 = *v43;
                  int v49 = *(_DWORD *)(*v44 + 28);
                  if (v49 < *(_DWORD *)(*v43 + 28))
                  {
                    uint64_t *v43 = v47;
                    *long long v44 = v48;
                    uint64_t v50 = *v42;
                    if (v49 < *(_DWORD *)(*v42 + 28))
                    {
                      v10[1] = v47;
                      _DWORD v10[2] = v50;
                      uint64_t v51 = *v10;
                      if (v49 < *(_DWORD *)(*v10 + 28))
                      {
                        *unint64_t v10 = v47;
                        v10[1] = v51;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            long long v52 = v10 + 1;
            BOOL v54 = v10 == a2 || v52 == a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 8;
                long long v56 = v10;
                do
                {
                  uint64_t v58 = *v56;
                  uint64_t v57 = v56[1];
                  long long v56 = v52;
                  int v59 = *(_DWORD *)(v57 + 28);
                  if (v59 < *(_DWORD *)(v58 + 28))
                  {
                    uint64_t v60 = v55;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v60) = v58;
                      uint64_t v61 = v60 - 8;
                      if (v60 == 8)
                      {
                        __int16 v62 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v58 = *(uint64_t *)((char *)v10 + v60 - 16);
                      v60 -= 8;
                    }
                    while (v59 < *(_DWORD *)(v58 + 28));
                    __int16 v62 = (uint64_t *)((char *)v10 + v61);
LABEL_85:
                    *__int16 v62 = v57;
                  }
                  long long v52 = v56 + 1;
                  v55 += 8;
                }
                while (v56 + 1 != a2);
              }
            }
            else if (!v54)
            {
              do
              {
                uint64_t v93 = *v9;
                uint64_t v92 = v9[1];
                long long v9 = v52;
                int v94 = *(_DWORD *)(v92 + 28);
                if (v94 < *(_DWORD *)(v93 + 28))
                {
                  do
                  {
                    *long long v52 = v93;
                    uint64_t v93 = *(v52 - 2);
                    --v52;
                  }
                  while (v94 < *(_DWORD *)(v93 + 28));
                  *long long v52 = v92;
                }
                long long v52 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  uint64_t v67 = &v10[v66];
                  uint64_t v68 = *v67;
                  if (2 * v65 + 2 < (uint64_t)v12)
                  {
                    uint64_t result = *(unsigned int *)(v68 + 28);
                    if ((int)result < *(_DWORD *)(v67[1] + 28))
                    {
                      uint64_t v68 = v67[1];
                      ++v67;
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  unsigned int v69 = &v10[v65];
                  uint64_t v70 = *v69;
                  int v71 = *(_DWORD *)(*v69 + 28);
                  if (*(_DWORD *)(v68 + 28) >= v71)
                  {
                    do
                    {
                      id v72 = v67;
                      uint64_t *v69 = v68;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t result = (2 * v66) | 1;
                      uint64_t v67 = &v10[result];
                      uint64_t v73 = 2 * v66 + 2;
                      uint64_t v68 = *v67;
                      if (v73 < (uint64_t)v12 && *(_DWORD *)(v68 + 28) < *(_DWORD *)(v67[1] + 28))
                      {
                        uint64_t v68 = v67[1];
                        ++v67;
                        uint64_t result = v73;
                      }
                      unsigned int v69 = v72;
                      uint64_t v66 = result;
                    }
                    while (*(_DWORD *)(v68 + 28) >= v71);
                    *id v72 = v70;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v74 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v75 = 0;
                uint64_t v76 = *v10;
                uint64_t v77 = v10;
                do
                {
                  unint64_t v78 = &v77[v75];
                  uint64_t v81 = v78[1];
                  unint64_t v79 = v78 + 1;
                  uint64_t v80 = v81;
                  uint64_t v82 = (2 * v75) | 1;
                  uint64_t v83 = 2 * v75 + 2;
                  if (v83 < v74)
                  {
                    uint64_t result = *(unsigned int *)(v80 + 28);
                    if ((int)result < *(_DWORD *)(v79[1] + 28))
                    {
                      uint64_t v80 = v79[1];
                      ++v79;
                      uint64_t v82 = v83;
                    }
                  }
                  uint64_t *v77 = v80;
                  uint64_t v77 = v79;
                  uint64_t v75 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
                if (v79 == --a2)
                {
                  *unint64_t v79 = v76;
                }
                else
                {
                  *unint64_t v79 = *a2;
                  *a2 = v76;
                  uint64_t v84 = (char *)v79 - (char *)v10 + 8;
                  if (v84 >= 9)
                  {
                    unint64_t v85 = (((unint64_t)v84 >> 3) - 2) >> 1;
                    unint64_t v86 = &v10[v85];
                    uint64_t v87 = *v86;
                    uint64_t v88 = *v79;
                    int v89 = *(_DWORD *)(*v79 + 28);
                    if (*(_DWORD *)(*v86 + 28) < v89)
                    {
                      do
                      {
                        uint64_t v90 = v86;
                        *unint64_t v79 = v87;
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        unint64_t v86 = &v10[v85];
                        uint64_t v87 = *v86;
                        unint64_t v79 = v90;
                      }
                      while (*(_DWORD *)(*v86 + 28) < v89);
                      uint64_t *v90 = v88;
                    }
                  }
                }
              }
              while (v74-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v9, &v9[v12 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v9 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            uint64_t *v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          int v17 = *(_DWORD *)(v16 + 28);
          if (*(_DWORD *)(*(v9 - 1) + 28) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(_DWORD *)(*(a2 - 1) + 28))
          {
            uint64_t v32 = v9 + 1;
            do
            {
              unint64_t v10 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *(_DWORD *)(*v10 + 28));
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              uint64_t v31 = v10[1];
              ++v10;
            }
            while (v17 >= *(_DWORD *)(v31 + 28));
          }
          long long v33 = a2;
          if (v10 < a2)
          {
            long long v33 = a2;
            do
              uint64_t v34 = *--v33;
            while (v17 < *(_DWORD *)(v34 + 28));
          }
          if (v10 < v33)
          {
            uint64_t v35 = *v10;
            uint64_t v36 = *v33;
            do
            {
              *unint64_t v10 = v36;
              uint64_t *v33 = v35;
              do
              {
                uint64_t v37 = v10[1];
                ++v10;
                uint64_t v35 = v37;
              }
              while (v17 >= *(_DWORD *)(v37 + 28));
              do
              {
                uint64_t v38 = *--v33;
                uint64_t v36 = v38;
              }
              while (v17 < *(_DWORD *)(v38 + 28));
            }
            while (v10 < v33);
          }
          long long v39 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            uint64_t *v9 = *v39;
          }
          a4 = 0;
          uint64_t *v39 = v16;
        }
        int v17 = *(_DWORD *)(v16 + 28);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 28) < v17);
        uint64_t v20 = &v9[v18];
        int v21 = a2;
        if (v18 == 1)
        {
          int v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 28) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 28) >= v17);
        }
        if (v20 >= v21)
        {
          long long v29 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          signed int v25 = &v9[v18];
          long long v26 = v21;
          do
          {
            *signed int v25 = v24;
            *long long v26 = v19;
            do
            {
              uint64_t v27 = v25[1];
              ++v25;
              uint64_t v19 = v27;
            }
            while (*(_DWORD *)(v27 + 28) < v17);
            do
            {
              uint64_t v28 = *--v26;
              uint64_t v24 = v28;
            }
            while (*(_DWORD *)(v28 + 28) >= v17);
          }
          while (v25 < v26);
          long long v29 = v25 - 1;
        }
        if (v29 != v9) {
          uint64_t *v9 = *v29;
        }
        *long long v29 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**,false>(v9, v29, a3, a4 & 1);
        a4 = 0;
        unint64_t v10 = v29 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v9, v29);
      unint64_t v10 = v29 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(v29 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = v29;
    if (!v30) {
      continue;
    }
    return result;
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  int v5 = *(_DWORD *)(*a2 + 28);
  int v6 = *(_DWORD *)(*result + 28);
  uint64_t v7 = *a3;
  int v8 = *(_DWORD *)(*a3 + 28);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 28) < *(_DWORD *)(*result + 28))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 28) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 28) < *(_DWORD *)(*a1 + 28))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 28) < *(_DWORD *)(v22 + 28))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        int v25 = *(_DWORD *)(*v20 + 28);
        if (v25 < *(_DWORD *)(*v19 + 28))
        {
          uint64_t *v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 28))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 28))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    int v14 = *(_DWORD *)(*v9 + 28);
    if (v14 < *(_DWORD *)(*v8 + 28))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 28))
        {
          int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      int v17 = a1;
LABEL_13:
      *int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CameraViewDescriptorsComponentStateImpl::processUpdatingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent> *,re::ecs2::ComponentBuckets<re::ecs2::CameraViewDescriptorsComponent>::BucketIteration,void *)::$_1 &,re::ecs2::CameraViewDescriptorsComponent**>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 28) < *(_DWORD *)(*a3 + 28))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 28) < *(_DWORD *)(*a2 + 28))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 28) < *(_DWORD *)(*a1 + 28))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

double re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v3 = *((unsigned int *)a1 + 8);
    if (v3)
    {
      uint64_t v4 = 0;
      for (unint64_t i = 0; i < v3; ++i)
      {
        uint64_t v6 = a1[2] + v4;
        int v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          uint64_t v8 = v6 + 24;
          re::DynamicArray<re::CameraMultiView>::deinit(v6 + 64);
          re::DynamicArray<re::CameraView>::deinit(v8);
          unint64_t v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 104;
      }
      uint64_t v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(void *)&double result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(void *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v32, v13, v12);
          long long v15 = *(_OWORD *)v32;
          *(_OWORD *)uint64_t v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v32[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v32[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 8);
              }
              v21 += 104;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 104 * v9 + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + 104 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 104 * v9 + 8) = v23 | 0x80000000;
  uint64_t v25 = 104 * v9;
  *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) = *(_DWORD *)(*(void *)(a1 + 16) + v25 + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + v25) = a3;
  *(void *)(*(void *)(a1 + 16) + v25 + 16) = *a4;
  uint64_t v26 = *(void *)(a1 + 16) + v25;
  *(void *)(v26 + 56) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  *(void *)(v26 + 32) = 0;
  *(void *)(v26 + 40) = 0;
  *(void *)(v26 + 24) = 0;
  *(void *)(v26 + 24) = *(void *)a5;
  *(void *)a5 = 0;
  *(void *)(v26 + 32) = *(void *)(a5 + 8);
  *(void *)(a5 + 8) = 0;
  uint64_t v27 = *(void *)(v26 + 40);
  *(void *)(v26 + 40) = *(void *)(a5 + 16);
  *(void *)(a5 + 16) = v27;
  uint64_t v28 = *(void *)(v26 + 56);
  *(void *)(v26 + 56) = *(void *)(a5 + 32);
  *(void *)(a5 + 32) = v28;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v26 + 48);
  *(void *)(v26 + 96) = 0;
  *(void *)(v26 + 72) = 0;
  *(void *)(v26 + 80) = 0;
  *(void *)(v26 + 64) = 0;
  *(_DWORD *)(v26 + 88) = 0;
  *(void *)(v26 + 64) = *(void *)(a5 + 40);
  *(void *)(a5 + 40) = 0;
  *(void *)(v26 + 72) = *(void *)(a5 + 48);
  *(void *)(a5 + 48) = 0;
  uint64_t v29 = *(void *)(v26 + 80);
  *(void *)(v26 + 80) = *(void *)(a5 + 56);
  *(void *)(a5 + 56) = v29;
  uint64_t v30 = *(void *)(v26 + 96);
  *(void *)(v26 + 96) = *(void *)(a5 + 72);
  *(void *)(a5 + 72) = v30;
  ++*(_DWORD *)(a5 + 64);
  ++*(_DWORD *)(v26 + 88);
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::ecs2::CameraViewDescriptorsComponentStateImpl::CameraViewArrays,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4 = 245;
  int v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    unint64_t v6 = v4 >> 1;
    int v7 = &v5[v4 >> 1];
    signed int v9 = *v7;
    uint64_t v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3) {
      int v5 = v8;
    }
    else {
      unint64_t v4 = v6;
    }
  }
  while (v4);
  uint64_t v10 = *v5;
  *(void *)a1 = a2;
  uint64_t v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  signed int v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v11 + 104 * v10, 16);
  if (v12)
  {
    BOOL v14 = v12;
    *(void *)(a1 + 8) = v12;
    if (v10) {
      memset_pattern16(v12, &unk_2343655D0, 4 * v10);
    }
    *(void *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::CameraView const*,re::CameraView const*,re::CameraView*>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 result)
{
  if (a1 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      re::DynamicString::operator=((re::DynamicString *)(a3 + v7), (re::DynamicString *)(a1 + v7));
      long long v9 = *(_OWORD *)(a1 + v7 + 32);
      long long v10 = *(_OWORD *)(a1 + v7 + 48);
      long long v11 = *(_OWORD *)(a1 + v7 + 80);
      *(_OWORD *)(v8 + 64) = *(_OWORD *)(a1 + v7 + 64);
      *(_OWORD *)(v8 + 80) = v11;
      *(_OWORD *)(v8 + 32) = v9;
      *(_OWORD *)(v8 + 48) = v10;
      long long v12 = *(_OWORD *)(a1 + v7 + 96);
      long long v13 = *(_OWORD *)(a1 + v7 + 112);
      long long v14 = *(_OWORD *)(a1 + v7 + 144);
      *(_OWORD *)(v8 + 128) = *(_OWORD *)(a1 + v7 + 128);
      *(_OWORD *)(v8 + 144) = v14;
      *(_OWORD *)(v8 + 96) = v12;
      *(_OWORD *)(v8 + 112) = v13;
      long long v15 = *(_OWORD *)(a1 + v7 + 160);
      long long v16 = *(_OWORD *)(a1 + v7 + 176);
      long long v17 = *(_OWORD *)(a1 + v7 + 208);
      *(_OWORD *)(v8 + 192) = *(_OWORD *)(a1 + v7 + 192);
      *(_OWORD *)(v8 + 208) = v17;
      *(_OWORD *)(v8 + 160) = v15;
      *(_OWORD *)(v8 + 176) = v16;
      re::DynamicArray<re::RenderGraphFileProvider>::operator=(a3 + v7 + 224, (uint64_t *)(a1 + v7 + 224));
      *(_WORD *)(v8 + 264) = *(_WORD *)(a1 + v7 + 264);
      re::DynamicArray<re::CameraView::PickupScopeLane>::operator=(a3 + v7 + 272, (uint64_t *)(a1 + v7 + 272));
      *(_OWORD *)(v8 + 320) = *(_OWORD *)(a1 + v7 + 320);
      long long v19 = *(_OWORD *)(a1 + v7 + 352);
      long long v18 = *(_OWORD *)(a1 + v7 + 368);
      long long v20 = *(_OWORD *)(a1 + v7 + 336);
      *(void *)(v8 + 384) = *(void *)(a1 + v7 + 384);
      *(_OWORD *)(v8 + 352) = v19;
      *(_OWORD *)(v8 + 368) = v18;
      *(_OWORD *)(v8 + 336) = v20;
      *(unsigned char *)(v8 + 400) = *(unsigned char *)(a1 + v7 + 400);
      if (*(unsigned char *)(a3 + v7 + 401) || *(unsigned char *)(a1 + v7 + 401))
      {
        if (!*(unsigned char *)(a3 + v7 + 401) || *(unsigned char *)(a1 + v7 + 401))
        {
          if (*(unsigned char *)(a3 + v7 + 401) || !*(unsigned char *)(a1 + v7 + 401))
          {
            *(unsigned char *)(a3 + v7 + 402) = *(unsigned char *)(a1 + v7 + 402);
          }
          else
          {
            *(unsigned char *)(v8 + 401) = 1;
            *(unsigned char *)(a3 + v7 + 402) = *(unsigned char *)(a1 + v7 + 402);
          }
        }
        else
        {
          *(unsigned char *)(v8 + 401) = 0;
        }
      }
      uint64_t v21 = a3 + v7;
      if (*(unsigned char *)(a3 + v7 + 404) || *(unsigned char *)(a1 + v7 + 404))
      {
        if (!*(unsigned char *)(a3 + v7 + 404) || *(unsigned char *)(a1 + v7 + 404))
        {
          if (*(unsigned char *)(a3 + v7 + 404) || !*(unsigned char *)(a1 + v7 + 404))
          {
            int v23 = *(_DWORD *)(a1 + v7 + 408);
            uint64_t v22 = a3 + v7;
          }
          else
          {
            *(unsigned char *)(v21 + 404) = 1;
            uint64_t v22 = a3 + v7;
            int v23 = *(_DWORD *)(a1 + v7 + 408);
          }
          *(_DWORD *)(v22 + 408) = v23;
        }
        else
        {
          *(unsigned char *)(v21 + 404) = 0;
        }
      }
      uint64_t v24 = a3 + v7;
      long long v25 = *(_OWORD *)(a1 + v7 + 416);
      long long v26 = *(_OWORD *)(a1 + v7 + 432);
      long long v27 = *(_OWORD *)(a1 + v7 + 464);
      *(_OWORD *)(v24 + 448) = *(_OWORD *)(a1 + v7 + 448);
      *(_OWORD *)(v24 + 464) = v27;
      *(_OWORD *)(v24 + 416) = v25;
      *(_OWORD *)(v24 + 432) = v26;
      long long v28 = *(_OWORD *)(a1 + v7 + 480);
      long long v29 = *(_OWORD *)(a1 + v7 + 496);
      long long v30 = *(_OWORD *)(a1 + v7 + 528);
      *(_OWORD *)(v24 + 512) = *(_OWORD *)(a1 + v7 + 512);
      *(_OWORD *)(v24 + 528) = v30;
      *(_OWORD *)(v24 + 480) = v28;
      *(_OWORD *)(v24 + 496) = v29;
      long long v32 = *(_OWORD *)(a1 + v7 + 624);
      long long v31 = *(_OWORD *)(a1 + v7 + 640);
      long long v33 = *(_OWORD *)(a1 + v7 + 608);
      *(void *)(a3 + v7 + 653) = *(void *)(a1 + v7 + 653);
      *(_OWORD *)(v24 + 624) = v32;
      *(_OWORD *)(v24 + 640) = v31;
      *(_OWORD *)(v24 + 608) = v33;
      double result = *(__n128 *)(a1 + v7 + 544);
      long long v34 = *(_OWORD *)(a1 + v7 + 560);
      long long v35 = *(_OWORD *)(a1 + v7 + 592);
      *(_OWORD *)(v24 + 576) = *(_OWORD *)(a1 + v7 + 576);
      *(_OWORD *)(v24 + 592) = v35;
      *(__n128 *)(v24 + 544) = result;
      *(_OWORD *)(v24 + 560) = v34;
      v7 += 672;
    }
    while (a1 + v7 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphFileProvider>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RenderGraphFileProvider>::copy((void *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::RenderGraphFileProvider>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::RenderGraphFileProvider>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RenderGraphFileProvider>::copy((void *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::CameraView::PickupScopeLane>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = *a2;
    if (*(void *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::CameraView::PickupScopeLane>::copy(a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::ecs2::ScopeLanePair>::clear(a1);
      }
    }
    else if (v4)
    {
      unint64_t v5 = a2[2];
      *(void *)a1 = v4;
      re::DynamicArray<re::CameraView::PickupScopeLane>::setCapacity((void *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::CameraView::PickupScopeLane>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::RenderGraphFileProvider>::clear(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    uint64_t v3 = 48 * v2;
    uint64_t v4 = (re::DynamicString *)(*(void *)(a1 + 32) + 8);
    do
    {
      re::DynamicString::deinit(v4);
      uint64_t v4 = (re::DynamicString *)((char *)v4 + 48);
      v3 -= 48;
    }
    while (v3);
  }
  ++*(_DWORD *)(a1 + 24);
}

void *re::DynamicArray<re::CameraMultiView>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::CameraMultiView>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::CameraMultiView>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::CameraMultiView const*,re::CameraMultiView const*,re::CameraMultiView*,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      char v6 = 0;
      uint64_t v7 = 0;
      do
      {
        char v8 = v6;
        uint64_t v9 = a3 + 672 * v7;
        uint64_t v10 = v5 + 672 * v7;
        re::DynamicString::operator=((re::DynamicString *)v9, (re::DynamicString *)v10);
        long long v11 = *(_OWORD *)(v10 + 32);
        long long v12 = *(_OWORD *)(v10 + 48);
        long long v13 = *(_OWORD *)(v10 + 80);
        *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
        *(_OWORD *)(v9 + 80) = v13;
        *(_OWORD *)(v9 + 32) = v11;
        *(_OWORD *)(v9 + 48) = v12;
        long long v14 = *(_OWORD *)(v10 + 96);
        long long v15 = *(_OWORD *)(v10 + 112);
        long long v16 = *(_OWORD *)(v10 + 144);
        *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
        *(_OWORD *)(v9 + 144) = v16;
        *(_OWORD *)(v9 + 96) = v14;
        *(_OWORD *)(v9 + 112) = v15;
        long long v17 = *(_OWORD *)(v10 + 160);
        long long v18 = *(_OWORD *)(v10 + 176);
        long long v19 = *(_OWORD *)(v10 + 208);
        *(_OWORD *)(v9 + 192) = *(_OWORD *)(v10 + 192);
        *(_OWORD *)(v9 + 208) = v19;
        *(_OWORD *)(v9 + 160) = v17;
        *(_OWORD *)(v9 + 176) = v18;
        re::DynamicArray<re::RenderGraphFileProvider>::operator=(v9 + 224, (uint64_t *)(v10 + 224));
        *(_WORD *)(v9 + 264) = *(_WORD *)(v10 + 264);
        double result = re::DynamicArray<re::CameraView::PickupScopeLane>::operator=(v9 + 272, (uint64_t *)(v10 + 272));
        *(_OWORD *)(v9 + 320) = *(_OWORD *)(v10 + 320);
        long long v21 = *(_OWORD *)(v10 + 352);
        long long v20 = *(_OWORD *)(v10 + 368);
        long long v22 = *(_OWORD *)(v10 + 336);
        *(void *)(v9 + 384) = *(void *)(v10 + 384);
        *(_OWORD *)(v9 + 352) = v21;
        *(_OWORD *)(v9 + 368) = v20;
        *(_OWORD *)(v9 + 336) = v22;
        *(unsigned char *)(v9 + 400) = *(unsigned char *)(v10 + 400);
        if (*(unsigned char *)(v9 + 401) || *(unsigned char *)(v10 + 401))
        {
          int v23 = (unsigned char *)(v9 + 401);
          if (!*(unsigned char *)(v9 + 401) || *(unsigned char *)(v10 + 401))
          {
            if (*(unsigned char *)(v9 + 401) || !*(unsigned char *)(v10 + 401))
            {
              *(unsigned char *)(a3 + 672 * v7 + 402) = *(unsigned char *)(v5 + 672 * v7 + 402);
            }
            else
            {
              *int v23 = 1;
              *(unsigned char *)(a3 + 672 * v7 + 402) = *(unsigned char *)(v5 + 672 * v7 + 402);
            }
          }
          else
          {
            *int v23 = 0;
          }
        }
        uint64_t v24 = a3 + 672 * v7;
        int v25 = *(unsigned __int8 *)(v24 + 404);
        if (*(unsigned char *)(v24 + 404) || *(unsigned char *)(v5 + 672 * v7 + 404))
        {
          long long v26 = (unsigned char *)(v24 + 404);
          if (!v25 || *(unsigned char *)(v5 + 672 * v7 + 404))
          {
            if (v25 || !*(unsigned char *)(v5 + 672 * v7 + 404))
            {
              *(_DWORD *)(a3 + 672 * v7 + 408) = *(_DWORD *)(v5 + 672 * v7 + 408);
            }
            else
            {
              *long long v26 = 1;
              *(_DWORD *)(a3 + 672 * v7 + 408) = *(_DWORD *)(v5 + 672 * v7 + 408);
            }
          }
          else
          {
            *long long v26 = 0;
          }
        }
        uint64_t v27 = a3 + 672 * v7;
        uint64_t v28 = v5 + 672 * v7;
        long long v29 = *(_OWORD *)(v28 + 416);
        long long v30 = *(_OWORD *)(v28 + 432);
        long long v31 = *(_OWORD *)(v28 + 464);
        *(_OWORD *)(v27 + 448) = *(_OWORD *)(v28 + 448);
        *(_OWORD *)(v27 + 464) = v31;
        *(_OWORD *)(v27 + 416) = v29;
        *(_OWORD *)(v27 + 432) = v30;
        long long v32 = *(_OWORD *)(v28 + 480);
        long long v33 = *(_OWORD *)(v28 + 496);
        long long v34 = *(_OWORD *)(v28 + 528);
        *(_OWORD *)(v27 + 512) = *(_OWORD *)(v28 + 512);
        *(_OWORD *)(v27 + 528) = v34;
        *(_OWORD *)(v27 + 480) = v32;
        *(_OWORD *)(v27 + 496) = v33;
        long long v36 = *(_OWORD *)(v28 + 624);
        long long v35 = *(_OWORD *)(v28 + 640);
        long long v37 = *(_OWORD *)(v28 + 608);
        *(void *)(v27 + 653) = *(void *)(v28 + 653);
        *(_OWORD *)(v27 + 624) = v36;
        *(_OWORD *)(v27 + 640) = v35;
        *(_OWORD *)(v27 + 608) = v37;
        long long v38 = *(_OWORD *)(v28 + 544);
        long long v39 = *(_OWORD *)(v28 + 560);
        long long v40 = *(_OWORD *)(v28 + 592);
        *(_OWORD *)(v27 + 576) = *(_OWORD *)(v28 + 576);
        *(_OWORD *)(v27 + 592) = v40;
        *(_OWORD *)(v27 + 544) = v38;
        *(_OWORD *)(v27 + 560) = v39;
        char v6 = 1;
        uint64_t v7 = 1;
      }
      while ((v8 & 1) == 0);
      *(_WORD *)(a3 + 1344) = *(_WORD *)(v5 + 1344);
      v5 += 1360;
      a3 += 1360;
    }
    while (v5 != a2);
  }
  return result;
}

re::CameraMultiView *re::CameraMultiView::CameraMultiView(re::CameraMultiView *this, const re::CameraMultiView *a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  do
  {
    char v6 = v4;
    uint64_t v7 = (re::CameraMultiView *)((char *)this + 672 * v5);
    char v8 = (uint64_t *)((char *)a2 + 672 * v5);
    re::DynamicString::DynamicString(v7, (const re::DynamicString *)v8);
    long long v9 = *((_OWORD *)v8 + 2);
    long long v10 = *((_OWORD *)v8 + 3);
    long long v11 = *((_OWORD *)v8 + 5);
    *((_OWORD *)v7 + 4) = *((_OWORD *)v8 + 4);
    *((_OWORD *)v7 + 5) = v11;
    *((_OWORD *)v7 + 2) = v9;
    *((_OWORD *)v7 + 3) = v10;
    long long v12 = *((_OWORD *)v8 + 6);
    long long v13 = *((_OWORD *)v8 + 7);
    long long v14 = *((_OWORD *)v8 + 9);
    *((_OWORD *)v7 + 8) = *((_OWORD *)v8 + 8);
    *((_OWORD *)v7 + 9) = v14;
    *((_OWORD *)v7 + 6) = v12;
    *((_OWORD *)v7 + 7) = v13;
    long long v15 = *((_OWORD *)v8 + 10);
    long long v16 = *((_OWORD *)v8 + 11);
    long long v17 = *((_OWORD *)v8 + 13);
    *((_OWORD *)v7 + 12) = *((_OWORD *)v8 + 12);
    *((_OWORD *)v7 + 13) = v17;
    *((_OWORD *)v7 + 10) = v15;
    *((_OWORD *)v7 + 11) = v16;
    re::DynamicArray<re::RenderGraphFileProvider>::DynamicArray((uint64_t)v7 + 224, v8 + 28);
    *((_WORD *)v7 + 132) = *((_WORD *)v8 + 132);
    re::DynamicArray<re::CameraView::PickupScopeLane>::DynamicArray((uint64_t)v7 + 272, v8 + 34);
    *((_OWORD *)v7 + 20) = *((_OWORD *)v8 + 20);
    long long v18 = *((_OWORD *)v8 + 21);
    long long v19 = *((_OWORD *)v8 + 22);
    long long v20 = *((_OWORD *)v8 + 23);
    *((void *)v7 + 48) = v8[48];
    *((_OWORD *)v7 + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = v19;
    *((_OWORD *)v7 + 23) = v20;
    *((_OWORD *)v7 + 21) = v18;
    *((unsigned char *)v7 + 400) = *((unsigned char *)v8 + 400);
    int v21 = *((unsigned __int8 *)v8 + 401);
    *((unsigned char *)v7 + 401) = v21;
    if (v21) {
      *((unsigned char *)this + 672 * v5 + 402) = *((unsigned char *)a2 + 672 * v5 + 402);
    }
    int v22 = *((unsigned __int8 *)a2 + 672 * v5 + 404);
    *((unsigned char *)this + 672 * v5 + 404) = v22;
    if (v22) {
      *((_DWORD *)this + 168 * v5 + 102) = *((_DWORD *)a2 + 168 * v5 + 102);
    }
    int v23 = (char *)this + 672 * v5;
    uint64_t v24 = (char *)a2 + 672 * v5;
    long long v25 = *((_OWORD *)v24 + 26);
    long long v26 = *((_OWORD *)v24 + 27);
    long long v27 = *((_OWORD *)v24 + 29);
    *((_OWORD *)v23 + 28) = *((_OWORD *)v24 + 28);
    *((_OWORD *)v23 + 29) = v27;
    *((_OWORD *)v23 + 26) = v25;
    *((_OWORD *)v23 + 27) = v26;
    long long v28 = *((_OWORD *)v24 + 30);
    long long v29 = *((_OWORD *)v24 + 31);
    long long v30 = *((_OWORD *)v24 + 33);
    *((_OWORD *)v23 + 32) = *((_OWORD *)v24 + 32);
    *((_OWORD *)v23 + 33) = v30;
    *((_OWORD *)v23 + 30) = v28;
    *((_OWORD *)v23 + 31) = v29;
    long long v32 = *((_OWORD *)v24 + 39);
    long long v31 = *((_OWORD *)v24 + 40);
    long long v33 = *((_OWORD *)v24 + 38);
    *(void *)(v23 + 653) = *(void *)(v24 + 653);
    *((_OWORD *)v23 + 39) = v32;
    *((_OWORD *)v23 + 40) = v31;
    *((_OWORD *)v23 + 38) = v33;
    long long v34 = *((_OWORD *)v24 + 34);
    long long v35 = *((_OWORD *)v24 + 35);
    long long v36 = *((_OWORD *)v24 + 37);
    *((_OWORD *)v23 + 36) = *((_OWORD *)v24 + 36);
    *((_OWORD *)v23 + 37) = v36;
    *((_OWORD *)v23 + 34) = v34;
    *((_OWORD *)v23 + 35) = v35;
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v6 & 1) == 0);
  *((_WORD *)this + 672) = *((_WORD *)a2 + 672);
  return this;
}

void *re::BucketArray<re::PipelineCompilationData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::PipelineCompilationData,4ul>::setBucketsCapacity((void *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

void *re::BucketArray<re::PipelineCompilationData,4ul>::setBucketsCapacity(void *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (void *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        uint64_t v5 = v3 + 3;
        do
        {
          double result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)*v3 + 32))(*v3, 64, 0);
          char v6 = result;
          if (*v3)
          {
            unint64_t v7 = v3[1];
            int v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              unint64_t v9 = *v5;
              BOOL v11 = v7 >= *v5;
              unint64_t v10 = v7 + 1;
              BOOL v11 = !v11 || v9 >= v10;
              if (v11) {
                goto LABEL_24;
              }
              unint64_t v12 = 2 * v9;
              goto LABEL_20;
            }
            unint64_t v10 = v7 + 1;
            if (v10 >= 3)
            {
              unint64_t v12 = 4;
LABEL_20:
              if (v12 <= v10) {
                unint64_t v14 = v10;
              }
              else {
                unint64_t v14 = v12;
              }
              double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              int v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            unint64_t v13 = v3[1] + 1;
            double result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            int v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_24:
          long long v15 = v3 + 3;
          if ((v8 & 1) == 0) {
            long long v15 = (void *)v3[4];
          }
          unint64_t v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void *std::__any_imp::_SmallHandler<re::BucketArray<re::PipelineCompilationData,4ul> *>::__handle[abi:nn180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      double result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::PipelineCompilationData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v8;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<re::BucketArray<re::PipelineCompilationData,4ul> *>::__handle[abi:nn180100];
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
      else
      }
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<re::BucketArray<re::PipelineCompilationData,4ul> *>::__id;
      if (v10) {
        double result = a2 + 1;
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 8);
  double result = (uint64_t *)(**a2)(3);
  uint64_t v4 = *result;
  if (*result)
  {
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5)
    {
      for (unint64_t i = 0; i != v5; ++i)
        re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v4, i);
    }
    while (*(void *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(void *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 40);
    return (uint64_t *)v7(v2, v4);
  }
  return result;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FD888;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FD888;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::PipelineCompilationData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::PipelineCompilationData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(void *)(a1 + 8) <= a2 >> 2) {
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  return *(void *)(v3 + 8 * (a2 >> 2)) + 16 * (a2 & 3);
}

__n128 re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a1 + 36);
  if (v9 == 0x7FFFFFFF)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 32);
    int v10 = v9;
    if (v9 == *(_DWORD *)(a1 + 24))
    {
      int v11 = *(_DWORD *)(a1 + 28);
      signed int v12 = 2 * v11;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        if (v12) {
          BOOL v14 = v9 == v12;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(void *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v13, v12);
          long long v15 = *(_OWORD *)v28;
          *(_OWORD *)long long v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          uint64_t v16 = *(void *)&v28[16];
          uint64_t v17 = *(void *)(a1 + 16);
          *(void *)&v28[16] = v17;
          *(void *)(a1 + 16) = v16;
          long long v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          unsigned int v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          uint64_t v20 = v18;
          if (v18)
          {
            uint64_t v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0) {
                re::HashTable<unsigned long long,re::TintContext,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(void *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(void *)(v21 - 16), v21, v21 + 16);
              }
              v21 += 64;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v12) {
          signed int v24 = 2 * v11;
        }
        else {
          signed int v24 = 3;
        }
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      int v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 16);
    int v23 = *(_DWORD *)(v22 + (v9 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + (v9 << 6) + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) = *(_DWORD *)(*(void *)(a1 + 16) + (v9 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2);
  *(void *)(*(void *)(a1 + 16) + (v9 << 6)) = a3;
  *(void *)(*(void *)(a1 + 16) + (v9 << 6) + 16) = *a4;
  uint64_t v25 = *(void *)(a1 + 16) + (v9 << 6);
  __n128 result = *(__n128 *)a5;
  long long v27 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(v25 + 48) = v27;
  *(_DWORD *)(*(void *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    unint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    int v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *int v10 = &unk_26E6FD8E0;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    BOOL v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *BOOL v14 = v11;
    v14[1] = v13;
    long long v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FD938;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    uint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *uint64_t v22 = &unk_26E6FD990;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    long long v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v26 = v23;
    v26[1] = v25;
    long long v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    long long v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *long long v28 = &unk_26E6FD9E8;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    long long v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *long long v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    __n128 result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      long long v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        int v71 = 0;
        long long v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *long long v37 = &unk_26E6FD8E0;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        int v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        long long v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FD938;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        int64_t v65 = 0;
        int v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *int v49 = &unk_26E6FD990;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        int64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        long long v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *long long v53 = v50;
        v53[1] = v52;
        BOOL v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        __int16 v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FD9E8;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        __int16 v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        int v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        __n128 result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v4 + 56), &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(void *)(*(void *)(v4 + 64) + 16 * v5 + 8));
  if (!*(unsigned char *)(v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *(void *)(v4 + 176);
  int v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)(v4 + 192);
    }
    else {
      uint64_t v8 = *(void **)(v4 + 200);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    BOOL v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = *(uint64_t **)(v4 + 200);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FD8E0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FD8E0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FD938;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FD938;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FD990;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FD990;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FD9E8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FD9E8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::CameraViewDescriptorsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::ecs2::PinSkeletalPoseHelper::collectMeshJointPins(uint64_t a1, void *a2, uint64_t a3, _anonymous_namespace_ *a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  {
    uint64_t v5 = v13;
    uint64_t v7 = *(void *)(v14 + 24);
    uint64_t v6 = *(const StringID **)(v14 + 32);
    unint64_t v8 = *((void *)a4 + 2) + v13;
    if (*((void *)a4 + 1) < v8) {
      re::DynamicArray<re::ecs2::Pin>::setCapacity(a4, v8);
    }
    if (v5)
    {
      uint64_t v9 = 0;
      uint64_t v10 = v12;
      do
      {
        if (v7 == v9)
        {
          re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, v7);
          _os_crash();
          __break(1u);
        }
        re::StringID::StringID((re::StringID *)&v11, v6);
        re::DynamicArray<re::ecs2::Pin>::add(a4, (uint64_t)v15);
        re::ecs2::Pin::~Pin((re::ecs2::Pin *)v15);
        re::StringID::destroyString((re::StringID *)&v11);
        ++v9;
        ++v6;
        v10 += 4;
      }
      while (v5 != v9);
    }
  }
}

uint64_t anonymous namespace'::getSkeletonAndJointTransforms(uint64_t result, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  if (!result) {
    return result;
  }
  uint64_t v5 = (void *)result;
  uint64_t v6 = *(void *)(result + 16);
  if (!v6) {
    return 0;
  }
  __n128 result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!result) {
    return result;
  }
  if (!v5[71]) {
    return 0;
  }
  uint64_t v11 = result;
  uint64_t v12 = (uint64_t)(v5 + 59);
  unint64_t v13 = *(void *)(a3 + 8);
  if (v13 < 0xFFFFFFFFFFFFFFFELL || (v13 & 1) != 0)
  {
    if (v13 > 1) {
      goto LABEL_11;
    }
    uint64_t v14 = *(unsigned char **)(a3 + 16);
    if (!v14) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v14 = *(unsigned char **)(a3 + 16);
  }
  if (!*v14)
  {
    unsigned int v19 = 0;
    goto LABEL_18;
  }
LABEL_11:
  re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)(a2 + 56), (unsigned __int8 *)a3, &v26);
  uint64_t v15 = v26;
  if (!v26)
  {
LABEL_15:
    re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v27);
    return 0;
  }
  uint64_t v16 = 0;
  while (1)
  {
    uint64_t v25 = v16;
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v28 + 16))(v28, &v25);
    unsigned int v18 = re::SkeletalPoseRigMappingData::poseRigMapIndex((re::SkeletalPoseRigMappingData *)(v5 + 59), (const re::MeshNameMap *)(a2 + 56), v17, WORD2(v17));
    if (v18 != -1) {
      break;
    }
    if (v15 == ++v16) {
      goto LABEL_15;
    }
  }
  unsigned int v19 = v18;
  re::FunctionBase<24ul,re::MeshInstanceAndPartIndex ()(unsigned long)>::destroyCallable((uint64_t)v27);
LABEL_18:
  if (v5[80] <= (unint64_t)v19) {
    unint64_t v20 = 0xFFFFFFFFLL;
  }
  else {
    unint64_t v20 = *(unsigned int *)(v5[81] + 4 * v19);
  }
  if (a2[117] <= v20) {
    return 0;
  }
  if (a2[28] > v20
    && (uint64_t v21 = re::AssetHandle::loadedAsset<re::SkeletonAsset>((re::SkeletonAsset *)(a2[30] + 24 * v20))) != 0)
  {
    uint64_t v22 = v21 + 88;
  }
  else
  {
    uint64_t v22 = re::MeshAsset::skeletonAtIndex((re::MeshAsset *)a2, v20);
  }
  *(void *)a4 = v22;
  uint64_t v23 = *(void *)(v11 + 112);
  uint64_t v26 = *(void *)(v11 + 128);
  v27[0] = v23;
  *a5 = re::SkeletalPoseRigMappingData::poseRigMapAbsoluteJointTransforms(v12, v19, &v26);
  a5[1] = v24;
  return *(void *)(*(void *)a4 + 24) == v24;
}

uint64_t re::DynamicArray<re::ecs2::Pin>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 1))
  {
    re::DynamicArray<re::ecs2::Pin>::growCapacity(this, v4 + 1);
    unint64_t v4 = *((void *)this + 2);
  }
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = v5 + 208 * v4;
  *(void *)uint64_t v6 = &unk_26E703090;
  re::StringID::StringID((re::StringID *)(v6 + 8), (const StringID *)(a2 + 8));
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v9;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v8;
  uint64_t result = re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(v6 + 96, (uint64_t *)(a2 + 96));
  long long v11 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v6 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v6 + 160) = v11;
  int v12 = *(unsigned __int8 *)(a2 + 176);
  *(unsigned char *)(v6 + 176) = v12;
  if (v12) {
    uint64_t result = (uint64_t)re::StringID::StringID((re::StringID *)(v5 + 208 * v4 + 184), (const StringID *)(a2 + 184));
  }
  ++*((void *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void anonymous namespace'::makePinFromNameAndTransform(const StringID *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v5 = a2[1];
  float32x4_t v6 = a2[2];
  float32x4_t v7 = vmulq_f32(*a2, (float32x4_t)0);
  float32x4_t v8 = vaddq_f32(a2[3], vmlaq_f32(vmlaq_f32(v7, (float32x4_t)0, v5), (float32x4_t)0, v6));
  float32x4_t v21 = vmlaq_f32(vmlaq_f32(*a2, (float32x4_t)0, v5), (float32x4_t)0, v6);
  float32x4_t v22 = vdivq_f32(v8, (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 3));
  float32x4_t v20 = vmlaq_f32(vaddq_f32(v7, v5), (float32x4_t)0, v6);
  re::poseFromOriginAndXYAxes((uint64_t *)&v22, &v21, (int32x4_t *)&v20, (uint64_t)v19);
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  uint64_t v18 = 0x3F80000000000000;
  v14[0] = 1;
  re::StringID::StringID((re::StringID *)v15, a1);
  *(void *)&long long v9 = 0x7F0000007FLL;
  *((void *)&v9 + 1) = 0x7F0000007FLL;
  v13[0] = vdupq_n_s32(0x7F800000u);
  v13[1] = v9;
  uint64_t v12 = 0;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  re::ecs2::Pin::Pin(a3, a1, v19, &v16, v14, v13, v10);
  re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)v10);
  if (v14[0]) {
    re::StringID::destroyString((re::StringID *)v15);
  }
}

void re::ecs2::PinSkeletalPoseHelper::pinByName(re::ecs2::PinSkeletalPoseHelper *this@<X0>, const re::ecs2::SkeletalPoseComponent *a2@<X1>, const re::MeshAsset *a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  v24[0] = 0;
  v24[1] = "";
  *(void *)&v23.var0 = 0;
  v23.var1 = "";
  *(void *)&v22.var0 = 0;
  v22.var1 = "";
  float32x4_t v8 = (const char *)*((void *)a3 + 1);
  size_t v9 = strlen(v8);
  re::internal::parseSkeletalPoseJointPinName((uint64_t)v8, v9, (re::StringID *)v24, (re::StringID *)&v23, (re::StringID *)&v22);
  v19[0] = 1;
  re::StringID::StringID((re::StringID *)v20, &v23);
  re::StringID::StringID((re::StringID *)v21, &v22);
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v16 = 0;
    || (unint64_t v11 = *(void *)(v18 + 24),
        uint64_t v10 = *(void *)(v18 + 32),
        (uint64_t v12 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v18 + 112, v24)) == 0)|| (v14 = *v12, v14 == -1))
  {
    *a4 = 0;
    goto LABEL_8;
  }
  if (v11 <= v14)
  {
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *v12, v11);
    _os_crash();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, v15);
    _os_crash();
    __break(1u);
  }
  uint64_t v15 = v17;
  if (v17 <= v14) {
    goto LABEL_10;
  }
  re::Optional<re::ecs2::Pin>::Optional((uint64_t)a4, (uint64_t)v25);
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)v25);
LABEL_8:
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v20);
  re::StringID::destroyString((re::StringID *)&v22);
  re::StringID::destroyString((re::StringID *)&v23);
  re::StringID::destroyString((re::StringID *)v24);
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::deinit(uint64_t a1)
{
  uint64_t result = *(void *)a1;
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        uint64_t v5 = v4 << 7;
        uint64_t v6 = v3 + 88;
        do
        {
          re::DynamicArray<unsigned long>::deinit(v6);
          v6 += 128;
          v5 -= 128;
        }
        while (v5);
        uint64_t result = *(void *)a1;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 40))(result, v3);
    }
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::Optional<re::ecs2::Pin>::Optional(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 16) = &unk_26E703090;
  re::StringID::StringID((re::StringID *)(a1 + 24), (const StringID *)(a2 + 8));
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(a1 + 112, (uint64_t *)(a2 + 96));
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 176) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = v8;
  if (v8) {
    re::StringID::StringID((re::StringID *)(a1 + 200), (const StringID *)(a2 + 184));
  }
  return a1;
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v3 = *a2;
  if (*a2)
  {
    unint64_t v5 = a2[2];
    *(void *)a1 = v3;
    re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((void *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::ecs2::PinAlignment>::copy((void *)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::copy(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(a1, *(void *)(a2 + 16));
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + (a1[2] << 7), a1[4]);
    uint64_t v9 = a1[2];
    if (v9 != v4)
    {
      uint64_t v10 = (v4 << 7) - (v9 << 7);
      uint64_t v11 = (v9 << 7) | 0x58;
      uint64_t v12 = (uint64_t *)(*(void *)(a2 + 32) + v11);
      uint64_t result = a1[4] + v11;
      do
      {
        long long v13 = *(_OWORD *)(v12 - 11);
        *(_OWORD *)(result - 72) = *(_OWORD *)(v12 - 9);
        *(_OWORD *)(result - 88) = v13;
        long long v14 = *(_OWORD *)(v12 - 7);
        long long v15 = *(_OWORD *)(v12 - 5);
        long long v16 = *(_OWORD *)(v12 - 3);
        *(unsigned char *)(result - 8) = *((unsigned char *)v12 - 8);
        *(_OWORD *)(result - 24) = v16;
        *(_OWORD *)(result - 40) = v15;
        *(_OWORD *)(result - 56) = v14;
        uint64_t v17 = re::DynamicArray<float>::DynamicArray(result, v12);
        v12 += 16;
        uint64_t result = v17 + 128;
        v10 -= 128;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,0>(*(void *)(a2 + 32), *(void *)(a2 + 32) + (v4 << 7), a1[4]);
    uint64_t v6 = a1[2];
    if (v4 != v6)
    {
      uint64_t v7 = (v6 << 7) - (v4 << 7);
      uint64_t v8 = a1[4] + (v4 << 7) + 88;
      do
      {
        uint64_t result = re::DynamicArray<unsigned long>::deinit(v8);
        v8 += 128;
        v7 -= 128;
      }
      while (v7);
    }
  }
  a1[2] = v4;
  return result;
}

void *re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    unint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          unint64_t v2 = a2 << 7;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            uint64_t v7 = result;
            if (!v5[1]) {
              goto LABEL_16;
            }
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      uint64_t v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        uint64_t v10 = v8 + (v9 << 7);
        uint64_t v11 = v7;
        do
        {
          long long v12 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v8;
          *((_OWORD *)v11 + 1) = v12;
          long long v13 = *(_OWORD *)(v8 + 32);
          long long v14 = *(_OWORD *)(v8 + 48);
          long long v15 = *(_OWORD *)(v8 + 64);
          *((unsigned char *)v11 + 80) = *(unsigned char *)(v8 + 80);
          *((_OWORD *)v11 + 3) = v14;
          *((_OWORD *)v11 + 4) = v15;
          *((_OWORD *)v11 + 2) = v13;
          v11[15] = 0;
          v11[12] = 0;
          v11[13] = 0;
          v11[11] = 0;
          *((_DWORD *)v11 + 28) = 0;
          uint64_t v16 = *(void *)(v8 + 88);
          uint64_t v17 = *(void *)(v8 + 96);
          uint64_t v18 = v8 + 88;
          v11[11] = v16;
          v11[12] = v17;
          *(void *)uint64_t v18 = 0;
          *(void *)(v18 + 8) = 0;
          uint64_t v19 = v11[13];
          v11[13] = *(void *)(v18 + 16);
          *(void *)(v18 + 16) = v19;
          uint64_t v20 = v11[15];
          v11[15] = *(void *)(v18 + 32);
          *(void *)(v18 + 32) = v20;
          ++*(_DWORD *)(v18 + 24);
          ++*((_DWORD *)v11 + 28);
          re::DynamicArray<unsigned long>::deinit(v18);
          uint64_t v8 = v18 + 40;
          v11 += 16;
        }
        while (v8 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,re::ecs2::PinAlignment *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    long long v6 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v4;
    *(_OWORD *)(a3 + 16) = v6;
    long long v7 = *(_OWORD *)(v4 + 32);
    long long v8 = *(_OWORD *)(v4 + 48);
    long long v9 = *(_OWORD *)(v4 + 64);
    *(unsigned char *)(a3 + 80) = *(unsigned char *)(v4 + 80);
    *(_OWORD *)(a3 + 48) = v8;
    *(_OWORD *)(a3 + 64) = v9;
    *(_OWORD *)(a3 + 32) = v7;
    re::DynamicArray<float>::operator=(a3 + 88, (uint64_t *)(v4 + 88));
    a3 += 128;
    v4 += 128;
  }
  while (v4 != v5);
  return v5;
}

void *re::DynamicArray<re::ecs2::Pin>::setCapacity(void *result, unint64_t a2)
{
  uint64_t v3 = result[1];
  if (v3 != a2)
  {
    uint64_t v5 = result;
    if (result[2] <= a2)
    {
      uint64_t result = (void *)*result;
      if (!*v5)
      {
        uint64_t result = (void *)re::DynamicArray<re::ecs2::Pin>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xD0uLL))
        {
          uint64_t v2 = 208 * a2;
          uint64_t result = (void *)(*(uint64_t (**)(void *, unint64_t, uint64_t))(*result + 32))(result, 208 * a2, 16);
          if (result)
          {
            long long v7 = result;
            if (!v5[1]) {
              goto LABEL_18;
            }
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 208, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(void *)(*v5 + 8));
        uint64_t result = (void *)_os_crash();
        __break(1u);
        return result;
      }
      long long v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      uint64_t v8 = v5[4];
      uint64_t v9 = v5[2];
      if (v9)
      {
        unint64_t v10 = 0;
        uint64_t v11 = 208 * v9;
        do
        {
          long long v12 = &v7[v10 / 8];
          uint64_t v13 = v8 + v10;
          v7[v10 / 8] = &unk_26E703090;
          re::StringID::StringID((re::StringID *)&v7[v10 / 8 + 1], (const StringID *)(v8 + v10 + 8));
          long long v14 = *(_OWORD *)(v8 + v10 + 32);
          long long v15 = *(_OWORD *)(v8 + v10 + 48);
          long long v16 = *(_OWORD *)(v8 + v10 + 80);
          *((_OWORD *)v12 + 4) = *(_OWORD *)(v8 + v10 + 64);
          *((_OWORD *)v12 + 5) = v16;
          *((_OWORD *)v12 + 2) = v14;
          *((_OWORD *)v12 + 3) = v15;
          re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray((uint64_t)&v7[v10 / 8 + 12], (uint64_t *)(v8 + v10 + 96));
          long long v17 = *(_OWORD *)(v8 + v10 + 160);
          *((_OWORD *)v12 + 9) = *(_OWORD *)(v8 + v10 + 144);
          *((_OWORD *)v12 + 10) = v17;
          int v18 = *(unsigned __int8 *)(v8 + v10 + 176);
          *((unsigned char *)v12 + 176) = v18;
          if (v18) {
            re::StringID::StringID((re::StringID *)(v12 + 23), (const StringID *)(v13 + 184));
          }
          (**(void (***)(uint64_t))v13)(v8 + v10);
          v10 += 208;
        }
        while (v11 != v10);
        uint64_t v8 = v5[4];
      }
      uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(*(void *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

void *re::DynamicArray<re::ecs2::Pin>::growCapacity(void *this, unint64_t a2)
{
  unint64_t v2 = this[1];
  if (v2 < a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = this;
    if (*this)
    {
      uint64_t v5 = 2 * v2;
      BOOL v6 = v2 == 0;
      unint64_t v7 = 8;
      if (!v6) {
        unint64_t v7 = v5;
      }
      if (v7 > a2) {
        a2 = v7;
      }
      return re::DynamicArray<re::ecs2::Pin>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::Pin>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void *re::ecs2::allocInfo_PhysicsOriginComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_225, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_225))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88080, "PhysicsOriginComponent");
    __cxa_guard_release(&_MergedGlobals_225);
  }
  return &unk_26AF88080;
}

void re::ecs2::initInfo_PhysicsOriginComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v9[0] = 0x5CCE2FB72C22FEA0;
  v9[1] = "PhysicsOriginComponent";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88078, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (re *)__cxa_guard_acquire(&qword_26AF88078);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88070 = v7;
      __cxa_guard_release(&qword_26AF88078);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((void *)this + 8) = &qword_26AF88070;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsOriginComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsOriginComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsOriginComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsOriginComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v8 = v10;
}

void re::internal::defaultConstruct<re::ecs2::PhysicsOriginComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6E00A8;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsOriginComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PhysicsOriginComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6E00A8;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsOriginComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsOriginComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsOriginComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsOriginComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsOriginComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsOriginComponent>, this);
}

void re::internal::findPhysicsOrigin(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v5 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
       + 8);
  if (*(void *)(a1 + 224) > v5
    && (uint64_t v6 = *(void *)(*(void *)(a1 + 240) + 8 * v5)) != 0
    && (uint64_t v7 = *(void *)(v6 + 24)) != 0)
  {
    long long v8 = *(uint64_t **)(v6 + 40);
    uint64_t v9 = &v8[v7];
    while (1)
    {
      uint64_t v10 = *v8;
      if (a3)
      {
        uint64_t v11 = 8 * a3;
        long long v12 = a2;
        while (*v12 != v10)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            long long v12 = &a2[a3];
            break;
          }
        }
      }
      else
      {
        long long v12 = a2;
      }
      if (a3 == v12 - a2)
      {
        uint64_t v13 = *(void *)(v10 + 16);
        if (*(unsigned char *)(v13 + 288))
        {
          long long v14 = *(re::ecs2::TransformComponent **)(v13 + 240);
          if (v14) {
            break;
          }
        }
      }
      if (++v8 == v9) {
        goto LABEL_15;
      }
    }
    long long v15 = (re::ecs2::TransformComponent **)*((void *)v14 + 2);
    if (v15)
    {
      re::ecs2::TransformComponent::worldScale(v15, (const re::ecs2::Entity *)1);
    }
    else
    {
      long long v16 = (re *)*((void *)v14 + 4);
      uint64_t v17 = *((void *)v14 + 5);
    }
    v18.i64[0] = (uint64_t)v16;
    v18.i64[1] = v17;
    float32x4_t v19 = vmulq_f32(v18, v18);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]) < 1.0e-10)
    {
      uint64_t v20 = *re::ecsComponentsLogObjects(v16);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)float32x4_t v21 = 0;
        _os_log_impl(&dword_233120000, v20, OS_LOG_TYPE_DEFAULT, "Physics origin tranform has scale of 0.", v21, 2u);
      }
    }
    re::ecs2::TransformComponent::worldMatrix4x4F(v14, 1, (uint64_t)a4);
  }
  else
  {
LABEL_15:
    *a4 = xmmword_23435FD50;
    a4[1] = xmmword_23435FD60;
    a4[2] = xmmword_23435FD80;
    a4[3] = xmmword_23435FBB0;
  }
}

uint64_t re::internal::getPhysicsOriginFromTransformComponent@<X0>(re::ecs2::TransformComponent *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  re::ecs2::TransformComponent::worldMatrix4x4F(a1, 1, (uint64_t)v14);
  uint64_t v5 = 0;
  float32x4_t v6 = *a2;
  float32x4_t v7 = a2[1];
  float32x4_t v8 = a2[2];
  float32x4_t v9 = a2[3];
  v15[0] = (int32x4_t)v14[0];
  v15[1] = (int32x4_t)v14[1];
  void v15[2] = (int32x4_t)v14[2];
  _OWORD v15[3] = (int32x4_t)v14[3];
  do
  {
    *(long long *)((char *)&v16 + v5 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)&v15[v5])), v7, *(float32x2_t *)v15[v5].i8, 1), v8, (float32x4_t)v15[v5], 2), v9, (float32x4_t)v15[v5], 3);
    ++v5;
  }
  while (v5 != 4);
  v15[0] = 0u;
  long long v17 = 0u;
  long long v18 = xmmword_23435FBB0;
  uint64_t result = re::decomposeScaleRotationTranslation<float>((uint64_t)&v16, v15, &v18, &v17);
  uint64_t v11 = v15[0].i64[1];
  long long v12 = v18;
  long long v13 = v17;
  *(void *)a3 = v15[0].i64[0];
  *(void *)(a3 + 8) = v11;
  *(_OWORD *)(a3 + 16) = v12;
  *(_OWORD *)(a3 + 32) = v13;
  return result;
}

void re::ecs2::SceneSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 104);
  if (!*(void *)(v2 + 200)) {
    return;
  }
  uint64_t v3 = a2;
  uint64_t v4 = (unsigned __int8 *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  int v5 = *(unsigned __int8 *)(v3 + 49);
  if (v5 == v4[26])
  {
    float32x4_t v6 = v4;
    int v7 = *(unsigned __int8 *)(v3 + 48);
    int v8 = v4[25];
    if (v8 == v7)
    {
      if (v5 == v7 && v5 == v8) {
        return;
      }
      uint64_t v3 = *re::ecsComponentsLogObjects((re *)v4);
      if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_233120000, (os_log_t)v3, OS_LOG_TYPE_ERROR, "[Scene] inconsistent requiresAnchoring", buf, 2u);
      }
      re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "update", 45);
      uint64_t v4 = (unsigned __int8 *)_os_crash();
      __break(1u);
    }
    if (v5 != v7 && v5 == v8)
    {
      v6[25] = v7;
      v6[26] = v7;
      *(unsigned char *)(v3 + 49) = v7;
      uint64_t v10 = *(re::ecs2::NetworkComponent **)(*(void *)(v3 + 104) + 200);
      re::ecs2::NetworkComponent::markDirty(v10, (const re::ecs2::Component *)v6);
      return;
    }
    if (v5 == v7 && v5 != v8)
    {
      re::ecs2::Scene::setRequiresAnchoring((re::ecs2::Scene *)v3, v8 != 0);
      unsigned __int8 v11 = v6[25];
      *(unsigned char *)(v3 + 49) = v11;
      v6[26] = v11;
      return;
    }
  }
  else
  {
    long long v12 = *re::ecsComponentsLogObjects((re *)v4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v18 = 0;
      _os_log_error_impl(&dword_233120000, v12, OS_LOG_TYPE_ERROR, "[Scene] inconsistent previous requiresAnchoring", v18, 2u);
    }
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "update", 21);
    uint64_t v4 = (unsigned __int8 *)_os_crash();
    __break(1u);
  }
  long long v14 = *re::ecsComponentsLogObjects((re *)v4);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long v17 = 0;
    _os_log_error_impl(&dword_233120000, v14, OS_LOG_TYPE_ERROR, "[Scene] inconsistent requiresAnchoring", v17, 2u);
  }
  re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "update", 40);
  _os_crash();
  __break(1u);
}

void *re::ecs2::allocInfo_SceneSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_226, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_226))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88100, "SceneSystem");
    __cxa_guard_release(&_MergedGlobals_226);
  }
  return &unk_26AF88100;
}

void re::ecs2::initInfo_SceneSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x1F69BE8A7490B76;
  v5[1] = "SceneSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_SceneSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::SceneSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  void *v3 = &unk_26E6FDA58;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SceneSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SceneSystem>(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  void *v1 = &unk_26E6FDA58;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SceneSystem>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SceneSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneSystem>, this);
}

void re::ecs2::SceneSystem::~SceneSystem(re::ecs2::SceneSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::SceneSystem::typeInfo(re::ecs2::SceneSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SceneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t (***re::ecs2::ComponentHelper::addDefaultSystems(uint64_t (***result)(void)))(void)
{
  void v6[5] = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (*result)[4](result);
    uint64_t v3 = (re *)re::ServiceLocator::serviceOrNull<re::RenderManager>(v2);
    BOOL v4 = v3 != 0;
    uint64_t v5 = re::globalAllocators(v3)[2];
    v6[0] = &unk_26E6FF750;
    v6[1] = v1;
    v6[3] = v5;
    v6[4] = v6;
    return re::FunctionBase<24ul,void ()(re::SharedPtr<re::ecs2::System>)>::destroyCallable((uint64_t)v6);
  }
  return result;
}

void anonymous namespace'::addDefaultSystemsUsingLambda(uint64_t a1, int a2)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  BOOL v4 = re::globalAllocators((re *)a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4[2] + 32))(v4[2], 232, 8);
  re::ecs2::System::System(v5, 0);
  *(void *)uint64_t v6 = &unk_26E704370;
  *(_DWORD *)(v6 + 136) = 0;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(void *)(v6 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  uint64_t v78 = v6;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v78);
  if (v78)
  {

    uint64_t v78 = 0;
  }
  re::make::shared::object<re::ecs2::SceneSystem>((re *)&v76);
  uint64_t v77 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v77);
  if (v77)
  {

    uint64_t v77 = 0;
  }
  re::make::shared::object<re::ecs2::TimebaseSystem>((re *)&v76);
  uint64_t v75 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v75);
  if (v75)
  {

    uint64_t v75 = 0;
  }
  re::make::shared::object<re::ecs2::DeferredActivationSystem>((re *)&v76);
  uint64_t v74 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v74);
  if (v74)
  {

    uint64_t v74 = 0;
  }
  double Trace = re::make::shared::object<re::ecs2::LoadTraceSystem>((re *)&v76);
  uint64_t v73 = v76;
  (*(void (**)(void, uint64_t *, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v73, Trace);
  if (v73)
  {

    uint64_t v73 = 0;
  }
  re::make::shared::object<re::ecs2::NetworkAssetComponentSystem>((re *)&v76);
  uint64_t v72 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v72);
  if (v72)
  {

    uint64_t v72 = 0;
  }
  re::make::shared::object<re::ecs2::AssetMutateTrackingSystem>((re *)&v76);
  uint64_t v71 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v71);
  if (v71)
  {

    uint64_t v71 = 0;
  }
  re::make::shared::object<re::ecs2::CameraMovementSystem>((re *)&v76);
  uint64_t v70 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v70);
  if (v70)
  {

    uint64_t v70 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveBoxSystem>((re *)&v76);
  uint64_t v69 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v69);
  if (v69)
  {

    uint64_t v69 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>((re *)&v76);
  uint64_t v68 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v68);
  if (v68)
  {

    uint64_t v68 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveCapsuleSystem>((re *)&v76);
  uint64_t v67 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v67);
  if (v67)
  {

    uint64_t v67 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveConeSystem>((re *)&v76);
  uint64_t v66 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v66);
  if (v66)
  {

    uint64_t v66 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveCylinderSystem>((re *)&v76);
  uint64_t v65 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v65);
  if (v65)
  {

    uint64_t v65 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitivePlaneSystem>((re *)&v76);
  uint64_t v64 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v64);
  if (v64)
  {

    uint64_t v64 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitivePyramidSystem>((re *)&v76);
  uint64_t v63 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v63);
  if (v63)
  {

    uint64_t v63 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveSphereSystem>((re *)&v76);
  uint64_t v62 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v62);
  if (v62)
  {

    uint64_t v62 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveTetrahedronSystem>((re *)&v76);
  uint64_t v61 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v61);
  if (v61)
  {

    uint64_t v61 = 0;
  }
  re::make::shared::object<re::ecs2::PrimitiveTubeSystem>((re *)&v76);
  uint64_t v60 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v60);
  if (v60)
  {

    uint64_t v60 = 0;
  }
  re::make::shared::object<re::ecs2::Static3DTextSystem>((re *)&v76);
  uint64_t v59 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v59);
  if (v59)
  {

    uint64_t v59 = 0;
  }
  re::make::shared::object<re::ecs2::MeshSceneSystem>((re *)&v76);
  uint64_t v58 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v58);
  if (v58)
  {

    uint64_t v58 = 0;
  }
  re::make::shared::object<re::ecs2::StateMachineSystem>((re *)&v76);
  uint64_t v57 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v57);
  if (v57)
  {

    uint64_t v57 = 0;
  }
  re::make::shared::object<re::ecs2::SkeletalPosePreparationSystem>((re *)&v76);
  uint64_t v56 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v56);
  if (v56)
  {

    uint64_t v56 = 0;
  }
  re::make::shared::object<re::ecs2::AnimationUpdateSystem>((re *)&v76);
  uint64_t v55 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v55);
  if (v55)
  {

    uint64_t v55 = 0;
  }
  re::make::shared::object<re::ecs2::AnimationSystem>((re *)&v76);
  uint64_t v54 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v54);
  if (v54)
  {

    uint64_t v54 = 0;
  }
  re::make::shared::object<re::ecs2::TextSystem>((re *)&v76);
  uint64_t v53 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v53);
  if (v53)
  {

    uint64_t v53 = 0;
  }
  re::make::shared::object<re::ecs2::RemoteEffectsSystem>((re *)&v76);
  uint64_t v52 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v52);
  if (v52)
  {

    uint64_t v52 = 0;
  }
  re::make::shared::object<re::ecs2::PhysicsSystem>((re *)&v76);
  uint64_t v51 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v51);
  if (v51)
  {

    uint64_t v51 = 0;
  }
  double v8 = re::make::shared::object<re::ecs2::PhysicsDebugSystem>((re *)&v76);
  uint64_t v50 = v76;
  (*(void (**)(void, uint64_t *, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v50, v8);
  if (v50)
  {

    uint64_t v50 = 0;
  }
  re::make::shared::object<re::ecs2::TransformSystem>((re *)&v76);
  uint64_t v49 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v49);
  if (v49)
  {

    uint64_t v49 = 0;
  }
  re::make::shared::object<re::ecs2::RayCastSystem>((re *)&v76);
  uint64_t v48 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v48);
  if (v48)
  {

    uint64_t v48 = 0;
  }
  re::make::shared::object<re::ecs2::MaterialOverrideSystem>((re *)&v76);
  uint64_t v47 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v47);
  if (v47)
  {

    uint64_t v47 = 0;
  }
  re::make::shared::object<re::ecs2::MaterialParameterBlockArraySystem>((re *)&v76);
  uint64_t v46 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v46);
  if (v46)
  {

    uint64_t v46 = 0;
  }
  re::make::shared::object<re::ecs2::MaterialParametersSystem>((re *)&v76);
  uint64_t v45 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v45);
  if (v45)
  {

    uint64_t v45 = 0;
  }
  re::make::shared::object<re::ecs2::IKParametersSystem>((re *)&v76);
  uint64_t v44 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v44);
  if (v44)
  {

    uint64_t v44 = 0;
  }
  re::make::shared::object<re::ecs2::RigSystem>((re *)&v76);
  uint64_t v43 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v43);
  if (v43)
  {

    uint64_t v43 = 0;
  }
  re::make::shared::object<re::ecs2::SkeletalPoseSystem>((re *)&v76);
  uint64_t v42 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v42);
  if (v42)
  {

    uint64_t v42 = 0;
  }
  re::make::shared::object<re::ecs2::MeshDeformationSystem>((re *)&v76);
  uint64_t v41 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v41);
  if (v41)
  {

    uint64_t v41 = 0;
  }
  re::make::shared::object<re::ecs2::BlendShapeWeightsSystem>((re *)&v76);
  uint64_t v40 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v40);
  if (v40)
  {

    uint64_t v40 = 0;
  }
  re::make::shared::object<re::ecs2::MeshOffsetsSystem>((re *)&v76);
  uint64_t v39 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v39);
  if (v39)
  {

    uint64_t v39 = 0;
  }
  re::make::shared::object<re::ecs2::SkeletalDebugSystem>((re *)&v76);
  uint64_t v38 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v38);
  if (v38)
  {

    uint64_t v38 = 0;
  }
  re::make::shared::object<re::ecs2::MeshSmoothSystem>((re *)&v76);
  uint64_t v37 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v37);
  if (v37)
  {

    uint64_t v37 = 0;
  }
  re::make::shared::object<re::ecs2::AnimationLibrarySystem>((re *)&v76);
  uint64_t v36 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v36);
  if (v36)
  {

    uint64_t v36 = 0;
  }
  re::make::shared::object<re::ecs2::GroundPlaneSystem>((re *)&v76);
  uint64_t v35 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v35);
  if (v35)
  {

    uint64_t v35 = 0;
  }
  double v9 = re::make::shared::object<re::ecs2::VideoComponentSystem>((re *)&v76);
  uint64_t v34 = v76;
  (*(void (**)(void, uint64_t *, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v34, v9);
  if (v34)
  {

    uint64_t v34 = 0;
  }
  if (a2)
  {
    uint64_t v80 = *(void *)(a1 + 24);
    uint64_t v81 = 0;
    re::FunctionBase<24ul,void ()(re::SharedPtr<re::ecs2::System>)>::operator=<24ul>((uint64_t)v79, a1);
    re::ecs2::RenderingSystem::addRenderingSubsystemsUsingLambda((uint64_t)v79);
    re::FunctionBase<24ul,void ()(re::SharedPtr<re::ecs2::System>)>::destroyCallable((uint64_t)v79);
  }
  re::make::shared::object<re::ecs2::AudioUpdateSystem>((re *)&v76);
  uint64_t v33 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v33);
  if (v33)
  {

    uint64_t v33 = 0;
  }
  re::make::shared::object<re::ecs2::AudioSessionSystem>((re *)&v76);
  uint64_t v32 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v32);
  if (v32)
  {

    uint64_t v32 = 0;
  }
  re::make::shared::object<re::ecs2::VideoAudioControlSystem>((re *)&v76);
  uint64_t v31 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v31);
  if (v31)
  {

    uint64_t v31 = 0;
  }
  re::make::shared::object<re::ecs2::AudioPlayerSystem>((re *)&v76);
  uint64_t v30 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v30);
  if (v30)
  {

    uint64_t v30 = 0;
  }
  re::make::shared::object<re::ecs2::AudioAnimationSystem>((re *)&v76);
  uint64_t v29 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v29);
  if (v29)
  {

    uint64_t v29 = 0;
  }
  re::make::shared::object<re::ecs2::AudioMixerSystem>((re *)&v76);
  uint64_t v28 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v28);
  if (v28)
  {

    uint64_t v28 = 0;
  }
  re::make::shared::object<re::ecs2::ReverbSystem>((re *)&v76);
  uint64_t v27 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v27);
  if (v27)
  {

    uint64_t v27 = 0;
  }
  re::make::shared::object<re::ecs2::AcousticMeshSystem>((re *)&v76);
  uint64_t v26 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v26);
  if (v26)
  {

    uint64_t v26 = 0;
  }
  double v10 = re::make::shared::object<re::ecs2::SpatialSceneClassificationSystem>((re *)&v76);
  uint64_t v25 = v76;
  (*(void (**)(void, uint64_t *, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v25, v10);
  if (v25)
  {

    uint64_t v25 = 0;
  }
  re::make::shared::object<re::ecs2::VoiceSystem>((re *)&v76);
  uint64_t v24 = v76;
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v24);
  if (v24)
  {

    uint64_t v24 = 0;
  }
  double v11 = re::make::shared::object<re::ecs2::ListenerSystem>((re *)&v76);
  uint64_t v23 = v76;
  (*(void (**)(void, uint64_t *, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v23, v11);
  if (v23)
  {

    uint64_t v23 = 0;
  }
  re::make::shared::object<re::ecs2::AudioDebugSystem>((re *)&v76);
  uint64_t v22 = v76;
  long long v12 = (re *)(*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v22);
  if (v22)
  {

    uint64_t v22 = 0;
  }
  uint64_t v13 = re::globalAllocators(v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13[2] + 32))(v13[2], 232, 8);
  re::ecs2::System::System(v14, 2);
  *(void *)uint64_t v15 = &unk_26E704400;
  *(void *)(v15 + 112) = 0;
  *(void *)(v15 + 120) = 0;
  *(void *)(v15 + 104) = 0;
  *(_DWORD *)(v15 + 128) = 0;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  uint64_t v21 = v15;
  long long v16 = (re *)(*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v21);
  if (v21)
  {

    uint64_t v21 = 0;
  }
  long long v17 = re::globalAllocators(v16);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v17[2] + 32))(v17[2], 104, 8);
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(void *)(v18 + 96) = 0;
  re::ecs2::System::System(v18, 1);
  void *v19 = &unk_26E701AA8;
  uint64_t v20 = v19;
  (*(void (**)(void, void **))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &v20);
  if (v20) {
}
  }

re *re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re *this, re::ecs2::Scene *a2)
{
  v4[5] = *MEMORY[0x263EF8340];
  if (this)
  {
    uint64_t v2 = this;
    uint64_t v3 = re::globalAllocators(this)[2];
    v4[0] = &unk_26E6FF7B8;
    v4[1] = v2;
    v4[3] = v3;
    v4[4] = v4;
    return (re *)re::FunctionBase<24ul,void ()(re::SharedPtr<re::ecs2::System>)>::destroyCallable((uint64_t)v4);
  }
  return this;
}

re *re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re *result, uint64_t a2)
{
  v74[5] = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v3 = result;
    BOOL v4 = re::globalAllocators(result);
    uint64_t v5 = v4[2];
    v71[2] = v3;
    uint64_t v72 = v5;
    v71[0] = &unk_26E6FF810;
    v71[1] = a2;
    uint64_t v73 = v71;
    uint64_t v6 = re::globalAllocators((re *)v4);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6[2] + 32))(v6[2], 128, 8);
    re::ecs2::System::System(v7, 1, 1);
    void *v8 = &unk_26E704810;
    v8[14] = 0;
    v8[15] = 0;
    v8[13] = 0;
    uint64_t v70 = v8;
    (*(void (**)(void *, void **))(*v73 + 16))(v73, &v70);
    if (v70)
    {

      uint64_t v70 = 0;
    }
    re::make::shared::object<re::ecs2::SceneSystem>((re *)v74);
    uint64_t v69 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v69);
    if (v69)
    {

      uint64_t v69 = 0;
    }
    re::make::shared::object<re::ecs2::TimebaseSystem>((re *)v74);
    uint64_t v68 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v68);
    if (v68)
    {

      uint64_t v68 = 0;
    }
    re::make::shared::object<re::ecs2::DeferredActivationSystem>((re *)v74);
    uint64_t v67 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v67);
    if (v67)
    {

      uint64_t v67 = 0;
    }
    double Trace = re::make::shared::object<re::ecs2::LoadTraceSystem>((re *)v74);
    uint64_t v66 = v74[0];
    (*(void (**)(void *, uint64_t *, double))(*v73 + 16))(v73, &v66, Trace);
    if (v66)
    {

      uint64_t v66 = 0;
    }
    re::make::shared::object<re::ecs2::NetworkAssetComponentSystem>((re *)v74);
    uint64_t v65 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v65);
    if (v65)
    {

      uint64_t v65 = 0;
    }
    re::make::shared::object<re::ecs2::AssetMutateTrackingSystem>((re *)v74);
    uint64_t v64 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v64);
    if (v64)
    {

      uint64_t v64 = 0;
    }
    re::make::shared::object<re::ecs2::CameraMovementSystem>((re *)v74);
    uint64_t v63 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v63);
    if (v63)
    {

      uint64_t v63 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveBoxSystem>((re *)v74);
    uint64_t v62 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v62);
    if (v62)
    {

      uint64_t v62 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>((re *)v74);
    uint64_t v61 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v61);
    if (v61)
    {

      uint64_t v61 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveCapsuleSystem>((re *)v74);
    uint64_t v60 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v60);
    if (v60)
    {

      uint64_t v60 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveConeSystem>((re *)v74);
    uint64_t v59 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v59);
    if (v59)
    {

      uint64_t v59 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveCylinderSystem>((re *)v74);
    uint64_t v58 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v58);
    if (v58)
    {

      uint64_t v58 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitivePlaneSystem>((re *)v74);
    uint64_t v57 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v57);
    if (v57)
    {

      uint64_t v57 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitivePyramidSystem>((re *)v74);
    uint64_t v56 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v56);
    if (v56)
    {

      uint64_t v56 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveSphereSystem>((re *)v74);
    uint64_t v55 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v55);
    if (v55)
    {

      uint64_t v55 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveTetrahedronSystem>((re *)v74);
    uint64_t v54 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v54);
    if (v54)
    {

      uint64_t v54 = 0;
    }
    re::make::shared::object<re::ecs2::PrimitiveTubeSystem>((re *)v74);
    uint64_t v53 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v53);
    if (v53)
    {

      uint64_t v53 = 0;
    }
    re::make::shared::object<re::ecs2::Static3DTextSystem>((re *)v74);
    uint64_t v52 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v52);
    if (v52)
    {

      uint64_t v52 = 0;
    }
    re::make::shared::object<re::ecs2::MeshSceneSystem>((re *)v74);
    uint64_t v51 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v51);
    if (v51)
    {

      uint64_t v51 = 0;
    }
    re::make::shared::object<re::ecs2::StateMachineSystem>((re *)v74);
    uint64_t v50 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v50);
    if (v50)
    {

      uint64_t v50 = 0;
    }
    re::make::shared::object<re::ecs2::SkeletalPosePreparationSystem>((re *)v74);
    uint64_t v49 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v49);
    if (v49)
    {

      uint64_t v49 = 0;
    }
    re::make::shared::object<re::ecs2::AnimationUpdateSystem>((re *)v74);
    uint64_t v48 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v48);
    if (v48)
    {

      uint64_t v48 = 0;
    }
    re::make::shared::object<re::ecs2::AnimationSystem>((re *)v74);
    uint64_t v47 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v47);
    if (v47)
    {

      uint64_t v47 = 0;
    }
    re::make::shared::object<re::ecs2::TextSystem>((re *)v74);
    uint64_t v46 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v46);
    if (v46)
    {

      uint64_t v46 = 0;
    }
    re::make::shared::object<re::ecs2::RemoteEffectsSystem>((re *)v74);
    uint64_t v45 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v45);
    if (v45)
    {

      uint64_t v45 = 0;
    }
    re::make::shared::object<re::ecs2::PhysicsSystem>((re *)v74);
    uint64_t v44 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v44);
    if (v44)
    {

      uint64_t v44 = 0;
    }
    double v10 = re::make::shared::object<re::ecs2::PhysicsDebugSystem>((re *)v74);
    uint64_t v43 = v74[0];
    (*(void (**)(void *, uint64_t *, double))(*v73 + 16))(v73, &v43, v10);
    if (v43)
    {

      uint64_t v43 = 0;
    }
    re::make::shared::object<re::ecs2::TransformSystem>((re *)v74);
    uint64_t v42 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v42);
    if (v42)
    {

      uint64_t v42 = 0;
    }
    re::make::shared::object<re::ecs2::RayCastSystem>((re *)v74);
    uint64_t v41 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v41);
    if (v41)
    {

      uint64_t v41 = 0;
    }
    re::make::shared::object<re::ecs2::MaterialOverrideSystem>((re *)v74);
    uint64_t v40 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v40);
    if (v40)
    {

      uint64_t v40 = 0;
    }
    re::make::shared::object<re::ecs2::MaterialParameterBlockArraySystem>((re *)v74);
    uint64_t v39 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v39);
    if (v39)
    {

      uint64_t v39 = 0;
    }
    re::make::shared::object<re::ecs2::MaterialParametersSystem>((re *)v74);
    uint64_t v38 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v38);
    if (v38)
    {

      uint64_t v38 = 0;
    }
    re::make::shared::object<re::ecs2::IKParametersSystem>((re *)v74);
    uint64_t v37 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v37);
    if (v37)
    {

      uint64_t v37 = 0;
    }
    re::make::shared::object<re::ecs2::RigSystem>((re *)v74);
    uint64_t v36 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v36);
    if (v36)
    {

      uint64_t v36 = 0;
    }
    re::make::shared::object<re::ecs2::SkeletalPoseSystem>((re *)v74);
    uint64_t v35 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v35);
    if (v35)
    {

      uint64_t v35 = 0;
    }
    re::make::shared::object<re::ecs2::MeshDeformationSystem>((re *)v74);
    uint64_t v34 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v34);
    if (v34)
    {

      uint64_t v34 = 0;
    }
    re::make::shared::object<re::ecs2::BlendShapeWeightsSystem>((re *)v74);
    uint64_t v33 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v33);
    if (v33)
    {

      uint64_t v33 = 0;
    }
    re::make::shared::object<re::ecs2::MeshOffsetsSystem>((re *)v74);
    uint64_t v32 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v32);
    if (v32)
    {

      uint64_t v32 = 0;
    }
    re::make::shared::object<re::ecs2::SkeletalDebugSystem>((re *)v74);
    uint64_t v31 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v31);
    if (v31)
    {

      uint64_t v31 = 0;
    }
    re::make::shared::object<re::ecs2::MeshSmoothSystem>((re *)v74);
    uint64_t v30 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v30);
    if (v30)
    {

      uint64_t v30 = 0;
    }
    re::make::shared::object<re::ecs2::AnimationLibrarySystem>((re *)v74);
    uint64_t v29 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v29);
    if (v29)
    {

      uint64_t v29 = 0;
    }
    re::make::shared::object<re::ecs2::GroundPlaneSystem>((re *)v74);
    uint64_t v28 = v74[0];
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v28);
    if (v28)
    {

      uint64_t v28 = 0;
    }
    double v11 = re::make::shared::object<re::ecs2::VideoComponentSystem>((re *)v74);
    uint64_t v27 = v74[0];
    (*(void (**)(void *, uint64_t *, double))(*v73 + 16))(v73, &v27, v11);
    if (v27)
    {

      uint64_t v27 = 0;
    }
    v74[3] = v72;
    v74[4] = 0;
    re::FunctionBase<24ul,void ()(re::SharedPtr<re::ecs2::System>)>::operator=<24ul>((uint64_t)v74, (uint64_t)v71);
    re::ecs2::RenderingSystem::addRenderingSubsystemsUsingLambda((uint64_t)v74);
    re::FunctionBase<24ul,void ()(re::SharedPtr<re::ecs2::System>)>::destroyCallable((uint64_t)v74);
    re::make::shared::object<re::ecs2::AudioUpdateSystem>((re *)&v25);
    uint64_t v26 = v25;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v26);
    if (v26)
    {

      uint64_t v26 = 0;
    }
    re::make::shared::object<re::ecs2::AudioSessionSystem>((re *)&v24);
    uint64_t v25 = v24;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v25);
    if (v25)
    {

      uint64_t v25 = 0;
    }
    re::make::shared::object<re::ecs2::VideoAudioControlSystem>((re *)&v23);
    uint64_t v24 = v23;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v24);
    if (v24)
    {

      uint64_t v24 = 0;
    }
    re::make::shared::object<re::ecs2::AudioPlayerSystem>((re *)&v22);
    uint64_t v23 = v22;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v23);
    if (v23)
    {

      uint64_t v23 = 0;
    }
    re::make::shared::object<re::ecs2::AudioAnimationSystem>((re *)&v21);
    uint64_t v22 = v21;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v22);
    if (v22)
    {

      uint64_t v22 = 0;
    }
    re::make::shared::object<re::ecs2::AudioMixerSystem>((re *)&v20);
    uint64_t v21 = v20;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v21);
    if (v21)
    {

      uint64_t v21 = 0;
    }
    re::make::shared::object<re::ecs2::ReverbSystem>((re *)&v19);
    uint64_t v20 = v19;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v20);
    if (v20)
    {

      uint64_t v20 = 0;
    }
    re::make::shared::object<re::ecs2::AcousticMeshSystem>((re *)&v18);
    uint64_t v19 = v18;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v19);
    if (v19)
    {

      uint64_t v19 = 0;
    }
    double v12 = re::make::shared::object<re::ecs2::SpatialSceneClassificationSystem>((re *)&v17);
    uint64_t v18 = v17;
    (*(void (**)(void *, uint64_t *, double))(*v73 + 16))(v73, &v18, v12);
    if (v18)
    {

      uint64_t v18 = 0;
    }
    re::make::shared::object<re::ecs2::VoiceSystem>((re *)&v16);
    uint64_t v17 = v16;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v17);
    if (v17)
    {

      uint64_t v17 = 0;
    }
    double v13 = re::make::shared::object<re::ecs2::ListenerSystem>((re *)&v15);
    uint64_t v16 = v15;
    (*(void (**)(void *, uint64_t *, double))(*v73 + 16))(v73, &v16, v13);
    if (v16)
    {

      uint64_t v16 = 0;
    }
    re::make::shared::object<re::ecs2::AudioDebugSystem>((re *)&v14);
    uint64_t v15 = v14;
    (*(void (**)(void *, uint64_t *))(*v73 + 16))(v73, &v15);
    if (v15) {

    }
    return (re *)re::FunctionBase<24ul,void ()(re::SharedPtr<re::ecs2::System>)>::destroyCallable((uint64_t)v71);
  }
  return result;
}

re::ecs2::Entity *re::ecs2::ComponentHelper::privateSceneDataEntity(re::ecs2::ComponentHelper *this, re::ecs2::Scene *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = *((void *)this + 13);
  uint64_t v15 = 0x4B834A2ABFA269B4;
  uint64_t v16 = "com.apple.RealityKit.PrivateSceneData";
  uint64_t v5 = *(void *)(v4 + 328);
  if (v5)
  {
    uint64_t v6 = *(re::ecs2::Entity ***)(v4 + 344);
    uint64_t v7 = 8 * v5;
    while (1)
    {
      double v8 = *v6;
      if ((*((void *)*v6 + 34) ^ 0x4B834A2ABFA269B4uLL) <= 1)
      {
        double v9 = (char *)*((void *)v8 + 35);
        if (v9 == "com.apple.RealityKit.PrivateSceneData" || !strcmp(v9, "com.apple.RealityKit.PrivateSceneData")) {
          break;
        }
      }
      ++v6;
      v7 -= 8;
      if (!v7) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    double v8 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v15);
  if (!v8)
  {
    if (v2)
    {
      double v11 = re::ecs2::EntityFactory::instance(v10);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v11, 4uLL, &v14);
      double v12 = v14;
      uint64_t v15 = 0x4B834A2ABFA269B4;
      uint64_t v16 = "com.apple.RealityKit.PrivateSceneData";
      re::StringID::operator=((unint64_t *)v14 + 34, &v15);
      re::StringID::destroyString((re::StringID *)&v15);
      *((_DWORD *)v12 + 72) |= 0x400u;
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(*((void *)this + 13) + 304), (uint64_t *)&v14);
      double v8 = v14;
      if (v14) {
    }
      }
  }
  return v8;
}

re::ecs2::Entity *makeSceneDataEntity(uint64_t a1, uint64_t a2, int a3, void *a4, int a5)
{
  if (*(unsigned char *)a2) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 104);
  uint64_t v12 = *(void *)(v11 + 328);
  if (v12)
  {
    double v13 = *(uint64_t **)(v11 + 344);
    uint64_t v14 = 8 * v12;
    while (1)
    {
      uint64_t v15 = *v13;
      if (re::StringID::operator==((void *)(*v13 + 272), a4))
      {
        uint64_t v16 = *(void *)(v15 + 200);
        if (!v16) {
          uint64_t v16 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v15 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        }
        uint64_t OwnerPeerID = *(void *)(v16 + 32);
        if (OwnerPeerID) {
          uint64_t OwnerPeerID = RESyncableGetOwnerPeerID();
        }
        if (OwnerPeerID == v10) {
          return (re::ecs2::Entity *)*v13;
        }
      }
      ++v13;
      v14 -= 8;
      if (!v14) {
        goto LABEL_13;
      }
    }
  }
  else
  {
    if (!a3) {
      return 0;
    }
LABEL_13:
    uint64_t v18 = *(re::ecs2::EntityFactory **)(a1 + 56);
    if (v18)
    {
      uint64_t v19 = (*(uint64_t (**)(re::ecs2::EntityFactory *))(*(void *)v18 + 32))(v18);
      uint64_t v18 = (re::ecs2::EntityFactory *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v19);
      if (v18)
      {
        uint64_t v18 = (re::ecs2::EntityFactory *)*((void *)v18 + 303);
        if (v18) {
          uint64_t v18 = (re::ecs2::EntityFactory *)RESyncNetSessionPeerID();
        }
      }
    }
    if (!*(unsigned char *)a2 || *(re::ecs2::EntityFactory **)(a2 + 8) == v18)
    {
      uint64_t v20 = re::ecs2::EntityFactory::instance(v18);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v20, 4uLL, &v27);
      uint64_t v21 = v27;
      uint64_t v22 = a4[1];
      v26[0] = 2 * *a4;
      v26[1] = v22;
      re::StringID::operator=((unint64_t *)v27 + 34, v26);
      re::StringID::destroyString((re::StringID *)v26);
      *((_DWORD *)v21 + 72) |= 0x400u;
      uint64_t v23 = (re::ecs2::NetworkComponent *)*((void *)v21 + 25);
      if (!v23) {
        uint64_t v23 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      }
      re::ecs2::NetworkComponent::setNetworkShareMode(v23, a5);
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::add((void *)(*(void *)(a1 + 104) + 304), (uint64_t *)&v27);
      uint64_t v24 = v27;
      if (v27) {
    }
      }
    else
    {
      return 0;
    }
  }
  return v24;
}

void *re::ecs2::ComponentHelper::findAssetHandles(void *result, uint64_t a2)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = result[7];
  if (v2)
  {
    uint64_t v4 = (const re::IntrospectionBase ***)result[9];
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = (*((uint64_t (**)(const re::IntrospectionBase **))*v6 + 5))(v6);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      std::__function::__value_func<void ()(re::AssetHandle *)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
      v10[0] = &unk_26E6CA550;
      v10[1] = v9;
      uint64_t v10[3] = v10;
      re::IntrospectionWalker::walk(v8, v6, (uint64_t)v10);
      std::__function::__value_func<void ()(re::IntrospectionBase const&,void const*)>::~__value_func[abi:nn180100](v10);
      uint64_t result = std::__function::__value_func<void ()(re::AssetHandle *)>::~__value_func[abi:nn180100](v9);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

void *re::ecs2::ComponentHelper::addToLoadRequest(re::ecs2::ComponentHelper *this, re::AssetLoadRequest *a2, re::ecs2::Entity *a3)
{
  int v3 = (int)a3;
  v12[4] = *MEMORY[0x263EF8340];
  v12[0] = &unk_26E6FF868;
  v12[1] = this;
  uint64_t v12[3] = v12;
  re::ecs2::ComponentHelper::findAssetHandles(a2, (uint64_t)v12);
  uint64_t result = std::__function::__value_func<void ()(re::AssetHandle *)>::~__value_func[abi:nn180100](v12);
  if (v3)
  {
    uint64_t v8 = *((void *)a2 + 41);
    if (v8)
    {
      double v9 = (re::AssetLoadRequest **)*((void *)a2 + 43);
      uint64_t v10 = 8 * v8;
      do
      {
        uint64_t v11 = *v9++;
        uint64_t result = (void *)re::ecs2::ComponentHelper::addToLoadRequest(this, v11, (re::ecs2::Entity *)1, v7);
        v10 -= 8;
      }
      while (v10);
    }
  }
  return result;
}

void re::ecs2::ComponentHelper::getComponentsWithoutAnyExplicitRealityFileSerializationFlag(re::ecs2::ComponentHelper *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t)re::ecs2::ComponentTypeRegistry::instance(this);
  uint64_t v4 = *(void *)(v3 + 24);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  if (v4)
  {
    for (unint64_t i = 0; i != v4; ++i)
    {
      uint64_t v6 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v3);
      uint64_t v3 = re::ecs2::ComponentTypeRegistry::operator[]((uint64_t)v6, i);
      uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(v3 + 40));
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.i32[0] != 1)
      {
        uint64_t v8 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v3);
        uint64_t v9 = re::ecs2::ComponentTypeRegistry::operator[]((uint64_t)v8, i);
        re::StringID::StringID((re::StringID *)&v10, (const StringID *)(v9 + 24));
        re::DynamicArray<re::StringID>::add((_anonymous_namespace_ *)a2, &v10);
        re::StringID::destroyString((re::StringID *)&v10);
      }
    }
  }
}

void re::make::shared::object<re::ecs2::SceneSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  void *v4 = &unk_26E6FDA58;
  *(void *)a1 = v4;
}

void re::make::shared::object<re::ecs2::TimebaseSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  re::ecs2::System::System(v3, 1);
  void *v4 = &unk_26E70B120;
  v4[13] = 0;
  *(void *)a1 = v4;
}

re::ecs2::DeferredActivationSystem *re::make::shared::object<re::ecs2::DeferredActivationSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::DeferredActivationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2]
                                                                                                  + 32))(v2[2], 368, 8);
  uint64_t result = re::ecs2::DeferredActivationSystem::DeferredActivationSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::DeferredActivationSystem *re::ecs2::DeferredActivationSystem::DeferredActivationSystem(re::ecs2::DeferredActivationSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26E70BA70;
  *(unsigned char *)(v2 + 104) = 0;
  uint64_t v3 = v2 + 112;
  *(void *)(v2 + 112) = &unk_26E70BAE0;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 128) = 0;
  uint64_t v4 = v2 + 128;
  *(_DWORD *)(v2 + 144) = 1;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  uint64_t v5 = (void *)(v2 + 248);
  *(_OWORD *)(v2 + 184) = 0u;
  uint64_t v6 = (void *)(v2 + 184);
  *(_DWORD *)(v2 + 264) = 1;
  uint8x8_t v7 = (void *)(v2 + 296);
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(void *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 312) = 1;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 345) = 0u;
  StringID v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 66) += 2;
  *((void *)this + 36) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 78) += 2;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = this;
  *((void *)this + 44) = v3;
  *((unsigned char *)this + 360) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  uint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::DeferredActivationComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        uint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        uint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

double re::make::shared::object<re::ecs2::LoadTraceSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 264, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(void *)(v3 + 256) = 0;
  re::ecs2::System::System(v3, 1);
  *(void *)uint64_t v4 = &unk_26E703ED0;
  *(void *)(v4 + 104) = 2;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_DWORD *)(v4 + 144) = 0;
  *(void *)&double result = 0x7FFFFFFFLL;
  *(void *)(v4 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 188) = 0u;
  *(void *)(v4 + 204) = 0x7FFFFFFFLL;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_DWORD *)(v4 + 248) = 0;
  *(void *)(v4 + 252) = 0x7FFFFFFFLL;
  *(void *)a1 = v4;
  return result;
}

void re::make::shared::object<re::ecs2::NetworkAssetComponentSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 120, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(void *)(v3 + 112) = 0;
  re::ecs2::System::System(v3, 1);
  void *v4 = &unk_26E705250;
  *(void *)a1 = v4;
}

re::ecs2::AssetMutateTrackingSystem *re::make::shared::object<re::ecs2::AssetMutateTrackingSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AssetMutateTrackingSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 232, 8);
  double result = re::ecs2::AssetMutateTrackingSystem::AssetMutateTrackingSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::AssetMutateTrackingSystem *re::ecs2::AssetMutateTrackingSystem::AssetMutateTrackingSystem(re::ecs2::AssetMutateTrackingSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E70A7C0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  uint64_t v3 = (void *)(v2 + 168);
  return this;
}

void re::make::shared::object<re::ecs2::CameraMovementSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  void *v4 = &unk_26E6F7278;
  *(void *)a1 = v4;
}

void *re::make::shared::object<re::ecs2::PrimitiveBoxSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  double result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *double result = &unk_26E6FDAE0;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *uint64_t v2 = &unk_26E6FDB80;
  uint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FDBF0;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  StringID v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  uint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  uint8x8_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveBoxSystem::~PrimitiveBoxSystem(re::ecs2::PrimitiveBoxSystem *this)
{
  *(void *)this = &unk_26E6FDB80;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FDBF0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FDB80;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FDBF0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveBoxSystem::typeInfo(re::ecs2::PrimitiveBoxSystem *this)
{
  return re::ecs2::introspect_PrimitiveBoxSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Slice<re::ecs2::PrimitiveBoxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::deactivateComponent;
  uint64_t v6 = 0;
  uint8x8_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Slice<re::ecs2::PrimitiveBoxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v38, a5, 0);
  unint64_t v52 = a4;
  uint64_t v53 = v38;
  uint64_t v54 = v39;
  if (v38 != a5 || (unsigned __int16)v39 != 0xFFFFLL || (v39 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v53);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 28);
        *(_OWORD *)(v12 + 123) = *(_OWORD *)(v12 + 39);
        char v14 = *(unsigned char *)(v12 + 56);
        *(unsigned char *)(v12 + 140) = v14;
        char v15 = *(unsigned char *)(v12 + 57);
        *(unsigned char *)(v12 + 141) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v38);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v36, v8, &v38);
        long long v16 = *(_OWORD *)(v12 + 64);
        *(_OWORD *)(v12 + 64) = v36;
        long long v36 = v16;
        uint64_t v17 = *(void *)(v12 + 80);
        *(void *)(v12 + 80) = v37;
        uint64_t v37 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
        re::AssetHandle::loadNow(*(void *)(v12 + 72), 0);
        uint64_t v18 = *(void *)(v12 + 72);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          uint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 72))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 64));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 58))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 96))
              {
                uint64_t v24 = (void *)v22;
                uint64_t v25 = re::internal::buildCollisionShape(v12 + 28, v23);
                uint64_t v26 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v25);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v36, v8, v25, v26, 0, 2, 0);
                long long v28 = *(_OWORD *)(v12 + 88);
                uint64_t v27 = (uint64_t *)(v12 + 88);
                *(_OWORD *)uint64_t v27 = v36;
                long long v36 = v28;
                uint64_t v29 = v27[2];
                unsigned char v27[2] = v37;
                uint64_t v37 = v29;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
                re::AssetHandle::operator=((uint64_t)(v24 + 4), v27);
                re::ecs2::Component::markDirty(v24);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v30 = v52;
        unint64_t v31 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v53);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v30, v31, *v20);
        if ((void)v50)
        {
          if (BYTE8(v50)) {
            (*(void (**)(void))(*(void *)v50 + 40))();
          }
          long long v50 = 0u;
          long long v51 = 0u;
        }
        if (v45)
        {
          if (v49) {
            (*(void (**)(void))(*(void *)v45 + 40))();
          }
          uint64_t v49 = 0;
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t v45 = 0;
          ++v48;
        }
        if (v40)
        {
          if (v44) {
            (*(void (**)(void))(*(void *)v40 + 40))();
          }
          uint64_t v44 = 0;
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v40 = 0;
          ++v43;
        }
        if (v38 && (v39 & 1) != 0) {
          (*(void (**)(void))(*(void *)v38 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v53);
    }
    while (v53 != a5 || (unsigned __int16)v54 != 0xFFFF || WORD1(v54) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      uint64_t v35 = (void *)(a1 + 192);
    }
    else {
      uint64_t v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    long long v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    long long v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 64);
      if (v7)
      {

        *(void *)(v6 + 64) = 0;
      }
      *(void *)(v6 + 72) = 0;
      uint64_t v8 = *(void *)(v6 + 88);
      if (v8)
      {

        *(void *)(v6 + 88) = 0;
      }
      *(void *)(v6 + 96) = 0;
      *(void *)(v6 + 112) = 0x1000100010001;
      *(_OWORD *)(v6 + 120) = xmmword_234371EE0;
      *(_WORD *)(v6 + 136) = 257;
      ++a3;
      *(unsigned char *)(v6 + 138) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FDC58;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FDCB0;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FDD08;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FDD60;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FDC58;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FDCB0;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FDD08;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FDD60;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FDC58;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FDC58;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FDCB0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FDCB0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FDD08;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FDD08;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FDD60;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FDD60;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Slice<re::ecs2::PrimitiveBoxComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxComponent>,re::Slice<re::ecs2::PrimitiveBoxComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FDDB8;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FDE58;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FDEC8;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveBoxWithRoundedCornersSystem::~PrimitiveBoxWithRoundedCornersSystem(re::ecs2::PrimitiveBoxWithRoundedCornersSystem *this)
{
  *(void *)this = &unk_26E6FDE58;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FDEC8;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FDE58;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FDEC8;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveBoxWithRoundedCornersSystem::typeInfo(re::ecs2::PrimitiveBoxWithRoundedCornersSystem *this)
{
  return re::ecs2::introspect_PrimitiveBoxWithRoundedCornersSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v51 = a4;
  uint64_t v52 = v37;
  uint64_t v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 120) = *(_OWORD *)(v12 + 28);
        *(_OWORD *)(v12 + 136) = *(_OWORD *)(v12 + 44);
        *(void *)(v12 + 151) = *(void *)(v12 + 59);
        char v14 = *(unsigned char *)(v12 + 68);
        *(unsigned char *)(v12 + 160) = v14;
        char v15 = *(unsigned char *)(v12 + 69);
        *(unsigned char *)(v12 + 161) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v35, v8, &v37);
        long long v16 = *(_OWORD *)(v12 + 72);
        *(_OWORD *)(v12 + 72) = v35;
        long long v35 = v16;
        uint64_t v17 = *(void *)(v12 + 88);
        *(void *)(v12 + 88) = v36;
        uint64_t v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(void *)(v12 + 80), 0);
        uint64_t v18 = *(void *)(v12 + 80);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 80))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 72));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 70))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 104))
              {
                uint64_t v23 = (void *)v22;
                uint64_t v24 = re::internal::buildCollisionShape(v12 + 28);
                uint64_t v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                long long v27 = *(_OWORD *)(v12 + 96);
                uint64_t v26 = (uint64_t *)(v12 + 96);
                *(_OWORD *)uint64_t v26 = v35;
                long long v35 = v27;
                uint64_t v28 = v26[2];
                uint64_t v26[2] = v36;
                uint64_t v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=((uint64_t)(v23 + 4), v26);
                re::ecs2::Component::markDirty(v23);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v29 = v51;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((void)v49)
        {
          if (BYTE8(v49)) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          long long v49 = 0u;
          long long v50 = 0u;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v43 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0) {
          (*(void (**)(void))(*(void *)v37 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      long long v35 = (void *)(a1 + 192);
    }
    else {
      long long v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 72);
      if (v7)
      {

        *(void *)(v6 + 72) = 0;
      }
      *(void *)(v6 + 80) = 0;
      uint64_t v8 = *(void *)(v6 + 96);
      if (v8)
      {

        *(void *)(v6 + 96) = 0;
      }
      *(void *)(v6 + 104) = 0;
      *(void *)(v6 + 120) = 0x3000100010001;
      *(_WORD *)(v6 + 128) = 4;
      *(_OWORD *)(v6 + 132) = xmmword_234371EF0;
      *(_DWORD *)(v6 + 148) = 1065353216;
      *(_DWORD *)(v6 + 152) = 16777473;
      *(_WORD *)(v6 + 156) = 1;
      ++a3;
      *(unsigned char *)(v6 + 158) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FDF30;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FDF88;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FDFE0;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FE038;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FDF30;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FDF88;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FDFE0;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FE038;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FDF30;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FDF30;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FDF88;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FDF88;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FDFE0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FDFE0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE038;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE038;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveBoxWithRoundedCornersComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::update(v8, a3, a4))re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7); {
  if (*(unsigned char *)(a1 + 232))
  }
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitiveCapsuleSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FE090;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FE130;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FE1A0;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveCapsuleSystem::~PrimitiveCapsuleSystem(re::ecs2::PrimitiveCapsuleSystem *this)
{
  *(void *)this = &unk_26E6FE130;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FE1A0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FE130;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FE1A0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveCapsuleSystem::typeInfo(re::ecs2::PrimitiveCapsuleSystem *this)
{
  return re::ecs2::introspect_PrimitiveCapsuleSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCapsuleComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCapsuleComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCapsuleComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v51 = a4;
  uint64_t v52 = v37;
  uint64_t v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 119) = *(_DWORD *)(v12 + 43);
        char v14 = *(unsigned char *)(v12 + 48);
        *(unsigned char *)(v12 + 124) = v14;
        char v15 = *(unsigned char *)(v12 + 49);
        *(unsigned char *)(v12 + 125) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v35, v8, &v37);
        long long v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v35;
        long long v35 = v16;
        uint64_t v17 = *(void *)(v12 + 72);
        *(void *)(v12 + 72) = v36;
        uint64_t v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(void *)(v12 + 64), 0);
        uint64_t v18 = *(void *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 64))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 50))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 88))
              {
                uint64_t v23 = (void *)v22;
                uint64_t v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                uint64_t v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                long long v27 = *(_OWORD *)(v12 + 80);
                uint64_t v26 = (uint64_t *)(v12 + 80);
                *(_OWORD *)uint64_t v26 = v35;
                long long v35 = v27;
                uint64_t v28 = v26[2];
                uint64_t v26[2] = v36;
                uint64_t v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=((uint64_t)(v23 + 4), v26);
                re::ecs2::Component::markDirty(v23);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v29 = v51;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((void)v49)
        {
          if (BYTE8(v49)) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          long long v49 = 0u;
          long long v50 = 0u;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v43 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0) {
          (*(void (**)(void))(*(void *)v37 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCapsuleComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCapsuleComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCapsuleComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      long long v35 = (void *)(a1 + 192);
    }
    else {
      long long v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 56);
      if (v7)
      {

        *(void *)(v6 + 56) = 0;
      }
      *(void *)(v6 + 64) = 0;
      uint64_t v8 = *(void *)(v6 + 80);
      if (v8)
      {

        *(void *)(v6 + 80) = 0;
      }
      *(void *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 104) = 65544;
      *(_WORD *)(v6 + 108) = 4;
      *(void *)(v6 + 112) = 0x400000003F000000;
      *(_WORD *)(v6 + 120) = 257;
      ++a3;
      *(unsigned char *)(v6 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FE208;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FE260;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FE2B8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FE310;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FE208;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FE260;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FE2B8;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FE310;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE208;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE208;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE260;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE260;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE2B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE2B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE310;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE310;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCapsuleComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCapsuleComponent>,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCapsuleComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCapsuleComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCapsuleComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitiveConeSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FE368;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FE408;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FE478;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveConeSystem::~PrimitiveConeSystem(re::ecs2::PrimitiveConeSystem *this)
{
  *(void *)this = &unk_26E6FE408;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FE478;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FE408;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FE478;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveConeSystem::typeInfo(re::ecs2::PrimitiveConeSystem *this)
{
  return re::ecs2::introspect_PrimitiveConeSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveConeComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Slice<re::ecs2::PrimitiveConeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveConeComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Slice<re::ecs2::PrimitiveConeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveConeComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveConeComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveConeComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v51 = a4;
  uint64_t v52 = v37;
  uint64_t v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 96) = *(_OWORD *)(v12 + 28);
        char v14 = *(unsigned char *)(v12 + 44);
        *(unsigned char *)(v12 + 112) = v14;
        char v15 = *(unsigned char *)(v12 + 45);
        *(unsigned char *)(v12 + 113) = v15;
        re::MeshPrimitiveProvider::makeDescriptor((_anonymous_namespace_ *)(v12 + 28), v14, v15, (uint64_t)&v37);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v35, v8, &v37);
        long long v16 = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v12 + 48) = v35;
        long long v35 = v16;
        uint64_t v17 = *(void *)(v12 + 64);
        *(void *)(v12 + 64) = v36;
        uint64_t v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(void *)(v12 + 56), 0);
        uint64_t v18 = *(void *)(v12 + 56);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 56))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 48));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 46))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 80))
              {
                uint64_t v23 = (void *)v22;
                uint64_t v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                uint64_t v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                long long v27 = *(_OWORD *)(v12 + 72);
                uint64_t v26 = (uint64_t *)(v12 + 72);
                *(_OWORD *)uint64_t v26 = v35;
                long long v35 = v27;
                uint64_t v28 = v26[2];
                uint64_t v26[2] = v36;
                uint64_t v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=((uint64_t)(v23 + 4), v26);
                re::ecs2::Component::markDirty(v23);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v29 = v51;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((void)v49)
        {
          if (BYTE8(v49)) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          long long v49 = 0u;
          long long v50 = 0u;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v43 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0) {
          (*(void (**)(void))(*(void *)v37 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveConeComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveConeComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveConeComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      long long v35 = (void *)(a1 + 192);
    }
    else {
      long long v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 48);
      if (v7)
      {

        *(void *)(v6 + 48) = 0;
      }
      *(void *)(v6 + 56) = 0;
      uint64_t v8 = *(void *)(v6 + 72);
      if (v8)
      {

        *(void *)(v6 + 72) = 0;
      }
      *(void *)(v6 + 80) = 0;
      *(_DWORD *)(v6 + 96) = 65544;
      *(void *)(v6 + 100) = 0x3F0000003F800000;
      ++a3;
      *(_DWORD *)(v6 + 108) = 65793;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FE4E0;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FE538;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FE590;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FE5E8;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FE4E0;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FE538;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FE590;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FE5E8;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE4E0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE4E0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE538;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE538;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE590;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE590;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE5E8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE5E8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveConeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Slice<re::ecs2::PrimitiveConeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveConeComponent>,re::Slice<re::ecs2::PrimitiveConeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveConeComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveConeComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveConeComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitiveCylinderSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FE640;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FE6E0;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FE750;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveCylinderSystem::~PrimitiveCylinderSystem(re::ecs2::PrimitiveCylinderSystem *this)
{
  *(void *)this = &unk_26E6FE6E0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FE750;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FE6E0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FE750;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveCylinderSystem::typeInfo(re::ecs2::PrimitiveCylinderSystem *this)
{
  return re::ecs2::introspect_PrimitiveCylinderSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCylinderComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Slice<re::ecs2::PrimitiveCylinderComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCylinderComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Slice<re::ecs2::PrimitiveCylinderComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCylinderComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCylinderComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCylinderComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v51 = a4;
  uint64_t v52 = v37;
  uint64_t v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(void *)(v12 + 117) = *(void *)(v12 + 41);
        char v14 = *(unsigned char *)(v12 + 52);
        *(unsigned char *)(v12 + 128) = v14;
        char v15 = *(unsigned char *)(v12 + 53);
        *(unsigned char *)(v12 + 129) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v35, v8, &v37);
        long long v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v35;
        long long v35 = v16;
        uint64_t v17 = *(void *)(v12 + 72);
        *(void *)(v12 + 72) = v36;
        uint64_t v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(void *)(v12 + 64), 0);
        uint64_t v18 = *(void *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 64))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 54))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 88))
              {
                uint64_t v23 = (void *)v22;
                uint64_t v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                uint64_t v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                long long v27 = *(_OWORD *)(v12 + 80);
                uint64_t v26 = (uint64_t *)(v12 + 80);
                *(_OWORD *)uint64_t v26 = v35;
                long long v35 = v27;
                uint64_t v28 = v26[2];
                uint64_t v26[2] = v36;
                uint64_t v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=((uint64_t)(v23 + 4), v26);
                re::ecs2::Component::markDirty(v23);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v29 = v51;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((void)v49)
        {
          if (BYTE8(v49)) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          long long v49 = 0u;
          long long v50 = 0u;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v43 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0) {
          (*(void (**)(void))(*(void *)v37 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCylinderComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveCylinderComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCylinderComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      long long v35 = (void *)(a1 + 192);
    }
    else {
      long long v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 56);
      if (v7)
      {

        *(void *)(v6 + 56) = 0;
      }
      *(void *)(v6 + 64) = 0;
      uint64_t v8 = *(void *)(v6 + 80);
      if (v8)
      {

        *(void *)(v6 + 80) = 0;
      }
      *(void *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 104) = 65544;
      *(void *)(v6 + 108) = 0x3F0000003F800000;
      *(void *)(v6 + 116) = 0x10101013F000000;
      ++a3;
      *(unsigned char *)(v6 + 124) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FE7B8;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FE810;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FE868;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FE8C0;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FE7B8;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FE810;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FE868;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FE8C0;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE7B8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE7B8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE810;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE810;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE868;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE868;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FE8C0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FE8C0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveCylinderComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Slice<re::ecs2::PrimitiveCylinderComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveCylinderComponent>,re::Slice<re::ecs2::PrimitiveCylinderComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveCylinderComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveCylinderComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveCylinderComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitivePlaneSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FE918;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FE9B8;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FEA28;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitivePlaneSystem::~PrimitivePlaneSystem(re::ecs2::PrimitivePlaneSystem *this)
{
  *(void *)this = &unk_26E6FE9B8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FEA28;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FE9B8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FEA28;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitivePlaneSystem::typeInfo(re::ecs2::PrimitivePlaneSystem *this)
{
  return re::ecs2::introspect_PrimitivePlaneSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitivePlaneComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Slice<re::ecs2::PrimitivePlaneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePlaneComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Slice<re::ecs2::PrimitivePlaneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePlaneComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitivePlaneComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePlaneComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v51 = a4;
  uint64_t v52 = v37;
  uint64_t v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 112) = *(_OWORD *)(v12 + 28);
        *(_OWORD *)(v12 + 124) = *(_OWORD *)(v12 + 40);
        char v14 = *(unsigned char *)(v12 + 56);
        *(unsigned char *)(v12 + 140) = v14;
        char v15 = *(unsigned char *)(v12 + 57);
        *(unsigned char *)(v12 + 141) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v35, v8, &v37);
        long long v16 = *(_OWORD *)(v12 + 64);
        *(_OWORD *)(v12 + 64) = v35;
        long long v35 = v16;
        uint64_t v17 = *(void *)(v12 + 80);
        *(void *)(v12 + 80) = v36;
        uint64_t v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(void *)(v12 + 72), 0);
        uint64_t v18 = *(void *)(v12 + 72);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 72))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 64));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 58))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 96))
              {
                uint64_t v23 = (void *)v22;
                uint64_t v24 = re::internal::buildCollisionShape((re *)(v12 + 28));
                uint64_t v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                long long v27 = *(_OWORD *)(v12 + 88);
                uint64_t v26 = (uint64_t *)(v12 + 88);
                *(_OWORD *)uint64_t v26 = v35;
                long long v35 = v27;
                uint64_t v28 = v26[2];
                uint64_t v26[2] = v36;
                uint64_t v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=((uint64_t)(v23 + 4), v26);
                re::ecs2::Component::markDirty(v23);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v29 = v51;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((void)v49)
        {
          if (BYTE8(v49)) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          long long v49 = 0u;
          long long v50 = 0u;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v43 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0) {
          (*(void (**)(void))(*(void *)v37 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePlaneComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePlaneComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitivePlaneComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      long long v35 = (void *)(a1 + 192);
    }
    else {
      long long v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      uint64_t v11 = *a3;
      uint64_t v12 = *(void *)(*a3 + 64);
      if (v12)
      {

        *(void *)(v11 + 64) = 0;
      }
      *(void *)(v11 + 72) = 0;
      uint64_t v13 = *(void *)(v11 + 88);
      if (v13)
      {

        *(void *)(v11 + 88) = 0;
      }
      *(void *)(v11 + 96) = 0;
      *(_DWORD *)(v11 + 112) = 65537;
      *(_WORD *)(v11 + 116) = 0;
      *(void *)(v11 + 120) = _D8;
      *(_DWORD *)(v11 + 128) = 0;
      *(_WORD *)(v11 + 132) = 257;
      ++a3;
      *(_DWORD *)(v11 + 136) = 2;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FEA90;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FEAE8;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FEB40;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FEB98;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FEA90;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FEAE8;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FEB40;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FEB98;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FEA90;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FEA90;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FEAE8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FEAE8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FEB40;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FEB40;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FEB98;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FEB98;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePlaneComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Slice<re::ecs2::PrimitivePlaneComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePlaneComponent>,re::Slice<re::ecs2::PrimitivePlaneComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePlaneComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitivePlaneComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePlaneComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitivePyramidSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FEBF0;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FEC90;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FED00;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitivePyramidSystem::~PrimitivePyramidSystem(re::ecs2::PrimitivePyramidSystem *this)
{
  *(void *)this = &unk_26E6FEC90;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FED00;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FEC90;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FED00;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitivePyramidSystem::typeInfo(re::ecs2::PrimitivePyramidSystem *this)
{
  return re::ecs2::introspect_PrimitivePyramidSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitivePyramidComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Slice<re::ecs2::PrimitivePyramidComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePyramidComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Slice<re::ecs2::PrimitivePyramidComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePyramidComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitivePyramidComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePyramidComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v42, a5, 0);
  unint64_t v56 = a4;
  uint64_t v57 = v42;
  uint64_t v58 = v43;
  if (v42 != a5 || (unsigned __int16)v43 != 0xFFFFLL || (v43 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v57);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 119) = *(_DWORD *)(v12 + 43);
        char v14 = *(unsigned char *)(v12 + 48);
        *(unsigned char *)(v12 + 124) = v14;
        char v15 = *(unsigned char *)(v12 + 49);
        *(unsigned char *)(v12 + 125) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v42);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v40, v8, &v42);
        long long v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v40;
        long long v40 = v16;
        uint64_t v17 = *(void *)(v12 + 72);
        *(void *)(v12 + 72) = v41;
        uint64_t v41 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v40);
        re::AssetHandle::loadNow(*(void *)(v12 + 64), 0);
        uint64_t v18 = *(void *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 64))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 50))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 88))
              {
                unint64_t v28 = (void *)v22;
                uint64_t v29 = re::internal::buildCollisionShape(v12 + 28, v23, v24, v25, v26, v27);
                uint64_t v30 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v29);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v40, v8, v29, v30, 0, 2, 0);
                long long v32 = *(_OWORD *)(v12 + 80);
                uint64_t v31 = (uint64_t *)(v12 + 80);
                *(_OWORD *)uint64_t v31 = v40;
                long long v40 = v32;
                uint64_t v33 = v31[2];
                unsigned char v31[2] = v41;
                uint64_t v41 = v33;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v40);
                re::AssetHandle::operator=((uint64_t)(v28 + 4), v31);
                re::ecs2::Component::markDirty(v28);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v34 = v56;
        unint64_t v35 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v57);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v34, v35, *v20);
        if ((void)v54)
        {
          if (BYTE8(v54)) {
            (*(void (**)(void))(*(void *)v54 + 40))();
          }
          long long v54 = 0u;
          long long v55 = 0u;
        }
        if (v49)
        {
          if (v53) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          uint64_t v53 = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
          uint64_t v49 = 0;
          ++v52;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v42 && (v43 & 1) != 0) {
          (*(void (**)(void))(*(void *)v42 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v57);
    }
    while (v57 != a5 || (unsigned __int16)v58 != 0xFFFF || WORD1(v58) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePyramidComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitivePyramidComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitivePyramidComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      unint64_t v35 = (void *)(a1 + 192);
    }
    else {
      unint64_t v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      uint64_t v11 = *a3;
      uint64_t v12 = *(void *)(*a3 + 56);
      if (v12)
      {

        *(void *)(v11 + 56) = 0;
      }
      *(void *)(v11 + 64) = 0;
      uint64_t v13 = *(void *)(v11 + 80);
      if (v13)
      {

        *(void *)(v11 + 80) = 0;
      }
      *(void *)(v11 + 88) = 0;
      *(_WORD *)(v11 + 104) = 1;
      *(void *)(v11 + 108) = _D8;
      *(_DWORD *)(v11 + 116) = 1065353216;
      *(_WORD *)(v11 + 120) = 257;
      ++a3;
      *(unsigned char *)(v11 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FED68;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FEDC0;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FEE18;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FEE70;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FED68;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FEDC0;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FEE18;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FEE70;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      unint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      unint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FED68;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FED68;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FEDC0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FEDC0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FEE18;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FEE18;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FEE70;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FEE70;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitivePyramidComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Slice<re::ecs2::PrimitivePyramidComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitivePyramidComponent>,re::Slice<re::ecs2::PrimitivePyramidComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitivePyramidComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitivePyramidComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitivePyramidComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitiveSphereSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FEEC8;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FEF68;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FEFD8;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveSphereSystem::~PrimitiveSphereSystem(re::ecs2::PrimitiveSphereSystem *this)
{
  *(void *)this = &unk_26E6FEF68;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FEFD8;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FEF68;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FEFD8;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveSphereSystem::typeInfo(re::ecs2::PrimitiveSphereSystem *this)
{
  return re::ecs2::introspect_PrimitiveSphereSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveSphereComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Slice<re::ecs2::PrimitiveSphereComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveSphereComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Slice<re::ecs2::PrimitiveSphereComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveSphereComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveSphereComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveSphereComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v51 = a4;
  uint64_t v52 = v37;
  uint64_t v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(void *)(v12 + 96) = *(void *)(v12 + 28);
        *(_DWORD *)(v12 + 103) = *(_DWORD *)(v12 + 35);
        int v14 = *(unsigned __int8 *)(v12 + 40);
        *(unsigned char *)(v12 + 108) = v14;
        int v15 = *(unsigned __int8 *)(v12 + 41);
        *(unsigned char *)(v12 + 109) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v35, v8, &v37);
        long long v16 = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v12 + 48) = v35;
        long long v35 = v16;
        uint64_t v17 = *(void *)(v12 + 64);
        *(void *)(v12 + 64) = v36;
        uint64_t v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(void *)(v12 + 56), 0);
        uint64_t v18 = *(void *)(v12 + 56);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 56))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 48));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 42))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 80))
              {
                uint64_t v23 = (void *)v22;
                uint64_t v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                uint64_t v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                long long v27 = *(_OWORD *)(v12 + 72);
                uint64_t v26 = (uint64_t *)(v12 + 72);
                *(_OWORD *)uint64_t v26 = v35;
                long long v35 = v27;
                uint64_t v28 = v26[2];
                uint64_t v26[2] = v36;
                uint64_t v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=((uint64_t)(v23 + 4), v26);
                re::ecs2::Component::markDirty(v23);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v29 = v51;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((void)v49)
        {
          if (BYTE8(v49)) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          long long v49 = 0u;
          long long v50 = 0u;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v43 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0) {
          (*(void (**)(void))(*(void *)v37 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveSphereComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveSphereComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveSphereComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      long long v35 = (void *)(a1 + 192);
    }
    else {
      long long v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 48);
      if (v7)
      {

        *(void *)(v6 + 48) = 0;
      }
      *(void *)(v6 + 56) = 0;
      uint64_t v8 = *(void *)(v6 + 72);
      if (v8)
      {

        *(void *)(v6 + 72) = 0;
      }
      *(void *)(v6 + 80) = 0;
      *(_WORD *)(v6 + 96) = 8;
      *(_DWORD *)(v6 + 100) = 1056964608;
      *(_WORD *)(v6 + 104) = 257;
      ++a3;
      *(unsigned char *)(v6 + 106) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FF040;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FF098;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FF0F0;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FF148;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FF040;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FF098;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FF0F0;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        long long v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        long long v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *long long v55 = &unk_26E6FF148;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF040;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF040;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF098;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF098;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF0F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF0F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF148;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF148;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveSphereComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Slice<re::ecs2::PrimitiveSphereComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveSphereComponent>,re::Slice<re::ecs2::PrimitiveSphereComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveSphereComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveSphereComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveSphereComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitiveTetrahedronSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FF1A0;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FF240;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FF2B0;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveTetrahedronSystem::~PrimitiveTetrahedronSystem(re::ecs2::PrimitiveTetrahedronSystem *this)
{
  *(void *)this = &unk_26E6FF240;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FF2B0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FF240;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FF2B0;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveTetrahedronSystem::typeInfo(re::ecs2::PrimitiveTetrahedronSystem *this)
{
  return re::ecs2::introspect_PrimitiveTetrahedronSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTetrahedronComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTetrahedronComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTetrahedronComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v39, a5, 0);
  unint64_t v53 = a4;
  uint64_t v54 = v39;
  uint64_t v55 = v40;
  if (v39 != a5 || (unsigned __int16)v40 != 0xFFFFLL || (v40 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v54);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(void *)(v12 + 96) = *(void *)(v12 + 28);
        *(_DWORD *)(v12 + 103) = *(_DWORD *)(v12 + 35);
        int v14 = *(unsigned __int8 *)(v12 + 40);
        *(unsigned char *)(v12 + 108) = v14;
        int v15 = *(unsigned __int8 *)(v12 + 41);
        *(unsigned char *)(v12 + 109) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v39);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v37, v8, &v39);
        long long v16 = *(_OWORD *)(v12 + 48);
        *(_OWORD *)(v12 + 48) = v37;
        long long v37 = v16;
        uint64_t v17 = *(void *)(v12 + 64);
        *(void *)(v12 + 64) = v38;
        uint64_t v38 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
        re::AssetHandle::loadNow(*(void *)(v12 + 56), 0);
        uint64_t v18 = *(void *)(v12 + 56);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 56))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 48));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 42))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 80))
              {
                uint64_t v25 = (void *)v22;
                uint64_t v26 = re::internal::buildCollisionShape((re *)(v12 + 28), v23, v24);
                unint64_t v27 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v26);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v37, v8, v26, v27, 0, 2, 0);
                long long v29 = *(_OWORD *)(v12 + 72);
                unint64_t v28 = (uint64_t *)(v12 + 72);
                *(_OWORD *)unint64_t v28 = v37;
                long long v37 = v29;
                uint64_t v30 = v28[2];
                _DWORD v28[2] = v38;
                uint64_t v38 = v30;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
                re::AssetHandle::operator=((uint64_t)(v25 + 4), v28);
                re::ecs2::Component::markDirty(v25);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v31 = v53;
        unint64_t v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v54);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v31, v32, *v20);
        if ((void)v51)
        {
          if (BYTE8(v51)) {
            (*(void (**)(void))(*(void *)v51 + 40))();
          }
          long long v51 = 0u;
          long long v52 = 0u;
        }
        if (v46)
        {
          if (v50) {
            (*(void (**)(void))(*(void *)v46 + 40))();
          }
          uint64_t v50 = 0;
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          uint64_t v46 = 0;
          ++v49;
        }
        if (v41)
        {
          if (v45) {
            (*(void (**)(void))(*(void *)v41 + 40))();
          }
          uint64_t v45 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v41 = 0;
          ++v44;
        }
        if (v39 && (v40 & 1) != 0) {
          (*(void (**)(void))(*(void *)v39 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v54);
    }
    while (v54 != a5 || (unsigned __int16)v55 != 0xFFFF || WORD1(v55) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTetrahedronComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTetrahedronComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTetrahedronComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      uint64_t v35 = (void *)(a1 + 192);
    }
    else {
      uint64_t v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 48);
      if (v7)
      {

        *(void *)(v6 + 48) = 0;
      }
      *(void *)(v6 + 56) = 0;
      uint64_t v8 = *(void *)(v6 + 72);
      if (v8)
      {

        *(void *)(v6 + 72) = 0;
      }
      *(void *)(v6 + 80) = 0;
      *(_WORD *)(v6 + 96) = 1;
      *(_DWORD *)(v6 + 100) = 1065353216;
      *(_WORD *)(v6 + 104) = 257;
      ++a3;
      *(unsigned char *)(v6 + 106) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FF318;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FF370;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FF3C8;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FF420;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FF318;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FF370;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FF3C8;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        unint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *unint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FF420;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF318;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF318;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF370;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF370;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF3C8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF3C8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF420;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF420;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTetrahedronComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTetrahedronComponent>,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTetrahedronComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTetrahedronComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTetrahedronComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

void *re::make::shared::object<re::ecs2::PrimitiveTubeSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  uint8_t v3[16] = 0u;
  v3[17] = 0u;
  v3[18] = 0u;
  v3[19] = 0u;
  v3[20] = 0u;
  v3[21] = 0u;
  v3[22] = 0u;
  v3[23] = 0u;
  unint64_t result = (void *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase((uint64_t)v3);
  *unint64_t result = &unk_26E6FF478;
  *(void *)a1 = result;
  return result;
}

uint64_t re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System(a1, 1, 1);
  *unint64_t v2 = &unk_26E6FF518;
  unint64_t v3 = v2 + 13;
  v2[13] = &unk_26E6FF588;
  v2[14] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[15] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  uint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 15), (uint64_t)v9);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 1;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_OWORD *)(a1 + 361) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 264), 0);
  *(_DWORD *)(a1 + 280) += 2;
  *(void *)(a1 + 304) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)(a1 + 312), 0);
  *(_DWORD *)(a1 + 328) += 2;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = a1;
  *(void *)(a1 + 368) = v3;
  *(unsigned char *)(a1 + 376) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions((void *)a1, (uint64_t *)&v10);
  return a1;
}

void re::ecs2::PrimitiveTubeSystem::~PrimitiveTubeSystem(re::ecs2::PrimitiveTubeSystem *this)
{
  *(void *)this = &unk_26E6FF518;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FF588;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6FF518;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 18);
  *((void *)this + 13) = &unk_26E6FF588;
  re::FixedArray<CoreIKTransform>::deinit((uint64_t *)this + 15);
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::PrimitiveTubeSystem::typeInfo(re::ecs2::PrimitiveTubeSystem *this)
{
  return re::ecs2::introspect_PrimitiveTubeSystem(0);
}

double re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::willAddSceneToECSService(uint64_t a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTubeComponent>::addScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v6[0] = a1 + 104;
  v6[1] = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::deactivateComponent;
  v6[2] = 0;
  v6[3] = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Slice<re::ecs2::PrimitiveTubeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTubeComponent*>&&)#1}::__invoke;
  return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)v6);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::willRemoveSceneFromECSService(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene(a1 + 144, a2);
  uint64_t v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(void *)&long long v5 = a1 + 104;
  *((void *)&v5 + 1) = re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::deactivateComponent;
  uint64_t v6 = 0;
  unint64_t v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Slice<re::ecs2::PrimitiveTubeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTubeComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v5);
}

void re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = a3;
  v4[1] = a4;
  if (a2) {
    re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTubeComponent>::updateForScene(a1 + 144, a2, (uint64_t)v4, 0);
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::dependsOnComponents(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTubeComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  unint64_t result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    long long v5 = (re::ecs2::Component *)result;
    uint64_t v6 = 3;
    unint64_t v7 = 0xFFFFFFFFLL;
    do
    {
      unint64_t v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        unint64_t v11 = v8;
        unint64_t v7 = v9;
        goto LABEL_11;
      }
      ++v6;
    }
    while (v6 != 7);
    unint64_t v11 = -1;
LABEL_11:
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

BOOL re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 40) + 32))(*(void *)(*(void *)(a1 + 8) + 40));
  uint64_t v8 = re::ServiceLocator::service<re::AssetService>(v7);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  unint64_t v51 = a4;
  uint64_t v52 = v37;
  uint64_t v53 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      uint64_t v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(*(void *)v11 + 16);
      if (v13)
      {
        *(_OWORD *)(v12 + 104) = *(_OWORD *)(v12 + 28);
        *(_DWORD *)(v12 + 119) = *(_DWORD *)(v12 + 43);
        char v14 = *(unsigned char *)(v12 + 48);
        *(unsigned char *)(v12 + 124) = v14;
        char v15 = *(unsigned char *)(v12 + 49);
        *(unsigned char *)(v12 + 125) = v15;
        re::MeshPrimitiveProvider::makeDescriptor(v12 + 28, v14, v15, (uint64_t)&v37);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *))(*(void *)v8 + 40))(&v35, v8, &v37);
        long long v16 = *(_OWORD *)(v12 + 56);
        *(_OWORD *)(v12 + 56) = v35;
        long long v35 = v16;
        uint64_t v17 = *(void *)(v12 + 72);
        *(void *)(v12 + 72) = v36;
        uint64_t v36 = v17;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
        re::AssetHandle::loadNow(*(void *)(v12 + 64), 0);
        uint64_t v18 = *(void *)(v12 + 64);
        if (!v18 || (v19 = atomic_load((unsigned int *)(v18 + 704)), uint64_t v20 = (unint64_t *)(a3 + 32), v19 != 3))
        {
          unint64_t v21 = *(void **)(v13 + 176);
          if (v21 && v21[5] != *(void *)(v12 + 64))
          {
            re::AssetHandle::operator=((uint64_t)(v21 + 4), (uint64_t *)(v12 + 56));
            re::ecs2::Component::markDirty(v21);
          }
          uint64_t v20 = (unint64_t *)(a3 + 48);
          if (*(unsigned char *)(v12 + 50))
          {
            uint64_t v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            uint64_t v20 = (unint64_t *)(a3 + 48);
            if (v22)
            {
              uint64_t v20 = (unint64_t *)(a3 + 48);
              if (!*(void *)(v12 + 88))
              {
                uint64_t v23 = (void *)v22;
                uint64_t v24 = re::internal::buildCollisionShape((float *)(v12 + 28));
                uint64_t v25 = re::CollisionShapeAsset::assetType((re::CollisionShapeAsset *)v24);
                (*(void (**)(long long *__return_ptr, uint64_t, re **, uint64_t *, void, uint64_t, void))(*(void *)v8 + 416))(&v35, v8, v24, v25, 0, 2, 0);
                long long v27 = *(_OWORD *)(v12 + 80);
                uint64_t v26 = (uint64_t *)(v12 + 80);
                *(_OWORD *)uint64_t v26 = v35;
                long long v35 = v27;
                uint64_t v28 = v26[2];
                uint64_t v26[2] = v36;
                uint64_t v36 = v28;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v35);
                re::AssetHandle::operator=((uint64_t)(v23 + 4), v26);
                re::ecs2::Component::markDirty(v23);
                uint64_t v20 = (unint64_t *)(a3 + 48);
              }
            }
          }
        }
        unint64_t v29 = v51;
        unint64_t v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *v20);
        if ((void)v49)
        {
          if (BYTE8(v49)) {
            (*(void (**)(void))(*(void *)v49 + 40))();
          }
          long long v49 = 0u;
          long long v50 = 0u;
        }
        if (v44)
        {
          if (v48) {
            (*(void (**)(void))(*(void *)v44 + 40))();
          }
          uint64_t v48 = 0;
          uint64_t v45 = 0;
          uint64_t v46 = 0;
          uint64_t v44 = 0;
          ++v47;
        }
        if (v39)
        {
          if (v43) {
            (*(void (**)(void))(*(void *)v39 + 40))();
          }
          uint64_t v43 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          uint64_t v39 = 0;
          ++v42;
        }
        if (v37 && (v38 & 1) != 0) {
          (*(void (**)(void))(*(void *)v37 + 40))();
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != a5 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTubeComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  unint64_t v8 = v19;
  unint64_t v9 = v20;
  unint64_t v19 = a4;
  unint64_t v20 = v8;
  unint64_t v21 = v9;
  uint64_t v10 = (unsigned __int16)v9;
  uint64_t v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      unint64_t v14 = v19;
      unint64_t v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(void *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PrimitiveTubeComponent>::processUpdatingComponents()
{
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  unint64_t v10 = v8;
  if (!a4 && (v8 != a2 || v9 != a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0)) {
    (*(void (**)(void, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((void **)*a1 + 28)
  }
                                                                                                 + 16))(*((void *)*a1 + 28), a1, v8, v9);
  return v10;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  unint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTubeComponent>::addScene(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a2;
  unint64_t v4 = (_anonymous_namespace_ *)(a1 + 120);
  unint64_t v5 = *(void *)(a1 + 128);
  int v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if (v6) {
      uint64_t v7 = (void *)(a1 + 144);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 152);
    }
    uint64_t v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v6)
  {
    unint64_t v8 = (uint64_t *)(a1 + 144);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t **)(a1 + 152);
    if (!v5) {
      goto LABEL_17;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 8 * v5;
  do
  {
    uint64_t v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(void *)&long long v43 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    uint64_t v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v43);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v43);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v43);
    uint64_t v14 = a1 + 168;
    unint64_t v15 = v43;
    goto LABEL_43;
  }
LABEL_17:
  long long v43 = 0u;
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = -1;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v47 = 0;
  uint64_t v48 = 1;
  long long v49 = 0uLL;
  long long v50 = 0uLL;
  uint64_t v16 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::addUninitialized(a1);
  long long v17 = v44;
  *(void *)(v16 + 48) = 0;
  *(_OWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v16 + 56, (uint64_t)&v46 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v43);
  uint64_t v19 = *(void *)(a1 + 40);
  if (!v19)
  {
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    return;
  }
  uint64_t v20 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v19 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::init(v20, a1, v51);
  unint64_t v42 = *(void *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), &v51, (uint64_t *)&v42);
  unint64_t v21 = *(void *)(a1 + 40);
  unint64_t v22 = *(void *)(a1 + 160);
  if ((v21 & 0x3F) != 0) {
    unint64_t v23 = (v21 >> 6) + 1;
  }
  else {
    unint64_t v23 = v21 >> 6;
  }
  *(void *)(a1 + 160) = v21;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v23, &v43);
  if (v21 && v22 > v21)
  {
    uint64_t v24 = 63;
    uint64_t v25 = *(void *)(a1 + 160) & 0x3FLL;
    if (v25 && v25 != 63) {
      uint64_t v24 = ~(-1 << v25);
    }
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v26 = a1 + 144;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 152);
    }
    *(void *)(v26 + 8 * *(void *)(a1 + 128) - 8) &= v24;
  }
  unint64_t v27 = *(void *)(a1 + 40);
  unint64_t v28 = *(void *)(a1 + 208);
  if ((v27 & 0x3F) != 0) {
    unint64_t v29 = (v27 >> 6) + 1;
  }
  else {
    unint64_t v29 = v27 >> 6;
  }
  *(void *)(a1 + 208) = v27;
  *(void *)&long long v43 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v29, &v43);
  if (v27 && v28 > v27)
  {
    uint64_t v30 = 63;
    uint64_t v31 = *(void *)(a1 + 208) & 0x3FLL;
    if (v31 && v31 != 63) {
      uint64_t v30 = ~(-1 << v31);
    }
    if (*(unsigned char *)(a1 + 184)) {
      uint64_t v32 = a1 + 192;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 200);
    }
    *(void *)(v32 + 8 * *(void *)(a1 + 176) - 8) &= v30;
  }
  unint64_t v15 = v42;
  uint64_t v14 = a1 + 168;
LABEL_43:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(unsigned char *)(a1 + 232)) {
    return;
  }
  unint64_t v33 = *(void *)(a1 + 176);
  int v34 = *(_DWORD *)(a1 + 184);
  if (v33 >= 0xB)
  {
    if (v34) {
      long long v35 = (void *)(a1 + 192);
    }
    else {
      long long v35 = *(void **)(a1 + 200);
    }
    uint64_t v37 = 8 * v33;
    while (!*v35)
    {
      ++v35;
      v37 -= 8;
      if (!v37) {
        return;
      }
    }
LABEL_59:
    uint64_t v41 = *(re::ecs2::System **)(a1 + 216);
    if (!*((unsigned char *)v41 + 86)) {
      re::ecs2::System::queueToRun(v41, 0.0);
    }
    return;
  }
  if (v34)
  {
    uint64_t v36 = (uint64_t *)(a1 + 192);
    if (!v33) {
      return;
    }
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(a1 + 200);
    if (!v33) {
      return;
    }
  }
  uint64_t v38 = 0;
  uint64_t v39 = 8 * v33;
  do
  {
    uint64_t v40 = *v36++;
    v38 |= v40;
    v39 -= 8;
  }
  while (v39);
  if (v38) {
    goto LABEL_59;
  }
}

uint64_t re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = 8 * a4;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *(void *)(*a3 + 56);
      if (v7)
      {

        *(void *)(v6 + 56) = 0;
      }
      *(void *)(v6 + 64) = 0;
      uint64_t v8 = *(void *)(v6 + 80);
      if (v8)
      {

        *(void *)(v6 + 80) = 0;
      }
      *(void *)(v6 + 88) = 0;
      *(_DWORD *)(v6 + 104) = 65544;
      *(void *)(v6 + 108) = 0x3EC000003F800000;
      *(_DWORD *)(v6 + 116) = 1056964608;
      *(_WORD *)(v6 + 120) = 257;
      ++a3;
      *(unsigned char *)(v6 + 1re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (uint64_t i = 24; i != 56; i += 8)
  {
    uint64_t v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(void *)(a1 + i) = v7;
  }
  uint64_t v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    uint64_t v82 = re::globalAllocators((re *)result)[2];
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v82 + 32))(v82, 32, 0);
    *uint64_t v10 = &unk_26E6FF5F0;
    v10[1] = a1;
    _DWORD v10[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    uint64_t v10[3] = 0;
    uint64_t v83 = v10;
    uint64_t v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v13 = v12;
    uint64_t v14 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v14 = v11;
    v14[1] = v13;
    unint64_t v15 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v81);
    uint64_t v79 = re::globalAllocators(v15)[2];
    uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v79 + 32))(v79, 32, 0);
    *uint64_t v16 = &unk_26E6FF648;
    v16[1] = a1;
    void v16[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    v16[3] = 0;
    uint64_t v80 = v16;
    uint64_t v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v19 = v18;
    uint64_t v20 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v20 = v17;
    v20[1] = v19;
    unint64_t v21 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v78);
    uint64_t v76 = re::globalAllocators(v21)[2];
    unint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v76 + 32))(v76, 32, 0);
    *unint64_t v22 = &unk_26E6FF6A0;
    v22[1] = a1;
    v22[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    __n128 v22[3] = 0;
    uint64_t v77 = v22;
    uint64_t v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v25 = v24;
    uint64_t v26 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v26 = v23;
    v26[1] = v25;
    unint64_t v27 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v75);
    uint64_t v73 = re::globalAllocators(v27)[2];
    unint64_t v28 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v73 + 32))(v73, 32, 0);
    *unint64_t v28 = &unk_26E6FF6F8;
    v28[1] = a1;
    _DWORD v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    uint64_t v74 = v28;
    uint64_t v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    uint64_t v31 = v30;
    uint64_t v32 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *uint64_t v32 = v29;
    v32[1] = v31;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v72);
    unint64_t result = (uint64_t *)(***(uint64_t (****)(void))(a2 + 224))();
    if (v33)
    {
      int v34 = result;
      uint64_t v35 = 8 * v33;
      do
      {
        uint64_t v36 = *v34++;
        uint64_t v70 = re::globalAllocators((re *)result)[2];
        uint64_t v71 = 0;
        uint64_t v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v70 + 32))(v70, 32, 0);
        *uint64_t v37 = &unk_26E6FF5F0;
        v37[1] = a1;
        uint64_t v37[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        v37[3] = 0;
        uint64_t v71 = v37;
        uint64_t v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        uint64_t v40 = v39;
        uint64_t v41 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v41 = v38;
        v41[1] = v40;
        unint64_t v42 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::destroyCallable((uint64_t)v69);
        uint64_t v67 = re::globalAllocators(v42)[2];
        uint64_t v68 = 0;
        long long v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v67 + 32))(v67, 32, 0);
        void *v43 = &unk_26E6FF648;
        v43[1] = a1;
        void v43[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        v43[3] = 0;
        uint64_t v68 = v43;
        uint64_t v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        uint64_t v46 = v45;
        uint64_t v47 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v47 = v44;
        v47[1] = v46;
        uint64_t v48 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::destroyCallable((uint64_t)v66);
        uint64_t v64 = re::globalAllocators(v48)[2];
        uint64_t v65 = 0;
        long long v49 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v64 + 32))(v64, 32, 0);
        *long long v49 = &unk_26E6FF6A0;
        v49[1] = a1;
        uint64_t v49[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        v49[3] = 0;
        uint64_t v65 = v49;
        uint64_t v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        uint64_t v52 = v51;
        uint64_t v53 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *uint64_t v53 = v50;
        v53[1] = v52;
        uint64_t v54 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::destroyCallable((uint64_t)v63);
        uint64_t v61 = re::globalAllocators(v54)[2];
        uint64_t v62 = 0;
        uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v61 + 32))(v61, 32, 0);
        *uint64_t v55 = &unk_26E6FF6F8;
        v55[1] = a1;
        v55[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        uint64_t v62 = v55;
        uint64_t v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        uint64_t v58 = v57;
        uint64_t v59 = (void *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        void *v59 = v56;
        v59[1] = v58;
        unint64_t result = (uint64_t *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::destroyCallable((uint64_t)v60);
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)v4 + 7, &v24);
  if (v5 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(void *)(*((void *)v4 + 8) + 16 * v5 + 8));
  if (!*((unsigned char *)v4 + 232)) {
    goto LABEL_20;
  }
  unint64_t v6 = *((void *)v4 + 22);
  int v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if (v7) {
      uint64_t v8 = (void *)((char *)v4 + 192);
    }
    else {
      uint64_t v8 = (void *)*((void *)v4 + 25);
    }
    uint64_t v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v14 = (re::ecs2::System *)*((void *)v4 + 27);
    if (!*((unsigned char *)v14 + 86)) {
      re::ecs2::System::queueToRun(v14, 0.0);
    }
    goto LABEL_20;
  }
  if (v7)
  {
    uint64_t v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)*((void *)v4 + 25);
    if (!v6) {
      goto LABEL_20;
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * v6;
  do
  {
    uint64_t v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    uint64_t v16 = (re::ecs2::Component *)v15;
    for (uint64_t i = 24; i != 56; i += 8)
    {
      unint64_t v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    unint64_t v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(void *)(a1 + 24), v16);
    (*(void (**)(void, uint64_t, unint64_t, uint64_t))(**(void **)(*(void *)a1 + 224) + 16))(*(void *)(*(void *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v18 = a1[1];
  uint64_t v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(v6 + 56), &v18);
  if (v7 == -1) {
    goto LABEL_20;
  }
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(void *)(*(void *)(v6 + 64) + 16 * v7 + 8));
  if (!*(unsigned char *)(v6 + 232)) {
    goto LABEL_20;
  }
  unint64_t v8 = *(void *)(v6 + 176);
  int v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if (v9) {
      uint64_t v10 = (void *)(v6 + 192);
    }
    else {
      uint64_t v10 = *(void **)(v6 + 200);
    }
    uint64_t v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12) {
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((unsigned char *)v16 + 86)) {
      re::ecs2::System::queueToRun(v16, 0.0);
    }
    goto LABEL_20;
  }
  if (v9)
  {
    uint64_t v11 = (uint64_t *)(v6 + 192);
    if (!v8) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t **)(v6 + 200);
    if (!v8) {
      goto LABEL_20;
    }
  }
  uint64_t v13 = 0;
  uint64_t v14 = 8 * v8;
  do
  {
    uint64_t v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13) {
    goto LABEL_18;
  }
LABEL_20:
  (*(void (**)(void, void *, uint64_t, void))(**(void **)(*a1 + 224) + 8))(*(void *)(*a1 + 224), a1, a2, *(void *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(void *a1, void *a2)
{
  unint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    unint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF5F0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF5F0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF648;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF648;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF6A0;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF6A0;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v3 = a1[3];
  unint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v4 + v2);
  }
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF6F8;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = &unk_26E6FF6F8;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    unint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v4 = a1 + 24;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(v4 + 8 * (v2 >> 2));
  ++*(void *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 112 * (v2 & 3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::createSubscription<re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>>(re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent> *,REEventHandlerResult (re::ecs2::PrimitiveComponentStateImplBase<re::ecs2::PrimitiveTubeComponent>::*)(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Slice<re::ecs2::PrimitiveTubeComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::PrimitiveTubeComponent>,re::Slice<re::ecs2::PrimitiveTubeComponent*>>::Subscription const&,re::Slice<re::ecs2::PrimitiveTubeComponent*>&&)#1}::__invoke(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (uint64_t (*)(void *, uint64_t, void, void))a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = (void *)(*a2 + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(uint64_t (**)(void *, uint64_t, void, void))(*v6 + v4);
  }
  return v4(v6, a1, *a3, a3[1]);
}

void re::ecs2::BasicComponentStates<re::ecs2::PrimitiveTubeComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  unint64_t v7 = *(void *)(*(void *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((void *)(a1 + 56), &v18)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  unint64_t v8 = (void *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  if (re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::update(v8, a3, a4)) {
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
  }
  if (*(unsigned char *)(a1 + 232))
  {
    unint64_t v9 = *(void *)(a1 + 176);
    int v10 = *(_DWORD *)(a1 + 184);
    if (v9 >= 0xB)
    {
      if (v10) {
        uint64_t v11 = (void *)(a1 + 192);
      }
      else {
        uint64_t v11 = *(void **)(a1 + 200);
      }
      uint64_t v13 = 8 * v9;
      while (!*v11)
      {
        ++v11;
        v13 -= 8;
        if (!v13) {
          return;
        }
      }
LABEL_19:
      uint64_t v17 = *(re::ecs2::System **)(a1 + 216);
      if (!*((unsigned char *)v17 + 86)) {
        re::ecs2::System::queueToRun(v17, 0.0);
      }
      return;
    }
    if (v10)
    {
      uint64_t v12 = (uint64_t *)(a1 + 192);
      if (!v9) {
        return;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t **)(a1 + 200);
      if (!v9) {
        return;
      }
    }
    uint64_t v14 = 0;
    uint64_t v15 = 8 * v9;
    do
    {
      uint64_t v16 = *v12++;
      v14 |= v16;
      v15 -= 8;
    }
    while (v15);
    if (v14) {
      goto LABEL_19;
    }
  }
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PrimitiveTubeComponent>::update(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*a1 + 224);
  unint64_t v7 = a1[3];
  unint64_t v8 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v7);
  if (*(_DWORD *)(v8 + 40)) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a1, v7, v8, a3);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a1[5];
  unint64_t v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40)) {
    uint64_t v9 = v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a1, v10, v11, a3);
  }
  unint64_t v12 = a1[6];
  unint64_t v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1[2] + 8, v12);
  if (*(_DWORD *)(v13 + 40)) {
    return v9 | (*(unsigned int (**)(uint64_t, uint64_t, void *, unint64_t, unint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a1, v12, v13, a3);
  }
  return v9;
}

re::ecs2::Static3DTextSystem *re::make::shared::object<re::ecs2::Static3DTextSystem>(re *a1)
{
  unint64_t v2 = re::globalAllocators(a1);
  unint64_t v3 = (re::ecs2::Static3DTextSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  unint64_t result = re::ecs2::Static3DTextSystem::Static3DTextSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::Static3DTextSystem *re::ecs2::Static3DTextSystem::Static3DTextSystem(re::ecs2::Static3DTextSystem *this)
{
  v14[1] = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26E706E08;
  uint64_t v3 = v2 + 344;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 104) = 0;
  uint64_t v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  uint64_t v5 = (void *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  uint64_t v6 = (void *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  unint64_t v7 = (void *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(void *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((void *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = this;
  *((void *)this + 41) = v3;
  *((unsigned char *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  LOBYTE(v13) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v12);
  *((void *)this + 43) = &unk_26E706DA0;
  *((_OWORD *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  uint64_t v13 = 1;
  v14[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v12 = v14;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::Static3DTextSystem *)((char *)this + 360), (uint64_t)&v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::MeshSceneSystem *re::make::shared::object<re::ecs2::MeshSceneSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::MeshSceneSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 456, 8);
  unint64_t result = re::ecs2::MeshSceneSystem::MeshSceneSystem(v3);
  *(void *)a1 = result;
  return result;
}

void re::make::shared::object<re::ecs2::StateMachineSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  void *v4 = &unk_26E707B80;
  *(void *)a1 = v4;
}

re::ecs2::SkeletalPosePreparationSystem *re::make::shared::object<re::ecs2::SkeletalPosePreparationSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::SkeletalPosePreparationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 376, 8);
  unint64_t result = re::ecs2::SkeletalPosePreparationSystem::SkeletalPosePreparationSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::SkeletalPosePreparationSystem *re::ecs2::SkeletalPosePreparationSystem::SkeletalPosePreparationSystem(re::ecs2::SkeletalPosePreparationSystem *this)
{
  v14[1] = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26E7073D0;
  uint64_t v3 = v2 + 344;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 104) = 0;
  uint64_t v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  uint64_t v5 = (void *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  uint64_t v6 = (void *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  unint64_t v7 = (void *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(void *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((void *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = this;
  *((void *)this + 41) = v3;
  *((unsigned char *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  LOBYTE(v13) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v12);
  *((void *)this + 43) = &unk_26E707328;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  uint64_t v13 = 1;
  v14[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v12 = v14;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::SkeletalPosePreparationSystem *)((char *)this + 352), (uint64_t)&v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::AnimationUpdateSystem *re::make::shared::object<re::ecs2::AnimationUpdateSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AnimationUpdateSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  unint64_t result = re::ecs2::AnimationUpdateSystem::AnimationUpdateSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::AnimationUpdateSystem *re::ecs2::AnimationUpdateSystem::AnimationUpdateSystem(re::ecs2::AnimationUpdateSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 0);
  *uint64_t v2 = &unk_26E6FF978;
  v2[13] = 0;
  LOWORD(v4) = 257;
  HIDWORD(v4) = 1023969417;
  char v5 = 0;
  re::ecs2::System::setTaskOptions(v2, &v4);
  return this;
}

re::ecs2::AnimationSystem *re::make::shared::object<re::ecs2::AnimationSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AnimationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 736, 8);
  unint64_t result = re::ecs2::AnimationSystem::AnimationSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::AnimationSystem *re::ecs2::AnimationSystem::AnimationSystem(re::ecs2::AnimationSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26E709F68;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(void *)(v2 + 140) = 0x7FFFFFFFLL;
  uint64_t v3 = v2 + 216;
  *(void *)(v2 + 200) = 0;
  *(void *)(v2 + 208) = 0;
  *(void *)(v2 + 216) = &unk_26E709FD8;
  *(_OWORD *)(v2 + 240) = 0u;
  uint64_t v4 = v2 + 240;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_DWORD *)(v2 + 256) = 1;
  *(void *)(v2 + 272) = 0;
  *(void *)(v2 + 280) = 0;
  *(void *)(v2 + 264) = 0;
  *(_DWORD *)(v2 + 288) = 0;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  char v5 = (void *)(v2 + 360);
  *(_OWORD *)(v2 + 296) = 0u;
  uint64_t v6 = (void *)(v2 + 296);
  *(_DWORD *)(v2 + 376) = 1;
  unint64_t v7 = (void *)(v2 + 408);
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(void *)(v2 + 416) = 0;
  *(_DWORD *)(v2 + 424) = 1;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 457) = 0u;
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 94) += 2;
  *((void *)this + 50) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 106) += 2;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = this;
  *((void *)this + 58) = v3;
  *((unsigned char *)this + 472) = 1;
  LOWORD(v16) = 257;
  HIDWORD(v16) = 1023969417;
  char v17 = 0;
  unint64_t v11 = (_anonymous_namespace_ *)re::ecs2::System::setTaskOptions(this, &v16);
  *((void *)this + 60) = &unk_26E70A018;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *((_DWORD *)this + 128) = 1;
  *((void *)this + 65) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 66) = 0;
  *((_DWORD *)this + 136) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 158) = 1;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((void *)this + 84) = 0;
  *((_DWORD *)this + 170) = 1;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 713) = 0u;
  uint64_t v14 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 77, 0);
  *((_DWORD *)this + 158) += 2;
  *((void *)this + 82) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 83, 0);
  *((_DWORD *)this + 170) += 2;
  *((void *)this + 88) = 0;
  *((void *)this + 89) = this;
  *((void *)this + 90) = (char *)this + 480;
  *((unsigned char *)this + 728) = 1;
  LOWORD(v16) = 257;
  HIDWORD(v16) = 1023969417;
  char v17 = 0;
  re::ecs2::System::setTaskOptions(this, &v16);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  unint64_t result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AnimationComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        unint64_t result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        unint64_t result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::TextSystem *re::make::shared::object<re::ecs2::TextSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::TextSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 472, 8);
  unint64_t result = re::ecs2::TextSystem::TextSystem(v3);
  *(void *)a1 = result;
  return result;
}

void re::make::shared::object<re::ecs2::RemoteEffectsSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  re::ecs2::System::System(v3, 1, 1);
  void *v4 = &unk_26E7031F8;
  v4[13] = 0;
  *(void *)a1 = v4;
}

re::ecs2::PhysicsSystem *re::make::shared::object<re::ecs2::PhysicsSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::PhysicsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 216, 8);
  unint64_t result = re::ecs2::PhysicsSystem::PhysicsSystem(v3);
  *(void *)a1 = result;
  return result;
}

double re::make::shared::object<re::ecs2::PhysicsDebugSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 216, 8);
  re::ecs2::System::System(v3, 1, 1);
  *(void *)uint64_t v4 = &unk_26E708EF8;
  double result = 0.0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(void *)a1 = v4;
  return result;
}

re::ecs2::TransformSystem *re::make::shared::object<re::ecs2::TransformSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::TransformSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 152, 8);
  double result = re::ecs2::TransformSystem::TransformSystem(v3);
  *(void *)a1 = result;
  return result;
}

void re::make::shared::object<re::ecs2::RayCastSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  re::ecs2::System::System((uint64_t)v3, 1);
  void *v4 = &unk_26E703388;
  v4[13] = 0;
  *(void *)a1 = v4;
}

void re::make::shared::object<re::ecs2::MaterialOverrideSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 128, 8);
  _OWORD *v3 = 0u;
  v3[1] = 0u;
  void v3[2] = 0u;
  v3[3] = 0u;
  unsigned char v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  re::ecs2::System::System((uint64_t)v3, 1);
  void *v4 = &unk_26E70B230;
  v4[14] = 0;
  v4[15] = 0;
  v4[13] = 0;
  *(void *)a1 = v4;
}

re::ecs2::MaterialParameterBlockArraySystem *re::make::shared::object<re::ecs2::MaterialParameterBlockArraySystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::MaterialParameterBlockArraySystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 360, 8);
  double result = re::ecs2::MaterialParameterBlockArraySystem::MaterialParameterBlockArraySystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::MaterialParameterBlockArraySystem *re::ecs2::MaterialParameterBlockArraySystem::MaterialParameterBlockArraySystem(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1);
  *(void *)uint64_t v2 = &unk_26E705D10;
  uint64_t v3 = v2 + 104;
  *(void *)(v2 + 104) = &unk_26E705CA8;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 120) = 0;
  uint64_t v4 = v2 + 120;
  *(_DWORD *)(v2 + 136) = 1;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 168) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  uint64_t v5 = (void *)(v2 + 240);
  *(_OWORD *)(v2 + 176) = 0u;
  uint64_t v6 = (void *)(v2 + 176);
  *(_DWORD *)(v2 + 256) = 1;
  unint64_t v7 = (void *)(v2 + 288);
  *(void *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_DWORD *)(v2 + 304) = 1;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 337) = 0u;
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 64) += 2;
  *((void *)this + 35) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 76) += 2;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = this;
  *((void *)this + 43) = v3;
  *((unsigned char *)this + 352) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::make::shared::object<re::ecs2::MaterialParametersSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 104, 8);
  re::ecs2::System::System(v3, 1, 1);
  void *v4 = &unk_26E6FFA00;
  *(void *)a1 = v4;
}

re::ecs2::IKParametersSystem *re::make::shared::object<re::ecs2::IKParametersSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::IKParametersSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 368, 8);
  double result = re::ecs2::IKParametersSystem::IKParametersSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::RigSystem *re::make::shared::object<re::ecs2::RigSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::RigSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 384, 8);
  double result = re::ecs2::RigSystem::RigSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::SkeletalPoseSystem *re::make::shared::object<re::ecs2::SkeletalPoseSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::SkeletalPoseSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 432, 8);
  double result = re::ecs2::SkeletalPoseSystem::SkeletalPoseSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::SkeletalPoseSystem *re::ecs2::SkeletalPoseSystem::SkeletalPoseSystem(re::ecs2::SkeletalPoseSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 0, 1);
  *(void *)uint64_t v2 = &unk_26E707470;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 104) = 0u;
  uint64_t v3 = v2 + 104;
  *(void *)(v2 + 140) = 0x7FFFFFFFLL;
  unint64_t v4 = (void *)(v2 + 392);
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 152) = 0;
  uint64_t v5 = v2 + 152;
  *(_DWORD *)(v2 + 168) = 1;
  *(void *)(v2 + 184) = 0;
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 176) = 0;
  *(_DWORD *)(v2 + 200) = 0;
  uint64_t v6 = (void *)(v2 + 272);
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  unint64_t v7 = (void *)(v2 + 208);
  *(_DWORD *)(v2 + 288) = 1;
  unint64_t v8 = (void *)(v2 + 320);
  *(void *)(v2 + 328) = 0;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_DWORD *)(v2 + 336) = 1;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 369) = 0u;
  unint64_t v11 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v6, 0);
  *((_DWORD *)this + 72) += 2;
  *((void *)this + 39) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v8, 0);
  *((_DWORD *)this + 84) += 2;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = this;
  *((void *)this + 47) = v4;
  *((unsigned char *)this + 384) = 1;
  LOWORD(v14) = 257;
  HIDWORD(v14) = 1023969417;
  char v15 = 0;
  re::ecs2::System::setTaskOptions(this, &v14);
  uint64_t v12 = (_anonymous_namespace_ *)re::ecs2::SkeletalPoseComponentStateImpl::SkeletalPoseComponentStateImpl(v4, (uint64_t)this);
  return this;
}

re::ecs2::MeshDeformationSystem *re::make::shared::object<re::ecs2::MeshDeformationSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::MeshDeformationSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 408, 8);
  double result = re::ecs2::MeshDeformationSystem::MeshDeformationSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::MeshDeformationSystem *re::ecs2::MeshDeformationSystem::MeshDeformationSystem(re::ecs2::MeshDeformationSystem *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *uint64_t v2 = &unk_26E705728;
  uint64_t v3 = v2 + 16;
  v2[14] = 0;
  v2[15] = 0;
  v2[13] = 0;
  v2[16] = &unk_26E7056D0;
  v2[17] = v2;
  v2[19] = 0;
  v2[20] = 0;
  v2[18] = 0;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  unint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 18), (uint64_t)v9);
  *((void *)this + 21) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 76) = 1;
  *((void *)this + 43) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 88) = 1;
  *(_OWORD *)((char *)this + 385) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 36, 0);
  *((_DWORD *)this + 76) += 2;
  *((void *)this + 41) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = this;
  *((void *)this + 49) = v3;
  *((unsigned char *)this + 400) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

re::ecs2::BlendShapeWeightsSystem *re::make::shared::object<re::ecs2::BlendShapeWeightsSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::BlendShapeWeightsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2]
                                                                                                 + 32))(v2[2], 456, 8);
  double result = re::ecs2::BlendShapeWeightsSystem::BlendShapeWeightsSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::BlendShapeWeightsSystem *re::ecs2::BlendShapeWeightsSystem::BlendShapeWeightsSystem(re::ecs2::BlendShapeWeightsSystem *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E701B98;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_DWORD *)(v2 + 136) = 0;
  *(void *)(v2 + 140) = 0x7FFFFFFFLL;
  uint64_t v3 = v2 + 160;
  *(void *)(v2 + 152) = 0;
  *(void *)(v2 + 160) = &unk_26E701B30;
  *(void *)(v2 + 168) = v2;
  *(_OWORD *)(v2 + 176) = 0u;
  *(void *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  unint64_t v10 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  unint64_t v11 = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v9[0] = &v10;
  v9[1] = 2;
  unint64_t v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 192), (uint64_t)v9);
  *((void *)this + 28) = 0;
  *((void *)this + 27) = 0;
  *((_DWORD *)this + 58) = 1;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 30) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1;
  *((void *)this + 49) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 100) = 1;
  *(_OWORD *)((char *)this + 433) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((void *)this + 47) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 48, 0);
  *((_DWORD *)this + 100) += 2;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = this;
  *((void *)this + 55) = v3;
  *((unsigned char *)this + 448) = 1;
  LOWORD(v10) = 257;
  HIDWORD(v10) = 1023969417;
  LOBYTE(v11) = 0;
  re::ecs2::System::setTaskOptions(this, (uint64_t *)&v10);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::MeshOffsetsSystem *re::make::shared::object<re::ecs2::MeshOffsetsSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::MeshOffsetsSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 408, 8);
  double result = re::ecs2::MeshOffsetsSystem::MeshOffsetsSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::MeshOffsetsSystem *re::ecs2::MeshOffsetsSystem::MeshOffsetsSystem(re::ecs2::MeshOffsetsSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E7035A0;
  uint64_t v3 = (re::ecs2::MeshOffsetsComponentStateImpl *)(v2 + 344);
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 104) = 0;
  uint64_t v4 = v2 + 104;
  *(_DWORD *)(v2 + 120) = 1;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  uint64_t v5 = (void *)(v2 + 224);
  *(_OWORD *)(v2 + 160) = 0u;
  uint64_t v6 = (void *)(v2 + 160);
  *(_DWORD *)(v2 + 240) = 1;
  unint64_t v7 = (void *)(v2 + 272);
  *(_OWORD *)(v2 + 248) = 0u;
  *(void *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_DWORD *)(v2 + 288) = 1;
  *(_OWORD *)(v2 + 321) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  unint64_t v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 60) += 2;
  *((void *)this + 33) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 72) += 2;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = this;
  *((void *)this + 41) = v3;
  *((unsigned char *)this + 336) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  re::ecs2::MeshOffsetsComponentStateImpl::MeshOffsetsComponentStateImpl(v3);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::SkeletalDebugSystem *re::make::shared::object<re::ecs2::SkeletalDebugSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::SkeletalDebugSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 408, 8);
  double result = re::ecs2::SkeletalDebugSystem::SkeletalDebugSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::SkeletalDebugSystem *re::ecs2::SkeletalDebugSystem::SkeletalDebugSystem(re::ecs2::SkeletalDebugSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *uint64_t v2 = &unk_26E709718;
  uint64_t v3 = v2 + 16;
  v2[14] = 0;
  v2[15] = 0;
  v2[13] = 0;
  unint64_t v4 = re::ecs2::SkeletalDebugComponentStateImpl::SkeletalDebugComponentStateImpl((re::ecs2::SkeletalDebugComponentStateImpl *)(v2 + 16), this);
  *((void *)this + 21) = 0;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 76) = 1;
  *((void *)this + 43) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 88) = 1;
  *(_OWORD *)((char *)this + 385) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 36, 0);
  *((_DWORD *)this + 76) += 2;
  *((void *)this + 41) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = this;
  *((void *)this + 49) = v3;
  *((unsigned char *)this + 400) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  char v10 = 0;
  re::ecs2::System::setTaskOptions(this, &v9);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalDebugComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::MeshSmoothSystem *re::make::shared::object<re::ecs2::MeshSmoothSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::MeshSmoothSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 416, 8);
  double result = re::ecs2::MeshSmoothSystem::MeshSmoothSystem(v3);
  *(void *)a1 = result;
  return result;
}

void re::make::shared::object<re::ecs2::AnimationLibrarySystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  void *v4 = &unk_26E6E5F50;
  *(void *)a1 = v4;
}

void re::make::shared::object<re::ecs2::GroundPlaneSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 104, 8);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  re::ecs2::System::System(v3, 1);
  void *v4 = &unk_26E6E4A88;
  *(void *)a1 = v4;
}

double re::make::shared::object<re::ecs2::VideoComponentSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 216, 8);
  re::ecs2::System::System(v3, 1, 1);
  *(void *)uint64_t v4 = &unk_26E708FD8;
  *(unsigned char *)(v4 + 104) = 0;
  *(void *)(v4 + 200) = 0;
  *(_DWORD *)(v4 + 208) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(void *)a1 = v4;
  return result;
}

re::ecs2::AudioUpdateSystem *re::make::shared::object<re::ecs2::AudioUpdateSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AudioUpdateSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  double result = re::ecs2::AudioUpdateSystem::AudioUpdateSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::AudioUpdateSystem *re::ecs2::AudioUpdateSystem::AudioUpdateSystem(re::ecs2::AudioUpdateSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 0);
  *uint64_t v2 = &unk_26E7089C8;
  v2[13] = 0;
  LOWORD(v4) = 257;
  HIDWORD(v4) = 1023969417;
  char v5 = 0;
  re::ecs2::System::setTaskOptions(v2, &v4);
  return this;
}

re::ecs2::AudioSessionSystem *re::make::shared::object<re::ecs2::AudioSessionSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AudioSessionSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 424, 8);
  double result = re::ecs2::AudioSessionSystem::AudioSessionSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::AudioSessionSystem *re::ecs2::AudioSessionSystem::AudioSessionSystem(re::ecs2::AudioSessionSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *uint64_t v2 = &unk_26E707088;
  uint64_t v3 = MEMORY[0x263EF83A0];
  uint64_t v4 = (_anonymous_namespace_ *)MEMORY[0x263EF83A0];
  *((void *)this + 13) = v3;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = &unk_26E707048;
  *((void *)this + 21) = this;
  *((void *)this + re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((void *)this + 22) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = 0;
  *((_DWORD *)this + 50) = 1;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 58) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 80) = 1;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 45) = 0;
  *((_DWORD *)this + 92) = 1;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 401) = 0u;
  unint64_t v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 38, 0);
  *((_DWORD *)this + 80) += 2;
  *((void *)this + 43) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)this + 44, 0);
  *((_DWORD *)this + 92) += 2;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = this;
  *((void *)this + 51) = (char *)this + 160;
  *((unsigned char *)this + 416) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  char v10 = 0;
  re::ecs2::System::setTaskOptions(this, &v9);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::VideoAudioControlSystem *re::make::shared::object<re::ecs2::VideoAudioControlSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::VideoAudioControlSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2]
                                                                                                 + 32))(v2[2], 112, 8);
  double result = re::ecs2::VideoAudioControlSystem::VideoAudioControlSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::AudioPlayerSystem *re::make::shared::object<re::ecs2::AudioPlayerSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AudioPlayerSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 280, 8);
  double result = re::ecs2::AudioPlayerSystem::AudioPlayerSystem(v3);
  *(void *)a1 = result;
  return result;
}

void re::make::shared::object<re::ecs2::AudioAnimationSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 160, 8);
  re::ecs2::System::System(v3, 1);
  *(void *)uint64_t v4 = &unk_26E7008E0;
  *(void *)(v4 + 104) = 0;
  *(unsigned char *)(v4 + 112) = 0;
  *(unsigned char *)(v4 + 136) = 0;
  *(void *)a1 = v4;
}

void re::make::shared::object<re::ecs2::AudioMixerSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 112, 8);
  re::ecs2::System::System(v3, 1, 1);
  void *v4 = &unk_26E6FD198;
  v4[13] = 0;
  *(void *)a1 = v4;
}

re::ecs2::ReverbSystem *re::make::shared::object<re::ecs2::ReverbSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::ReverbSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 376, 8);
  double result = re::ecs2::ReverbSystem::ReverbSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::ReverbSystem *re::ecs2::ReverbSystem::ReverbSystem(re::ecs2::ReverbSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E6FFC40;
  uint64_t v3 = v2 + 112;
  *(void *)(v2 + 104) = 0;
  *(void *)(v2 + 112) = &unk_26E6FFBD8;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = v2;
  *(void *)(v2 + 136) = 0;
  uint64_t v4 = v2 + 136;
  *(void *)(v2 + 144) = 0;
  *(_DWORD *)(v2 + 152) = 1;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 176) = 0;
  *(void *)(v2 + 160) = 0;
  *(_DWORD *)(v2 + 184) = 0;
  uint64_t v5 = (void *)(v2 + 256);
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  uint64_t v6 = (void *)(v2 + 192);
  *(_DWORD *)(v2 + 272) = 1;
  unint64_t v7 = (void *)(v2 + 304);
  *(void *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_DWORD *)(v2 + 320) = 1;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 353) = 0u;
  char v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 68) += 2;
  *((void *)this + 37) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 80) += 2;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = this;
  *((void *)this + 45) = v3;
  *((unsigned char *)this + 368) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ReverbComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

re::ecs2::AcousticMeshSystem *re::make::shared::object<re::ecs2::AcousticMeshSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AcousticMeshSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 424, 8);
  double result = re::ecs2::AcousticMeshSystem::AcousticMeshSystem(v3);
  *(void *)a1 = result;
  return result;
}

re::ecs2::AcousticMeshSystem *re::ecs2::AcousticMeshSystem::AcousticMeshSystem(re::ecs2::AcousticMeshSystem *this)
{
  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(void *)uint64_t v2 = &unk_26E709280;
  uint64_t v3 = v2 + 104;
  *(void *)(v2 + 104) = &unk_26E709240;
  *(void *)(v2 + 112) = v2;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 128) = 0;
  uint64_t v4 = v2 + 128;
  *(_DWORD *)(v2 + 144) = 1;
  *(void *)(v2 + 160) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 152) = 0;
  *(_DWORD *)(v2 + 176) = 0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  uint64_t v5 = (void *)(v2 + 248);
  *(_OWORD *)(v2 + 184) = 0u;
  uint64_t v6 = (void *)(v2 + 184);
  *(_DWORD *)(v2 + 264) = 1;
  unint64_t v7 = (void *)(v2 + 296);
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(void *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 312) = 1;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 345) = 0u;
  char v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 66) += 2;
  *((void *)this + 36) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 78) += 2;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = this;
  *((void *)this + 44) = v3;
  *((unsigned char *)this + 360) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  char v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 104) = 1065353216;
  return this;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((void *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(void *)(a1 + 40) = 0;
  double result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AcousticMeshComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        unint64_t v4 = v3[1];
        if (v4 <= a2) {
          break;
        }
        double result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)*v3 + 32))(*v3, 448, 0);
        double result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        unint64_t v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

double re::make::shared::object<re::ecs2::SpatialSceneClassificationSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 160, 8);
  re::ecs2::System::System(v3, 1, 1);
  *(void *)uint64_t v4 = &unk_26E6E5CC0;
  *(void *)(v4 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 132) = 0u;
  *(void *)a1 = v4;
  return result;
}

void re::make::shared::object<re::ecs2::VoiceSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 104, 8);
  re::ecs2::System::System(v3, 1, 1);
  void *v4 = &unk_26E6FB648;
  *(void *)a1 = v4;
}

double re::make::shared::object<re::ecs2::ListenerSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 152, 8);
  re::ecs2::System::System(v3, 1, 1);
  *(void *)uint64_t v4 = &unk_26E701A20;
  double result = 0.0;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(void *)(v4 + 136) = 0;
  *(_DWORD *)(v4 + 144) = 1065353216;
  *(void *)a1 = v4;
  return result;
}

re::ecs2::AudioDebugSystem *re::make::shared::object<re::ecs2::AudioDebugSystem>(re *a1)
{
  uint64_t v2 = re::globalAllocators(a1);
  uint64_t v3 = (re::ecs2::AudioDebugSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2[2] + 32))(v2[2], 320, 8);
  double result = re::ecs2::AudioDebugSystem::AudioDebugSystem(v3);
  *(void *)a1 = result;
  return result;
}

void re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = v2;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)v3 + 48))(v3, &v4, 0xFFFFFFFFLL, 0);
  if (v4) {
}
  }

void *re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FF750;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FF750;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addDefaultSystems(re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v2;
  re::ecs2::Scene::deprecatedAddSystem(v3, &v4);
  if (v2)
  {
  }
}

void *re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::cloneInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FF7B8;
  a2[1] = v2;
  return a2;
}

void *re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::moveInto(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26E6FF7B8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::deprecatedAddDefaultSystems(re::ecs2::Scene *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::~Callable()
{
}

void re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(*(void **)(a1 + 16), &v5);
  uint64_t v3 = v5;
  *(unsigned char *)(v5 + 85) = 1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = 0;
  uint64_t v6 = v3;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)v4 + 48))(v4, &v6, 0xFFFFFFFFLL, 0);
  if (v6) {

  }
  if (v5) {
}
  }

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF810;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E6FF810;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ComponentHelper::addRealityRendererDefaultSystems(re::DynamicArray<re::SharedPtr<re::ecs2::System>> &,re::ecs2::ECSService *)::$_0,void ()(re::SharedPtr<re::ecs2::System>)>::size()
{
  return 24;
}

uint64_t std::__function::__value_func<void ()(re::AssetHandle *)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::~__func()
{
}

void *std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26E6FF868;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26E6FF868;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::operator()(uint64_t a1, const re::AssetHandle **a2)
{
}

uint64_t std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0,std::allocator<re::ecs2::ComponentHelper::addToLoadRequest(re::AssetLoadRequest &,re::ecs2::Entity &,BOOL)::$_0>,void ()(re::AssetHandle *)>::target_type()
{
}

uint64_t re::ecs2::BlurGenerationSystem::updateScenes(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 104);
  if (!v3 || (*(unsigned char *)(v3 + 424) & 0x10) != 0)
  {
    uint64_t v4 = *(void *)(*(void *)(result + 112) + 104);
    if (v4 && re::RenderFrameBox::get(v4 + 344, 0xFFFFFFFFFFFFFFFuLL))
    {
      uint64_t v5 = *(void *)(v2 + 112);
      uint64_t v6 = *(void *)(v5 + 104);
      if (v6)
      {
        uint64_t v7 = re::RenderFrameBox::get(v6 + 344, 0xFFFFFFFFFFFFFFFuLL);
        uint64_t v5 = *(void *)(v2 + 112);
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v12 = 0;
      v9[1] = 0;
      uint64_t v10 = 0;
      v9[0] = 0;
      int v11 = 0;
      re::TextureManager::dequeueBlurGeneration(*(os_unfair_lock_s **)(v5 + 64), (uint64_t)v8);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v9, (uint64_t)v8);
      re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)v8);
      if (v10) {
        (*(void (**)(void, void *))(**(void **)(v7 + 320) + 176))(*(void *)(v7 + 320), v9);
      }
      return re::DynamicArray<re::VirtualEnvironmentProbeSource>::deinit((uint64_t)v9);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager->renderFrame()", "updateScenes", 19);
      double result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void *re::ecs2::allocInfo_BlurGenerationSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_227, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_227))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88180, "BlurGenerationSystem");
    __cxa_guard_release(&_MergedGlobals_227);
  }
  return &unk_26AF88180;
}

void re::ecs2::initInfo_BlurGenerationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0xCD17DA683639A01CLL;
  v5[1] = "BlurGenerationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_BlurGenerationSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlurGenerationSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlurGenerationSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlurGenerationSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlurGenerationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::BlurGenerationSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(void *)(v3 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(void *)uint64_t v3 = &unk_26E6FF8E8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::BlurGenerationSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::BlurGenerationSystem>(_OWORD *a1)
{
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(void *)(v1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(void *)uint64_t v1 = &unk_26E6FF8E8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::BlurGenerationSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BlurGenerationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlurGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlurGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlurGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlurGenerationSystem>, this);
}

void re::ecs2::BlurGenerationSystem::~BlurGenerationSystem(re::ecs2::BlurGenerationSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::BlurGenerationSystem::typeInfo(re::ecs2::BlurGenerationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlurGenerationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlurGenerationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlurGenerationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlurGenerationSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::BlurGenerationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_HierarchicalTintComponent(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AF88200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AF88200))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88218, "HierarchicalTintComponent");
    __cxa_guard_release(&qword_26AF88200);
  }
  return &unk_26AF88218;
}

void re::ecs2::initInfo_HierarchicalTintComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v13[0] = 0x8CA32477D16ED632;
  v13[1] = "HierarchicalTintComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_228, memory_order_acquire) & 1) == 0)
  {
    long long v4 = (re *)__cxa_guard_acquire(&_MergedGlobals_228);
    if (v4)
    {
      uint64_t v5 = re::introspectionAllocator(v4);
      uint64_t v6 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 72, 8);
      *(_DWORD *)uint64_t v7 = 1;
      *(void *)(v7 + 8) = "Component";
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      *(_DWORD *)(v7 + 40) = 3;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_26AF88208 = v7;
      unint64_t v8 = re::introspectionAllocator((re *)v7);
      uint64_t v10 = re::introspect_float((re *)1, v9);
      uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, 72, 8);
      *(_DWORD *)uint64_t v11 = 1;
      *(void *)(v11 + 8) = "tintAmount";
      *(void *)(v11 + 16) = v10;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(void *)(v11 + 48) = 0;
      *(void *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_26AF88210 = v11;
      __cxa_guard_release(&_MergedGlobals_228);
    }
  }
  *((void *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((void *)this + 8) = &qword_26AF88208;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::HierarchicalTintComponent>;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::HierarchicalTintComponent>;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HierarchicalTintComponent>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HierarchicalTintComponent>;
  re::IntrospectionRegistry::add(this, v3);
  long long v12 = v14;
}

void re::internal::defaultConstruct<re::ecs2::HierarchicalTintComponent>(int a1, int a2, ArcSharedObject *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(void *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 24) = 0;
  *(void *)uint64_t v3 = &unk_26E6ED1B8;
  *(_DWORD *)(v3 + 28) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::HierarchicalTintComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(void))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::HierarchicalTintComponent>(ArcSharedObject *a1)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 0;
  *(void *)uint64_t v1 = &unk_26E6ED1B8;
  *(_DWORD *)(v1 + 28) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::HierarchicalTintComponent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_HierarchicalTintComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalTintComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HierarchicalTintComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HierarchicalTintComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HierarchicalTintComponent>, this);
}

uint64_t re::ecs2::AnimationUpdateSystem::willAddSystemToECSService(re::ecs2::AnimationUpdateSystem *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t v3 = re::ServiceLocator::serviceOrNull<re::ecs2::AnimationSceneService>(v2);
  *((void *)this + 13) = v3;
  long long v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);
  return v4();
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::AnimationSceneService>(uint64_t a1)
{
  {
    re::introspect<re::ecs2::AnimationSceneService>(void)::info = re::ecs2::introspect_AnimationSceneService(0);
  }
  uint64_t v2 = re::introspect<re::ecs2::AnimationSceneService>(void)::info;
  re::StringID::invalid((re::StringID *)v5);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, v2, v5);
  re::StringID::destroyString((re::StringID *)v5);
  return v3;
}

uint64_t re::ecs2::AnimationUpdateSystem::willRemoveSystemFromECSService(re::ecs2::AnimationUpdateSystem *this)
{
  uint64_t result = (*(uint64_t (**)(void, re::ecs2::AnimationUpdateSystem *))(**((void **)this + 13) + 56))(*((void *)this + 13), this);
  *((void *)this + 13) = 0;
  return result;
}

uint64_t re::ecs2::AnimationUpdateSystem::willAddSceneToECSService(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t re::ecs2::AnimationUpdateSystem::willRemoveSceneFromECSService(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  return result;
}

void *re::ecs2::AnimationUpdateSystem::update(void *result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000) == 0)
  {
    uint64_t result = (void *)result[13];
    if (result) {
      return (void *)(*(uint64_t (**)(float))(*result + 24))(*(float *)&a3);
    }
  }
  return result;
}

void *re::ecs2::allocInfo_AnimationUpdateSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_229, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_229))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88298, "AnimationUpdateSystem");
    __cxa_guard_release(&_MergedGlobals_229);
  }
  return &unk_26AF88298;
}

void re::ecs2::initInfo_AnimationUpdateSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x793BDA254CA56BB8;
  v5[1] = "AnimationUpdateSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_AnimationUpdateSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnimationUpdateSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnimationUpdateSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnimationUpdateSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnimationUpdateSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

re::ecs2::AnimationUpdateSystem *re::internal::defaultConstruct<re::ecs2::AnimationUpdateSystem>(int a1, int a2, re::ecs2::AnimationUpdateSystem *this)
{
  return re::ecs2::AnimationUpdateSystem::AnimationUpdateSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AnimationUpdateSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnimationUpdateSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnimationUpdateSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationUpdateSystem>, this);
}

void re::ecs2::AnimationUpdateSystem::~AnimationUpdateSystem(re::ecs2::AnimationUpdateSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::AnimationUpdateSystem::typeInfo(re::ecs2::AnimationUpdateSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnimationUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnimationUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnimationUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnimationUpdateSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AnimationUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

void *re::ecs2::allocInfo_MaterialParametersSystem(re::ecs2 *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_230, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_230))
  {
    re::IntrospectionStructure::IntrospectionStructure((re::IntrospectionStructure *)&unk_26AF88318, "MaterialParametersSystem");
    __cxa_guard_release(&_MergedGlobals_230);
  }
  return &unk_26AF88318;
}

void re::ecs2::initInfo_MaterialParametersSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  v5[0] = 0x54BED6764F265040;
  v5[1] = "MaterialParametersSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((void *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 8) = &re::ecs2::initInfo_MaterialParametersSystem(re::IntrospectionBase *)::structureAttributes;
  *((void *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialParametersSystem>;
  *((void *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialParametersSystem>;
  *((void *)this + 11) = re::internal::defaultRetain<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 12) = re::internal::defaultRelease<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((void *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialParametersSystem>;
  *((void *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialParametersSystem>;
  re::IntrospectionRegistry::add(this, v3);
  long long v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::MaterialParametersSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::System::System(a3, 1, 1);
  void *v3 = &unk_26E6FFA00;
}

void *re::internal::defaultDestruct<re::ecs2::MaterialParametersSystem>(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = &unk_26E6DECE0;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialParametersSystem>(uint64_t a1)
{
  re::ecs2::System::System(a1, 1, 1);
  void *v1 = &unk_26E6FFA00;
}

void *re::internal::defaultDestructV2<re::ecs2::MaterialParametersSystem>(void *a1)
{
  *a1 = &unk_26E6DECE0;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MaterialParametersSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParametersSystem>, this);
}

uint64_t re::ecs2::MaterialParametersSystem::willAddSceneToECSService(re::ecs2::MaterialParametersSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v2);
  if (result)
  {
    long long v4 = *(uint64_t (**)(void))(*(void *)result + 64);
    return v4();
  }
  return result;
}

uint64_t re::ecs2::MaterialParametersSystem::willRemoveSceneFromECSService(re::ecs2::MaterialParametersSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  uint64_t result = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v2);
  if (result)
  {
    long long v4 = *(uint64_t (**)(void))(*(void *)result + 72);
    return v4();
  }
  return result;
}

void re::ecs2::MaterialParametersSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40));
  uint64_t v4 = re::ServiceLocator::serviceOrNull<re::MaterialParametersService>(v3);
  uint64_t v5 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t v7 = v5;
    unint64_t v8 = (re::ecs2::SceneComponentTable *)(a2 + 200);
    uint64_t v9 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        uint64_t v11 = *(uint64_t **)(v9 + 40);
        uint64_t v12 = 8 * v10;
        do
        {
          uint64_t v13 = *v11;
          long long v14 = (const re::AssetHandle *)(*v11 + 80);
          uint64_t v15 = *(void *)(*v11 + 88);
          if (v15 && (unsigned int v16 = atomic_load((unsigned int *)(v15 + 704)), v16 == 2))
          {
            uint64_t v17 = *(void *)(*(void *)(v13 + 16) + 296);
            uint64_t v18 = *(unsigned __int8 *)(v13 + 76);
            uint64_t v19 = *(unsigned __int8 *)(v13 + 77);
            uint64_t v20 = v13 + 28;
            float v21 = *(float *)(v13 + 72);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(v13 + 48));
            re::AssetHandle::AssetHandle((re::AssetHandle *)v32, v14);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, unsigned char *, float))(*(void *)v4 + 48))(v4, v7, v17, v18, v19, v20, v33, v32, v21);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v32);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
          }
          else
          {
            re::AssetHandle::loadAsync((re::AssetHandle *)(*v11 + 80));
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
    uint64_t v22 = re::ecs2::SceneComponentTable::get(v8, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 24);
      if (v23)
      {
        uint64_t v24 = *(uint64_t **)(v22 + 40);
        uint64_t v25 = 8 * v23;
        do
        {
          uint64_t v26 = *v24;
          uint64_t v27 = *(void *)(*v24 + 536);
          if (v27 && (unsigned int v28 = atomic_load((unsigned int *)(v27 + 704)), v28 == 2))
          {
            uint64_t v29 = *(void *)(*(void *)(v26 + 16) + 296);
            uint64_t v30 = v26 + 32;
            re::AssetHandle::AssetHandle((re::AssetHandle *)v31, (const re::AssetHandle *)(*v24 + 528));
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v4 + 40))(v4, v7, v29, v30, v31);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v31);
          }
          else
          {
            re::AssetHandle::loadAsync((re::AssetHandle *)(*v24 + 528));
          }
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
    }
  }
}

void re::ecs2::MaterialParametersSystem::~MaterialParametersSystem(re::ecs2::MaterialParametersSystem *this)
{
  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26E6DECE0;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x237DBCBD0);
}

uint64_t re::ecs2::MaterialParametersSystem::typeInfo(re::ecs2::MaterialParametersSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParametersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParametersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParametersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParametersSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MaterialParametersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
}

uint64_t re::ecs2::CameraViewDescriptorsHelper::setCameraViewsRenderGraphFileProviders(re::ecs2::CameraViewDescriptorsHelper *this, re::ecs2::Entity *a2)
{
  uint64_t v2 = this;
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v3 = (re::ecs2::CameraViewDescriptorsHelper *)((char *)this + 32);
  uint64_t v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::CameraViewDescriptorsHelper *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  uint64_t v5 = re::ecs2::EntityComponentCollection::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v57 = 0;
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v53 = 0;
    int v56 = 0;
    if (*(void *)(v5 + 40))
    {
      unint64_t v7 = *(void *)(v5 + 56);
      uint64_t v53 = *(void *)(v5 + 40);
      re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(&v53, v7);
      ++v56;
      unint64_t v8 = *(void *)(v6 + 56);
      if (v8 >= v55)
      {
        re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::setCapacity(&v53, *(void *)(v6 + 56));
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *>(*(void *)(v6 + 72), *(void *)(v6 + 72) + 80 * v55, v57);
        if (v55 != v8)
        {
          uint64_t v11 = *(void *)(v6 + 72);
          uint64_t v12 = v57;
          uint64_t v13 = 80 * v55;
          uint64_t v14 = 80 * v8;
          do
          {
            uint64_t v15 = v12 + v13;
            re::AssetHandle::AssetHandle((re::AssetHandle *)(v12 + v13), (const re::AssetHandle *)(v11 + v13));
            re::DynamicString::DynamicString((re::DynamicString *)(v12 + v13 + 24), (const re::DynamicString *)(v11 + v13 + 24));
            long long v16 = *(_OWORD *)(v11 + v13 + 56);
            *(unsigned char *)(v15 + 72) = *(unsigned char *)(v11 + v13 + 72);
            *(_OWORD *)(v15 + 56) = v16;
            v14 -= 80;
            v11 += 80;
            v12 += 80;
          }
          while (v13 != v14);
        }
      }
      else
      {
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *,re::ecs2::RenderGraphFileProviderEntry *>(*(void *)(v6 + 72), *(void *)(v6 + 72) + 80 * v8, v57);
        if (v8 != v55)
        {
          uint64_t v9 = v57 + 80 * v8;
          uint64_t v10 = 80 * v55 - 80 * v8;
          do
          {
            re::DynamicString::deinit((re::DynamicString *)(v9 + 24));
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
            v9 += 80;
            v10 -= 80;
          }
          while (v10);
        }
      }
      unint64_t v55 = v8;
    }
  }
  else
  {
    uint64_t v57 = 0;
    uint64_t v54 = 0;
    unint64_t v55 = 0;
    uint64_t v53 = 0;
    int v56 = 0;
  }
  if (*(void *)(v4 + 216))
  {
    int v49 = 0;
    int v17 = 0;
    uint64_t v50 = v4;
    uint64_t v52 = 0;
    goto LABEL_44;
  }
  do
  {
    uint64_t v18 = v2;
    uint64_t v2 = (re::ecs2::CameraViewDescriptorsHelper *)*((void *)v2 + 3);
  }
  while (v2);
  uint64_t v19 = *(void *)(*((void *)v18 + 2) + 376);
  if (v19) {
    BOOL v20 = *(void *)(v19 + 24) == 1;
  }
  else {
    BOOL v20 = 1;
  }
  uint64_t v21 = *(void *)(v4 + 256);
  if (v21) {
    BOOL v22 = 0;
  }
  else {
    BOOL v22 = v20;
  }
  if (v22)
  {
    uint64_t v23 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = xmmword_23435FBB0;
    *(void *)&long long v62 = 0x70000FF00000000;
    WORD4(v62) = 1;
    BYTE12(v62) = 0;
    uint64_t v67 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    *((void *)&v63 + 1) = 0;
    int v66 = 0;
    do
    {
      uint64_t v24 = (char *)&v59 + v23;
      *((void *)v24 + 18) = 0;
      *((void *)v24 + 15) = 0;
      *((void *)v24 + 16) = 0;
      *((void *)v24 + 14) = 0;
      v23 += 40;
      *((_DWORD *)v24 + 34) = 0;
    }
    while (v23 != 80);
    char v68 = 0;
    *(_OWORD *)uint64_t v70 = xmmword_2343854A0;
    long long v69 = xmmword_2343854A0;
    memset(&v70[5], 0, 48);
    __int16 v71 = 1;
    char v72 = 0;
    uint64_t v75 = 0;
    memset(v73, 0, sizeof(v73));
    int v74 = 0;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v4 + 240), (re::ecs2::CameraViewDescriptor *)&v59);
    re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v73);
    for (uint64_t i = 272; i != 256; i -= 8)
    {
      uint64_t v26 = *(void **)((char *)&v59 + i);
      if (v26)
      {

        *(void *)((char *)&v59 + i) = 0;
      }
    }
    do
    {
      uint64_t v27 = *(void **)((char *)&v59 + i);
      if (v27)
      {

        *(void *)((char *)&v59 + i) = 0;
      }
      i -= 8;
    }
    while (i != 240);
    do
    {
      unsigned int v28 = *(void **)((char *)&v59 + i);
      if (v28)
      {

        *(void *)((char *)&v59 + i) = 0;
      }
      i -= 8;
    }
    while (i != 224);
    for (uint64_t j = 152; j != 72; j -= 40)
      re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v59 + j);
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v63 + 8);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v59);
    uint64_t v30 = *(void *)(v4 + 216);
    uint64_t v50 = v4;
    uint64_t v52 = 0;
    if (v30)
    {
      int v17 = 0;
      int v49 = 1;
      goto LABEL_44;
    }
    if (!*(void *)(v4 + 256)) {
      goto LABEL_42;
    }
LABEL_40:
    int v49 = v22;
    int v17 = 1;
    goto LABEL_44;
  }
  uint64_t v50 = v4;
  uint64_t v52 = 0;
  if (v21) {
    goto LABEL_40;
  }
LABEL_42:
  if (!*(void *)(v4 + 296))
  {
    uint64_t v34 = 1;
    if (!v22) {
      goto LABEL_68;
    }
    uint64_t v47 = 0;
    goto LABEL_67;
  }
  int v49 = v22;
  int v17 = 2;
LABEL_44:
  uint64_t v31 = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  int v51 = v17;
  LODWORD(v34) = 1;
  do
  {
    uint64_t v35 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v31 + 0x20000);
    if (v17 == 1) {
      uint64_t v31 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v31 + 0x10000);
    }
    if (v17 == 2) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = v31;
    }
    uint64_t ViewDescriptor = (re::RenderGraphAsset *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v4, v36);
    uint64_t v38 = ViewDescriptor;
    if (*((unsigned char *)ViewDescriptor + 192))
    {
      uint64_t v39 = v32;
      unint64_t v40 = *(void *)(v4 + 96);
      if (v40 <= v32)
      {
        uint64_t v58 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        memset(v84, 0, sizeof(v84));
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        *(_DWORD *)uint64_t v77 = 136315906;
        *(void *)&v77[4] = "operator[]";
        __int16 v78 = 1024;
        int v79 = 789;
        __int16 v80 = 2048;
        uint64_t v81 = v32;
        __int16 v82 = 2048;
        unint64_t v83 = v40;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_72:
        *(void *)uint64_t v77 = 0;
        long long v63 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        v84[0] = 136315906;
        *(void *)&v84[1] = "operator[]";
        LOWORD(v84[3]) = 1024;
        *(_DWORD *)((char *)&v84[3] + 2) = 789;
        HIWORD(v84[4]) = 2048;
        *(void *)&v84[5] = v39;
        LOWORD(v84[7]) = 2048;
        *(void *)((char *)&v84[7] + 2) = v40;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      ++v32;
      uint64_t v41 = re::CameraMultiView::CameraMultiView((re::CameraMultiView *)&v59, (const re::CameraMultiView *)(*(void *)(v4 + 112) + 1360 * v39));
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)&v76, (uint64_t *)&v70[3]);
      uint64_t v43 = 1344;
      do
      {
        re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v59 + v43 - 400);
        re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v59 + v43 - 448);
        re::DynamicString::deinit((re::DynamicString *)((char *)&v59 + v43 - 672));
        v43 -= 672;
      }
      while (v43);
    }
    else
    {
      uint64_t v39 = v33;
      unint64_t v40 = *(void *)(v4 + 56);
      if (v40 <= v33) {
        goto LABEL_72;
      }
      ++v33;
      uint64_t v44 = *(void *)(v4 + 72) + 672 * v39;
    }
    uint64_t v34 = v34 & v42;
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++(&v50);
    int v17 = v51;
    uint64_t v31 = v52;
  }
  while (v50 != v4 || v51 != 3 || v52 != 0);
  if (v49)
  {
    uint64_t v47 = *(void *)(v4 + 256);
LABEL_67:
    *(void *)(v4 + 256) = 0;
    re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v4 + 272), (re::AssetHandle *)(*(void *)(v4 + 272) + 336 * v47));
    ++*(_DWORD *)(v4 + 264);
  }
LABEL_68:
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)&v53);
  return v34;
}

uint64_t anonymous namespace'::setRenderGraphFileProviders(uint64_t a1, re::RenderGraphAsset *a2, uint64_t a3, re::Allocator *a4)
{
  unint64_t v7 = (_anonymous_namespace_ *)(a1 + 224);
  re::DynamicArray<re::RenderGraphFileProvider>::clear(a1 + 224);
  re::DynamicArray<re::RenderGraphFileProvider>::setCapacity(v7, *(void *)(a3 + 16) + 1);
  if (*((void *)a2 + 1))
  {
    uint64_t v8 = re::AssetHandle::asset<re::RenderGraphAsset>(a2);
    if (v8)
    {
      uint64_t v9 = v8 + 8;
      re::DynamicString::DynamicString((re::DynamicString *)&v24, "Camera", a4);
      uint64_t v23 = v9;
      int v26 = 0;
      re::DynamicArray<re::RenderGraphFileProvider>::add(v7, (uint64_t)&v23);
      if (v24)
      {
        if (v25) {
          (*(void (**)(void))(*(void *)v24 + 40))();
        }
      }
    }
  }
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(a3 + 32);
    uint64_t v13 = 80 * v10;
    char v14 = 1;
    do
    {
      uint64_t v15 = (re::RenderGraphAsset *)(v12 + v11);
      if (!*(unsigned char *)(v12 + v11 + 72))
      {
        uint64_t v16 = *((void *)v15 + 1);
        if (v16 && (unsigned int v17 = atomic_load((unsigned int *)(v16 + 704)), v17 == 2))
        {
          ++*(_DWORD *)(*((void *)v15 + 1) + 260);
          uint64_t v18 = re::AssetHandle::loadedAsset<re::RenderGraphAsset>(v15);
          uint64_t v19 = v12 + v11;
          if (*(unsigned char *)(v12 + v11 + 32)) {
            BOOL v20 = *(const char **)(v19 + 40);
          }
          else {
            BOOL v20 = (const char *)(v19 + 33);
          }
          uint64_t v21 = v18 + 8;
          uint64_t v23 = 0;
          re::DynamicString::DynamicString((re::DynamicString *)&v24, v20, a4);
          uint64_t v23 = v21;
          int v26 = *(_DWORD *)(v12 + v11 + 56);
          re::DynamicArray<re::RenderGraphFileProvider>::add(v7, (uint64_t)&v23);
          if (v24 && (v25 & 1) != 0) {
            (*(void (**)(void))(*(void *)v24 + 40))();
          }
        }
        else
        {
          re::AssetHandle::loadAsync(v15);
          char v14 = 0;
        }
      }
      v11 += 80;
    }
    while (v13 != v11);
  }
  else
  {
    char v14 = 1;
  }
  return v14 & 1;
}

uint64_t re::ecs2::CameraViewDescriptorsHelper::buildCameraViews<re::ecs2::PerspectiveCameraComponent>(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  if (!a5) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (*(void *)(a2 + 216))
  {
    unint64_t v10 = 0;
    char v11 = 1;
    uint64_t v12 = 336;
    uint64_t v9 = 24;
    do
    {
      uint64_t v13 = *(void *)(v8 + 232);
      char v14 = (re::AssetHandle *)(v13 + 336 * v10);
      uint64_t v15 = *((void *)v14 + 1);
      if (v15)
      {
        unsigned int v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 != 2)
        {
          re::AssetHandle::loadAsync(v14);
          char v11 = 0;
        }
      }
      uint64_t v17 = v13 + 336 * v10;
      if (*(void *)(v17 + 304))
      {
        uint64_t v18 = 0;
        uint64_t v19 = (uint64_t *)(v17 + 304);
        uint64_t v7 = v13 + 336 * v10 + 320;
        while (2)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v19;
            if (*v19 <= (unint64_t)v18)
            {
              v81[0] = 0;
              long long v93 = 0u;
              long long v94 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v90 = 0u;
              uint64_t v8 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)long long v110 = 136315906;
              *(void *)&v110[4] = "operator[]";
              *(_WORD *)&v110[12] = 1024;
              *(_DWORD *)&v110[14] = 797;
              *(_WORD *)&v110[18] = 2048;
              *(void *)&v110[20] = v18;
              __int16 v111 = 2048;
              *(void *)long long v112 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_26;
            }
            uint64_t v12 = v21;
            uint64_t v23 = *(void *)v7 + 136 * (void)v18 + 24 * v20;
            uint64_t v24 = *(void *)(v23 + 40);
            if (v24)
            {
              unsigned int v25 = atomic_load((unsigned int *)(v24 + 704));
              if (v25 != 2)
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(v23 + 32));
                char v11 = 0;
              }
            }
            uint64_t v21 = 0;
            uint64_t v20 = 1;
          }
          while ((v12 & 1) != 0);
          uint64_t v18 = (re::Allocator *)((char *)v18 + 1);
          if (*v19 > (unint64_t)v18) {
            continue;
          }
          break;
        }
      }
      ++v10;
      uint64_t v12 = 336;
    }
    while (*(void *)(v8 + 216) > v10);
    uint64_t v7 = a3;
    uint64_t v9 = a1;
    if ((v11 & 1) == 0) {
      return 1;
    }
  }
  *(void *)&v112[2] = 0;
  memset(v110, 0, sizeof(v110));
  uint64_t v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  unint64_t v85 = 0;
  unint64_t v86 = 0;
  re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount((uint64_t *)v8, &v86, &v85);
  uint64_t v84 = 0;
  v81[1] = 0;
  uint64_t v82 = 0;
  int v83 = 0;
  uint64_t v18 = a4;
  v81[0] = a4;
  re::DynamicArray<re::CameraView>::setCapacity(v81, v86);
  ++v83;
  uint64_t v80 = 0;
  v77[1] = 0;
  uint64_t v78 = 0;
  int v79 = 0;
  v77[0] = a4;
  re::DynamicArray<re::CameraMultiView>::setCapacity(v77, v85);
  ++v79;
  uint64_t v76 = 0;
  v74[1] = 0;
  v74[2] = 0;
  int v75 = 0;
  v74[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v74, v86);
  ++v75;
  uint64_t v73 = 0;
  v71[1] = 0;
  v71[2] = 0;
  int v72 = 0;
  v71[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v71, v85);
  int v27 = 0;
  ++v72;
  if (v26) {
    uint64_t v19 = (uint64_t *)(v26 + 40);
  }
  else {
    uint64_t v19 = (uint64_t *)v110;
  }
  *(void *)&long long v90 = v8;
  *(void *)&long long v91 = 0;
  uint64_t v12 = a6;
  if (!*(void *)(v8 + 216))
  {
    if (*(void *)(v8 + 256))
    {
      int v27 = 1;
    }
    else
    {
LABEL_26:
      if (!*(void *)(v8 + 296))
      {
        int v29 = 1;
LABEL_44:
        uint64_t v35 = v6;
        do
        {
          uint64_t v36 = v35;
          uint64_t v35 = *(void *)(v35 + 24);
        }
        while (v35);
        uint64_t v37 = *(void *)(*(void *)(v36 + 16) + 376);
        if (v37) {
          LOBYTE(v37) = *(void *)(v37 + 24) != 1;
        }
        if (!*(void *)(v8 + 256) && (v37 & 1) == 0)
        {
          uint64_t v38 = 0;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v92 = xmmword_23435FBB0;
          *(void *)&long long v93 = 0x70000FF00000000;
          WORD4(v93) = 1;
          BYTE12(v93) = 0;
          uint64_t v98 = 0;
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          *((void *)&v94 + 1) = 0;
          int v97 = 0;
          do
          {
            uint64_t v39 = (char *)&v90 + v38;
            *((void *)v39 + 18) = 0;
            *((void *)v39 + 15) = 0;
            *((void *)v39 + 16) = 0;
            *((void *)v39 + 14) = 0;
            v38 += 40;
            *((_DWORD *)v39 + 34) = 0;
          }
          while (v38 != 80);
          char v99 = 0;
          long long v101 = xmmword_2343854A0;
          long long v100 = xmmword_2343854A0;
          long long v104 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          __int16 v105 = 1;
          char v106 = 0;
          uint64_t v109 = 0;
          memset(v107, 0, sizeof(v107));
          int v108 = 0;
          re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v8 + 240), (re::ecs2::CameraViewDescriptor *)&v90);
          if (*(unsigned char *)(v7 + 44))
          {
            uint64_t v41 = v7;
            uint64_t v42 = v84;
            uint64_t v43 = v82 - 1;
            uint64_t v44 = *(re::DrawingManager **)(v9 + 104);
            if (v44) {
              float v45 = re::DrawingManager::layerAspect(v44, 0, v40);
            }
            else {
              float v45 = 1.0;
            }
            re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v41, (float *)(v42 + 672 * v43 + 64), v45);
          }
          uint64_t v51 = *(void *)(v8 + 256);
          *(void *)(v8 + 256) = 0;
          re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v8 + 272), (re::AssetHandle *)(*(void *)(v8 + 272) + 336 * v51));
          ++*(_DWORD *)(v8 + 264);
          re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v107);
          for (uint64_t i = 272; i != 256; i -= 8)
          {
            uint64_t v53 = *(void **)((char *)&v90 + i);
            if (v53)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
          }
          do
          {
            uint64_t v54 = *(void **)((char *)&v90 + i);
            if (v54)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 240);
          do
          {
            unint64_t v55 = *(void **)((char *)&v90 + i);
            if (v55)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 224);
          for (uint64_t j = 152; j != 72; j -= 40)
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v90 + j);
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v94 + 8);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v90);
        }
        goto LABEL_76;
      }
      int v27 = 2;
    }
  }
  unsigned int v28 = 0;
  DWORD2(v90) = v27;
  int v29 = 1;
  do
  {
    uint64_t v30 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x20000);
    if (v27 == 1) {
      unsigned int v28 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x10000);
    }
    if (v27 == 2) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = v28;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v90);
    int v27 = DWORD2(v90);
    unsigned int v28 = (re::ecs2::CameraViewDescriptorsComponent *)v91;
  }
  while ((void)v90 != v8 || DWORD2(v90) != 3 || (void)v91 != 0);
  uint64_t v34 = *(void *)(v8 + 216);
  if (v34 == 1)
  {
    if (!*(void *)(v8 + 256) && !*(void *)(*(void *)(v8 + 232) + 304))
    {
      uint64_t v46 = v7;
      uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v8, 0);
      uint64_t v49 = v82 ? v84 + 672 * v82 - 672 : v80 + 1360 * v78 - 1360;
      if (*(unsigned char *)(v46 + 44))
      {
        LODWORD(v48) = *(_DWORD *)(ViewDescriptor + 204);
        float v63 = *(float *)(ViewDescriptor + 208);
        uint64_t v64 = *(re::DrawingManager **)(v9 + 104);
        float v65 = *(float *)&v48 / v63;
        if (v64) {
          float v66 = re::DrawingManager::layerAspect(v64, 0, v48);
        }
        else {
          float v66 = 1.0;
        }
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v46, (float *)(v49 + 64), v65 * v66);
      }
    }
    goto LABEL_76;
  }
  if (!v34) {
    goto LABEL_44;
  }
LABEL_76:
  if (*(void *)(v8 + 296))
  {
    unint64_t v57 = 0;
    uint64_t v58 = 336;
    do
    {
      uint64_t v59 = *(void *)(v8 + 312);
      uint64_t v60 = *(void *)(v9 + 104);
      if (v60) {
        uint64_t v61 = re::RenderFrameBox::get(v60 + 344, 0xFFFFFFFFFFFFFFFuLL);
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v88 = *(void *)(v59 + v58 + 24);
      uint64_t v89 = 0;
      re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>((uint64_t)v87, v59 + v58);
      re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((_anonymous_namespace_ *)(v61 + 3832), (uint64_t)v87);
      re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)v87);
      ++v57;
      v58 += 384;
    }
    while (*(void *)(v8 + 296) > v57);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 40, (uint64_t)v81);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 80, (uint64_t)v77);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 120, (uint64_t)v74);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 160, (uint64_t)v71);
  if (v29) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = 2;
  }
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v71);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v74);
  re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)v77);
  re::DynamicArray<re::CameraView>::deinit((uint64_t)v81);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)v110);
  return v50;
}

uint64_t anonymous namespace'::buildOneCameraView<re::ecs2::PerspectiveCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, re::ecs2::CameraViewDescriptorsComponent *this, _anonymous_namespace_ *a5, _anonymous_namespace_ *a6, _anonymous_namespace_ *a7, _anonymous_namespace_ *a8, uint64_t a9, re::Allocator *a10, re::ecs2::Entity *a11, uint64_t a12)
{
  uint64_t v15 = a2;
  uint64_t v190 = *MEMORY[0x263EF8340];
  uint64_t v138 = a11;
  if (!a11) {
    uint64_t v138 = (re::ecs2::Entity *)*((void *)this + 2);
  }
  unsigned int v16 = &v182;
  uint64_t ViewDescriptor = (re::CameraMultiView *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  int v17 = *((unsigned __int8 *)ViewDescriptor + 192);
  re::CameraView::CameraView((re::CameraView *)&v145, a10);
  re::CameraView::CameraView((re::CameraView *)v141, a10);
  re::CameraView::CameraView((re::CameraView *)&v143, a10);
  v144[224] = 2;
  long long v147 = 0uLL;
  *((void *)&v148 + 1) = 0x3F80000000000000;
  *(void *)&long long v148 = 0;
  if (v17)
  {
    unint64_t v19 = *((void *)a6 + 2);
    if (*((void *)this + 22) <= v19
      || !re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((void *)this + 24) + 336 * v19)))
    {
      uint64_t v22 = ViewDescriptor;
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, ViewDescriptor);
      goto LABEL_10;
    }
    uint64_t v20 = v15;
    uint64_t v21 = (int *)*((void *)this + 12);
    if ((unint64_t)v21 <= v19) {
      goto LABEL_108;
    }
    re::CameraMultiView::operator=((uint64_t)v141, *((void *)this + 14) + 1360 * v19);
    uint64_t v21 = (int *)*((void *)this + 22);
    if ((unint64_t)v21 > v19)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (uint64_t *)(*((void *)this + 24) + 336 * v19));
      uint64_t v22 = ViewDescriptor;
      uint64_t v15 = v20;
LABEL_10:
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)v144, v142);
      goto LABEL_34;
    }
LABEL_109:
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v182 = 136315906;
    *(void *)(v16 + 1) = "operator[]";
    WORD2(v183) = 1024;
    *(int *)((char *)v16 + 14) = 789;
    __int16 v184 = 2048;
    *(void *)(v16 + 5) = v19;
    __int16 v185 = 2048;
    *(void *)((char *)v16 + 30) = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_110;
  }
  unint64_t v19 = *((void *)a5 + 2);
  if (*((void *)this + 17) > v19
    && re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((void *)this + 19) + 336 * v19)))
  {
    uint64_t v133 = v15;
    uint64_t v21 = (int *)*((void *)this + 7);
    if ((unint64_t)v21 <= v19)
    {
LABEL_110:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v182 = 136315906;
      *(void *)(v16 + 1) = "operator[]";
      WORD2(v183) = 1024;
      *(int *)((char *)v16 + 14) = 789;
      __int16 v184 = 2048;
      *(void *)(v16 + 5) = v19;
      __int16 v185 = 2048;
      *(void *)((char *)v16 + 30) = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_111;
    }
    uint64_t v23 = *((void *)this + 9);
    uint64_t v24 = v23 + 672 * v19;
    re::DynamicString::operator=((re::DynamicString *)&v145, (re::DynamicString *)v24);
    long long v25 = *(_OWORD *)(v24 + 32);
    long long v26 = *(_OWORD *)(v24 + 48);
    long long v27 = *(_OWORD *)(v24 + 80);
    long long v149 = *(_OWORD *)(v24 + 64);
    long long v150 = v27;
    long long v147 = v25;
    long long v148 = v26;
    long long v28 = *(_OWORD *)(v24 + 96);
    long long v29 = *(_OWORD *)(v24 + 112);
    long long v30 = *(_OWORD *)(v24 + 144);
    long long v153 = *(_OWORD *)(v24 + 128);
    long long v154 = v30;
    long long v151 = v28;
    long long v152 = v29;
    long long v31 = *(_OWORD *)(v24 + 160);
    long long v32 = *(_OWORD *)(v24 + 176);
    long long v33 = *(_OWORD *)(v24 + 208);
    long long v157 = *(_OWORD *)(v24 + 192);
    long long v158 = v33;
    long long v155 = v31;
    long long v156 = v32;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v159, v24 + 224);
    v159[20] = *(_WORD *)(v24 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v160, v24 + 272);
    v160[3] = *(_OWORD *)(v24 + 320);
    long long v35 = *(_OWORD *)(v24 + 352);
    long long v34 = *(_OWORD *)(v24 + 368);
    long long v36 = *(_OWORD *)(v24 + 336);
    uint64_t v161 = *(re::ecs2::CameraViewDescriptorsComponent **)(v24 + 384);
    v160[5] = v35;
    v160[6] = v34;
    v160[4] = v36;
    char v162 = *(unsigned char *)(v24 + 400);
    if (v163 || *(unsigned char *)(v24 + 401))
    {
      if (!v163 || *(unsigned char *)(v24 + 401))
      {
        if (!v163) {
          BOOL v163 = *(unsigned char *)(v24 + 401) != 0;
        }
        char v164 = *(unsigned char *)(v23 + 672 * v19 + 402);
      }
      else
      {
        BOOL v163 = 0;
      }
    }
    if (v165 || *(unsigned char *)(v23 + 672 * v19 + 404))
    {
      if (!v165 || *(unsigned char *)(v23 + 672 * v19 + 404))
      {
        if (!v165) {
          BOOL v165 = *(unsigned char *)(v23 + 672 * v19 + 404) != 0;
        }
        int v166 = *(_DWORD *)(v23 + 672 * v19 + 408);
      }
      else
      {
        BOOL v165 = 0;
      }
    }
    uint64_t v37 = v23 + 672 * v19;
    long long v38 = *(_OWORD *)(v37 + 416);
    long long v39 = *(_OWORD *)(v37 + 432);
    long long v40 = *(_OWORD *)(v37 + 464);
    long long v169 = *(_OWORD *)(v37 + 448);
    long long v170 = v40;
    long long v167 = v38;
    long long v168 = v39;
    long long v41 = *(_OWORD *)(v37 + 480);
    long long v42 = *(_OWORD *)(v37 + 496);
    long long v43 = *(_OWORD *)(v37 + 528);
    long long v173 = *(_OWORD *)(v37 + 512);
    long long v174 = v43;
    long long v171 = v41;
    long long v172 = v42;
    long long v45 = *(_OWORD *)(v37 + 624);
    long long v44 = *(_OWORD *)(v37 + 640);
    long long v46 = *(_OWORD *)(v37 + 608);
    *(void *)((char *)v181 + 13) = *(void *)(v37 + 653);
    long long v180 = v45;
    v181[0] = v44;
    long long v179 = v46;
    long long v47 = *(_OWORD *)(v37 + 544);
    long long v48 = *(_OWORD *)(v37 + 560);
    long long v49 = *(_OWORD *)(v37 + 592);
    long long v177 = *(_OWORD *)(v37 + 576);
    long long v178 = v49;
    long long v175 = v47;
    long long v176 = v48;
    uint64_t v21 = (int *)*((void *)this + 17);
    if ((unint64_t)v21 <= v19)
    {
LABEL_111:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v182 = 136315906;
      *(void *)(v16 + 1) = "operator[]";
      WORD2(v183) = 1024;
      *(int *)((char *)v16 + 14) = 789;
      __int16 v184 = 2048;
      *(void *)(v16 + 5) = v19;
      __int16 v185 = 2048;
      *(void *)((char *)v16 + 30) = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (uint64_t *)(*((void *)this + 19) + 336 * v19));
    uint64_t v22 = ViewDescriptor;
    uint64_t v15 = v133;
  }
  else
  {
    uint64_t v22 = ViewDescriptor;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, ViewDescriptor);
  }
LABEL_34:
  if (!*((unsigned char *)v22 + 192))
  {
    re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v138, a10, 0, (re::DynamicString *)&v186);
    re::DynamicString::operator=((re::DynamicString *)&v145, (re::DynamicString *)&v186);
    if (void)v186 && (BYTE8(v186)) {
      (*(void (**)(void, void))(*(void *)v186 + 40))(v186, v187);
    }
    re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
    long long v171 = v186;
    long long v172 = v187;
    long long v173 = v188;
    long long v174 = v189;
    long long v103 = ViewDescriptor;
    long long v175 = *(_OWORD *)((char *)ViewDescriptor + 196);
    re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
    long long v151 = v188;
    long long v152 = v189;
    long long v149 = v186;
    long long v150 = v187;
    long long v176 = xmmword_2343854A0;
    long long v155 = v186;
    long long v156 = v187;
    long long v157 = v188;
    long long v158 = v189;
    uint64_t v161 = v15;
    *(void *)&double v104 = re::DynamicArray<re::CameraView>::add(a5, (re::DynamicString *)&v145).n128_u64[0];
    __int16 v105 = a1;
    if (!*((void *)ViewDescriptor + 38)) {
      goto LABEL_74;
    }
    uint64_t v106 = 0;
    unint64_t v19 = 0;
    uint64_t v139 = (re::ecs2::Entity *)(*((void *)a5 + 4) + 672 * (*((void *)a5 + 2) - 1));
    uint64_t v21 = (int *)((char *)v139 + 648);
    unsigned int v16 = (int *)&selRef_stepFunction_0;
    while (1)
    {
      float v107 = *((float *)v103 + 51);
      float v108 = *((float *)v103 + 52);
      uint64_t v109 = *((void *)v103 + 40);
      uint64_t v110 = v109 + v106;
      if (!*(void *)(v109 + v106 + 40)) {
        break;
      }
      uint64_t v111 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v110 + 32));
      if (*(_DWORD *)(v111 + 240))
      {
LABEL_107:
        std::__throw_bad_variant_access[abi:nn180100]();
LABEL_108:
        *((_OWORD *)v16 + 6) = 0u;
        *((_OWORD *)v16 + 7) = 0u;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 3) = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v182 = 136315906;
        *(void *)(v16 + 1) = "operator[]";
        WORD2(v183) = 1024;
        *(int *)((char *)v16 + 14) = 789;
        __int16 v184 = 2048;
        *(void *)(v16 + 5) = v19;
        __int16 v185 = 2048;
        *(void *)((char *)v16 + 30) = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_109;
      }
      id v112 = *(id *)(v111 + 160);
      float v113 = (float)(unint64_t)objc_msgSend(v112, sel_width);
      *(float *)&double v104 = (float)(unint64_t)objc_msgSend(v112, sel_height);
      float v114 = v113 / *(float *)&v104;
      if (v112) {

      }
LABEL_102:
      if (*(unsigned char *)(a3 + 44))
      {
        float v123 = (float)(v107 / v108) * v114;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v139 + 16, v123);
        *(float *)&double v104 = re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v139 + 40, v123);
      }
      ++v19;
      v106 += 136;
      __int16 v105 = a1;
      if (*((void *)v103 + 38) <= v19) {
        goto LABEL_74;
      }
    }
    unsigned int v115 = *(_DWORD *)(v110 + 80);
    if (v115 != -1)
    {
      long long v116 = (re::DrawingManager *)*((void *)v105 + 13);
      if (v116)
      {
        *(float *)&double v104 = re::DrawingManager::layerAspect(v116, v115, v104);
        float v114 = *(float *)&v104;
      }
      else
      {
        float v114 = 1.0;
      }
      goto LABEL_102;
    }
    uint64_t v117 = v109 + v106;
    int v118 = *(void **)(v109 + v106 + 88);
    if (v118)
    {
      id v119 = objc_msgSend(v118, sel_width, v104);
      uint64_t v120 = *(void **)(v117 + 88);
    }
    else
    {
      long long v121 = *(void **)(v117 + 104);
      if (!v121)
      {
        float v114 = 1.0;
LABEL_101:
        long long v103 = ViewDescriptor;
        goto LABEL_102;
      }
      id v119 = objc_msgSend(v121, sel_width, v104);
      uint64_t v120 = *(void **)(v117 + 104);
    }
    id v122 = objc_msgSend(v120, sel_height);
    re::ecs2::PerspectiveCameraComponent::localEyePose((_OWORD *)a3, *v21, (uint64_t)&v186);
    if (a12 && !*(_DWORD *)(a12 + 24))
    {
      re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v186, *v21, v139);
      *((unsigned char *)v139 + 347) = *(unsigned char *)(a12 + 28);
    }
    *(float *)&double v104 = (float)(unint64_t)v119;
    float v114 = (float)(unint64_t)v119 / (float)(unint64_t)v122;
    goto LABEL_101;
  }
  re::DynamicArray<re::CameraMultiView>::add(a6, (uint64_t)v141);
  uint64_t v50 = *((void *)a6 + 4);
  uint64_t v51 = *((void *)a6 + 2) - 1;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v138, a10, 0, (re::DynamicString *)&v186);
  uint64_t v125 = v50 + 1360 * v51;
  re::DynamicString::operator=((re::DynamicString *)v125, (re::DynamicString *)&v186);
  if (void)v186 && (BYTE8(v186)) {
    (*(void (**)(void))(*(void *)v186 + 40))();
  }
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  long long v52 = v186;
  long long v53 = v187;
  long long v54 = v189;
  *(_OWORD *)(v125 + 512) = v188;
  *(_OWORD *)(v125 + 528) = v54;
  *(_OWORD *)(v125 + 480) = v52;
  *(_OWORD *)(v125 + 496) = v53;
  *(_OWORD *)(v125 + 544) = *(_OWORD *)((char *)ViewDescriptor + 196);
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  long long v55 = v186;
  long long v56 = v187;
  long long v57 = v189;
  *(_OWORD *)(v125 + 96) = v188;
  *(_OWORD *)(v125 + 112) = v57;
  *(_OWORD *)(v125 + 64) = v55;
  *(_OWORD *)(v125 + 80) = v56;
  *(_OWORD *)(v125 + 560) = xmmword_2343854A0;
  long long v58 = *(_OWORD *)(v125 + 80);
  *(_OWORD *)(v125 + 160) = *(_OWORD *)(v125 + 64);
  *(_OWORD *)(v125 + 176) = v58;
  long long v59 = *(_OWORD *)(v125 + 112);
  *(_OWORD *)(v125 + 192) = *(_OWORD *)(v125 + 96);
  *(_OWORD *)(v125 + 208) = v59;
  *(void *)(v125 + 384) = v15;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v138, a10, 1, (re::DynamicString *)&v186);
  re::DynamicString::operator=((re::DynamicString *)(v125 + 672), (re::DynamicString *)&v186);
  if (void)v186 && (BYTE8(v186)) {
    (*(void (**)(void))(*(void *)v186 + 40))();
  }
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  long long v60 = v186;
  long long v61 = v187;
  long long v62 = v188;
  *(_OWORD *)(v125 + 1200) = v189;
  *(_OWORD *)(v125 + 1184) = v62;
  *(_OWORD *)(v125 + 1168) = v61;
  *(_OWORD *)(v125 + 1152) = v60;
  float v63 = ViewDescriptor;
  *(_OWORD *)(v125 + 1216) = *(_OWORD *)((char *)ViewDescriptor + 212);
  re::ecs2::PerspectiveCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  uint64_t v64 = 0;
  long long v65 = v186;
  long long v66 = v187;
  long long v67 = v189;
  *(_OWORD *)(v125 + 768) = v188;
  *(_OWORD *)(v125 + 784) = v67;
  *(_OWORD *)(v125 + 736) = v65;
  *(_OWORD *)(v125 + 752) = v66;
  *(_OWORD *)(v125 + 1232) = xmmword_2343854A0;
  long long v68 = *(_OWORD *)(v125 + 784);
  *(_OWORD *)(v125 + 864) = *(_OWORD *)(v125 + 768);
  *(_OWORD *)(v125 + 880) = v68;
  long long v69 = *(_OWORD *)(v125 + 752);
  *(_OWORD *)(v125 + 832) = *(_OWORD *)(v125 + 736);
  *(_OWORD *)(v125 + 848) = v69;
  *(void *)(v125 + 1056) = v15;
  uint64_t v70 = v50 + 1360 * v51;
  __int16 v71 = (unsigned char *)(v70 + 1344);
  uint64_t v134 = (unsigned char *)(v70 + 1345);
  unint64_t v72 = *((void *)ViewDescriptor + 38);
  char v73 = 1;
  int v74 = a1;
  do
  {
    char v75 = v73;
    if (!v72) {
      goto LABEL_73;
    }
    char v128 = v73;
    unint64_t v19 = 0;
    unint64_t v76 = 0;
    long long v127 = (re::DynamicString *)(v125 + 672 * v64);
    uint64_t v77 = (char *)v63 + 16 * v64;
    uint64_t v21 = (int *)(v77 + 204);
    uint64_t v78 = (float *)(v77 + 208);
    long long v132 = (int *)((char *)v127 + 648);
    long long v126 = (char *)v127 + 347;
    uint64_t v130 = 8 * v64;
    uint64_t v136 = (_anonymous_namespace_ *)(4 * v64 + 80);
    uint64_t v79 = 24 * v64 + 32;
    unsigned int v16 = (int *)a3;
    do
    {
      float v80 = *(float *)v21;
      float v81 = *v78;
      uint64_t v82 = *((void *)v63 + 40);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v182, (const re::AssetHandle *)(v82 + v79 + v19));
      if (*v71 == 1) {
        re::AssetHandle::operator=((uint64_t)&v182, (uint64_t *)(v82 + v19 + 32));
      }
      float v84 = v80 / v81;
      if (v183)
      {
        uint64_t v85 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v182);
        if (*(_DWORD *)(v85 + 240)) {
          goto LABEL_107;
        }
        id v86 = *(id *)(v85 + 160);
        float v87 = (float)(unint64_t)objc_msgSend(v86, sel_width);
        float v88 = v87 / (float)(unint64_t)objc_msgSend(v86, sel_height);
        id v89 = objc_msgSend(v86, sel_arrayLength);
        if (v86) {

        }
LABEL_65:
        if (*v71 == 1 && (unint64_t)v89 >= 2)
        {
          *uint64_t v134 = 1;
          float v84 = *(float *)v21 / *v78;
          if (([*((id *)v74 + 23) supportsTexture2DMultisampleArray] & 1) == 0) {
            *((_DWORD *)v127 + 89) = 1;
          }
        }
        goto LABEL_69;
      }
      unsigned int v90 = *(_DWORD *)((char *)v136 + v82 + v19);
      if (v90 == -1)
      {
        unint64_t v92 = v82 + v130 + v19;
        long long v93 = *(void **)(v92 + 88);
        if (v93)
        {
          id v94 = objc_msgSend(v93, sel_width);
          id v95 = objc_msgSend(*(id *)(v92 + 88), sel_height);
          id v89 = objc_msgSend(*(id *)(v92 + 88), sel_arrayLength);
          re::ecs2::PerspectiveCameraComponent::localEyePose(v16, *v132, (uint64_t)&v186);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v186, *v132, v127);
            unsigned char *v126 = *(unsigned char *)(a12 + 28);
          }
          float v96 = (float)(unint64_t)v94;
        }
        else
        {
          int v97 = *(void **)(v92 + 104);
          if (!v97) {
            goto LABEL_71;
          }
          uint64_t v98 = v16;
          id v99 = objc_msgSend(v97, sel_width);
          id v95 = objc_msgSend(*(id *)(v92 + 104), sel_height);
          id v89 = objc_msgSend(*(id *)(v92 + 104), sel_arrayLength);
          re::ecs2::PerspectiveCameraComponent::localEyePose(v98, *v132, (uint64_t)&v186);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v186, *v132, v127);
            unsigned char *v126 = *(unsigned char *)(a12 + 28);
          }
          float v96 = (float)(unint64_t)v99;
        }
        float v88 = v96 / (float)(unint64_t)v95;
        unsigned int v16 = (int *)a3;
        int v74 = a1;
        goto LABEL_65;
      }
      long long v91 = (re::DrawingManager *)*((void *)v74 + 13);
      if (v91) {
        float v88 = re::DrawingManager::layerAspect(v91, v90, v83);
      }
      else {
        float v88 = 1.0;
      }
LABEL_69:
      if (*((unsigned char *)v16 + 44))
      {
        float v100 = v88 * v84;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v127 + 16, v100);
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v127 + 40, v100);
      }
LABEL_71:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v182);
      ++v76;
      float v63 = ViewDescriptor;
      unint64_t v72 = *((void *)ViewDescriptor + 38);
      v19 += 136;
    }
    while (v72 > v76);
    char v75 = v128;
LABEL_73:
    char v73 = 0;
    uint64_t v64 = 1;
  }
  while ((v75 & 1) != 0);
LABEL_74:
  uint64_t v101 = 1344;
  do
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v141[v101 - 400]);
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v141[v101 - 448]);
    re::DynamicString::deinit((re::DynamicString *)&v141[v101 - 672]);
    v101 -= 672;
  }
  while (v101);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v160);
  re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v159);
  if (v145 && (v146 & 1) != 0) {
    (*(void (**)(void))(*(void *)v145 + 40))();
  }
  return v124;
}

uint64_t re::ecs2::CameraViewDescriptorsHelper::buildCameraViews<re::ecs2::OrthographicCameraComponent>(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  if (!a5) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (*(void *)(a2 + 216))
  {
    unint64_t v10 = 0;
    char v11 = 1;
    uint64_t v12 = 336;
    uint64_t v9 = 24;
    do
    {
      uint64_t v13 = *(void *)(v8 + 232);
      char v14 = (re::AssetHandle *)(v13 + 336 * v10);
      uint64_t v15 = *((void *)v14 + 1);
      if (v15)
      {
        unsigned int v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 != 2)
        {
          re::AssetHandle::loadAsync(v14);
          char v11 = 0;
        }
      }
      uint64_t v17 = v13 + 336 * v10;
      if (*(void *)(v17 + 304))
      {
        uint64_t v18 = 0;
        unint64_t v19 = (uint64_t *)(v17 + 304);
        uint64_t v7 = v13 + 336 * v10 + 320;
        while (2)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 1;
          do
          {
            uint64_t v22 = *v19;
            if (*v19 <= (unint64_t)v18)
            {
              v81[0] = 0;
              long long v93 = 0u;
              long long v94 = 0u;
              long long v91 = 0u;
              long long v92 = 0u;
              long long v90 = 0u;
              uint64_t v8 = &_os_log_internal;
              os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
              *(_DWORD *)uint64_t v110 = 136315906;
              *(void *)&v110[4] = "operator[]";
              *(_WORD *)&v110[12] = 1024;
              *(_DWORD *)&v110[14] = 797;
              *(_WORD *)&v110[18] = 2048;
              *(void *)&v110[20] = v18;
              __int16 v111 = 2048;
              *(void *)id v112 = v22;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_26;
            }
            uint64_t v12 = v21;
            uint64_t v23 = *(void *)v7 + 136 * (void)v18 + 24 * v20;
            uint64_t v24 = *(void *)(v23 + 40);
            if (v24)
            {
              unsigned int v25 = atomic_load((unsigned int *)(v24 + 704));
              if (v25 != 2)
              {
                re::AssetHandle::loadAsync((re::AssetHandle *)(v23 + 32));
                char v11 = 0;
              }
            }
            uint64_t v21 = 0;
            uint64_t v20 = 1;
          }
          while ((v12 & 1) != 0);
          uint64_t v18 = (re::Allocator *)((char *)v18 + 1);
          if (*v19 > (unint64_t)v18) {
            continue;
          }
          break;
        }
      }
      ++v10;
      uint64_t v12 = 336;
    }
    while (*(void *)(v8 + 216) > v10);
    uint64_t v7 = a3;
    uint64_t v9 = a1;
    if ((v11 & 1) == 0) {
      return 1;
    }
  }
  *(void *)&v112[2] = 0;
  memset(v110, 0, sizeof(v110));
  uint64_t v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderGraphFileProviderArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  unint64_t v85 = 0;
  unint64_t v86 = 0;
  re::ecs2::CameraViewDescriptorsComponent::getCameraViewsCount((uint64_t *)v8, &v86, &v85);
  uint64_t v84 = 0;
  v81[1] = 0;
  uint64_t v82 = 0;
  int v83 = 0;
  uint64_t v18 = a4;
  v81[0] = a4;
  re::DynamicArray<re::CameraView>::setCapacity(v81, v86);
  ++v83;
  uint64_t v80 = 0;
  v77[1] = 0;
  uint64_t v78 = 0;
  int v79 = 0;
  v77[0] = a4;
  re::DynamicArray<re::CameraMultiView>::setCapacity(v77, v85);
  ++v79;
  uint64_t v76 = 0;
  v74[1] = 0;
  v74[2] = 0;
  int v75 = 0;
  v74[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v74, v86);
  ++v75;
  uint64_t v73 = 0;
  v71[1] = 0;
  v71[2] = 0;
  int v72 = 0;
  v71[0] = a4;
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::setCapacity(v71, v85);
  int v27 = 0;
  ++v72;
  if (v26) {
    unint64_t v19 = (uint64_t *)(v26 + 40);
  }
  else {
    unint64_t v19 = (uint64_t *)v110;
  }
  *(void *)&long long v90 = v8;
  *(void *)&long long v91 = 0;
  uint64_t v12 = a6;
  if (!*(void *)(v8 + 216))
  {
    if (*(void *)(v8 + 256))
    {
      int v27 = 1;
    }
    else
    {
LABEL_26:
      if (!*(void *)(v8 + 296))
      {
        int v29 = 1;
LABEL_44:
        uint64_t v35 = v6;
        do
        {
          uint64_t v36 = v35;
          uint64_t v35 = *(void *)(v35 + 24);
        }
        while (v35);
        uint64_t v37 = *(void *)(*(void *)(v36 + 16) + 376);
        if (v37) {
          LOBYTE(v37) = *(void *)(v37 + 24) != 1;
        }
        if (!*(void *)(v8 + 256) && (v37 & 1) == 0)
        {
          uint64_t v38 = 0;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v92 = xmmword_23435FBB0;
          *(void *)&long long v93 = 0x70000FF00000000;
          WORD4(v93) = 1;
          BYTE12(v93) = 0;
          uint64_t v98 = 0;
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          *((void *)&v94 + 1) = 0;
          int v97 = 0;
          do
          {
            long long v39 = (char *)&v90 + v38;
            *((void *)v39 + 18) = 0;
            *((void *)v39 + 15) = 0;
            *((void *)v39 + 16) = 0;
            *((void *)v39 + 14) = 0;
            v38 += 40;
            *((_DWORD *)v39 + 34) = 0;
          }
          while (v38 != 80);
          char v99 = 0;
          long long v101 = xmmword_2343854A0;
          long long v100 = xmmword_2343854A0;
          long long v104 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          __int16 v105 = 1;
          char v106 = 0;
          uint64_t v109 = 0;
          memset(v107, 0, sizeof(v107));
          int v108 = 0;
          re::DynamicArray<re::ecs2::CameraViewDescriptor>::add((_anonymous_namespace_ *)(v8 + 240), (re::ecs2::CameraViewDescriptor *)&v90);
          if (*(unsigned char *)(v7 + 44))
          {
            uint64_t v41 = v7;
            uint64_t v42 = v84;
            uint64_t v43 = v82 - 1;
            long long v44 = *(re::DrawingManager **)(v9 + 104);
            if (v44) {
              float v45 = re::DrawingManager::layerAspect(v44, 0, v40);
            }
            else {
              float v45 = 1.0;
            }
            re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v41, (float *)(v42 + 672 * v43 + 64), v45);
          }
          uint64_t v51 = *(void *)(v8 + 256);
          *(void *)(v8 + 256) = 0;
          re::ObjectHelper::destroy<re::ecs2::CameraViewDescriptor>(*(re::AssetHandle **)(v8 + 272), (re::AssetHandle *)(*(void *)(v8 + 272) + 336 * v51));
          ++*(_DWORD *)(v8 + 264);
          re::DynamicArray<re::ecs2::SpecifyLaneCommand>::deinit((uint64_t)v107);
          for (uint64_t i = 272; i != 256; i -= 8)
          {
            long long v53 = *(void **)((char *)&v90 + i);
            if (v53)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
          }
          do
          {
            long long v54 = *(void **)((char *)&v90 + i);
            if (v54)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 240);
          do
          {
            long long v55 = *(void **)((char *)&v90 + i);
            if (v55)
            {

              *(void *)((char *)&v90 + i) = 0;
            }
            i -= 8;
          }
          while (i != 224);
          for (uint64_t j = 152; j != 72; j -= 40)
            re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v90 + j);
          re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v94 + 8);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v90);
        }
        goto LABEL_76;
      }
      int v27 = 2;
    }
  }
  long long v28 = 0;
  DWORD2(v90) = v27;
  int v29 = 1;
  do
  {
    long long v30 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x20000);
    if (v27 == 1) {
      long long v28 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v28 + 0x10000);
    }
    if (v27 == 2) {
      long long v31 = v30;
    }
    else {
      long long v31 = v28;
    }
    re::ecs2::CameraViewDescriptorsComponent::ViewDescriptorIterator::operator++((uint64_t *)&v90);
    int v27 = DWORD2(v90);
    long long v28 = (re::ecs2::CameraViewDescriptorsComponent *)v91;
  }
  while ((void)v90 != v8 || DWORD2(v90) != 3 || (void)v91 != 0);
  uint64_t v34 = *(void *)(v8 + 216);
  if (v34 == 1)
  {
    if (!*(void *)(v8 + 256) && !*(void *)(*(void *)(v8 + 232) + 304))
    {
      uint64_t v46 = v7;
      uint64_t ViewDescriptor = re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor((re::ecs2::CameraViewDescriptorsComponent *)v8, 0);
      uint64_t v49 = v82 ? v84 + 672 * v82 - 672 : v80 + 1360 * v78 - 1360;
      if (*(unsigned char *)(v46 + 44))
      {
        LODWORD(v48) = *(_DWORD *)(ViewDescriptor + 204);
        float v63 = *(float *)(ViewDescriptor + 208);
        uint64_t v64 = *(re::DrawingManager **)(v9 + 104);
        float v65 = *(float *)&v48 / v63;
        if (v64) {
          float v66 = re::DrawingManager::layerAspect(v64, 0, v48);
        }
        else {
          float v66 = 1.0;
        }
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(v46, (float *)(v49 + 64), v65 * v66);
      }
    }
    goto LABEL_76;
  }
  if (!v34) {
    goto LABEL_44;
  }
LABEL_76:
  if (*(void *)(v8 + 296))
  {
    unint64_t v57 = 0;
    uint64_t v58 = 336;
    do
    {
      uint64_t v59 = *(void *)(v8 + 312);
      uint64_t v60 = *(void *)(v9 + 104);
      if (v60) {
        uint64_t v61 = re::RenderFrameBox::get(v60 + 344, 0xFFFFFFFFFFFFFFFuLL);
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v88 = *(void *)(v59 + v58 + 24);
      uint64_t v89 = 0;
      re::FunctionBase<24ul,void ()(re::FrameCount)>::operator=<24ul>((uint64_t)v87, v59 + v58);
      re::DynamicArray<re::Function<void ()(re::FrameCount)>>::add((_anonymous_namespace_ *)(v61 + 3832), (uint64_t)v87);
      re::FunctionBase<24ul,void ()(re::FrameCount)>::destroyCallable((uint64_t)v87);
      ++v57;
      v58 += 384;
    }
    while (*(void *)(v8 + 296) > v57);
  }
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 40, (uint64_t)v81);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 80, (uint64_t)v77);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 120, (uint64_t)v74);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v8 + 160, (uint64_t)v71);
  if (v29) {
    uint64_t v50 = 0;
  }
  else {
    uint64_t v50 = 2;
  }
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v71);
  re::DynamicArray<re::ecs2::CameraViewDescriptor>::deinit(v74);
  re::DynamicArray<re::CameraMultiView>::deinit((uint64_t)v77);
  re::DynamicArray<re::CameraView>::deinit((uint64_t)v81);
  re::DynamicArray<re::ecs2::RenderGraphFileProviderEntry>::deinit((uint64_t)v110);
  return v50;
}

uint64_t anonymous namespace'::buildOneCameraView<re::ecs2::OrthographicCameraComponent>(_anonymous_namespace_ *a1, re::ecs2::CameraViewDescriptorsComponent *a2, uint64_t a3, re::ecs2::CameraViewDescriptorsComponent *this, _anonymous_namespace_ *a5, _anonymous_namespace_ *a6, _anonymous_namespace_ *a7, _anonymous_namespace_ *a8, uint64_t a9, re::Allocator *a10, re::ecs2::Entity *a11, uint64_t a12)
{
  uint64_t v15 = a2;
  uint64_t v190 = *MEMORY[0x263EF8340];
  uint64_t v138 = a11;
  if (!a11) {
    uint64_t v138 = (re::ecs2::Entity *)*((void *)this + 2);
  }
  unsigned int v16 = &v182;
  uint64_t ViewDescriptor = (re::CameraMultiView *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(this, a2);
  int v17 = *((unsigned __int8 *)ViewDescriptor + 192);
  re::CameraView::CameraView((re::CameraView *)&v145, a10);
  re::CameraView::CameraView((re::CameraView *)v141, a10);
  re::CameraView::CameraView((re::CameraView *)&v143, a10);
  v144[224] = 2;
  long long v147 = 0uLL;
  *((void *)&v148 + 1) = 0x3F80000000000000;
  *(void *)&long long v148 = 0;
  if (v17)
  {
    unint64_t v19 = *((void *)a6 + 2);
    if (*((void *)this + 22) <= v19
      || !re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((void *)this + 24) + 336 * v19)))
    {
      uint64_t v22 = ViewDescriptor;
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, ViewDescriptor);
      goto LABEL_10;
    }
    uint64_t v20 = v15;
    uint64_t v21 = (int *)*((void *)this + 12);
    if ((unint64_t)v21 <= v19) {
      goto LABEL_108;
    }
    re::CameraMultiView::operator=((uint64_t)v141, *((void *)this + 14) + 1360 * v19);
    uint64_t v21 = (int *)*((void *)this + 22);
    if ((unint64_t)v21 > v19)
    {
      re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a8, (uint64_t *)(*((void *)this + 24) + 336 * v19));
      uint64_t v22 = ViewDescriptor;
      uint64_t v15 = v20;
LABEL_10:
      re::DynamicArray<re::RenderGraphFileProvider>::operator=((uint64_t)v144, v142);
      goto LABEL_34;
    }
LABEL_109:
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
    int v182 = 136315906;
    *(void *)(v16 + 1) = "operator[]";
    WORD2(v183) = 1024;
    *(int *)((char *)v16 + 14) = 789;
    __int16 v184 = 2048;
    *(void *)(v16 + 5) = v19;
    __int16 v185 = 2048;
    *(void *)((char *)v16 + 30) = v21;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_110;
  }
  unint64_t v19 = *((void *)a5 + 2);
  if (*((void *)this + 17) > v19
    && re::ecs2::CameraViewDescriptor::operator==((float32x4_t *)ViewDescriptor, (float32x4_t *)(*((void *)this + 19) + 336 * v19)))
  {
    uint64_t v133 = v15;
    uint64_t v21 = (int *)*((void *)this + 7);
    if ((unint64_t)v21 <= v19)
    {
LABEL_110:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v182 = 136315906;
      *(void *)(v16 + 1) = "operator[]";
      WORD2(v183) = 1024;
      *(int *)((char *)v16 + 14) = 789;
      __int16 v184 = 2048;
      *(void *)(v16 + 5) = v19;
      __int16 v185 = 2048;
      *(void *)((char *)v16 + 30) = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_111;
    }
    uint64_t v23 = *((void *)this + 9);
    uint64_t v24 = v23 + 672 * v19;
    re::DynamicString::operator=((re::DynamicString *)&v145, (re::DynamicString *)v24);
    long long v25 = *(_OWORD *)(v24 + 32);
    long long v26 = *(_OWORD *)(v24 + 48);
    long long v27 = *(_OWORD *)(v24 + 80);
    long long v149 = *(_OWORD *)(v24 + 64);
    long long v150 = v27;
    long long v147 = v25;
    long long v148 = v26;
    long long v28 = *(_OWORD *)(v24 + 96);
    long long v29 = *(_OWORD *)(v24 + 112);
    long long v30 = *(_OWORD *)(v24 + 144);
    long long v153 = *(_OWORD *)(v24 + 128);
    long long v154 = v30;
    long long v151 = v28;
    long long v152 = v29;
    long long v31 = *(_OWORD *)(v24 + 160);
    long long v32 = *(_OWORD *)(v24 + 176);
    long long v33 = *(_OWORD *)(v24 + 208);
    long long v157 = *(_OWORD *)(v24 + 192);
    long long v158 = v33;
    long long v155 = v31;
    long long v156 = v32;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v159, v24 + 224);
    v159[20] = *(_WORD *)(v24 + 264);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v160, v24 + 272);
    v160[3] = *(_OWORD *)(v24 + 320);
    long long v35 = *(_OWORD *)(v24 + 352);
    long long v34 = *(_OWORD *)(v24 + 368);
    long long v36 = *(_OWORD *)(v24 + 336);
    uint64_t v161 = *(re::ecs2::CameraViewDescriptorsComponent **)(v24 + 384);
    v160[5] = v35;
    v160[6] = v34;
    v160[4] = v36;
    char v162 = *(unsigned char *)(v24 + 400);
    if (v163 || *(unsigned char *)(v24 + 401))
    {
      if (!v163 || *(unsigned char *)(v24 + 401))
      {
        if (!v163) {
          BOOL v163 = *(unsigned char *)(v24 + 401) != 0;
        }
        char v164 = *(unsigned char *)(v23 + 672 * v19 + 402);
      }
      else
      {
        BOOL v163 = 0;
      }
    }
    if (v165 || *(unsigned char *)(v23 + 672 * v19 + 404))
    {
      if (!v165 || *(unsigned char *)(v23 + 672 * v19 + 404))
      {
        if (!v165) {
          BOOL v165 = *(unsigned char *)(v23 + 672 * v19 + 404) != 0;
        }
        int v166 = *(_DWORD *)(v23 + 672 * v19 + 408);
      }
      else
      {
        BOOL v165 = 0;
      }
    }
    uint64_t v37 = v23 + 672 * v19;
    long long v38 = *(_OWORD *)(v37 + 416);
    long long v39 = *(_OWORD *)(v37 + 432);
    long long v40 = *(_OWORD *)(v37 + 464);
    long long v169 = *(_OWORD *)(v37 + 448);
    long long v170 = v40;
    long long v167 = v38;
    long long v168 = v39;
    long long v41 = *(_OWORD *)(v37 + 480);
    long long v42 = *(_OWORD *)(v37 + 496);
    long long v43 = *(_OWORD *)(v37 + 528);
    long long v173 = *(_OWORD *)(v37 + 512);
    long long v174 = v43;
    long long v171 = v41;
    long long v172 = v42;
    long long v45 = *(_OWORD *)(v37 + 624);
    long long v44 = *(_OWORD *)(v37 + 640);
    long long v46 = *(_OWORD *)(v37 + 608);
    *(void *)((char *)v181 + 13) = *(void *)(v37 + 653);
    long long v180 = v45;
    v181[0] = v44;
    long long v179 = v46;
    long long v47 = *(_OWORD *)(v37 + 544);
    long long v48 = *(_OWORD *)(v37 + 560);
    long long v49 = *(_OWORD *)(v37 + 592);
    long long v177 = *(_OWORD *)(v37 + 576);
    long long v178 = v49;
    long long v175 = v47;
    long long v176 = v48;
    uint64_t v21 = (int *)*((void *)this + 17);
    if ((unint64_t)v21 <= v19)
    {
LABEL_111:
      *((_OWORD *)v16 + 6) = 0u;
      *((_OWORD *)v16 + 7) = 0u;
      *((_OWORD *)v16 + 4) = 0u;
      *((_OWORD *)v16 + 5) = 0u;
      *((_OWORD *)v16 + 3) = 0u;
      os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
      int v182 = 136315906;
      *(void *)(v16 + 1) = "operator[]";
      WORD2(v183) = 1024;
      *(int *)((char *)v16 + 14) = 789;
      __int16 v184 = 2048;
      *(void *)(v16 + 5) = v19;
      __int16 v185 = 2048;
      *(void *)((char *)v16 + 30) = v21;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, (uint64_t *)(*((void *)this + 19) + 336 * v19));
    uint64_t v22 = ViewDescriptor;
    uint64_t v15 = v133;
  }
  else
  {
    uint64_t v22 = ViewDescriptor;
    re::DynamicArray<re::ecs2::CameraViewDescriptor>::add(a7, ViewDescriptor);
  }
LABEL_34:
  if (!*((unsigned char *)v22 + 192))
  {
    re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v138, a10, 0, (re::DynamicString *)&v186);
    re::DynamicString::operator=((re::DynamicString *)&v145, (re::DynamicString *)&v186);
    if (void)v186 && (BYTE8(v186)) {
      (*(void (**)(void, void))(*(void *)v186 + 40))(v186, v187);
    }
    re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
    long long v171 = v186;
    long long v172 = v187;
    long long v173 = v188;
    long long v174 = v189;
    long long v103 = ViewDescriptor;
    long long v175 = *(_OWORD *)((char *)ViewDescriptor + 196);
    re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
    long long v151 = v188;
    long long v152 = v189;
    long long v149 = v186;
    long long v150 = v187;
    long long v176 = xmmword_2343854A0;
    long long v155 = v186;
    long long v156 = v187;
    long long v157 = v188;
    long long v158 = v189;
    uint64_t v161 = v15;
    *(void *)&double v104 = re::DynamicArray<re::CameraView>::add(a5, (re::DynamicString *)&v145).n128_u64[0];
    __int16 v105 = a1;
    if (!*((void *)ViewDescriptor + 38)) {
      goto LABEL_74;
    }
    uint64_t v106 = 0;
    unint64_t v19 = 0;
    uint64_t v139 = (re::ecs2::Entity *)(*((void *)a5 + 4) + 672 * (*((void *)a5 + 2) - 1));
    uint64_t v21 = (int *)((char *)v139 + 648);
    unsigned int v16 = (int *)&selRef_stepFunction_0;
    while (1)
    {
      float v107 = *((float *)v103 + 51);
      float v108 = *((float *)v103 + 52);
      uint64_t v109 = *((void *)v103 + 40);
      uint64_t v110 = v109 + v106;
      if (!*(void *)(v109 + v106 + 40)) {
        break;
      }
      uint64_t v111 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v110 + 32));
      if (*(_DWORD *)(v111 + 240))
      {
LABEL_107:
        std::__throw_bad_variant_access[abi:nn180100]();
LABEL_108:
        *((_OWORD *)v16 + 6) = 0u;
        *((_OWORD *)v16 + 7) = 0u;
        *((_OWORD *)v16 + 4) = 0u;
        *((_OWORD *)v16 + 5) = 0u;
        *((_OWORD *)v16 + 3) = 0u;
        os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR);
        int v182 = 136315906;
        *(void *)(v16 + 1) = "operator[]";
        WORD2(v183) = 1024;
        *(int *)((char *)v16 + 14) = 789;
        __int16 v184 = 2048;
        *(void *)(v16 + 5) = v19;
        __int16 v185 = 2048;
        *(void *)((char *)v16 + 30) = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_109;
      }
      id v112 = *(id *)(v111 + 160);
      float v113 = (float)(unint64_t)objc_msgSend(v112, sel_width);
      *(float *)&double v104 = (float)(unint64_t)objc_msgSend(v112, sel_height);
      float v114 = v113 / *(float *)&v104;
      if (v112) {

      }
LABEL_102:
      if (*(unsigned char *)(a3 + 44))
      {
        float v123 = (float)(v107 / v108) * v114;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v139 + 16, v123);
        *(float *)&double v104 = re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect(a3, (float *)v139 + 40, v123);
      }
      ++v19;
      v106 += 136;
      __int16 v105 = a1;
      if (*((void *)v103 + 38) <= v19) {
        goto LABEL_74;
      }
    }
    unsigned int v115 = *(_DWORD *)(v110 + 80);
    if (v115 != -1)
    {
      long long v116 = (re::DrawingManager *)*((void *)v105 + 13);
      if (v116)
      {
        *(float *)&double v104 = re::DrawingManager::layerAspect(v116, v115, v104);
        float v114 = *(float *)&v104;
      }
      else
      {
        float v114 = 1.0;
      }
      goto LABEL_102;
    }
    uint64_t v117 = v109 + v106;
    int v118 = *(void **)(v109 + v106 + 88);
    if (v118)
    {
      id v119 = objc_msgSend(v118, sel_width, v104);
      uint64_t v120 = *(void **)(v117 + 88);
    }
    else
    {
      long long v121 = *(void **)(v117 + 104);
      if (!v121)
      {
        float v114 = 1.0;
LABEL_101:
        long long v103 = ViewDescriptor;
        goto LABEL_102;
      }
      id v119 = objc_msgSend(v121, sel_width, v104);
      uint64_t v120 = *(void **)(v117 + 104);
    }
    id v122 = objc_msgSend(v120, sel_height);
    re::ecs2::OrthographicCameraComponent::localEyePose((_OWORD *)a3, *v21, (uint64_t)&v186);
    if (a12 && !*(_DWORD *)(a12 + 24))
    {
      re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v186, *v21, v139);
      *((unsigned char *)v139 + 347) = *(unsigned char *)(a12 + 28);
    }
    *(float *)&double v104 = (float)(unint64_t)v119;
    float v114 = (float)(unint64_t)v119 / (float)(unint64_t)v122;
    goto LABEL_101;
  }
  re::DynamicArray<re::CameraMultiView>::add(a6, (uint64_t)v141);
  uint64_t v50 = *((void *)a6 + 4);
  uint64_t v51 = *((void *)a6 + 2) - 1;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v138, a10, 0, (re::DynamicString *)&v186);
  uint64_t v125 = v50 + 1360 * v51;
  re::DynamicString::operator=((re::DynamicString *)v125, (re::DynamicString *)&v186);
  if (void)v186 && (BYTE8(v186)) {
    (*(void (**)(void))(*(void *)v186 + 40))();
  }
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  long long v52 = v186;
  long long v53 = v187;
  long long v54 = v189;
  *(_OWORD *)(v125 + 512) = v188;
  *(_OWORD *)(v125 + 528) = v54;
  *(_OWORD *)(v125 + 480) = v52;
  *(_OWORD *)(v125 + 496) = v53;
  *(_OWORD *)(v125 + 544) = *(_OWORD *)((char *)ViewDescriptor + 196);
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  long long v55 = v186;
  long long v56 = v187;
  long long v57 = v189;
  *(_OWORD *)(v125 + 96) = v188;
  *(_OWORD *)(v125 + 112) = v57;
  *(_OWORD *)(v125 + 64) = v55;
  *(_OWORD *)(v125 + 80) = v56;
  *(_OWORD *)(v125 + 560) = xmmword_2343854A0;
  long long v58 = *(_OWORD *)(v125 + 80);
  *(_OWORD *)(v125 + 160) = *(_OWORD *)(v125 + 64);
  *(_OWORD *)(v125 + 176) = v58;
  long long v59 = *(_OWORD *)(v125 + 112);
  *(_OWORD *)(v125 + 192) = *(_OWORD *)(v125 + 96);
  *(_OWORD *)(v125 + 208) = v59;
  *(void *)(v125 + 384) = v15;
  re::ecs2::CameraViewDescriptorsComponent::viewScopeName(this, v15, v138, a10, 1, (re::DynamicString *)&v186);
  re::DynamicString::operator=((re::DynamicString *)(v125 + 672), (re::DynamicString *)&v186);
  if (void)v186 && (BYTE8(v186)) {
    (*(void (**)(void))(*(void *)v186 + 40))();
  }
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  long long v60 = v186;
  long long v61 = v187;
  long long v62 = v188;
  *(_OWORD *)(v125 + 1200) = v189;
  *(_OWORD *)(v125 + 1184) = v62;
  *(_OWORD *)(v125 + 1168) = v61;
  *(_OWORD *)(v125 + 1152) = v60;
  float v63 = ViewDescriptor;
  *(_OWORD *)(v125 + 1216) = *(_OWORD *)((char *)ViewDescriptor + 212);
  re::ecs2::OrthographicCameraComponent::calculateProjection((float *)a3, (uint64_t)&v186, 1.0);
  uint64_t v64 = 0;
  long long v65 = v186;
  long long v66 = v187;
  long long v67 = v189;
  *(_OWORD *)(v125 + 768) = v188;
  *(_OWORD *)(v125 + 784) = v67;
  *(_OWORD *)(v125 + 736) = v65;
  *(_OWORD *)(v125 + 752) = v66;
  *(_OWORD *)(v125 + 1232) = xmmword_2343854A0;
  long long v68 = *(_OWORD *)(v125 + 784);
  *(_OWORD *)(v125 + 864) = *(_OWORD *)(v125 + 768);
  *(_OWORD *)(v125 + 880) = v68;
  long long v69 = *(_OWORD *)(v125 + 752);
  *(_OWORD *)(v125 + 832) = *(_OWORD *)(v125 + 736);
  *(_OWORD *)(v125 + 848) = v69;
  *(void *)(v125 + 1056) = v15;
  uint64_t v70 = v50 + 1360 * v51;
  __int16 v71 = (unsigned char *)(v70 + 1344);
  uint64_t v134 = (unsigned char *)(v70 + 1345);
  unint64_t v72 = *((void *)ViewDescriptor + 38);
  char v73 = 1;
  int v74 = a1;
  do
  {
    char v75 = v73;
    if (!v72) {
      goto LABEL_73;
    }
    char v128 = v73;
    unint64_t v19 = 0;
    unint64_t v76 = 0;
    long long v127 = (re::DynamicString *)(v125 + 672 * v64);
    uint64_t v77 = (char *)v63 + 16 * v64;
    uint64_t v21 = (int *)(v77 + 204);
    uint64_t v78 = (float *)(v77 + 208);
    long long v132 = (int *)((char *)v127 + 648);
    long long v126 = (char *)v127 + 347;
    uint64_t v130 = 8 * v64;
    uint64_t v136 = (_anonymous_namespace_ *)(4 * v64 + 80);
    uint64_t v79 = 24 * v64 + 32;
    unsigned int v16 = (int *)a3;
    do
    {
      float v80 = *(float *)v21;
      float v81 = *v78;
      uint64_t v82 = *((void *)v63 + 40);
      re::AssetHandle::AssetHandle((re::AssetHandle *)&v182, (const re::AssetHandle *)(v82 + v79 + v19));
      if (*v71 == 1) {
        re::AssetHandle::operator=((uint64_t)&v182, (uint64_t *)(v82 + v19 + 32));
      }
      float v84 = v80 / v81;
      if (v183)
      {
        uint64_t v85 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)&v182);
        if (*(_DWORD *)(v85 + 240)) {
          goto LABEL_107;
        }
        id v86 = *(id *)(v85 + 160);
        float v87 = (float)(unint64_t)objc_msgSend(v86, sel_width);
        float v88 = v87 / (float)(unint64_t)objc_msgSend(v86, sel_height);
        id v89 = objc_msgSend(v86, sel_arrayLength);
        if (v86) {

        }
LABEL_65:
        if (*v71 == 1 && (unint64_t)v89 >= 2)
        {
          *uint64_t v134 = 1;
          float v84 = *(float *)v21 / *v78;
          if (([*((id *)v74 + 23) supportsTexture2DMultisampleArray] & 1) == 0) {
            *((_DWORD *)v127 + 89) = 1;
          }
        }
        goto LABEL_69;
      }
      unsigned int v90 = *(_DWORD *)((char *)v136 + v82 + v19);
      if (v90 == -1)
      {
        unint64_t v92 = v82 + v130 + v19;
        long long v93 = *(void **)(v92 + 88);
        if (v93)
        {
          id v94 = objc_msgSend(v93, sel_width);
          id v95 = objc_msgSend(*(id *)(v92 + 88), sel_height);
          id v89 = objc_msgSend(*(id *)(v92 + 88), sel_arrayLength);
          re::ecs2::OrthographicCameraComponent::localEyePose(v16, *v132, (uint64_t)&v186);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v186, *v132, v127);
            unsigned char *v126 = *(unsigned char *)(a12 + 28);
          }
          float v96 = (float)(unint64_t)v94;
        }
        else
        {
          int v97 = *(void **)(v92 + 104);
          if (!v97) {
            goto LABEL_71;
          }
          uint64_t v98 = v16;
          id v99 = objc_msgSend(v97, sel_width);
          id v95 = objc_msgSend(*(id *)(v92 + 104), sel_height);
          id v89 = objc_msgSend(*(id *)(v92 + 104), sel_arrayLength);
          re::ecs2::OrthographicCameraComponent::localEyePose(v98, *v132, (uint64_t)&v186);
          if (a12 && !*(_DWORD *)(a12 + 24))
          {
            re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(a12, &v186, *v132, v127);
            unsigned char *v126 = *(unsigned char *)(a12 + 28);
          }
          float v96 = (float)(unint64_t)v99;
        }
        float v88 = v96 / (float)(unint64_t)v95;
        unsigned int v16 = (int *)a3;
        int v74 = a1;
        goto LABEL_65;
      }
      long long v91 = (re::DrawingManager *)*((void *)v74 + 13);
      if (v91) {
        float v88 = re::DrawingManager::layerAspect(v91, v90, v83);
      }
      else {
        float v88 = 1.0;
      }
LABEL_69:
      if (*((unsigned char *)v16 + 44))
      {
        float v100 = v88 * v84;
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v127 + 16, v100);
        re::ecs2::PerspectiveCameraComponent::adjustProjectionAspect((uint64_t)v16, (float *)v127 + 40, v100);
      }
LABEL_71:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v182);
      ++v76;
      float v63 = ViewDescriptor;
      unint64_t v72 = *((void *)ViewDescriptor + 38);
      v19 += 136;
    }
    while (v72 > v76);
    char v75 = v128;
LABEL_73:
    char v73 = 0;
    uint64_t v64 = 1;
  }
  while ((v75 & 1) != 0);
LABEL_74:
  uint64_t v101 = 1344;
  do
  {
    re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)&v141[v101 - 400]);
    re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)&v141[v101 - 448]);
    re::DynamicString::deinit((re::DynamicString *)&v141[v101 - 672]);
    v101 -= 672;
  }
  while (v101);
  re::DynamicArray<re::ecs2::ScopeLanePair>::deinit((uint64_t)v160);
  re::DynamicArray<re::RenderGraphFileProvider>::deinit((uint64_t)v159);
  if (v145 && (v146 & 1) != 0) {
    (*(void (**)(void))(*(void *)v145 + 40))();
  }
  return v124;
}